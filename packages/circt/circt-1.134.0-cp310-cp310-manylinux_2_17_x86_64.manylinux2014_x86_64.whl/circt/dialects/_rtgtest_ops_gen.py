
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir
_ods_cext.globals.register_traceback_file_exclusion(__file__)

import builtins
from typing import Sequence as _Sequence, Union as _Union, Optional as _Optional


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "rtgtest"

@_ods_cext.register_operation(_Dialect)
class ConstantTestOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.constant_test"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, value, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["value"] = (value if (
    isinstance(value, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('AnyAttr')) else
      _ods_ir.AttrBuilder.get('AnyAttr')(value, context=_ods_context))
    results = []
    results.append(result)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def value(self) -> _ods_ir.Attribute:
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value: _ods_ir.Attribute):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def result(self) -> _ods_ir.OpResult:
    return self.operation.results[0]

def constant_test(result, value, *, loc=None, ip=None) -> _ods_ir.OpResult:
  return ConstantTestOp(result=result, value=value, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class GetHartIdOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.get_hartid"

  _ODS_REGIONS = (0, True)

  def __init__(self, cpu, *, results=None, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(cpu)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def cpu(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def hartid(self) -> _ods_ir.OpResult:
    return self.operation.results[0]

def get_hartid(cpu, *, results=None, loc=None, ip=None) -> _ods_ir.OpResult:
  return GetHartIdOp(cpu=cpu, results=results, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ADD(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.add"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_add(rd, rs1, rs2, *, loc=None, ip=None) -> ADD:
  return ADD(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ADDI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.addi"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_addi(rd, rs, imm, *, loc=None, ip=None) -> ADDI:
  return ADDI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class AND(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.and"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_and(rd, rs1, rs2, *, loc=None, ip=None) -> AND:
  return AND(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ANDI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.andi"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_andi(rd, rs, imm, *, loc=None, ip=None) -> ANDI:
  return ANDI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class AUIPC(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.auipc"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[1]

def rv32i_auipc(rd, imm, *, loc=None, ip=None) -> AUIPC:
  return AUIPC(rd=rd, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BEQ(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.beq"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_beq(rs1, rs2, imm, *, loc=None, ip=None) -> BEQ:
  return BEQ(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BGE(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.bge"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_bge(rs1, rs2, imm, *, loc=None, ip=None) -> BGE:
  return BGE(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BGEU(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.bgeu"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_bgeu(rs1, rs2, imm, *, loc=None, ip=None) -> BGEU:
  return BGEU(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BLT(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.blt"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_blt(rs1, rs2, imm, *, loc=None, ip=None) -> BLT:
  return BLT(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BLTU(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.bltu"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_bltu(rs1, rs2, imm, *, loc=None, ip=None) -> BLTU:
  return BLTU(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BNE(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.bne"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_bne(rs1, rs2, imm, *, loc=None, ip=None) -> BNE:
  return BNE(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class EBREAKOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.ebreak"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def rv32i_ebreak(*, loc=None, ip=None) -> EBREAKOp:
  return EBREAKOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ECALLOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.ecall"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def rv32i_ecall(*, loc=None, ip=None) -> ECALLOp:
  return ECALLOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class JAL(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.jal"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[1]

def rv32i_jal(rd, imm, *, loc=None, ip=None) -> JAL:
  return JAL(rd=rd, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class JALROp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.jalr"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_jalr(rd, rs, imm, *, loc=None, ip=None) -> JALROp:
  return JALROp(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class LA(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.la"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, mem, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(mem)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def mem(self) -> _ods_ir.Value:
    return self.operation.operands[1]

def rv32i_la(rd, mem, *, loc=None, ip=None) -> LA:
  return LA(rd=rd, mem=mem, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class LBOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.lb"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_lb(rd, rs, imm, *, loc=None, ip=None) -> LBOp:
  return LBOp(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class LBUOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.lbu"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_lbu(rd, rs, imm, *, loc=None, ip=None) -> LBUOp:
  return LBUOp(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class LHOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.lh"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_lh(rd, rs, imm, *, loc=None, ip=None) -> LHOp:
  return LHOp(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class LHUOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.lhu"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_lhu(rd, rs, imm, *, loc=None, ip=None) -> LHUOp:
  return LHUOp(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class LUI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.lui"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[1]

def rv32i_lui(rd, imm, *, loc=None, ip=None) -> LUI:
  return LUI(rd=rd, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class LWOp(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.lw"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_lw(rd, rs, imm, *, loc=None, ip=None) -> LWOp:
  return LWOp(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class OR(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.or"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_or(rd, rs1, rs2, *, loc=None, ip=None) -> OR:
  return OR(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ORI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.ori"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_ori(rd, rs, imm, *, loc=None, ip=None) -> ORI:
  return ORI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SB(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sb"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sb(rs1, rs2, imm, *, loc=None, ip=None) -> SB:
  return SB(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SH(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sh"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sh(rs1, rs2, imm, *, loc=None, ip=None) -> SH:
  return SH(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SLL(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sll"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sll(rd, rs1, rs2, *, loc=None, ip=None) -> SLL:
  return SLL(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SLLI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.slli"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_slli(rd, rs, imm, *, loc=None, ip=None) -> SLLI:
  return SLLI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SLT(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.slt"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_slt(rd, rs1, rs2, *, loc=None, ip=None) -> SLT:
  return SLT(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SLTI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.slti"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_slti(rd, rs, imm, *, loc=None, ip=None) -> SLTI:
  return SLTI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SLTIU(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sltiu"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sltiu(rd, rs, imm, *, loc=None, ip=None) -> SLTIU:
  return SLTIU(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SLTU(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sltu"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sltu(rd, rs1, rs2, *, loc=None, ip=None) -> SLTU:
  return SLTU(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SRA(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sra"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sra(rd, rs1, rs2, *, loc=None, ip=None) -> SRA:
  return SRA(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SRAI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.srai"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_srai(rd, rs, imm, *, loc=None, ip=None) -> SRAI:
  return SRAI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SRL(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.srl"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_srl(rd, rs1, rs2, *, loc=None, ip=None) -> SRL:
  return SRL(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SRLI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.srli"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_srli(rd, rs, imm, *, loc=None, ip=None) -> SRLI:
  return SRLI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SUB(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sub"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sub(rd, rs1, rs2, *, loc=None, ip=None) -> SUB:
  return SUB(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SW(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.sw"

  _ODS_REGIONS = (0, True)

  def __init__(self, rs1, rs2, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rs1)
    operands.append(rs2)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_sw(rs1, rs2, imm, *, loc=None, ip=None) -> SW:
  return SW(rs1=rs1, rs2=rs2, imm=imm, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class XOR(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.xor"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs1, rs2, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs1)
    operands.append(rs2)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs1(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def rs2(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_xor(rd, rs1, rs2, *, loc=None, ip=None) -> XOR:
  return XOR(rd=rd, rs1=rs1, rs2=rs2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class XORI(_ods_ir.OpView):
  OPERATION_NAME = "rtgtest.rv32i.xori"

  _ODS_REGIONS = (0, True)

  def __init__(self, rd, rs, imm, *, loc=None, ip=None):
    operands = []
    attributes = {}
    regions = None
    operands.append(rd)
    operands.append(rs)
    operands.append(imm)
    _ods_context = _ods_get_default_loc_context(loc)
    results = []
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def rd(self) -> _ods_ir.Value:
    return self.operation.operands[0]

  @builtins.property
  def rs(self) -> _ods_ir.Value:
    return self.operation.operands[1]

  @builtins.property
  def imm(self) -> _ods_ir.Value:
    return self.operation.operands[2]

def rv32i_xori(rd, rs, imm, *, loc=None, ip=None) -> XORI:
  return XORI(rd=rd, rs=rs, imm=imm, loc=loc, ip=ip)
