[build-system]
requires = ["maturin>=1.9.5,<2.0"]
build-backend = "maturin"

[project]
name = "pysof"
version = "0.1.3"
description = "Python wrapper for the Helios Software SOF (SQL on FHIR) toolkit."
readme = "README.md"
requires-python = ">=3.11,<3.12"
keywords = ["SQL on FHIR", "FHIR", "healthcare", "sof", "Helios Software"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Healthcare Industry",
  "Topic :: Scientific/Engineering :: Medical Science Apps.",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = []
authors = [
    {name = "Helios Software", email = "team@heliossoftware.com"},
]
license = {text = "MIT"}
project-urls = { Homepage = "https://github.com/HeliosSoftware/hfs", Repository = "https://github.com/HeliosSoftware/hfs", Documentation = "https://github.com/HeliosSoftware/hfs/tree/main/crates/pysof", "Bug Tracker" = "https://github.com/HeliosSoftware/hfs/issues" }

[dependency-groups]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "maturin>=1.9.5,<2.0",
]

[project.scripts]
# No CLI scripts yet

[tool.maturin]
features = ["pyo3/extension-module"]
module-name = "pysof._pysof"
python-source = "src"
include = ["Cargo.toml", "pyproject.toml", "src/**/*", "README.md"]
manifest-path = "crates/pysof/Cargo.toml"

[tool.ruff]
target-version = "py311"
line-length = 88
src = ["src"]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "pysof._pysof"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-config",
    "--strict-markers",
    "--disable-warnings",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
