name: Release Capsule

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/capsule-cuda
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install Python
        run: uv python install 3.11

      - name: Sync dependencies
        run: uv sync --frozen

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Authenticate to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build capsule image
        run: |
          set -euo pipefail
          docker build --file capsule/Dockerfile --tag "${IMAGE_NAME}:${GITHUB_REF_NAME}" .

      - name: Push capsule image
        run: |
          set -euo pipefail
          docker push "${IMAGE_NAME}:${GITHUB_REF_NAME}"

      - name: Compute image digest
        id: digest
        run: |
          set -euo pipefail
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${IMAGE_NAME}:${GITHUB_REF_NAME}" | cut -d'@' -f2)
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
          echo "image_ref=${IMAGE_NAME}@${DIGEST}" >> "$GITHUB_OUTPUT"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Sign capsule image
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          IMAGE_DIGEST="${IMAGE_NAME}@${{ steps.digest.outputs.digest }}"
          if [ -n "${{ secrets.COSIGN_PRIVATE_KEY }}" ]; then
            printf '%s' "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
            if [ -n "${{ secrets.COSIGN_PASSWORD }}" ]; then
              export COSIGN_PASSWORD="${{ secrets.COSIGN_PASSWORD }}"
            fi
            cosign sign --key cosign.key --yes --output-signature capsule.sig --output-certificate capsule.pem "${IMAGE_DIGEST}"
            rm -f cosign.key
          else
            cosign sign --yes --output-signature capsule.sig --output-certificate capsule.pem "${IMAGE_DIGEST}"
          fi

      - name: Attest SBOM
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          IMAGE_DIGEST="${IMAGE_NAME}@${{ steps.digest.outputs.digest }}"
          cosign attest --yes --predicate sbom.spdx.json --type spdxjson "${IMAGE_DIGEST}"

      - name: Update vigil manifest with release digest
        id: pin_digest
        run: |
          set -euo pipefail
          uv run python -m app.code.tools.pin_capsule_digest "${{ steps.digest.outputs.digest }}" --paths-output pin_capsule_touched.txt
          cat pin_capsule_touched.txt
          {
            echo "paths<<'EOF'"
            cat pin_capsule_touched.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Prepare release assets
        run: |
          set -euo pipefail
          mkdir -p release-assets
          cp sbom.spdx.json release-assets/capsule-sbom.spdx.json
          cp capsule.sig release-assets/capsule.sig
          cp capsule.pem release-assets/capsule.pem
          cp vigil.yaml release-assets/vigil.yaml

      - name: Write release notes
        run: |
          cat <<'EOF' > release-notes.md
          ## Capsule Release

          **Image:** `${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}`

          ### Verification

          * Signature: see `capsule.sig` and `capsule.pem`
          * SBOM: `capsule-sbom.spdx.json`

          ### Usage

          ```yaml
          capsule:
            image: "${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}"
          ```
          EOF

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: release-notes.md
          files: release-assets/*

      - name: Create capsule digest PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: pin capsule digest for ${{ github.ref_name }}"
          title: "chore: pin capsule digest for ${{ github.ref_name }}"
          body: |
            ## Summary
            - align vigil.yaml with released capsule digest `${{ steps.digest.outputs.digest }}`
          branch: automation/capsule-digest-${{ github.ref_name }}
          base: ${{ github.event.repository.default_branch }}
          add-paths: ${{ steps.pin_digest.outputs.paths }}
