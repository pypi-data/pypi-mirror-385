"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 Phonexia s.r.o.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Phonexia licensing definitions for gRPC API.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class LicensingInfoRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___LicensingInfoRequest = LicensingInfoRequest

@typing.final
class LicensingInfoResult(google.protobuf.message.Message):
    """The top-level message returned to the client by <code>LicenseInfo</code>
    method.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class LicenseFlagsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    VALID_UNTIL_FIELD_NUMBER: builtins.int
    IS_VALID_FIELD_NUMBER: builtins.int
    TECHNOLOGY_NAME_FIELD_NUMBER: builtins.int
    MODEL_INFO_FIELD_NUMBER: builtins.int
    LICENSE_FLAGS_FIELD_NUMBER: builtins.int
    valid_until: builtins.str
    """Validity of a license in YYYY-MM-DD format according to ISO 8601."""
    is_valid: builtins.bool
    """License status, contains "false" if the license has expired."""
    technology_name: builtins.str
    """Name of the technology being licensed."""
    @property
    def model_info(self) -> global___ModelInfo:
        """Information about the licensed model."""

    @property
    def license_flags(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """License flags"""

    def __init__(
        self,
        *,
        valid_until: builtins.str = ...,
        is_valid: builtins.bool = ...,
        technology_name: builtins.str = ...,
        model_info: global___ModelInfo | None = ...,
        license_flags: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["model_info", b"model_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["is_valid", b"is_valid", "license_flags", b"license_flags", "model_info", b"model_info", "technology_name", b"technology_name", "valid_until", b"valid_until"]) -> None: ...

global___LicensingInfoResult = LicensingInfoResult

@typing.final
class ModelInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the model."""
    version: builtins.str
    """Version of the model."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "version", b"version"]) -> None: ...

global___ModelInfo = ModelInfo
