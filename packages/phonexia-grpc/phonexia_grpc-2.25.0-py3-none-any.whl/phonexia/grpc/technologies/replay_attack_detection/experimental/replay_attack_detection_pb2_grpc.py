# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from phonexia.grpc.technologies.replay_attack_detection.experimental import replay_attack_detection_pb2 as phonexia_dot_grpc_dot_technologies_dot_replay__attack__detection_dot_experimental_dot_replay__attack__detection__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in phonexia/grpc/technologies/replay_attack_detection/experimental/replay_attack_detection_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ReplayAttackDetectionStub(object):
    """Service implementing replay attack detection.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Detect = channel.stream_unary(
                '/phonexia.grpc.technologies.replay_attack_detection.experimental.ReplayAttackDetection/Detect',
                request_serializer=phonexia_dot_grpc_dot_technologies_dot_replay__attack__detection_dot_experimental_dot_replay__attack__detection__pb2.DetectRequest.SerializeToString,
                response_deserializer=phonexia_dot_grpc_dot_technologies_dot_replay__attack__detection_dot_experimental_dot_replay__attack__detection__pb2.DetectResponse.FromString,
                _registered_method=True)


class ReplayAttackDetectionServicer(object):
    """Service implementing replay attack detection.
    """

    def Detect(self, request_iterator, context):
        """Performs replay attack detection on the given audio.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplayAttackDetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Detect': grpc.stream_unary_rpc_method_handler(
                    servicer.Detect,
                    request_deserializer=phonexia_dot_grpc_dot_technologies_dot_replay__attack__detection_dot_experimental_dot_replay__attack__detection__pb2.DetectRequest.FromString,
                    response_serializer=phonexia_dot_grpc_dot_technologies_dot_replay__attack__detection_dot_experimental_dot_replay__attack__detection__pb2.DetectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'phonexia.grpc.technologies.replay_attack_detection.experimental.ReplayAttackDetection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('phonexia.grpc.technologies.replay_attack_detection.experimental.ReplayAttackDetection', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReplayAttackDetection(object):
    """Service implementing replay attack detection.
    """

    @staticmethod
    def Detect(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/phonexia.grpc.technologies.replay_attack_detection.experimental.ReplayAttackDetection/Detect',
            phonexia_dot_grpc_dot_technologies_dot_replay__attack__detection_dot_experimental_dot_replay__attack__detection__pb2.DetectRequest.SerializeToString,
            phonexia_dot_grpc_dot_technologies_dot_replay__attack__detection_dot_experimental_dot_replay__attack__detection__pb2.DetectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
