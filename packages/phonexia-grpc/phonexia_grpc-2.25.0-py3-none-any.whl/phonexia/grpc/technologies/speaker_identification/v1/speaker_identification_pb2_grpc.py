# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from phonexia.grpc.technologies.speaker_identification.v1 import speaker_identification_pb2 as phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in phonexia/grpc/technologies/speaker_identification/v1/speaker_identification_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VoiceprintComparisonStub(object):
    """Service that implements voiceprint comparison.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Compare = channel.stream_stream(
                '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintComparison/Compare',
                request_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.CompareRequest.SerializeToString,
                response_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.CompareResponse.FromString,
                _registered_method=True)


class VoiceprintComparisonServicer(object):
    """Service that implements voiceprint comparison.
    """

    def Compare(self, request_iterator, context):
        """Performs synchronous comparison of two voiceprint lists. Each voiceprint
        from one list is compared with each voiceprint from other list. Returns a
        message containing matrix of comparison scores (results of individual
        voiceprint-to-voiceprint comparisons).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoiceprintComparisonServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Compare': grpc.stream_stream_rpc_method_handler(
                    servicer.Compare,
                    request_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.CompareRequest.FromString,
                    response_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.CompareResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'phonexia.grpc.technologies.speaker_identification.v1.VoiceprintComparison', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('phonexia.grpc.technologies.speaker_identification.v1.VoiceprintComparison', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VoiceprintComparison(object):
    """Service that implements voiceprint comparison.
    """

    @staticmethod
    def Compare(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintComparison/Compare',
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.CompareRequest.SerializeToString,
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.CompareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VoiceprintExtractionStub(object):
    """Service that implements voiceprint extraction.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Extract = channel.stream_unary(
                '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintExtraction/Extract',
                request_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ExtractRequest.SerializeToString,
                response_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ExtractResponse.FromString,
                _registered_method=True)


class VoiceprintExtractionServicer(object):
    """Service that implements voiceprint extraction.
    """

    def Extract(self, request_iterator, context):
        """Performs synchronous voiceprint extraction from an audio. Returns the
        result after completely sent and processed audio.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoiceprintExtractionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Extract': grpc.stream_unary_rpc_method_handler(
                    servicer.Extract,
                    request_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ExtractRequest.FromString,
                    response_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ExtractResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'phonexia.grpc.technologies.speaker_identification.v1.VoiceprintExtraction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('phonexia.grpc.technologies.speaker_identification.v1.VoiceprintExtraction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VoiceprintExtraction(object):
    """Service that implements voiceprint extraction.
    """

    @staticmethod
    def Extract(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintExtraction/Extract',
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ExtractRequest.SerializeToString,
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ExtractResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VoiceprintMergingStub(object):
    """Service that implements voiceprint merging.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Merge = channel.unary_unary(
                '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintMerging/Merge',
                request_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.MergeRequest.SerializeToString,
                response_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.MergeResponse.FromString,
                _registered_method=True)


class VoiceprintMergingServicer(object):
    """Service that implements voiceprint merging.
    """

    def Merge(self, request, context):
        """Merges a list of voiceprints into a single voiceprint. The new voiceprint
        is a combination of all voiceprints in the list. It uses a weighted arithmetic mean
        by weighting each voiceprint by its speech length.
        This method is intended for merging voiceprints of a single speaker,
        not for merging voiceprints from multiple different speakers.
        Note that the resulting voiceprint is not the same as the voiceprint
        extracted from a file created by concatenating all individual audio files
        into one, but it is very similar.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoiceprintMergingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Merge': grpc.unary_unary_rpc_method_handler(
                    servicer.Merge,
                    request_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.MergeRequest.FromString,
                    response_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.MergeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'phonexia.grpc.technologies.speaker_identification.v1.VoiceprintMerging', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('phonexia.grpc.technologies.speaker_identification.v1.VoiceprintMerging', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VoiceprintMerging(object):
    """Service that implements voiceprint merging.
    """

    @staticmethod
    def Merge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintMerging/Merge',
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.MergeRequest.SerializeToString,
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.MergeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VoiceprintConversionStub(object):
    """Service that implements voiceprint conversion to vector database format.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Convert = channel.stream_stream(
                '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintConversion/Convert',
                request_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ConvertRequest.SerializeToString,
                response_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ConvertResponse.FromString,
                _registered_method=True)


class VoiceprintConversionServicer(object):
    """Service that implements voiceprint conversion to vector database format.
    """

    def Convert(self, request_iterator, context):
        """Converts a voiceprint to a vector optimized for
        vector database usage. This enables efficient similarity search and
        storage in vector database systems.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoiceprintConversionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Convert': grpc.stream_stream_rpc_method_handler(
                    servicer.Convert,
                    request_deserializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ConvertRequest.FromString,
                    response_serializer=phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ConvertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'phonexia.grpc.technologies.speaker_identification.v1.VoiceprintConversion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('phonexia.grpc.technologies.speaker_identification.v1.VoiceprintConversion', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VoiceprintConversion(object):
    """Service that implements voiceprint conversion to vector database format.
    """

    @staticmethod
    def Convert(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/phonexia.grpc.technologies.speaker_identification.v1.VoiceprintConversion/Convert',
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ConvertRequest.SerializeToString,
            phonexia_dot_grpc_dot_technologies_dot_speaker__identification_dot_v1_dot_speaker__identification__pb2.ConvertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
