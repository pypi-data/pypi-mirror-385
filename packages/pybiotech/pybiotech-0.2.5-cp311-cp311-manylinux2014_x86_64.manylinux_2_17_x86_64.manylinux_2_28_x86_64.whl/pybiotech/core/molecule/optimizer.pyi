from rdkit import Chem
from rdkit.Chem.rdchem import Mol
from typing import Any, Iterable

class Optimizer:
    @staticmethod
    def mmff_optimize(m: Mol, max_ff_iters: int = 500) -> dict[str, Any] | None: ...
    @staticmethod
    def uff_optimize(m: Mol, max_ff_iters: int = 500) -> dict[str, Any] | None: ...
    @staticmethod
    def embed_and_optimize(mol: Mol, *, max_embed_attempts: int = 1000, random_seed: int = 12648430, use_small_ring_torsions: bool = True, use_macrocycle_torsions: bool = True, prune_rms_thresh: float = 0.1, max_ff_iters: int = 500) -> tuple[Mol, bool, dict[str, Any]]: ...
    @staticmethod
    def to_serialize(mols: Iterable[Mol | None], *, include_props: Chem.PropertyPickleOptions = ..., with_checksum: bool = True) -> bytes: ...
    @staticmethod
    def to_unserialize(serialized_mols: bytes) -> list[Mol | None]: ...
