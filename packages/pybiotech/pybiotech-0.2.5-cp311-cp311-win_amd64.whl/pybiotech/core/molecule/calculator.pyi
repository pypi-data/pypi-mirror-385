import numpy as np
from rdkit import Chem
from typing import Any

class MolCaculator:
    @staticmethod
    def calc_surface_area(mol: Chem.Mol) -> float: ...
    @staticmethod
    def calc_hydrophobic_surface_area(mol: Chem.Mol, is_high_precise: bool = False) -> float: ...
    @staticmethod
    def calc_diameter(mol: Chem.Mol) -> float: ...
    @staticmethod
    def calc_sssr(mol: Chem.Mol) -> dict[str, Any]: ...
    @staticmethod
    def calc_logp(mol: Chem.Mol) -> float: ...
    @staticmethod
    def calc_morgan_fringerprint(mol: Chem.Mol, countSimulation: bool = False, bitSize: int = 2048) -> np.array: ...
    @staticmethod
    def calc_maccs_fingerprint(mol: Chem.Mol) -> np.array: ...
    @staticmethod
    def calc_crippen_contribs(mol: Chem.Mol) -> tuple: ...
    @staticmethod
    def get_ring_atoms(mol, use_ringinfo: bool = True) -> list[list[int]]: ...
    @staticmethod
    def get_hydrophobic_clusters(mol: Chem.Mol, distance_threshold: float = 2.0, extended: bool = True) -> list[list[int]]: ...
    @staticmethod
    def approximate_oe_hydrophobe(mol: Chem.Mol, distance_threshold: float = 2.0, exclude_aromatic: bool = True, partial_charge_cutoff=None, min_cluster_size: int = 2, extended_filter: bool = True, embed_if_needed: bool = True, max_attempts: int = 1000): ...
    @staticmethod
    def get_anions_cations(mol): ...
    @staticmethod
    def get_hbond_acceptors(mol): ...
    @staticmethod
    def get_hbond_donors(mol): ...
    @staticmethod
    def calc_pharmacophore_features(mol: Chem.Mol, extended_hydrophobe: bool = True, use_ringinfo: bool = True): ...
    @staticmethod
    def calc_intra_pharmacophore_distance(mol: Chem.Mol, atom_list: dict, conf_id: int = 0): ...
    @staticmethod
    def calc_inter_pharmacophore_distance(mol, atom_list, type1, type2, conf_id: int = 0) -> list[list]: ...
