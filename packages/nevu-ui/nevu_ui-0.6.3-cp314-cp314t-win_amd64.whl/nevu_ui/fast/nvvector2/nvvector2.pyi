from typing import overload, Any, Sequence, Tuple, Union

import pygame

class NvVector2:
    x: float
    y: float

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, vector: 'NvVector2') -> None: ...
    @overload
    def __init__(self, vector: pygame.Vector2) -> None: ...
    @overload
    def __init__(self, sequence: Sequence[float]) -> None: ...
    @overload
    def __init__(self, x: float, y: float) -> None: ...

    @property
    def xx(self) -> 'NvVector2': ...
    @property
    def yy(self) -> 'NvVector2': ...
    @property
    def xy(self) -> 'NvVector2': ...
    @property
    def yx(self) -> 'NvVector2': ...

    def to_tuple(self) -> Tuple[float, float]: ...
    
    @overload
    def __getitem__(self, index: int) -> float: ...

    @overload
    def __setitem__(self, index: int, value: float) -> None: ...

    def __add__(self, other: 'NvVector2') -> 'NvVector2': ...
    def __sub__(self, other: 'NvVector2') -> 'NvVector2': ...
    def __mul__(self, other: Union['NvVector2', int, float]) -> 'NvVector2': ...
    def __truediv__(self, other: Union['NvVector2', int, float]) -> 'NvVector2': ...
    def __floordiv__(self, other: Union['NvVector2', int, float]) -> 'NvVector2': ...
    
    def __iadd__(self, other: 'NvVector2') -> 'NvVector2': ...
    def __isub__(self, other: 'NvVector2') -> 'NvVector2': ...
    def __imul__(self, other: 'NvVector2') -> 'NvVector2': ...

    def __neg__(self) -> 'NvVector2': ...
    def __repr__(self) -> str: ...
    def __hash__(self) -> int: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...

    def __copy__(self) -> 'NvVector2': ...
    def __deepcopy__(self, memo: Any) -> 'NvVector2': ...
    
    def copy(self) -> 'NvVector2': ...
    def to_pygame(self) -> pygame.Vector2: ...

    def to_int(self) -> 'NvVector2': ...
    def get_int(self) -> 'NvVector2': ...
    def to_round(self) -> 'NvVector2': ...
    def get_round(self) -> 'NvVector2': ...
    def to_abs(self) -> 'NvVector2': ...
    def get_abs(self) -> 'NvVector2': ...
    def to_neg(self) -> 'NvVector2': ...
    def get_neg(self) -> 'NvVector2': ...

    @property
    def length(self) -> float: ...
    
    def normalize(self) -> 'NvVector2': ...
    def normalize_ip(self) -> 'NvVector2': ...
    def distance_to(self, other: 'NvVector2') -> float: ...
    def distance_squared_to(self, other: 'NvVector2') -> float: ...
    def dot(self, other: 'NvVector2') -> float: ...