Metadata-Version: 2.1
Name: glaip-sdk
Version: 0.0.20
Summary: Python SDK for GL AIP (GDP Labs AI Agent Package) - Simplified CLI Design
License: MIT
Author: Raymond Christopher
Author-email: raymond.christopher@gdplabs.id
Requires-Python: >=3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: click (>=8.2.0,<8.3.0)
Requires-Dist: httpx (>=0.28.1)
Requires-Dist: packaging (>=23.2)
Requires-Dist: pydantic (>=2.0.0)
Requires-Dist: python-dotenv (>=1.1.1,<2.0.0)
Requires-Dist: pyyaml (>=6.0.0)
Requires-Dist: questionary (>=2.1.0,<3.0.0)
Requires-Dist: readchar (>=4.2.1,<5.0.0)
Requires-Dist: rich (>=13.0.0)
Description-Content-Type: text/markdown

# GL AIP — GDP Labs AI Agents Package

[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

GL stands for **GDP Labs**—GL AIP is our AI Agents Package for building, running, and operating agents.

> **Python SDK and CLI for GL AIP - Connect, configure, and manage AI agents on the GDP Labs AI Agents Package.**

## 🚀 Quick Start

### Installation

```bash
# Using pip (recommended)
pip install --upgrade glaip-sdk

# Using uv (fast alternative)
uv tool install glaip-sdk
```

**Requirements**: Python 3.10+

## 🐍 Hello World - Python SDK

Perfect for building applications and integrations.

### Step 1: Environment Setup

Create a `.env` file:

```bash
# .env
AIP_API_URL=https://your-gl-aip-instance.com
AIP_API_KEY=your-api-key
```

### Step 2: Basic Python Script

```python
# hello_world.py
from glaip_sdk import Client
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Initialize client
client = Client()

# Create a simple agent
agent = client.agents.create(
    name="hello-sdk",
    instruction="You are a helpful assistant who responds clearly and concisely."
)

# Run the agent
result = agent.run("Hello world, what's 2+2?")

print(f"Agent response: {result}")
```

### Step 3: Run Your Script

```bash
python hello_world.py
```

### Step 4: Advanced Example with Streaming

```python
# streaming_example.py
from glaip_sdk import Client
import os
from dotenv import load_dotenv

load_dotenv()
client = Client()

# Create agent with streaming
agent = client.agents.create(
    name="streaming-agent",
    instruction="You are a helpful assistant. Provide detailed responses."
)

# Stream the response
print("Streaming response:")
client.agents.run_agent(
    agent.id,
    "Explain quantum computing in simple terms",
    verbose=True,
)
print("--- Stream complete ---")
```

🎉 **SDK Success!** You're now ready to build AI-powered applications with Python.

---

## 💻 Hello World - CLI

Perfect for quick testing and command-line workflows.

### Step 1: Configure Connection

```bash
# Interactive setup (recommended)
aip configure
```

Or set environment variables:

```bash
export AIP_API_URL="https://your-gl-aip-instance.com"
export AIP_API_KEY="your-api-key"
```

### Step 2: Verify Connection

```bash
aip status
```

### Step 3: Create & Run Your First Agent

```bash
# Create a simple agent
aip agents create --name "hello-cli" --instruction "You are a helpful assistant"

# List agents to get the ID
aip agents list

# Run the agent with input
aip agents run <AGENT_ID> --input "Hello world, what's the weather like?"
```

🎉 **CLI Success!** You're now ready to use the CLI for AI agent workflows.

## ✨ Key Features

- **🤖 Agent Management**: Create, run, and orchestrate AI agents with custom instructions and streaming
- **🧠 Language Models**: Choose from multiple AI models per agent with manual PII tag mapping
- **🛠️ Tool Integration**: Extend agents with custom Python tools and script management
- **🔌 MCP Support**: Connect external services through Model Context Protocols with tool discovery
- **🔄 Multi-Agent Patterns**: Hierarchical, parallel, sequential, router, and aggregator patterns
- **💻 Modern CLI**: Rich terminal interface with fuzzy search and multiple output formats

## 📚 Documentation

📖 **[Complete Documentation](https://gdplabs.gitbook.io/gl-aip/gl-aip-sdk/overview)** - Visit our GitBook for comprehensive guides, tutorials, and API reference.

Quick links:

- **[Quick Start Guide](https://gdplabs.gitbook.io/gl-aip/gl-aip-sdk/get-started/quick-start-guide)**: Get your first agent running in 5 minutes
- **[Agent Management](https://gdplabs.gitbook.io/gl-aip/gl-aip-sdk/guides/agents-guide)**: Complete agent lifecycle management
- **[Custom Tools](https://gdplabs.gitbook.io/gl-aip/gl-aip-sdk/guides/tools-guide)**: Build and integrate custom tools
- **[MCP Integration](https://gdplabs.gitbook.io/gl-aip/gl-aip-sdk/guides/mcps-guide)**: Connect external services
- **[API Reference](https://gdplabs.gitbook.io/gl-aip/gl-aip-sdk/reference/python-sdk-reference)**: Complete SDK reference

