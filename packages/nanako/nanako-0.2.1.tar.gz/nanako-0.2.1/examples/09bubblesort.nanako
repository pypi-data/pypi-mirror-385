# バブルソート
# 配列をソートする関数
バブルソート = 入力 配列 に対し {
    n = |配列|
    
    # 外側ループ: n-1回繰り返し
    引き算(n, 1)回、くり返す {
        交換フラグ = 0
        i = 0
        
        # 内側ループ: 隣接要素を比較
        引き算(n, 1)回、くり返す {
            もし 配列[i] が 配列[足し算(i, 1)] より大きい ならば、{
                # 要素を交換
                temp = 配列[i]
                配列[i] = 配列[足し算(i, 1)]
                配列[足し算(i, 1)] = temp
                交換フラグ = 1
            }
            iを増やす
        }
        
        # 交換がなかった場合は完了
        もし 交換フラグ が 0 ならば、{
            配列が答え
        }
    }
    配列が答え
}

# 必要な補助関数
足し算 = 入力 X, Y に対し {
    Y回、くり返す {
        Xを増やす
    }
    Xが答え
}

引き算 = 入力 X, Y に対し {
    Y回、くり返す {
        Xを減らす
    }
    Xが答え
}

# ソートする配列
数列 = [64, 34, 25, 12, 22, 11, 90]

# ソート前
数列

# バブルソート実行
ソート済み = バブルソート(数列)

# ソート後
ソート済み