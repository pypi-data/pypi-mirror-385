# クイックソート（再帰版）
# 配列の一部をソートする関数
クイックソート = 入力 配列, 開始, 終了 に対し {
    もし 開始 が 終了 より小さい ならば、{
        # パーティション操作
        境界 = パーティション(配列, 開始, 終了)
        
        # 左側を再帰的にソート
        クイックソート(配列, 開始, 引き算(境界, 1))
        
        # 右側を再帰的にソート
        クイックソート(配列, 足し算(境界, 1), 終了)
    }
    配列が答え
}

# パーティション操作（ピボットより小さい要素を左に移動）
パーティション = 入力 配列, 開始, 終了 に対し {
    # 最後の要素をピボットとする
    ピボット = 配列[終了]
    i = 開始
    j = 開始
    
    # j から 終了-1 まで処理
    引き算(終了, 開始)回、くり返す {
        もし 配列[j] が ピボット より小さい ならば、{
            # 要素を交換
            temp = 配列[i]
            配列[i] = 配列[j]
            配列[j] = temp
            iを増やす
        }
        jを増やす
    }
    
    # ピボットを正しい位置に配置
    temp = 配列[i]
    配列[i] = 配列[終了]
    配列[終了] = temp
    
    iが答え
}

# 配列全体をソートする便利関数
配列ソート = 入力 配列 に対し {
    長さ = |配列|
    もし 長さ が 1 より大きい ならば、{
        クイックソート(配列, 0, 引き算(長さ, 1))
    }
    配列が答え
}

# 必要な補助関数
足し算 = 入力 X, Y に対し {
    Y回、くり返す {
        Xを増やす
    }
    Xが答え
}

引き算 = 入力 X, Y に対し {
    Y回、くり返す {
        Xを減らす
    }
    Xが答え
}

# ソートする配列
数列 = [38, 27, 43, 3, 9, 82, 10]

# ソート前
数列

# クイックソート実行
ソート済み = 配列ソート(数列)

# ソート後
ソート済み