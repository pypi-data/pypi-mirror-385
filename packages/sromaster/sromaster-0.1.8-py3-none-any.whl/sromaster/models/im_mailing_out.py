# coding: utf-8

"""
    SRO Master API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.8
    Contact: info@nexium.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sromaster.models.email_search_status import EmailSearchStatus
from sromaster.models.invoice_status import InvoiceStatus
from sromaster.models.mailing_result import MailingResult
from sromaster.models.mailing_status import MailingStatus
from typing import Optional, Set
from typing_extensions import Self

class IMMailingOut(BaseModel):
    """
    IMMailingOut
    """ # noqa: E501
    id: StrictInt
    organization_id: StrictInt
    insurance_id: StrictInt
    im_insurer_id: StrictInt
    dispatch_at: Optional[datetime]
    email_search_status: EmailSearchStatus
    invoice_status: InvoiceStatus
    invoice_url: Optional[StrictStr]
    status: MailingStatus
    result: MailingResult
    __properties: ClassVar[List[str]] = ["id", "organization_id", "insurance_id", "im_insurer_id", "dispatch_at", "email_search_status", "invoice_status", "invoice_url", "status", "result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IMMailingOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if dispatch_at (nullable) is None
        # and model_fields_set contains the field
        if self.dispatch_at is None and "dispatch_at" in self.model_fields_set:
            _dict['dispatch_at'] = None

        # set to None if invoice_url (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_url is None and "invoice_url" in self.model_fields_set:
            _dict['invoice_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IMMailingOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organization_id": obj.get("organization_id"),
            "insurance_id": obj.get("insurance_id"),
            "im_insurer_id": obj.get("im_insurer_id"),
            "dispatch_at": obj.get("dispatch_at"),
            "email_search_status": obj.get("email_search_status"),
            "invoice_status": obj.get("invoice_status"),
            "invoice_url": obj.get("invoice_url"),
            "status": obj.get("status"),
            "result": obj.get("result")
        })
        return _obj


