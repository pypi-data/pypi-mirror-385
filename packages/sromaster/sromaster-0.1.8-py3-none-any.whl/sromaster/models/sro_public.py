# coding: utf-8

"""
    SRO Master API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.8
    Contact: info@nexium.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sromaster.models.registry import Registry
from sromaster.models.sro_status import SROStatus
from typing import Optional, Set
from typing_extensions import Self

class SROPublic(BaseModel):
    """
    SROPublic
    """ # noqa: E501
    id: StrictInt
    registry: Optional[Registry] = None
    registry_id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    reg_number: Optional[StrictStr] = None
    inn: Optional[StrictInt] = None
    ogrn: Optional[StrictInt] = None
    address: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    status: Optional[SROStatus] = None
    exclusion_reason: Optional[StrictStr] = None
    members_count: StrictInt
    __properties: ClassVar[List[str]] = ["id", "registry", "registry_id", "name", "reg_number", "inn", "ogrn", "address", "phone", "email", "website", "status", "exclusion_reason", "members_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SROPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if registry (nullable) is None
        # and model_fields_set contains the field
        if self.registry is None and "registry" in self.model_fields_set:
            _dict['registry'] = None

        # set to None if registry_id (nullable) is None
        # and model_fields_set contains the field
        if self.registry_id is None and "registry_id" in self.model_fields_set:
            _dict['registry_id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if reg_number (nullable) is None
        # and model_fields_set contains the field
        if self.reg_number is None and "reg_number" in self.model_fields_set:
            _dict['reg_number'] = None

        # set to None if inn (nullable) is None
        # and model_fields_set contains the field
        if self.inn is None and "inn" in self.model_fields_set:
            _dict['inn'] = None

        # set to None if ogrn (nullable) is None
        # and model_fields_set contains the field
        if self.ogrn is None and "ogrn" in self.model_fields_set:
            _dict['ogrn'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if exclusion_reason (nullable) is None
        # and model_fields_set contains the field
        if self.exclusion_reason is None and "exclusion_reason" in self.model_fields_set:
            _dict['exclusion_reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SROPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "registry": obj.get("registry"),
            "registry_id": obj.get("registry_id"),
            "name": obj.get("name"),
            "reg_number": obj.get("reg_number"),
            "inn": obj.get("inn"),
            "ogrn": obj.get("ogrn"),
            "address": obj.get("address"),
            "phone": obj.get("phone"),
            "email": obj.get("email"),
            "website": obj.get("website"),
            "status": obj.get("status"),
            "exclusion_reason": obj.get("exclusion_reason"),
            "members_count": obj.get("members_count")
        })
        return _obj


