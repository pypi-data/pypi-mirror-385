# coding: utf-8

"""
    SRO Master API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Contact: info@nexium.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sromaster.models.page_sro_member_public import PageSROMemberPublic

class TestPageSROMemberPublic(unittest.TestCase):
    """PageSROMemberPublic unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PageSROMemberPublic:
        """Test PageSROMemberPublic
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PageSROMemberPublic`
        """
        model = PageSROMemberPublic()
        if include_optional:
            return PageSROMemberPublic(
                items = [
                    sromaster.models.sro_member_public.SROMemberPublic(
                        id = 56, 
                        registry = 'NOPRIZ', 
                        registry_id = 56, 
                        sro = sromaster.models.sro_public.SROPublic(
                            id = 56, 
                            registry_id = 56, 
                            name = '', 
                            reg_number = '', 
                            inn = 56, 
                            ogrn = 56, 
                            address = '', 
                            phone = '', 
                            email = '', 
                            website = '', 
                            members_count = 56, ), 
                        organization = sromaster.models.organization_public.OrganizationPublic(
                            id = 56, 
                            source_registry = 'NOPRIZ', 
                            inn = 56, 
                            ogrn = 56, 
                            legal_form = 'LEGAL_ENTITY', 
                            name_full = '', 
                            name_short = '', 
                            address = '', 
                            director_name = '', 
                            registered_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        registration_number = '', 
                        member_status = 'ACTIVE', 
                        included_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        excluded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        exclusion_reason = '', 
                        accordance_status = 'ACCORDANT', 
                        is_simple = True, 
                        is_extremely_dangerous = True, 
                        is_nuclear = True, 
                        is_odo = True, 
                        compensation_fund_fee_vv = 56, 
                        compensation_fund_fee_odo = 56, 
                        responsibility_level_vv = '', 
                        responsibility_level_odo = '', 
                        registry_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        insurances_count = 56, 
                        checks_count = 56, )
                    ],
                page = 56,
                per_page = 56,
                total = 56,
                total_pages = 56
            )
        else:
            return PageSROMemberPublic(
                items = [
                    sromaster.models.sro_member_public.SROMemberPublic(
                        id = 56, 
                        registry = 'NOPRIZ', 
                        registry_id = 56, 
                        sro = sromaster.models.sro_public.SROPublic(
                            id = 56, 
                            registry_id = 56, 
                            name = '', 
                            reg_number = '', 
                            inn = 56, 
                            ogrn = 56, 
                            address = '', 
                            phone = '', 
                            email = '', 
                            website = '', 
                            members_count = 56, ), 
                        organization = sromaster.models.organization_public.OrganizationPublic(
                            id = 56, 
                            source_registry = 'NOPRIZ', 
                            inn = 56, 
                            ogrn = 56, 
                            legal_form = 'LEGAL_ENTITY', 
                            name_full = '', 
                            name_short = '', 
                            address = '', 
                            director_name = '', 
                            registered_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        registration_number = '', 
                        member_status = 'ACTIVE', 
                        included_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        excluded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        exclusion_reason = '', 
                        accordance_status = 'ACCORDANT', 
                        is_simple = True, 
                        is_extremely_dangerous = True, 
                        is_nuclear = True, 
                        is_odo = True, 
                        compensation_fund_fee_vv = 56, 
                        compensation_fund_fee_odo = 56, 
                        responsibility_level_vv = '', 
                        responsibility_level_odo = '', 
                        registry_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        insurances_count = 56, 
                        checks_count = 56, )
                    ],
                page = 56,
                per_page = 56,
                total = 56,
                total_pages = 56,
        )
        """

    def testPageSROMemberPublic(self):
        """Test PageSROMemberPublic"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
