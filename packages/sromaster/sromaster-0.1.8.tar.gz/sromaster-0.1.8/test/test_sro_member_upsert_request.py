# coding: utf-8

"""
    SRO Master API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sromaster.models.sro_member_upsert_request import SROMemberUpsertRequest


class TestSROMemberUpsertRequest(unittest.TestCase):
    """SROMemberUpsertRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SROMemberUpsertRequest:
        """Test SROMemberUpsertRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SROMemberUpsertRequest`
        """
        model = SROMemberUpsertRequest()
        if include_optional:
            return SROMemberUpsertRequest(
                registry = 'NOPRIZ',
                registry_id = 56,
                sro_registry_id = 56,
                organization = sromaster.models.organization_schema.OrganizationSchema(
                    inn = 56, 
                    ogrn = 56, 
                    legal_form = 'LEGAL_ENTITY', 
                    name_full = '', 
                    name_short = '', 
                    address = '', 
                    director_name = '', 
                    registered_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                registration_number = '',
                member_status = 'ACTIVE',
                included_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                excluded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                exclusion_reason = '',
                accordance_status = 'ACCORDANT',
                is_simple = True,
                is_extremely_dangerous = True,
                is_nuclear = True,
                is_odo = True,
                compensation_fund_fee_vv = 56,
                compensation_fund_fee_odo = 56,
                responsibility_level_vv = '',
                responsibility_level_odo = '',
                registry_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                insurances = [
                    sromaster.models.insurance_upsert_request.InsuranceUpsertRequest(
                        registry_id = 56, 
                        insurer = '', 
                        address = '', 
                        insurance_object = '', 
                        amount = '', 
                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                checks = [
                    sromaster.models.check_upsert_request.CheckUpsertRequest(
                        registry_id = 56, 
                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        state = 'PLANED', 
                        result = 'VIOLATION_FOUND', 
                        disciplinary_action = 'APPLIED', )
                    ]
            )
        else:
            return SROMemberUpsertRequest(
                registry = 'NOPRIZ',
                registry_id = 56,
                sro_registry_id = 56,
                organization = sromaster.models.organization_schema.OrganizationSchema(
                    inn = 56, 
                    ogrn = 56, 
                    legal_form = 'LEGAL_ENTITY', 
                    name_full = '', 
                    name_short = '', 
                    address = '', 
                    director_name = '', 
                    registered_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testSROMemberUpsertRequest(self):
        """Test SROMemberUpsertRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
