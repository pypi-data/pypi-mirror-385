# coding: utf-8

"""
    SRO Master API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.1
    Contact: info@nexium.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.legal_form import LegalForm
from typing import Optional, Set
from typing_extensions import Self

class OrganizationSchema(BaseModel):
    """
    OrganizationSchema
    """ # noqa: E501
    inn: StrictInt
    ogrn: StrictInt
    legal_form: Optional[LegalForm] = None
    name_full: Optional[StrictStr] = None
    name_short: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    director_name: Optional[StrictStr] = None
    registered_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["inn", "ogrn", "legal_form", "name_full", "name_short", "address", "director_name", "registered_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if legal_form (nullable) is None
        # and model_fields_set contains the field
        if self.legal_form is None and "legal_form" in self.model_fields_set:
            _dict['legal_form'] = None

        # set to None if name_full (nullable) is None
        # and model_fields_set contains the field
        if self.name_full is None and "name_full" in self.model_fields_set:
            _dict['name_full'] = None

        # set to None if name_short (nullable) is None
        # and model_fields_set contains the field
        if self.name_short is None and "name_short" in self.model_fields_set:
            _dict['name_short'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if director_name (nullable) is None
        # and model_fields_set contains the field
        if self.director_name is None and "director_name" in self.model_fields_set:
            _dict['director_name'] = None

        # set to None if registered_at (nullable) is None
        # and model_fields_set contains the field
        if self.registered_at is None and "registered_at" in self.model_fields_set:
            _dict['registered_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inn": obj.get("inn"),
            "ogrn": obj.get("ogrn"),
            "legal_form": obj.get("legal_form"),
            "name_full": obj.get("name_full"),
            "name_short": obj.get("name_short"),
            "address": obj.get("address"),
            "director_name": obj.get("director_name"),
            "registered_at": obj.get("registered_at")
        })
        return _obj


