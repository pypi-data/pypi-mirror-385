# coding: utf-8

"""
Payment API

API for accepting payments and storing subscriptions

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Self

from crypticorn.pay.client.models.stake_details import StakeDetails
from crypticorn.pay.client.models.total_balance import TotalBalance
from crypticorn.pay.client.models.wallet_balance import WalletBalance


class UserBalance(BaseModel):
    """
    Model for a user's balance
    """  # noqa: E501

    wallets: List[WalletBalance] = Field(description="List of wallet balances")
    updated_at: StrictInt = Field(description="Timestamp of last update")
    total: TotalBalance = Field(
        description="Combined balance information computed from the wallet balances"
    )
    pools: List[StakeDetails] = Field(
        description="List of pool balances computed from the wallet balances"
    )
    __properties: ClassVar[List[str]] = ["wallets", "updated_at", "total", "pools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "total",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in wallets (list)
        _items = []
        if self.wallets:
            for _item_wallets in self.wallets:
                if _item_wallets:
                    _items.append(_item_wallets.to_dict())
            _dict["wallets"] = _items
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict["total"] = self.total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pools (list)
        _items = []
        if self.pools:
            for _item_pools in self.pools:
                if _item_pools:
                    _items.append(_item_pools.to_dict())
            _dict["pools"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "wallets": (
                    [WalletBalance.from_dict(_item) for _item in obj["wallets"]]
                    if obj.get("wallets") is not None
                    else None
                ),
                "updated_at": obj.get("updated_at"),
                "total": (
                    TotalBalance.from_dict(obj["total"])
                    if obj.get("total") is not None
                    else None
                ),
                "pools": (
                    [StakeDetails.from_dict(_item) for _item in obj["pools"]]
                    if obj.get("pools") is not None
                    else None
                ),
            }
        )
        return _obj
