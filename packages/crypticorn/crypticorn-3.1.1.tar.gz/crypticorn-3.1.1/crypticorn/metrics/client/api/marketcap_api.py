# coding: utf-8

"""
Marketcap Service API

API for retrieving historical marketcap data, available exchanges, and indicators.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Awaitable, Dict, List, Optional, Tuple, Union

from asgiref.sync import async_to_sync
from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from crypticorn.metrics.client.api_client import ApiClient, RequestSerialized
from crypticorn.metrics.client.api_response import ApiResponse
from crypticorn.metrics.client.models.market_type import MarketType
from crypticorn.metrics.client.models.marketcap_ranking import MarketcapRanking
from crypticorn.metrics.client.models.marketcap_symbol_ranking import (
    MarketcapSymbolRanking,
)
from crypticorn.metrics.client.models.ohlcv import OHLCV
from crypticorn.metrics.client.rest import RESTResponseType


class MarketcapApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None, is_sync: bool = False) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client
        self.is_sync = is_sync

    @validate_call
    def get_current_marketcap(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[List[Dict[str, object]], Awaitable[List[Dict[str, object]]]]:
        """Get Current Marketcap"""
        if self.is_sync:
            return self._get_current_marketcap_sync(
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_current_marketcap_async(
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_current_marketcap_with_http_info(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[
        ApiResponse[List[Dict[str, object]]],
        Awaitable[ApiResponse[List[Dict[str, object]]]],
    ]:
        """Get Current Marketcap with HTTP info"""
        if self.is_sync:
            return self._get_current_marketcap_sync_with_http_info(
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_current_marketcap_async_with_http_info(
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_current_marketcap_without_preload_content(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[RESTResponseType, Awaitable[RESTResponseType]]:
        """Get Current Marketcap without preloading content"""
        if self.is_sync:
            return self._get_current_marketcap_sync_without_preload_content(
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_current_marketcap_async_without_preload_content(
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    # Private async implementation methods
    @validate_call
    async def _get_current_marketcap_async(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Dict[str, object]]:
        """Get Current Marketcap

        Retrieve current marketcap data for all symbols.

        :param limit: Number of top symbols to fetch (1-100)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_current_marketcap_serialize(
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Dict[str, object]]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def _get_current_marketcap_async_with_http_info(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Dict[str, object]]]:
        """Get Current Marketcap

        Retrieve current marketcap data for all symbols.

        :param limit: Number of top symbols to fetch (1-100)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_current_marketcap_serialize(
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Dict[str, object]]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data, response_types_map=_response_types_map
        )

    @validate_call
    async def _get_current_marketcap_async_without_preload_content(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Current Marketcap

        Retrieve current marketcap data for all symbols.

        :param limit: Number of top symbols to fetch (1-100)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_current_marketcap_serialize(
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[Dict[str, object]]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data

    # Private sync implementation methods
    @validate_call
    def _get_current_marketcap_sync(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Dict[str, object]]:
        """Synchronous version of get_current_marketcap"""
        return async_to_sync(self._get_current_marketcap_async)(
            limit=limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_current_marketcap_sync_with_http_info(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Dict[str, object]]]:
        """Synchronous version of get_current_marketcap_with_http_info"""
        return async_to_sync(self._get_current_marketcap_async_with_http_info)(
            limit=limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_current_marketcap_sync_without_preload_content(
        self,
        limit: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Number of top symbols to fetch (1-100)"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Synchronous version of get_current_marketcap_without_preload_content"""
        return async_to_sync(self._get_current_marketcap_async_without_preload_content)(
            limit=limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    def _get_current_marketcap_serialize(
        self,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            _query_params.append(("limit", limit))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader", "HTTPBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/marketcap/current",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_marketcap_between_timestamps(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[List[MarketcapRanking], Awaitable[List[MarketcapRanking]]]:
        """Get Marketcap Between Timestamps"""
        if self.is_sync:
            return self._get_marketcap_between_timestamps_sync(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_between_timestamps_async(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_marketcap_between_timestamps_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[
        ApiResponse[List[MarketcapRanking]],
        Awaitable[ApiResponse[List[MarketcapRanking]]],
    ]:
        """Get Marketcap Between Timestamps with HTTP info"""
        if self.is_sync:
            return self._get_marketcap_between_timestamps_sync_with_http_info(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_between_timestamps_async_with_http_info(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_marketcap_between_timestamps_without_preload_content(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[RESTResponseType, Awaitable[RESTResponseType]]:
        """Get Marketcap Between Timestamps without preloading content"""
        if self.is_sync:
            return self._get_marketcap_between_timestamps_sync_without_preload_content(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_between_timestamps_async_without_preload_content(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    # Private async implementation methods
    @validate_call
    async def _get_marketcap_between_timestamps_async(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarketcapRanking]:
        """Get Marketcap Between Timestamps

        Retrieve marketcap data between timestamps.

        :param start_timestamp: Start timestamp
        :type start_timestamp: int
        :param end_timestamp: End timestamp
        :type end_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_between_timestamps_serialize(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[MarketcapRanking]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def _get_marketcap_between_timestamps_async_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarketcapRanking]]:
        """Get Marketcap Between Timestamps

        Retrieve marketcap data between timestamps.

        :param start_timestamp: Start timestamp
        :type start_timestamp: int
        :param end_timestamp: End timestamp
        :type end_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_between_timestamps_serialize(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[MarketcapRanking]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data, response_types_map=_response_types_map
        )

    @validate_call
    async def _get_marketcap_between_timestamps_async_without_preload_content(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Marketcap Between Timestamps

        Retrieve marketcap data between timestamps.

        :param start_timestamp: Start timestamp
        :type start_timestamp: int
        :param end_timestamp: End timestamp
        :type end_timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_between_timestamps_serialize(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[MarketcapRanking]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data

    # Private sync implementation methods
    @validate_call
    def _get_marketcap_between_timestamps_sync(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarketcapRanking]:
        """Synchronous version of get_marketcap_between_timestamps"""
        return async_to_sync(self._get_marketcap_between_timestamps_async)(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_marketcap_between_timestamps_sync_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarketcapRanking]]:
        """Synchronous version of get_marketcap_between_timestamps_with_http_info"""
        return async_to_sync(
            self._get_marketcap_between_timestamps_async_with_http_info
        )(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_marketcap_between_timestamps_sync_without_preload_content(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Synchronous version of get_marketcap_between_timestamps_without_preload_content"""
        return async_to_sync(
            self._get_marketcap_between_timestamps_async_without_preload_content
        )(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    def _get_marketcap_between_timestamps_serialize(
        self,
        start_timestamp,
        end_timestamp,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_timestamp is not None:
            _query_params.append(("start_timestamp", start_timestamp))

        if end_timestamp is not None:
            _query_params.append(("end_timestamp", end_timestamp))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader", "HTTPBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/marketcap",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_marketcap_symbols(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[List[MarketcapSymbolRanking], Awaitable[List[MarketcapSymbolRanking]]]:
        """Get Symbols Marketcap Between Timestamps"""
        if self.is_sync:
            return self._get_marketcap_symbols_sync(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                interval=interval,
                market=market,
                exchange=exchange,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_symbols_async(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                interval=interval,
                market=market,
                exchange=exchange,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_marketcap_symbols_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[
        ApiResponse[List[MarketcapSymbolRanking]],
        Awaitable[ApiResponse[List[MarketcapSymbolRanking]]],
    ]:
        """Get Symbols Marketcap Between Timestamps with HTTP info"""
        if self.is_sync:
            return self._get_marketcap_symbols_sync_with_http_info(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                interval=interval,
                market=market,
                exchange=exchange,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_symbols_async_with_http_info(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                interval=interval,
                market=market,
                exchange=exchange,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_marketcap_symbols_without_preload_content(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[RESTResponseType, Awaitable[RESTResponseType]]:
        """Get Symbols Marketcap Between Timestamps without preloading content"""
        if self.is_sync:
            return self._get_marketcap_symbols_sync_without_preload_content(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                interval=interval,
                market=market,
                exchange=exchange,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_symbols_async_without_preload_content(
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
                interval=interval,
                market=market,
                exchange=exchange,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    # Private async implementation methods
    @validate_call
    async def _get_marketcap_symbols_async(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarketcapSymbolRanking]:
        """Get Symbols Marketcap Between Timestamps

        Retrieve a ranking of symbols by marketcap between timestamps.

        :param start_timestamp: Start timestamp
        :type start_timestamp: int
        :param end_timestamp: End timestamp
        :type end_timestamp: int
        :param interval: Interval for which to fetch symbols and marketcap data
        :type interval: str
        :param market: Market for which to fetch symbols and marketcap data. Defaults to futures.
        :type market: MarketType
        :param exchange: Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned.
        :type exchange: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_symbols_serialize(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            interval=interval,
            market=market,
            exchange=exchange,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[MarketcapSymbolRanking]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def _get_marketcap_symbols_async_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarketcapSymbolRanking]]:
        """Get Symbols Marketcap Between Timestamps

        Retrieve a ranking of symbols by marketcap between timestamps.

        :param start_timestamp: Start timestamp
        :type start_timestamp: int
        :param end_timestamp: End timestamp
        :type end_timestamp: int
        :param interval: Interval for which to fetch symbols and marketcap data
        :type interval: str
        :param market: Market for which to fetch symbols and marketcap data. Defaults to futures.
        :type market: MarketType
        :param exchange: Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned.
        :type exchange: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_symbols_serialize(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            interval=interval,
            market=market,
            exchange=exchange,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[MarketcapSymbolRanking]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data, response_types_map=_response_types_map
        )

    @validate_call
    async def _get_marketcap_symbols_async_without_preload_content(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Symbols Marketcap Between Timestamps

        Retrieve a ranking of symbols by marketcap between timestamps.

        :param start_timestamp: Start timestamp
        :type start_timestamp: int
        :param end_timestamp: End timestamp
        :type end_timestamp: int
        :param interval: Interval for which to fetch symbols and marketcap data
        :type interval: str
        :param market: Market for which to fetch symbols and marketcap data. Defaults to futures.
        :type market: MarketType
        :param exchange: Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned.
        :type exchange: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_symbols_serialize(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            interval=interval,
            market=market,
            exchange=exchange,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[MarketcapSymbolRanking]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data

    # Private sync implementation methods
    @validate_call
    def _get_marketcap_symbols_sync(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MarketcapSymbolRanking]:
        """Synchronous version of get_marketcap_symbols"""
        return async_to_sync(self._get_marketcap_symbols_async)(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            interval=interval,
            market=market,
            exchange=exchange,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_marketcap_symbols_sync_with_http_info(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MarketcapSymbolRanking]]:
        """Synchronous version of get_marketcap_symbols_with_http_info"""
        return async_to_sync(self._get_marketcap_symbols_async_with_http_info)(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            interval=interval,
            market=market,
            exchange=exchange,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_marketcap_symbols_sync_without_preload_content(
        self,
        start_timestamp: Annotated[
            Optional[StrictInt], Field(description="Start timestamp")
        ] = None,
        end_timestamp: Annotated[
            Optional[StrictInt], Field(description="End timestamp")
        ] = None,
        interval: Annotated[
            Optional[StrictStr],
            Field(description="Interval for which to fetch symbols and marketcap data"),
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(
                description="Market for which to fetch symbols and marketcap data. Defaults to futures."
            ),
        ] = None,
        exchange: Annotated[
            Optional[StrictStr],
            Field(
                description="Exchange for which to fetch symbols and marketcap data. If not provided, all exchanges will be returned."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Synchronous version of get_marketcap_symbols_without_preload_content"""
        return async_to_sync(self._get_marketcap_symbols_async_without_preload_content)(
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
            interval=interval,
            market=market,
            exchange=exchange,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    def _get_marketcap_symbols_serialize(
        self,
        start_timestamp,
        end_timestamp,
        interval,
        market,
        exchange,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_timestamp is not None:
            _query_params.append(("start_timestamp", start_timestamp))

        if end_timestamp is not None:
            _query_params.append(("end_timestamp", end_timestamp))

        if interval is not None:
            _query_params.append(("interval", interval))

        if market is not None:
            _query_params.append(("market", market.value))

        if exchange is not None:
            _query_params.append(("exchange", exchange))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader", "HTTPBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/marketcap/symbols",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_marketcap_symbols_with_ohlcv(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[Dict[str, List[OHLCV]], Awaitable[Dict[str, List[OHLCV]]]]:
        """Get Symbols Marketcap With Ohlcv"""
        if self.is_sync:
            return self._get_marketcap_symbols_with_ohlcv_sync(
                timestamp=timestamp,
                timeframe=timeframe,
                market=market,
                top_n=top_n,
                ohlcv_limit=ohlcv_limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_symbols_with_ohlcv_async(
                timestamp=timestamp,
                timeframe=timeframe,
                market=market,
                top_n=top_n,
                ohlcv_limit=ohlcv_limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_marketcap_symbols_with_ohlcv_with_http_info(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[
        ApiResponse[Dict[str, List[OHLCV]]],
        Awaitable[ApiResponse[Dict[str, List[OHLCV]]]],
    ]:
        """Get Symbols Marketcap With Ohlcv with HTTP info"""
        if self.is_sync:
            return self._get_marketcap_symbols_with_ohlcv_sync_with_http_info(
                timestamp=timestamp,
                timeframe=timeframe,
                market=market,
                top_n=top_n,
                ohlcv_limit=ohlcv_limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_symbols_with_ohlcv_async_with_http_info(
                timestamp=timestamp,
                timeframe=timeframe,
                market=market,
                top_n=top_n,
                ohlcv_limit=ohlcv_limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_marketcap_symbols_with_ohlcv_without_preload_content(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[RESTResponseType, Awaitable[RESTResponseType]]:
        """Get Symbols Marketcap With Ohlcv without preloading content"""
        if self.is_sync:
            return self._get_marketcap_symbols_with_ohlcv_sync_without_preload_content(
                timestamp=timestamp,
                timeframe=timeframe,
                market=market,
                top_n=top_n,
                ohlcv_limit=ohlcv_limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_marketcap_symbols_with_ohlcv_async_without_preload_content(
                timestamp=timestamp,
                timeframe=timeframe,
                market=market,
                top_n=top_n,
                ohlcv_limit=ohlcv_limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    # Private async implementation methods
    @validate_call
    async def _get_marketcap_symbols_with_ohlcv_async(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, List[OHLCV]]:
        """Get Symbols Marketcap With Ohlcv

        Retrieve OHLCV data with marketcap for symbols at a specific timestamp.

        :param timestamp: Timestamp for which to fetch symbols and OHLCV data
        :type timestamp: int
        :param timeframe: Timeframe for OHLCV data
        :type timeframe: str
        :param market: Market for OHLCV data. Defaults to futures.
        :type market: MarketType
        :param top_n: Number of symbols to fetch
        :type top_n: int
        :param ohlcv_limit: Number of OHLCV data points to fetch
        :type ohlcv_limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_symbols_with_ohlcv_serialize(
            timestamp=timestamp,
            timeframe=timeframe,
            market=market,
            top_n=top_n,
            ohlcv_limit=ohlcv_limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, List[OHLCV]]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def _get_marketcap_symbols_with_ohlcv_async_with_http_info(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, List[OHLCV]]]:
        """Get Symbols Marketcap With Ohlcv

        Retrieve OHLCV data with marketcap for symbols at a specific timestamp.

        :param timestamp: Timestamp for which to fetch symbols and OHLCV data
        :type timestamp: int
        :param timeframe: Timeframe for OHLCV data
        :type timeframe: str
        :param market: Market for OHLCV data. Defaults to futures.
        :type market: MarketType
        :param top_n: Number of symbols to fetch
        :type top_n: int
        :param ohlcv_limit: Number of OHLCV data points to fetch
        :type ohlcv_limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_symbols_with_ohlcv_serialize(
            timestamp=timestamp,
            timeframe=timeframe,
            market=market,
            top_n=top_n,
            ohlcv_limit=ohlcv_limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, List[OHLCV]]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data, response_types_map=_response_types_map
        )

    @validate_call
    async def _get_marketcap_symbols_with_ohlcv_async_without_preload_content(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Symbols Marketcap With Ohlcv

        Retrieve OHLCV data with marketcap for symbols at a specific timestamp.

        :param timestamp: Timestamp for which to fetch symbols and OHLCV data
        :type timestamp: int
        :param timeframe: Timeframe for OHLCV data
        :type timeframe: str
        :param market: Market for OHLCV data. Defaults to futures.
        :type market: MarketType
        :param top_n: Number of symbols to fetch
        :type top_n: int
        :param ohlcv_limit: Number of OHLCV data points to fetch
        :type ohlcv_limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_marketcap_symbols_with_ohlcv_serialize(
            timestamp=timestamp,
            timeframe=timeframe,
            market=market,
            top_n=top_n,
            ohlcv_limit=ohlcv_limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, List[OHLCV]]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data

    # Private sync implementation methods
    @validate_call
    def _get_marketcap_symbols_with_ohlcv_sync(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, List[OHLCV]]:
        """Synchronous version of get_marketcap_symbols_with_ohlcv"""
        return async_to_sync(self._get_marketcap_symbols_with_ohlcv_async)(
            timestamp=timestamp,
            timeframe=timeframe,
            market=market,
            top_n=top_n,
            ohlcv_limit=ohlcv_limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_marketcap_symbols_with_ohlcv_sync_with_http_info(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, List[OHLCV]]]:
        """Synchronous version of get_marketcap_symbols_with_ohlcv_with_http_info"""
        return async_to_sync(
            self._get_marketcap_symbols_with_ohlcv_async_with_http_info
        )(
            timestamp=timestamp,
            timeframe=timeframe,
            market=market,
            top_n=top_n,
            ohlcv_limit=ohlcv_limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_marketcap_symbols_with_ohlcv_sync_without_preload_content(
        self,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch symbols and OHLCV data"),
        ] = None,
        timeframe: Annotated[
            Optional[StrictStr], Field(description="Timeframe for OHLCV data")
        ] = None,
        market: Annotated[
            Optional[MarketType],
            Field(description="Market for OHLCV data. Defaults to futures."),
        ] = None,
        top_n: Annotated[
            Optional[StrictInt], Field(description="Number of symbols to fetch")
        ] = None,
        ohlcv_limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of OHLCV data points to fetch"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Synchronous version of get_marketcap_symbols_with_ohlcv_without_preload_content"""
        return async_to_sync(
            self._get_marketcap_symbols_with_ohlcv_async_without_preload_content
        )(
            timestamp=timestamp,
            timeframe=timeframe,
            market=market,
            top_n=top_n,
            ohlcv_limit=ohlcv_limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    def _get_marketcap_symbols_with_ohlcv_serialize(
        self,
        timestamp,
        timeframe,
        market,
        top_n,
        ohlcv_limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            _query_params.append(("timestamp", timestamp))

        if timeframe is not None:
            _query_params.append(("timeframe", timeframe))

        if market is not None:
            _query_params.append(("market", market.value))

        if top_n is not None:
            _query_params.append(("top_n", top_n))

        if ohlcv_limit is not None:
            _query_params.append(("ohlcv_limit", ohlcv_limit))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader", "HTTPBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/marketcap/symbols/ohlcv",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
