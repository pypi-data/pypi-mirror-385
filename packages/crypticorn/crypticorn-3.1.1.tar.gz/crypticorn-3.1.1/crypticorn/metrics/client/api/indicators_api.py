# coding: utf-8

"""
Marketcap Service API

API for retrieving historical marketcap data, available exchanges, and indicators.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Awaitable, Dict, List, Optional, Tuple, Union

from asgiref.sync import async_to_sync
from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from crypticorn.metrics.client.api_client import ApiClient, RequestSerialized
from crypticorn.metrics.client.api_response import ApiResponse
from crypticorn.metrics.client.models.market_type import MarketType
from crypticorn.metrics.client.rest import RESTResponseType


class IndicatorsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None, is_sync: bool = False) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client
        self.is_sync = is_sync

    @validate_call
    def get_ker_indicator(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[Dict[str, object], Awaitable[Dict[str, object]]]:
        """Get Ker Indicator"""
        if self.is_sync:
            return self._get_ker_indicator_sync(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_ker_indicator_async(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_ker_indicator_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[
        ApiResponse[Dict[str, object]], Awaitable[ApiResponse[Dict[str, object]]]
    ]:
        """Get Ker Indicator with HTTP info"""
        if self.is_sync:
            return self._get_ker_indicator_sync_with_http_info(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_ker_indicator_async_with_http_info(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_ker_indicator_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[RESTResponseType, Awaitable[RESTResponseType]]:
        """Get Ker Indicator without preloading content"""
        if self.is_sync:
            return self._get_ker_indicator_sync_without_preload_content(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_ker_indicator_async_without_preload_content(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    # Private async implementation methods
    @validate_call
    async def _get_ker_indicator_async(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, object]:
        """Get Ker Indicator

        Calculate and retrieve the KER indicator for a symbol.

        :param symbol: Symbol to fetch KER indicator for (required)
        :type symbol: str
        :param market: Market. Defaults to futures.
        :type market: MarketType
        :param period: KER indicator period
        :type period: int
        :param timestamp: Timestamp for which to fetch KER indicator
        :type timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_ker_indicator_serialize(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, object]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def _get_ker_indicator_async_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, object]]:
        """Get Ker Indicator

        Calculate and retrieve the KER indicator for a symbol.

        :param symbol: Symbol to fetch KER indicator for (required)
        :type symbol: str
        :param market: Market. Defaults to futures.
        :type market: MarketType
        :param period: KER indicator period
        :type period: int
        :param timestamp: Timestamp for which to fetch KER indicator
        :type timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_ker_indicator_serialize(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, object]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data, response_types_map=_response_types_map
        )

    @validate_call
    async def _get_ker_indicator_async_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Ker Indicator

        Calculate and retrieve the KER indicator for a symbol.

        :param symbol: Symbol to fetch KER indicator for (required)
        :type symbol: str
        :param market: Market. Defaults to futures.
        :type market: MarketType
        :param period: KER indicator period
        :type period: int
        :param timestamp: Timestamp for which to fetch KER indicator
        :type timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_ker_indicator_serialize(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, object]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data

    # Private sync implementation methods
    @validate_call
    def _get_ker_indicator_sync(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, object]:
        """Synchronous version of get_ker_indicator"""
        return async_to_sync(self._get_ker_indicator_async)(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_ker_indicator_sync_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, object]]:
        """Synchronous version of get_ker_indicator_with_http_info"""
        return async_to_sync(self._get_ker_indicator_async_with_http_info)(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_ker_indicator_sync_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch KER indicator for")
        ],
        market: Annotated[
            Optional[MarketType], Field(description="Market. Defaults to futures.")
        ] = None,
        period: Annotated[
            Optional[StrictInt], Field(description="KER indicator period")
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="Timestamp for which to fetch KER indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Synchronous version of get_ker_indicator_without_preload_content"""
        return async_to_sync(self._get_ker_indicator_async_without_preload_content)(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    def _get_ker_indicator_serialize(
        self,
        symbol,
        market,
        period,
        timestamp,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            _query_params.append(("symbol", symbol))

        if market is not None:
            _query_params.append(("market", market.value))

        if period is not None:
            _query_params.append(("period", period))

        if timestamp is not None:
            _query_params.append(("timestamp", timestamp))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader", "HTTPBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/indicators/ker",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sma_indicator(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[Dict[str, object], Awaitable[Dict[str, object]]]:
        """Get Sma Indicator"""
        if self.is_sync:
            return self._get_sma_indicator_sync(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_sma_indicator_async(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_sma_indicator_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[
        ApiResponse[Dict[str, object]], Awaitable[ApiResponse[Dict[str, object]]]
    ]:
        """Get Sma Indicator with HTTP info"""
        if self.is_sync:
            return self._get_sma_indicator_sync_with_http_info(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_sma_indicator_async_with_http_info(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_sma_indicator_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Union[RESTResponseType, Awaitable[RESTResponseType]]:
        """Get Sma Indicator without preloading content"""
        if self.is_sync:
            return self._get_sma_indicator_sync_without_preload_content(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_sma_indicator_async_without_preload_content(
                symbol=symbol,
                market=market,
                period=period,
                timestamp=timestamp,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    # Private async implementation methods
    @validate_call
    async def _get_sma_indicator_async(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, object]:
        """Get Sma Indicator

        Calculate and retrieve the Simple Moving Average (SMA) indicator for a symbol.

        :param symbol: Symbol to fetch SMA indicator for (required)
        :type symbol: str
        :param market: The market type to use for the SMA indicator
        :type market: MarketType
        :param period: The period to use for the SMA indicator
        :type period: int
        :param timestamp: The timestamp for which to fetch the SMA indicator
        :type timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sma_indicator_serialize(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, object]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def _get_sma_indicator_async_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, object]]:
        """Get Sma Indicator

        Calculate and retrieve the Simple Moving Average (SMA) indicator for a symbol.

        :param symbol: Symbol to fetch SMA indicator for (required)
        :type symbol: str
        :param market: The market type to use for the SMA indicator
        :type market: MarketType
        :param period: The period to use for the SMA indicator
        :type period: int
        :param timestamp: The timestamp for which to fetch the SMA indicator
        :type timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sma_indicator_serialize(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, object]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data, response_types_map=_response_types_map
        )

    @validate_call
    async def _get_sma_indicator_async_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Sma Indicator

        Calculate and retrieve the Simple Moving Average (SMA) indicator for a symbol.

        :param symbol: Symbol to fetch SMA indicator for (required)
        :type symbol: str
        :param market: The market type to use for the SMA indicator
        :type market: MarketType
        :param period: The period to use for the SMA indicator
        :type period: int
        :param timestamp: The timestamp for which to fetch the SMA indicator
        :type timestamp: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sma_indicator_serialize(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Dict[str, object]",
        }

        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data

    # Private sync implementation methods
    @validate_call
    def _get_sma_indicator_sync(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, object]:
        """Synchronous version of get_sma_indicator"""
        return async_to_sync(self._get_sma_indicator_async)(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_sma_indicator_sync_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, object]]:
        """Synchronous version of get_sma_indicator_with_http_info"""
        return async_to_sync(self._get_sma_indicator_async_with_http_info)(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_sma_indicator_sync_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Symbol to fetch SMA indicator for")
        ],
        market: Annotated[
            Optional[MarketType],
            Field(description="The market type to use for the SMA indicator"),
        ] = None,
        period: Annotated[
            Optional[StrictInt],
            Field(description="The period to use for the SMA indicator"),
        ] = None,
        timestamp: Annotated[
            Optional[StrictInt],
            Field(description="The timestamp for which to fetch the SMA indicator"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Synchronous version of get_sma_indicator_without_preload_content"""
        return async_to_sync(self._get_sma_indicator_async_without_preload_content)(
            symbol=symbol,
            market=market,
            period=period,
            timestamp=timestamp,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    def _get_sma_indicator_serialize(
        self,
        symbol,
        market,
        period,
        timestamp,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:
            _query_params.append(("symbol", symbol))

        if market is not None:
            _query_params.append(("market", market.value))

        if period is not None:
            _query_params.append(("period", period))

        if timestamp is not None:
            _query_params.append(("timestamp", timestamp))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader", "HTTPBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/indicators/sma",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
