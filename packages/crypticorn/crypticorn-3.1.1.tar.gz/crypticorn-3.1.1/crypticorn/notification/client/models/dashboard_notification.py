# coding: utf-8

"""
Notifications API

API for notification delivery system

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self

from crypticorn.notification.client.models.ui_template import UITemplate


class DashboardNotification(BaseModel):
    """
    DashboardNotification
    """  # noqa: E501

    id: StrictStr = Field(description="Unique identifier for the resource")
    created_at: StrictInt = Field(description="Timestamp of creation")
    updated_at: StrictInt = Field(description="Timestamp of last update")
    template_id: StrictStr = Field(description="Template ID of the notification")
    viewed: Optional[StrictBool] = Field(
        default=False, description="Whether the notification has been marked as seen"
    )
    variables: Dict[str, Any] = Field(description="Variables of the notification")
    user_id: StrictStr = Field(description="User ID")
    rendered: UITemplate = Field(description="Rendered notification")
    __properties: ClassVar[List[str]] = [
        "id",
        "created_at",
        "updated_at",
        "template_id",
        "viewed",
        "variables",
        "user_id",
        "rendered",
    ]

    @field_validator("template_id")
    def template_id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "subscription_predictions_welcome",
                "subscription_dex_signals_welcome",
                "subscription_combo_welcome",
                "new_member",
                "exchange_api_key_expiring",
                "test",
                "new_dex_ai_call",
                "new_dex_ai_call_incognito",
                "order_completion",
                "otp_code",
                "subscription_expiring",
                "subscription_expired",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('subscription_predictions_welcome', 'subscription_dex_signals_welcome', 'subscription_combo_welcome', 'new_member', 'exchange_api_key_expiring', 'test', 'new_dex_ai_call', 'new_dex_ai_call_incognito', 'order_completion', 'otp_code', 'subscription_expiring', 'subscription_expired')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rendered
        if self.rendered:
            _dict["rendered"] = self.rendered.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "template_id": obj.get("template_id"),
                "viewed": obj.get("viewed") if obj.get("viewed") is not None else False,
                "variables": obj.get("variables"),
                "user_id": obj.get("user_id"),
                "rendered": (
                    UITemplate.from_dict(obj["rendered"])
                    if obj.get("rendered") is not None
                    else None
                ),
            }
        )
        return _obj
