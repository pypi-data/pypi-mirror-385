# coding: utf-8

"""
Trading API

API for automated trading and exchange interface. This API is used to trade on the exchange and manage bots, API keys, orders, and more.

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class StrategyUpdate(BaseModel):
    """
    Strategy model for API update operations. Fields cannot be unset.
    """  # noqa: E501

    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    exchanges: Optional[List[StrictStr]] = None
    enabled: Optional[StrictBool] = None
    performance_fee: Optional[
        Union[
            Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
            Annotated[int, Field(le=1, strict=True, ge=0)],
        ]
    ] = None
    __properties: ClassVar[List[str]] = [
        "name",
        "description",
        "exchanges",
        "enabled",
        "performance_fee",
    ]

    @field_validator("exchanges")
    def exchanges_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["hyperliquid"]):
                raise ValueError("each list item must be one of ('hyperliquid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StrategyUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if exchanges (nullable) is None
        # and model_fields_set contains the field
        if self.exchanges is None and "exchanges" in self.model_fields_set:
            _dict["exchanges"] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict["enabled"] = None

        # set to None if performance_fee (nullable) is None
        # and model_fields_set contains the field
        if self.performance_fee is None and "performance_fee" in self.model_fields_set:
            _dict["performance_fee"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StrategyUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "exchanges": obj.get("exchanges"),
                "enabled": obj.get("enabled"),
                "performance_fee": obj.get("performance_fee"),
            }
        )
        return _obj
