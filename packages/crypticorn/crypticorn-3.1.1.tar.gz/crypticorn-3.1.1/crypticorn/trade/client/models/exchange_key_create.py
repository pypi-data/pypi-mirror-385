# coding: utf-8

"""
Trading API

API for automated trading and exchange interface. This API is used to trade on the exchange and manage bots, API keys, orders, and more.

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self


class ExchangeKeyCreate(BaseModel):
    """
    Exchange key model for API create operations.
    """  # noqa: E501

    label: StrictStr = Field(description="Label for the API key")
    api_key: StrictStr = Field(description="API key")
    secret: StrictStr = Field(description="API secret")
    exchange: StrictStr = Field(description="The exchange the API key is for.")
    type: StrictStr = Field(description="The type of the API key.")
    __properties: ClassVar[List[str]] = [
        "label",
        "api_key",
        "secret",
        "exchange",
        "type",
    ]

    @field_validator("exchange")
    def exchange_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["hyperliquid"]):
            raise ValueError("must be one of enum values ('hyperliquid')")
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["user", "vault"]):
            raise ValueError("must be one of enum values ('user', 'vault')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangeKeyCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangeKeyCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "label": obj.get("label"),
                "api_key": obj.get("api_key"),
                "secret": obj.get("secret"),
                "exchange": obj.get("exchange"),
                "type": obj.get("type"),
            }
        )
        return _obj
