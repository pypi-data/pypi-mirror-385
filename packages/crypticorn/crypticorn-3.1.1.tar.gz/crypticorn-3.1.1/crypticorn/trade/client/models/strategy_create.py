# coding: utf-8

"""
Trading API

API for automated trading and exchange interface. This API is used to trade on the exchange and manage bots, API keys, orders, and more.

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class StrategyCreate(BaseModel):
    """
    Strategy model for API create operations.
    """  # noqa: E501

    name: StrictStr = Field(description="Name of the strategy")
    description: StrictStr = Field(description="Description of the strategy")
    exchanges: List[StrictStr] = Field(
        description="Exchanges supported by the strategy."
    )
    enabled: StrictBool = Field(
        description="Whether the strategy is enabled. If false, no bots will be created or updated for this strategy, open trades will be rejected. Existing bots will be marked as stopping."
    )
    identifier: StrictStr = Field(
        description="Unique human readable identifier for the strategy e.g. 'daily_trend_momentum'"
    )
    margin_mode: Optional[StrictStr] = None
    leverage: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="Leverage for the strategy"
    )
    market_type: StrictStr = Field(description="Market of operation of the strategy")
    __properties: ClassVar[List[str]] = [
        "name",
        "description",
        "exchanges",
        "enabled",
        "identifier",
        "margin_mode",
        "leverage",
        "market_type",
    ]

    @field_validator("exchanges")
    def exchanges_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(["hyperliquid"]):
                raise ValueError("each list item must be one of ('hyperliquid')")
        return value

    @field_validator("margin_mode")
    def margin_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["isolated", "cross"]):
            raise ValueError("must be one of enum values ('isolated', 'cross')")
        return value

    @field_validator("market_type")
    def market_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["spot", "futures"]):
            raise ValueError("must be one of enum values ('spot', 'futures')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StrategyCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if margin_mode (nullable) is None
        # and model_fields_set contains the field
        if self.margin_mode is None and "margin_mode" in self.model_fields_set:
            _dict["margin_mode"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StrategyCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "exchanges": obj.get("exchanges"),
                "enabled": obj.get("enabled"),
                "identifier": obj.get("identifier"),
                "margin_mode": obj.get("margin_mode"),
                "leverage": obj.get("leverage"),
                "market_type": obj.get("market_type"),
            }
        )
        return _obj
