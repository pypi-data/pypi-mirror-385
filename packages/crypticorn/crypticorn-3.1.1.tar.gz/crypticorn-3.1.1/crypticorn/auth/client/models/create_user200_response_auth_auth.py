# coding: utf-8

"""
Crypticorn Auth API

OpenAPI compliant REST API built using tRPC with Express

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Self


class CreateUser200ResponseAuthAuth(BaseModel):
    """
    CreateUser200ResponseAuthAuth
    """  # noqa: E501

    iss: Optional[StrictStr] = Field(default=None, description="Issuer")
    sub: Optional[StrictStr] = Field(default=None, description="Subject")
    aud: Optional[StrictStr] = Field(default=None, description="Audience")
    exp: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Expiration time"
    )
    nbf: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Not valid before time"
    )
    iat: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Issued at time"
    )
    jti: Optional[StrictStr] = Field(default=None, description="JWT ID")
    admin: Optional[StrictBool] = Field(
        default=None, description="Whether the user is an admin"
    )
    scopes: Optional[List[StrictStr]] = Field(default=None, description="Scopes")
    __properties: ClassVar[List[str]] = [
        "iss",
        "sub",
        "aud",
        "exp",
        "nbf",
        "iat",
        "jti",
        "admin",
        "scopes",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUser200ResponseAuthAuth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUser200ResponseAuthAuth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "iss": obj.get("iss"),
                "sub": obj.get("sub"),
                "aud": obj.get("aud"),
                "exp": obj.get("exp"),
                "nbf": obj.get("nbf"),
                "iat": obj.get("iat"),
                "jti": obj.get("jti"),
                "admin": obj.get("admin"),
                "scopes": obj.get("scopes"),
            }
        )
        return _obj
