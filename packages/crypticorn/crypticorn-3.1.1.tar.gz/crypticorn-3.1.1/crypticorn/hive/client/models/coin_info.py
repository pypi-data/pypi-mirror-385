# coding: utf-8

"""
Hive AI API

API for Hive AI model training and evaluation

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class CoinInfo(BaseModel):
    """
    Metadata about a cryptocurrency including availability across data versions.
    """  # noqa: E501

    identifier: StrictStr = Field(
        description="The identifier of the coin. Obfuscated for public use."
    )
    version_added: StrictStr = Field(
        description="The data version the coin got introduced in"
    )
    version_removed: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "identifier",
        "version_added",
        "version_removed",
    ]

    @field_validator("identifier")
    def identifier_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]):
            raise ValueError(
                "must be one of enum values ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')"
            )
        return value

    @field_validator("version_added")
    def version_added_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["1.0"]):
            raise ValueError("must be one of enum values ('1.0')")
        return value

    @field_validator("version_removed")
    def version_removed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["1.0"]):
            raise ValueError("must be one of enum values ('1.0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoinInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if version_removed (nullable) is None
        # and model_fields_set contains the field
        if self.version_removed is None and "version_removed" in self.model_fields_set:
            _dict["version_removed"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoinInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "identifier": obj.get("identifier"),
                "version_added": obj.get("version_added"),
                "version_removed": obj.get("version_removed"),
            }
        )
        return _obj
