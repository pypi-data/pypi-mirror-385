# coding: utf-8

"""
Crypticorn Auth API

OpenAPI compliant REST API built using tRPC with Express

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class CreateUserWithWalletRequest(BaseModel):
    """
    CreateUserWithWalletRequest
    """  # noqa: E501

    oob_code: StrictStr = Field(
        description="OOB Code returned from walletNonce. This method must be called before creating a user with a wallet.",
        alias="oobCode",
    )
    signature: StrictStr = Field(
        description="Signature returned from the EVM client when signing the message returned from walletNonce. This method must be called before creating a user with a wallet."
    )
    message: StrictStr = Field(
        description="Message returned from walletNonce. This method must be called before creating a user with a wallet."
    )
    username: Optional[StrictStr] = Field(
        default=None, description="Username for the user"
    )
    name: Optional[StrictStr] = Field(
        default=None, description="Display name for the user"
    )
    picture: Optional[StrictStr] = Field(
        default=None, description="Profile picture for the user"
    )
    phone: Optional[StrictStr] = Field(
        default=None, description="Phone number for the user"
    )
    __properties: ClassVar[List[str]] = [
        "oobCode",
        "signature",
        "message",
        "username",
        "name",
        "picture",
        "phone",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUserWithWalletRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUserWithWalletRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "oobCode": obj.get("oobCode"),
                "signature": obj.get("signature"),
                "message": obj.get("message"),
                "username": obj.get("username"),
                "name": obj.get("name"),
                "picture": obj.get("picture"),
                "phone": obj.get("phone"),
            }
        )
        return _obj
