# coding: utf-8

"""
Hive AI API

API for Hive AI model training and evaluation

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from crypticorn.hive.client.models.benchmarks_value import BenchmarksValue
from crypticorn.hive.client.models.metrics import Metrics


class EvaluationResponse(BaseModel):
    """
    Pydantic model for evaluation response
    """  # noqa: E501

    metrics: Metrics
    benchmarks: Dict[str, BenchmarksValue] = Field(description="Evaluation benchmarks")
    __properties: ClassVar[List[str]] = ["metrics", "benchmarks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict["metrics"] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in benchmarks (dict)
        _field_dict = {}
        if self.benchmarks:
            for _key_benchmarks in self.benchmarks:
                if self.benchmarks[_key_benchmarks]:
                    _field_dict[_key_benchmarks] = self.benchmarks[
                        _key_benchmarks
                    ].to_dict()
            _dict["benchmarks"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "metrics": (
                    Metrics.from_dict(obj["metrics"])
                    if obj.get("metrics") is not None
                    else None
                ),
                "benchmarks": (
                    dict(
                        (_k, BenchmarksValue.from_dict(_v))
                        for _k, _v in obj["benchmarks"].items()
                    )
                    if obj.get("benchmarks") is not None
                    else None
                ),
            }
        )
        return _obj
