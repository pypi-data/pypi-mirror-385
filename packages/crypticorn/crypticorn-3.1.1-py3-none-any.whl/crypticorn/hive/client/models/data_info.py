# coding: utf-8

"""
Hive AI API

API for Hive AI model training and evaluation

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from crypticorn.hive.client.models.coin_info import CoinInfo
from crypticorn.hive.client.models.data_options import DataOptions
from crypticorn.hive.client.models.data_version_info import DataVersionInfo
from crypticorn.hive.client.models.target_info import TargetInfo


class DataInfo(BaseModel):
    """
    Comprehensive data catalog including all available datasets, versions, and metadata.
    """  # noqa: E501

    data: Dict[str, Dict[str, DataOptions]] = Field(
        description="The data available for all data versions."
    )
    coins: List[CoinInfo] = Field(
        description="The coins available for all data versions."
    )
    feature_sizes: List[StrictStr] = Field(
        description="The feature sizes available for all data versions."
    )
    targets: List[TargetInfo] = Field(
        description="The targets available for all data versions."
    )
    all_versions: List[DataVersionInfo] = Field(
        description="All ever existing data versions. Some may not be publicly available yet."
    )
    available_versions: List[DataVersionInfo] = Field(
        description="All publicly available data versions."
    )
    __properties: ClassVar[List[str]] = [
        "data",
        "coins",
        "feature_sizes",
        "targets",
        "all_versions",
        "available_versions",
    ]

    @field_validator("feature_sizes")
    def feature_sizes_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(["small", "medium", "large"]):
                raise ValueError(
                    "each list item must be one of ('small', 'medium', 'large')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in data (dict)
        _field_dict = {}
        if self.data:
            for _key_data in self.data:
                if self.data[_key_data]:
                    _field_dict[_key_data] = self.data[_key_data].to_dict()
            _dict["data"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in coins (list)
        _items = []
        if self.coins:
            for _item_coins in self.coins:
                if _item_coins:
                    _items.append(_item_coins.to_dict())
            _dict["coins"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict["targets"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in all_versions (list)
        _items = []
        if self.all_versions:
            for _item_all_versions in self.all_versions:
                if _item_all_versions:
                    _items.append(_item_all_versions.to_dict())
            _dict["all_versions"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_versions (list)
        _items = []
        if self.available_versions:
            for _item_available_versions in self.available_versions:
                if _item_available_versions:
                    _items.append(_item_available_versions.to_dict())
            _dict["available_versions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "data": (
                    dict(
                        (
                            _k,
                            (
                                dict(
                                    (_ik, DataOptions.from_dict(_iv))
                                    for _ik, _iv in _v.items()
                                )
                                if _v is not None
                                else None
                            ),
                        )
                        for _k, _v in obj.get("data").items()
                    )
                    if obj.get("data") is not None
                    else None
                ),
                "coins": (
                    [CoinInfo.from_dict(_item) for _item in obj["coins"]]
                    if obj.get("coins") is not None
                    else None
                ),
                "feature_sizes": obj.get("feature_sizes"),
                "targets": (
                    [TargetInfo.from_dict(_item) for _item in obj["targets"]]
                    if obj.get("targets") is not None
                    else None
                ),
                "all_versions": (
                    [DataVersionInfo.from_dict(_item) for _item in obj["all_versions"]]
                    if obj.get("all_versions") is not None
                    else None
                ),
                "available_versions": (
                    [
                        DataVersionInfo.from_dict(_item)
                        for _item in obj["available_versions"]
                    ]
                    if obj.get("available_versions") is not None
                    else None
                ),
            }
        )
        return _obj
