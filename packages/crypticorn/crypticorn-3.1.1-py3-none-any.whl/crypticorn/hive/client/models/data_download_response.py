# coding: utf-8

"""
Hive AI API

API for Hive AI model training and evaluation

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from crypticorn.hive.client.models.download_links import DownloadLinks
from crypticorn.hive.client.models.target import Target


class DataDownloadResponse(BaseModel):
    """
    Response model containing download links and metadata for requested training data.
    """  # noqa: E501

    coin: StrictStr = Field(description="The coin the data is for")
    feature_size: StrictStr = Field(description="The feature size the data is for")
    version: StrictStr = Field(description="The version of the data")
    target: Target = Field(description="The target of the data")
    links: DownloadLinks = Field(description="The download links for the data")
    __properties: ClassVar[List[str]] = [
        "coin",
        "feature_size",
        "version",
        "target",
        "links",
    ]

    @field_validator("coin")
    def coin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]):
            raise ValueError(
                "must be one of enum values ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')"
            )
        return value

    @field_validator("feature_size")
    def feature_size_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["small", "medium", "large"]):
            raise ValueError("must be one of enum values ('small', 'medium', 'large')")
        return value

    @field_validator("version")
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["1.0"]):
            raise ValueError("must be one of enum values ('1.0')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataDownloadResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict["links"] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataDownloadResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "coin": obj.get("coin"),
                "feature_size": obj.get("feature_size"),
                "version": obj.get("version"),
                "target": obj.get("target"),
                "links": (
                    DownloadLinks.from_dict(obj["links"])
                    if obj.get("links") is not None
                    else None
                ),
            }
        )
        return _obj
