# coding: utf-8

"""
Marketcap Service API

API for retrieving historical marketcap data, available exchanges, and indicators.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing_extensions import Self


class OHLCV(BaseModel):
    """
    Open, High, Low, Close, Volume candlestick data with optional market cap information.
    """  # noqa: E501

    timestamp: StrictInt = Field(description="Unix timestamp of the candle period")
    open: Union[StrictFloat, StrictInt] = Field(
        description="Opening price of the period"
    )
    high: Union[StrictFloat, StrictInt] = Field(
        description="Highest price during the period"
    )
    low: Union[StrictFloat, StrictInt] = Field(
        description="Lowest price during the period"
    )
    close: Union[StrictFloat, StrictInt] = Field(
        description="Closing price of the period"
    )
    volume: Union[StrictFloat, StrictInt] = Field(
        description="Trading volume during the period"
    )
    marketcap: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "timestamp",
        "open",
        "high",
        "low",
        "close",
        "volume",
        "marketcap",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OHLCV from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if marketcap (nullable) is None
        # and model_fields_set contains the field
        if self.marketcap is None and "marketcap" in self.model_fields_set:
            _dict["marketcap"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OHLCV from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "timestamp": obj.get("timestamp"),
                "open": obj.get("open"),
                "high": obj.get("high"),
                "low": obj.get("low"),
                "close": obj.get("close"),
                "volume": obj.get("volume"),
                "marketcap": obj.get("marketcap"),
            }
        )
        return _obj
