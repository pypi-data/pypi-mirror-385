# coding: utf-8

"""
Marketcap Service API

API for retrieving historical marketcap data, available exchanges, and indicators.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self

from crypticorn.metrics.client.models.market_type import MarketType
from crypticorn.metrics.client.models.trading_status import TradingStatus


class ExchangeMapping(BaseModel):
    """
    ExchangeMapping
    """  # noqa: E501

    exchange_name: StrictStr = Field(description="The name of the exchange")
    symbol: StrictStr = Field(description="The symbol of the exchange")
    quote_currency: StrictStr = Field(description="The quote currency of the exchange")
    pair: StrictStr = Field(description="The pair of the exchange")
    first_trade_timestamp: StrictInt = Field(
        description="The first trade timestamp of the exchange"
    )
    last_trade_timestamp: StrictInt = Field(
        description="The last trade timestamp of the exchange"
    )
    status: TradingStatus = Field(description="The status of the exchange")
    market_type: Optional[MarketType] = None
    __properties: ClassVar[List[str]] = [
        "exchange_name",
        "symbol",
        "quote_currency",
        "pair",
        "first_trade_timestamp",
        "last_trade_timestamp",
        "status",
        "market_type",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangeMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if market_type (nullable) is None
        # and model_fields_set contains the field
        if self.market_type is None and "market_type" in self.model_fields_set:
            _dict["market_type"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangeMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "exchange_name": obj.get("exchange_name"),
                "symbol": obj.get("symbol"),
                "quote_currency": obj.get("quote_currency"),
                "pair": obj.get("pair"),
                "first_trade_timestamp": obj.get("first_trade_timestamp"),
                "last_trade_timestamp": obj.get("last_trade_timestamp"),
                "status": obj.get("status"),
                "market_type": obj.get("market_type"),
            }
        )
        return _obj
