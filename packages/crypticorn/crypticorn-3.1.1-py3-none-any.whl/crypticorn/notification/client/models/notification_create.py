# coding: utf-8

"""
Notifications API

API for notification delivery system

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class NotificationCreate(BaseModel):
    """
    NotificationCreate
    """  # noqa: E501

    template: StrictStr = Field(description="Template ID")
    variables: Dict[str, Any] = Field(description="Variables for the template")
    user_ids: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["template", "variables", "user_ids"]

    @field_validator("template")
    def template_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "subscription_predictions_welcome",
                "subscription_dex_signals_welcome",
                "subscription_combo_welcome",
                "new_member",
                "exchange_api_key_expiring",
                "test",
                "new_dex_ai_call",
                "new_dex_ai_call_incognito",
                "order_completion",
                "otp_code",
                "subscription_expiring",
                "subscription_expired",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('subscription_predictions_welcome', 'subscription_dex_signals_welcome', 'subscription_combo_welcome', 'new_member', 'exchange_api_key_expiring', 'test', 'new_dex_ai_call', 'new_dex_ai_call_incognito', 'order_completion', 'otp_code', 'subscription_expiring', 'subscription_expired')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if user_ids (nullable) is None
        # and model_fields_set contains the field
        if self.user_ids is None and "user_ids" in self.model_fields_set:
            _dict["user_ids"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "template": obj.get("template"),
                "variables": obj.get("variables"),
                "user_ids": obj.get("user_ids"),
            }
        )
        return _obj
