# coding: utf-8

"""
Payment API

API for accepting payments and storing subscriptions

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class StakeDetails(BaseModel):
    """
    Details of a staking pool
    """  # noqa: E501

    pool_id: StrictInt = Field(description="The ID of the staking pool.")
    reward_base: StrictStr = Field(
        description="The base reward amount accumulated so far, in wei (1 ETH = 1e18 wei)."
    )
    current_stake: StrictStr = Field(
        description="The amount currently staked by the user, in wei."
    )
    start_time: StrictStr = Field(
        description="The Unix timestamp (in seconds) when the stake was created."
    )
    lock_period: StrictStr = Field(
        description="The duration the stake is locked for, in seconds (e.g., 5184000 = 60 days)."
    )
    apy: StrictStr = Field(
        description="The annual percentage yield (APY), represented in wei format (e.g., 1e18 = 100%)."
    )
    pending_reward: StrictStr = Field(
        description="The reward currently available to claim, in wei."
    )
    pending_withdrawal: StrictStr = Field(
        description="The amount currently pending to withdraw, in wei."
    )
    __properties: ClassVar[List[str]] = [
        "pool_id",
        "reward_base",
        "current_stake",
        "start_time",
        "lock_period",
        "apy",
        "pending_reward",
        "pending_withdrawal",
    ]

    @field_validator("pool_id")
    def pool_id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2, 3, 4]):
            raise ValueError("must be one of enum values (1, 2, 3, 4)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StakeDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StakeDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "pool_id": obj.get("pool_id"),
                "reward_base": obj.get("reward_base"),
                "current_stake": obj.get("current_stake"),
                "start_time": obj.get("start_time"),
                "lock_period": obj.get("lock_period"),
                "apy": obj.get("apy"),
                "pending_reward": obj.get("pending_reward"),
                "pending_withdrawal": obj.get("pending_withdrawal"),
            }
        )
        return _obj
