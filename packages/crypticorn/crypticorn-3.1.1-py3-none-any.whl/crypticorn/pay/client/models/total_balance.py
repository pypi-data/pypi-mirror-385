# coding: utf-8

"""
Payment API

API for accepting payments and storing subscriptions

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class TotalBalance(BaseModel):
    """
    Model for a user's total balance
    """  # noqa: E501

    staked: StrictStr = Field(description="Total staked balance in wei of AIC")
    balance: StrictStr = Field(description="Total balance in wei of AIC")
    reward_base: StrictStr = Field(description="Total reward base in wei of AIC")
    pending_reward: StrictStr = Field(description="Total pending reward in wei of AIC")
    pending_withdrawal: StrictStr = Field(
        description="Total pending withdrawal in wei of AIC"
    )
    average_apy: StrictStr = Field(
        description="The average APY on the staked balance calculated from the pool balances and their APYs. 1e18 = 100%"
    )
    __properties: ClassVar[List[str]] = [
        "staked",
        "balance",
        "reward_base",
        "pending_reward",
        "pending_withdrawal",
        "average_apy",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TotalBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TotalBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "staked": obj.get("staked"),
                "balance": obj.get("balance"),
                "reward_base": obj.get("reward_base"),
                "pending_reward": obj.get("pending_reward"),
                "pending_withdrawal": obj.get("pending_withdrawal"),
                "average_apy": obj.get("average_apy"),
            }
        )
        return _obj
