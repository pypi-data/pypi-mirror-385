# coding: utf-8

"""
Payment API

API for accepting payments and storing subscriptions

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class ExceptionDetailLiteralUnknownErrorInvalidDataRequestInvalidDataResponseObjectAlreadyExistsObjectNotFoundLifetimeSubscriptionAlreadyActiveCouponInvalidNowApiDownForbiddenInsufficientStakedBalance(
    BaseModel
):
    """
    ExceptionDetailLiteralUnknownErrorInvalidDataRequestInvalidDataResponseObjectAlreadyExistsObjectNotFoundLifetimeSubscriptionAlreadyActiveCouponInvalidNowApiDownForbiddenInsufficientStakedBalance
    """  # noqa: E501

    message: Optional[StrictStr] = None
    code: StrictStr = Field(description="The unique error code")
    status_code: StrictInt = Field(description="The HTTP status code")
    details: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["message", "code", "status_code", "details"]

    @field_validator("code")
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "unknown_error",
                "invalid_data_request",
                "invalid_data_response",
                "object_already_exists",
                "object_not_found",
                "lifetime_subscription_already_active",
                "coupon_invalid",
                "now_api_down",
                "forbidden",
                "insufficient_staked_balance",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('unknown_error', 'invalid_data_request', 'invalid_data_response', 'object_already_exists', 'object_not_found', 'lifetime_subscription_already_active', 'coupon_invalid', 'now_api_down', 'forbidden', 'insufficient_staked_balance')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExceptionDetailLiteralUnknownErrorInvalidDataRequestInvalidDataResponseObjectAlreadyExistsObjectNotFoundLifetimeSubscriptionAlreadyActiveCouponInvalidNowApiDownForbiddenInsufficientStakedBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict["message"] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict["details"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExceptionDetailLiteralUnknownErrorInvalidDataRequestInvalidDataResponseObjectAlreadyExistsObjectNotFoundLifetimeSubscriptionAlreadyActiveCouponInvalidNowApiDownForbiddenInsufficientStakedBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "message": obj.get("message"),
                "code": obj.get("code"),
                "status_code": obj.get("status_code"),
                "details": obj.get("details"),
            }
        )
        return _obj
