# coding: utf-8

"""
Payment API

API for accepting payments and storing subscriptions

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class InvoiceCreate(BaseModel):
    """
    Model for creating an invoice
    """  # noqa: E501

    product_id: StrictStr = Field(description="The ID of the product")
    coupon_id: Optional[StrictStr] = None
    provider: StrictStr = Field(description="The provider the invoice is created with")
    address: Optional[StrictStr] = None
    oob: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "product_id",
        "coupon_id",
        "provider",
        "address",
        "oob",
        "user_id",
    ]

    @field_validator("provider")
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["now", "staking", "stripe"]):
            raise ValueError("must be one of enum values ('now', 'staking', 'stripe')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if coupon_id (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_id is None and "coupon_id" in self.model_fields_set:
            _dict["coupon_id"] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict["address"] = None

        # set to None if oob (nullable) is None
        # and model_fields_set contains the field
        if self.oob is None and "oob" in self.model_fields_set:
            _dict["oob"] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict["user_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "product_id": obj.get("product_id"),
                "coupon_id": obj.get("coupon_id"),
                "provider": obj.get("provider"),
                "address": obj.get("address"),
                "oob": obj.get("oob"),
                "user_id": obj.get("user_id"),
            }
        )
        return _obj
