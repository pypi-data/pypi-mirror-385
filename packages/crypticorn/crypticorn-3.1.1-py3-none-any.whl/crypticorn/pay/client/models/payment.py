# coding: utf-8

"""
Payment API

API for accepting payments and storing subscriptions

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class Payment(BaseModel):
    """
    Combined payment model across all services
    """  # noqa: E501

    id: StrictStr = Field(description="Payment ID")
    product_id: StrictStr = Field(description="Product purchased")
    coupon_id: Optional[StrictStr] = None
    user_id: StrictStr = Field(description="User ID the payment is for")
    invoice_id: StrictStr = Field(description="Invoice ID")
    amount: Union[StrictFloat, StrictInt] = Field(description="Payment amount")
    currency: StrictStr = Field(description="Payment currency")
    status: StrictStr = Field(description="Payment status")
    provider: StrictStr = Field(description="Payment provider")
    market: StrictStr = Field(description="Payment market")
    updated_at: StrictInt = Field(description="Payment updated at timestamp in seconds")
    created_at: StrictInt = Field(description="Payment created at timestamp in seconds")
    details: Optional[Dict[str, Any]] = Field(
        default=None, description="Payment details specific to the provider"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "product_id",
        "coupon_id",
        "user_id",
        "invoice_id",
        "amount",
        "currency",
        "status",
        "provider",
        "market",
        "updated_at",
        "created_at",
        "details",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "waiting",
                "processing",
                "paid",
                "partially_paid",
                "refunded",
                "failed",
                "cancelled",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('waiting', 'processing', 'paid', 'partially_paid', 'refunded', 'failed', 'cancelled')"
            )
        return value

    @field_validator("provider")
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["now", "staking", "stripe"]):
            raise ValueError("must be one of enum values ('now', 'staking', 'stripe')")
        return value

    @field_validator("market")
    def market_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["crypto", "fiat"]):
            raise ValueError("must be one of enum values ('crypto', 'fiat')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if coupon_id (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_id is None and "coupon_id" in self.model_fields_set:
            _dict["coupon_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "product_id": obj.get("product_id"),
                "coupon_id": obj.get("coupon_id"),
                "user_id": obj.get("user_id"),
                "invoice_id": obj.get("invoice_id"),
                "amount": obj.get("amount"),
                "currency": obj.get("currency"),
                "status": obj.get("status"),
                "provider": obj.get("provider"),
                "market": obj.get("market"),
                "updated_at": obj.get("updated_at"),
                "created_at": obj.get("created_at"),
                "details": obj.get("details"),
            }
        )
        return _obj
