import amsdal_glue as glue
from _typeshed import Incomplete
from amsdal_data.connections.historical.command_builder import async_build_historical_table_name as async_build_historical_table_name, build_historical_table_name as build_historical_table_name
from amsdal_data.services.historical_table_schema import AsyncHistoricalTableSchema as AsyncHistoricalTableSchema, HistoricalTableSchema as HistoricalTableSchema

class _TableNameTransform:
    query: Incomplete
    table_schema: Incomplete
    def __init__(self, query: glue.QueryStatement | None, table_schema: HistoricalTableSchema | AsyncHistoricalTableSchema) -> None: ...
    @property
    def table_name(self) -> str: ...
    def _resolve_table_name(self, query: glue.QueryStatement) -> str: ...

class TableNameTransform(_TableNameTransform):
    def transform(self) -> glue.QueryStatement: ...
    @classmethod
    def _process_table_names(cls, query: glue.QueryStatement, table_schema: HistoricalTableSchema) -> glue.QueryStatement: ...
    @classmethod
    def process_table_name(cls, table: glue.SchemaReference | glue.SubQueryStatement, table_schema: HistoricalTableSchema) -> None: ...

class AsyncTableNameTransform(_TableNameTransform):
    async def transform(self) -> glue.QueryStatement: ...
    @classmethod
    async def _process_table_names(cls, query: glue.QueryStatement, table_schema: AsyncHistoricalTableSchema) -> glue.QueryStatement: ...
    @classmethod
    async def process_table_name(cls, table: glue.SchemaReference | glue.SubQueryStatement, table_schema: AsyncHistoricalTableSchema) -> None: ...
