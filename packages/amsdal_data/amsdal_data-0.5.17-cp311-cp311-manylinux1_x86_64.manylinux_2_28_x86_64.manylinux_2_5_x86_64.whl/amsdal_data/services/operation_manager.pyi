import amsdal_glue as glue
from _typeshed import Incomplete
from amsdal_data.transactions.manager import AmsdalAsyncTransactionManager as AmsdalAsyncTransactionManager, AmsdalTransactionManager as AmsdalTransactionManager
from amsdal_glue_core.containers import SubContainer as SubContainer
from amsdal_utils.utils.decorators import async_mode_only, sync_mode_only

class OperationManager:
    _lakehouse_container: Incomplete
    @sync_mode_only
    def __init__(self, lakehouse_container: SubContainer) -> None: ...
    def query(self, statement: glue.QueryStatement) -> glue.DataResult: ...
    def query_lakehouse(self, statement: glue.QueryStatement) -> glue.DataResult: ...
    def schema_query(self, filters: glue.Conditions) -> glue.SchemaResult: ...
    def schema_query_lakehouse(self, filters: glue.Conditions) -> glue.SchemaResult: ...
    def perform_data_command(self, command: glue.DataCommand) -> glue.DataResult: ...
    def perform_data_command_lakehouse(self, command: glue.DataCommand) -> glue.DataResult: ...
    def perform_schema_command(self, command: glue.SchemaCommand) -> glue.SchemaResult: ...
    def perform_schema_command_lakehouse(self, command: glue.SchemaCommand) -> glue.SchemaResult: ...
    def perform_transaction_command(self, command: glue.TransactionCommand) -> glue.TransactionResult: ...
    def perform_lock_command(self, command: glue.LockCommand) -> glue.LockResult: ...

class AsyncOperationManager:
    _lakehouse_container: Incomplete
    @async_mode_only
    def __init__(self, lakehouse_container: SubContainer) -> None: ...
    async def query(self, statement: glue.QueryStatement) -> glue.DataResult: ...
    async def query_lakehouse(self, statement: glue.QueryStatement) -> glue.DataResult: ...
    async def schema_query(self, filters: glue.Conditions) -> glue.SchemaResult: ...
    async def schema_query_lakehouse(self, filters: glue.Conditions) -> glue.SchemaResult: ...
    async def perform_data_command(self, command: glue.DataCommand) -> glue.DataResult: ...
    async def perform_data_command_lakehouse(self, command: glue.DataCommand) -> glue.DataResult: ...
    async def perform_schema_command(self, command: glue.SchemaCommand) -> glue.SchemaResult: ...
    async def perform_schema_command_lakehouse(self, command: glue.SchemaCommand) -> glue.SchemaResult: ...
    async def perform_transaction_command(self, command: glue.TransactionCommand) -> glue.TransactionResult: ...
    async def perform_lock_command(self, command: glue.LockCommand) -> glue.LockResult: ...
    async def perform_lock_command_lakehouse(self, command: glue.LockCommand) -> glue.LockResult: ...
