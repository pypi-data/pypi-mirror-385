import amsdal_glue as glue
from amsdal_data.connections.constants import CLASS_OBJECT as CLASS_OBJECT, METADATA_TABLE as METADATA_TABLE, OBJECT_TABLE as OBJECT_TABLE, PRIMARY_PARTITION_KEY as PRIMARY_PARTITION_KEY, REFERENCE_TABLE as REFERENCE_TABLE, SECONDARY_PARTITION_KEY as SECONDARY_PARTITION_KEY, TRANSACTION_TABLE as TRANSACTION_TABLE
from amsdal_data.connections.historical.data_query_transform import build_simple_query_statement_with_metadata as build_simple_query_statement_with_metadata
from amsdal_data.errors import QueryError as QueryError
from amsdal_utils.models.enums import ModuleType, Versions as Versions
from amsdal_utils.utils.singleton import Singleton
from typing import Any, TypeAlias

SchemaNameType: TypeAlias = str
SchemaVersionType: TypeAlias
PropertyNameType: TypeAlias = str
PropertyType: TypeAlias = Any
PROPERTIES_FIELD: str
STORAGE_METADATA_FIELD: str
PRIMARY_KEY_FIELD: str
PROPERTIES_TYPE_FIELD: str

class HistoricalSchemaVersionManager(metaclass=Singleton):
    _cache_scheme_types: dict[SchemaNameType, ModuleType]
    _cache_last_versions: dict[SchemaNameType, SchemaVersionType]
    _cache_object_classes: list[dict[SchemaNameType, Any]]
    _cache_class_properties: dict[SchemaNameType, dict[SchemaVersionType, dict[PropertyNameType, PropertyType]]]
    _get_all_schema_versions: dict[SchemaNameType, list[SchemaVersionType]]
    def __init__(self) -> None: ...
    @property
    def object_classes(self) -> list[dict[str, Any]]: ...
    @property
    def class_object_classes(self) -> list[dict[str, Any]]: ...
    def register_object_class(self, item: dict[str, Any]) -> None: ...
    def register_last_version(self, schema_name: str, schema_version: str) -> None: ...
    def get_all_schema_properties(self, schema_name: str) -> dict[SchemaVersionType, dict[PropertyNameType, PropertyType]]: ...
    def get_all_schema_versions(self, schema_name: str) -> list[str]: ...
    def get_latest_schema_version(self, schema_name: str, *, from_cache_only: bool = False) -> str | glue.Version | Versions: ...
    def find_object_class(self, schema_name: str, schema_version: str | glue.Version = ...) -> dict[str, Any] | None: ...
    def resolve_schema_type(self, schema_name: str) -> ModuleType: ...
    def clear_versions(self) -> None: ...
    def _search_classes(self, table_name: str, table_version: str | glue.Version = ..., only: list[glue.FieldReference] | None = None, where: glue.Conditions | None = None, limit: glue.LimitQuery | None = None) -> list[glue.Data] | None: ...

class AsyncHistoricalSchemaVersionManager(metaclass=Singleton):
    _cache_scheme_types: dict[SchemaNameType, ModuleType]
    _cache_last_versions: dict[SchemaNameType, SchemaVersionType]
    _cache_object_classes: list[dict[SchemaNameType, Any]]
    _cache_class_properties: dict[SchemaNameType, dict[SchemaVersionType, dict[PropertyNameType, PropertyType]]]
    _get_all_schema_versions: dict[SchemaNameType, list[SchemaVersionType]]
    def __init__(self) -> None: ...
    @property
    async def object_classes(self) -> list[dict[str, Any]]: ...
    @property
    async def class_object_classes(self) -> list[dict[str, Any]]: ...
    def register_object_class(self, item: dict[str, Any]) -> None: ...
    def register_last_version(self, schema_name: str, schema_version: str) -> None: ...
    async def get_all_schema_properties(self, schema_name: str) -> dict[SchemaVersionType, dict[PropertyNameType, PropertyType]]: ...
    async def get_all_schema_versions(self, schema_name: str) -> list[str]: ...
    async def get_latest_schema_version(self, schema_name: str, *, from_cache_only: bool = False) -> str | glue.Version | Versions: ...
    async def find_object_class(self, schema_name: str, schema_version: str | glue.Version = ...) -> dict[str, Any] | None: ...
    async def resolve_schema_type(self, schema_name: str) -> ModuleType: ...
    def clear_versions(self) -> None: ...
    async def _search_classes(self, table_name: str, table_version: str | glue.Version = ..., only: list[glue.FieldReference] | None = None, where: glue.Conditions | None = None, limit: glue.LimitQuery | None = None) -> list[glue.Data] | None: ...
