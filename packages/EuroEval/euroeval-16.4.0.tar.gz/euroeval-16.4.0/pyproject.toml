[project]
name = "EuroEval"
version = "16.4.0"
description = "The robust European language model benchmark."
readme = "README.md"
authors = [
    {name = "Dan Saattrup Smart", email = "dan.smart@alexandra.dk"},
]
maintainers = [
    {name = "Dan Saattrup Smart", email = "dan.smart@alexandra.dk"},
]
requires-python = ">=3.11,<4.0"
dependencies = [
    "torch>=2.6.0",
    "pandas>=2.2.0",
    "numpy>=2.0.0",
    "transformers[mistral-common]>=4.56.0",
    "accelerate>=1.9.0",
    "evaluate>=0.4.1",
    "datasets>=3.5.0",
    "click>=8.1.3",
    "pydantic>=2.6.0",
    "termcolor>=2.0.0",
    "seqeval>=1.2.2",
    "python-dotenv>=1.0.1",
    "huggingface-hub>=0.30.1",
    "pyinfer>=0.0.3",
    "sentencepiece>=0.1.96",
    "sacremoses>=0.1.1",
    "more-itertools>=10.5.0",
    "tenacity>=9.0.0",
    "litellm>=1.75.6",
    "rouge-score>=0.1.2",
    "bert-score>=0.3.13",
    "levenshtein>=0.24.0",
    "scikit-learn==1.6.1", # Required for loading European values pipeline
    "setuptools>=75.8.2",
    "demjson3>=3.0.6",
    "ollama>=0.5.1",
    "peft>=0.15.0",
    "protobuf>=2.0.0",
    "cloudpickle>=3.1.1",
]

[project.optional-dependencies]
generative = [
    "bitsandbytes>=0.43.1; platform_system == 'Linux'",
    "vllm[flashinfer]>=0.11.0; platform_system == 'Linux'",
    "fbgemm-gpu>=1.0.0; platform_system == 'Linux'",
    "timm>=1.0.19",
]
all = [
    "bitsandbytes>=0.43.1; platform_system == 'Linux'",
    "vllm[flashinfer]>=0.11.0; platform_system == 'Linux'",
    "fbgemm-gpu>=1.0.0; platform_system == 'Linux'",
    "timm>=1.0.19",
]

[project.urls]
Repository = "https://github.com/EuroEval/EuroEval"
Issues = "https://github.com/EuroEval/EuroEval/issues"

[project.license]
file = "LICENSE"

[project.scripts]
euroeval = "euroeval.cli:benchmark"
scandeval = "euroeval.cli:benchmark"

[dependency-groups]
dev = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pre-commit>=3.8.0",
    "readme-coverage-badger>=0.1.2",
    "click>=8.1.7",
    "ruff>=0.7.1",
    "mypy>=1.15.0",
    "nbstripout>=0.7.1",
    "coverage>=5.5",
    "lxml>=5.1.0",
    "mkdocs-material>=9.5.45",
    "mkdocs-include-markdown-plugin>=7.0.1",
    "mkdocs-include-dir-to-nav>=1.2.0",
    "mkapi>=3.0.22",
    "pip>=24.3.1",
    "setuptools>=75.6.0",
    "cffi>=1.17.1",
    "cryptography>=44.0.0",
    "pycparser>=2.22",
    "types-aiofiles>=24.1.0.20241221",
    "types-cffi>=1.16.0.20241221",
    "types-pyopenssl>=24.1.0.20240722",
    "types-pytz>=2024.2.0.20241221",
    "types-pyyaml>=6.0.12.20241230",
    "types-redis>=4.6.0.20241004",
    "types-requests>=2.32.0.20241016",
    "types-tabulate>=0.9.0.20241207",
    "types-setuptools>=75.8.0.20250110",
    "types-ujson>=5.10.0.20240515",
    "types-simplejson>=3.2.0.2025032",
    "debugpy>=1.8.13",
    "pytest-socket>=0.7.0",
    "pytest-dependency>=0.6.0",
    "pytest-rerunfailures>=16.1",
]

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".euroeval_cache",
    ".venv",
]
extend-include = [
    "*.ipynb",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
    # isort (imports)
    "I",
    # pydocstyle (docstrings)
    "D",
    #Â pycodestyle errors and warnings (PEP8)
    "E",
    "W",
    # flake-annotations (type hints)
    "ANN",
    # Pyflakes
    "F",
]
ignore = [
    # Type annotations for "self" arguments
    "ANN101",
    # Type annotations for "cls" arguments
    "ANN102",
    # Type annotations for *args
    "ANN002",
    # Type annotations for **kwargs
    "ANN003",
    # Docstrings for **kwargs
    "D417",
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    "F401",
]
"src/scripts/main.py" = [
    "I",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=src/euroeval",
    "--color=yes",
    "-vvv",
    "--allow-unix-socket"
]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::ResourceWarning",
    "ignore::FutureWarning",
]
log_cli_level = "INFO"
testpaths = [
    "tests",
    "src/euroeval",
]
pythonpath = [
    "src",
    "src/scripts",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
