# Example HTTP Transport Configuration for Simply-MCP
# This file demonstrates all available configuration options for production deployments
# Copy this file to config.yaml and adjust settings for your environment

# Deployment environment (development, staging, production)
environment: development

# Server configuration
server:
  # Host to bind to (0.0.0.0 for all interfaces)
  host: "0.0.0.0"

  # Port to bind to
  port: 8000

  # Number of worker processes (0 = auto-detect based on CPU cores)
  workers: 0

  # Maximum concurrent connections per worker
  worker_connections: 1000

  # Socket backlog size
  backlog: 2048

  # Connection keepalive timeout in seconds
  keepalive: 5

  # Graceful shutdown timeout in seconds
  graceful_timeout: 30

# TLS/HTTPS configuration
tls:
  # Enable HTTPS/TLS
  enabled: false

  # Path to SSL certificate file
  cert_file: null  # "/path/to/cert.pem"

  # Path to SSL private key file
  key_file: null  # "/path/to/key.pem"

  # Optional path to CA certificate file
  ca_file: null  # "/path/to/ca.pem"

  # Require client certificate verification
  verify_client: false

# Authentication configuration
auth:
  # Enable authentication
  enabled: false

  # Path to API keys file (JSON/YAML)
  keys_file: null  # "api_keys.yaml"

  # Environment variable name for single API key
  key_env_var: "MCP_API_KEY"

  # Require authentication on all endpoints (except health/metrics)
  require_auth: true

# Rate limiting configuration
rate_limit:
  # Enable rate limiting
  enabled: false

  # Default requests per window (if not specified per key)
  default_limit: 100

  # Time window in seconds
  window_seconds: 60

  # Rate limit strategy (token_bucket, sliding_window)
  strategy: "token_bucket"

# Monitoring and observability configuration
monitoring:
  # Enable Prometheus metrics
  prometheus_enabled: true

  # Metrics endpoint path
  prometheus_path: "/metrics"

  # Health check endpoint path
  health_path: "/health"

  # Enable distributed tracing (requires additional setup)
  tracing_enabled: false

  # Log all HTTP requests
  log_requests: true

  # Log all HTTP responses (can be verbose)
  log_responses: false

# CORS configuration
cors:
  # Enable CORS
  enabled: true

  # Allowed origins (* for all, or list of specific origins)
  allow_origins:
    - "*"

  # Allowed HTTP methods
  allow_methods:
    - "GET"
    - "POST"
    - "PUT"
    - "DELETE"
    - "OPTIONS"

  # Allowed headers (* for all, or list of specific headers)
  allow_headers:
    - "*"

  # Allow credentials (cookies, auth headers)
  allow_credentials: false

  # Preflight cache duration in seconds
  max_age: 3600

# Security configuration
security:
  # Enable security headers
  security_headers: true

  # Enable HSTS header
  hsts_enabled: true

  # HSTS max age in seconds (1 year)
  hsts_max_age: 31536000

  # Enable X-Content-Type-Options: nosniff
  content_type_nosniff: true

  # Enable X-XSS-Protection
  xss_protection: true

  # X-Frame-Options value (DENY, SAMEORIGIN)
  frame_options: "DENY"

  # Maximum request body size in bytes (10MB)
  max_request_size: 10485760

  # Request timeout in seconds
  request_timeout: 30

# Logging configuration
logging:
  # Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
  level: "INFO"

  # Log format (json, text)
  format: "json"

  # Enable console logging
  enable_console: true

  # Optional log file path
  file: null  # "logs/http-transport.log"

  # Use structured JSON logging
  structured: true

---
# Example configuration for PRODUCTION environment
# Save as config.prod.yaml

environment: production

server:
  host: "0.0.0.0"
  port: 443  # HTTPS default port
  workers: 4
  graceful_timeout: 60

tls:
  enabled: true
  cert_file: "/etc/ssl/certs/server.crt"
  key_file: "/etc/ssl/private/server.key"
  ca_file: "/etc/ssl/certs/ca.crt"

auth:
  enabled: true
  keys_file: "/etc/mcp/api_keys.yaml"

rate_limit:
  enabled: true
  default_limit: 1000
  window_seconds: 60

monitoring:
  prometheus_enabled: true
  log_requests: true
  log_responses: false

cors:
  enabled: true
  allow_origins:
    - "https://app.example.com"
    - "https://admin.example.com"
  allow_credentials: true

security:
  security_headers: true
  hsts_enabled: true
  content_type_nosniff: true
  xss_protection: true
  frame_options: "DENY"
  max_request_size: 5242880  # 5MB
  request_timeout: 60

logging:
  level: "INFO"
  format: "json"
  file: "/var/log/mcp/http-transport.log"
  structured: true

---
# Example configuration for DEVELOPMENT environment
# Save as config.dev.yaml

environment: development

server:
  host: "127.0.0.1"
  port: 8000

tls:
  enabled: false

auth:
  enabled: false

rate_limit:
  enabled: false

monitoring:
  prometheus_enabled: true
  log_requests: true
  log_responses: true

cors:
  enabled: true
  allow_origins: ["*"]

security:
  security_headers: false
  hsts_enabled: false
  request_timeout: 300  # Long timeout for debugging

logging:
  level: "DEBUG"
  format: "text"
  enable_console: true
  structured: false

---
# Environment Variable Override Examples
# You can override any config value using environment variables
# Format: MCP_HTTP_<SECTION>__<KEY>=<VALUE>

# Examples:
# export MCP_HTTP_SERVER__PORT=9000
# export MCP_HTTP_AUTH__ENABLED=true
# export MCP_HTTP_LOGGING__LEVEL=DEBUG
# export MCP_HTTP_TLS__ENABLED=true
# export MCP_HTTP_TLS__CERT_FILE=/path/to/cert.pem

# Environment variables take precedence over config file values
