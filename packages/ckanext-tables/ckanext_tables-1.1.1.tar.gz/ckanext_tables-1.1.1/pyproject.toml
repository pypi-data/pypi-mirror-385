[project]
name = "ckanext-tables"
version = "1.1.1"
description = "An extension to render dynamic tables"
readme = "README.md"
authors = [
    {name = "Oleksandr Cherniavskiy", email = "mutantsan@gmail.com"}
]
license = {text = "AGPL"}
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

keywords = [ "CKAN", ]
dependencies = []

[project.optional-dependencies]
test = ["pytest-ckan"]
docs = ["mkdocs", "mkdocs-material", "mkdocstrings", "mkdocstrings-python"]

[project.urls]
Homepage = "https://github.com/DataShades/ckanext-tables"

[project.entry-points."ckan.plugins"]
tables = "ckanext.tables.plugin:TablesPlugin"


[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
filterwarnings = [
        "ignore::sqlalchemy.exc.SADeprecationWarning",
        "ignore::sqlalchemy.exc.SAWarning",
        "ignore::DeprecationWarning",
]
addopts = "--ckan-ini test.ini"

[tool.ruff]
target-version = "py310"
line-length = 120
lint.select = [
    "ANN0", # type annotations for function arguments
    "B",    # likely bugs and design problems
    "BLE",  # do not catch blind exception
    "C4",   # better list/set/dict comprehensions
    "C90",  # check McCabe complexity
    "DTZ",  # enforce timezone in date objects
    "E",    # pycodestyle error
    "W",    # pycodestyle warning
    "F",    # pyflakes
    "FA",   # verify annotations from future
    "G",    # format strings for logging statements
    "N",    # naming conventions
    "I",    # isort
    "ICN",  # import conventions
    "D2",   # doc formatting
    "D4",   # doc convention
    "PL",   # pylint
    "PERF", # performance anti-patterns
    "PT",   # pytest style
    "PIE",  # misc lints
    "RET",  # improvements for return statements
    "RSE",  # improvements for rise statements
    "S",    # security testing
    "SIM",  # simplify code
    "T10",  # debugging statements
    "T20",  # print statements
    "TID",  # tidier imports
    "TRY",  # better exceptions
    "UP",   # upgrade syntax for newer versions of the language
]
lint.ignore = [
    "D100",   # do not require docstring for public modules\
    "D103",   # do not require docstring for public functions
    "D104",   # do not require docstring for public packages
    "RET503", # don't enforce return-None
    "E712",   # comparison to bool: violated by SQLAlchemy filters
    # "PT004", # fixture does not return anything, add leading underscore: violated by clean_db
    "PLC1901", # simplify comparison to empty string: violated by SQLAlchemy filters
]
exclude = ["**/cookiecutter/**", "**/{cookiecutter.*}/**"]

[tool.ruff.lint.per-file-ignores]
"**/tests*" = ["S", "PL", "ANN", "D102"]

[tool.ruff.lint.flake8-import-conventions]
aliases = { "ckan.plugins" = "p", "ckan.plugins.toolkit" = "tk", "sqlalchemy" = "sa" }

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
section-order = [
    "future",
    "standard-library",
    "first-party",
    "third-party",
    "ckan",
    "ckanext",
    "self",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
ckan = ["ckan"]
ckanext = ["ckanext"]
self = ["ckanext.tables"]

[tool.pyright]
pythonVersion = "3.10"
include = ["ckanext"]
exclude = ["**/test*", "**/migration", "**/ckan/tests"]
strict = []
strictParameterNoneValue = true

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true          # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false   # Context won't work with this rule
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false             # allow function calls for side-effect only
useLibraryCodeForTypes = false
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
