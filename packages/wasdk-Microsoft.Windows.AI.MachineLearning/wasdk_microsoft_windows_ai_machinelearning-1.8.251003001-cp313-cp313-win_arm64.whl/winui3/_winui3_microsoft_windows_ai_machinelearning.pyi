# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel as windows_applicationmodel
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winui3.microsoft.windows.ai.machinelearning import ExecutionProviderCertification, ExecutionProviderReadyResultState, ExecutionProviderReadyState

Self = typing.TypeVar('Self')

@typing.final
class ExecutionProvider(winrt.system.Object):
    # Windows.Foundation.IAsyncOperationWithProgress`2<Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult,System.Double> Microsoft.Windows.AI.MachineLearning.ExecutionProvider::EnsureReadyAsync()
    def ensure_ready_async(self) -> windows_foundation.IAsyncOperationWithProgress[ExecutionProviderReadyResult, winrt.system.Double]: ...
    # System.Boolean Microsoft.Windows.AI.MachineLearning.ExecutionProvider::TryRegister()
    def try_register(self) -> bool: ...
    # Microsoft.Windows.AI.MachineLearning.ExecutionProviderCertification Microsoft.Windows.AI.MachineLearning.ExecutionProvider::get_Certification()
    @_property
    def certification(self) -> ExecutionProviderCertification: ...
    # System.String Microsoft.Windows.AI.MachineLearning.ExecutionProvider::get_LibraryPath()
    @_property
    def library_path(self) -> str: ...
    # System.String Microsoft.Windows.AI.MachineLearning.ExecutionProvider::get_Name()
    @_property
    def name(self) -> str: ...
    # Windows.ApplicationModel.PackageId Microsoft.Windows.AI.MachineLearning.ExecutionProvider::get_PackageId()
    @_property
    def package_id(self) -> windows_applicationmodel.PackageId: ...
    # Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyState Microsoft.Windows.AI.MachineLearning.ExecutionProvider::get_ReadyState()
    @_property
    def ready_state(self) -> ExecutionProviderReadyState: ...

@typing.final
class ExecutionProviderCatalog_Static(winrt._winrt.IInspectable_Static):
    # Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog::GetDefault()
    def get_default(cls) -> ExecutionProviderCatalog: ...

@typing.final
class ExecutionProviderCatalog(winrt.system.Object, metaclass=ExecutionProviderCatalog_Static):
    # Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Foundation.Collections.IVector`1<Microsoft.Windows.AI.MachineLearning.ExecutionProvider>,System.Double> Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog::EnsureAndRegisterCertifiedAsync()
    def ensure_and_register_certified_async(self) -> windows_foundation.IAsyncOperationWithProgress[typing.MutableSequence[ExecutionProvider], winrt.system.Double]: ...
    # Microsoft.Windows.AI.MachineLearning.ExecutionProvider[] Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog::FindAllProviders()
    def find_all_providers(self) -> winrt.system.Array[ExecutionProvider]: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Foundation.Collections.IVector`1<Microsoft.Windows.AI.MachineLearning.ExecutionProvider>,System.Double> Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog::RegisterCertifiedAsync()
    def register_certified_async(self) -> windows_foundation.IAsyncOperationWithProgress[typing.MutableSequence[ExecutionProvider], winrt.system.Double]: ...

@typing.final
class ExecutionProviderReadyResult(winrt.system.Object):
    # System.String Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult::get_DiagnosticText()
    @_property
    def diagnostic_text(self) -> str: ...
    # Windows.Foundation.HResult Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult::get_ExtendedError()
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...
    # Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResultState Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult::get_Status()
    @_property
    def status(self) -> ExecutionProviderReadyResultState: ...

