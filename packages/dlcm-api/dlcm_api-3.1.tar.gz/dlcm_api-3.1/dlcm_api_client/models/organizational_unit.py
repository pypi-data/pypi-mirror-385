# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dlcm_api_client.models.change_info import ChangeInfo
from dlcm_api_client.models.license import License
from dlcm_api_client.models.link import Link
from dlcm_api_client.models.organizational_unit_logo import OrganizationalUnitLogo
from dlcm_api_client.models.preservation_policy import PreservationPolicy
from dlcm_api_client.models.submission_policy import SubmissionPolicy
from typing import Optional, Set
from typing_extensions import Self

class OrganizationalUnit(BaseModel):
    """
    An organizational unit is a logical entity that represents a research project or laboratory or any other organizational group of researchers. A preservation space is associated to it.
    """ # noqa: E501
    creation: Optional[ChangeInfo] = None
    last_update: Optional[ChangeInfo] = Field(default=None, alias="lastUpdate")
    res_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The identifier of the resource. The default format is a Universally Unique IDentifier (UUID).", alias="resId")
    closing_date: Optional[date] = Field(default=None, description="The closing date of the organizational unit.", alias="closingDate")
    default_license: Optional[License] = Field(default=None, alias="defaultLicense")
    default_preservation_policy: Optional[PreservationPolicy] = Field(default=None, alias="defaultPreservationPolicy")
    default_submission_policy: Optional[SubmissionPolicy] = Field(default=None, alias="defaultSubmissionPolicy")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The description of the organizational unit.")
    institutions: Optional[List[Institution]] = None
    is_empty: Optional[StrictBool] = Field(default=None, description="If the organizational unit contains any data (deposits, sip, aip).", alias="isEmpty")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="The keywords associated with this organizational unit, they are used as default for deposits created within this organizational unit.")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2147483647)]] = Field(default=None, description="The name of the organizational unit.")
    opening_date: Optional[date] = Field(default=None, description="The opening date of the organizational unit.", alias="openingDate")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the organizational unit.")
    logo: Optional[OrganizationalUnitLogo] = None
    open: Optional[StrictBool] = Field(default=None, description="If the organizational unit is currently open.")
    links: Optional[Dict[str, Link]] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["creation", "lastUpdate", "resId", "closingDate", "defaultLicense", "defaultPreservationPolicy", "defaultSubmissionPolicy", "description", "institutions", "isEmpty", "keywords", "name", "openingDate", "url", "logo", "open", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationalUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creation
        if self.creation:
            _dict['creation'] = self.creation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_update
        if self.last_update:
            _dict['lastUpdate'] = self.last_update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_license
        if self.default_license:
            _dict['defaultLicense'] = self.default_license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_preservation_policy
        if self.default_preservation_policy:
            _dict['defaultPreservationPolicy'] = self.default_preservation_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_submission_policy
        if self.default_submission_policy:
            _dict['defaultSubmissionPolicy'] = self.default_submission_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in institutions (list)
        _items = []
        if self.institutions:
            for _item_institutions in self.institutions:
                if _item_institutions:
                    _items.append(_item_institutions.to_dict())
            _dict['institutions'] = _items
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationalUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation": ChangeInfo.from_dict(obj["creation"]) if obj.get("creation") is not None else None,
            "lastUpdate": ChangeInfo.from_dict(obj["lastUpdate"]) if obj.get("lastUpdate") is not None else None,
            "resId": obj.get("resId"),
            "closingDate": obj.get("closingDate"),
            "defaultLicense": License.from_dict(obj["defaultLicense"]) if obj.get("defaultLicense") is not None else None,
            "defaultPreservationPolicy": PreservationPolicy.from_dict(obj["defaultPreservationPolicy"]) if obj.get("defaultPreservationPolicy") is not None else None,
            "defaultSubmissionPolicy": SubmissionPolicy.from_dict(obj["defaultSubmissionPolicy"]) if obj.get("defaultSubmissionPolicy") is not None else None,
            "description": obj.get("description"),
            "institutions": [Institution.from_dict(_item) for _item in obj["institutions"]] if obj.get("institutions") is not None else None,
            "isEmpty": obj.get("isEmpty"),
            "keywords": obj.get("keywords"),
            "name": obj.get("name"),
            "openingDate": obj.get("openingDate"),
            "url": obj.get("url"),
            "logo": OrganizationalUnitLogo.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "open": obj.get("open"),
            "_links": dict(
                (_k, Link.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj

from dlcm_api_client.models.institution import Institution
# TODO: Rewrite to not use raise_errors
OrganizationalUnit.model_rebuild(raise_errors=False)

