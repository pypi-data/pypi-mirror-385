# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dlcm_api_client.models.change_info import ChangeInfo
from dlcm_api_client.models.link import Link
from dlcm_api_client.models.order_subset_item import OrderSubsetItem
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Orders allow to prepare archive download (DIP) from the archives (AIP).
    """ # noqa: E501
    creation: Optional[ChangeInfo] = None
    last_update: Optional[ChangeInfo] = Field(default=None, alias="lastUpdate")
    res_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The identifier of the resource. The default format is a Universally Unique IDentifier (UUID).", alias="resId")
    public_order: Optional[StrictBool] = Field(default=None, description="If the order is public, false otherwise.", alias="publicOrder")
    subset_items: Optional[List[OrderSubsetItem]] = Field(default=None, alias="subsetItems")
    metadata_version: Optional[StrictStr] = Field(default=None, description="DLCM metadata are based on METS container, DataCite as descriptive metadata and PREMIS as administrative metadata. Metadata version: - 1.0 = DataCite 4.0 + PREMIS 3.0 + DLCM Info 1.0 - 1.1 = DataCite 4.0 + PREMIS 3.0 + DLCM Info 1.0 - 2.0 = DataCite 4.3 + PREMIS 3.0 + DLCM Info 2.0 + Data File Categories - 2.1 = DataCite 4.3 + PREMIS 3.0 + DLCM Info 2.1 + Dataset Thumbnail support - 3.0 = DataCite 4.4 + PREMIS 3.0 + DLCM Info 2.1 - 3.1 = DataCite 4.4 + PREMIS 3.0 + DLCM Info 2.2 + Archive Thumbnail & DUA & README support - 4.0 = Datacite 4.5 + PREMIS 3.0 + DLCM Info 3.0 + Update of Archive Thumbnail & DUA & README - 5.0 = Datacite 4.6 + PREMIS 3.0 + DLCM Info 3.0 + Modern ARK ", alias="metadataVersion")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="The name of the order query.")
    query: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=5099)]] = Field(default=None, description="The query of the order query.")
    query_type: Optional[StrictStr] = Field(default=None, description="The type of the order query.", alias="queryType")
    status: Optional[StrictStr] = Field(default=None, description="The status of the order query.")
    status_message: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The message related to the status of the order query.", alias="statusMessage")
    dissemination_policy_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2147483647)]] = Field(default=None, description="The dissemination policy identifier linked to the order.", alias="disseminationPolicyId")
    organizational_unit_dissemination_policy_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2147483647)]] = Field(default=None, description="The dissemination policy identifier linked to the orgunit.", alias="organizationalUnitDisseminationPolicyId")
    subitems_checksum: Optional[StrictStr] = Field(default=None, description="The checksum of the order subitems list.", alias="subitemsChecksum")
    order_status: Optional[StrictStr] = Field(default=None, alias="orderStatus")
    error_status: Optional[StrictStr] = Field(default=None, alias="errorStatus")
    dip_number: Optional[StrictInt] = Field(default=None, description="The DIP number of the order query.", alias="dipNumber")
    aip_number: Optional[StrictInt] = Field(default=None, description="The AIP number of the order query.", alias="aipNumber")
    links: Optional[Dict[str, Link]] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["creation", "lastUpdate", "resId", "publicOrder", "subsetItems", "metadataVersion", "name", "query", "queryType", "status", "statusMessage", "disseminationPolicyId", "organizationalUnitDisseminationPolicyId", "subitemsChecksum", "orderStatus", "errorStatus", "dipNumber", "aipNumber", "_links"]

    @field_validator('metadata_version')
    def metadata_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1.0', '1.1', '2.0', '2.1', '3.0', '3.1', '4.0', '5.0']):
            raise ValueError("must be one of enum values ('1.0', '1.1', '2.0', '2.1', '3.0', '3.1', '4.0', '5.0')")
        return value

    @field_validator('query_type')
    def query_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADVANCED', 'DIRECT', 'SIMPLE']):
            raise ValueError("must be one of enum values ('ADVANCED', 'DIRECT', 'SIMPLE')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOWNLOADING', 'IN_DISSEMINATION_PREPARATION', 'IN_ERROR', 'IN_PREPARATION', 'IN_PROGRESS', 'READY', 'SUBMITTED']):
            raise ValueError("must be one of enum values ('DOWNLOADING', 'IN_DISSEMINATION_PREPARATION', 'IN_ERROR', 'IN_PREPARATION', 'IN_PROGRESS', 'READY', 'SUBMITTED')")
        return value

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DOWNLOADING', 'IN_DISSEMINATION_PREPARATION', 'IN_ERROR', 'IN_PREPARATION', 'IN_PROGRESS', 'READY', 'SUBMITTED']):
            raise ValueError("must be one of enum values ('DOWNLOADING', 'IN_DISSEMINATION_PREPARATION', 'IN_ERROR', 'IN_PREPARATION', 'IN_PROGRESS', 'READY', 'SUBMITTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creation
        if self.creation:
            _dict['creation'] = self.creation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_update
        if self.last_update:
            _dict['lastUpdate'] = self.last_update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subset_items (list)
        _items = []
        if self.subset_items:
            for _item_subset_items in self.subset_items:
                if _item_subset_items:
                    _items.append(_item_subset_items.to_dict())
            _dict['subsetItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation": ChangeInfo.from_dict(obj["creation"]) if obj.get("creation") is not None else None,
            "lastUpdate": ChangeInfo.from_dict(obj["lastUpdate"]) if obj.get("lastUpdate") is not None else None,
            "resId": obj.get("resId"),
            "publicOrder": obj.get("publicOrder"),
            "subsetItems": [OrderSubsetItem.from_dict(_item) for _item in obj["subsetItems"]] if obj.get("subsetItems") is not None else None,
            "metadataVersion": obj.get("metadataVersion"),
            "name": obj.get("name"),
            "query": obj.get("query"),
            "queryType": obj.get("queryType"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "disseminationPolicyId": obj.get("disseminationPolicyId"),
            "organizationalUnitDisseminationPolicyId": obj.get("organizationalUnitDisseminationPolicyId"),
            "subitemsChecksum": obj.get("subitemsChecksum"),
            "orderStatus": obj.get("orderStatus"),
            "errorStatus": obj.get("errorStatus"),
            "dipNumber": obj.get("dipNumber"),
            "aipNumber": obj.get("aipNumber"),
            "_links": dict(
                (_k, Link.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj


