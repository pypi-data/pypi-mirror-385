# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dlcm_api_client.models.change_info import ChangeInfo
from dlcm_api_client.models.link import Link
from dlcm_api_client.models.notification_type import NotificationType
from dlcm_api_client.models.organizational_unit import OrganizationalUnit
from dlcm_api_client.models.person import Person
from dlcm_api_client.models.signed_dua_file import SignedDuaFile
from dlcm_api_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Notification(BaseModel):
    """
    Notifications can be sent to organizational units managers in order to request access to closed archive, or to ask for membership.
    """ # noqa: E501
    creation: Optional[ChangeInfo] = None
    last_update: Optional[ChangeInfo] = Field(default=None, alias="lastUpdate")
    res_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The identifier of the resource. The default format is a Universally Unique IDentifier (UUID).", alias="resId")
    signed_dua_file: Optional[SignedDuaFile] = Field(default=None, alias="signedDuaFile")
    recipient: Optional[Person] = None
    emitter: Optional[User] = None
    message: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=4096)]] = Field(default=None, description="The message sent by the notification.")
    response_message: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=4096)]] = Field(default=None, description="Any message sent in response to the notification.", alias="responseMessage")
    notification_status: Optional[StrictStr] = Field(default=None, description="The status of the notification.", alias="notificationStatus")
    notification_mark: Optional[StrictStr] = Field(default=None, description="The mark (read/unread) of the notification.", alias="notificationMark")
    notification_type: Optional[NotificationType] = Field(default=None, alias="notificationType")
    notified_org_unit: Optional[OrganizationalUnit] = Field(default=None, alias="notifiedOrgUnit")
    object_id: Optional[StrictStr] = Field(default=None, description="The target object identifer of the notification.", alias="objectId")
    status_message: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The message related to the status of the notification.", alias="statusMessage")
    sent_time: Optional[datetime] = Field(default=None, description="The date and the time when the notification was sent.", alias="sentTime")
    links: Optional[Dict[str, Link]] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["creation", "lastUpdate", "resId", "signedDuaFile", "recipient", "emitter", "message", "responseMessage", "notificationStatus", "notificationMark", "notificationType", "notifiedOrgUnit", "objectId", "statusMessage", "sentTime", "_links"]

    @field_validator('notification_status')
    def notification_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPROVED', 'PENDING', 'REFUSED', 'NON_APPLICABLE']):
            raise ValueError("must be one of enum values ('APPROVED', 'PENDING', 'REFUSED', 'NON_APPLICABLE')")
        return value

    @field_validator('notification_mark')
    def notification_mark_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['READ', 'UNREAD']):
            raise ValueError("must be one of enum values ('READ', 'UNREAD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creation
        if self.creation:
            _dict['creation'] = self.creation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_update
        if self.last_update:
            _dict['lastUpdate'] = self.last_update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signed_dua_file
        if self.signed_dua_file:
            _dict['signedDuaFile'] = self.signed_dua_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of emitter
        if self.emitter:
            _dict['emitter'] = self.emitter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_type
        if self.notification_type:
            _dict['notificationType'] = self.notification_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notified_org_unit
        if self.notified_org_unit:
            _dict['notifiedOrgUnit'] = self.notified_org_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation": ChangeInfo.from_dict(obj["creation"]) if obj.get("creation") is not None else None,
            "lastUpdate": ChangeInfo.from_dict(obj["lastUpdate"]) if obj.get("lastUpdate") is not None else None,
            "resId": obj.get("resId"),
            "signedDuaFile": SignedDuaFile.from_dict(obj["signedDuaFile"]) if obj.get("signedDuaFile") is not None else None,
            "recipient": Person.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "emitter": User.from_dict(obj["emitter"]) if obj.get("emitter") is not None else None,
            "message": obj.get("message"),
            "responseMessage": obj.get("responseMessage"),
            "notificationStatus": obj.get("notificationStatus"),
            "notificationMark": obj.get("notificationMark"),
            "notificationType": NotificationType.from_dict(obj["notificationType"]) if obj.get("notificationType") is not None else None,
            "notifiedOrgUnit": OrganizationalUnit.from_dict(obj["notifiedOrgUnit"]) if obj.get("notifiedOrgUnit") is not None else None,
            "objectId": obj.get("objectId"),
            "statusMessage": obj.get("statusMessage"),
            "sentTime": obj.get("sentTime"),
            "_links": dict(
                (_k, Link.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj


