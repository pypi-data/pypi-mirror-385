# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dlcm_api_client.models.change_info import ChangeInfo
from dlcm_api_client.models.link import Link
from dlcm_api_client.models.organizational_unit import OrganizationalUnit
from dlcm_api_client.models.representation_info import RepresentationInfo
from dlcm_api_client.models.submission_policy import SubmissionPolicy
from typing import Optional, Set
from typing_extensions import Self

class SubmissionInfoPackage(BaseModel):
    """
    Submission Information Package (SIP)
    """ # noqa: E501
    creation: Optional[ChangeInfo] = None
    last_update: Optional[ChangeInfo] = Field(default=None, alias="lastUpdate")
    res_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The identifier of the resource. The default format is a Universally Unique IDentifier (UUID).", alias="resId")
    disposition_approval: Optional[StrictBool] = Field(default=None, description="If the approval step the AIP disposal is mandatory.", alias="dispositionApproval")
    retention: Optional[StrictInt] = Field(default=None, description="The retention duration in days of the AIP: O means forever.")
    main_storage: Optional[StrictInt] = Field(default=None, description="The main storage indice in configuration if the SIP. O means default storage (first one).", alias="mainStorage")
    aip_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The generated AIP identifier of the SIP.", alias="aipId")
    deposit_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The source deposit identifier of the SIP.", alias="depositId")
    info: Optional[RepresentationInfo] = None
    organizational_unit: Optional[OrganizationalUnit] = Field(default=None, alias="organizationalUnit")
    submission_policy: Optional[SubmissionPolicy] = Field(default=None, alias="submissionPolicy")
    submission_policy_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The submission policy identifier of the SIP.", alias="submissionPolicyId")
    publication_date: Optional[date] = Field(default=None, description="The publication date of the deposit.", alias="publicationDate")
    organizational_unit_id: Optional[StrictStr] = Field(default=None, description="The organizational unit identifier of the SIP.", alias="organizationalUnitId")
    ready: Optional[StrictBool] = Field(default=None, description="If SIP package is ready.")
    data_file_number: Optional[StrictInt] = Field(default=None, description="The number of SIP data files.", alias="dataFileNumber")
    collection_size: Optional[StrictInt] = Field(default=None, description="The number of AIPs in collection AIP.", alias="collectionSize")
    package_status: Optional[StrictStr] = Field(default=None, description="OAIS Package Status: - CHECKED => Checked package during archiving process - CHECKING => A package verification is in progress during checking process - CHECK_PENDING => A package verification is pending during checking process - CLEANED => Cleaned package during cleaning process for SIP only - CLEANING => A package clean is in progress during cleaning process for SIP only - COMPLIANCE_LEVEL_UPDATE_PENDING => A package compliance update is pending - COMPLIANCE_LEVEL_UPDATED => The compliance levels of the package have been updated - COMPLETED => Completed package - DISPOSABLE => The Package is candidate for disposal process for AIP only - DISPOSAL_APPROVED_BY_ORGUNIT => Disposal org. unit approval done during disposal process for AIP only - DISPOSAL_APPROVED => Disposal approval done during disposal process for AIP only - DISPOSED => Disposed package for AIP only - DOWNLOADING => A package download is in progress - EDITING_METADATA => A package metadata edition is in progress - FIXING => A package correction is in progress - FIXITY_ERROR => Error when checking checksums - FIX_PENDING => A package correction is pending - INDEXING => A package indexing is in progress - IN_ERROR => Package in error during archiving process - IN_PREPARATION => Package in preparation during archiving process - IN_PROGRESS => A package archiving process is in progress - METADATA_EDITION_PENDING => A metadata edition is pending - METADATA_UPGRADE_PENDING => A metadata version upgrade is pending - PACKAGE_REPLICATION_PENDING => A package replication is pending - PRESERVATION_ERROR => Package in error during checking process - READY => Package Ready - REINDEXING => A package re-indexing is in progress - RELOADED => Reloaded package from storage location - REPLICATING_PACKAGE => A package replication is in progress - REPLICATING_TOMBSTONE => A tombstone package replication is in progress - RESUBMITTING => A package re-submission is in progress - STORED => Package stored on storage location - TOMBSTONE_REPLICATION_PENDING => A tombstone replication is pending - UPDATING_COMPLIANCE_LEVEL => A package compliance update is in progress - UPDATING_RETENTION => A package retention update is in progress during disposal process - UPGRADING_METADATA => A metadata version upgrade is in progress ", alias="packageStatus")
    smart_retention: Optional[StrictStr] = Field(default=None, description="The retention duration in human-readable format of the package.", alias="smartRetention")
    links: Optional[Dict[str, Link]] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["creation", "lastUpdate", "resId", "dispositionApproval", "retention", "mainStorage", "aipId", "depositId", "info", "organizationalUnit", "submissionPolicy", "submissionPolicyId", "publicationDate", "organizationalUnitId", "ready", "dataFileNumber", "collectionSize", "packageStatus", "smartRetention", "_links"]

    @field_validator('package_status')
    def package_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECK_PENDING', 'CHECKING', 'CHECKED', 'CLEANING', 'CLEANED', 'COMPLETED', 'DOWNLOADING', 'IN_PREPARATION', 'IN_PROGRESS', 'STORED', 'INDEXING', 'READY', 'IN_ERROR', 'PRESERVATION_ERROR', 'FIXITY_ERROR', 'DISPOSABLE', 'DISPOSAL_APPROVED_BY_ORGUNIT', 'DISPOSAL_APPROVED', 'DISPOSED', 'FIX_PENDING', 'FIXING', 'METADATA_EDITION_PENDING', 'EDITING_METADATA', 'UPDATING_RETENTION', 'METADATA_UPGRADE_PENDING', 'UPGRADING_METADATA', 'COMPLIANCE_LEVEL_UPDATE_PENDING', 'UPDATING_COMPLIANCE_LEVEL', 'COMPLIANCE_LEVEL_UPDATED', 'REINDEXING', 'RELOADED', 'RESUBMITTING', 'PACKAGE_REPLICATION_PENDING', 'REPLICATING_PACKAGE', 'TOMBSTONE_REPLICATION_PENDING', 'REPLICATING_TOMBSTONE']):
            raise ValueError("must be one of enum values ('CHECK_PENDING', 'CHECKING', 'CHECKED', 'CLEANING', 'CLEANED', 'COMPLETED', 'DOWNLOADING', 'IN_PREPARATION', 'IN_PROGRESS', 'STORED', 'INDEXING', 'READY', 'IN_ERROR', 'PRESERVATION_ERROR', 'FIXITY_ERROR', 'DISPOSABLE', 'DISPOSAL_APPROVED_BY_ORGUNIT', 'DISPOSAL_APPROVED', 'DISPOSED', 'FIX_PENDING', 'FIXING', 'METADATA_EDITION_PENDING', 'EDITING_METADATA', 'UPDATING_RETENTION', 'METADATA_UPGRADE_PENDING', 'UPGRADING_METADATA', 'COMPLIANCE_LEVEL_UPDATE_PENDING', 'UPDATING_COMPLIANCE_LEVEL', 'COMPLIANCE_LEVEL_UPDATED', 'REINDEXING', 'RELOADED', 'RESUBMITTING', 'PACKAGE_REPLICATION_PENDING', 'REPLICATING_PACKAGE', 'TOMBSTONE_REPLICATION_PENDING', 'REPLICATING_TOMBSTONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionInfoPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ready",
            "data_file_number",
            "collection_size",
            "smart_retention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creation
        if self.creation:
            _dict['creation'] = self.creation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_update
        if self.last_update:
            _dict['lastUpdate'] = self.last_update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organizational_unit
        if self.organizational_unit:
            _dict['organizationalUnit'] = self.organizational_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submission_policy
        if self.submission_policy:
            _dict['submissionPolicy'] = self.submission_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionInfoPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation": ChangeInfo.from_dict(obj["creation"]) if obj.get("creation") is not None else None,
            "lastUpdate": ChangeInfo.from_dict(obj["lastUpdate"]) if obj.get("lastUpdate") is not None else None,
            "resId": obj.get("resId"),
            "dispositionApproval": obj.get("dispositionApproval"),
            "retention": obj.get("retention"),
            "mainStorage": obj.get("mainStorage"),
            "aipId": obj.get("aipId"),
            "depositId": obj.get("depositId"),
            "info": RepresentationInfo.from_dict(obj["info"]) if obj.get("info") is not None else None,
            "organizationalUnit": OrganizationalUnit.from_dict(obj["organizationalUnit"]) if obj.get("organizationalUnit") is not None else None,
            "submissionPolicy": SubmissionPolicy.from_dict(obj["submissionPolicy"]) if obj.get("submissionPolicy") is not None else None,
            "submissionPolicyId": obj.get("submissionPolicyId"),
            "publicationDate": obj.get("publicationDate"),
            "organizationalUnitId": obj.get("organizationalUnitId"),
            "ready": obj.get("ready"),
            "dataFileNumber": obj.get("dataFileNumber"),
            "collectionSize": obj.get("collectionSize"),
            "packageStatus": obj.get("packageStatus"),
            "smartRetention": obj.get("smartRetention"),
            "_links": dict(
                (_k, Link.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj


