# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dlcm_api_client.models.archival_info_package import ArchivalInfoPackage
from typing import Optional, Set
from typing_extensions import Self

class AipCopy(BaseModel):
    """
    AipCopy
    """ # noqa: E501
    aip: Optional[ArchivalInfoPackage] = None
    storage_url: Optional[StrictStr] = Field(default=None, alias="storageUrl")
    no_updated_copy: Optional[StrictBool] = Field(default=None, alias="noUpdatedCopy")
    status: Optional[StrictStr] = Field(default=None, description="OAIS Package Status: - CHECKED => Checked package during archiving process - CHECKING => A package verification is in progress during checking process - CHECK_PENDING => A package verification is pending during checking process - CLEANED => Cleaned package during cleaning process for SIP only - CLEANING => A package clean is in progress during cleaning process for SIP only - COMPLIANCE_LEVEL_UPDATE_PENDING => A package compliance update is pending - COMPLIANCE_LEVEL_UPDATED => The compliance levels of the package have been updated - COMPLETED => Completed package - DISPOSABLE => The Package is candidate for disposal process for AIP only - DISPOSAL_APPROVED_BY_ORGUNIT => Disposal org. unit approval done during disposal process for AIP only - DISPOSAL_APPROVED => Disposal approval done during disposal process for AIP only - DISPOSED => Disposed package for AIP only - DOWNLOADING => A package download is in progress - EDITING_METADATA => A package metadata edition is in progress - FIXING => A package correction is in progress - FIXITY_ERROR => Error when checking checksums - FIX_PENDING => A package correction is pending - INDEXING => A package indexing is in progress - IN_ERROR => Package in error during archiving process - IN_PREPARATION => Package in preparation during archiving process - IN_PROGRESS => A package archiving process is in progress - METADATA_EDITION_PENDING => A metadata edition is pending - METADATA_UPGRADE_PENDING => A metadata version upgrade is pending - PACKAGE_REPLICATION_PENDING => A package replication is pending - PRESERVATION_ERROR => Package in error during checking process - READY => Package Ready - REINDEXING => A package re-indexing is in progress - RELOADED => Reloaded package from storage location - REPLICATING_PACKAGE => A package replication is in progress - REPLICATING_TOMBSTONE => A tombstone package replication is in progress - RESUBMITTING => A package re-submission is in progress - STORED => Package stored on storage location - TOMBSTONE_REPLICATION_PENDING => A tombstone replication is pending - UPDATING_COMPLIANCE_LEVEL => A package compliance update is in progress - UPDATING_RETENTION => A package retention update is in progress during disposal process - UPGRADING_METADATA => A metadata version upgrade is in progress ")
    __properties: ClassVar[List[str]] = ["aip", "storageUrl", "noUpdatedCopy", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECK_PENDING', 'CHECKING', 'CHECKED', 'CLEANING', 'CLEANED', 'COMPLETED', 'DOWNLOADING', 'IN_PREPARATION', 'IN_PROGRESS', 'STORED', 'INDEXING', 'READY', 'IN_ERROR', 'PRESERVATION_ERROR', 'FIXITY_ERROR', 'DISPOSABLE', 'DISPOSAL_APPROVED_BY_ORGUNIT', 'DISPOSAL_APPROVED', 'DISPOSED', 'FIX_PENDING', 'FIXING', 'METADATA_EDITION_PENDING', 'EDITING_METADATA', 'UPDATING_RETENTION', 'METADATA_UPGRADE_PENDING', 'UPGRADING_METADATA', 'COMPLIANCE_LEVEL_UPDATE_PENDING', 'UPDATING_COMPLIANCE_LEVEL', 'COMPLIANCE_LEVEL_UPDATED', 'REINDEXING', 'RELOADED', 'RESUBMITTING', 'PACKAGE_REPLICATION_PENDING', 'REPLICATING_PACKAGE', 'TOMBSTONE_REPLICATION_PENDING', 'REPLICATING_TOMBSTONE']):
            raise ValueError("must be one of enum values ('CHECK_PENDING', 'CHECKING', 'CHECKED', 'CLEANING', 'CLEANED', 'COMPLETED', 'DOWNLOADING', 'IN_PREPARATION', 'IN_PROGRESS', 'STORED', 'INDEXING', 'READY', 'IN_ERROR', 'PRESERVATION_ERROR', 'FIXITY_ERROR', 'DISPOSABLE', 'DISPOSAL_APPROVED_BY_ORGUNIT', 'DISPOSAL_APPROVED', 'DISPOSED', 'FIX_PENDING', 'FIXING', 'METADATA_EDITION_PENDING', 'EDITING_METADATA', 'UPDATING_RETENTION', 'METADATA_UPGRADE_PENDING', 'UPGRADING_METADATA', 'COMPLIANCE_LEVEL_UPDATE_PENDING', 'UPDATING_COMPLIANCE_LEVEL', 'COMPLIANCE_LEVEL_UPDATED', 'REINDEXING', 'RELOADED', 'RESUBMITTING', 'PACKAGE_REPLICATION_PENDING', 'REPLICATING_PACKAGE', 'TOMBSTONE_REPLICATION_PENDING', 'REPLICATING_TOMBSTONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AipCopy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aip
        if self.aip:
            _dict['aip'] = self.aip.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AipCopy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aip": ArchivalInfoPackage.from_dict(obj["aip"]) if obj.get("aip") is not None else None,
            "storageUrl": obj.get("storageUrl"),
            "noUpdatedCopy": obj.get("noUpdatedCopy"),
            "status": obj.get("status")
        })
        return _obj


