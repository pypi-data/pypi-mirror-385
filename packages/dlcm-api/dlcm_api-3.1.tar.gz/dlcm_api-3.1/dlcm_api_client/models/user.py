# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dlcm_api_client.models.application_role import ApplicationRole
from dlcm_api_client.models.auth_user_dto import AuthUserDto
from dlcm_api_client.models.change_info import ChangeInfo
from dlcm_api_client.models.link import Link
from dlcm_api_client.models.person import Person
from dlcm_api_client.models.search_criteria import SearchCriteria
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    A user represents a user of the platform. A person and roles are associated to it.
    """ # noqa: E501
    creation: Optional[ChangeInfo] = None
    last_update: Optional[ChangeInfo] = Field(default=None, alias="lastUpdate")
    res_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="The identifier of the resource. The default format is a Universally Unique IDentifier (UUID).", alias="resId")
    search_criterias: Optional[List[SearchCriteria]] = Field(default=None, alias="searchCriterias")
    last_login_time: Optional[datetime] = Field(default=None, description="The date of the user last login.", alias="lastLoginTime")
    last_login_ip_address: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="The IP address from last login of the user.", alias="lastLoginIpAddress")
    application_role: Optional[ApplicationRole] = Field(default=None, alias="applicationRole")
    disabled: Optional[StrictBool] = None
    email: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="The user email which must be a valid address.")
    external_uid: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="The external unique ID of the user.", alias="externalUid")
    first_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="The first name of the user.", alias="firstName")
    last_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="The last name of the user.", alias="lastName")
    home_organization: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=512)]] = Field(default=None, description="The home organization of the user.", alias="homeOrganization")
    person: Optional[Person] = None
    enabled: Optional[StrictBool] = Field(default=None, description="If the user is enable.")
    full_name: Optional[StrictStr] = Field(default=None, description="The full name of the user.", alias="fullName")
    application_role_and_last_login: Optional[AuthUserDto] = Field(default=None, alias="applicationRoleAndLastLogin")
    links: Optional[Dict[str, Link]] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["creation", "lastUpdate", "resId", "searchCriterias", "lastLoginTime", "lastLoginIpAddress", "applicationRole", "disabled", "email", "externalUid", "firstName", "lastName", "homeOrganization", "person", "enabled", "fullName", "applicationRoleAndLastLogin", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creation
        if self.creation:
            _dict['creation'] = self.creation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_update
        if self.last_update:
            _dict['lastUpdate'] = self.last_update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in search_criterias (list)
        _items = []
        if self.search_criterias:
            for _item_search_criterias in self.search_criterias:
                if _item_search_criterias:
                    _items.append(_item_search_criterias.to_dict())
            _dict['searchCriterias'] = _items
        # override the default output from pydantic by calling `to_dict()` of application_role
        if self.application_role:
            _dict['applicationRole'] = self.application_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict['person'] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of application_role_and_last_login
        if self.application_role_and_last_login:
            _dict['applicationRoleAndLastLogin'] = self.application_role_and_last_login.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['_links'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation": ChangeInfo.from_dict(obj["creation"]) if obj.get("creation") is not None else None,
            "lastUpdate": ChangeInfo.from_dict(obj["lastUpdate"]) if obj.get("lastUpdate") is not None else None,
            "resId": obj.get("resId"),
            "searchCriterias": [SearchCriteria.from_dict(_item) for _item in obj["searchCriterias"]] if obj.get("searchCriterias") is not None else None,
            "lastLoginTime": obj.get("lastLoginTime"),
            "lastLoginIpAddress": obj.get("lastLoginIpAddress"),
            "applicationRole": ApplicationRole.from_dict(obj["applicationRole"]) if obj.get("applicationRole") is not None else None,
            "disabled": obj.get("disabled"),
            "email": obj.get("email"),
            "externalUid": obj.get("externalUid"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "homeOrganization": obj.get("homeOrganization"),
            "person": Person.from_dict(obj["person"]) if obj.get("person") is not None else None,
            "enabled": obj.get("enabled"),
            "fullName": obj.get("fullName"),
            "applicationRoleAndLastLogin": AuthUserDto.from_dict(obj["applicationRoleAndLastLogin"]) if obj.get("applicationRoleAndLastLogin") is not None else None,
            "_links": dict(
                (_k, Link.from_dict(_v))
                for _k, _v in obj["_links"].items()
            )
            if obj.get("_links") is not None
            else None
        })
        return _obj


