# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dlcm_api_client.models.embargo_info import EmbargoInfo
from typing import Optional, Set
from typing_extensions import Self

class RepresentationInfo(BaseModel):
    """
    OAIS Information Package: SIP, AIP or DIP.
    """ # noqa: E501
    access: Optional[StrictStr] = Field(default=None, description="Access level of the archive: - PUBLIC => Open Access & Everyone - RESTRICTED => Team members (i.e., Org. Unit) & Trusted parties - CLOSED => Case by case & Individuals ")
    data_sensitivity: Optional[StrictStr] = Field(default=None, description="DataTage represents the data sensitivity of the archive: - UNDEFINED => Not defined (Data sensitivity not set to support previous archives) - BLUE => Public (Non-confidential information, stored and shared freely) - GREEN => Controlled public (Not harmful personal information, shared with some access control) - YELLOW => Accountable (Potentially harmful personal information, shared with loosely verified and/or approved recipients) - ORANGE => More accountable (Sensitive personal information, shared with verified and/or approved recipients under agreement) - RED => Fully accountable (Very sensitive personal information, shared with strong verification of approved recipients under signed agreement) - CRIMSON => Maximum restricted (Maximum sensitive, explicit permission for each transaction, strong verification of approved recipients under signed agreement) ", alias="dataSensitivity")
    data_use_policy: Optional[StrictStr] = Field(default=None, description="Data use policy defines the terms to conditions to access to an archive: - NONE => no policy - LICENSE => To respect the license - CLICK_THROUGH_DUA => To click to accept the Data Use Agreement (DUA) - SIGNED_DUA => To sign to accept the Data Use Agreement (DUA) - EXTERNAL_DUA => The Data Use Agreement (DUA) is managed externally ", alias="dataUsePolicy")
    compliance_level: Optional[StrictStr] = Field(default=None, description="Compliance level to define the preservation quality based on data file format: - NOT_ASSESSED => The format could not be evaluated - NO_COMPLIANCE => The format could not be determined - WEAK_COMPLIANCE => The format was determined: content type detected - AVERAGE_COMPLIANCE => The format was determined: WEAK_COMPLIANCE + PRONOM identifier detected - FULL_COMPLIANCE => The format was determined: AVERAGE_COMPLIANCE + the format is part of golden formats ", alias="complianceLevel")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The description of the package.")
    embargo: Optional[EmbargoInfo] = None
    license_id: Optional[StrictStr] = Field(default=None, description="The license identifier of the package.", alias="licenseId")
    metadata_version: Optional[StrictStr] = Field(default=None, description="DLCM metadata are based on METS container, DataCite as descriptive metadata and PREMIS as administrative metadata. Metadata version: - 1.0 = DataCite 4.0 + PREMIS 3.0 + DLCM Info 1.0 - 1.1 = DataCite 4.0 + PREMIS 3.0 + DLCM Info 1.0 - 2.0 = DataCite 4.3 + PREMIS 3.0 + DLCM Info 2.0 + Data File Categories - 2.1 = DataCite 4.3 + PREMIS 3.0 + DLCM Info 2.1 + Dataset Thumbnail support - 3.0 = DataCite 4.4 + PREMIS 3.0 + DLCM Info 2.1 - 3.1 = DataCite 4.4 + PREMIS 3.0 + DLCM Info 2.2 + Archive Thumbnail & DUA & README support - 4.0 = Datacite 4.5 + PREMIS 3.0 + DLCM Info 3.0 + Update of Archive Thumbnail & DUA & README - 5.0 = Datacite 4.6 + PREMIS 3.0 + DLCM Info 3.0 + Modern ARK ", alias="metadataVersion")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="The name of the package.")
    organizational_unit_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="The organizational Unit ID of the package.", alias="organizationalUnitId")
    status: Optional[StrictStr] = Field(default=None, description="OAIS Package Status: - CHECKED => Checked package during archiving process - CHECKING => A package verification is in progress during checking process - CHECK_PENDING => A package verification is pending during checking process - CLEANED => Cleaned package during cleaning process for SIP only - CLEANING => A package clean is in progress during cleaning process for SIP only - COMPLIANCE_LEVEL_UPDATE_PENDING => A package compliance update is pending - COMPLIANCE_LEVEL_UPDATED => The compliance levels of the package have been updated - COMPLETED => Completed package - DISPOSABLE => The Package is candidate for disposal process for AIP only - DISPOSAL_APPROVED_BY_ORGUNIT => Disposal org. unit approval done during disposal process for AIP only - DISPOSAL_APPROVED => Disposal approval done during disposal process for AIP only - DISPOSED => Disposed package for AIP only - DOWNLOADING => A package download is in progress - EDITING_METADATA => A package metadata edition is in progress - FIXING => A package correction is in progress - FIXITY_ERROR => Error when checking checksums - FIX_PENDING => A package correction is pending - INDEXING => A package indexing is in progress - IN_ERROR => Package in error during archiving process - IN_PREPARATION => Package in preparation during archiving process - IN_PROGRESS => A package archiving process is in progress - METADATA_EDITION_PENDING => A metadata edition is pending - METADATA_UPGRADE_PENDING => A metadata version upgrade is pending - PACKAGE_REPLICATION_PENDING => A package replication is pending - PRESERVATION_ERROR => Package in error during checking process - READY => Package Ready - REINDEXING => A package re-indexing is in progress - RELOADED => Reloaded package from storage location - REPLICATING_PACKAGE => A package replication is in progress - REPLICATING_TOMBSTONE => A tombstone package replication is in progress - RESUBMITTING => A package re-submission is in progress - STORED => Package stored on storage location - TOMBSTONE_REPLICATION_PENDING => A tombstone replication is pending - UPDATING_COMPLIANCE_LEVEL => A package compliance update is in progress - UPDATING_RETENTION => A package retention update is in progress during disposal process - UPGRADING_METADATA => A metadata version upgrade is in progress ")
    status_message: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The detailed message related to the package status.", alias="statusMessage")
    contains_updated_metadata: Optional[StrictBool] = Field(default=None, description="If the package contains updated metadata.", alias="containsUpdatedMetadata")
    content_structure_public: Optional[StrictBool] = Field(default=None, description="If the archive structure content is public.", alias="contentStructurePublic")
    current_access: Optional[StrictStr] = Field(default=None, description="Access level of the archive: - PUBLIC => Open Access & Everyone - RESTRICTED => Team members (i.e., Org. Unit) & Trusted parties - CLOSED => Case by case & Individuals ", alias="currentAccess")
    access_currently_public: Optional[StrictBool] = Field(default=None, description="If the current access level is public", alias="accessCurrentlyPublic")
    __properties: ClassVar[List[str]] = ["access", "dataSensitivity", "dataUsePolicy", "complianceLevel", "description", "embargo", "licenseId", "metadataVersion", "name", "organizationalUnitId", "status", "statusMessage", "containsUpdatedMetadata", "contentStructurePublic", "currentAccess", "accessCurrentlyPublic"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PUBLIC', 'RESTRICTED', 'CLOSED']):
            raise ValueError("must be one of enum values ('PUBLIC', 'RESTRICTED', 'CLOSED')")
        return value

    @field_validator('data_sensitivity')
    def data_sensitivity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNDEFINED', 'BLUE', 'GREEN', 'YELLOW', 'ORANGE', 'RED', 'CRIMSON']):
            raise ValueError("must be one of enum values ('UNDEFINED', 'BLUE', 'GREEN', 'YELLOW', 'ORANGE', 'RED', 'CRIMSON')")
        return value

    @field_validator('data_use_policy')
    def data_use_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'LICENSE', 'CLICK_THROUGH_DUA', 'SIGNED_DUA', 'EXTERNAL_DUA']):
            raise ValueError("must be one of enum values ('NONE', 'LICENSE', 'CLICK_THROUGH_DUA', 'SIGNED_DUA', 'EXTERNAL_DUA')")
        return value

    @field_validator('compliance_level')
    def compliance_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_ASSESSED', 'NO_COMPLIANCE', 'WEAK_COMPLIANCE', 'AVERAGE_COMPLIANCE', 'FULL_COMPLIANCE']):
            raise ValueError("must be one of enum values ('NOT_ASSESSED', 'NO_COMPLIANCE', 'WEAK_COMPLIANCE', 'AVERAGE_COMPLIANCE', 'FULL_COMPLIANCE')")
        return value

    @field_validator('metadata_version')
    def metadata_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1.0', '1.1', '2.0', '2.1', '3.0', '3.1', '4.0', '5.0']):
            raise ValueError("must be one of enum values ('1.0', '1.1', '2.0', '2.1', '3.0', '3.1', '4.0', '5.0')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECK_PENDING', 'CHECKING', 'CHECKED', 'CLEANING', 'CLEANED', 'COMPLETED', 'DOWNLOADING', 'IN_PREPARATION', 'IN_PROGRESS', 'STORED', 'INDEXING', 'READY', 'IN_ERROR', 'PRESERVATION_ERROR', 'FIXITY_ERROR', 'DISPOSABLE', 'DISPOSAL_APPROVED_BY_ORGUNIT', 'DISPOSAL_APPROVED', 'DISPOSED', 'FIX_PENDING', 'FIXING', 'METADATA_EDITION_PENDING', 'EDITING_METADATA', 'UPDATING_RETENTION', 'METADATA_UPGRADE_PENDING', 'UPGRADING_METADATA', 'COMPLIANCE_LEVEL_UPDATE_PENDING', 'UPDATING_COMPLIANCE_LEVEL', 'COMPLIANCE_LEVEL_UPDATED', 'REINDEXING', 'RELOADED', 'RESUBMITTING', 'PACKAGE_REPLICATION_PENDING', 'REPLICATING_PACKAGE', 'TOMBSTONE_REPLICATION_PENDING', 'REPLICATING_TOMBSTONE']):
            raise ValueError("must be one of enum values ('CHECK_PENDING', 'CHECKING', 'CHECKED', 'CLEANING', 'CLEANED', 'COMPLETED', 'DOWNLOADING', 'IN_PREPARATION', 'IN_PROGRESS', 'STORED', 'INDEXING', 'READY', 'IN_ERROR', 'PRESERVATION_ERROR', 'FIXITY_ERROR', 'DISPOSABLE', 'DISPOSAL_APPROVED_BY_ORGUNIT', 'DISPOSAL_APPROVED', 'DISPOSED', 'FIX_PENDING', 'FIXING', 'METADATA_EDITION_PENDING', 'EDITING_METADATA', 'UPDATING_RETENTION', 'METADATA_UPGRADE_PENDING', 'UPGRADING_METADATA', 'COMPLIANCE_LEVEL_UPDATE_PENDING', 'UPDATING_COMPLIANCE_LEVEL', 'COMPLIANCE_LEVEL_UPDATED', 'REINDEXING', 'RELOADED', 'RESUBMITTING', 'PACKAGE_REPLICATION_PENDING', 'REPLICATING_PACKAGE', 'TOMBSTONE_REPLICATION_PENDING', 'REPLICATING_TOMBSTONE')")
        return value

    @field_validator('current_access')
    def current_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PUBLIC', 'RESTRICTED', 'CLOSED']):
            raise ValueError("must be one of enum values ('PUBLIC', 'RESTRICTED', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RepresentationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "current_access",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embargo
        if self.embargo:
            _dict['embargo'] = self.embargo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RepresentationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access"),
            "dataSensitivity": obj.get("dataSensitivity"),
            "dataUsePolicy": obj.get("dataUsePolicy"),
            "complianceLevel": obj.get("complianceLevel"),
            "description": obj.get("description"),
            "embargo": EmbargoInfo.from_dict(obj["embargo"]) if obj.get("embargo") is not None else None,
            "licenseId": obj.get("licenseId"),
            "metadataVersion": obj.get("metadataVersion"),
            "name": obj.get("name"),
            "organizationalUnitId": obj.get("organizationalUnitId"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "containsUpdatedMetadata": obj.get("containsUpdatedMetadata"),
            "contentStructurePublic": obj.get("contentStructurePublic"),
            "currentAccess": obj.get("currentAccess"),
            "accessCurrentlyPublic": obj.get("accessCurrentlyPublic")
        })
        return _obj


