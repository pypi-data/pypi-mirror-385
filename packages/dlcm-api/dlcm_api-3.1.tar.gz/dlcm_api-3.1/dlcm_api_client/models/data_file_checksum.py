# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.1.1-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataFileChecksum(BaseModel):
    """
    DataFileChecksum
    """ # noqa: E501
    checksum: Optional[StrictStr] = None
    checksum_algo: Optional[StrictStr] = Field(default=None, alias="checksumAlgo")
    checksum_origin: Optional[StrictStr] = Field(default=None, alias="checksumOrigin")
    checksum_type: Optional[StrictStr] = Field(default=None, alias="checksumType")
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    __properties: ClassVar[List[str]] = ["checksum", "checksumAlgo", "checksumOrigin", "checksumType", "creationTime"]

    @field_validator('checksum_algo')
    def checksum_algo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRC32', 'MD5', 'SHA-1', 'SHA-256', 'SHA-512']):
            raise ValueError("must be one of enum values ('CRC32', 'MD5', 'SHA-1', 'SHA-256', 'SHA-512')")
        return value

    @field_validator('checksum_origin')
    def checksum_origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DLCM', 'DLCM_TOMBSTONE', 'USER', 'PORTAL']):
            raise ValueError("must be one of enum values ('DLCM', 'DLCM_TOMBSTONE', 'USER', 'PORTAL')")
        return value

    @field_validator('checksum_type')
    def checksum_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPLETE', 'PARTIAL']):
            raise ValueError("must be one of enum values ('COMPLETE', 'PARTIAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataFileChecksum from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataFileChecksum from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checksum": obj.get("checksum"),
            "checksumAlgo": obj.get("checksumAlgo"),
            "checksumOrigin": obj.get("checksumOrigin"),
            "checksumType": obj.get("checksumType"),
            "creationTime": obj.get("creationTime")
        })
        return _obj


