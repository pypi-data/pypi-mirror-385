# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.0.0-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dlcm_api_client.models.rest_collection_dip_data_file import RestCollectionDipDataFile

class TestRestCollectionDipDataFile(unittest.TestCase):
    """RestCollectionDipDataFile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RestCollectionDipDataFile:
        """Test RestCollectionDipDataFile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RestCollectionDipDataFile`
        """
        model = RestCollectionDipDataFile()
        if include_optional:
            return RestCollectionDipDataFile(
                links = {
                    'key' : dlcm_api_client.models.link.Link(
                        href = '', 
                        hreflang = '', 
                        title = '', 
                        type = '', 
                        deprecation = '', 
                        profile = '', 
                        name = '', 
                        templated = True, )
                    },
                data = [
                    dlcm_api_client.models.dip_data_file.DipDataFile(
                        creation = dlcm_api_client.models.change_info.ChangeInfo(
                            full_name = '', 
                            when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            who = '', ), 
                        last_update = dlcm_api_client.models.change_info.ChangeInfo(
                            full_name = '', 
                            when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            who = '', ), 
                        res_id = '', 
                        search_criterias = [
                            dlcm_api_client.models.search_criteria.SearchCriteria(
                                case_insensitive = True, 
                                case_type = '', 
                                key = '', 
                                operation = '', 
                                operation_type = 'BETWEEN', 
                                value = dlcm_api_client.models.value.value(), )
                            ], 
                        compliance_level = 'NOT_ASSESSED', 
                        data_category = 'Primary', 
                        data_type = 'Primary', 
                        file_format = dlcm_api_client.models.file_format.FileFormat(
                            content_type = '', 
                            details = '', 
                            format = '', 
                            md5 = '', 
                            puid = '', 
                            tool = dlcm_api_client.models.tool.Tool(
                                description = '', 
                                name = '', 
                                puid = '', 
                                version = '', ), 
                            version = '', ), 
                        file_size = 56, 
                        final_data = '', 
                        file_name = '', 
                        metadata_type = dlcm_api_client.models.metadata_type.MetadataType(
                            res_id = '', 
                            description = '', 
                            metadata_format = 'CUSTOM', 
                            metadata_schema = '', 
                            name = '0', 
                            url = '', 
                            version = '0', 
                            full_name = '', 
                            _links = {
                                'key' : dlcm_api_client.models.link.Link(
                                    href = '', 
                                    hreflang = '', 
                                    title = '', 
                                    type = '', 
                                    deprecation = '', 
                                    profile = '', 
                                    name = '', 
                                    templated = True, )
                                }, ), 
                        relative_location = '', 
                        source_data = '', 
                        status = 'CHANGE_RELATIVE_LOCATION', 
                        status_message = '', 
                        virus_check = dlcm_api_client.models.virus_check.VirusCheck(
                            check_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            details = '', ), 
                        checksums = [
                            dlcm_api_client.models.data_file_checksum.DataFileChecksum(
                                checksum = '', 
                                checksum_algo = 'CRC32', 
                                checksum_origin = 'DLCM', 
                                checksum_type = 'COMPLETE', 
                                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        info_package = dlcm_api_client.models.dissemination_info_package.DisseminationInfoPackage(
                            res_id = '', 
                            info = dlcm_api_client.models.representation_info.RepresentationInfo(
                                access = 'PUBLIC', 
                                data_sensitivity = 'UNDEFINED', 
                                data_use_policy = 'NONE', 
                                compliance_level = 'NOT_ASSESSED', 
                                description = '', 
                                embargo = dlcm_api_client.models.embargo_info.EmbargoInfo(
                                    access = 'PUBLIC', 
                                    months = 56, 
                                    start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                license_id = '', 
                                metadata_version = '1.0', 
                                name = '0', 
                                organizational_unit_id = '0', 
                                status = 'CHECK_PENDING', 
                                status_message = '', 
                                contains_updated_metadata = True, 
                                content_structure_public = True, 
                                current_access = 'PUBLIC', 
                                access_currently_public = True, ), 
                            ready = True, 
                            aip_ids = [
                                ''
                                ], 
                            package_status = 'CHECK_PENDING', ), 
                        file_status = 'CHANGE_RELATIVE_LOCATION', 
                        full_file_name = '', 
                        in_progress = True, 
                        smart_size = '', 
                        _links = {
                            'key' : dlcm_api_client.models.link.Link(
                                href = '', 
                                hreflang = '', 
                                title = '', 
                                type = '', 
                                deprecation = '', 
                                profile = '', 
                                name = '', 
                                templated = True, )
                            }, )
                    ],
                facets = [
                    dlcm_api_client.models.facet_result.FacetResult(
                        name = '', 
                        field = '', 
                        values = [
                            dlcm_api_client.models.facet_result_value.FacetResultValue(
                                value = '', 
                                count = 56, )
                            ], )
                    ],
                page = dlcm_api_client.models.rest_collection_page.RestCollectionPage(
                    current_page = 56, 
                    size_page = 56, 
                    total_items = 56, 
                    total_pages = 56, )
            )
        else:
            return RestCollectionDipDataFile(
        )
        """

    def testRestCollectionDipDataFile(self):
        """Test RestCollectionDipDataFile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
