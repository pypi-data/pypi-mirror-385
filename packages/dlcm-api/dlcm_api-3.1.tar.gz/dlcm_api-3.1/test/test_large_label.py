# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.0.0-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dlcm_api_client.models.large_label import LargeLabel

class TestLargeLabel(unittest.TestCase):
    """LargeLabel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LargeLabel:
        """Test LargeLabel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LargeLabel`
        """
        model = LargeLabel()
        if include_optional:
            return LargeLabel(
                text = '',
                language = dlcm_api_client.models.language.Language(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    code = '', 
                    _links = {
                        'key' : dlcm_api_client.models.link.Link(
                            href = '', 
                            hreflang = '', 
                            title = '', 
                            type = '', 
                            deprecation = '', 
                            profile = '', 
                            name = '', 
                            templated = True, )
                        }, )
            )
        else:
            return LargeLabel(
        )
        """

    def testLargeLabel(self):
        """Test LargeLabel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
