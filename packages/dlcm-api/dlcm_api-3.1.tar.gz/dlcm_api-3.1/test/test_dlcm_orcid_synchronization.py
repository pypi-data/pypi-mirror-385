# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.0.0-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dlcm_api_client.models.dlcm_orcid_synchronization import DlcmOrcidSynchronization

class TestDlcmOrcidSynchronization(unittest.TestCase):
    """DlcmOrcidSynchronization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DlcmOrcidSynchronization:
        """Test DlcmOrcidSynchronization
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DlcmOrcidSynchronization`
        """
        model = DlcmOrcidSynchronization()
        if include_optional:
            return DlcmOrcidSynchronization(
                creation = dlcm_api_client.models.change_info.ChangeInfo(
                    full_name = '', 
                    when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    who = '', ),
                last_update = dlcm_api_client.models.change_info.ChangeInfo(
                    full_name = '', 
                    when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    who = '', ),
                res_id = '',
                object_id = '',
                person_id = '',
                upload_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                download_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                put_code = 56,
                person = dlcm_api_client.models.person.Person(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    search_criterias = [
                        dlcm_api_client.models.search_criteria.SearchCriteria(
                            case_insensitive = True, 
                            case_type = '', 
                            key = '', 
                            operation = '', 
                            operation_type = 'BETWEEN', 
                            value = dlcm_api_client.models.value.value(), )
                        ], 
                    first_name = '0', 
                    last_name = '0', 
                    orcid = '4807-2888-0015-280X', 
                    verified_orcid = True, 
                    orcid_token = dlcm_api_client.models.orcid_token.OrcidToken(
                        res_id = '', 
                        access_token = '0', 
                        refresh_token = '0', 
                        scope = '', 
                        name = '', 
                        orcid = '', 
                        expires_in = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        _links = {
                            'key' : dlcm_api_client.models.link.Link(
                                href = '', 
                                hreflang = '', 
                                title = '', 
                                type = '', 
                                deprecation = '', 
                                profile = '', 
                                name = '', 
                                templated = True, )
                            }, ), 
                    avatar = dlcm_api_client.models.person_avatar.PersonAvatar(
                        res_id = '', 
                        file_name = '', 
                        file_size = 56, 
                        mime_type = '', ), 
                    full_name = '', 
                    _links = {
                        'key' : dlcm_api_client.models.link.Link(
                            href = '', 
                            hreflang = '', 
                            title = '', 
                            type = '', 
                            deprecation = '', 
                            profile = '', 
                            name = '', 
                            templated = True, )
                        }, ),
                aip_id = '',
                links = {
                    'key' : dlcm_api_client.models.link.Link(
                        href = '', 
                        hreflang = '', 
                        title = '', 
                        type = '', 
                        deprecation = '', 
                        profile = '', 
                        name = '', 
                        templated = True, )
                    }
            )
        else:
            return DlcmOrcidSynchronization(
        )
        """

    def testDlcmOrcidSynchronization(self):
        """Test DlcmOrcidSynchronization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
