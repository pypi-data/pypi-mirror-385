# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.0.0-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dlcm_api_client.models.rest_collection_archive_user_rating import RestCollectionArchiveUserRating

class TestRestCollectionArchiveUserRating(unittest.TestCase):
    """RestCollectionArchiveUserRating unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RestCollectionArchiveUserRating:
        """Test RestCollectionArchiveUserRating
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RestCollectionArchiveUserRating`
        """
        model = RestCollectionArchiveUserRating()
        if include_optional:
            return RestCollectionArchiveUserRating(
                links = {
                    'key' : dlcm_api_client.models.link.Link(
                        href = '', 
                        hreflang = '', 
                        title = '', 
                        type = '', 
                        deprecation = '', 
                        profile = '', 
                        name = '', 
                        templated = True, )
                    },
                data = [
                    dlcm_api_client.models.archive_user_rating.ArchiveUserRating(
                        creation = dlcm_api_client.models.change_info.ChangeInfo(
                            full_name = '', 
                            when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            who = '', ), 
                        last_update = dlcm_api_client.models.change_info.ChangeInfo(
                            full_name = '', 
                            when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            who = '', ), 
                        res_id = '', 
                        archive_id = '', 
                        user = dlcm_api_client.models.user.User(
                            res_id = '', 
                            search_criterias = [
                                dlcm_api_client.models.search_criteria.SearchCriteria(
                                    case_insensitive = True, 
                                    case_type = '', 
                                    key = '', 
                                    operation = '', 
                                    operation_type = 'BETWEEN', 
                                    value = dlcm_api_client.models.value.value(), )
                                ], 
                            last_login_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_login_ip_address = '', 
                            application_role = dlcm_api_client.models.application_role.ApplicationRole(
                                name = '', 
                                level = 56, 
                                res_id = '', ), 
                            disabled = True, 
                            email = '0', 
                            external_uid = '0', 
                            first_name = '0', 
                            last_name = '0', 
                            home_organization = '0', 
                            person = dlcm_api_client.models.person.Person(
                                res_id = '', 
                                first_name = '0', 
                                last_name = '0', 
                                orcid = '4807-2888-0015-280X', 
                                verified_orcid = True, 
                                orcid_token = dlcm_api_client.models.orcid_token.OrcidToken(
                                    res_id = '', 
                                    access_token = '0', 
                                    refresh_token = '0', 
                                    scope = '', 
                                    name = '', 
                                    orcid = '', 
                                    expires_in = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    _links = {
                                        'key' : dlcm_api_client.models.link.Link(
                                            href = '', 
                                            hreflang = '', 
                                            title = '', 
                                            type = '', 
                                            deprecation = '', 
                                            profile = '', 
                                            name = '', 
                                            templated = True, )
                                        }, ), 
                                avatar = dlcm_api_client.models.person_avatar.PersonAvatar(
                                    res_id = '', 
                                    file_name = '', 
                                    file_size = 56, 
                                    mime_type = '', ), 
                                full_name = '', 
                                _links = {
                                    'key' : dlcm_api_client.models.link.Link(
                                        href = '', 
                                        hreflang = '', 
                                        title = '', 
                                        type = '', 
                                        deprecation = '', 
                                        profile = '', 
                                        name = '', 
                                        templated = True, )
                                    }, ), 
                            full_name = '', 
                            enabled = True, 
                            auth_user_dto = dlcm_api_client.models.auth_user_dto.AuthUserDto(
                                res_id = '', 
                                external_uid = '', 
                                creation_when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                last_update_when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                creation_who = '', 
                                last_update_who = '', 
                                disabled = True, 
                                email = '', 
                                first_name = '', 
                                home_organization = '', 
                                last_name = '', 
                                first_login = dlcm_api_client.models.auth_login_info.AuthLoginInfo(
                                    login_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    login_ip_address = '', ), 
                                last_login = dlcm_api_client.models.login_info.LoginInfo(
                                    login_ip_address = '', 
                                    login_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                orcid = '', 
                                verified_orcid = True, 
                                full_name = '', 
                                enabled = True, ), 
                            _links = , ), 
                        rating_type = dlcm_api_client.models.rating_type.RatingType(
                            res_id = '', 
                            name = '', ), 
                        grade = 56, 
                        _links = , )
                    ],
                facets = [
                    dlcm_api_client.models.facet_result.FacetResult(
                        name = '', 
                        field = '', 
                        values = [
                            dlcm_api_client.models.facet_result_value.FacetResultValue(
                                value = '', 
                                count = 56, )
                            ], )
                    ],
                page = dlcm_api_client.models.rest_collection_page.RestCollectionPage(
                    current_page = 56, 
                    size_page = 56, 
                    total_items = 56, 
                    total_pages = 56, )
            )
        else:
            return RestCollectionArchiveUserRating(
        )
        """

    def testRestCollectionArchiveUserRating(self):
        """Test RestCollectionArchiveUserRating"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
