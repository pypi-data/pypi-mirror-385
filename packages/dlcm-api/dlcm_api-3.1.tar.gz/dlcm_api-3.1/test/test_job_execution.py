# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.0.0-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dlcm_api_client.models.job_execution import JobExecution

class TestJobExecution(unittest.TestCase):
    """JobExecution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobExecution:
        """Test JobExecution
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobExecution`
        """
        model = JobExecution()
        if include_optional:
            return JobExecution(
                creation = dlcm_api_client.models.change_info.ChangeInfo(
                    full_name = '', 
                    when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    who = '', ),
                last_update = dlcm_api_client.models.change_info.ChangeInfo(
                    full_name = '', 
                    when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    who = '', ),
                res_id = '',
                preservation_job = dlcm_api_client.models.preservation_job.PreservationJob(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    enable = True, 
                    job_recurrence = 'DAILY', 
                    job_type = 'ARCHIVE_CHECK', 
                    name = '0', 
                    scheduling = dlcm_api_client.models.job_scheduling.JobScheduling(
                        hour = 56, 
                        month = 56, 
                        month_day = 56, 
                        week_day = 56, ), 
                    max_items = 56, 
                    parameters = '', 
                    last_execution_status = 'COMPLETED', 
                    execution_number = 56, 
                    _links = {
                        'key' : dlcm_api_client.models.link.Link(
                            href = '', 
                            hreflang = '', 
                            title = '', 
                            type = '', 
                            deprecation = '', 
                            profile = '', 
                            name = '', 
                            templated = True, )
                        }, ),
                completion_status = 56,
                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                run_number = 56,
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'COMPLETED',
                status_message = '',
                total_items = 56,
                processed_items = 56,
                ignored_items = 56,
                in_error_items = 56,
                report_number = 56,
                links = {
                    'key' : dlcm_api_client.models.link.Link(
                        href = '', 
                        hreflang = '', 
                        title = '', 
                        type = '', 
                        deprecation = '', 
                        profile = '', 
                        name = '', 
                        templated = True, )
                    }
            )
        else:
            return JobExecution(
        )
        """

    def testJobExecution(self):
        """Test JobExecution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
