# coding: utf-8

"""
    DLCM Solution API

    Repository for Research Datasets

    The version of the OpenAPI document: 3.0.0-SNAPSHOT
    Contact: admin@dlcm.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dlcm_api_client.models.notification import Notification

class TestNotification(unittest.TestCase):
    """Notification unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Notification:
        """Test Notification
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Notification`
        """
        model = Notification()
        if include_optional:
            return Notification(
                creation = dlcm_api_client.models.change_info.ChangeInfo(
                    full_name = '', 
                    when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    who = '', ),
                last_update = dlcm_api_client.models.change_info.ChangeInfo(
                    full_name = '', 
                    when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    who = '', ),
                res_id = '',
                signed_dua_file = dlcm_api_client.models.signed_dua_file.SignedDuaFile(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    file_name = '', 
                    file_size = 56, 
                    mime_type = '', 
                    _links = {
                        'key' : dlcm_api_client.models.link.Link(
                            href = '', 
                            hreflang = '', 
                            title = '', 
                            type = '', 
                            deprecation = '', 
                            profile = '', 
                            name = '', 
                            templated = True, )
                        }, ),
                recipient = dlcm_api_client.models.person.Person(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    search_criterias = [
                        dlcm_api_client.models.search_criteria.SearchCriteria(
                            case_insensitive = True, 
                            case_type = '', 
                            key = '', 
                            operation = '', 
                            operation_type = 'BETWEEN', 
                            value = dlcm_api_client.models.value.value(), )
                        ], 
                    first_name = '0', 
                    last_name = '0', 
                    orcid = '4807-2888-0015-280X', 
                    verified_orcid = True, 
                    orcid_token = dlcm_api_client.models.orcid_token.OrcidToken(
                        res_id = '', 
                        access_token = '0', 
                        refresh_token = '0', 
                        scope = '', 
                        name = '', 
                        orcid = '', 
                        expires_in = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        _links = {
                            'key' : dlcm_api_client.models.link.Link(
                                href = '', 
                                hreflang = '', 
                                title = '', 
                                type = '', 
                                deprecation = '', 
                                profile = '', 
                                name = '', 
                                templated = True, )
                            }, ), 
                    avatar = dlcm_api_client.models.person_avatar.PersonAvatar(
                        res_id = '', 
                        file_name = '', 
                        file_size = 56, 
                        mime_type = '', ), 
                    full_name = '', 
                    _links = {
                        'key' : dlcm_api_client.models.link.Link(
                            href = '', 
                            hreflang = '', 
                            title = '', 
                            type = '', 
                            deprecation = '', 
                            profile = '', 
                            name = '', 
                            templated = True, )
                        }, ),
                emitter = dlcm_api_client.models.user.User(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    search_criterias = [
                        dlcm_api_client.models.search_criteria.SearchCriteria(
                            case_insensitive = True, 
                            case_type = '', 
                            key = '', 
                            operation = '', 
                            operation_type = 'BETWEEN', 
                            value = dlcm_api_client.models.value.value(), )
                        ], 
                    last_login_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_login_ip_address = '', 
                    application_role = dlcm_api_client.models.application_role.ApplicationRole(
                        name = '', 
                        level = 56, 
                        res_id = '', ), 
                    disabled = True, 
                    email = '0', 
                    external_uid = '0', 
                    first_name = '0', 
                    last_name = '0', 
                    home_organization = '0', 
                    person = dlcm_api_client.models.person.Person(
                        res_id = '', 
                        first_name = '0', 
                        last_name = '0', 
                        orcid = '4807-2888-0015-280X', 
                        verified_orcid = True, 
                        orcid_token = dlcm_api_client.models.orcid_token.OrcidToken(
                            res_id = '', 
                            access_token = '0', 
                            refresh_token = '0', 
                            scope = '', 
                            name = '', 
                            orcid = '', 
                            expires_in = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            _links = {
                                'key' : dlcm_api_client.models.link.Link(
                                    href = '', 
                                    hreflang = '', 
                                    title = '', 
                                    type = '', 
                                    deprecation = '', 
                                    profile = '', 
                                    name = '', 
                                    templated = True, )
                                }, ), 
                        avatar = dlcm_api_client.models.person_avatar.PersonAvatar(
                            res_id = '', 
                            file_name = '', 
                            file_size = 56, 
                            mime_type = '', ), 
                        full_name = '', 
                        _links = {
                            'key' : dlcm_api_client.models.link.Link(
                                href = '', 
                                hreflang = '', 
                                title = '', 
                                type = '', 
                                deprecation = '', 
                                profile = '', 
                                name = '', 
                                templated = True, )
                            }, ), 
                    full_name = '', 
                    enabled = True, 
                    auth_user_dto = dlcm_api_client.models.auth_user_dto.AuthUserDto(
                        res_id = '', 
                        external_uid = '', 
                        creation_when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_update_when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        creation_who = '', 
                        last_update_who = '', 
                        disabled = True, 
                        email = '', 
                        first_name = '', 
                        home_organization = '', 
                        last_name = '', 
                        first_login = dlcm_api_client.models.auth_login_info.AuthLoginInfo(
                            login_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            login_ip_address = '', ), 
                        last_login = dlcm_api_client.models.login_info.LoginInfo(
                            login_ip_address = '', 
                            login_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        orcid = '', 
                        verified_orcid = True, 
                        full_name = '', 
                        enabled = True, ), 
                    _links = , ),
                message = '0',
                response_message = '0',
                notification_status = 'APPROVED',
                notification_mark = 'READ',
                notification_type = dlcm_api_client.models.notification_type.NotificationType(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    notified_org_unit_role = dlcm_api_client.models.role.Role(
                        res_id = '', 
                        name = '', 
                        level = 56, 
                        _links = {
                            'key' : dlcm_api_client.models.link.Link(
                                href = '', 
                                hreflang = '', 
                                title = '', 
                                type = '', 
                                deprecation = '', 
                                profile = '', 
                                name = '', 
                                templated = True, )
                            }, ), 
                    notified_institution_manager = True, 
                    notified_application_role = dlcm_api_client.models.application_role.ApplicationRole(
                        name = '', 
                        level = 56, 
                        res_id = '', ), 
                    notification_category = 'INFO', 
                    _links = {
                        'key' : dlcm_api_client.models.link.Link(
                            href = '', 
                            hreflang = '', 
                            title = '', 
                            type = '', 
                            deprecation = '', 
                            profile = '', 
                            name = '', 
                            templated = True, )
                        }, ),
                notified_org_unit = dlcm_api_client.models.organizational_unit.OrganizationalUnit(
                    creation = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    last_update = dlcm_api_client.models.change_info.ChangeInfo(
                        full_name = '', 
                        when = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        who = '', ), 
                    res_id = '', 
                    closing_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    default_license = dlcm_api_client.models.license.License(
                        res_id = '', 
                        domain_content = True, 
                        domain_data = True, 
                        domain_software = True, 
                        family = '', 
                        is_generic = True, 
                        maintainer = '', 
                        od_conformance = 'approved', 
                        open_license_id = '', 
                        osd_conformance = 'approved', 
                        status = 'active', 
                        title = '', 
                        url = '', 
                        logo = dlcm_api_client.models.license_logo.LicenseLogo(
                            res_id = '', 
                            file_name = '', 
                            file_size = 56, 
                            mime_type = '', 
                            _links = {
                                'key' : dlcm_api_client.models.link.Link(
                                    href = '', 
                                    hreflang = '', 
                                    title = '', 
                                    type = '', 
                                    deprecation = '', 
                                    profile = '', 
                                    name = '', 
                                    templated = True, )
                                }, ), 
                        description = '', 
                        _links = {
                            'key' : dlcm_api_client.models.link.Link(
                                href = '', 
                                hreflang = '', 
                                title = '', 
                                type = '', 
                                deprecation = '', 
                                profile = '', 
                                name = '', 
                                templated = True, )
                            }, ), 
                    default_preservation_policy = dlcm_api_client.models.preservation_policy.PreservationPolicy(
                        res_id = '', 
                        disposition_approval = True, 
                        retention = 56, 
                        main_storage = 56, 
                        name = '0', 
                        use_number = 56, 
                        smart_retention = '', ), 
                    default_submission_policy = dlcm_api_client.models.submission_policy.SubmissionPolicy(
                        res_id = '', 
                        name = '0', 
                        submission_approval = True, 
                        time_to_keep = 56, 
                        submission_agreement_type = 'WITHOUT', 
                        submission_agreement = dlcm_api_client.models.submission_agreement.SubmissionAgreement(
                            res_id = '', 
                            title = '', 
                            description = '', 
                            version = '', 
                            submission_agreement_file = dlcm_api_client.models.submission_agreement_file.SubmissionAgreementFile(
                                res_id = '', 
                                file_name = '', 
                                file_size = 56, 
                                mime_type = '', ), ), 
                        use_number = 56, ), 
                    description = '', 
                    institutions = [
                        dlcm_api_client.models.institution.Institution(
                            res_id = '', 
                            description = '', 
                            email_suffixes = [
                                ''
                                ], 
                            name = '0', 
                            url = '', 
                            ror_id = '', 
                            identifiers = {
                                'key' : ''
                                }, 
                            organizational_unit = [
                                dlcm_api_client.models.organizational_unit.OrganizationalUnit(
                                    res_id = '', 
                                    closing_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    description = '', 
                                    is_empty = True, 
                                    keywords = [
                                        ''
                                        ], 
                                    name = '0', 
                                    opening_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    url = '', 
                                    open = True, )
                                ], )
                        ], 
                    is_empty = True, 
                    keywords = [
                        ''
                        ], 
                    name = '0', 
                    opening_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    url = '', 
                    logo = dlcm_api_client.models.organizational_unit_logo.OrganizationalUnitLogo(
                        res_id = '', 
                        file_name = '', 
                        file_size = 56, 
                        mime_type = '', ), 
                    open = True, 
                    _links = , ),
                object_id = '',
                status_message = '',
                sent_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                links = {
                    'key' : dlcm_api_client.models.link.Link(
                        href = '', 
                        hreflang = '', 
                        title = '', 
                        type = '', 
                        deprecation = '', 
                        profile = '', 
                        name = '', 
                        templated = True, )
                    }
            )
        else:
            return Notification(
        )
        """

    def testNotification(self):
        """Test Notification"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
