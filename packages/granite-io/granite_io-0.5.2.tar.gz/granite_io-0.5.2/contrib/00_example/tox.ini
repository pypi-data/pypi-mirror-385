# SPDX-License-Identifier: Apache-2.0

[tox]
envlist = ruff, lint, unitcov, examples, notebooks, readme
minversion = 4.4

[testenv]
description = run tests (unit, unitcov)
package = wheel
wheel_build_env = pkg
allowlist_externals = bash
deps =
    httpx  # granite-io 0.2.1 bug
    granite-io>=0.2,<0.3
    pylint>=2.16.2,<4.0
    pytest
    pytest-asyncio
    pytest-cov
    pytest-html
passenv =
    MODEL_NAME
    OPENAI_*
    WATSONX_*
    WX_*
setenv =
    HF_HOME=~/.cache/huggingface
commands =
    unit: {envpython} -m pytest -v -rA {posargs: tests}
    unitcov: {envpython} -W error::UserWarning -m pytest -v -rA --cov=src --cov-report term --cov-report=html:coverage-{env_name} --cov-report=xml:coverage-{env_name}.xml --html=durations/{env_name}.html {posargs:tests}

[testenv:py3]
basepython = python3.11

[testenv:unit]
basepython = {[testenv:py3]basepython}

[testenv:unitcov]
basepython = {[testenv:py3]basepython}

[testenv:lint]
description = lint with pylint
basepython = {[testenv:py3]basepython}
commands =
    bash -c "ls -1d src tests examples | xargs -r {basepython} -m pylint"

[testenv:ruff]
description = lint and format check with ruff
basepython = {[testenv:py3]basepython}
deps =
    ruff==0.11.2
    isort==6.0.1
commands =
    ruff check .
    ruff format --diff .
    bash -c "ls -1d src tests examples | xargs -r isort --check --diff"

[testenv:fix]
description = reformat and fix violations with ruff
basepython = {[testenv:py3]basepython}
deps = {[testenv:ruff]deps}
commands =
    ruff check {posargs:--fix} .
    ruff format .
    bash -c "ls -1d src tests examples | xargs -r isort --check"

[testenv:examples]
description = Run examples code
basepython = {[testenv:py3]basepython}
deps =
    -rrequirements.txt
commands =
    bash -c "find examples/*.py -print0 | xargs -0 -n1 {basepython}"

[testenv:notebooks]
description = Test notebooks
basepython = {[testenv:py3]basepython}
deps =
    notebook
commands =
    bash -c "ls -1d notebooks/*.ipynb | xargs -r jupyter execute"

[testenv:readme]
description = Tests for the README.md
basepython = {[testenv:py3]basepython}
commands =
    # First just test to make sure README.md exists
    bash -c "( [ -f README.md ] && echo 'README.md exists' ) || (echo $(basename {toxinidir})'/README.md is missing' && exit 1)"

[gh]
python =
    3.11 = 3.11, ruff, lint, unitcov, examples, notebooks, readme
