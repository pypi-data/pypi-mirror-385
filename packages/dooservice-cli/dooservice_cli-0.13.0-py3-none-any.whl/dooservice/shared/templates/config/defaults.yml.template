# =======================================
# Default Instance Configuration
# =======================================
# Generated by: dooservice init
# These settings apply to all instances unless overridden
# =======================================

defaults:
  instance:
    # Versions
    odoo_version: '19.0'              # Supported: 14.0, 15.0, 16.0, 17.0, 18.0, 19.0
    db_version: '17'                  # PostgreSQL: 12, 13, 14, 15, 16, 17

    # Directories (relative path for cross-platform compatibility)
    data_dir: 'odoo-data/${name}'

    # Auto Backup
    auto_backup:
      enabled: false
      db_name: '${name}_db'

    # Paths
    paths:
      config: '${data_dir}/etc/odoo.conf'
      addons: '${data_dir}/addons'
      logs: '${data_dir}/logs'
      filestore: '${data_dir}/filestore'

    # Ports
    ports:
      http: 8069
      longpolling: 8072
      expose: []                      # Options: [], ['web'], ['db'], ['web', 'db']

    # Repositories (define in repositories.yml)
    repositories: {}

    # Environment Variables
    env_vars:
      # Network
      ODOO_HTTP_PORT: 8069
      ODOO_LONGPOLLING_PORT: 8072

      # Database - ⚠️  CHANGE THESE!
      DB_HOST: 'db_${name}'
      DB_PORT: 5432
      DB_USER: 'odoo'
      DB_PASSWORD: 'odoo'            # ⚠️  Change in production!
      ADMIN_PASSWORD: 'admin'        # ⚠️  Change in production!

      # Performance
      WORKERS: 2                      # Formula: (CPU cores x 2) + 1
      LIMIT_MEMORY_SOFT: 2147483648   # 2GB
      LIMIT_MEMORY_HARD: 2684354560   # 2.5GB
      LIMIT_REQUEST: 8192
      LIMIT_TIME_CPU: 60
      LIMIT_TIME_REAL: 120
      MAX_CRON_THREADS: 2

      # General
      PROXY_MODE: true
      LIST_DB: false                  # Set false in production
      TIMEZONE: 'America/Lima'

    # Python Dependencies
    python_dependencies: []

    # Snapshots
    snapshot:
      enabled: true
      storage_dir: '${data_dir}/snapshots'
      include_backup_by_default: true
      retention:
        days: 60
        max_snapshots: 20

    # Docker Deployment
    deployment:
      type: 'docker'

      docker:
        web:
          image: 'odoo:${odoo_version}'
          container_name: 'web_${name}'
          restart_policy: 'unless-stopped'
          user: 'root'
          volumes:
            - '${paths.addons}:/mnt/extra-addons'
            - '${paths.config}:/etc/odoo/odoo.conf'
            - '${paths.logs}:/var/log/odoo'
            - '${paths.filestore}:/var/lib/odoo'
          networks:
            - 'net_${name}'
          ports:
            - '${env_vars.ODOO_HTTP_PORT}:8069'
            - '${env_vars.ODOO_LONGPOLLING_PORT}:8072'
          depends_on:
            - 'db_${name}'
          environment:
            TZ: '${env_vars.TIMEZONE}'
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8069/web/health"]
            interval: "30s"
            timeout: "10s"
            retries: 3
            start_period: "40s"

        db:
          image: 'postgres:${db_version}'
          container_name: 'db_${name}'
          restart_policy: 'unless-stopped'
          user: 'root'
          volumes:
            - '${data_dir}/postgresql:/var/lib/postgresql/data'
          networks:
            - 'net_${name}'
          ports:
            - '${env_vars.DB_PORT}:5432'
          environment:
            TZ: '${env_vars.TIMEZONE}'
            POSTGRES_USER: '${env_vars.DB_USER}'
            POSTGRES_PASSWORD: '${env_vars.DB_PASSWORD}'
            POSTGRES_DB: 'postgres'
          healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${env_vars.DB_USER}"]
            interval: "10s"
            timeout: "5s"
            retries: 5
            start_period: "10s"

        nginx:
          image: 'nginx:latest'
          container_name: 'nginx_${name}'
          restart_policy: 'unless-stopped'
          volumes:
            - '${data_dir}/nginx/default.conf:/etc/nginx/conf.d/default.conf'
          networks:
            - 'net_${name}'
          ports: []                         # No expose ports by default (use Cloudflare Tunnel)
          depends_on:
            - 'web_${name}'
          environment:
            TZ: '${env_vars.TIMEZONE}'
