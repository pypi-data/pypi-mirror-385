"""
Auto-generated {{ class_name }} class with SQLAlchemy methods.

This class is generated by splurge-sql-generator.
Do not edit this file manually - it will be overwritten.
"""

import logging
from typing import Optional, List, Dict, Any
from sqlalchemy import text
from sqlalchemy.engine import Connection, Result
from sqlalchemy.engine.row import Row


class {{ class_name }}:
    """
    {{ class_name }} with SQLAlchemy-based database operations.
    
    This class provides only class methods (for explicit connection and transaction control).
    
    Attributes:
        logger: Class-level logger used by default for all operations.
    """

    logger = logging.getLogger(f"{__name__}.{{ class_name }}")
    # Attach a NullHandler to avoid 'No handler' warnings in CLI/standalone usage
    if not logger.handlers:
        logger.addHandler(logging.NullHandler())

{% for method in methods %}
    @classmethod
    def {{ method.name }}(
        cls,
        *,
        connection: Connection,
{% for param in method.parameters_list %}
        {{ param }}: {{ method.param_types[param] }},
{% endfor %}
    ) -> {{ method.return_type }}:
        """
        {{ method.type.title() }} operation: {{ method.name }} (class method).
        Statement type: {{ method.statement_type }}
{% if method.parameters_list %}
        Args:
            connection: SQLAlchemy database connection
{% for param in method.parameters_list %}
            {{ param }}: Parameter for {{ param }}
{% endfor %}
{% else %}
        Args:
            connection: SQLAlchemy database connection
{% endif %}

        Returns:
{% if method.is_fetch %}
            List of result rows
{% else %}
            SQLAlchemy Result object
{% endif %}
        """
        logger = cls.logger
        
        logger.debug("Executing {{ method.name }} operation")
        
        sql = """
{% for line in method.sql_lines %}
        {{ line }}
{% endfor %}
        """

{% if method.parameters_list %}
        # Prepare parameters
        params = {
{% for sql_param, python_param in method.param_mapping.items() %}
            "{{ sql_param }}": {{ python_param }},
{% endfor %}
        }
        logger.debug("Parameters: %s", params)

{% endif %}
        # Execute SQL query
        try:
{% if method.parameters_list %}
            result = connection.execute(text(sql), params)
{% else %}
            result = connection.execute(text(sql))
{% endif %}

{% if method.is_fetch %}
            # Fetch results
            rows = result.fetchall()
            logger.debug("Fetched %d rows", len(rows))
            return rows
{% else %}
            # Execute non-select operation
            logger.debug("Executed non-select operation")
            return result
{% endif %}
        except Exception as e:
            logger.error("Error in {{ method.name }} operation: %s", str(e))
            raise

{% endfor %} 