import attrs
from fileformats.generic import File
from glob import glob
import logging
from pydra.tasks.fsl.v6.nipype_ports.utils.filemanip import simplify_list
import os
from pydra.compose import shell


logger = logging.getLogger(__name__)


def _format_arg(name, value, inputs, argstr):
    if value is None:
        return ""

    if name == "fsf_file":
        pass
    elif name == "ev_files":
        return ""
    else:
        pass

    return argstr.format(**inputs)


def fsf_file_formatter(field, inputs):
    return _format_arg("fsf_file", field, inputs, argstr="{fsf_file}")


def ev_files_formatter(field, inputs):
    return _format_arg("ev_files", field, inputs, argstr="{ev_files}")


def _list_outputs(inputs=None, stdout=None, stderr=None, output_dir=None):
    inputs = attrs.asdict(inputs)

    outputs = {}
    root = _get_design_root(
        simplify_list(inputs["fsf_file"]),
        inputs=inputs["inputs"],
        output_dir=inputs["output_dir"],
        stderr=inputs["stderr"],
        stdout=inputs["stdout"],
    )
    design_file = glob(os.path.join(os.getcwd(), "%s*.mat" % root))
    assert len(design_file) == 1, "No mat file generated by FEAT Model"
    outputs["design_file"] = design_file[0]
    design_image = glob(os.path.join(os.getcwd(), "%s.png" % root))
    assert len(design_image) == 1, "No design image generated by FEAT Model"
    outputs["design_image"] = design_image[0]
    design_cov = glob(os.path.join(os.getcwd(), "%s_cov.png" % root))
    assert len(design_cov) == 1, "No covariance image generated by FEAT Model"
    outputs["design_cov"] = design_cov[0]
    con_file = glob(os.path.join(os.getcwd(), "%s*.con" % root))
    assert len(con_file) == 1, "No con file generated by FEAT Model"
    outputs["con_file"] = con_file[0]
    fcon_file = glob(os.path.join(os.getcwd(), "%s*.fts" % root))
    if fcon_file:
        assert len(fcon_file) == 1, "No fts file generated by FEAT Model"
        outputs["fcon_file"] = fcon_file[0]
    return outputs


def design_file_callable(output_dir, inputs, stdout, stderr):
    outputs = _list_outputs(
        output_dir=output_dir, inputs=inputs, stdout=stdout, stderr=stderr
    )
    return outputs.get("design_file")


def design_image_callable(output_dir, inputs, stdout, stderr):
    outputs = _list_outputs(
        output_dir=output_dir, inputs=inputs, stdout=stdout, stderr=stderr
    )
    return outputs.get("design_image")


def design_cov_callable(output_dir, inputs, stdout, stderr):
    outputs = _list_outputs(
        output_dir=output_dir, inputs=inputs, stdout=stdout, stderr=stderr
    )
    return outputs.get("design_cov")


def con_file_callable(output_dir, inputs, stdout, stderr):
    outputs = _list_outputs(
        output_dir=output_dir, inputs=inputs, stdout=stdout, stderr=stderr
    )
    return outputs.get("con_file")


def fcon_file_callable(output_dir, inputs, stdout, stderr):
    outputs = _list_outputs(
        output_dir=output_dir, inputs=inputs, stdout=stdout, stderr=stderr
    )
    return outputs.get("fcon_file")


@shell.define
class FEATModel(shell.Task["FEATModel.Outputs"]):
    """
    Examples
    -------

    >>> from fileformats.generic import File
    >>> from pydra.tasks.fsl.v6.model.feat_model import FEATModel

    """

    executable = "feat_model"
    fsf_file: File = shell.arg(
        help="File specifying the feat design spec file",
        formatter=fsf_file_formatter,
        position=1,
    )
    ev_files: list[File] = shell.arg(
        help="Event spec files generated by level1design",
        formatter=ev_files_formatter,
        position=2,
    )

    class Outputs(shell.Outputs):
        design_file: File | None = shell.out(
            help="Mat file containing ascii matrix for design",
            callable=design_file_callable,
        )
        design_image: File | None = shell.out(
            help="Graphical representation of design matrix",
            callable=design_image_callable,
        )
        design_cov: File | None = shell.out(
            help="Graphical representation of design covariance",
            callable=design_cov_callable,
        )
        con_file: File | None = shell.out(
            help="Contrast file containing contrast vectors", callable=con_file_callable
        )
        fcon_file: File | None = shell.out(
            help="Contrast file containing contrast vectors",
            callable=fcon_file_callable,
        )


def _get_design_root(infile, inputs=None, output_dir=None, stderr=None, stdout=None):
    _, fname = os.path.split(infile)
    return fname.split(".")[0]
