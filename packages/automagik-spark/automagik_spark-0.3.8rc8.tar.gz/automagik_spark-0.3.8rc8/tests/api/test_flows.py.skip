
"""Tests for the flows API endpoints."""
import pytest
from uuid import uuid4
from datetime import datetime, timezone

from automagik.api.models import FlowCreate, FlowResponse
from automagik.core.database.models import Flow

MOCK_API_KEY = "mock-api-key-12345"
HEADERS = {"X-API-Key": MOCK_API_KEY}

@pytest.mark.asyncio
async def test_list_flows_empty(client, session):
    """Test listing flows when there are none."""
    response = client.get("/api/v1/flows", headers=HEADERS)
    assert response.status_code == 200
    assert response.json() == []

@pytest.mark.asyncio
async def test_create_flow(client, session):
    """Test creating a flow."""
    flow_data = {
        "name": "test-flow",
        "description": "Test flow description",
        "data": {"key": "value"},
        "source": "langflow",
        "source_id": str(uuid4()),
        "flow_version": 1,
        "input_component": "input-1",
        "output_component": "output-1",
        "is_component": False,
        "folder_id": "folder-1",
        "folder_name": "Test Folder",
        "icon": "test-icon",
        "icon_bg_color": "#FFFFFF",
        "liked": False,
        "tags": ["test"]
    }
    
    response = client.post("/api/v1/flows", headers=HEADERS, json=flow_data)
    assert response.status_code == 200
    data = response.json()
    assert data["name"] == flow_data["name"]
    assert data["description"] == flow_data["description"]
    assert data["data"] == flow_data["data"]
    assert data["source"] == flow_data["source"]
    assert data["source_id"] == flow_data["source_id"]
    assert data["flow_version"] == flow_data["flow_version"]
    assert data["input_component"] == flow_data["input_component"]
    assert data["output_component"] == flow_data["output_component"]
    assert data["is_component"] == flow_data["is_component"]
    assert data["folder_id"] == flow_data["folder_id"]
    assert data["folder_name"] == flow_data["folder_name"]
    assert data["icon"] == flow_data["icon"]
    assert data["icon_bg_color"] == flow_data["icon_bg_color"]
    assert data["liked"] == flow_data["liked"]
    assert data["tags"] == flow_data["tags"]
    assert "id" in data
    assert "created_at" in data
    assert "updated_at" in data

@pytest.mark.asyncio
async def test_list_flows(client, session):
    """Test listing flows."""
    # Create a test flow
    flow = Flow(
        id=uuid4(),
        name="test-flow",
        description="Test flow description",
        data={"key": "value"},
        source="langflow",
        source_id=str(uuid4()),
        flow_version=1,
        input_component="input-1",
        output_component="output-1",
        is_component=False,
        folder_id="folder-1",
        folder_name="Test Folder",
        icon="test-icon",
        icon_bg_color="#FFFFFF",
        liked=False,
        tags=["test"],
        created_at=datetime.now(timezone.utc),
        updated_at=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(flow)

    response = client.get("/api/v1/flows", headers=HEADERS)
    assert response.status_code == 200
    flows = response.json()
    assert len(flows) == 1
    assert flows[0]["name"] == flow.name
    assert flows[0]["description"] == flow.description
    assert flows[0]["data"] == flow.data
    assert flows[0]["source"] == flow.source
    assert flows[0]["source_id"] == flow.source_id
    assert flows[0]["flow_version"] == flow.flow_version
    assert flows[0]["input_component"] == flow.input_component
    assert flows[0]["output_component"] == flow.output_component
    assert flows[0]["is_component"] == flow.is_component
    assert flows[0]["folder_id"] == flow.folder_id
    assert flows[0]["folder_name"] == flow.folder_name
    assert flows[0]["icon"] == flow.icon
    assert flows[0]["icon_bg_color"] == flow.icon_bg_color
    assert flows[0]["liked"] == flow.liked
    assert flows[0]["tags"] == flow.tags

@pytest.mark.asyncio
async def test_get_flow(client, session):
    """Test getting a specific flow."""
    # Create a test flow
    flow_id = uuid4()
    flow = Flow(
        id=flow_id,
        name="test-flow",
        description="Test flow description",
        data={"key": "value"},
        source="langflow",
        source_id=str(uuid4()),
        flow_version=1,
        input_component="input-1",
        output_component="output-1",
        is_component=False,
        folder_id="folder-1",
        folder_name="Test Folder",
        icon="test-icon",
        icon_bg_color="#FFFFFF",
        liked=False,
        tags=["test"],
        created_at=datetime.now(timezone.utc),
        updated_at=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(flow)

    response = client.get(f"/api/v1/flows/{flow_id}", headers=HEADERS)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == str(flow_id)
    assert data["name"] == flow.name
    assert data["description"] == flow.description
    assert data["data"] == flow.data
    assert data["source"] == flow.source
    assert data["source_id"] == flow.source_id
    assert data["flow_version"] == flow.flow_version
    assert data["input_component"] == flow.input_component
    assert data["output_component"] == flow.output_component
    assert data["is_component"] == flow.is_component
    assert data["folder_id"] == flow.folder_id
    assert data["folder_name"] == flow.folder_name
    assert data["icon"] == flow.icon
    assert data["icon_bg_color"] == flow.icon_bg_color
    assert data["liked"] == flow.liked
    assert data["tags"] == flow.tags

@pytest.mark.asyncio
async def test_get_flow_not_found(client):
    """Test getting a non-existent flow."""
    response = client.get(f"/api/v1/flows/{uuid4()}", headers=HEADERS)
    assert response.status_code == 404

@pytest.mark.asyncio
async def test_update_flow(client, session):
    """Test updating a flow."""
    # Create a test flow
    flow_id = uuid4()
    flow = Flow(
        id=flow_id,
        name="test-flow",
        description="Test flow description",
        data={"key": "value"},
        source="langflow",
        source_id=str(uuid4()),
        flow_version=1,
        input_component="input-1",
        output_component="output-1",
        is_component=False,
        folder_id="folder-1",
        folder_name="Test Folder",
        icon="test-icon",
        icon_bg_color="#FFFFFF",
        liked=False,
        tags=["test"],
        created_at=datetime.now(timezone.utc),
        updated_at=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(flow)

    # Update the flow
    update_data = {
        "name": "updated-flow",
        "description": "Updated flow description",
        "data": {"new_key": "new_value"},
        "source": "langflow",
        "source_id": str(uuid4()),
        "flow_version": 2,
        "input_component": "input-2",
        "output_component": "output-2",
        "is_component": True,
        "folder_id": "folder-2",
        "folder_name": "Updated Test Folder",
        "icon": "updated-icon",
        "icon_bg_color": "#000000",
        "liked": True,
        "tags": ["updated"]
    }
    
    response = client.put(f"/api/v1/flows/{flow_id}", headers=HEADERS, json=update_data)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == str(flow_id)
    assert data["name"] == update_data["name"]
    assert data["description"] == update_data["description"]
    assert data["data"] == update_data["data"]
    assert data["source"] == update_data["source"]
    assert data["source_id"] == update_data["source_id"]
    assert data["flow_version"] == update_data["flow_version"]
    assert data["input_component"] == update_data["input_component"]
    assert data["output_component"] == update_data["output_component"]
    assert data["is_component"] == update_data["is_component"]
    assert data["folder_id"] == update_data["folder_id"]
    assert data["folder_name"] == update_data["folder_name"]
    assert data["icon"] == update_data["icon"]
    assert data["icon_bg_color"] == update_data["icon_bg_color"]
    assert data["liked"] == update_data["liked"]
    assert data["tags"] == update_data["tags"]

@pytest.mark.asyncio
async def test_update_flow_not_found(client):
    """Test updating a non-existent flow."""
    update_data = {
        "name": "updated-flow",
        "description": "Updated flow description",
        "data": {"new_key": "new_value"},
        "source": "langflow",
        "source_id": str(uuid4()),
        "flow_version": 2,
        "input_component": "input-2",
        "output_component": "output-2",
        "is_component": True,
        "folder_id": "folder-2",
        "folder_name": "Updated Test Folder",
        "icon": "updated-icon",
        "icon_bg_color": "#000000",
        "liked": True,
        "tags": ["updated"]
    }
    
    response = client.put(f"/api/v1/flows/{uuid4()}", headers=HEADERS, json=update_data)
    assert response.status_code == 404

@pytest.mark.asyncio
async def test_delete_flow(client, session):
    """Test deleting a flow."""
    # Create a test flow
    flow_id = uuid4()
    flow = Flow(
        id=flow_id,
        name="test-flow",
        description="Test flow description",
        data={"key": "value"},
        source="langflow",
        source_id=str(uuid4()),
        flow_version=1,
        input_component="input-1",
        output_component="output-1",
        is_component=False,
        folder_id="folder-1",
        folder_name="Test Folder",
        icon="test-icon",
        icon_bg_color="#FFFFFF",
        liked=False,
        tags=["test"],
        created_at=datetime.now(timezone.utc),
        updated_at=datetime.now(timezone.utc)
    )
    async with session.begin():
        session.add(flow)

    response = client.delete(f"/api/v1/flows/{flow_id}", headers=HEADERS)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == str(flow_id)

    # Verify flow is deleted
    response = client.get(f"/api/v1/flows/{flow_id}", headers=HEADERS)
    assert response.status_code == 404

@pytest.mark.asyncio
async def test_delete_flow_not_found(client):
    """Test deleting a non-existent flow."""
    response = client.delete(f"/api/v1/flows/{uuid4()}", headers=HEADERS)
    assert response.status_code == 404


