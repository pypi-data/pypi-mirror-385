name: Link to Roadmap Initiative
on:
  issues:
    types: [opened, edited]

jobs:
  link-to-initiative:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'planned-feature')
    steps:
      - name: Generate token from GitHub App
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.PROJECT_APP_ID }}
          private-key: ${{ secrets.PROJECT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: automagik-roadmap,${{ github.event.repository.name }}

      - name: Parse initiative number from issue body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';

            // Parse initiative number from new format: "### üîó Roadmap Initiative: [#29](url)"
            // Also support old format: "### üîó Roadmap Initiative Number\n29"
            let initiativeNumber = '';

            // Try new format first
            const newFormatMatch = body.match(/### üîó Roadmap Initiative:\s*\[#(\d+)\]/i);
            if (newFormatMatch) {
              initiativeNumber = newFormatMatch[1];
            } else {
              // Fall back to old format
              const oldFormatMatch = body.match(/### üîó Roadmap Initiative Number\s*\n+([^#\n]+)/i);
              initiativeNumber = oldFormatMatch ? oldFormatMatch[1].trim() : '';
            }

            console.log('Parsed initiative number:', initiativeNumber);

            if (!initiativeNumber || !initiativeNumber.match(/^\d+$/)) {
              core.setFailed('Could not find valid initiative number in issue body');
              return;
            }

            core.setOutput('initiative_number', initiativeNumber);

            // Parse additional metadata for labels/fields
            const workTypeMatch = body.match(/### üìã Work Type:\s*`([^`]+)`/i);
            const workType = workTypeMatch ? workTypeMatch[1].trim() : '';

            const complexityMatch = body.match(/### üìä Estimated Complexity:\s*`([^`]+)`/i);
            const complexity = complexityMatch ? complexityMatch[1].trim() : '';

            const priorityMatch = body.match(/### ‚ö° Priority:\s*`([^`]+)`/i);
            const priority = priorityMatch ? priorityMatch[1].trim() : '';

            console.log('Parsed metadata - Work Type:', workType, 'Complexity:', complexity, 'Priority:', priority);

            core.setOutput('work_type', workType);
            core.setOutput('complexity', complexity);
            core.setOutput('priority', priority);

      - name: Validate initiative exists
        id: validate
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const initiativeNumber = '${{ steps.parse.outputs.initiative_number }}';

            try {
              const { data: initiative } = await github.rest.issues.get({
                owner: 'namastexlabs',
                repo: 'automagik-roadmap',
                issue_number: parseInt(initiativeNumber)
              });

              console.log('Found initiative:', initiative.title);
              console.log('Initiative state:', initiative.state);

              // Get node ID for GraphQL
              core.setOutput('initiative_node_id', initiative.node_id);
              core.setOutput('initiative_title', initiative.title);
              core.setOutput('initiative_state', initiative.state);

            } catch (error) {
              core.setFailed(`Initiative #${initiativeNumber} not found in automagik-roadmap: ${error.message}`);
            }

      - name: Get current issue node ID
        id: current-issue
        uses: actions/github-script@v7
        with:
          script: |
            core.setOutput('issue_node_id', context.payload.issue.node_id);

      - name: Create sub-issue link
        id: link
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const initiativeNodeId = '${{ steps.validate.outputs.initiative_node_id }}';
            const issueNodeId = '${{ steps.current-issue.outputs.issue_node_id }}';
            const initiativeNumber = '${{ steps.parse.outputs.initiative_number }}';

            const mutation = `
              mutation {
                addSubIssue(input: {
                  issueId: "${initiativeNodeId}"
                  subIssueId: "${issueNodeId}"
                }) {
                  issue {
                    title
                    number
                  }
                  subIssue {
                    title
                    number
                  }
                }
              }
            `;

            try {
              const result = await github.graphql(mutation, {
                headers: {
                  'GraphQL-Features': 'sub_issues'
                }
              });

              console.log('‚úì Sub-issue link created successfully');
              console.log('Parent:', result.addSubIssue.issue.title);
              console.log('Child:', result.addSubIssue.subIssue.title);

            } catch (error) {
              core.setFailed(`Failed to create sub-issue link: ${error.message}`);
            }

      - name: Add labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const initiativeNumber = '${{ steps.parse.outputs.initiative_number }}';
            const initiativeState = '${{ steps.validate.outputs.initiative_state }}';

            const labels = ['roadmap-linked', `initiative-${initiativeNumber}`];

            // If parent initiative is closed, add special label
            if (initiativeState === 'closed') {
              labels.push('closed-initiative-work');
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

            console.log('‚úì Added labels:', labels.join(', '));

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const initiativeNumber = '${{ steps.parse.outputs.initiative_number }}';
            const initiativeTitle = '${{ steps.validate.outputs.initiative_title }}';
            const initiativeState = '${{ steps.validate.outputs.initiative_state }}';

            let comment = `‚úÖ **Successfully linked to roadmap initiative**\n\n`;
            comment += `**Parent Initiative:** [#${initiativeNumber} - ${initiativeTitle}](https://github.com/namastexlabs/automagik-roadmap/issues/${initiativeNumber})\n\n`;

            if (initiativeState === 'closed') {
              comment += `‚ö†Ô∏è **Note:** Parent initiative is closed, but link created for traceability.\n\n`;
            }

            comment += `**Labels Added:**\n`;
            comment += `- \`roadmap-linked\` - Successfully linked as sub-issue\n`;
            comment += `- \`initiative-${initiativeNumber}\` - Quick filter for this initiative's work\n`;

            if (initiativeState === 'closed') {
              comment += `- \`closed-initiative-work\` - Work continues despite parent closure\n`;
            }

            comment += `\n---\n\n`;
            comment += `**Query this relationship:**\n`;
            comment += `\`\`\`graphql\n`;
            comment += `# Get parent initiative\n`;
            comment += `query {\n`;
            comment += `  repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {\n`;
            comment += `    issue(number: ${context.issue.number}) {\n`;
            comment += `      parent { number title url }\n`;
            comment += `    }\n`;
            comment += `  }\n`;
            comment += `}\n`;
            comment += `\`\`\`\n\n`;
            comment += `[View all work for initiative #${initiativeNumber}](https://github.com/namastexlabs/automagik-roadmap/issues/${initiativeNumber})`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Add to project board
        id: add-to-board
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const projectId = 'PVT_kwDOBvG2684BE-4E'; // Automagik Roadmap project #9
            const issueNodeId = context.payload.issue.node_id;

            // Add issue to project
            const mutation = `
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${projectId}"
                  contentId: "${issueNodeId}"
                }) {
                  item {
                    id
                  }
                }
              }
            `;

            try {
              const result = await github.graphql(mutation);
              const itemId = result.addProjectV2ItemById.item.id;
              console.log('‚úì Added to project board, item ID:', itemId);
              core.setOutput('project_item_id', itemId);
            } catch (error) {
              console.log('Warning: Could not add to project board:', error.message);
            }

      - name: Set project board fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const projectId = 'PVT_kwDOBvG2684BE-4E';
            const itemId = '${{ steps.add-to-board.outputs.project_item_id }}';

            if (!itemId || itemId === '') {
              console.log('Skipping field updates - item not in project');
              return;
            }

            // ============================================
            // FIELD IDs (DO NOT CHANGE - These are correct)
            // ============================================
            const FIELDS = {
              stage: 'PVTSSF_lADOBvG2684BE-4Ezg2c_hc',
              status: 'PVTSSF_lADOBvG2684BE-4Ezg2c5dY',
              project: 'PVTSSF_lADOBvG2684BE-4Ezg2c_ec',
              eta: 'PVTSSF_lADOBvG2684BE-4Ezg2dPxc',
              expectedResults: 'PVTF_lADOBvG2684BE-4Ezg2c8aE',
              priority: 'PVTSSF_lADOBvG2684BE-4Ezg2c_kA'
            };

            // ============================================
            // STAGE OPTIONS (Based on initiative stage)
            // ============================================
            const STAGE_OPTIONS = {
              'open': '073f61b0',      // Executing (for open initiatives)
              'closed': '3d0b8ddd'     // Shipped (for closed initiatives)
            };

            // ============================================
            // STATUS OPTIONS
            // ============================================
            const STATUS_OPTIONS = {
              todo: 'f75ad846',
              in_progress: '47fc9ee4',
              done: '98236657'
            };

            // ============================================
            // PROJECT OPTIONS (Repo name mapping)
            // ============================================
            const PROJECT_OPTIONS = {
              'automagik-omni': '9c171c42',
              'automagik-hive': 'a28ceeff',
              'automagik-spark': '0a588179',
              'automagik-forge': '2a9e974c',
              'automagik-genie': '93d4bd3c',
              'automagik-tools': 'f00fd26a'
            };

            // ============================================
            // ETA OPTIONS (Quarter mapping)
            // ============================================
            const ETA_OPTIONS = {
              '2025-Q4': 'a35fa4f5',
              '2026-Q1': 'a0cccfe6',
              '2026-Q2': 'cf1026cb',
              '2026-Q3': '3c402b09',
              '2026-Q4': 'ec810765',
              'backlog': '88ae1263'
            };

            // ============================================
            // PRIORITY OPTIONS
            // ============================================
            const PRIORITY_OPTIONS = {
              critical: '700a2c58',
              high: 'd7a47ff6',
              medium: '79c50f9e',
              low: 'c7f229a8'
            };

            // ============================================
            // 1. SET STAGE (Based on initiative state)
            // ============================================
            const initiativeState = '${{ steps.validate.outputs.initiative_state }}';
            const stageOption = STAGE_OPTIONS[initiativeState] || STAGE_OPTIONS['open'];

            try {
              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}"
                    itemId: "${itemId}"
                    fieldId: "${FIELDS.stage}"
                    value: { singleSelectOptionId: "${stageOption}" }
                  }) {
                    projectV2Item { id }
                  }
                }
              `);
              console.log('‚úì Set Stage to', initiativeState === 'closed' ? 'Shipped' : 'Executing');
            } catch (error) {
              console.log('Warning: Could not set Stage:', error.message);
            }

            // ============================================
            // 2. SET STATUS (Default: Todo)
            // ============================================
            try {
              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}"
                    itemId: "${itemId}"
                    fieldId: "${FIELDS.status}"
                    value: { singleSelectOptionId: "${STATUS_OPTIONS.todo}" }
                  }) {
                    projectV2Item { id }
                  }
                }
              `);
              console.log('‚úì Set Status to Todo');
            } catch (error) {
              console.log('Warning: Could not set Status:', error.message);
            }

            // ============================================
            // 3. SET PROJECT (From repo name)
            // ============================================
            const repoFullName = context.repo.owner + '/' + context.repo.repo;
            const projectOption = PROJECT_OPTIONS[context.repo.repo];

            if (projectOption) {
              try {
                await github.graphql(`
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}"
                      itemId: "${itemId}"
                      fieldId: "${FIELDS.project}"
                      value: { singleSelectOptionId: "${projectOption}" }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `);
                console.log('‚úì Set Project to', context.repo.repo.replace('automagik-', ''));
              } catch (error) {
                console.log('Warning: Could not set Project:', error.message);
              }
            }

            // ============================================
            // 4. SET ETA (Default: 2025-Q4 or parse from body)
            // ============================================
            const body = context.payload.issue.body || '';

            // Try to parse ETA from body (look for "### üìä Estimated Complexity" or quarter mentions)
            let etaOption = ETA_OPTIONS['2025-Q4']; // Default

            const quarterMatch = body.match(/quarter[:\s]*(20\d{2}-Q[1-4])/i);
            if (quarterMatch && ETA_OPTIONS[quarterMatch[1]]) {
              etaOption = ETA_OPTIONS[quarterMatch[1]];
            }

            try {
              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}"
                    itemId: "${itemId}"
                    fieldId: "${FIELDS.eta}"
                    value: { singleSelectOptionId: "${etaOption}" }
                  }) {
                    projectV2Item { id }
                  }
                }
              `);
              console.log('‚úì Set ETA to 2025-Q4 (default)');
            } catch (error) {
              console.log('Warning: Could not set ETA:', error.message);
            }

            // ============================================
            // 5. SET EXPECTED RESULTS (From acceptance criteria)
            // ============================================
            const criteriaMatch = body.match(/### ‚úÖ Acceptance Criteria\n+([\s\S]*?)\n+###/);

            if (criteriaMatch) {
              // Extract category headers (**Category:**)
              const categories = criteriaMatch[1]
                .match(/\*\*[^*]+:\*\*/g)
                ?.map(cat => cat.replace(/\*\*/g, '').replace(/:$/, ''))
                .join(', ') || 'Various acceptance criteria';

              const results = categories.substring(0, 300); // Limit to 300 chars

              try {
                await github.graphql(`
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}"
                      itemId: "${itemId}"
                      fieldId: "${FIELDS.expectedResults}"
                      value: { text: "${results.replace(/"/g, '\\"')}" }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `);
                console.log('‚úì Set Expected Results:', results);
              } catch (error) {
                console.log('Warning: Could not set Expected Results:', error.message);
              }
            }

            // ============================================
            // 6. SET PRIORITY (From issue labels)
            // ============================================
            const labels = context.payload.issue.labels.map(l => l.name);
            const priorityLabel = labels.find(l => l.startsWith('priority:'));

            if (priorityLabel) {
              const priorityValue = priorityLabel.replace('priority:', '');
              const priorityOption = PRIORITY_OPTIONS[priorityValue];

              if (priorityOption) {
                try {
                  await github.graphql(`
                    mutation {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: "${projectId}"
                        itemId: "${itemId}"
                        fieldId: "${FIELDS.priority}"
                        value: { singleSelectOptionId: "${priorityOption}" }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `);
                  console.log('‚úì Set Priority to', priorityValue);
                } catch (error) {
                  console.log('Warning: Could not set Priority:', error.message);
                }
              }
            }
