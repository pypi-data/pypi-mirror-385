
[project]
name = "automagik-spark"
version = "0.3.8rc8"
description = "AutoMagik Spark - Automagion Engine with LangFlow integration"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Felipe Rosa", email = "felipe@namastex.ai"},
    {name = "Cezar Vasconcelos", email = "cezar@namastex.ai"}
]
license = "MIT"
keywords = ["automation", "workflow", "langflow", "ai", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration"
]

dependencies = [
    "click",
    "alembic",
    "sqlalchemy",
    "psycopg2-binary",
    "redis",
    "aiohttp",
    "pydantic",
    "python-dotenv",
    "pytz",
    "croniter",
    "httpx",
    "tabulate",
    "setuptools",
    "asyncpg>=0.30.0",
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "psutil",
    "rich",
    "cryptography>=44.0.0",
    "pytest>=8.3.4",
    "aiosqlite>=0.20.0",
    "pytest-asyncio>=0.25.3",
    "pytest-mock>=3.14.0",
    "celery>=5.4.0",
    "tenacity>=9.0.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/namastexlabs/automagik-spark/issues"
"Documentation" = "https://github.com/namastexlabs/automagik-spark/tree/main/docs"
"Homepage" = "https://github.com/namastexlabs/automagik-spark"
"Repository" = "https://github.com/namastexlabs/automagik-spark"

[project.scripts]
automagik-spark = "automagik_spark.cli.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["automagik_spark"]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=6.0.0",
    "aiosqlite>=0.19.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W"]
ignore = [
    "E402",  # Module level import not at top of file (required for dotenv)
    "E501",  # Line too long (handled by formatter)
    "E722",  # Bare except (intentional fallback patterns)
]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = false
# SQLAlchemy plugin for better ORM type support
plugins = ["sqlalchemy.ext.mypy.plugin"]
# Disable checks that conflict with SQLAlchemy ORM patterns
disable_error_code = ["assignment", "method-assign"]
# Allow untyped calls to handle dynamic ORM operations
allow_untyped_calls = true
# Allow incomplete defs for ORM models
allow_incomplete_defs = true

# SQLAlchemy ORM models - be lenient with Column assignments and relationships
[[tool.mypy.overrides]]
module = ["automagik_spark.core.database.models"]
disable_error_code = ["assignment", "attr-defined", "var-annotated", "misc"]
allow_untyped_defs = true
allow_incomplete_defs = true

# Workflow modules - heavy ORM usage with dynamic queries
[[tool.mypy.overrides]]
module = [
    "automagik_spark.core.workflows.*",
    "automagik_spark.core.scheduler.*"
]
disable_error_code = ["assignment", "attr-defined", "call-arg", "arg-type"]
allow_untyped_calls = true
allow_incomplete_defs = true

# Third-party libraries without type stubs
[[tool.mypy.overrides]]
module = ["celery.*", "kombu.*", "croniter.*", "dateutil.*", "sqlalchemy.*", "alembic.*"]
ignore_missing_imports = true
allow_untyped_defs = true

# Database session management - async patterns
[[tool.mypy.overrides]]
module = ["automagik_spark.core.database.session", "automagik_spark.core.database.base"]
disable_error_code = ["assignment", "return-value"]
allow_untyped_calls = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--asyncio-mode=auto --cov=automagik_spark --cov-report=term-missing"
markers = [
    "asyncio: mark a test as an asyncio coroutine",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_default_fixture_loop_scope = "function"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.16.1",
    "ruff>=0.12.1",
    "twine>=6.1.0",
]

