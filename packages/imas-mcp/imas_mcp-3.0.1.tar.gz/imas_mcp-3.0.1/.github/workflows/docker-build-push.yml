name: Build and Push Container

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GHCR_REGISTRY: ghcr.io
  ACR_REGISTRY: crcommonallfrc.azurecr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        transport:
          - streamable-http
          - stdio
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      actions: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for dynamic versioning
          # Ensure all refs are available
          ref: ${{ github.ref }}

      - name: Verify git state for versioning
        run: |
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Git describe: $(git describe --tags --always --dirty)"
          echo "Git status:"
          git status --porcelain

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          logout: false

      - name: Log in to Azure Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          logout: false

      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}-${{ matrix.transport }}
            type=semver,pattern={{major}}.{{minor}}-${{ matrix.transport }}
            type=semver,pattern={{major}}-${{ matrix.transport }}
            type=raw,value=latest-${{ matrix.transport }}
          flavor: |
            latest=auto

      - name: Extract metadata for ACR
        id: meta-acr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}-${{ matrix.transport }}
            type=semver,pattern={{major}}.{{minor}}-${{ matrix.transport }}
            type=semver,pattern={{major}}-${{ matrix.transport }}
            type=raw,value=latest-${{ matrix.transport }}
            type=raw,value=prod-${{ matrix.transport }}
          flavor: |
            latest=auto

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta-ghcr.outputs.tags }}
            ${{ steps.meta-acr.outputs.tags }}
          labels: |
            ${{ steps.meta-ghcr.outputs.labels }}
            ${{ steps.meta-acr.outputs.labels }}
          build-args: |
            IDS_FILTER=
            TRANSPORT=${{ matrix.transport }}
            IMAS_DD_VERSION=4.0.0
            GIT_SHA=${{ github.sha }}
            GIT_TAG=${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '' }}
            GIT_REF=${{ github.ref }}
          cache-from: type=gha,scope=build-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=build-${{ github.ref_name }}

      - name: Verify version inside image (tag builds)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -euo pipefail
          EXPECTED=${GITHUB_REF_NAME#v}
          # Pick one tag to test (first GHCR tag)
          IMAGE=$(echo "${{ steps.meta-ghcr.outputs.tags }}" | head -n1)
          echo "Testing image: $IMAGE expecting version: $EXPECTED"
          docker pull "$IMAGE"
          # Ask the CLI for its raw version (CLI prints only version string)
          ACTUAL=$(docker run --rm "$IMAGE" --version || true)
          echo "Version reported by image: $ACTUAL"
          if [ -z "$ACTUAL" ]; then
            echo "ERROR: No version output from CLI" >&2
            exit 1
          fi
          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "ERROR: Expected $EXPECTED got $ACTUAL" >&2
            exit 1
          fi
          echo "Version check passed"

      - name: Generate artifact attestation for GHCR
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
