name: Autorelease

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:
    branches:
    - main
  workflow_dispatch:
    inputs:
      new_version:
        description: 'New tag version'
        default: 'patch'
  schedule:
    - cron: '0 2 * * 6' # saturday 2am

jobs:
  autorelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v5

    - name: Setup git config
      run: |
        git config user.name actions-bot
        git config user.email actions-bot@users.noreply.github.com

    - name: Setup mise
      uses: jdx/mise-action@v2
      with:
        experimental: true

    - name: Install tools and dependencies
      run: |
        mise install
        uv sync

    - name: Run linter
      run: mise run lint

    - name: Run tests
      run: mise run test

    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: ./coverage.xml
    #     fail_ci_if_error: false

    - name: Make release if everything looks right
      if: github.event_name != 'pull_request'
      env:
        NEW_VERSION: ${{ github.event.inputs.new_version }}
      run: |
        if [[ ! -z "$NEW_VERSION" ]]; then
          NO_TAG=1 ./make_release "$NEW_VERSION"
          echo "New version: $(cat pytorrentsearch/VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "RELEASE_VERSION=$(cat pytorrentsearch/VERSION)" >> $GITHUB_ENV
        fi

    - name: Create release
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.RELEASE_VERSION }}
          TITLE: Release ${{ env.RELEASE_VERSION }}
      run: |
        gh release create "$TAG" \
          --title "$TITLE" \
          --generate-notes \
          --notes-start-tag $(gh release list --limit 1 --json tagName -q .[].tagName)

    - name: Build package
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      run: mise run build

    - name: Publish to PyPI
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv tool install twine
        uv tool run twine upload dist/*
