# coding: utf-8

"""
    Vector Similarity Demo

    The test functionality and Query testing  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@hyper-space.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Script(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'lang': 'str',
        'params': 'dict(str, object)'
    }

    attribute_map = {
        'source': 'source',
        'lang': 'lang',
        'params': 'params'
    }

    def __init__(self, source=None, lang=None, params=None):  # noqa: E501
        """Script - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._lang = None
        self._params = None
        self.discriminator = None
        self.source = source
        if lang is not None:
            self.lang = lang
        if params is not None:
            self.params = params

    @property
    def source(self):
        """Gets the source of this Script.  # noqa: E501

        A string with the contents of the script.  # noqa: E501

        :return: The source of this Script.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Script.

        A string with the contents of the script.  # noqa: E501

        :param source: The source of this Script.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def lang(self):
        """Gets the lang of this Script.  # noqa: E501

        Scripting language.  # noqa: E501

        :return: The lang of this Script.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Script.

        Scripting language.  # noqa: E501

        :param lang: The lang of this Script.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def params(self):
        """Gets the params of this Script.  # noqa: E501

        Parameters passed to the script.  # noqa: E501

        :return: The params of this Script.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Script.

        Parameters passed to the script.  # noqa: E501

        :param params: The params of this Script.  # noqa: E501
        :type: dict(str, object)
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Script, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Script):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
