# This is a configuration file for the bacon tool
#
# Bacon repository: https://github.com/Canop/bacon
# Complete help on configuration: https://dystroy.org/bacon/config/
# You can also check bacon's own bacon.toml file
#  as an example: https://github.com/Canop/bacon/blob/main/bacon.toml

default_job = "check"

[jobs.check]
command = ["cargo", "check", "--color", "always", "--features", "all", ]
need_stdout = false

[jobs.check-all]
command = ["cargo", "check", "--all-targets", "--color", "always", "--features", "all", ]
need_stdout = false

[jobs.check-all-nofeatures]
command = ["cargo", "check", "--all-targets", "--color", "always" ]
need_stdout = false

[jobs.check-nds]
command = ["cargo", "check", "--all-targets", "--color", "always", "--features", "nds"]
need_stdout = false


[jobs.check-all-python-pipe]
command = ["cargo", "check", "--all-targets", "--color", "always", "--features", "python-pipe"]
need_stdout = false

[jobs.check-all-python]
command = ["cargo", "check", "--all-targets", "--color", "always", "--features", "python"]
need_stdout = false



# Run clippy on the default target
[jobs.clippy]
command = [
    "cargo", "clippy",
    "--color", "always",
]
need_stdout = false

# Run clippy on all targets
# To disable some lints, you may change the job this way:
#    [jobs.clippy-all]
#    command = [
#        "cargo", "clippy",
#        "--all-targets",
#        "--color", "always",
#    	 "--",
#    	 "-A", "clippy::bool_to_int_with_if",
#    	 "-A", "clippy::collapsible_if",
#    	 "-A", "clippy::derive_partial_eq_without_eq",
#    ]
# need_stdout = false
[jobs.clippy-all]
command = [
    "cargo", "clippy",
    "--all-targets",
    "--color", "always",
]
need_stdout = false

# This job lets you run
# - all tests: bacon test
# - a specific test: bacon test -- config::test_default_files
# - the tests of a package: bacon test -- -- -p config
[jobs.test]
command = [
    "cargo", "test", "--color", "always",
    "--", "--color", "always", # see https://github.com/Canop/bacon/issues/124
]
need_stdout = true

[jobs.test-nds]
command = [
    "cargo", "test", "--color", "always", "--features", "nds",
    "--", "--color", "always", # see https://github.com/Canop/bacon/issues/124
]
need_stdout = true

[jobs.nextest]
command = ["cargo", "nextest", "run", "--color", "always", "--hide-progress-bar", "--failure-output", "final"]
need_stdout = true
analyzer = "nextest"

[jobs.doc]
command = ["cargo", "doc", "--color", "always", "--no-deps"]
need_stdout = false

# If the doc compiles, then it opens in your browser and bacon switches
# to the previous job
[jobs.doc-open]
command = ["cargo", "doc", "--color", "always", "--no-deps", "--open"]
need_stdout = false
on_success = "back" # so that we don't open the browser at each change

# You can run your application and have the result displayed in bacon,
# *if* it makes sense for this crate.
# Don't forget the `--color always` part or the errors won't be
# properly parsed.
# If your program never stops (eg a server), you may set `background`
# to false to have the cargo run output immediately displayed instead
# of waiting for program's end. If you prefer to have it restarted at
# every change, then uncomment the 'on_change_strategy' line.
[jobs.run]
command = [
    "cargo", "run",
    "--color", "always",
    # put launch parameters for your program behind a `--` separator
]
need_stdout = true
allow_warnings = true
background = true
#on_change_strategy = "kill_then_restart"

# This parameterized job runs the example of your choice, as soon
# as the code compiles.
# Call it as
#    bacon ex -- my-example
[jobs.ex]
command = ["cargo", "run", "--color", "always", "--example"]
need_stdout = true
allow_warnings = true

[jobs.maturin]
command = ["uv run maturin develop --uv --all-features --target-dir target_maturin && touch test_dtt.py"]
need_stdout = true
allow_warnings = true
watch = []

[jobs.pytest]
command = ["python", "-m", "pytest", "-vv"]
need_stdout = true
allow_warnings = true
watch = ["test_dtt.py"]

[jobs.pytest_specific]
command = ["python", "-m", "pytest", "-vv", "-k", "past"]
need_stdout = true
allow_warnings = true
watch = ["test_dtt.py"]

[jobs.ndstest]
command = ["cargo", "run", "-p", "nds_test", "--color", "always"]
need_stdout = true
allow_warnings = true
on_change_strategy = "kill_then_restart"

# You may define here keybindings that would be specific to
# a project, for example a shortcut to launch a specific job.
# Shortcuts to internal functions (scrolling, toggling, etc.)
# should go in your personal global prefs.toml file instead.
[keybindings]
# alt-m = "job:my-job"
c = "job:clippy-all" # comment this to have 'c' run clippy on only the default target
m = "job:maturin"
p = "job:pytest"
n = "job:test-nds"
s = "job:pytest_specific"
1 = "job:check-all-nofeatures"
2 = "job:check-nds"
3 = "job:check-all-python-pipe"
4 = "job:check-all-python"
5 = "job:check-all"
