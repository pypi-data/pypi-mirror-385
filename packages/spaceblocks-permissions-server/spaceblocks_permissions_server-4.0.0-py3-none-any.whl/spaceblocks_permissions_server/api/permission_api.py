# coding: utf-8

"""
    SpaceBlocks.Permissions.WebServices.Main.Api Management

    This is the management API.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Dict, List, Optional
from typing_extensions import Annotated

from spaceblocks_permissions_server.api_client import ApiClient, RequestSerialized
from spaceblocks_permissions_server.api_response import ApiResponse
from spaceblocks_permissions_server.rest import RESTResponseType


class PermissionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def check_permissions(
        self,
        tenant_id: Annotated[Optional[StrictStr], Field(description="The ID of the tenant")] = None,
        resource_type_id: Annotated[Optional[StrictStr], Field(description="The resource type ID")] = None,
        resource_id: Annotated[Optional[StrictStr], Field(description="The ID of the resource to check permissions on")] = None,
        subject_id: Annotated[Optional[StrictStr], Field(description="The ID of the subject to check permissions for")] = None,
        permission_scope: Annotated[Optional[StrictStr], Field(description="The ID of the resource type on which the permission to check is defined")] = None,
        permission: Annotated[Optional[List[StrictStr]], Field(description="The permission slug to check (can occur multiple times)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bool:
        """Check if the subject has the requested sub-level permissions on the requested resource.


        :param tenant_id: The ID of the tenant
        :type tenant_id: str
        :param resource_type_id: The resource type ID
        :type resource_type_id: str
        :param resource_id: The ID of the resource to check permissions on
        :type resource_id: str
        :param subject_id: The ID of the subject to check permissions for
        :type subject_id: str
        :param permission_scope: The ID of the resource type on which the permission to check is defined
        :type permission_scope: str
        :param permission: The permission slug to check (can occur multiple times)
        :type permission: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._check_permissions_serialize(
            tenant_id=tenant_id,
            resource_type_id=resource_type_id,
            resource_id=resource_id,
            subject_id=subject_id,
            permission_scope=permission_scope,
            permission=permission,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ProblemDetails",
            '200': "bool",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def check_permissions_with_http_info(
        self,
        tenant_id: Annotated[Optional[StrictStr], Field(description="The ID of the tenant")] = None,
        resource_type_id: Annotated[Optional[StrictStr], Field(description="The resource type ID")] = None,
        resource_id: Annotated[Optional[StrictStr], Field(description="The ID of the resource to check permissions on")] = None,
        subject_id: Annotated[Optional[StrictStr], Field(description="The ID of the subject to check permissions for")] = None,
        permission_scope: Annotated[Optional[StrictStr], Field(description="The ID of the resource type on which the permission to check is defined")] = None,
        permission: Annotated[Optional[List[StrictStr]], Field(description="The permission slug to check (can occur multiple times)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bool]:
        """Check if the subject has the requested sub-level permissions on the requested resource.


        :param tenant_id: The ID of the tenant
        :type tenant_id: str
        :param resource_type_id: The resource type ID
        :type resource_type_id: str
        :param resource_id: The ID of the resource to check permissions on
        :type resource_id: str
        :param subject_id: The ID of the subject to check permissions for
        :type subject_id: str
        :param permission_scope: The ID of the resource type on which the permission to check is defined
        :type permission_scope: str
        :param permission: The permission slug to check (can occur multiple times)
        :type permission: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._check_permissions_serialize(
            tenant_id=tenant_id,
            resource_type_id=resource_type_id,
            resource_id=resource_id,
            subject_id=subject_id,
            permission_scope=permission_scope,
            permission=permission,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ProblemDetails",
            '200': "bool",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def check_permissions_without_preload_content(
        self,
        tenant_id: Annotated[Optional[StrictStr], Field(description="The ID of the tenant")] = None,
        resource_type_id: Annotated[Optional[StrictStr], Field(description="The resource type ID")] = None,
        resource_id: Annotated[Optional[StrictStr], Field(description="The ID of the resource to check permissions on")] = None,
        subject_id: Annotated[Optional[StrictStr], Field(description="The ID of the subject to check permissions for")] = None,
        permission_scope: Annotated[Optional[StrictStr], Field(description="The ID of the resource type on which the permission to check is defined")] = None,
        permission: Annotated[Optional[List[StrictStr]], Field(description="The permission slug to check (can occur multiple times)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Check if the subject has the requested sub-level permissions on the requested resource.


        :param tenant_id: The ID of the tenant
        :type tenant_id: str
        :param resource_type_id: The resource type ID
        :type resource_type_id: str
        :param resource_id: The ID of the resource to check permissions on
        :type resource_id: str
        :param subject_id: The ID of the subject to check permissions for
        :type subject_id: str
        :param permission_scope: The ID of the resource type on which the permission to check is defined
        :type permission_scope: str
        :param permission: The permission slug to check (can occur multiple times)
        :type permission: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._check_permissions_serialize(
            tenant_id=tenant_id,
            resource_type_id=resource_type_id,
            resource_id=resource_id,
            subject_id=subject_id,
            permission_scope=permission_scope,
            permission=permission,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ProblemDetails",
            '200': "bool",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _check_permissions_serialize(
        self,
        tenant_id,
        resource_type_id,
        resource_id,
        subject_id,
        permission_scope,
        permission,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'permission': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if resource_type_id is not None:
            
            _query_params.append(('resourceTypeId', resource_type_id))
            
        if resource_id is not None:
            
            _query_params.append(('resourceId', resource_id))
            
        if subject_id is not None:
            
            _query_params.append(('subjectId', subject_id))
            
        if permission_scope is not None:
            
            _query_params.append(('permissionScope', permission_scope))
            
        if permission is not None:
            
            _query_params.append(('permission', permission))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/management/permissions/check',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_permissions(
        self,
        tenant_id: Annotated[Optional[StrictStr], Field(description="The ID of the tenant")] = None,
        resource_type_id: Annotated[Optional[StrictStr], Field(description="The resource type ID")] = None,
        resource_id: Annotated[Optional[StrictStr], Field(description="The ID of the resource to check permissions on")] = None,
        subject_id: Annotated[Optional[StrictStr], Field(description="The ID of the subject to check permissions for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, List[str]]:
        """Get the permissions of the subject on the requested resource.


        :param tenant_id: The ID of the tenant
        :type tenant_id: str
        :param resource_type_id: The resource type ID
        :type resource_type_id: str
        :param resource_id: The ID of the resource to check permissions on
        :type resource_id: str
        :param subject_id: The ID of the subject to check permissions for
        :type subject_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_permissions_serialize(
            tenant_id=tenant_id,
            resource_type_id=resource_type_id,
            resource_id=resource_id,
            subject_id=subject_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ProblemDetails",
            '200': "Dict[str, List[str]]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_permissions_with_http_info(
        self,
        tenant_id: Annotated[Optional[StrictStr], Field(description="The ID of the tenant")] = None,
        resource_type_id: Annotated[Optional[StrictStr], Field(description="The resource type ID")] = None,
        resource_id: Annotated[Optional[StrictStr], Field(description="The ID of the resource to check permissions on")] = None,
        subject_id: Annotated[Optional[StrictStr], Field(description="The ID of the subject to check permissions for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, List[str]]]:
        """Get the permissions of the subject on the requested resource.


        :param tenant_id: The ID of the tenant
        :type tenant_id: str
        :param resource_type_id: The resource type ID
        :type resource_type_id: str
        :param resource_id: The ID of the resource to check permissions on
        :type resource_id: str
        :param subject_id: The ID of the subject to check permissions for
        :type subject_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_permissions_serialize(
            tenant_id=tenant_id,
            resource_type_id=resource_type_id,
            resource_id=resource_id,
            subject_id=subject_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ProblemDetails",
            '200': "Dict[str, List[str]]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_permissions_without_preload_content(
        self,
        tenant_id: Annotated[Optional[StrictStr], Field(description="The ID of the tenant")] = None,
        resource_type_id: Annotated[Optional[StrictStr], Field(description="The resource type ID")] = None,
        resource_id: Annotated[Optional[StrictStr], Field(description="The ID of the resource to check permissions on")] = None,
        subject_id: Annotated[Optional[StrictStr], Field(description="The ID of the subject to check permissions for")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the permissions of the subject on the requested resource.


        :param tenant_id: The ID of the tenant
        :type tenant_id: str
        :param resource_type_id: The resource type ID
        :type resource_type_id: str
        :param resource_id: The ID of the resource to check permissions on
        :type resource_id: str
        :param subject_id: The ID of the subject to check permissions for
        :type subject_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_permissions_serialize(
            tenant_id=tenant_id,
            resource_type_id=resource_type_id,
            resource_id=resource_id,
            subject_id=subject_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ProblemDetails",
            '200': "Dict[str, List[str]]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_permissions_serialize(
        self,
        tenant_id,
        resource_type_id,
        resource_id,
        subject_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if resource_type_id is not None:
            
            _query_params.append(('resourceTypeId', resource_type_id))
            
        if resource_id is not None:
            
            _query_params.append(('resourceId', resource_id))
            
        if subject_id is not None:
            
            _query_params.append(('subjectId', subject_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/management/permissions/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


