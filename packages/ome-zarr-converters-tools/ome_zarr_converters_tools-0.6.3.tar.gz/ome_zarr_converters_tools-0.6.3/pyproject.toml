# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

# read more about configuring hatch at:
# https://hatch.pypa.io/latest/config/build/
[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

# https://peps.python.org/pep-0621/
[project]
name = "ome-zarr-converters-tools"
dynamic = ["version"]
description = "Tooling to build ome-zarr HCS plate converters"
readme = "README.md"
requires-python = ">=3.11, <3.14"
license = { text = "BSD-3-Clause" }
authors = [{ name = "Lorenzo Cerrone", email = "lorenzo.cerrone@uzh.ch" }]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
# add your package dependencies here
dependencies = ["ngio>=0.4.2", "tqdm", "numpy", "zarr", "pillow"]

# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
# "extras" (e.g. for `pip install .[test]`)
[project.optional-dependencies]
# add dependencies used for testing here
test = ["pytest", "pytest-cov", "devtools"]
# add anything else you like to have in your dev environment here
dev = [
    "notebook",
    "matplotlib",
    "ipython",
    "mypy",
    "pdbpp",      # https://github.com/pdbpp/pdbpp
    "pre-commit",
    "rich",       # https://github.com/Textualize/rich
    "ruff",
]

docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-jupyter",
    "mkdocs-autorefs",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-git-committers-plugin-2",
    "markdown-exec[ansi]",
    "scikit-image",
    "matplotlib",
    "tabulate",
    "rich",
    "mike",
]


[project.urls]
homepage = "https://github.com/BioVisionCenter/ome-zarr-converters-tools"
repository = "https://github.com/BioVisionCenter/ome-zarr-converters-tools"

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# same as console_scripts entry point
# [project.scripts]
# ome-zarr-converters-tools-cli = "ome_zarr_converters_tools:main_cli"

# [project.entry-points."some.group"]
# tomatoes = "ome_zarr_converters_tools:main_tomatoes"

# https://docs.astral.sh/ruff
[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src"]

# https://docs.astral.sh/ruff/rules
[tool.ruff.lint]
pydocstyle = { convention = "google" }
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "D417", # Missing argument descriptions in Docstrings
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
]
ignore = [
    "D401", # First line should be in imperative mood (remove to opt in)
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "S"]

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = false # default is false

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

# # module specific overrides
# [[tool.mypy.overrides]]
# module = ["numpy.*",]
# ignore_errors = true

# https://docs.pytest.org/
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
# The filterwarnings option 
# caused some unexpected behavior in the tests
# so it was commented out
#filterwarnings = [
#    "error",
#    "ignore::FutureWarning",
#    "ignore::DeprecationWarning",
#]
addopts = [
    "-vv",
    "--color=yes",
    "--cov",
    "--cov-report=term-missing",
    "--cov-report=xml",
]

# https://coverage.readthedocs.io/
[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
    "pass",
]

[tool.coverage.run]
source = ["ome_zarr_converters_tools"]

# https://github.com/mgedmin/check-manifest#configuration
# add files that you want check-manifest to explicitly ignore here
# (files that are in the repo but shouldn't go in the package)
[tool.check-manifest]
ignore = [".pre-commit-config.yaml", ".ruff_cache/**/*", "tests/**/*"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64"]

[tool.pixi.pypi-dependencies]
ome-zarr-converters-tools = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev", "test"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }

[tool.pixi.feature.dev.tasks]
ruff-fix-imports = { cmd = "ruff check --select I --fix" }
ruff = { cmd = "ruff format", depends-on = ["ruff-fix-imports"] }
test = { cmd = "pytest", depends-on = ["ruff"] }
chores = { cmd = "pre-commit run --all-files", depends-on = ["test"] }
