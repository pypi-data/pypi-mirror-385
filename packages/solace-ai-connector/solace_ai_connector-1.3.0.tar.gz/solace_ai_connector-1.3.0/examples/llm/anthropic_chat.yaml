# This will create a flow like this:
#    Solace -> Anthropic -> Solace
#
# It will subscribe to `demo/question` and expect an event with the payload:
#
# The input message has the following schema:
# {
#   "query": "<question or request as text>",
#   "stream": false
# }
#
# It will then send an event back to Solace with the topic: `demo/question/response`
#
# Dependencies:
# pip install -U langchain-anthropic langchain-core~=0.3.0 langchain~=0.3.0
#
# required ENV variables:
# - ANTHROPIC_API_KEY
# - ANTHROPIC_API_ENDPOINT
# - MODEL_NAME
# - SOLACE_BROKER_URL
# - SOLACE_BROKER_USERNAME
# - SOLACE_BROKER_PASSWORD
# - SOLACE_BROKER_VPN

---
log:
  stdout_log_level: INFO
  log_file_level: DEBUG
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      broker_type: solace
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}

# Take from Slack and publish to Solace
flows:
  # Slack chat input processing
  - name: Simple template to LLM
    components:
      # Input from a Solace broker
      - component_name: solace_sw_broker
        component_module: broker_input
        component_config:
          <<: *broker_connection
          broker_queue_name: demo_question
          broker_subscriptions:
            - topic: demo/question
              qos: 1
          payload_encoding: utf-8
          payload_format: json

      #
      # Do an LLM request
      #
      - component_name: llm_request
        component_module: langchain_chat_model
        component_config:
          langchain_module: langchain_anthropic
          langchain_class: ChatAnthropic
          langchain_component_config:
            api_key: ${ANTHROPIC_API_KEY}
            base_url: ${ANTHROPIC_API_ENDPOINT}
            model: ${MODEL_NAME}
            temperature: 0.01
          llm_mode: stream
          stream_to_flow: stream_output
        input_transforms:
          - type: copy
            source_expression: |
              template:You are a helpful AI assistant. Please help with the user's request below:
              <user-question>
              {{text://input.payload:query}}
              </user-question>
            dest_expression: user_data.llm_input:messages.0.content
          - type: copy
            source_expression: static:user
            dest_expression: user_data.llm_input:messages.0.role
          - type: copy
            source_expression: input.payload:stream
            dest_expression: user_data.llm_input:stream
        input_selection:
          source_expression: user_data.llm_input

      # Send response back to broker
      - component_name: send_response
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
        input_transforms:
          - type: copy
            source_expression: previous
            dest_expression: user_data.output:payload
          - type: copy
            source_expression: template:{{text://input.topic}}/response
            dest_expression: user_data.output:topic
        input_selection:
          source_expression: user_data.output

  - name: stream_output
    components:
      # Send response back to broker
      - component_name: send_response
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
        input_transforms:
          - type: copy
            source_expression: input.payload
            dest_expression: user_data.output:payload
          - type: copy
            source_value: demo/question/stream
            dest_expression: user_data.output:topic
        input_selection:
          source_expression: user_data.output
