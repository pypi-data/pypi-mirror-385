[project]
name = "fenix-mcp"
dynamic = ["version"]
description = "FÃªnix Cloud MCP server implemented in Python"
authors = [{ name = "Fenix Inc" }]
requires-python = ">=3.10"
readme = "README.md"
dependencies = [
  "pydantic>=2.5",
  "requests>=2.31",
  "urllib3>=2.0",
  "aiohttp>=3.9",
  "pydantic-settings>=2.0",
]

[project.scripts]
"fenix-mcp" = "fenix_mcp.main:run"

[project.optional-dependencies]
dev = [
  "pytest>=7.4",
  "pytest-asyncio>=0.23",
  "pytest-cov>=4.0",
  "black>=23.0",
  "flake8>=6.0",
  "mypy>=1.0",
  "twine>=4.0",
]

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {attr = "fenix_mcp.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["fenix_mcp*"]
exclude = ["node_modules*", "tests*", "dist", "build"]

[tool.pytest.ini_options]
testpaths = ["tests"]


[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["fenix_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
