[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools-git-versioning<2"]
build-backend = "setuptools.build_meta"

[project]
name = "zigpy"
dynamic = ["version"]
description = "Library implementing a Zigbee stack"
urls = {repository = "https://github.com/zigpy/zigpy"}
authors = [
    {name = "Russell Cloran", email = "rcloran@gmail.com"}
]
readme = "README.md"
license = {text = "GPL-3.0"}
requires-python = ">=3.11"
dependencies = [
    "attrs",
    "aiohttp",
    "aiosqlite>=0.20.0",
    "crccheck",
    "cryptography",
    "voluptuous",
    "jsonschema",
    'pyserial-asyncio; platform_system!="Windows"',
    'pyserial-asyncio!=0.5; platform_system=="Windows"',
    "typing_extensions",
    "frozendict",
]

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*"]

[tool.setuptools.package-data]
"*" = ["appdb_schemas/schema_v*.sql"]

[project.optional-dependencies]
testing = [
    "tomli",
    "asynctest",
    "coveralls",
    "coverage[toml]",
    "pytest",
    "pytest-asyncio<1.0.0",
    "pytest-cov",
    "pytest-timeout",
    "freezegun",
    'pysqlite3-binary; platform_system=="Linux" and python_version<"3.12"',
]

[tool.setuptools-git-versioning]
enabled = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
required-version = ">=0.5.0"
target-version = "py311"
line-length = 88

exclude = [
    ".venv",
    ".git",
    ".tox",
    "docs",
    "venv",
    "bin",
    "lib",
    "deps",
    "build",
]

[tool.ruff.lint]
select = [
    "A001", # Variable {name} is shadowing a Python builtin
    "ASYNC210", # Async functions should not call blocking HTTP methods
    "ASYNC220", # Async functions should not create subprocesses with blocking methods
    "ASYNC221", # Async functions should not run processes with blocking methods
    "ASYNC222", # Async functions should not wait on processes with blocking methods
    "ASYNC230", # Async functions should not open files with blocking methods like open
    "ASYNC251", # Async functions should not call time.sleep
    "B002", # Python does not support the unary prefix increment
    "B005", # Using .strip() with multi-character strings is misleading
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "B015", # Pointless comparison. Did you mean to assign a value? Otherwise, prepend assert or remove it.
    "B017", # pytest.raises(BaseException) should be considered evil
    "B018", # Found useless attribute access. Either assign it to a variable or remove it.
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B032", # Possible unintentional type annotation (using :). Did you mean to assign (using =)?
    "B904", # Use raise from to specify exception cause
    "B905", # zip() without an explicit strict= parameter
    "BLE",
    "C", # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "D", # docstrings
    "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E", # pycodestyle
    "F", # pyflakes/autoflake
    "FLY", # flynt
    "FURB", # refurb
    "G", # flake8-logging-format
    "I", # isort
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "ICN001", # import concentions; {name} should be imported as {asname}
    "LOG", # flake8-logging
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF010", # Use explicit conversion flag
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF017", # Avoid quadratic list summation
    "RUF018", # Avoid assignment expressions in assert statements
    "RUF019", # Unnecessary key check before dictionary access
    # "RUF100", # Unused `noqa` directive; temporarily every now and then to clean them up
    "S102", # Use of exec detected
    "S103", # bad-file-permissions
    "S108", # hardcoded-temp-file
    "S306", # suspicious-mktemp-usage
    "S307", # suspicious-eval-usage
    "S313", # suspicious-xmlc-element-tree-usage
    "S314", # suspicious-xml-element-tree-usage
    "S315", # suspicious-xml-expat-reader-usage
    "S316", # suspicious-xml-expat-builder-usage
    "S317", # suspicious-xml-sax-usage
    "S318", # suspicious-xml-mini-dom-usage
    "S319", # suspicious-xml-pull-dom-usage
    "S320", # suspicious-xmle-tree-usage
    "S601", # paramiko-call
    "S602", # subprocess-popen-with-shell-equals-true
    "S604", # call-with-shell-equals-true
    "S608", # hardcoded-sql-expression
    "S609", # unix-command-wildcard-injection
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "T100", # Trace found: {name} used
    "T20", # flake8-print
    "TID251", # Banned imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle
]

ignore = [
    # TODO: these are reasonable and should be fixed!
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "SLF001", # Private member access
    "D106", # Undocumented public nested class
    "D401", # Non-imperative mood
    "D400", # Ends in period
    "D415",
    "D405",
    "D100",
    "D107",
    "D105",
    "B007",
    "D104",
    "D205",

    # Personal preference
    "SIM117",
    "S608", # We have few SQL queries and they're all safe
    "RET505",
    "RET506",
    "RET507",
    "C901",
    "PERF203",

    "D203",
    "D213",

    # From Home Assistant
    "D202", # No blank lines allowed after function docstring
    "E501", # line too long

    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PT004", # Fixture {fixture} does not return anything, add leading underscore
    "PT011", # pytest.raises({exception}) is too broad, set the `match` parameter or use a more specific exception
    "PT018", # Assertion should be broken down into multiple parts
    "SIM102", # Use a single if statement instead of nested if statements
    "SIM103", # Return the condition {condition} directly
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY400", # Use `logging.exception` instead of `logging.error`
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",

    # temporarily disabled
    "PYI024", # Use typing.NamedTuple instead of collections.namedtuple
    "RET503",
    "TRY002",

    "RSE102", # For consistency, `raise TypeError()` instead of `raise TypeError`
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["F811"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = [
    "zigpy",
]
combine-as-imports = true
split-on-trailing-comma = false

[tool.codespell]
ignore-words-list = ["ser", "nd", "hass", "checkin", "socio-economic", "IntStruct"]
skip = ["./.*", "tests/*", "pyproject.toml"]
quiet-level = 2

[tool.mypy]
ignore_missing_imports = true
install_types = true
non_interactive = true
show_error_codes = true
show_error_context = true
error_summary = true
disable_error_code = [
    # Only a few notifications left:
    "type-arg",
    # Only a few notifications left:
    "return-value",
    # operator breaks in CI (zigpy.types.basic), but not locally
    "operator",
    "valid-type",
    "misc",
    "attr-defined",
    "assignment",
    "arg-type"
]
# Only report on selected files
follow_imports = "silent"

[tool.coverage.run]
source = ["zigpy"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise NotImplementedError()",
]
