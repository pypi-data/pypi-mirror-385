"use strict";(self.webpackChunkray_dashboard_client=self.webpackChunkray_dashboard_client||[]).push([[278],{82388:(t,c,o)=>{function e(t,c){var o,e,r;t.accDescr&&(null===(o=c.setAccDescription)||void 0===o||o.call(c,t.accDescr));t.accTitle&&(null===(e=c.setAccTitle)||void 0===e||e.call(c,t.accTitle));t.title&&(null===(r=c.setDiagramTitle)||void 0===r||r.call(c,t.title))}o.d(c,{A:()=>e}),(0,o(92408).eW)(e,"populateCommonDb")},80899:(t,c,o)=>{o.d(c,{A:()=>n});var e,r=o(92408),n=(e=class{constructor(t){this.init=t,this.records=this.init()}reset(){this.records=this.init()}},(0,r.eW)(e,"ImperativeState"),e)},80782:(t,c,o)=>{o.r(c),o.d(c,{diagram:()=>xt});var e=o(82388),r=o(80899),n=o(80170),a=o(92408),i=o(51529),s=o(58111),d={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},l=a.vZ.gitGraph,h=(0,a.eW)((()=>(0,n.Rb)({...l,...(0,a.iE)().gitGraph})),"getConfig"),m=new r.A((()=>{const t=h(),c=t.mainBranchName,o=t.mainBranchOrder;return{mainBranchName:c,commits:new Map,head:null,branchConfig:new Map([[c,{name:c,order:o}]]),branches:new Map([[c,null]]),currBranch:c,direction:"LR",seq:0,options:{}}}));function y(){return(0,n.MX)({length:7})}function g(t,c){const o=Object.create(null);return t.reduce(((t,e)=>{const r=c(e);return o[r]||(o[r]=!0,t.push(e)),t}),[])}(0,a.eW)(y,"getID"),(0,a.eW)(g,"uniqBy");var u=(0,a.eW)((function(t){m.records.direction=t}),"setDirection"),p=(0,a.eW)((function(t){var c;a.cM.debug("options str",t),t=(t=null===(c=t)||void 0===c?void 0:c.trim())||"{}";try{m.records.options=JSON.parse(t)}catch(o){a.cM.error("error while parsing gitGraph options",o.message)}}),"setOptions"),f=(0,a.eW)((function(){return m.records.options}),"getOptions"),x=(0,a.eW)((function(t){var c,o;let e=t.msg,r=t.id;const n=t.type;let i=t.tags;a.cM.info("commit",e,r,n,i),a.cM.debug("Entering commit:",e,r,n,i);const s=h();r=a.SY.sanitizeText(r,s),e=a.SY.sanitizeText(e,s),i=null===(c=i)||void 0===c?void 0:c.map((t=>a.SY.sanitizeText(t,s)));const l={id:r||m.records.seq+"-"+y(),message:e,seq:m.records.seq++,type:null!==n&&void 0!==n?n:d.NORMAL,tags:null!==(o=i)&&void 0!==o?o:[],parents:null==m.records.head?[]:[m.records.head.id],branch:m.records.currBranch};m.records.head=l,a.cM.info("main branch",s.mainBranchName),m.records.commits.has(l.id)&&a.cM.warn("Commit ID ".concat(l.id," already exists")),m.records.commits.set(l.id,l),m.records.branches.set(m.records.currBranch,l.id),a.cM.debug("in pushCommit "+l.id)}),"commit"),v=(0,a.eW)((function(t){let c=t.name;const o=t.order;if(c=a.SY.sanitizeText(c,h()),m.records.branches.has(c))throw new Error('Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout '.concat(c,'")'));m.records.branches.set(c,null!=m.records.head?m.records.head.id:null),m.records.branchConfig.set(c,{name:c,order:o}),B(c),a.cM.debug("in createBranch")}),"branch"),b=(0,a.eW)((t=>{let c=t.branch,o=t.id;const e=t.type,r=t.tags,n=h();c=a.SY.sanitizeText(c,n),o&&(o=a.SY.sanitizeText(o,n));const i=m.records.branches.get(m.records.currBranch),s=m.records.branches.get(c),l=i?m.records.commits.get(i):void 0,g=s?m.records.commits.get(s):void 0;if(l&&g&&l.branch===c)throw new Error("Cannot merge branch '".concat(c,"' into itself."));if(m.records.currBranch===c){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:"merge ".concat(c),token:"merge ".concat(c),expected:["branch abc"]},t}if(void 0===l||!l){const t=new Error('Incorrect usage of "merge". Current branch ('.concat(m.records.currBranch,")has no commits"));throw t.hash={text:"merge ".concat(c),token:"merge ".concat(c),expected:["commit"]},t}if(!m.records.branches.has(c)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+c+") does not exist");throw t.hash={text:"merge ".concat(c),token:"merge ".concat(c),expected:["branch ".concat(c)]},t}if(void 0===g||!g){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+c+") has no commits");throw t.hash={text:"merge ".concat(c),token:"merge ".concat(c),expected:['"commit"']},t}if(l===g){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:"merge ".concat(c),token:"merge ".concat(c),expected:["branch abc"]},t}if(o&&m.records.commits.has(o)){const t=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom id");throw t.hash={text:"merge ".concat(c," ").concat(o," ").concat(e," ").concat(null===r||void 0===r?void 0:r.join(" ")),token:"merge ".concat(c," ").concat(o," ").concat(e," ").concat(null===r||void 0===r?void 0:r.join(" ")),expected:["merge ".concat(c," ").concat(o,"_UNIQUE ").concat(e," ").concat(null===r||void 0===r?void 0:r.join(" "))]},t}const u=s||"",p={id:o||"".concat(m.records.seq,"-").concat(y()),message:"merged branch ".concat(c," into ").concat(m.records.currBranch),seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,u],branch:m.records.currBranch,type:d.MERGE,customType:e,customId:!!o,tags:null!==r&&void 0!==r?r:[]};m.records.head=p,m.records.commits.set(p.id,p),m.records.branches.set(m.records.currBranch,p.id),a.cM.debug(m.records.branches),a.cM.debug("in mergeBranch")}),"merge"),w=(0,a.eW)((function(t){var c;let o=t.id,e=t.targetId,r=t.tags,n=t.parent;a.cM.debug("Entering cherryPick:",o,e,r);const i=h();if(o=a.SY.sanitizeText(o,i),e=a.SY.sanitizeText(e,i),r=null===(c=r)||void 0===c?void 0:c.map((t=>a.SY.sanitizeText(t,i))),n=a.SY.sanitizeText(n,i),!o||!m.records.commits.has(o)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:"cherryPick ".concat(o," ").concat(e),token:"cherryPick ".concat(o," ").concat(e),expected:["cherry-pick abc"]},t}const s=m.records.commits.get(o);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(s.parents)||!s.parents.includes(n))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const l=s.branch;if(s.type===d.MERGE&&!n){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!e||!m.records.commits.has(e)){if(l===m.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:"cherryPick ".concat(o," ").concat(e),token:"cherryPick ".concat(o," ").concat(e),expected:["cherry-pick abc"]},t}const t=m.records.branches.get(m.records.currBranch);if(void 0===t||!t){const t=new Error('Incorrect usage of "cherry-pick". Current branch ('.concat(m.records.currBranch,")has no commits"));throw t.hash={text:"cherryPick ".concat(o," ").concat(e),token:"cherryPick ".concat(o," ").concat(e),expected:["cherry-pick abc"]},t}const c=m.records.commits.get(t);if(void 0===c||!c){const t=new Error('Incorrect usage of "cherry-pick". Current branch ('.concat(m.records.currBranch,")has no commits"));throw t.hash={text:"cherryPick ".concat(o," ").concat(e),token:"cherryPick ".concat(o," ").concat(e),expected:["cherry-pick abc"]},t}const i={id:m.records.seq+"-"+y(),message:"cherry-picked ".concat(null===s||void 0===s?void 0:s.message," into ").concat(m.records.currBranch),seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,s.id],branch:m.records.currBranch,type:d.CHERRY_PICK,tags:r?r.filter(Boolean):["cherry-pick:".concat(s.id).concat(s.type===d.MERGE?"|parent:".concat(n):"")]};m.records.head=i,m.records.commits.set(i.id,i),m.records.branches.set(m.records.currBranch,i.id),a.cM.debug(m.records.branches),a.cM.debug("in cherryPick")}}),"cherryPick"),B=(0,a.eW)((function(t){if(t=a.SY.sanitizeText(t,h()),!m.records.branches.has(t)){const c=new Error('Trying to checkout branch which is not yet created. (Help try using "branch '.concat(t,'")'));throw c.hash={text:"checkout ".concat(t),token:"checkout ".concat(t),expected:["branch ".concat(t)]},c}{m.records.currBranch=t;const o=m.records.branches.get(m.records.currBranch);var c;if(void 0!==o&&o)m.records.head=null!==(c=m.records.commits.get(o))&&void 0!==c?c:null;else m.records.head=null}}),"checkout");function E(t,c,o){const e=t.indexOf(c);-1===e?t.push(o):t.splice(e,1,o)}function k(t){const c=t.reduce(((t,c)=>t.seq>c.seq?t:c),t[0]);let o="";t.forEach((function(t){o+=t===c?"\t*":"\t|"}));const e=[o,c.id,c.seq];for(const r in m.records.branches)m.records.branches.get(r)===c.id&&e.push(r);if(a.cM.debug(e.join(" ")),c.parents&&2==c.parents.length&&c.parents[0]&&c.parents[1]){const o=m.records.commits.get(c.parents[0]);E(t,c,o),c.parents[1]&&t.push(m.records.commits.get(c.parents[1]))}else{if(0==c.parents.length)return;if(c.parents[0]){const o=m.records.commits.get(c.parents[0]);E(t,c,o)}}k(t=g(t,(t=>t.id)))}(0,a.eW)(E,"upsert"),(0,a.eW)(k,"prettyPrintCommitHistory");var C=(0,a.eW)((function(){a.cM.debug(m.records.commits);k([R()[0]])}),"prettyPrint"),M=(0,a.eW)((function(){m.reset(),(0,a.ZH)()}),"clear"),T=(0,a.eW)((function(){return[...m.records.branchConfig.values()].map(((t,c)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat("0.".concat(c))})).sort(((t,c)=>{var o,e;return(null!==(o=t.order)&&void 0!==o?o:0)-(null!==(e=c.order)&&void 0!==e?e:0)})).map((t=>{let{name:c}=t;return{name:c}}))}),"getBranchesAsObjArray"),L=(0,a.eW)((function(){return m.records.branches}),"getBranches"),W=(0,a.eW)((function(){return m.records.commits}),"getCommits"),R=(0,a.eW)((function(){const t=[...m.records.commits.values()];return t.forEach((function(t){a.cM.debug(t.id)})),t.sort(((t,c)=>t.seq-c.seq)),t}),"getCommitsArray"),P={commitType:d,getConfig:h,setDirection:u,setOptions:p,getOptions:f,commit:x,branch:v,merge:b,cherryPick:w,checkout:B,prettyPrint:C,clear:M,getBranchesAsObjArray:T,getBranches:L,getCommits:W,getCommitsArray:R,getCurrentBranch:(0,a.eW)((function(){return m.records.currBranch}),"getCurrentBranch"),getDirection:(0,a.eW)((function(){return m.records.direction}),"getDirection"),getHead:(0,a.eW)((function(){return m.records.head}),"getHead"),setAccTitle:a.GN,getAccTitle:a.eu,getAccDescription:a.Mx,setAccDescription:a.U$,setDiagramTitle:a.g2,getDiagramTitle:a.Kr},A=(0,a.eW)(((t,c)=>{(0,e.A)(t,c),t.dir&&c.setDirection(t.dir);for(const o of t.statements)I(o,c)}),"populate"),I=(0,a.eW)(((t,c)=>{const o={Commit:(0,a.eW)((t=>c.commit(G(t))),"Commit"),Branch:(0,a.eW)((t=>c.branch(O(t))),"Branch"),Merge:(0,a.eW)((t=>c.merge(S(t))),"Merge"),Checkout:(0,a.eW)((t=>c.checkout(q(t))),"Checkout"),CherryPicking:(0,a.eW)((t=>c.cherryPick(H(t))),"CherryPicking")}[t.$type];o?o(t):a.cM.error("Unknown statement type: ".concat(t.$type))}),"parseStatement"),G=(0,a.eW)((t=>{var c,o;return{id:t.id,msg:null!==(c=t.message)&&void 0!==c?c:"",type:void 0!==t.type?d[t.type]:d.NORMAL,tags:null!==(o=t.tags)&&void 0!==o?o:void 0}}),"parseCommit"),O=(0,a.eW)((t=>{var c;return{name:t.name,order:null!==(c=t.order)&&void 0!==c?c:0}}),"parseBranch"),S=(0,a.eW)((t=>{var c,o;return{branch:t.branch,id:null!==(c=t.id)&&void 0!==c?c:"",type:void 0!==t.type?d[t.type]:void 0,tags:null!==(o=t.tags)&&void 0!==o?o:void 0}}),"parseMerge"),q=(0,a.eW)((t=>t.branch),"parseCheckout"),H=(0,a.eW)((t=>{var c;return{id:t.id,targetId:"",tags:0===(null===(c=t.tags)||void 0===c?void 0:c.length)?void 0:t.tags,parent:t.parent}}),"parseCherryPicking"),z={parse:(0,a.eW)((async t=>{const c=await(0,i.Qc)("gitGraph",t);a.cM.debug(c),A(c,P)}),"parse")};var D=(0,a.nV)(),Y=null===D||void 0===D?void 0:D.gitGraph,N=10,_=40,j=new Map,K=new Map,F=new Map,U=[],V=0,$="LR",Q=(0,a.eW)((()=>{j.clear(),K.clear(),F.clear(),V=0,U=[],$="LR"}),"clear"),X=(0,a.eW)((t=>{const c=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"===typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const o=document.createElementNS("http://www.w3.org/2000/svg","tspan");o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),o.setAttribute("dy","1em"),o.setAttribute("x","0"),o.setAttribute("class","row"),o.textContent=t.trim(),c.appendChild(o)})),c}),"drawText"),Z=(0,a.eW)((t=>{let c,o,e;return"BT"===$?(o=(0,a.eW)(((t,c)=>t<=c),"comparisonFunc"),e=1/0):(o=(0,a.eW)(((t,c)=>t>=c),"comparisonFunc"),e=0),t.forEach((t=>{var r,n;const a="TB"===$||"BT"==$?null===(r=K.get(t))||void 0===r?void 0:r.y:null===(n=K.get(t))||void 0===n?void 0:n.x;void 0!==a&&o(a,e)&&(c=t,e=a)})),c}),"findClosestParent"),J=(0,a.eW)((t=>{let c="",o=1/0;return t.forEach((t=>{const e=K.get(t).y;e<=o&&(c=t,o=e)})),c||void 0}),"findClosestParentBT"),tt=(0,a.eW)(((t,c,o)=>{let e=o,r=o;const n=[];t.forEach((t=>{const o=c.get(t);if(!o)throw new Error("Commit not found for key ".concat(t));o.parents.length?(e=ot(o),r=Math.max(e,r)):n.push(o),et(o,e)})),e=r,n.forEach((t=>{rt(t,e,o)})),t.forEach((t=>{const o=c.get(t);if(null!==o&&void 0!==o&&o.parents.length){const t=J(o.parents);e=K.get(t).y-_,e<=r&&(r=e);const c=j.get(o.branch).pos,n=e-N;K.set(o.id,{x:c,y:n})}}))}),"setParallelBTPos"),ct=(0,a.eW)((t=>{var c;const o=Z(t.parents.filter((t=>null!==t)));if(!o)throw new Error("Closest parent not found for commit ".concat(t.id));const e=null===(c=K.get(o))||void 0===c?void 0:c.y;if(void 0===e)throw new Error("Closest parent position not found for commit ".concat(t.id));return e}),"findClosestParentPos"),ot=(0,a.eW)((t=>ct(t)+_),"calculateCommitPosition"),et=(0,a.eW)(((t,c)=>{const o=j.get(t.branch);if(!o)throw new Error("Branch not found for commit ".concat(t.id));const e=o.pos,r=c+N;return K.set(t.id,{x:e,y:r}),{x:e,y:r}}),"setCommitPosition"),rt=(0,a.eW)(((t,c,o)=>{const e=j.get(t.branch);if(!e)throw new Error("Branch not found for commit ".concat(t.id));const r=c+o,n=e.pos;K.set(t.id,{x:n,y:r})}),"setRootPosition"),nt=(0,a.eW)(((t,c,o,e,r,n)=>{if(n===d.HIGHLIGHT)t.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class","commit ".concat(c.id," commit-highlight").concat(r%8," ").concat(e,"-outer")),t.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class","commit ".concat(c.id," commit").concat(r%8," ").concat(e,"-inner"));else if(n===d.CHERRY_PICK)t.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class","commit ".concat(c.id," ").concat(e)),t.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class","commit ".concat(c.id," ").concat(e)),t.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class","commit ".concat(c.id," ").concat(e)),t.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class","commit ".concat(c.id," ").concat(e)),t.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class","commit ".concat(c.id," ").concat(e));else{const a=t.append("circle");if(a.attr("cx",o.x),a.attr("cy",o.y),a.attr("r",c.type===d.MERGE?9:10),a.attr("class","commit ".concat(c.id," commit").concat(r%8)),n===d.MERGE){const n=t.append("circle");n.attr("cx",o.x),n.attr("cy",o.y),n.attr("r",6),n.attr("class","commit ".concat(e," ").concat(c.id," commit").concat(r%8))}if(n===d.REVERSE){t.append("path").attr("d","M ".concat(o.x-5,",").concat(o.y-5,"L").concat(o.x+5,",").concat(o.y+5,"M").concat(o.x-5,",").concat(o.y+5,"L").concat(o.x+5,",").concat(o.y-5)).attr("class","commit ".concat(e," ").concat(c.id," commit").concat(r%8))}}}),"drawCommitBullet"),at=(0,a.eW)(((t,c,o,e)=>{if(c.type!==d.CHERRY_PICK&&(c.customId&&c.type===d.MERGE||c.type!==d.MERGE)&&null!==Y&&void 0!==Y&&Y.showCommitLabel){var r;const n=t.append("g"),a=n.insert("rect").attr("class","commit-label-bkg"),i=n.append("text").attr("x",e).attr("y",o.y+25).attr("class","commit-label").text(c.id),s=null===(r=i.node())||void 0===r?void 0:r.getBBox();if(s&&(a.attr("x",o.posWithOffset-s.width/2-2).attr("y",o.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===$||"BT"===$?(a.attr("x",o.x-(s.width+16+5)).attr("y",o.y-12),i.attr("x",o.x-(s.width+16)).attr("y",o.y+s.height-12)):i.attr("x",o.posWithOffset-s.width/2),Y.rotateCommitLabel))if("TB"===$||"BT"===$)i.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),a.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const t=-7.5-(s.width+10)/25*9.5,c=10+s.width/25*8.5;n.attr("transform","translate("+t+", "+c+") rotate(-45, "+e+", "+o.y+")")}}}),"drawCommitLabel"),it=(0,a.eW)(((t,c,o,e)=>{if(c.tags.length>0){let n=0,a=0,i=0;const s=[];for(const e of c.tags.reverse()){var r;const c=t.insert("polygon"),d=t.append("circle"),l=t.append("text").attr("y",o.y-16-n).attr("class","tag-label").text(e),h=null===(r=l.node())||void 0===r?void 0:r.getBBox();if(!h)throw new Error("Tag bbox not found");a=Math.max(a,h.width),i=Math.max(i,h.height),l.attr("x",o.posWithOffset-h.width/2),s.push({tag:l,hole:d,rect:c,yOffset:n}),n+=20}for(const{tag:t,hole:c,rect:r,yOffset:d}of s){const n=i/2,s=o.y-19.2-d;if(r.attr("class","tag-label-bkg").attr("points","\n      ".concat(e-a/2-2,",").concat(s+2,"  \n      ").concat(e-a/2-2,",").concat(s-2,"\n      ").concat(o.posWithOffset-a/2-4,",").concat(s-n-2,"\n      ").concat(o.posWithOffset+a/2+4,",").concat(s-n-2,"\n      ").concat(o.posWithOffset+a/2+4,",").concat(s+n+2,"\n      ").concat(o.posWithOffset-a/2-4,",").concat(s+n+2)),c.attr("cy",s).attr("cx",e-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===$||"BT"===$){const i=e+d;r.attr("class","tag-label-bkg").attr("points","\n        ".concat(o.x,",").concat(i+2,"\n        ").concat(o.x,",").concat(i-2,"\n        ").concat(o.x+N,",").concat(i-n-2,"\n        ").concat(o.x+N+a+4,",").concat(i-n-2,"\n        ").concat(o.x+N+a+4,",").concat(i+n+2,"\n        ").concat(o.x+N,",").concat(i+n+2)).attr("transform","translate(12,12) rotate(45, "+o.x+","+e+")"),c.attr("cx",o.x+2).attr("cy",i).attr("transform","translate(12,12) rotate(45, "+o.x+","+e+")"),t.attr("x",o.x+5).attr("y",i+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+e+")")}}}}),"drawCommitTags"),st=(0,a.eW)((t=>{var c;switch(null!==(c=t.customType)&&void 0!==c?c:t.type){case d.NORMAL:return"commit-normal";case d.REVERSE:return"commit-reverse";case d.HIGHLIGHT:return"commit-highlight";case d.MERGE:return"commit-merge";case d.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),dt=(0,a.eW)(((t,c,o,e)=>{const r={x:0,y:0};if(!(t.parents.length>0)){if("TB"===c)return 30;if("BT"===c){var n;return(null!==(n=e.get(t.id))&&void 0!==n?n:r).y-_}return 0}{const o=Z(t.parents);if(o){var a;const n=null!==(a=e.get(o))&&void 0!==a?a:r;if("TB"===c)return n.y+_;if("BT"===c){var i;return(null!==(i=e.get(t.id))&&void 0!==i?i:r).y-_}return n.x+_}}return 0}),"calculatePosition"),lt=(0,a.eW)(((t,c,o)=>{var e,r;const n="BT"===$&&o?c:c+N,a="TB"===$||"BT"===$?n:null===(e=j.get(t.branch))||void 0===e?void 0:e.pos,i="TB"===$||"BT"===$?null===(r=j.get(t.branch))||void 0===r?void 0:r.pos:n;if(void 0===i||void 0===a)throw new Error("Position were undefined for commit ".concat(t.id));return{x:i,y:a,posWithOffset:n}}),"getCommitPosition"),ht=(0,a.eW)(((t,c,o)=>{var e;if(!Y)throw new Error("GitGraph config not found");const r=t.append("g").attr("class","commit-bullets"),n=t.append("g").attr("class","commit-labels");let i="TB"===$||"BT"===$?30:0;const s=[...c.keys()],d=null!==(e=null===Y||void 0===Y?void 0:Y.parallelCommits)&&void 0!==e&&e,l=(0,a.eW)(((t,o)=>{var e,r;const n=null===(e=c.get(t))||void 0===e?void 0:e.seq,a=null===(r=c.get(o))||void 0===r?void 0:r.seq;return void 0!==n&&void 0!==a?n-a:0}),"sortKeys");let h=s.sort(l);"BT"===$&&(d&&tt(h,c,i),h=h.reverse()),h.forEach((t=>{const e=c.get(t);if(!e)throw new Error("Commit not found for key ".concat(t));d&&(i=dt(e,$,i,K));const a=lt(e,i,d);if(o){var s,l,h;const t=st(e),c=null!==(s=e.customType)&&void 0!==s?s:e.type,o=null!==(l=null===(h=j.get(e.branch))||void 0===h?void 0:h.index)&&void 0!==l?l:0;nt(r,e,a,t,o,c),at(n,e,a,i),it(n,e,a,i)}"TB"===$||"BT"===$?K.set(e.id,{x:a.x,y:a.posWithOffset}):K.set(e.id,{x:a.posWithOffset,y:a.y}),i="BT"===$&&d?i+_:i+_+N,i>V&&(V=i)}))}),"drawCommits"),mt=(0,a.eW)(((t,c,o,e,r)=>{const n=("TB"===$||"BT"===$?o.x<e.x:o.y<e.y)?c.branch:t.branch,i=(0,a.eW)((t=>t.branch===n),"isOnBranchToGetCurve"),s=(0,a.eW)((o=>o.seq>t.seq&&o.seq<c.seq),"isBetweenCommits");return[...r.values()].some((t=>s(t)&&i(t)))}),"shouldRerouteArrow"),yt=(0,a.eW)((function(t,c){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const e=t+Math.abs(t-c)/2;if(o>5)return e;const r=U.every((t=>Math.abs(t-e)>=10));if(r)return U.push(e),e;const n=Math.abs(t-c);return yt(t,c-n/5,o+1)}),"findLane"),gt=(0,a.eW)(((t,c,o,e)=>{var r;const n=K.get(c.id),a=K.get(o.id);if(void 0===n||void 0===a)throw new Error("Commit positions not found for commits ".concat(c.id," and ").concat(o.id));const i=mt(c,o,n,a,e);let s="",l="",h=0,m=0,y=null===(r=j.get(o.branch))||void 0===r?void 0:r.index;var g;o.type===d.MERGE&&c.id!==o.parents[0]&&(y=null===(g=j.get(c.branch))||void 0===g?void 0:g.index);let u;if(i){s="A 10 10, 0, 0, 0,",l="A 10 10, 0, 0, 1,",h=10,m=10;const t=n.y<a.y?yt(n.y,a.y):yt(a.y,n.y),o=n.x<a.x?yt(n.x,a.x):yt(a.x,n.x);var p;if("TB"===$)if(n.x<a.x)u="M ".concat(n.x," ").concat(n.y," L ").concat(o-h," ").concat(n.y," ").concat(l," ").concat(o," ").concat(n.y+m," L ").concat(o," ").concat(a.y-h," ").concat(s," ").concat(o+m," ").concat(a.y," L ").concat(a.x," ").concat(a.y);else y=null===(p=j.get(c.branch))||void 0===p?void 0:p.index,u="M ".concat(n.x," ").concat(n.y," L ").concat(o+h," ").concat(n.y," ").concat(s," ").concat(o," ").concat(n.y+m," L ").concat(o," ").concat(a.y-h," ").concat(l," ").concat(o-m," ").concat(a.y," L ").concat(a.x," ").concat(a.y);else if("BT"===$){var f;if(n.x<a.x)u="M ".concat(n.x," ").concat(n.y," L ").concat(o-h," ").concat(n.y," ").concat(s," ").concat(o," ").concat(n.y-m," L ").concat(o," ").concat(a.y+h," ").concat(l," ").concat(o+m," ").concat(a.y," L ").concat(a.x," ").concat(a.y);else y=null===(f=j.get(c.branch))||void 0===f?void 0:f.index,u="M ".concat(n.x," ").concat(n.y," L ").concat(o+h," ").concat(n.y," ").concat(l," ").concat(o," ").concat(n.y-m," L ").concat(o," ").concat(a.y+h," ").concat(s," ").concat(o-m," ").concat(a.y," L ").concat(a.x," ").concat(a.y)}else{var x;if(n.y<a.y)u="M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(t-h," ").concat(s," ").concat(n.x+m," ").concat(t," L ").concat(a.x-h," ").concat(t," ").concat(l," ").concat(a.x," ").concat(t+m," L ").concat(a.x," ").concat(a.y);else y=null===(x=j.get(c.branch))||void 0===x?void 0:x.index,u="M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(t+h," ").concat(l," ").concat(n.x+m," ").concat(t," L ").concat(a.x-h," ").concat(t," ").concat(s," ").concat(a.x," ").concat(t-m," L ").concat(a.x," ").concat(a.y)}}else s="A 20 20, 0, 0, 0,",l="A 20 20, 0, 0, 1,",h=20,m=20,"TB"===$?(n.x<a.x&&(u=o.type===d.MERGE&&c.id!==o.parents[0]?"M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(a.y-h," ").concat(s," ").concat(n.x+m," ").concat(a.y," L ").concat(a.x," ").concat(a.y):"M ".concat(n.x," ").concat(n.y," L ").concat(a.x-h," ").concat(n.y," ").concat(l," ").concat(a.x," ").concat(n.y+m," L ").concat(a.x," ").concat(a.y)),n.x>a.x&&(s="A 20 20, 0, 0, 0,",l="A 20 20, 0, 0, 1,",h=20,m=20,u=o.type===d.MERGE&&c.id!==o.parents[0]?"M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(a.y-h," ").concat(l," ").concat(n.x-m," ").concat(a.y," L ").concat(a.x," ").concat(a.y):"M ".concat(n.x," ").concat(n.y," L ").concat(a.x+h," ").concat(n.y," ").concat(s," ").concat(a.x," ").concat(n.y+m," L ").concat(a.x," ").concat(a.y)),n.x===a.x&&(u="M ".concat(n.x," ").concat(n.y," L ").concat(a.x," ").concat(a.y))):"BT"===$?(n.x<a.x&&(u=o.type===d.MERGE&&c.id!==o.parents[0]?"M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(a.y+h," ").concat(l," ").concat(n.x+m," ").concat(a.y," L ").concat(a.x," ").concat(a.y):"M ".concat(n.x," ").concat(n.y," L ").concat(a.x-h," ").concat(n.y," ").concat(s," ").concat(a.x," ").concat(n.y-m," L ").concat(a.x," ").concat(a.y)),n.x>a.x&&(s="A 20 20, 0, 0, 0,",l="A 20 20, 0, 0, 1,",h=20,m=20,u=o.type===d.MERGE&&c.id!==o.parents[0]?"M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(a.y+h," ").concat(s," ").concat(n.x-m," ").concat(a.y," L ").concat(a.x," ").concat(a.y):"M ".concat(n.x," ").concat(n.y," L ").concat(a.x-h," ").concat(n.y," ").concat(s," ").concat(a.x," ").concat(n.y-m," L ").concat(a.x," ").concat(a.y)),n.x===a.x&&(u="M ".concat(n.x," ").concat(n.y," L ").concat(a.x," ").concat(a.y))):(n.y<a.y&&(u=o.type===d.MERGE&&c.id!==o.parents[0]?"M ".concat(n.x," ").concat(n.y," L ").concat(a.x-h," ").concat(n.y," ").concat(l," ").concat(a.x," ").concat(n.y+m," L ").concat(a.x," ").concat(a.y):"M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(a.y-h," ").concat(s," ").concat(n.x+m," ").concat(a.y," L ").concat(a.x," ").concat(a.y)),n.y>a.y&&(u=o.type===d.MERGE&&c.id!==o.parents[0]?"M ".concat(n.x," ").concat(n.y," L ").concat(a.x-h," ").concat(n.y," ").concat(s," ").concat(a.x," ").concat(n.y-m," L ").concat(a.x," ").concat(a.y):"M ".concat(n.x," ").concat(n.y," L ").concat(n.x," ").concat(a.y+h," ").concat(l," ").concat(n.x+m," ").concat(a.y," L ").concat(a.x," ").concat(a.y)),n.y===a.y&&(u="M ".concat(n.x," ").concat(n.y," L ").concat(a.x," ").concat(a.y)));if(void 0===u)throw new Error("Line definition not found");t.append("path").attr("d",u).attr("class","arrow arrow"+y%8)}),"drawArrow"),ut=(0,a.eW)(((t,c)=>{const o=t.append("g").attr("class","commit-arrows");[...c.keys()].forEach((t=>{const e=c.get(t);e.parents&&e.parents.length>0&&e.parents.forEach((t=>{gt(o,c.get(t),e,c)}))}))}),"drawArrows"),pt=(0,a.eW)(((t,c)=>{const o=t.append("g");c.forEach(((t,c)=>{var e;const r=c%8,n=null===(e=j.get(t.name))||void 0===e?void 0:e.pos;if(void 0===n)throw new Error("Position not found for branch ".concat(t.name));const a=o.append("line");a.attr("x1",0),a.attr("y1",n),a.attr("x2",V),a.attr("y2",n),a.attr("class","branch branch"+r),"TB"===$?(a.attr("y1",30),a.attr("x1",n),a.attr("y2",V),a.attr("x2",n)):"BT"===$&&(a.attr("y1",V),a.attr("x1",n),a.attr("y2",30),a.attr("x2",n)),U.push(n);const i=t.name,s=X(i),d=o.insert("rect"),l=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+r);l.node().appendChild(s);const h=s.getBBox();d.attr("class","branchLabelBkg label"+r).attr("rx",4).attr("ry",4).attr("x",-h.width-4-(!0===(null===Y||void 0===Y?void 0:Y.rotateCommitLabel)?30:0)).attr("y",-h.height/2+8).attr("width",h.width+18).attr("height",h.height+4),l.attr("transform","translate("+(-h.width-14-(!0===(null===Y||void 0===Y?void 0:Y.rotateCommitLabel)?30:0))+", "+(n-h.height/2-1)+")"),"TB"===$?(d.attr("x",n-h.width/2-10).attr("y",0),l.attr("transform","translate("+(n-h.width/2-5)+", 0)")):"BT"===$?(d.attr("x",n-h.width/2-10).attr("y",V),l.attr("transform","translate("+(n-h.width/2-5)+", "+V+")")):d.attr("transform","translate(-19, "+(n-h.height/2)+")")}))}),"drawBranches"),ft=(0,a.eW)((function(t,c,o,e,r){return j.set(t,{pos:c,index:o}),c+=50+(r?40:0)+("TB"===$||"BT"===$?e.width/2:0)}),"setBranchPosition");var xt={parser:z,db:P,renderer:{draw:(0,a.eW)((function(t,c,o,e){var r,i;if(Q(),a.cM.debug("in gitgraph renderer",t+"\n","id:",c,o),!Y)throw new Error("GitGraph config not found");const d=null!==(r=Y.rotateCommitLabel)&&void 0!==r&&r,l=e.db;F=l.getCommits();const h=l.getBranchesAsObjArray();$=l.getDirection();const m=(0,s.Ys)('[id="'.concat(c,'"]'));let y=0;h.forEach(((t,c)=>{var o;const e=X(t.name),r=m.append("g"),n=r.insert("g").attr("class","branchLabel"),a=n.insert("g").attr("class","label branch-label");null===(o=a.node())||void 0===o||o.appendChild(e);const i=e.getBBox();y=ft(t.name,y,c,i,d),a.remove(),n.remove(),r.remove()})),ht(m,F,!1),Y.showBranches&&pt(m,h),ut(m,F),ht(m,F,!0),n.w8.insertTitle(m,"gitTitleText",null!==(i=Y.titleTopMargin)&&void 0!==i?i:0,l.getDiagramTitle()),(0,a.Rw)(void 0,m,Y.diagramPadding,Y.useMaxWidth)}),"draw")},styles:(0,a.eW)((t=>"\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ".concat([0,1,2,3,4,5,6,7].map((c=>"\n        .branch-label".concat(c," { fill: ").concat(t["gitBranchLabel"+c],"; }\n        .commit").concat(c," { stroke: ").concat(t["git"+c],"; fill: ").concat(t["git"+c],"; }\n        .commit-highlight").concat(c," { stroke: ").concat(t["gitInv"+c],"; fill: ").concat(t["gitInv"+c],"; }\n        .label").concat(c,"  { fill: ").concat(t["git"+c],"; }\n        .arrow").concat(c," { stroke: ").concat(t["git"+c],"; }\n        "))).join("\n"),"\n\n  .branch {\n    stroke-width: 1;\n    stroke: ").concat(t.lineColor,";\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ").concat(t.commitLabelFontSize,"; fill: ").concat(t.commitLabelColor,";}\n  .commit-label-bkg { font-size: ").concat(t.commitLabelFontSize,"; fill: ").concat(t.commitLabelBackground,"; opacity: 0.5; }\n  .tag-label { font-size: ").concat(t.tagLabelFontSize,"; fill: ").concat(t.tagLabelColor,";}\n  .tag-label-bkg { fill: ").concat(t.tagLabelBackground,"; stroke: ").concat(t.tagLabelBorder,"; }\n  .tag-hole { fill: ").concat(t.textColor,"; }\n\n  .commit-merge {\n    stroke: ").concat(t.primaryColor,";\n    fill: ").concat(t.primaryColor,";\n  }\n  .commit-reverse {\n    stroke: ").concat(t.primaryColor,";\n    fill: ").concat(t.primaryColor,";\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ").concat(t.primaryColor,";\n    fill: ").concat(t.primaryColor,";\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ").concat(t.textColor,";\n  }\n")),"getStyles")}}}]);
//# sourceMappingURL=278.85a7f315.chunk.js.map