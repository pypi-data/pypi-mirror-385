{"version":3,"file":"static/js/61.b2c8b9ac.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/clone.js","../node_modules/dagre-d3-es/src/graphlib/json.js","../node_modules/mermaid/dist/chunks/mermaid.core/dagre-JOIXM2OF.mjs"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import {\n  clear as clear2,\n  insertEdge,\n  insertEdgeLabel,\n  markers_default,\n  positionEdgeLabel\n} from \"./chunk-M6DAPIYF.mjs\";\nimport \"./chunk-MXNHSMXR.mjs\";\nimport {\n  clear,\n  clear2 as clear3,\n  insertCluster,\n  insertNode,\n  positionNode,\n  setNodeElem,\n  updateNodeBounds\n} from \"./chunk-JW4RIYDF.mjs\";\nimport {\n  getSubGraphTitleMargins\n} from \"./chunk-AC5SNWB5.mjs\";\nimport \"./chunk-UWXLY5YG.mjs\";\nimport \"./chunk-QESNASVV.mjs\";\nimport \"./chunk-55PJQP7W.mjs\";\nimport {\n  __name,\n  getConfig2 as getConfig,\n  log\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nvar clusterDb = /* @__PURE__ */ new Map();\nvar descendants = /* @__PURE__ */ new Map();\nvar parents = /* @__PURE__ */ new Map();\nvar clear4 = /* @__PURE__ */ __name(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, \"clear\");\nvar isDescendant = /* @__PURE__ */ __name((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, \"isDescendant\");\nvar edgeInCluster = /* @__PURE__ */ __name((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, \"edgeInCluster\");\nvar copy = /* @__PURE__ */ __name((clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n}, \"copy\");\nvar extractDescendants = /* @__PURE__ */ __name((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, \"extractDescendants\");\nvar findCommonEdges = /* @__PURE__ */ __name((graph, id1, id2) => {\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map((edge) => {\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\n  });\n  const edges2Prim = edges2.map((edge) => {\n    return { v: edge.v, w: edge.w };\n  });\n  const result = edges1Prim.filter((edgeIn1) => {\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, \"findCommonEdges\");\nvar findNonClusterChild = /* @__PURE__ */ __name((id, graph, clusterId) => {\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, \"findNonClusterChild\");\nvar getAnchorId = /* @__PURE__ */ __name((id) => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, \"getAnchorId\");\nvar adjustClustersAndEdges = /* @__PURE__ */ __name((graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph, id)\n      );\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb.get(e.v),\n      \" --- \",\n      clusterDb.get(e.w)\n    );\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n}, \"adjustClustersAndEdges\");\nvar extractor = /* @__PURE__ */ __name((graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb.has(node)) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb.get(node).externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, \"extractor\");\nvar sorter = /* @__PURE__ */ __name((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, \"sorter\");\nvar sortNodesByHierarchy = /* @__PURE__ */ __name((graph) => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */ __name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.trace(\n          \"Setting data for parent cluster XXX\\n Node.id = \",\n          v,\n          \"\\n data=\",\n          data.height,\n          \"\\nParent cluster\",\n          parentCluster.height\n        );\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node?.clusterNode) {\n        log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\n        const { ranksep, nodesep } = graph.graph();\n        node.graph.setGraph({\n          ...node.graph.graph(),\n          ranksep: ranksep + 25,\n          nodesep\n        });\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\n          \"New compound node after recursive render XAX\",\n          v,\n          \"width\",\n          // node,\n          node.width,\n          \"height\",\n          node.height\n          // node.x,\n          // node.y\n        );\n        setNodeElem(newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.trace(\n            \"Cluster - the non recursive path XBX\",\n            v,\n            node.id,\n            node,\n            node.width,\n            \"Graph:\",\n            graph\n          );\n          log.trace(findNonClusterChild(node.id, graph));\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\n        } else {\n          log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\n          await insertNode(nodes, graph.node(v), { config: siteConfig, dir });\n        }\n      }\n    })\n  );\n  const processEdges = /* @__PURE__ */ __name(async () => {\n    const edgePromises = graph.edges().map(async function(e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n      log.info(\n        \"Fix\",\n        clusterDb,\n        \"ids:\",\n        e.v,\n        e.w,\n        \"Translating: \",\n        clusterDb.get(e.v),\n        clusterDb.get(e.w)\n      );\n      await insertEdgeLabel(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, \"processEdges\");\n  await processEdges();\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  log.info(\"############################################# XXX\");\n  log.info(\"###                Layout                 ### XXX\");\n  log.info(\"############################################# XXX\");\n  dagreLayout(graph);\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  let diff = 0;\n  let { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  await Promise.all(\n    sortNodesByHierarchy(graph).map(async function(v) {\n      const node = graph.node(v);\n      log.info(\n        \"Position XBX => \" + v + \": (\" + node.x,\n        \",\" + node.y,\n        \") width: \",\n        node.width,\n        \" height: \",\n        node.height\n      );\n      if (node?.clusterNode) {\n        node.y += subGraphTitleTotalMargin;\n        log.info(\n          \"A tainted cluster node XBX1\",\n          v,\n          node.id,\n          node.width,\n          node.height,\n          node.x,\n          node.y,\n          graph.parent(v)\n        );\n        clusterDb.get(node.id).node = node;\n        positionNode(node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\n            \"A pure cluster node XBX1\",\n            v,\n            node.id,\n            node.x,\n            node.y,\n            node.width,\n            node.height,\n            graph.parent(v)\n          );\n          node.height += subGraphTitleTotalMargin;\n          graph.node(node.parentId);\n          const halfPadding = node?.padding / 2 || 0;\n          const labelHeight = node?.labelBBox?.height || 0;\n          const offsetY = labelHeight - halfPadding || 0;\n          log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\n          await insertCluster(clusters, node);\n          clusterDb.get(node.id).node = node;\n        } else {\n          const parent = graph.node(node.parentId);\n          node.y += subGraphTitleTotalMargin / 2;\n          log.info(\n            \"A regular node XBX1 - using the padding\",\n            node.id,\n            \"parent\",\n            node.parentId,\n            node.width,\n            node.height,\n            node.x,\n            node.y,\n            \"offsetY\",\n            node.offsetY,\n            \"parent\",\n            parent,\n            parent?.offsetY,\n            node\n          );\n          positionNode(node);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\n  return { elem, diff };\n}, \"recursiveRender\");\nvar render = /* @__PURE__ */ __name(async (data4Layout, svg) => {\n  const graph = new graphlib2.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const element = svg.select(\"g\");\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  clear3();\n  clear2();\n  clear();\n  clear4();\n  data4Layout.nodes.forEach((node) => {\n    graph.setNode(node.id, { ...node });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  log.debug(\"Edges:\", data4Layout.edges);\n  data4Layout.edges.forEach((edge) => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        label: \"\",\n        padding: 0,\n        shape: \"labelRect\",\n        // shape: 'rect',\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        padding: 0,\n        // shape: 'rect',\n        shape: \"labelRect\",\n        label: \"\",\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge1.id = nodeId + \"-cyclic-special-1\";\n      edgeMid.arrowTypeStart = \"none\";\n      edgeMid.arrowTypeEnd = \"none\";\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\n      edge2.label = \"\";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + \"-cyclic-special-2\";\n      edge2.arrowTypeStart = \"none\";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\n    } else {\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\n    }\n  });\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(\n    element,\n    graph,\n    data4Layout.type,\n    data4Layout.diagramId,\n    void 0,\n    siteConfig\n  );\n}, \"render\");\nexport {\n  render\n};\n"],"names":["value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","Map","descendants","parents","clear4","__name","clear","isDescendant","id","ancestorId","ancestorDescendants","get","log","includes","edgeInCluster","clusterId","clusterDescendants","copy","newGraph","rootId","children","push","forEach","length","data","setNode","setParent","data2","setEdge","removeNode","extractDescendants","res","child","set","findCommonEdges","id1","id2","edges1","filter","edges2","edges1Prim","map","edges2Prim","edgeIn1","some","findNonClusterChild","reserve","_id","commonEdges","getAnchorId","has","externalConnections","adjustClustersAndEdges","depth","clusterData","keys","nonClusterChild","JSON","stringify","removeEdge","fromCluster","toCluster","graphlibJson","extractor","hasChildren","dir","rankdir","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","label","sorter","result","Object","assign","sorted","sortNodesByHierarchy","recursiveRender","async","_elem","diagramType","parentCluster","siteConfig","graphlibJson2","elem","insert","attr","clusters","edgePaths","edgeLabels","Promise","all","parse","height","width","o","newEl","updateNodeBounds","diff","setNodeElem","insertNode","config","processEdges","edgePromises","insertEdgeLabel","dagreLayout","subGraphTitleTotalMargin","getSubGraphTitleMargins","x","y","positionNode","parentId","halfPadding","padding","labelHeight","labelBBox","offsetY","insertCluster","points","point","startNode","endNode","paths","insertEdge","positionEdgeLabel","n","type","isGroup","render","data4Layout","svg","graphlib2","direction","nodeSpacing","flowchart","rankSpacing","element","select","markers_default","markers","diagramId","clear3","clear2","start","end","nodeId","specialId1","specialId2","domId","labelStyle","shape","style","edge1","structuredClone","edgeMid","edge2","arrowTypeEnd","arrowTypeStart","getConfig"],"sourceRoot":""}