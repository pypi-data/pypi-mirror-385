{"version":3,"file":"static/js/264.754cfe42.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/chunks/mermaid.core/chunk-353BL4L5.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/diagram-ZTM2IBQH.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  populateCommonDb\n} from \"./chunk-353BL4L5.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-55PJQP7W.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-P3VETL53.mjs\";\nimport {\n  __name,\n  clear,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  getThemeVariables,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/radar/db.ts\nvar defaultOptions = {\n  showLegend: true,\n  ticks: 5,\n  max: null,\n  min: 0,\n  graticule: \"circle\"\n};\nvar defaultRadarData = {\n  axes: [],\n  curves: [],\n  options: defaultOptions\n};\nvar data = structuredClone(defaultRadarData);\nvar DEFAULT_RADAR_CONFIG = defaultConfig_default.radar;\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_RADAR_CONFIG,\n    ...getConfig().radar\n  });\n  return config;\n}, \"getConfig\");\nvar getAxes = /* @__PURE__ */ __name(() => data.axes, \"getAxes\");\nvar getCurves = /* @__PURE__ */ __name(() => data.curves, \"getCurves\");\nvar getOptions = /* @__PURE__ */ __name(() => data.options, \"getOptions\");\nvar setAxes = /* @__PURE__ */ __name((axes) => {\n  data.axes = axes.map((axis) => {\n    return {\n      name: axis.name,\n      label: axis.label ?? axis.name\n    };\n  });\n}, \"setAxes\");\nvar setCurves = /* @__PURE__ */ __name((curves) => {\n  data.curves = curves.map((curve) => {\n    return {\n      name: curve.name,\n      label: curve.label ?? curve.name,\n      entries: computeCurveEntries(curve.entries)\n    };\n  });\n}, \"setCurves\");\nvar computeCurveEntries = /* @__PURE__ */ __name((entries) => {\n  if (entries[0].axis == void 0) {\n    return entries.map((entry) => entry.value);\n  }\n  const axes = getAxes();\n  if (axes.length === 0) {\n    throw new Error(\"Axes must be populated before curves for reference entries\");\n  }\n  return axes.map((axis) => {\n    const entry = entries.find((entry2) => entry2.axis?.$refText === axis.name);\n    if (entry === void 0) {\n      throw new Error(\"Missing entry for axis \" + axis.label);\n    }\n    return entry.value;\n  });\n}, \"computeCurveEntries\");\nvar setOptions = /* @__PURE__ */ __name((options) => {\n  const optionMap = options.reduce(\n    (acc, option) => {\n      acc[option.name] = option;\n      return acc;\n    },\n    {}\n  );\n  data.options = {\n    showLegend: optionMap.showLegend?.value ?? defaultOptions.showLegend,\n    ticks: optionMap.ticks?.value ?? defaultOptions.ticks,\n    max: optionMap.max?.value ?? defaultOptions.max,\n    min: optionMap.min?.value ?? defaultOptions.min,\n    graticule: optionMap.graticule?.value ?? defaultOptions.graticule\n  };\n}, \"setOptions\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  data = structuredClone(defaultRadarData);\n}, \"clear\");\nvar db = {\n  getAxes,\n  getCurves,\n  getOptions,\n  setAxes,\n  setCurves,\n  setOptions,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription\n};\n\n// src/diagrams/radar/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  const { axes, curves, options } = ast;\n  db.setAxes(axes);\n  db.setCurves(curves);\n  db.setOptions(options);\n}, \"populate\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"radar\", input);\n    log.debug(ast);\n    populate(ast);\n  }, \"parse\")\n};\n\n// src/diagrams/radar/renderer.ts\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const db2 = diagram2.db;\n  const axes = db2.getAxes();\n  const curves = db2.getCurves();\n  const options = db2.getOptions();\n  const config = db2.getConfig();\n  const title = db2.getDiagramTitle();\n  const svg = selectSvgElement(id);\n  const g = drawFrame(svg, config);\n  const maxValue = options.max ?? Math.max(...curves.map((curve) => Math.max(...curve.entries)));\n  const minValue = options.min;\n  const radius = Math.min(config.width, config.height) / 2;\n  drawGraticule(g, axes, radius, options.ticks, options.graticule);\n  drawAxes(g, axes, radius, config);\n  drawCurves(g, axes, curves, minValue, maxValue, options.graticule, config);\n  drawLegend(g, curves, options.showLegend, config);\n  g.append(\"text\").attr(\"class\", \"radarTitle\").text(title).attr(\"x\", 0).attr(\"y\", -config.height / 2 - config.marginTop);\n}, \"draw\");\nvar drawFrame = /* @__PURE__ */ __name((svg, config) => {\n  const totalWidth = config.width + config.marginLeft + config.marginRight;\n  const totalHeight = config.height + config.marginTop + config.marginBottom;\n  const center = {\n    x: config.marginLeft + config.width / 2,\n    y: config.marginTop + config.height / 2\n  };\n  svg.attr(\"viewbox\", `0 0 ${totalWidth} ${totalHeight}`).attr(\"width\", totalWidth).attr(\"height\", totalHeight);\n  return svg.append(\"g\").attr(\"transform\", `translate(${center.x}, ${center.y})`);\n}, \"drawFrame\");\nvar drawGraticule = /* @__PURE__ */ __name((g, axes, radius, ticks, graticule) => {\n  if (graticule === \"circle\") {\n    for (let i = 0; i < ticks; i++) {\n      const r = radius * (i + 1) / ticks;\n      g.append(\"circle\").attr(\"r\", r).attr(\"class\", \"radarGraticule\");\n    }\n  } else if (graticule === \"polygon\") {\n    const numAxes = axes.length;\n    for (let i = 0; i < ticks; i++) {\n      const r = radius * (i + 1) / ticks;\n      const points = axes.map((_, j) => {\n        const angle = 2 * j * Math.PI / numAxes - Math.PI / 2;\n        const x = r * Math.cos(angle);\n        const y = r * Math.sin(angle);\n        return `${x},${y}`;\n      }).join(\" \");\n      g.append(\"polygon\").attr(\"points\", points).attr(\"class\", \"radarGraticule\");\n    }\n  }\n}, \"drawGraticule\");\nvar drawAxes = /* @__PURE__ */ __name((g, axes, radius, config) => {\n  const numAxes = axes.length;\n  for (let i = 0; i < numAxes; i++) {\n    const label = axes[i].label;\n    const angle = 2 * i * Math.PI / numAxes - Math.PI / 2;\n    g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", radius * config.axisScaleFactor * Math.cos(angle)).attr(\"y2\", radius * config.axisScaleFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLine\");\n    g.append(\"text\").text(label).attr(\"x\", radius * config.axisLabelFactor * Math.cos(angle)).attr(\"y\", radius * config.axisLabelFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLabel\");\n  }\n}, \"drawAxes\");\nfunction drawCurves(g, axes, curves, minValue, maxValue, graticule, config) {\n  const numAxes = axes.length;\n  const radius = Math.min(config.width, config.height) / 2;\n  curves.forEach((curve, index) => {\n    if (curve.entries.length !== numAxes) {\n      return;\n    }\n    const points = curve.entries.map((entry, i) => {\n      const angle = 2 * Math.PI * i / numAxes - Math.PI / 2;\n      const r = relativeRadius(entry, minValue, maxValue, radius);\n      const x = r * Math.cos(angle);\n      const y = r * Math.sin(angle);\n      return { x, y };\n    });\n    if (graticule === \"circle\") {\n      g.append(\"path\").attr(\"d\", closedRoundCurve(points, config.curveTension)).attr(\"class\", `radarCurve-${index}`);\n    } else if (graticule === \"polygon\") {\n      g.append(\"polygon\").attr(\"points\", points.map((p) => `${p.x},${p.y}`).join(\" \")).attr(\"class\", `radarCurve-${index}`);\n    }\n  });\n}\n__name(drawCurves, \"drawCurves\");\nfunction relativeRadius(value, minValue, maxValue, radius) {\n  const clippedValue = Math.min(Math.max(value, minValue), maxValue);\n  return radius * (clippedValue - minValue) / (maxValue - minValue);\n}\n__name(relativeRadius, \"relativeRadius\");\nfunction closedRoundCurve(points, tension) {\n  const numPoints = points.length;\n  let d = `M${points[0].x},${points[0].y}`;\n  for (let i = 0; i < numPoints; i++) {\n    const p0 = points[(i - 1 + numPoints) % numPoints];\n    const p1 = points[i];\n    const p2 = points[(i + 1) % numPoints];\n    const p3 = points[(i + 2) % numPoints];\n    const cp1 = {\n      x: p1.x + (p2.x - p0.x) * tension,\n      y: p1.y + (p2.y - p0.y) * tension\n    };\n    const cp2 = {\n      x: p2.x - (p3.x - p1.x) * tension,\n      y: p2.y - (p3.y - p1.y) * tension\n    };\n    d += ` C${cp1.x},${cp1.y} ${cp2.x},${cp2.y} ${p2.x},${p2.y}`;\n  }\n  return `${d} Z`;\n}\n__name(closedRoundCurve, \"closedRoundCurve\");\nfunction drawLegend(g, curves, showLegend, config) {\n  if (!showLegend) {\n    return;\n  }\n  const legendX = (config.width / 2 + config.marginRight) * 3 / 4;\n  const legendY = -(config.height / 2 + config.marginTop) * 3 / 4;\n  const lineHeight = 20;\n  curves.forEach((curve, index) => {\n    const itemGroup = g.append(\"g\").attr(\"transform\", `translate(${legendX}, ${legendY + index * lineHeight})`);\n    itemGroup.append(\"rect\").attr(\"width\", 12).attr(\"height\", 12).attr(\"class\", `radarLegendBox-${index}`);\n    itemGroup.append(\"text\").attr(\"x\", 16).attr(\"y\", 0).attr(\"class\", \"radarLegendText\").text(curve.label);\n  });\n}\n__name(drawLegend, \"drawLegend\");\nvar renderer = { draw };\n\n// src/diagrams/radar/styles.ts\nvar genIndexStyles = /* @__PURE__ */ __name((themeVariables, radarOptions) => {\n  let sections = \"\";\n  for (let i = 0; i < themeVariables.THEME_COLOR_LIMIT; i++) {\n    const indexColor = themeVariables[`cScale${i}`];\n    sections += `\n\t\t.radarCurve-${i} {\n\t\t\tcolor: ${indexColor};\n\t\t\tfill: ${indexColor};\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\n\t\t\tstroke: ${indexColor};\n\t\t\tstroke-width: ${radarOptions.curveStrokeWidth};\n\t\t}\n\t\t.radarLegendBox-${i} {\n\t\t\tfill: ${indexColor};\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\n\t\t\tstroke: ${indexColor};\n\t\t}\n\t\t`;\n  }\n  return sections;\n}, \"genIndexStyles\");\nvar buildRadarStyleOptions = /* @__PURE__ */ __name((radar) => {\n  const defaultThemeVariables = getThemeVariables();\n  const currentConfig = getConfig();\n  const themeVariables = cleanAndMerge(defaultThemeVariables, currentConfig.themeVariables);\n  const radarOptions = cleanAndMerge(themeVariables.radar, radar);\n  return { themeVariables, radarOptions };\n}, \"buildRadarStyleOptions\");\nvar styles = /* @__PURE__ */ __name(({ radar } = {}) => {\n  const { themeVariables, radarOptions } = buildRadarStyleOptions(radar);\n  return `\n\t.radarTitle {\n\t\tfont-size: ${themeVariables.fontSize};\n\t\tcolor: ${themeVariables.titleColor};\n\t\tdominant-baseline: hanging;\n\t\ttext-anchor: middle;\n\t}\n\t.radarAxisLine {\n\t\tstroke: ${radarOptions.axisColor};\n\t\tstroke-width: ${radarOptions.axisStrokeWidth};\n\t}\n\t.radarAxisLabel {\n\t\tdominant-baseline: middle;\n\t\ttext-anchor: middle;\n\t\tfont-size: ${radarOptions.axisLabelFontSize}px;\n\t\tcolor: ${radarOptions.axisColor};\n\t}\n\t.radarGraticule {\n\t\tfill: ${radarOptions.graticuleColor};\n\t\tfill-opacity: ${radarOptions.graticuleOpacity};\n\t\tstroke: ${radarOptions.graticuleColor};\n\t\tstroke-width: ${radarOptions.graticuleStrokeWidth};\n\t}\n\t.radarLegendText {\n\t\ttext-anchor: start;\n\t\tfont-size: ${radarOptions.legendFontSize}px;\n\t\tdominant-baseline: hanging;\n\t}\n\t${genIndexStyles(themeVariables, radarOptions)}\n\t`;\n}, \"styles\");\n\n// src/diagrams/radar/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n"],"names":["populateCommonDb","ast","db","accDescr","setAccDescription","accTitle","setAccTitle","title","setDiagramTitle","__name","defaultOptions","showLegend","ticks","max","min","graticule","defaultRadarData","axes","curves","options","data","structuredClone","DEFAULT_RADAR_CONFIG","defaultConfig_default","getConfig2","cleanAndMerge","getConfig","radar","getAxes","getCurves","getOptions","setAxes","map","axis","name","label","setCurves","curve","entries","computeCurveEntries","entry","value","length","Error","find","entry2","$refText","setOptions","optionMap","reduce","acc","option","clear","getAccTitle","getDiagramTitle","getAccDescription","populate","parser","parse","async","input","log","draw","_text","id","_version","diagram2","db2","config","svg","selectSvgElement","g","drawFrame","maxValue","Math","minValue","radius","width","height","drawGraticule","drawAxes","drawCurves","drawLegend","append","attr","text","marginTop","totalWidth","marginLeft","marginRight","totalHeight","marginBottom","center","x","y","i","r","numAxes","points","_","j","angle","PI","cos","sin","join","axisScaleFactor","axisLabelFactor","forEach","index","relativeRadius","closedRoundCurve","curveTension","p","tension","numPoints","d","p0","p1","p2","p3","cp1","cp2","legendX","legendY","itemGroup","renderer","genIndexStyles","themeVariables","radarOptions","sections","THEME_COLOR_LIMIT","indexColor","curveOpacity","curveStrokeWidth","buildRadarStyleOptions","defaultThemeVariables","getThemeVariables","currentConfig","diagram","styles","fontSize","titleColor","axisColor","axisStrokeWidth","axisLabelFontSize","graticuleColor","graticuleOpacity","graticuleStrokeWidth","legendFontSize"],"sourceRoot":""}