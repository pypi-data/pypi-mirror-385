# This file is a template, and might need editing before it works on your project.

stages:
  - prepare
  - test
  - finalize
  - release

variables:
  # Change cache dirs to be inside the project (can only cache local items)
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  PIPX_HOME: $CI_PROJECT_DIR/.cache/pipx
  PRE_COMMIT_HOME: $CI_PROJECT_DIR/.cache/pre-commit
  # Coveralls configuration
  CI_NAME: gitlab-ci
  CI_BRANCH: $CI_COMMIT_REF_NAME
  CI_BUILD_NUMBER: $CI_PIPELINE_ID
  CI_BUILD_URL: $CI_PIPELINE_URL
  # TODO: You will also need to set `COVERALLS_REPO_TOKEN` to work with coveralls.
  #       We recommend that you do that via GitLab CI web interface.
  # - https://coveralls-python.readthedocs.io/en/latest/usage/index.html
  # - https://docs.gitlab.com/ee/ci/variables/

workflow:
  rules:
    # Restrict the number of times the pipeline runs to save resources/limits
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      variables:
        # Specific merge request configurations for coveralls
        CI_BRANCH: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        CI_PULL_REQUEST: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == 'push'
      when: never  # Avoid running the pipeline twice (push + merge request)
    - if: $CI_COMMIT_BRANCH || $CI_COMMIT_TAG
    # You can also set recurring execution of the pipeline, see:
    # https://docs.gitlab.com/ee/ci/pipelines/schedules.html

cache:
  key: pip-pipx-pre-commit-$CI_JOB_IMAGE
  paths:
    - .cache/pip
    - .cache/pipx
    - .cache/pre-commit

default:
  before_script:
    - python --version  # useful for debugging
    # Setup git (used for setuptools-scm)
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    # Install dependencies for the testing environment
    - pip install -U pip tox pipx

check:
  stage: prepare
  image: "python:3.12"
  script:
    - pipx run pre-commit run --all-files --show-diff-on-failure

build:
  stage: prepare
  image: "python:3.12"
  script:
    - tox -e clean,build
  variables:
    GIT_DEPTH: "0"  # deep-clone
  artifacts:
    expire_in: 1 day
    paths: [dist]

publish_check:
  stage: test
  image: "python:3.12"
  dependencies: [build]
  script:
    - tox -e publish_check

.test_script: &test_script
  dependencies: [build]
  variables:
    COVERALLS_PARALLEL: "true"
    COVERALLS_FLAG_NAME: $CI_JOB_NAME
  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+)%/'
  script:
    - tox --installpkg dist/*.whl -- -rFEx --durations 10 --color yes
    - pipx run coverage report -m # Needed for the coverage badge

py312:
  stage: test
  image: "python:3.12"
  <<: *test_script

unit-test:
  stage: test
  image: "python:3.12"
  before_script:
    - pip install pytest pytest-cov
    - pip install virtualenv
    - pip install .  # Install dependencies from setup.cfg
    - virtualenv venv
    - source venv/bin/activate
  script:
    - PYTHONPATH=src pytest -v

publish:
  stage: release
  dependencies: [build]
  image: "python:3.12"
  rules: [if: $CI_COMMIT_TAG && $PYPI_ENABLED]
  script:
    - tox -e publish

pages-test:
  stage: test
  dependencies: [build]
  image: "python:3.12"
  script:
  - pip install .
  - pip install -U sphinx
  - sphinx-build -b html docs public
  only:
  - branches

pages:
  stage: finalize
  dependencies: [build]
  image: "python:3.12"
  script:
  - pip install .
  - pip install -U sphinx
  - sphinx-build -b html docs public
  artifacts:
    paths:
    - public
  only:
  - main
