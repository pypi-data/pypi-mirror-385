[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cryptoservice"
version = "1.15.1"
description = "A cryptocurrency trading info package"
readme = "README.md"
requires-python = ">=3.10,<3.13"
dependencies = [
    "python-binance>=1.0.27",
    "pyyaml>=6.0.2",
    "tomli>=2.2.1",
    "tomli-w>=1.0.0",
    "pandas>=2.2.3",
    "pydantic-settings>=2.7.1",
    "rich>=13.9.4",
    "requests>=2.32.3",
    "setuptools>=80.9.0",
    "sqlalchemy>=2.0.39",
    "aiosqlite>=0.21.0",
    "aiosqlitepool>=1.0.0",
    "structlog>=24.4.0",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
authors = [{ name = "Minnn", email = "minzzzai.s@gmail.com" }]

[project.optional-dependencies]
test = ["pytest>=6.0.0", "pytest-cov>=2.10.0", "pytest-asyncio>=0.21.0"]
dev = ["pre-commit>=2.0.0", "python-dotenv>=0.15.0", "ruff>=0.4.0"]
dev-all = ["cryptoservice[test,dev]"]
docs = [
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.24",
    "mkdocs-material-extensions>=1.3",
    "mkdocs-git-revision-date-localized-plugin>=1.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.8",
]

[tool.ruff]
# 基本配置
line-length = 120
target-version = "py312"
# 启用的规则：
# E/F - PyFlakes 和 Pycodestyle 错误
# B - flake8-bugbear 错误检测
# I - isort 导入排序
# N - pep8-naming 命名规范
# D - pydocstyle 文档字符串检查
# UP - pyupgrade 现代 Python 特性
# S - flake8-bandit 安全问题
# C - flake8-comprehensions 列表推导式优化
# SIM - flake8-simplify 代码简化
lint.select = ["E", "F", "B", "I", "N", "D", "UP", "S", "C", "SIM"]
# lint.select = ["E", "F", "B"]
# 忽略某些不需要的规则
lint.ignore = ["D203", "D213"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = 20

[tool.ruff.lint.isort]
known-first-party = ["cryptoservice"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
# 在测试文件中忽略一些规则
"tests/*" = ["E501", "S101", "D100", "D101", "D102", "D103"]
# 在配置文件中忽略一些规则
"src/cryptoservice/config/*" = ["S105", "S106", "S107"]
# 在类型定义文件中忽略一些规则
"src/cryptoservice/types/*" = ["D101", "D102", "D106", "D107"]

[tool.mypy]
python_version = "3.12"
# 忽略缺少类型存根的第三方库
ignore_missing_imports = true
# 当遇到缺少类型存根的导入时，不报告错误
warn_unused_ignores = true
# 显示错误代码
show_error_codes = true
# 严格可选类型检查
strict_optional = true

# 为特定模块配置
[[tool.mypy.overrides]]
module = ["binance.*", "websockets.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src/cryptoservice --cov-report=term-missing"

[tool.hatch.build.targets.wheel]
packages = ["src/cryptoservice"]

[dependency-groups]
dev = [
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-literate-nav>=0.6.2",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
    "mypy>=1.16.0",
    "pandas-stubs>=2.2.3.250527",
    "pytest-asyncio>=1.1.0",
    "ruff>=0.11.12",
    "types-requests>=2.32.4.20250611",
]
test = ["pytest>=8.3.5", "pytest-cov>=6.1.1"]
