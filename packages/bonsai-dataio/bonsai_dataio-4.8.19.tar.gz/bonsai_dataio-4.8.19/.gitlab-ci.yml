# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:

    image: python:3.11

before_script:

  - pip install -U pip tox pipx

  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  ## 2 Ooptions(first: default; second: for creating pdf)
  - 'command -v ssh-agent > /dev/null || (apt-get update -y && apt-get install openssh-client -y)'
  # && apt-get install -y latexmk && apt-get install -y texlive-latex-extra && apt-get install -y texlive-xetex)'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Give the right permissions, otherwise ssh-add will refuse to add files
  ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
  ##
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa

stages:          # List of stages for jobs, and their order of execution
    - test
    - publish

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.

  script:
    - tox

pages:
  script:
    #- apt-get update -y # optional for pdf
    #- apt-get install -y latexmk # optional for pdf
    #- apt-get install -y texlive-latex-extra # optional for pdf
    #- apt-get install -y texlive-xetex # optional for pdf
    - tox -e docs
    - mv docs/_build/html public
    #- mv docs/_build/latex/user_guide.pdf public # optional for pdf
    #- chmod o+r public/user_guide.pdf # optional for pdf
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  rules:
    # This ensures that only pushes as tags will trigger
    # a pages deploy
    - if: '$CI_COMMIT_REF_NAME == $CI_COMMIT_TAG'


publish_to_pypi:
  stage: publish
  script:
    - echo "TWINE_USERNAME is set to '$TWINE_USERNAME'"
    - if [ -z "$TWINE_PASSWORD" ]; then echo "TWINE_PASSWORD is not set"; else echo "TWINE_PASSWORD is set"; fi
    - tox -e clean
    - tox -e build
    - tox -e publish -- --repository pypi --username $TWINE_USERNAME --password $TWINE_PASSWORD
  only:
    - tags
  dependencies:
    - unit-test-job
