[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "indico-toolkit"
description = "Classes, functions, and abstractions for Indico IPA"
license = "MIT"
authors = [
    { name = "Indico Solutions Engineering", email = "solutionsengineering@indicodata.ai" },
]
readme = "README.md"
urls = { source = "https://github.com/IndicoDataSolutions/Indico-Solutions-Toolkit" }
requires-python = ">=3.10"
version = "7.2.2"
dependencies = ["indico-client (>=6.14.0,<7.0.0)"]

[project.optional-dependencies]
all = ["pandas (>=2.2.3,<3.0.0)", "plotly (>=5.2.1,<6.0.0)", "tqdm (>=4.50.0,<5.0.0)"]
downloads = ["pandas (>=2.2.3,<3.0.0)", "tqdm (>=4.50.0,<5.0.0)"]
examples = ["pandas (>=2.2.3,<3.0.0)"]
metrics = ["pandas (>=2.2.3,<3.0.0)", "plotly (>=5.2.1,<6.0.0)"]
predictions = ["pandas (>=2.2.3,<3.0.0)"]
snapshots = ["pandas (>=2.2.3,<3.0.0)"]

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
coverage = "^7.6.12"
mypy = "^1.15.0"
pytest = "^8.3.4"
pytest-asyncio = "^0.25.3"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"
ruff = "^0.9.6"

[tool.poetry.requires-plugins]
poethepoet = {extras = ["poetry-plugin"], version = "^0.33.0"}

[tool.poe.tasks]
black = "black indico_toolkit examples tests"
black-check = "black --check indico_toolkit examples tests"
coverage = "coverage html"
mypy = "mypy indico_toolkit tests"
pytest = "pytest tests --cov=indico_toolkit"
pytest-unit = "pytest tests --ignore tests/integration --cov=indico_toolkit"
ruff = "ruff check --fix-only --exit-zero indico_toolkit examples tests"
ruff-check = "ruff check indico_toolkit examples tests"
test-integration = "pytest tests/integration --cov=indico_toolkit"

format = ["ruff", "black"]
check = ["ruff-check", "black-check", "mypy"]
test = ["pytest-unit", "coverage"]
all = ["format", "check", "test"]

[tool.black]
line-length = 88

[tool.ruff]
line-length = 88
lint.select = ["E", "F", "I"]
lint.fixable = ["I"]

[tool.mypy]
strict = true
show_error_codes = true
warn_unreachable = true
disallow_any_unimported = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@abstractmethod"]
