name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
            artifact_name: pysentry
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x64-musl
            artifact_name: pysentry
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
            artifact_name: pysentry
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64
            artifact_name: pysentry
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
            artifact_name: pysentry
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
            artifact_name: pysentry.exe

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: cargo install cross

      - name: Build binary (native)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }} --bin pysentry

      - name: Build binary (cross-compile)
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }} --bin pysentry

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          name=pysentry-${{ matrix.name }}
          mkdir $name
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} $name/
          cp README.md $name/
          cp LICENSE $name/
          tar -czf $name.tar.gz $name
          echo "ASSET=$name.tar.gz" >> $GITHUB_ENV

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $name = "pysentry-${{ matrix.name }}"
          mkdir $name
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} $name/
          cp README.md $name/
          cp LICENSE $name/
          Compress-Archive -Path $name -DestinationPath "$name.zip"
          echo "ASSET=$name.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: ${{ env.ASSET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: build-binaries
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-python-wheels:
    name: Build Python Wheels
    runs-on: ${{ matrix.osarch.os }}
    strategy:
      matrix:
        osarch:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
        python: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: startsWith(matrix.osarch.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set manylinux version
        id: manylinux
        if: startsWith(matrix.osarch.os, 'ubuntu')
        run: |
          if [[ "${{ matrix.osarch.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "version=2_28" >> $GITHUB_OUTPUT
          else
            echo "version=auto" >> $GITHUB_OUTPUT
          fi

      - name: Build wheels
        uses: PyO3/maturin-action@v1.49.4
        with:
          command: build
          args: --release --features python --out dist -i ${{ matrix.python }}
          sccache: "true"
          manylinux: ${{ steps.manylinux.outputs.version || 'auto' }}
          target: ${{ matrix.osarch.target }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.osarch.os }}-${{ matrix.osarch.target }}-${{ matrix.python }}
          path: dist/*.whl

  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build sdist
        uses: PyO3/maturin-action@v1.49.3
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-python-wheels, build-sdist]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare packages for upload
        run: |
          mkdir -p dist
          find artifacts -name "*.whl" -exec cp {} dist/ \;
          find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          packages-dir: dist/

  update-release:
    name: Update Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build-binaries, publish-crates, publish-pypi]
    if: always()
    steps:
      - name: Mark release as published
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
