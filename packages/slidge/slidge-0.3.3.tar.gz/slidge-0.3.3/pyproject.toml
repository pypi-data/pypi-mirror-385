[project]
name = "slidge"
description = "XMPP bridging framework"
requires-python = ">= 3.11"
dependencies = [
    "aiohttp[speedups]>=3.11.11,<4",
    "alembic>=1.14.0,<2",
    "configargparse>=1.7,<2",
    "defusedxml>=0.7.1",
    "pillow>=11.0.0,<12",
    "python-magic>=0.4.27,<0.5",
    "qrcode>=8.0,<9",
    "slixmpp>=1.10.0,<2",
    "sqlalchemy>=2,<3",
    "thumbhash>=0.1.2",
]
authors = [
  {name = "Nicolas Cedilnik", email = "nicoco@nicoco.fr"},
]
license = "AGPL-3.0-or-later"
classifiers = [
    "Topic :: Internet :: XMPP",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["xmpp", "gateway", "bridge", "instant messaging"]
dynamic = ["version"]
readme = "README.md"

[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["slidge*"]

[tool.setuptools_scm]

[project.scripts]
slidge = 'slidge.main:main'

[project.urls]
Homepage = "https://codeberg.org/slidge/"
Issues = "https://codeberg.org/slidge/slidge/issues"
Repository = "https://codeberg.org/slidge/slidge/"
"Chat room" = "https://conference.nicoco.fr:5281/muc_log/slidge/"
Documentation = "https://slidge.im/docs/slidge/main"
changelog = "https://codeberg.org/slidge/slidge/releases"

[dependency-groups]
dev = [
    "coverage>=7.6.10",
    "emoji>=2.14.0",
    "furo>=2024.8.6",
    "mypy>=1.14.1",
    "pre-commit>=4.0.1",
    "pygments>=2.18.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "ruff>=0.8.4",
    "sphinx>=8.1.3",
    "sphinx-argparse>=0.5.2",
    "sphinx-autoapi>=3.4.0",
    "types-pillow>=10.2.0.20240822",
    "utidylib>=0.10",
    "xmldiff>=2.7.0",
    "slidge-sphinx-extensions>=0.2.1,<0.3",
]

[tool.mypy]
check_untyped_defs = true
files = ["slidge", "superduper"]
exclude = ["tests"]

[[tool.mypy.overrides]]
module = [
    "thumbhash",
    "configargparse",
    "qrcode",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "slidge.slixfix.*"
ignore_errors = true

[tool.ruff]
line-length = 88
exclude = ["xep_*", "tests"]

[tool.ruff.lint]
select = ["I"]

[tool.coverage.run]
source = ["slidge"]

[tool.coverage.report]
exclude_lines = [
    "if .*TYPE_CHECKING:",
    "raise NotImplementedError"
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
filterwarnings = [
    "ignore:The object should be created within an async function:DeprecationWarning:aiohttp",
    "ignore:.*pkg_resources.*:DeprecationWarning",
    "ignore::UserWarning:slidge",
    "ignore:coroutine 'XMLStream._end_stream_wait' was never awaited.*:RuntimeWarning"
]
log_cli = true
log_level = "DEBUG"

[[tool.uv.index]]
name = "codeberg"
url = "https://codeberg.org/api/packages/slidge/pypi/simple"
publish-url = "https://codeberg.org/api/packages/slidge/pypi"

[tool.git-cliff.remote.gitea]
owner = "slidge"
repo = "slidge"

[tool.git-cliff.changelog]
header = """
<!-- write something cool about the release here! -->

# Changes
"""
body = """
{% for group, all_commits in commits | group_by(attribute="group") %}
    {%- if group == "cfix" %}{% continue %}{%- endif %}
    ## {{ group | striptags | trim | upper_first }}
    {% for commit in all_commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | split(pat="\n") | first | upper_first | trim }} \
            ([`{{ commit.id | truncate(length=7, end="") }}`](./commit/{{ commit.id -}})\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
            {%- for cfix_commit in commits | filter(attribute="group", value="cfix") -%}
                {%- if cfix_commit.scope and commit.id is starting_with(cfix_commit.scope) -%}
                    , [`{{ cfix_commit.id | truncate(length=7, end="") }}`](./commit/{{ cfix_commit.id }}){% if cfix_commit.remote.username %} by @{{ cfix_commit.remote.username }}{%- endif -%}
                {%- endif -%}
            {%- endfor -%})\
    {% endfor %}
{% endfor %}\n
"""
footer = """
<!-- generated by git-cliff -->
"""

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = false
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^imprv", group = "<!-- 01 -->✨ Improvements" },
  { message = "^fix", group = "<!-- 02 -->🐛 Bug Fixes" },
  { message = "^compat", group = "<!-- 03 -->💑 Compatibility" },
  { message = "^refactor", group = "<!-- 04 -->🚜 Refactor" },
  { message = "^doc", group = "<!-- 05 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 06 -->⚡ Performance" },
  { message = "^style", group = "<!-- 07 -->🎨 Styling" },
  { message = "^test", group = "<!-- 08 -->🧪 Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^build\\(lockfile\\)", skip = true },
  { message = "^chore\\(lockfile\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 09 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 10 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 11 -->◀️ Revert" },
  { message = "^cfix", group = "cfix" },
  { message = ".*", group = "<!-- 13 -->💼 Other" },
]
