---
name: Pyspy Profiling Test

on:
  pull_request:
    branches:
      - 'develop'
      - 'develop-1.9'
    paths:
      - '**'
      - '!docs/**'
      - '!*.rst'
      - '!*.md'
      - '!datacube_ows/__init__.py'
      - '!.github/**'
      - '.github/workflows/pyspy-profiling.yaml'

  push:
    branches:
      - 'develop'
      - 'develop-1.9'
    paths:
      - '**'
      - '!docs/**'
      - '!*.rst'
      - '!*.md'
      - '!datacube_ows/__init__.py'
      - '!.github/**'
      - '.github/workflows/pyspy-profiling.yaml'

env:
  DOCKER_IMAGE: ghcr.io/opendatacube/ows:tests

permissions: {}

# When a PR is updated, cancel the jobs from the previous version. Merges
# do not define head_ref, so use run_id to never cancel those jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Get Git commit timestamps
      run: |
        TIMESTAMP=$(git log -1 --pretty=%ct pyproject.toml uv.lock datacube_ows)
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

    - name: Build Docker
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        file: Dockerfile
        context: .
        tags: ${{ env.DOCKER_IMAGE }}
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
      env:
        SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}

    # Run performance profiling
    - name: setup performance profiling with py-spy (stage 1 - run profiling containers)
      run: |
        export LOCAL_UID=$(id -u $USER)
        export LOCAL_GID=$(id -g $USER)
        export $(grep -v '^#' .env_simple | xargs)
        docker compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml up --quiet-pull -d
        sleep 10

    - name: set output container pid (stage 1 - get ows container pid)
      id: set-output-container-id
      run: |
        export LOCAL_UID=$(id -u $USER)
        export LOCAL_GID=$(id -g $USER)
        export $(grep -v '^#' .env_simple | xargs)
        echo "PID=$(docker inspect --format '{{.State.Pid}}' $(docker inspect -f '{{.Name}}' \
        $(docker compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml ps -q ows) \
        | cut -c2-))" > $GITHUB_OUTPUT

    - name: Run py-spy profiling (stage 1 - run profiling service)
      timeout-minutes: 1
      continue-on-error: true
      run: |
        export LOCAL_UID=$(id -u $USER)
        export LOCAL_GID=$(id -g $USER)
        export $(grep -v '^#' .env_simple | xargs)
        docker compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml \
        exec -T ows /bin/sh -c "cd /code && ./test_urls.sh &"
        docker compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml \
        run pyspy record -f speedscope -o ./artifacts/profile.json --duration 30 \
        --pid ${{steps.set-output-container-id.outputs.PID}} --subprocesses

    - name: Stop py-spy profiling after timeout (stage 1 - stop profiling)
      run: |
        export $(grep -v '^#' .env_simple | xargs)
        docker compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml down

    - name: Upload profile to artifact (stage 1 - Upload profiling svg to artifacts)
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: profile.json
        path: ./artifacts/profile.json
