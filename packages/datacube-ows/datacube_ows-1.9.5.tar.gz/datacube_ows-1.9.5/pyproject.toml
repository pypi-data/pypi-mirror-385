[project]
name = "datacube_ows"
dynamic = ["version"]
description = "Open Data Cube Open Web Services"
authors = [
    {name = "Open Data Cube", email = "earth.observation@ga.gov.au"},
]
dependencies = [
    "Babel",
    "Flask-Babel>3.0.0",
    "Pillow>=10.2.0",
    "affine",
    "antimeridian",
    "click",
    "datacube[performance,s3]>=1.9.10",
    "deepdiff",
    "flask",
    "fsspec",
    "geoalchemy2",
    "importlib_metadata",
    "lark",
    "lxml<6",
    "matplotlib",
    "numpy>=1.22",
    "prometheus_flask_exporter",
    "pyows",
    "pyparsing",
    "python_dateutil",
    "python_slugify",
    "rasterio",
    "regex",
    "requests",
    "scipy",
    "timezonefinder!=6.6.0",
    "urllib3",
    "xarray",
]
requires-python = ">=3.10.0"
readme = "README.rst"
license = "Apache-2.0"
keywords = ["datacube", "wms", "wcs"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]

[project.urls]
Homepage = "https://github.com/opendatacube/datacube-ows"

[dependency-groups]
doc = [
    "Sphinx",
    "sphinx-click",
]

[project.optional-dependencies]
dev = [
    "mypy",
    "pydevd-pycharm~=243.26053.29",
    "pylint",
    "ruff",
    "types-python-dateutil",
    "types-PyYAML",  # Used by metadata_importer.py.
    "types-requests",
]
ops = [
    "blinker",
    "gevent",
    "gunicorn>=22.0.0",
    "gunicorn[gevent]",
    "prometheus_client",
    "psycopg2",
    "sentry_sdk",
]
postgres = ["psycopg2"]
setup = ["setuptools", "setuptools_scm"]
test = [
    "flask-cors",
    "fsspec",
    "owslib>0.29.2",
    "psycopg2",
    "pytest",
    "pytest-helpers-namespace",
    "pytest_cov",
    "pytest_localserver",
    "pytest_mock",
]
all = ["datacube_ows[dev,ops,test]"]

[project.scripts]
datacube-ows = "datacube_ows.wsgi:main"
datacube-ows-cfg = "datacube_ows.cfg_parser_impl:main"
datacube-ows-update = "datacube_ows.update_ranges_impl:main"

[project.entry-points."datacube_ows.plugins.index"]
postgis = "datacube_ows.index.postgis.api:ows_index_driver_init"
postgres = "datacube_ows.index.postgres.api:ows_index_driver_init"

[tool.mypy]
python_version = "3.10"
allow_redefinition = true
enable_error_code = ["explicit-override"]
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
console_output_style = "times"

[tool.ruff]
extend-exclude = [
    "datacube_ows/_version.py",
    "docs/conf.py",
    "licenseheaders.py",
]

[tool.ruff.lint]
select = [
    "A",  # Don't shadow built-ins
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "E",  # pycodestyle errors
    "EXE", # flake8-executable
    "FLY", # flynt
    "FURB", # refurb
    "I",  # isort
    "RET", # flake8-ret
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "UP", # pyupgrade
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "T10", # flake8-debugger
]
ignore = [
    "B026",
    "E501",
    "RUF012",
    "RUF022",
]

[tool.ruff.lint.per-file-ignores]
# Using pytest_namespace requires assignment before importing pytest.
"integration_tests/conftest.py" = ["E402"]
# Multiline string, no good place for adding a noqa.
"integration_tests/cfg/ows_test_cfg.py" = ["RUF001"]

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[build-system]
requires = ["setuptools>=69", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
exclude = ["integration_tests", "tests"]
include = ["datacube*"]

[tool.setuptools_scm]
write_to = "datacube_ows/_version.py"
fallback_version = "1.9.5"
version_scheme = "post-release"
