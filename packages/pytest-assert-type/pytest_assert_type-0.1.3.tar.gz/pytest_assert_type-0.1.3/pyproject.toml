[build-system]
requires = ["uv_build"]
build-backend = "uv_build"

[project]
name = "pytest-assert-type"
version = "0.1.3"
description = "Use typing.assert_type() to test runtime behavior"
readme = "README.md"
authors = [
    { name = "Arseny Boykov (Bobronium)", email = "hi@bobronium.me" }
]
requires-python = ">=3.10"
license = { text = "MIT" }
keywords = ["pytest", "plugin", "subtests", "typing", "pydantic", "assert_type"]
classifiers = [
    "Framework :: Pytest",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    "pytest>=6.2.0",
    "pytest-subtests>=0.4",
    "pydantic>=2.0",
    "typing-extensions>=4.8; python_version < '3.12'",
]

[project.urls]
Homepage = "https://github.com/Bobronium/pytest-assert-type"
Source = "https://github.com/Bobronium/pytest-assert-type"
Issues = "https://github.com/Bobronium/pytest-assert-type/issues"

[project.entry-points.pytest11]
assert_type = "pytest_assert_type.plugin"

[project.optional-dependencies]
dev = [
    "pytest-assert-type[lint]",
    "pytest-assert-type[typecheck]",
    "pytest-assert-type[test]",
]
lint = [
    "ruff>=0.1.9",
]
typecheck = [
    "mypy>=1.18.2",
    "pyright>=1.1.406",
    "zuban>=0.1.0",
    "pluggy>=1.0",
]
test = [
    "typing-extensions",
    "pytest>=6.2.5",
    "pytest-cov>=7.0.0",
    "coverage>=7.10.7",
]


[project.scripts]
pytest_assert_type = "pytest_assert_type.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src"


[tool.coverage.run]
branch = true
source = ["src"]
# since pytest-cov has no option to overwrite the file, set it here
# and pass --data-file .coverage arg to the coverage runner
data_file = ".coverage.pytest-cov"
omit = [
    "src/pytest_assert_type/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]


[tool.ruff]
line-length = 100
target-version = "py310"


[tool.ruff.lint]

select = ["ALL"]
extend-safe-fixes = ["ALL"]
unfixable = ["T201"]

ignore = [
    "ANN401", # | allow Any
    "RUF001", # | allow cyrillic letters in comments
    "COM812", # | trailing comas are handled by ruff format
    "ISC001", # | recommended to be disabled when using ruff format
    "B904", #   | raise from: modern pythons preserve previous exceptions
    "EM101", #  | forbids using literal strings in exceptions
    "EM102", #  |
    "TRY003", # |
    "A003", #   | Class attribute `id` is shadowing a Python builtin â€” it's ok in class body
    "FIX001", # | Forbids using TODOs
    "FIX002", # |
    "TD001", #  |
    "TD002", #  |
    "TD003", #  |
    "PLC0415", # | Top level imports
    "SIM105",
    "S101"  # asserts
]

extend-ignore = [
    "D", # docstrings
    "C"
]


[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["ALL"]
"tools/*" = ["TID252"]
"__init__.py" = ["F401", "I001", "F811"]
"__about__.py" = ["ALL"]
"tests/*" = ["S101", "ANN", "ERA", "SLOT", "SLF", "PLW", "PT0", "N", "FIX", "TD", "B024", "PLE", "PYI", "PLC", "BLE", "S", "PERF"]
"data/*" = ["ALL"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["mcs"]

[tool.ruff.lint.isort]
force-single-line = true
sections = { "duper_compile_support" = ["duper._compile_support"] }
section-order = ["future", "duper_compile_support", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.mypy]
# are these possible to comply with?
# disallow_any_expr = true
# disallow_any_explicit = true
explicit_package_bases = true
disallow_any_unimported = true
disallow_any_decorated = true
disallow_any_generics = true
disallow_subclassing_any = true

# Untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# None and Optional handling
no_implicit_optional = true
strict_optional = true

# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
warn_incomplete_stub = true
warn_unused_configs = true

# Suppressing errors
ignore_errors = false
enable_error_code = "ignore-without-code"

# Miscellaneous strictness flags
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = false
strict_equality = true
strict = true
# enable once this is resolved: https://github.com/python/mypy/issues/14796
# no_silence_site_packages = true

# Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true
color_output = true
error_summary = true

