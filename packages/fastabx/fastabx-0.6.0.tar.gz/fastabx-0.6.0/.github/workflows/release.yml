name: Release Workflow

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Build wheel
    strategy:
      fail-fast: true
      matrix:
        include:
          - { os: "macos-14", torch-version: "2.6.0", torch-backend: "cpu" }
          - { os: "macos-14", torch-version: "2.7.1", torch-backend: "cpu" }
          - { os: "macos-14", torch-version: "2.8.0", torch-backend: "cpu" }
          - { os: "macos-14", torch-version: "2.9.0", torch-backend: "cpu" }
          - { os: "ubuntu-22.04", torch-version: "2.6.0", torch-backend: "cpu" }
          - { os: "ubuntu-22.04", torch-version: "2.6.0", torch-backend: "cu124" }
          - { os: "ubuntu-22.04", torch-version: "2.6.0", torch-backend: "cu126" }
          - { os: "ubuntu-22.04", torch-version: "2.7.1", torch-backend: "cpu" }
          - { os: "ubuntu-22.04", torch-version: "2.7.1", torch-backend: "cu126" }
          - { os: "ubuntu-22.04", torch-version: "2.7.1", torch-backend: "cu128" }
          - { os: "ubuntu-22.04", torch-version: "2.8.0", torch-backend: "cpu" }
          - { os: "ubuntu-22.04", torch-version: "2.8.0", torch-backend: "cu126" }
          - { os: "ubuntu-22.04", torch-version: "2.8.0", torch-backend: "cu128" }
          - { os: "ubuntu-22.04", torch-version: "2.8.0", torch-backend: "cu129" }
          - { os: "ubuntu-22.04", torch-version: "2.9.0", torch-backend: "cpu" }
          - { os: "ubuntu-22.04", torch-version: "2.9.0", torch-backend: "cu126" }
          - { os: "ubuntu-22.04", torch-version: "2.9.0", torch-backend: "cu128" }
          - { os: "ubuntu-22.04", torch-version: "2.9.0", torch-backend: "cu130" }
          - { os: "windows-latest", torch-version: "2.6.0", torch-backend: "cpu" }
          - { os: "windows-latest", torch-version: "2.6.0", torch-backend: "cu124" }
          - { os: "windows-latest", torch-version: "2.6.0", torch-backend: "cu126" }
          - { os: "windows-latest", torch-version: "2.7.1", torch-backend: "cpu" }
          - { os: "windows-latest", torch-version: "2.7.1", torch-backend: "cu126" }
          - { os: "windows-latest", torch-version: "2.7.1", torch-backend: "cu128" }
          - { os: "windows-latest", torch-version: "2.8.0", torch-backend: "cpu" }
          - { os: "windows-latest", torch-version: "2.8.0", torch-backend: "cu126" }
          - { os: "windows-latest", torch-version: "2.8.0", torch-backend: "cu128" }
          - { os: "windows-latest", torch-version: "2.8.0", torch-backend: "cu129" }
          - { os: "windows-latest", torch-version: "2.9.0", torch-backend: "cpu" }
          - { os: "windows-latest", torch-version: "2.9.0", torch-backend: "cu126" }
          - { os: "windows-latest", torch-version: "2.9.0", torch-backend: "cu128" }
          - { os: "windows-latest", torch-version: "2.9.0", torch-backend: "cu130" }
    env:
      GLIBC_VERSION: "2_34"
      DEFAULT_VERSION: "2.9.0"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check if this is the default version
        shell: bash
        run: |
          DEFAULT_BACKEND=$(jq -rn '{"Linux": "cu128", "Windows": "cpu", "macOS": "cpu"}["${{ runner.os }}"]')
          if [[ "${{ matrix.torch-version }}" == "$DEFAULT_VERSION" && "${{ matrix.torch-backend }}" == "$DEFAULT_BACKEND" ]]; then
            echo "IS_DEFAULT=true" >> $GITHUB_ENV
          else
            echo "IS_DEFAULT=false" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag name
        id: get_tag
        shell: bash
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install CUDA 12 on Linux
        if: ${{ runner.os == 'Linux' && matrix.torch-backend != 'cpu' && matrix.torch-backend != 'cu130' }}
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda-nvcc-12-9 cuda-libraries-dev-12.9
          echo "CUDA_HOME=/usr/local/cuda-12.9" >> $GITHUB_ENV
          echo "/usr/local/cuda-12.9/bin" >> $GITHUB_PATH

      - name: Install CUDA 13 on Linux
        if: ${{ runner.os == 'Linux' && matrix.torch-backend == 'cu130' }}
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda-nvcc-13-0 cuda-libraries-dev-13.0
          echo "CUDA_HOME=/usr/local/cuda-13.0" >> $GITHUB_ENV
          echo "/usr/local/cuda-13.0/bin" >> $GITHUB_PATH

      - name: Install CUDA 12 on Windows
        if: ${{ runner.os == 'Windows' && matrix.torch-backend != 'cpu' && matrix.torch-backend != 'cu130' }}
        shell: pwsh
        run: |
          $downloadUrl = "https://developer.download.nvidia.com/compute/cuda/12.9.1/local_installers/cuda_12.9.1_576.57_windows.exe"
          $dst = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9"
          New-Item -Path "cuda" -ItemType Directory
          New-Item -Path $dst -ItemType Directory
          & "C:\msys64\usr\bin\wget" $downloadUrl -O "cuda.exe" -q
          & 'C:\Program Files\7-Zip\7z' x "cuda.exe" -o"cuda"
          $directories = Get-ChildItem -Directory -Path "cuda"
          foreach ($dir in $directories) {
              $items = Get-ChildItem -Path (Join-Path "cuda" $dir.Name)
              foreach ($item in $items) {
                  if ($item.PSIsContainer) {
                      Write-Output "$($item.FullName)"
                      Copy-Item -Path "$($item.FullName)\*" -Destination $dst -Recurse -Force
                  }
              }
          }
          Write-Output "CUDA_HOME=$dst" >> $env:GITHUB_ENV
          Write-Output "$dst\bin" >> $env:GITHUB_PATH

      - name: Install CUDA 13 on Windows
        if: ${{ runner.os == 'Windows' && matrix.torch-backend == 'cu130' }}
        shell: pwsh
        run: |
          $downloadUrl = "https://developer.download.nvidia.com/compute/cuda/13.0.2/local_installers/cuda_13.0.2_windows.exe"
          $dst = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0"
          New-Item -Path "cuda" -ItemType Directory
          New-Item -Path $dst -ItemType Directory
          & "C:\msys64\usr\bin\wget" $downloadUrl -O "cuda.exe" -q
          & 'C:\Program Files\7-Zip\7z' x "cuda.exe" -o"cuda"
          $directories = Get-ChildItem -Directory -Path "cuda"
          foreach ($dir in $directories) {
              $items = Get-ChildItem -Path (Join-Path "cuda" $dir.Name)
              foreach ($item in $items) {
                  if ($item.PSIsContainer) {
                      Write-Output "$($item.FullName)"
                      Copy-Item -Path "$($item.FullName)\*" -Destination $dst -Recurse -Force
                  }
              }
          }
          Write-Output "CUDA_HOME=$dst" >> $env:GITHUB_ENV
          Write-Output "$dst\bin" >> $env:GITHUB_PATH

      - name: Check CUDA installation
        if: ${{ matrix.torch-backend != 'cpu' }}
        shell: bash
        run: |
          nvcc -V
          echo CUDA_HOME=$CUDA_HOME

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Override torch_version.json
        shell: bash
        run: |
          PLATFORM=$(jq -rn '{"Linux": "linux", "Windows": "win32", "macOS": "darwin"}["${{ runner.os }}"]')
          if [ $PLATFORM = "darwin" ]; then
            VERSION=${{ matrix.torch-version }}
          else
            VERSION=${{ matrix.torch-version }}+${{ matrix.torch-backend }}
          fi
          jq -n --arg platform "$PLATFORM" --arg version "$VERSION" '{($platform): $version}' > src/fastabx/torch_version.json

      - name: Override latest git tag
        shell: bash
        env:
          TAG: ${{ steps.get_tag.outputs.TAG_NAME }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add src/fastabx/torch_version.json
          git commit -m "update" || true
          git tag --force $TAG

      - name: Build wheel
        shell: bash
        run: |
          uv venv -p 3.12
          uv pip install setuptools setuptools-scm numpy ninja
          uv pip install torch==${{ matrix.torch-version }} --index-url https://download.pytorch.org/whl/${{ matrix.torch-backend }}
          uv build --wheel --no-build-isolation

      - name: Relabel the Linux wheel
        if: runner.os == 'Linux'
        run: |
          uvx --with patchelf auditwheel repair ./dist/*abi3-linux*.whl -w ./dist --plat manylinux_${GLIBC_VERSION}_x86_64 --exclude "libtorch*" --exclude "libc10*" --exclude "libcu*"
          rm ./dist/*abi3-linux*.whl

      - name: Copy the wheel with torch version and backend
        shell: bash
        run: |
          wheel=$(ls ./dist/fastabx-*.whl)
          if [ "$IS_DEFAULT" = true ]; then
            cp "$wheel" "${wheel/-cp/+${{ matrix.torch-backend }}.torch${{ matrix.torch-version }}-cp}"
          else
            mv "$wheel" "${wheel/-cp/+${{ matrix.torch-backend }}.torch${{ matrix.torch-version }}-cp}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.torch-backend }}-${{ matrix.torch-version }}
          path: ./dist/*

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move the artifacts
        run: |
          mkdir ./dist
          mv ./artifacts/**/*.whl ./dist

      - name: Build sdist
        run: uv build --sdist

      - name: List artifacts
        run: find ./dist

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.get_tag.outputs.TAG_NAME }}
        run: gh release create "$TAG" ./dist/*

      - name: Remove non default wheels
        run:
          rm ./dist/*torch*.whl

      - name: Upload to PyPI
        run: uv publish -t ${{ secrets.UV_PUBLISH_TOKEN }}
