#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –≤ LaraQueue.

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–∏.
"""

import logging
import time
import random
import json
from redis import Redis
from lara_queue import Queue, RetryStrategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def simulate_work(duration_range=(0.1, 2.0)):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–ª—É—á–∞–π–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."""
    duration = random.uniform(*duration_range)
    time.sleep(duration)
    return duration

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –º–µ—Ç—Ä–∏–∫."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    redis_client = Redis(host='localhost', port=6379, db=0)
    
    print("üìä –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –≤ LaraQueue")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    queue = Queue(
        client=redis_client,
        queue='metrics_demo',
        max_retries=2,
        retry_strategy=RetryStrategy.EXPONENTIAL,
        enable_metrics=True,  # –í–∫–ª—é—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_history_size=500  # –†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
    @queue.handler
    def process_email(data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∑–∞–¥–∞—á."""
        logger.info(f"üìß –û–±—Ä–∞–±–æ—Ç–∫–∞ email: {data}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        duration = simulate_work((0.2, 1.5))
        
        # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
        if random.random() < 0.1:
            raise ValueError("Email service temporarily unavailable")
        
        logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ {duration:.2f}s")
    
    @queue.handler
    def process_notification(data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        logger.info(f"üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        duration = simulate_work((0.1, 0.8))
        
        # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
        if random.random() < 0.05:
            raise ConnectionError("Notification service connection failed")
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {duration:.2f}s")
    
    @queue.handler
    def process_report(data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤."""
        logger.info(f"üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: {data}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥—É—é —Ä–∞–±–æ—Ç—É
        duration = simulate_work((1.0, 3.0))
        
        # 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
        if random.random() < 0.15:
            raise RuntimeError("Report generation failed")
        
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {duration:.2f}s")
    
    @queue.handler
    def process_analytics(data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {data}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        duration = simulate_work((0.5, 2.5))
        
        # 8% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
        if random.random() < 0.08:
            raise Exception("Analytics processing error")
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ {duration:.2f}s")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    def send_test_jobs():
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å."""
        job_types = [
            ('App\\Jobs\\EmailJob', {'recipient': 'user@example.com', 'subject': 'Test Email'}),
            ('App\\Jobs\\NotificationJob', {'user_id': 123, 'message': 'Test Notification'}),
            ('App\\Jobs\\ReportJob', {'type': 'daily', 'date': '2024-01-01'}),
            ('App\\Jobs\\AnalyticsJob', {'metric': 'page_views', 'period': 'hourly'})
        ]
        
        for job_class, job_data in job_types:
            queue.push(job_class, job_data)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {job_class}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    def display_metrics():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
        metrics = queue.get_metrics()
        if not metrics:
            print("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return
        
        print("\nüìä –¢–ï–ö–£–©–ò–ï –ú–ï–¢–†–ò–ö–ò")
        print("-" * 40)
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        general = metrics['general']
        print(f"üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {general['total_processed']}")
        print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {general['total_successful']}")
        print(f"  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {general['total_failed']}")
        print(f"  ‚Ä¢ Retry: {general['total_retries']}")
        print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {general['success_rate']:.1f}%")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {general['uptime_seconds']:.1f}s")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance = metrics['performance']
        print(f"\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {performance['avg_processing_time']:.3f}s")
        print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {performance['min_processing_time']:.3f}s")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {performance['max_processing_time']:.3f}s")
        print(f"  ‚Ä¢ Throughput: {performance['throughput_per_second']:.2f} –∑–∞–¥–∞—á/—Å–µ–∫")
        print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏: {performance['history_size']}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
        job_types = metrics['job_types']
        if job_types:
            print(f"\nüéØ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á:")
            for job_name, job_metrics in job_types.items():
                print(f"  ‚Ä¢ {job_name}:")
                print(f"    - –í—Å–µ–≥–æ: {job_metrics['total']}")
                print(f"    - –£—Å–ø–µ—à–Ω—ã—Ö: {job_metrics['successful']}")
                print(f"    - –ù–µ—É–¥–∞—á–Ω—ã—Ö: {job_metrics['failed']}")
                print(f"    - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {job_metrics['success_rate']:.1f}%")
                print(f"    - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {job_metrics['avg_processing_time']:.3f}s")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
        errors = metrics['errors']
        if errors['error_counts']:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for error_type, count in errors['error_counts'].items():
                print(f"  ‚Ä¢ {error_type}: {count}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á
    def display_recent_jobs(limit=10):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
        recent_jobs = queue.get_recent_jobs(limit)
        if not recent_jobs:
            print("üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á")
            return
        
        print(f"\nüìù –ü–û–°–õ–ï–î–ù–ò–ï {len(recent_jobs)} –ó–ê–î–ê–ß")
        print("-" * 40)
        
        for job in recent_jobs:
            status = "‚úÖ" if job['success'] else "‚ùå"
            timestamp = time.strftime('%H:%M:%S', time.localtime(job['timestamp']))
            print(f"{status} {timestamp} | {job['name']} | {job['processing_time']:.3f}s")
            if not job['success'] and 'error' in job:
                print(f"    –û—à–∏–±–∫–∞: {job['error']}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
    def display_job_type_metrics(job_name):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á."""
        metrics = queue.get_job_type_metrics(job_name)
        if not metrics:
            print(f"‚ùå –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è {job_name}")
            return
        
        print(f"\nüéØ –ú–ï–¢–†–ò–ö–ò –î–õ–Ø {job_name}")
        print("-" * 40)
        print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {metrics['total']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {metrics['successful']}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {metrics['failed']}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics['success_rate']:.1f}%")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics['avg_processing_time']:.3f}s")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {metrics['min_processing_time']:.3f}s")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {metrics['max_processing_time']:.3f}s")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    def display_performance_summary():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        summary = queue.get_performance_summary()
        if not summary:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            return
        
        print(f"\n‚ö° –°–í–û–î–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("-" * 40)
        
        general = summary['general']
        performance = summary['performance']
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {general['total_processed']}")
        print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {general['success_rate']:.1f}%")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {general['uptime_seconds']:.1f}s")
        
        print(f"\nüöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(f"  ‚Ä¢ Throughput: {performance['throughput_per_second']:.2f} –∑–∞–¥–∞—á/—Å–µ–∫")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {performance['avg_processing_time']:.3f}s")
        print(f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {performance['min_processing_time']:.3f}s - {performance['max_processing_time']:.3f}s")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    for i in range(20):
        send_test_jobs()
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    
    print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á...")
    time.sleep(5)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    display_metrics()
    display_recent_jobs(15)
    display_performance_summary()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
    display_job_type_metrics('App\\Jobs\\EmailJob')
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫
    print(f"\nüîÑ –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫...")
    queue.reset_metrics()
    
    print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:")
    display_metrics()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –º–µ—Ç—Ä–∏–∫...")
    queue_no_metrics = Queue(
        client=redis_client,
        queue='no_metrics_demo',
        enable_metrics=False  # –û—Ç–∫–ª—é—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    )
    
    @queue_no_metrics.handler
    def simple_handler(data):
        logger.info(f"–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {data}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    queue_no_metrics.push('SimpleJob', {'data': 'test'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = queue_no_metrics.get_metrics()
    print(f"–ú–µ—Ç—Ä–∏–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –º–µ—Ç—Ä–∏–∫: {metrics}")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–µ—Ç—Ä–∏–∫:")
    print(f"‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print(f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã")
    print(f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏")
    print(f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print(f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()
