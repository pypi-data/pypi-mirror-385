#!/usr/bin/env python3
"""
Example of using improved retry mechanism in LaraQueue.

This example demonstrates various retry strategies and their configuration.
"""

import logging
import time
import random
from redis import Redis
from lara_queue import Queue, RetryStrategy

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """Main function with retry mechanism examples."""
    
    # Connect to Redis
    redis_client = Redis(host='localhost', port=6379, db=0)
    
    print("üîÑ Examples of using Retry mechanism in LaraQueue")
    print("=" * 60)
    
    # Example 1: Exponential retry strategy (default)
    print("\n1Ô∏è‚É£ Exponential retry strategy")
    print("-" * 40)
    
    queue_exponential = Queue(
        client=redis_client,
        queue='retry_exponential',
        max_retries=3,
        retry_strategy=RetryStrategy.EXPONENTIAL,
        retry_delay=2,  # Initial delay 2 seconds
        retry_max_delay=30,  # Maximum delay 30 seconds
        retry_jitter=True,  # Add randomness
        retry_backoff_multiplier=2.0,  # Multiply delay by 2 each time
        retry_exceptions=[ValueError, ConnectionError]  # Retry only for these exceptions
    )
    
    @queue_exponential.handler
    def handle_exponential_retry(data):
        """Handler with error simulation for retry demonstration."""
        logger.info(f"Processing job: {data}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—à–∏–±–∫–∏
        if random.random() < 0.7:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            raise ValueError("–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ retry")
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
    
    # –ü—Ä–∏–º–µ—Ä 2: –õ–∏–Ω–µ–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è retry
    print("\n2Ô∏è‚É£ –õ–∏–Ω–µ–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è retry")
    print("-" * 40)
    
    queue_linear = Queue(
        client=redis_client,
        queue='retry_linear',
        max_retries=4,
        retry_strategy=RetryStrategy.LINEAR,
        retry_delay=5,  # –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 5, 10, 15, 20 —Å–µ–∫—É–Ω–¥
        retry_jitter=False  # –ë–µ–∑ jitter –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    )
    
    @queue_linear.handler
    def handle_linear_retry(data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ª–∏–Ω–µ–π–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π retry."""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ (–ª–∏–Ω–µ–π–Ω–∞—è): {data}")
        
        if random.random() < 0.6:  # 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            raise ConnectionError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
    
    # –ü—Ä–∏–º–µ—Ä 3: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    print("\n3Ô∏è‚É£ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞")
    print("-" * 40)
    
    queue_fixed = Queue(
        client=redis_client,
        queue='retry_fixed',
        max_retries=3,
        retry_strategy=RetryStrategy.FIXED,
        retry_delay=10,  # –í—Å–µ–≥–¥–∞ 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
        retry_jitter=True  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    )
    
    @queue_fixed.handler
    def handle_fixed_retry(data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è): {data}")
        
        if random.random() < 0.5:  # 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            raise RuntimeError("–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
    
    # –ü—Ä–∏–º–µ—Ä 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è retry
    print("\n4Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è retry")
    print("-" * 40)
    
    def custom_retry_delay(attempt: int) -> int:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏."""
        # Fibonacci-based delay: 1, 1, 2, 3, 5, 8, 13...
        if attempt <= 1:
            return 1
        elif attempt == 2:
            return 1
        else:
            a, b = 1, 1
            for _ in range(attempt - 2):
                a, b = b, a + b
            return min(b, 20)  # –ú–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥
    
    queue_custom = Queue(
        client=redis_client,
        queue='retry_custom',
        max_retries=5,
        retry_strategy=RetryStrategy.CUSTOM,
        retry_custom_function=custom_retry_delay,
        retry_exceptions=[Exception]  # Retry –¥–ª—è –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    )
    
    @queue_custom.handler
    def handle_custom_retry(data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π retry."""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è): {data}")
        
        if random.random() < 0.8:  # 80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            raise Exception("–û—à–∏–±–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ retry")
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
    
    # –ü—Ä–∏–º–µ—Ä 5: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\n5Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ retry")
    print("-" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_data = [
        {'task_id': 1, 'type': 'email', 'recipient': 'user1@example.com'},
        {'task_id': 2, 'type': 'notification', 'message': 'Hello World'},
        {'task_id': 3, 'type': 'report', 'data': 'analytics_data'},
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
    for data in test_data:
        queue_exponential.push('TestJob', data)
        queue_linear.push('TestJob', data)
        queue_fixed.push('TestJob', data)
        queue_custom.push('TestJob', data)
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏):")
    for name, queue in [
        ("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è", queue_exponential),
        ("–õ–∏–Ω–µ–π–Ω–∞—è", queue_linear),
        ("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", queue_fixed),
        ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è", queue_custom)
    ]:
        stats = queue.get_retry_statistics()
        print(f"  {name}: {stats['total_retries']} retry, {stats['success_rate']:.1f}% —É—Å–ø–µ—Ö")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\nüîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ retry –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    queue_exponential.update_retry_config(
        max_retries=5,
        retry_delay=1,
        retry_max_delay=60
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    updated_stats = queue_exponential.get_retry_statistics()
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {updated_stats['current_retry_config']}")
    
    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("‚Ä¢ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤ —Å–µ—Ç–∏/–ë–î")
    print("‚Ä¢ –õ–∏–Ω–µ–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫")
    print("‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤")
    print("‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ retry")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ jitter=True –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd")
    print("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ retry_exceptions –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫")
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö)
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ 'retry_exponential'...")
        # queue_exponential.listen()  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry:")
        for name, queue in [
            ("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è", queue_exponential),
            ("–õ–∏–Ω–µ–π–Ω–∞—è", queue_linear),
            ("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", queue_fixed),
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è", queue_custom)
        ]:
            stats = queue.get_retry_statistics()
            print(f"  {name}:")
            print(f"    –í—Å–µ–≥–æ retry: {stats['total_retries']}")
            print(f"    –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_retries']}")
            print(f"    –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_retries']}")
            print(f"    –í dead letter: {stats['dead_letter_jobs']}")
            print(f"    –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")

if __name__ == "__main__":
    main()
