"""Manual test script for interactive testing with Redis and Laravel.

This script is not run by pytest. Use it for manual testing:
    python -m tests.test_manual

Requirements:
- Redis server running on localhost:6379
- Optional: Laravel application with queue worker
"""
import sys
import time
from redis import Redis
from lara_queue import Queue


def test_push_to_laravel():
    """Test 1: Push a job to Laravel queue."""
    print("\n" + "="*60)
    print("TEST 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Laravel –æ—á–µ—Ä–µ–¥—å")
    print("="*60)
    
    try:
        r = Redis(host='localhost', port=6379, db=0, decode_responses=False)
        r.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω: redis-server")
        return False
    
    queue = Queue(r, queue='laravel')
    
    job_data = {
        'a': 'Hello',
        'b': 'from',
        'c': 'Python!'
    }
    
    try:
        queue.push('App\\Jobs\\TestJob', job_data)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å 'laravel'")
        print(f"   –î–∞–Ω–Ω—ã–µ: {job_data}")
        print("\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ Laravel worker:")
        print("   php artisan queue:work --queue=laravel")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False


def test_listen_for_jobs():
    """Test 2: Listen for jobs from Laravel."""
    import pytest
    pytest.skip("Manual test - requires Laravel to send jobs. Run manually with: python -m tests.test_manual")

    print("\n" + "="*60)
    print("TEST 2: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ Python –æ—á–µ—Ä–µ–¥–∏")
    print("="*60)
    
    try:
        r = Redis(host='localhost', port=6379, db=0, decode_responses=False)
        r.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
        return False
    
    queue = Queue(r, queue='python')
    
    print("\nüìã –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –æ—Ç Laravel...")
    print("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ Laravel:")
    print("   dispatch(new TestJob('a', 'b', 'c'))->onQueue('python');")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    jobs_received = [0]  # Use list to modify in nested function
    
    @queue.handler
    def handle(data):
        jobs_received[0] += 1
        print(f"\n{'='*60}")
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{jobs_received[0]}")
        print(f"{'='*60}")
        print(f"–ò–º—è –∑–∞–¥–∞—á–∏: {data['name']}")
        print(f"–î–∞–Ω–Ω—ã–µ: {data['data']}")
        print(f"{'='*60}\n")
    
    try:
        queue.listen()
    except KeyboardInterrupt:
        print(f"\n\n‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {jobs_received[0]}")
        return True
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_check_redis_queue():
    """Test 3: Check what's in the Redis queue."""
    print("\n" + "="*60)
    print("TEST 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Redis –æ—á–µ—Ä–µ–¥–∏")
    print("="*60)
    
    try:
        r = Redis(host='localhost', port=6379, db=0, decode_responses=False)
        r.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
        return False
    
    queues_to_check = ['laravel', 'python', 'default']
    
    for queue_name in queues_to_check:
        key = f'laravel_database_queues:{queue_name}'
        length = r.llen(key)
        print(f"\n–û—á–µ—Ä–µ–¥—å '{queue_name}': {length} –∑–∞–¥–∞—á")
        
        if length > 0:
            # Show first job without removing it
            job = r.lindex(key, 0)
            if job:
                import json
                try:
                    job_data = json.loads(job)
                    print(f"  –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: {job_data.get('data', {}).get('commandName', 'N/A')}")
                except:
                    print(f"  –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: {job[:100]}...")
    
    return True


def main():
    """Main menu for manual testing."""
    print("\n" + "="*60)
    print("üß™ LaraQueue - –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("="*60)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
        print("  1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Laravel")
        print("  2. –ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å Python")
        print("  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–µ–π Redis")
        print("  4. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç 1, –∑–∞—Ç–µ–º —Ç–µ—Å—Ç 2")
        print("  0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == '1':
            test_push_to_laravel()
        elif choice == '2':
            test_listen_for_jobs()
        elif choice == '3':
            test_check_redis_queue()
        elif choice == '4':
            if test_push_to_laravel():
                time.sleep(1)
                test_listen_for_jobs()
        elif choice == '0':
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚õî –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(0)

