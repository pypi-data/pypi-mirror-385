"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .studentplacementlist import StudentPlacementList, StudentPlacementListTypedDict
from meitner.types import BaseModel
from meitner.utils import FieldMetadata, QueryParamMetadata
from typing import Awaitable, Callable, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class StudentPlacementListRequestTypedDict(TypedDict):
    limit: NotRequired[int]
    r"""The maximum number of StudentPlacements to return (default: 50) when listing StudentPlacements"""
    offset: NotRequired[int]
    r"""The number of StudentPlacements to skip before starting to return results (default: 0) when listing StudentPlacements"""


class StudentPlacementListRequest(BaseModel):
    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""The maximum number of StudentPlacements to return (default: 50) when listing StudentPlacements"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""The number of StudentPlacements to skip before starting to return results (default: 0) when listing StudentPlacements"""


class StudentPlacementListResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: StudentPlacementListTypedDict


class StudentPlacementListResponse(BaseModel):
    next: Union[
        Callable[[], Optional[StudentPlacementListResponse]],
        Callable[[], Awaitable[Optional[StudentPlacementListResponse]]],
    ]

    headers: Dict[str, List[str]]

    result: StudentPlacementList
