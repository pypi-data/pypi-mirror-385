"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .group import Group, GroupTypedDict
from meitner.types import BaseModel
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class GroupSearchPaginationTypedDict(TypedDict):
    r"""Pagination information"""

    offset: int
    r"""Number of items to skip from the beginning of the result set"""
    limit: int
    r"""Maximum number of items to return in the result set"""
    total: int
    r"""Total number of items available for pagination"""


class GroupSearchPagination(BaseModel):
    r"""Pagination information"""

    offset: int
    r"""Number of items to skip from the beginning of the result set"""

    limit: int
    r"""Maximum number of items to return in the result set"""

    total: int
    r"""Total number of items available for pagination"""


class GroupSearchResponseTypedDict(TypedDict):
    r"""Response for Group Search operation - returns filtered Group results"""

    data: NotRequired[List[GroupTypedDict]]
    r"""Array of Group objects"""
    pagination: NotRequired[GroupSearchPaginationTypedDict]
    r"""Pagination information"""


class GroupSearchResponse(BaseModel):
    r"""Response for Group Search operation - returns filtered Group results"""

    data: Optional[List[Group]] = None
    r"""Array of Group objects"""

    pagination: Optional[GroupSearchPagination] = None
    r"""Pagination information"""
