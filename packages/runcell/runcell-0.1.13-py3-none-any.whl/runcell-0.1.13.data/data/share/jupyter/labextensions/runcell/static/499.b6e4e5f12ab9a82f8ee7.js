"use strict";(self.webpackChunkruncell=self.webpackChunkruncell||[]).push([[499],{20499:(e,n,t)=>{t.r(n),t.d(n,{render:()=>D});var r=t(18118),i=t(9246),a=t(60269),o=t(87186),d=t(87622),l=t(43750);function s(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:c(e),edges:g(e)};return(0,o.i)(e.graph())||(n.value=(0,d.c)(e.graph())),n}function c(e){return(0,l.m)(e.nodes(),function(n){var t=e.node(n),r=e.parent(n),i={v:n};return(0,o.i)(t)||(i.value=t),(0,o.i)(r)||(i.parent=r),i})}function g(e){return(0,l.m)(e.edges(),function(n){var t=e.edge(n),r={v:n.v,w:n.w};return(0,o.i)(n.name)||(r.name=n.name),(0,o.i)(t)||(r.value=t),r})}var u=new Map,f=new Map,h=new Map,p=(0,r._)(()=>{f.clear(),h.clear(),u.clear()},"clear"),w=(0,r._)((e,n)=>{const t=f.get(n)||[];return r.l.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)},"isDescendant"),v=(0,r._)((e,n)=>{const t=f.get(n)||[];return r.l.info("Descendants of ",n," is ",t),r.l.info("Edge is ",e),e.v!==n&&e.w!==n&&(t?t.includes(e.v)||w(e.v,n)||w(e.w,n)||t.includes(e.w):(r.l.debug("Tilt, ",n,",not in descendants"),!1))},"edgeInCluster"),y=(0,r._)((e,n,t,i)=>{r.l.warn("Copying children of ",e,"root",i,"data",n.node(e),i);const a=n.children(e)||[];e!==i&&a.push(e),r.l.warn("Copying (nodes) clusterId",e,"nodes",a),a.forEach(a=>{if(n.children(a).length>0)y(a,n,t,i);else{const o=n.node(a);r.l.info("cp ",a," to ",i," with parent ",e),t.setNode(a,o),i!==n.parent(a)&&(r.l.warn("Setting parent",a,n.parent(a)),t.setParent(a,n.parent(a))),e!==i&&a!==e?(r.l.debug("Setting parent",a,e),t.setParent(a,e)):(r.l.info("In copy ",e,"root",i,"data",n.node(e),i),r.l.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==i,"node!==clusterId",a!==e));const d=n.edges(a);r.l.debug("Copying Edges",d),d.forEach(a=>{r.l.info("Edge",a);const o=n.edge(a.v,a.w,a.name);r.l.info("Edge data",o,i);try{v(a,i)?(r.l.info("Copying as ",a.v,a.w,o,a.name),t.setEdge(a.v,a.w,o,a.name),r.l.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):r.l.info("Skipping copy of edge ",a.v,"--\x3e",a.w," rootId: ",i," clusterId:",e)}catch(e){r.l.error(e)}})}r.l.debug("Removing node",a),n.removeNode(a)})},"copy"),m=(0,r._)((e,n)=>{const t=n.children(e);let r=[...t];for(const i of t)h.set(i,e),r=[...r,...m(i,n)];return r},"extractDescendants"),X=(0,r._)((e,n,t)=>{const r=e.edges().filter(e=>e.v===n||e.w===n),i=e.edges().filter(e=>e.v===t||e.w===t),a=r.map(e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w})),o=i.map(e=>({v:e.v,w:e.w}));return a.filter(e=>o.some(n=>e.v===n.v&&e.w===n.w))},"findCommonEdges"),b=(0,r._)((e,n,t)=>{const i=n.children(e);if(r.l.trace("Searching children of id ",e,i),i.length<1)return e;let a;for(const e of i){const r=b(e,n,t),i=X(n,t,r);if(r){if(!(i.length>0))return r;a=r}}return a},"findNonClusterChild"),E=(0,r._)(e=>u.has(e)&&u.get(e).externalConnections&&u.has(e)?u.get(e).id:e,"getAnchorId"),N=(0,r._)((e,n)=>{if(!e||n>10)r.l.debug("Opting out, no graph ");else{r.l.debug("Opting in, graph "),e.nodes().forEach(function(n){e.children(n).length>0&&(r.l.warn("Cluster identified",n," Replacement id in edges: ",b(n,e,n)),f.set(n,m(n,e)),u.set(n,{id:b(n,e,n),clusterData:e.node(n)}))}),e.nodes().forEach(function(n){const t=e.children(n),i=e.edges();t.length>0?(r.l.debug("Cluster identified",n,f),i.forEach(e=>{w(e.v,n)^w(e.w,n)&&(r.l.warn("Edge: ",e," leaves cluster ",n),r.l.warn("Descendants of XXX ",n,": ",f.get(n)),u.get(n).externalConnections=!0)})):r.l.debug("Not a cluster ",n,f)});for(let n of u.keys()){const t=u.get(n).id,r=e.parent(t);r!==n&&u.has(r)&&!u.get(r).externalConnections&&(u.get(n).id=r)}e.edges().forEach(function(n){const t=e.edge(n);r.l.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),r.l.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let i=n.v,a=n.w;if(r.l.warn("Fix XXX",u,"ids:",n.v,n.w,"Translating: ",u.get(n.v)," --- ",u.get(n.w)),u.get(n.v)||u.get(n.w)){if(r.l.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),i=E(n.v),a=E(n.w),e.removeEdge(n.v,n.w,n.name),i!==n.v){const r=e.parent(i);u.get(r).externalConnections=!0,t.fromCluster=n.v}if(a!==n.w){const r=e.parent(a);u.get(r).externalConnections=!0,t.toCluster=n.w}r.l.warn("Fix Replacing with XXX",i,a,n.name),e.setEdge(i,a,t,n.name)}}),r.l.warn("Adjusted Graph",s(e)),C(e,0),r.l.trace(u)}},"adjustClustersAndEdges"),C=(0,r._)((e,n)=>{var t,a;if(r.l.warn("extractor - ",n,s(e),e.children("D")),n>10)return void r.l.error("Bailing out");let o=e.nodes(),d=!1;for(const n of o){const t=e.children(n);d=d||t.length>0}if(d){r.l.debug("Nodes = ",o,n);for(const d of o)if(r.l.debug("Extracting node",d,u,u.has(d)&&!u.get(d).externalConnections,!e.parent(d),e.node(d),e.children("D")," Depth ",n),u.has(d))if(!u.get(d).externalConnections&&e.children(d)&&e.children(d).length>0){r.l.warn("Cluster without external connections, without a parent and with children",d,n);let o="TB"===e.graph().rankdir?"LR":"TB";null!=(a=null==(t=u.get(d))?void 0:t.clusterData)&&a.dir&&(o=u.get(d).clusterData.dir,r.l.warn("Fixing dir",u.get(d).clusterData.dir,o));const l=new i.G({multigraph:!0,compound:!0}).setGraph({rankdir:o,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});r.l.warn("Old graph before copy",s(e)),y(d,e,l,d),e.setNode(d,{clusterNode:!0,id:d,clusterData:u.get(d).clusterData,label:u.get(d).label,graph:l}),r.l.warn("New graph after copy node: (",d,")",s(l)),r.l.debug("Old graph after copy",s(e))}else r.l.warn("Cluster ** ",d," **not meeting the criteria !externalConnections:",!u.get(d).externalConnections," no parent: ",!e.parent(d)," children ",e.children(d)&&e.children(d).length>0,e.children("D"),n),r.l.debug(u);else r.l.debug("Not a cluster",d,n);o=e.nodes(),r.l.warn("New list of nodes",o);for(const t of o){const i=e.node(t);r.l.warn(" Now next level",t,i),null!=i&&i.clusterNode&&C(i.graph,n+1)}}else r.l.debug("Done, no node has children",e.nodes())},"extractor"),x=(0,r._)((e,n)=>{if(0===n.length)return[];let t=Object.assign([],n);return n.forEach(n=>{const r=e.children(n),i=x(e,r);t=[...t,...i]}),t},"sorter"),S=(0,r._)(e=>x(e,e.children()),"sortNodesByHierarchy"),I=(0,r._)(async(e,n,t,i,o,d)=>{r.l.warn("Graph in recursive render:XAX",s(n),o);const l=n.graph().rankdir;r.l.trace("Dir in recursive render - dir:",l);const c=e.insert("g").attr("class","root");n.nodes()?r.l.info("Recursive render XXX",n.nodes()):r.l.info("No nodes found for",n),n.edges().length>0&&r.l.info("Recursive edges",n.edge(n.edges()[0]));const g=c.insert("g").attr("class","clusters"),f=c.insert("g").attr("class","edgePaths"),h=c.insert("g").attr("class","edgeLabels"),p=c.insert("g").attr("class","nodes");await Promise.all(n.nodes().map(async function(e){const a=n.node(e);if(void 0!==o){const t=JSON.parse(JSON.stringify(o.clusterData));r.l.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",t.height,"\nParent cluster",o.height),n.setNode(o.id,t),n.parent(e)||(r.l.trace("Setting parent",e,o.id),n.setParent(e,o.id,t))}if(r.l.info("(Insert) Node XXX"+e+": "+JSON.stringify(n.node(e))),null!=a&&a.clusterNode){r.l.info("Cluster identified XBX",e,a.width,n.node(e));const{ranksep:o,nodesep:l}=n.graph();a.graph.setGraph({...a.graph.graph(),ranksep:o+25,nodesep:l});const s=await I(p,a.graph,t,i,n.node(e),d),c=s.elem;(0,r.aA)(a,c),a.diff=s.diff||0,r.l.info("New compound node after recursive render XAX",e,"width",a.width,"height",a.height),(0,r.aB)(c,a)}else n.children(e).length>0?(r.l.trace("Cluster - the non recursive path XBX",e,a.id,a,a.width,"Graph:",n),r.l.trace(b(a.id,n)),u.set(a.id,{id:b(a.id,n),node:a})):(r.l.trace("Node - the non recursive path XAX",e,p,n.node(e),l),await(0,r.ai)(p,n.node(e),{config:d,dir:l}))})),await(0,r._)(async()=>{const e=n.edges().map(async function(e){const t=n.edge(e.v,e.w,e.name);r.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),r.l.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(n.edge(e))),r.l.info("Fix",u,"ids:",e.v,e.w,"Translating: ",u.get(e.v),u.get(e.w)),await(0,r.aE)(h,t)});await Promise.all(e)},"processEdges")(),r.l.info("Graph before layout:",JSON.stringify(s(n))),r.l.info("############################################# XXX"),r.l.info("###                Layout                 ### XXX"),r.l.info("############################################# XXX"),(0,a.l)(n),r.l.info("Graph after layout:",JSON.stringify(s(n)));let w=0,{subGraphTitleTotalMargin:v}=(0,r.an)(d);return await Promise.all(S(n).map(async function(e){var t;const i=n.node(e);if(r.l.info("Position XBX => "+e+": ("+i.x,","+i.y,") width: ",i.width," height: ",i.height),null!=i&&i.clusterNode)i.y+=v,r.l.info("A tainted cluster node XBX1",e,i.id,i.width,i.height,i.x,i.y,n.parent(e)),u.get(i.id).node=i,(0,r.aj)(i);else if(n.children(e).length>0){r.l.info("A pure cluster node XBX1",e,i.id,i.x,i.y,i.width,i.height,n.parent(e)),i.height+=v,n.node(i.parentId);const a=(null==i?void 0:i.padding)/2||0,o=(null==(t=null==i?void 0:i.labelBBox)?void 0:t.height)||0,d=o-a||0;r.l.debug("OffsetY",d,"labelHeight",o,"halfPadding",a),await(0,r.ah)(g,i),u.get(i.id).node=i}else{const e=n.node(i.parentId);i.y+=v/2,r.l.info("A regular node XBX1 - using the padding",i.id,"parent",i.parentId,i.width,i.height,i.x,i.y,"offsetY",i.offsetY,"parent",e,null==e?void 0:e.offsetY,i),(0,r.aj)(i)}})),n.edges().forEach(function(e){const a=n.edge(e);r.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(a),a),a.points.forEach(e=>e.y+=v/2);const o=n.node(e.v);var d=n.node(e.w);const l=(0,r.aC)(f,a,u,t,o,d,i);(0,r.aD)(a,l)}),n.nodes().forEach(function(e){const t=n.node(e);r.l.info(e,t.type,t.diff),t.isGroup&&(w=t.diff)}),r.l.warn("Returning from recursive render XAX",c,w),{elem:c,diff:w}},"recursiveRender"),D=(0,r._)(async(e,n)=>{var t,a,o,d,l,c;const g=new i.G({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:(null==(t=e.config)?void 0:t.nodeSpacing)||(null==(o=null==(a=e.config)?void 0:a.flowchart)?void 0:o.nodeSpacing)||e.nodeSpacing,ranksep:(null==(d=e.config)?void 0:d.rankSpacing)||(null==(c=null==(l=e.config)?void 0:l.flowchart)?void 0:c.rankSpacing)||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),u=n.select("g");(0,r.aw)(u,e.markers,e.type,e.diagramId),(0,r.ax)(),(0,r.ay)(),(0,r.az)(),p(),e.nodes.forEach(e=>{g.setNode(e.id,{...e}),e.parentId&&g.setParent(e.id,e.parentId)}),r.l.debug("Edges:",e.edges),e.edges.forEach(e=>{if(e.start===e.end){const n=e.start,t=n+"---"+n+"---1",r=n+"---"+n+"---2",i=g.node(n);g.setNode(t,{domId:t,id:t,parentId:i.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),g.setParent(t,i.parentId),g.setNode(r,{domId:r,id:r,parentId:i.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),g.setParent(r,i.parentId);const a=structuredClone(e),o=structuredClone(e),d=structuredClone(e);a.label="",a.arrowTypeEnd="none",a.id=n+"-cyclic-special-1",o.arrowTypeStart="none",o.arrowTypeEnd="none",o.id=n+"-cyclic-special-mid",d.label="",i.isGroup&&(a.fromCluster=n,d.toCluster=n),d.id=n+"-cyclic-special-2",d.arrowTypeStart="none",g.setEdge(n,t,a,n+"-cyclic-special-0"),g.setEdge(t,r,o,n+"-cyclic-special-1"),g.setEdge(r,n,d,n+"-cyc<lic-special-2")}else g.setEdge(e.start,e.end,{...e},e.id)}),r.l.warn("Graph at first:",JSON.stringify(s(g))),N(g),r.l.warn("Graph after XAX:",JSON.stringify(s(g)));const f=(0,r.c)();await I(u,g,e.type,e.diagramId,void 0,f)},"render")},87622:(e,n,t)=>{t.d(n,{c:()=>a});var r=t(87186),i=4;function a(e){return(0,r.b)(e,i)}}}]);