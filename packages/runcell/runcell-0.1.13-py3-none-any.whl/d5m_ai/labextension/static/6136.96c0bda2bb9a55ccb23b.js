"use strict";(self.webpackChunkruncell=self.webpackChunkruncell||[]).push([[6136],{45412:(t,r,e)=>{function n(t,r){var e,n,o;t.accDescr&&(null==(e=r.setAccDescription)||e.call(r,t.accDescr)),t.accTitle&&(null==(n=r.setAccTitle)||n.call(r,t.accTitle)),t.title&&(null==(o=r.setDiagramTitle)||o.call(r,t.title))}e.d(r,{p:()=>n}),(0,e(18118)._)(n,"populateCommonDb")},66136:(t,r,e)=>{e.d(r,{diagram:()=>pt});var n=e(45412),o=e(86189),a=e(18118),c=e(19209),i={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},s=a.H.gitGraph,d=(0,a._)(()=>(0,a.F)({...s,...(0,a.G)().gitGraph}),"getConfig"),h=new o.I(()=>{const t=d(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function l(){return(0,a.I)({length:7})}function m(t,r){const e=Object.create(null);return t.reduce((t,n)=>{const o=r(n);return e[o]||(e[o]=!0,t.push(n)),t},[])}(0,a._)(l,"getID"),(0,a._)(m,"uniqBy");var $=(0,a._)(function(t){h.records.direction=t},"setDirection"),y=(0,a._)(function(t){a.l.debug("options str",t),t=(t=null==t?void 0:t.trim())||"{}";try{h.records.options=JSON.parse(t)}catch(t){a.l.error("error while parsing gitGraph options",t.message)}},"setOptions"),g=(0,a._)(function(){return h.records.options},"getOptions"),p=(0,a._)(function(t){let r=t.msg,e=t.id;const n=t.type;let o=t.tags;a.l.info("commit",r,e,n,o),a.l.debug("Entering commit:",r,e,n,o);const c=d();e=a.k.sanitizeText(e,c),r=a.k.sanitizeText(r,c),o=null==o?void 0:o.map(t=>a.k.sanitizeText(t,c));const s={id:e||h.records.seq+"-"+l(),message:r,seq:h.records.seq++,type:n??i.NORMAL,tags:o??[],parents:null==h.records.head?[]:[h.records.head.id],branch:h.records.currBranch};h.records.head=s,a.l.info("main branch",c.mainBranchName),h.records.commits.has(s.id)&&a.l.warn(`Commit ID ${s.id} already exists`),h.records.commits.set(s.id,s),h.records.branches.set(h.records.currBranch,s.id),a.l.debug("in pushCommit "+s.id)},"commit"),u=(0,a._)(function(t){let r=t.name;const e=t.order;if(r=a.k.sanitizeText(r,d()),h.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);h.records.branches.set(r,null!=h.records.head?h.records.head.id:null),h.records.branchConfig.set(r,{name:r,order:e}),b(r),a.l.debug("in createBranch")},"branch"),x=(0,a._)(t=>{let r=t.branch,e=t.id;const n=t.type,o=t.tags,c=d();r=a.k.sanitizeText(r,c),e&&(e=a.k.sanitizeText(e,c));const s=h.records.branches.get(h.records.currBranch),m=h.records.branches.get(r),$=s?h.records.commits.get(s):void 0,y=m?h.records.commits.get(m):void 0;if($&&y&&$.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(h.records.currBranch===r){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(void 0===$||!$){const t=new Error(`Incorrect usage of "merge". Current branch (${h.records.currBranch})has no commits`);throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},t}if(!h.records.branches.has(r)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},t}if(void 0===y||!y){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},t}if($===y){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(e&&h.records.commits.has(e)){const t=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom id");throw t.hash={text:`merge ${r} ${e} ${n} ${null==o?void 0:o.join(" ")}`,token:`merge ${r} ${e} ${n} ${null==o?void 0:o.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${n} ${null==o?void 0:o.join(" ")}`]},t}const g=m||"",p={id:e||`${h.records.seq}-${l()}`,message:`merged branch ${r} into ${h.records.currBranch}`,seq:h.records.seq++,parents:null==h.records.head?[]:[h.records.head.id,g],branch:h.records.currBranch,type:i.MERGE,customType:n,customId:!!e,tags:o??[]};h.records.head=p,h.records.commits.set(p.id,p),h.records.branches.set(h.records.currBranch,p.id),a.l.debug(h.records.branches),a.l.debug("in mergeBranch")},"merge"),f=(0,a._)(function(t){let r=t.id,e=t.targetId,n=t.tags,o=t.parent;a.l.debug("Entering cherryPick:",r,e,n);const c=d();if(r=a.k.sanitizeText(r,c),e=a.k.sanitizeText(e,c),n=null==n?void 0:n.map(t=>a.k.sanitizeText(t,c)),o=a.k.sanitizeText(o,c),!r||!h.records.commits.has(r)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const s=h.records.commits.get(r);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&(!Array.isArray(s.parents)||!s.parents.includes(o)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const m=s.branch;if(s.type===i.MERGE&&!o)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!e||!h.records.commits.has(e)){if(m===h.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const t=h.records.branches.get(h.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${h.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const c=h.records.commits.get(t);if(void 0===c||!c){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${h.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const d={id:h.records.seq+"-"+l(),message:`cherry-picked ${null==s?void 0:s.message} into ${h.records.currBranch}`,seq:h.records.seq++,parents:null==h.records.head?[]:[h.records.head.id,s.id],branch:h.records.currBranch,type:i.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${s.id}${s.type===i.MERGE?`|parent:${o}`:""}`]};h.records.head=d,h.records.commits.set(d.id,d),h.records.branches.set(h.records.currBranch,d.id),a.l.debug(h.records.branches),a.l.debug("in cherryPick")}},"cherryPick"),b=(0,a._)(function(t){if(t=a.k.sanitizeText(t,d()),!h.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{h.records.currBranch=t;const r=h.records.branches.get(h.records.currBranch);h.records.head=void 0!==r&&r?h.records.commits.get(r)??null:null}},"checkout");function w(t,r,e){const n=t.indexOf(r);-1===n?t.push(e):t.splice(n,1,e)}function B(t){const r=t.reduce((t,r)=>t.seq>r.seq?t:r,t[0]);let e="";t.forEach(function(t){e+=t===r?"\t*":"\t|"});const n=[e,r.id,r.seq];for(const t in h.records.branches)h.records.branches.get(t)===r.id&&n.push(t);if(a.l.debug(n.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=h.records.commits.get(r.parents[0]);w(t,r,e),r.parents[1]&&t.push(h.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=h.records.commits.get(r.parents[0]);w(t,r,e)}}B(t=m(t,t=>t.id))}(0,a._)(w,"upsert"),(0,a._)(B,"prettyPrintCommitHistory");var v=(0,a._)(function(){a.l.debug(h.records.commits),B([L()[0]])},"prettyPrint"),E=(0,a._)(function(){h.reset(),(0,a.z)()},"clear"),k=(0,a._)(function(){return[...h.records.branchConfig.values()].map((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)}).sort((t,r)=>(t.order??0)-(r.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),C=(0,a._)(function(){return h.records.branches},"getBranches"),T=(0,a._)(function(){return h.records.commits},"getCommits"),L=(0,a._)(function(){const t=[...h.records.commits.values()];return t.forEach(function(t){a.l.debug(t.id)}),t.sort((t,r)=>t.seq-r.seq),t},"getCommitsArray"),_={commitType:i,getConfig:d,setDirection:$,setOptions:y,getOptions:g,commit:p,branch:u,merge:x,cherryPick:f,checkout:b,prettyPrint:v,clear:E,getBranchesAsObjArray:k,getBranches:C,getCommits:T,getCommitsArray:L,getCurrentBranch:(0,a._)(function(){return h.records.currBranch},"getCurrentBranch"),getDirection:(0,a._)(function(){return h.records.direction},"getDirection"),getHead:(0,a._)(function(){return h.records.head},"getHead"),setAccTitle:a.b,getAccTitle:a.a,getAccDescription:a.g,setAccDescription:a.s,setDiagramTitle:a.q,getDiagramTitle:a.t},M=(0,a._)((t,r)=>{(0,n.p)(t,r),t.dir&&r.setDirection(t.dir);for(const e of t.statements)P(e,r)},"populate"),P=(0,a._)((t,r)=>{const e={Commit:(0,a._)(t=>r.commit(R(t)),"Commit"),Branch:(0,a._)(t=>r.branch(I(t)),"Branch"),Merge:(0,a._)(t=>r.merge(A(t)),"Merge"),Checkout:(0,a._)(t=>r.checkout(G(t)),"Checkout"),CherryPicking:(0,a._)(t=>r.cherryPick(O(t)),"CherryPicking")}[t.$type];e?e(t):a.l.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),R=(0,a._)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?i[t.type]:i.NORMAL,tags:t.tags??void 0}),"parseCommit"),I=(0,a._)(t=>({name:t.name,order:t.order??0}),"parseBranch"),A=(0,a._)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?i[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),G=(0,a._)(t=>t.branch,"parseCheckout"),O=(0,a._)(t=>{var r;return{id:t.id,targetId:"",tags:0===(null==(r=t.tags)?void 0:r.length)?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),q={parse:(0,a._)(async t=>{const r=await(0,c.p)("gitGraph",t);a.l.debug(r),M(r,_)},"parse")},H=(0,a.c)(),z=null==H?void 0:H.gitGraph,D=10,S=40,N=new Map,W=new Map,j=new Map,F=[],K=0,Y="LR",U=(0,a._)(()=>{N.clear(),W.clear(),j.clear(),K=0,F=[],Y="LR"},"clear"),V=(0,a._)(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)}),r},"drawText"),J=(0,a._)(t=>{let r,e,n;return"BT"===Y?(e=(0,a._)((t,r)=>t<=r,"comparisonFunc"),n=1/0):(e=(0,a._)((t,r)=>t>=r,"comparisonFunc"),n=0),t.forEach(t=>{var o,a;const c="TB"===Y||"BT"==Y?null==(o=W.get(t))?void 0:o.y:null==(a=W.get(t))?void 0:a.x;void 0!==c&&e(c,n)&&(r=t,n=c)}),r},"findClosestParent"),Q=(0,a._)(t=>{let r="",e=1/0;return t.forEach(t=>{const n=W.get(t).y;n<=e&&(r=t,e=n)}),r||void 0},"findClosestParentBT"),X=(0,a._)((t,r,e)=>{let n=e,o=e;const a=[];t.forEach(t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(n=tt(e),o=Math.max(n,o)):a.push(e),rt(e,n)}),n=o,a.forEach(t=>{et(t,n,e)}),t.forEach(t=>{const e=r.get(t);if(null!=e&&e.parents.length){const t=Q(e.parents);n=W.get(t).y-S,n<=o&&(o=n);const r=N.get(e.branch).pos,a=n-D;W.set(e.id,{x:r,y:a})}})},"setParallelBTPos"),Z=(0,a._)(t=>{var r;const e=J(t.parents.filter(t=>null!==t));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const n=null==(r=W.get(e))?void 0:r.y;if(void 0===n)throw new Error(`Closest parent position not found for commit ${t.id}`);return n},"findClosestParentPos"),tt=(0,a._)(t=>Z(t)+S,"calculateCommitPosition"),rt=(0,a._)((t,r)=>{const e=N.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const n=e.pos,o=r+D;return W.set(t.id,{x:n,y:o}),{x:n,y:o}},"setCommitPosition"),et=(0,a._)((t,r,e)=>{const n=N.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const o=r+e,a=n.pos;W.set(t.id,{x:a,y:o})},"setRootPosition"),nt=(0,a._)((t,r,e,n,o,a)=>{if(a===i.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${o%8} ${n}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${o%8} ${n}-inner`);else if(a===i.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`);else{const c=t.append("circle");if(c.attr("cx",e.x),c.attr("cy",e.y),c.attr("r",r.type===i.MERGE?9:10),c.attr("class",`commit ${r.id} commit${o%8}`),a===i.MERGE){const a=t.append("circle");a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",6),a.attr("class",`commit ${n} ${r.id} commit${o%8}`)}a===i.REVERSE&&t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${n} ${r.id} commit${o%8}`)}},"drawCommitBullet"),ot=(0,a._)((t,r,e,n)=>{var o;if(r.type!==i.CHERRY_PICK&&(r.customId&&r.type===i.MERGE||r.type!==i.MERGE)&&null!=z&&z.showCommitLabel){const a=t.append("g"),c=a.insert("rect").attr("class","commit-label-bkg"),i=a.append("text").attr("x",n).attr("y",e.y+25).attr("class","commit-label").text(r.id),s=null==(o=i.node())?void 0:o.getBBox();if(s&&(c.attr("x",e.posWithOffset-s.width/2-2).attr("y",e.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===Y||"BT"===Y?(c.attr("x",e.x-(s.width+16+5)).attr("y",e.y-12),i.attr("x",e.x-(s.width+16)).attr("y",e.y+s.height-12)):i.attr("x",e.posWithOffset-s.width/2),z.rotateCommitLabel))if("TB"===Y||"BT"===Y)i.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),c.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const t=-7.5-(s.width+10)/25*9.5,r=10+s.width/25*8.5;a.attr("transform","translate("+t+", "+r+") rotate(-45, "+n+", "+e.y+")")}}},"drawCommitLabel"),at=(0,a._)((t,r,e,n)=>{var o;if(r.tags.length>0){let a=0,c=0,i=0;const s=[];for(const n of r.tags.reverse()){const r=t.insert("polygon"),d=t.append("circle"),h=t.append("text").attr("y",e.y-16-a).attr("class","tag-label").text(n),l=null==(o=h.node())?void 0:o.getBBox();if(!l)throw new Error("Tag bbox not found");c=Math.max(c,l.width),i=Math.max(i,l.height),h.attr("x",e.posWithOffset-l.width/2),s.push({tag:h,hole:d,rect:r,yOffset:a}),a+=20}for(const{tag:t,hole:r,rect:o,yOffset:a}of s){const s=i/2,d=e.y-19.2-a;if(o.attr("class","tag-label-bkg").attr("points",`\n      ${n-c/2-2},${d+2}  \n      ${n-c/2-2},${d-2}\n      ${e.posWithOffset-c/2-4},${d-s-2}\n      ${e.posWithOffset+c/2+4},${d-s-2}\n      ${e.posWithOffset+c/2+4},${d+s+2}\n      ${e.posWithOffset-c/2-4},${d+s+2}`),r.attr("cy",d).attr("cx",n-c/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===Y||"BT"===Y){const i=n+a;o.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${i+2}\n        ${e.x},${i-2}\n        ${e.x+D},${i-s-2}\n        ${e.x+D+c+4},${i-s-2}\n        ${e.x+D+c+4},${i+s+2}\n        ${e.x+D},${i+s+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),r.attr("cx",e.x+2).attr("cy",i).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),t.attr("x",e.x+5).attr("y",i+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+n+")")}}}},"drawCommitTags"),ct=(0,a._)(t=>{switch(t.customType??t.type){case i.NORMAL:return"commit-normal";case i.REVERSE:return"commit-reverse";case i.HIGHLIGHT:return"commit-highlight";case i.MERGE:return"commit-merge";case i.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),it=(0,a._)((t,r,e,n)=>{const o={x:0,y:0};if(!(t.parents.length>0))return"TB"===r?30:"BT"===r?(n.get(t.id)??o).y-S:0;{const e=J(t.parents);if(e){const a=n.get(e)??o;return"TB"===r?a.y+S:"BT"===r?(n.get(t.id)??o).y-S:a.x+S}}return 0},"calculatePosition"),st=(0,a._)((t,r,e)=>{var n,o;const a="BT"===Y&&e?r:r+D,c="TB"===Y||"BT"===Y?a:null==(n=N.get(t.branch))?void 0:n.pos,i="TB"===Y||"BT"===Y?null==(o=N.get(t.branch))?void 0:o.pos:a;if(void 0===i||void 0===c)throw new Error(`Position were undefined for commit ${t.id}`);return{x:i,y:c,posWithOffset:a}},"getCommitPosition"),dt=(0,a._)((t,r,e)=>{if(!z)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),o=t.append("g").attr("class","commit-labels");let c="TB"===Y||"BT"===Y?30:0;const i=[...r.keys()],s=(null==z?void 0:z.parallelCommits)??!1,d=(0,a._)((t,e)=>{var n,o;const a=null==(n=r.get(t))?void 0:n.seq,c=null==(o=r.get(e))?void 0:o.seq;return void 0!==a&&void 0!==c?a-c:0},"sortKeys");let h=i.sort(d);"BT"===Y&&(s&&X(h,r,c),h=h.reverse()),h.forEach(t=>{var a;const i=r.get(t);if(!i)throw new Error(`Commit not found for key ${t}`);s&&(c=it(i,Y,c,W));const d=st(i,c,s);if(e){const t=ct(i),r=i.customType??i.type,e=(null==(a=N.get(i.branch))?void 0:a.index)??0;nt(n,i,d,t,e,r),ot(o,i,d,c),at(o,i,d,c)}"TB"===Y||"BT"===Y?W.set(i.id,{x:d.x,y:d.posWithOffset}):W.set(i.id,{x:d.posWithOffset,y:d.y}),c="BT"===Y&&s?c+S:c+S+D,c>K&&(K=c)})},"drawCommits"),ht=(0,a._)((t,r,e,n,o)=>{const c=("TB"===Y||"BT"===Y?e.x<n.x:e.y<n.y)?r.branch:t.branch,i=(0,a._)(t=>t.branch===c,"isOnBranchToGetCurve"),s=(0,a._)(e=>e.seq>t.seq&&e.seq<r.seq,"isBetweenCommits");return[...o.values()].some(t=>s(t)&&i(t))},"shouldRerouteArrow"),lt=(0,a._)((t,r,e=0)=>{const n=t+Math.abs(t-r)/2;if(e>5)return n;if(F.every(t=>Math.abs(t-n)>=10))return F.push(n),n;const o=Math.abs(t-r);return lt(t,r-o/5,e+1)},"findLane"),mt=(0,a._)((t,r,e,n)=>{var o,a,c,s,d;const h=W.get(r.id),l=W.get(e.id);if(void 0===h||void 0===l)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const m=ht(r,e,h,l,n);let $,y="",g="",p=0,u=0,x=null==(o=N.get(e.branch))?void 0:o.index;if(e.type===i.MERGE&&r.id!==e.parents[0]&&(x=null==(a=N.get(r.branch))?void 0:a.index),m){y="A 10 10, 0, 0, 0,",g="A 10 10, 0, 0, 1,",p=10,u=10;const t=h.y<l.y?lt(h.y,l.y):lt(l.y,h.y),e=h.x<l.x?lt(h.x,l.x):lt(l.x,h.x);"TB"===Y?h.x<l.x?$=`M ${h.x} ${h.y} L ${e-p} ${h.y} ${g} ${e} ${h.y+u} L ${e} ${l.y-p} ${y} ${e+u} ${l.y} L ${l.x} ${l.y}`:(x=null==(c=N.get(r.branch))?void 0:c.index,$=`M ${h.x} ${h.y} L ${e+p} ${h.y} ${y} ${e} ${h.y+u} L ${e} ${l.y-p} ${g} ${e-u} ${l.y} L ${l.x} ${l.y}`):"BT"===Y?h.x<l.x?$=`M ${h.x} ${h.y} L ${e-p} ${h.y} ${y} ${e} ${h.y-u} L ${e} ${l.y+p} ${g} ${e+u} ${l.y} L ${l.x} ${l.y}`:(x=null==(s=N.get(r.branch))?void 0:s.index,$=`M ${h.x} ${h.y} L ${e+p} ${h.y} ${g} ${e} ${h.y-u} L ${e} ${l.y+p} ${y} ${e-u} ${l.y} L ${l.x} ${l.y}`):h.y<l.y?$=`M ${h.x} ${h.y} L ${h.x} ${t-p} ${y} ${h.x+u} ${t} L ${l.x-p} ${t} ${g} ${l.x} ${t+u} L ${l.x} ${l.y}`:(x=null==(d=N.get(r.branch))?void 0:d.index,$=`M ${h.x} ${h.y} L ${h.x} ${t+p} ${g} ${h.x+u} ${t} L ${l.x-p} ${t} ${y} ${l.x} ${t-u} L ${l.x} ${l.y}`)}else y="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,u=20,"TB"===Y?(h.x<l.x&&($=e.type===i.MERGE&&r.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${l.y-p} ${y} ${h.x+u} ${l.y} L ${l.x} ${l.y}`:`M ${h.x} ${h.y} L ${l.x-p} ${h.y} ${g} ${l.x} ${h.y+u} L ${l.x} ${l.y}`),h.x>l.x&&(y="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,u=20,$=e.type===i.MERGE&&r.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${l.y-p} ${g} ${h.x-u} ${l.y} L ${l.x} ${l.y}`:`M ${h.x} ${h.y} L ${l.x+p} ${h.y} ${y} ${l.x} ${h.y+u} L ${l.x} ${l.y}`),h.x===l.x&&($=`M ${h.x} ${h.y} L ${l.x} ${l.y}`)):"BT"===Y?(h.x<l.x&&($=e.type===i.MERGE&&r.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${l.y+p} ${g} ${h.x+u} ${l.y} L ${l.x} ${l.y}`:`M ${h.x} ${h.y} L ${l.x-p} ${h.y} ${y} ${l.x} ${h.y-u} L ${l.x} ${l.y}`),h.x>l.x&&(y="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,u=20,$=e.type===i.MERGE&&r.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${l.y+p} ${y} ${h.x-u} ${l.y} L ${l.x} ${l.y}`:`M ${h.x} ${h.y} L ${l.x-p} ${h.y} ${y} ${l.x} ${h.y-u} L ${l.x} ${l.y}`),h.x===l.x&&($=`M ${h.x} ${h.y} L ${l.x} ${l.y}`)):(h.y<l.y&&($=e.type===i.MERGE&&r.id!==e.parents[0]?`M ${h.x} ${h.y} L ${l.x-p} ${h.y} ${g} ${l.x} ${h.y+u} L ${l.x} ${l.y}`:`M ${h.x} ${h.y} L ${h.x} ${l.y-p} ${y} ${h.x+u} ${l.y} L ${l.x} ${l.y}`),h.y>l.y&&($=e.type===i.MERGE&&r.id!==e.parents[0]?`M ${h.x} ${h.y} L ${l.x-p} ${h.y} ${y} ${l.x} ${h.y-u} L ${l.x} ${l.y}`:`M ${h.x} ${h.y} L ${h.x} ${l.y+p} ${g} ${h.x+u} ${l.y} L ${l.x} ${l.y}`),h.y===l.y&&($=`M ${h.x} ${h.y} L ${l.x} ${l.y}`));if(void 0===$)throw new Error("Line definition not found");t.append("path").attr("d",$).attr("class","arrow arrow"+x%8)},"drawArrow"),$t=(0,a._)((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(t=>{const n=r.get(t);n.parents&&n.parents.length>0&&n.parents.forEach(t=>{mt(e,r.get(t),n,r)})})},"drawArrows"),yt=(0,a._)((t,r)=>{const e=t.append("g");r.forEach((t,r)=>{var n;const o=r%8,a=null==(n=N.get(t.name))?void 0:n.pos;if(void 0===a)throw new Error(`Position not found for branch ${t.name}`);const c=e.append("line");c.attr("x1",0),c.attr("y1",a),c.attr("x2",K),c.attr("y2",a),c.attr("class","branch branch"+o),"TB"===Y?(c.attr("y1",30),c.attr("x1",a),c.attr("y2",K),c.attr("x2",a)):"BT"===Y&&(c.attr("y1",K),c.attr("x1",a),c.attr("y2",30),c.attr("x2",a)),F.push(a);const i=t.name,s=V(i),d=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);h.node().appendChild(s);const l=s.getBBox();d.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-l.width-4-(!0===(null==z?void 0:z.rotateCommitLabel)?30:0)).attr("y",-l.height/2+8).attr("width",l.width+18).attr("height",l.height+4),h.attr("transform","translate("+(-l.width-14-(!0===(null==z?void 0:z.rotateCommitLabel)?30:0))+", "+(a-l.height/2-1)+")"),"TB"===Y?(d.attr("x",a-l.width/2-10).attr("y",0),h.attr("transform","translate("+(a-l.width/2-5)+", 0)")):"BT"===Y?(d.attr("x",a-l.width/2-10).attr("y",K),h.attr("transform","translate("+(a-l.width/2-5)+", "+K+")")):d.attr("transform","translate(-19, "+(a-l.height/2)+")")})},"drawBranches"),gt=(0,a._)(function(t,r,e,n,o){return N.set(t,{pos:r,index:e}),r+(50+(o?40:0)+("TB"===Y||"BT"===Y?n.width/2:0))},"setBranchPosition"),pt={parser:q,db:_,renderer:{draw:(0,a._)(function(t,r,e,n){if(U(),a.l.debug("in gitgraph renderer",t+"\n","id:",r,e),!z)throw new Error("GitGraph config not found");const o=z.rotateCommitLabel??!1,c=n.db;j=c.getCommits();const i=c.getBranchesAsObjArray();Y=c.getDirection();const s=(0,a.d)(`[id="${r}"]`);let d=0;i.forEach((t,r)=>{var e;const n=V(t.name),a=s.append("g"),c=a.insert("g").attr("class","branchLabel"),i=c.insert("g").attr("class","label branch-label");null==(e=i.node())||e.appendChild(n);const h=n.getBBox();d=gt(t.name,d,r,h,o),i.remove(),c.remove(),a.remove()}),dt(s,j,!1),z.showBranches&&yt(s,i),$t(s,j),dt(s,j,!0),a.u.insertTitle(s,"gitTitleText",z.titleTopMargin??0,c.getDiagramTitle()),(0,a.E)(void 0,s,z.diagramPadding,z.useMaxWidth)},"draw")},styles:(0,a._)(t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map(r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`,"getStyles")}},86189:(t,r,e)=>{e.d(r,{I:()=>a});var n,o=e(18118),a=(n=class{constructor(t){this.init=t,this.records=this.init()}reset(){this.records=this.init()}},(0,o._)(n,"ImperativeState"),n)}}]);