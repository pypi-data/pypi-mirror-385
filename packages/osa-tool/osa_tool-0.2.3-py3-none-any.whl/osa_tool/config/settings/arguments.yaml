repository:
  aliases: [ "-r", "--repository" ]
  type: str
  description: "URL of the GitHub repository"
  required: true

mode:
  aliases: [ "-m", "--mode" ]
  type: str
  description: |
    Select the operation mode for repository processing:
      basic           — run a minimal predefined set of tasks.
      auto (default)  — automatically determine necessary actions based on repository analysis.
      advanced        — run all enabled features based on provided flags.
  choices: [ "basic", "auto", "advanced" ]

web_mode:
  aliases: [ "--web-mode" ]
  type: flag
  description: |
    Enable web interface mode. When set, the tool will generate the task plan
    without launching the interactive CLI editor.

output:
  aliases: [ "-o","--output" ]
  type: str
  description: "Path to the output directory"
  example: "path/to/directory"
  required: false

branch:
  aliases: [ "-b", "--branch" ]
  type: str
  description: "Branch name of the GitHub repository"
  required: false

api:
  aliases: [ "--api" ]
  type: str
  description: "LLM API service provider"
  choices: [ "itmo", "openai", "ollama" ]

base_url:
  aliases: [ "--base-url" ]
  type: str
  description: |
    URL of the service provider.
    See: https://github.com/aimclub/ProtoLLM/tree/main/protollm/connectors

model:
  aliases: [ "--model" ]
  type: str
  description: |
    Specific LLM model to use. See available providers and models:
    https://github.com/aimclub/ProtoLLM/tree/main/protollm/connectors

temperature:
  aliases: [ "--temperature" ]
  type: str
  description: "Sampling temperature to use for the LLM output (0 = deterministic, 1 = creative)."
  example: 0.3, 0.9

tokens:
  aliases: [ "--max-tokens" ]
  type: str
  description: "Maximum number of tokens the model can generate in a single response."
  example: 256, 1024

top_p:
  aliases: [ "--top-p" ]
  type: str
  description: "Nucleus sampling probability (1.0 = all tokens considered)."
  example: 0.8, 0.95

article:
  aliases: [ "--article" ]
  type: str
  description: |
    Select a README template for a repository with an article.
    Or provide a link to the pdf file.
  const: ""
  example: "path/to/file"

translate_dirs:
  aliases: [ "--translate-dirs" ]
  type: flag
  description: "Enable automatic translation of the directory name into English."

convert_notebooks:
  aliases: [ "--convert-notebooks" ]
  type: list
  description: |
    Convert Jupyter notebooks from .ipynb to .py format.
    Provide one or multiple paths, or leave empty for repo directory.
  example: path/to/file1, path/to/file2

translate_readme:
  aliases: [ "--translate-readme" ]
  type: list
  description: |
    List of target languages to translate the project's main README into.
    Each language should be specified by its name (e.g., "Russian", "Chinese").
    The translated README files will be saved separately in the repository folder
    with language-specific suffixes (e.g., README_ru.md, README_zh.md).
  example: Russian, Chinese

delete_dir:
  aliases: [ "--delete-dir" ]
  type: flag
  description: "Enable deleting the downloaded repository after processing."

ensure_license:
  aliases: [ "--ensure-license" ]
  type: str
  choices: [ "bsd-3", "mit", "ap2" ]
  description: "Enable LICENSE file compilation."
  const: "bsd-3"

no_fork:
  aliases: [ "--no-fork" ]
  type: flag
  description: "Do not create a public fork to the target repository."

no_pull_request:
  aliases: [ "--no-pull-request" ]
  type: flag
  description: "Do not create a pull request to the target repository."

community_docs:
  aliases: [ "--community-docs" ]
  type: flag
  description: "Generate community-related documentation files, such as Code of Conduct and Contributing guidelines."

docstring:
  aliases: [ "--docstring" ]
  type: flag
  description: "Automatically generate docstrings for all Python files in the repository."

report:
  aliases: [ "--report" ]
  type: flag
  description: "Analyze the repository and generate a PDF report with project insights."

readme:
  aliases: [ "--readme" ]
  type: flag
  description: "Generate a README.md file based on repository content and metadata."

refine_readme:
  aliases: [ "--refine-readme" ]
  type: flag
  description: "Enable advanced README refinement. This process requires a powerful LLM model (such as GPT-4 or equivalent) for optimal results."

requirements:
  aliases: [ "--requirements" ]
  type: flag
  description: "Generate or refine a requirements.txt file based on repository content."

organize:
  aliases: [ "--organize" ]
  type: flag
  description: "Organize the repository structure by adding standard 'tests' and 'examples' directories if missing."

about:
  aliases: [ "--about" ]
  type: flag
  description: "Generate About section with tags."

workflow:
  generate_workflows:
    aliases: [ "--generate-workflows" ]
    type: flag
    description: "Generate workflows for the repository."

  include_tests:
    aliases: [ "--include-tests" ]
    type: flag
    description: "Include unit tests workflow."

  include_black:
    aliases: [ "--include-black" ]
    type: flag
    description: "Include Black formatter workflow."

  include_pep8:
    aliases: [ "--include-pep8" ]
    type: flag
    description: "Include PEP 8 compliance workflow."

  include_autopep8:
    aliases: [ "--include-autopep8" ]
    type: flag
    description: "Include autopep8 formatter workflow."

  include_fix_pep8:
    aliases: [ "--include-fix-pep8" ]
    type: flag
    description: "Include fix-pep8 command workflow."

  include_pypi:
    aliases: [ "--include-pypi" ]
    type: flag
    description: "Include PyPI publish workflow."

  python_versions:
    aliases: [ "--python-versions" ]
    type: list
    description: "Python versions to test against."
    example: 3.8, 3.11

  pep8_tool:
    aliases: [ "--pep8-tool" ]
    type: str
    description: "Tool to use for PEP 8 checking."
    choices: [ "flake8", "pylint" ]

  use_poetry:
    aliases: [ "--use-poetry" ]
    type: flag
    description: "Use Poetry for packaging."

  branches:
    aliases: [ "--branches" ]
    type: list
    description: "Branches to trigger the workflows on."
    example: main, develop

  codecov_token:
    aliases: [ "--codecov-token" ]
    type: flag
    description: "Use Codecov token for uploading coverage."

  include_codecov:
    aliases: [ "--include-codecov" ]
    type: flag
    description: "Include Codecov coverage step in a unit tests workflow."