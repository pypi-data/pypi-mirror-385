[project]
name = "dqlitepy"
version = "0.1.0"
description = "Python bindings for the Canonical dqlite distributed SQLite engine"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "Apache-2.0"}
authors = [
	{name = "VantageCompute"}
]
keywords = ["dqlite", "sqlite", "distributed", "raft", "bindings"]
classifiers = [
	"License :: OSI Approved :: Apache Software License",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.12",
	"Topic :: Database",
	"Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
	"cffi>=1.15",
	"sqlalchemy>=2.0.44",
]
[project.optional-dependencies]
dev = [
    # Testing
    "coverage[toml] ~= 7.8",
    "pytest ~= 8.3",
    "pytest-mock ~= 3.14",
    "pytest-order ~= 1.3",
    "python-dotenv ~= 1.0",

    # Linting
    "ruff",
    "codespell",
    "pyright",
]

[tool.pytest.ini_options]
addopts = "-ra"
testpaths = ["tests"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "codespell>=2.4.1",
    "pyright>=1.1.406",
    "pytest-cov>=7.0.0",
    "ruff>=0.14.1",
]


[tool.hatch.build.targets.wheel]
packages = ["dqlitepy"]
# Include binary artifacts (shared libraries)
artifacts = [
    "dqlitepy/_lib/**/*",
]

# Source distribution - mirror wheel contents plus build requirements
[tool.hatch.build.targets.sdist]
# Only include dqlitepy package (same as wheel) plus essential build files
only-include = [
    "dqlitepy",
    "pyproject.toml",
    "README.md", 
    "LICENSE",
]
# Include binary files in sdist
artifacts = [
    "dqlitepy/_lib/**/*",
]

[tool.hatch.metadata]
allow-direct-references = true

# Pyright configuration - exclude examples from type checking
[tool.pyright]
include = ["dqlitepy", "tests"]
exclude = ["examples", "build", "vendor"]
pythonVersion = "3.12"
