/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 17 "main_with_client.go"



#include <stdlib.h>
#include <stdint.h>
#include <string.h>

typedef unsigned long long dqlitepy_node_id;
typedef unsigned long long dqlitepy_handle;

// Structure for returning cluster node information
typedef struct {
	dqlitepy_node_id id;
	char *address;
	int role;  // 0=voter, 1=standby, 2=spare
} dqlitepy_node_info;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int dqlitepy_node_create(dqlitepy_node_id id, char* address, char* dataDir, dqlitepy_handle* outHandle);
extern int dqlitepy_node_create_with_cluster(dqlitepy_node_id id, char* address, char* dataDir, char* clusterCSV, dqlitepy_handle* outHandle);
extern int dqlitepy_node_set_bind_address(dqlitepy_handle handle, char* address);
extern int dqlitepy_node_set_auto_recovery(dqlitepy_handle handle, int enabled);
extern int dqlitepy_node_set_busy_timeout(dqlitepy_handle handle, unsigned int _);
extern int dqlitepy_node_set_snapshot_compression(dqlitepy_handle handle, int _);
extern int dqlitepy_node_set_network_latency_ms(dqlitepy_handle handle, unsigned int _);
extern int dqlitepy_node_start(dqlitepy_handle handle);
extern int dqlitepy_node_handover(dqlitepy_handle handle);
extern int dqlitepy_node_stop(dqlitepy_handle handle);
extern void dqlitepy_node_destroy(dqlitepy_handle handle);
extern int dqlitepy_node_open_db(dqlitepy_handle handle, char* dbName);
extern int dqlitepy_node_exec(dqlitepy_handle handle, char* sql, int64_t* outLastInsertID, int64_t* outRowsAffected);
extern int dqlitepy_node_query(dqlitepy_handle handle, char* sql, char** outJSON);
extern dqlitepy_node_id dqlitepy_generate_node_id(char* address);
extern int dqlitepy_client_create(char* addressesCSV, dqlitepy_handle* outHandle);
extern int dqlitepy_client_close(dqlitepy_handle handle);
extern int dqlitepy_client_add(dqlitepy_handle handle, dqlitepy_node_id id, char* address);
extern int dqlitepy_client_remove(dqlitepy_handle handle, dqlitepy_node_id id);
extern int dqlitepy_client_leader(dqlitepy_handle handle, char** outAddress);
extern int dqlitepy_client_cluster(dqlitepy_handle handle, char** outJSON);
extern char* dqlitepy_last_error();
extern void dqlitepy_free(void* ptr);
extern int dqlitepy_version_number();
extern char* dqlitepy_version_string();

#ifdef __cplusplus
}
#endif
