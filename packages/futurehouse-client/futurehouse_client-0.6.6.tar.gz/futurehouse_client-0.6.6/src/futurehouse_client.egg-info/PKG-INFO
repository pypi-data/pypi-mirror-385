Metadata-Version: 2.4
Name: futurehouse-client
Version: 0.6.6
Summary: A client for interacting with endpoints of the FutureHouse service.
Author-email: FutureHouse technical staff <hello@futurehouse.org>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright 2024 FutureHouse
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python
Requires-Python: <3.14,>=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiofiles
Requires-Dist: cloudpickle
Requires-Dist: fhaviary
Requires-Dist: google-resumable-media
Requires-Dist: httpx
Requires-Dist: httpx-aiohttp
Requires-Dist: ldp>=0.22.0
Requires-Dist: litellm
Requires-Dist: openai<1.100.0,>=1
Requires-Dist: pydantic
Requires-Dist: python-dotenv
Requires-Dist: requests
Requires-Dist: tenacity
Requires-Dist: tqdm>=4.62
Provides-Extra: dev
Requires-Dist: black; extra == "dev"
Requires-Dist: futurehouse-client[monitoring,typing]; extra == "dev"
Requires-Dist: ipykernel; extra == "dev"
Requires-Dist: jupyter; extra == "dev"
Requires-Dist: jupyterlab; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: notebook; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: pylint; extra == "dev"
Requires-Dist: pylint-per-file-ignores; extra == "dev"
Requires-Dist: pylint-pydantic; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: pytest-rerunfailures; extra == "dev"
Requires-Dist: pytest-subtests; extra == "dev"
Requires-Dist: pytest-timeout; extra == "dev"
Requires-Dist: pytest-xdist; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: setuptools_scm; extra == "dev"
Provides-Extra: monitoring
Requires-Dist: newrelic<12.0.0,>=11.0.0; extra == "monitoring"
Provides-Extra: typing
Requires-Dist: types-PyYAML; extra == "typing"
Requires-Dist: types-aiofiles; extra == "typing"
Requires-Dist: types-requests; extra == "typing"
Requires-Dist: types-tqdm; extra == "typing"
Dynamic: license-file

# FutureHouse Platform API Documentation

Documentation and tutorials for futurehouse-client,
a client for interacting with endpoints of the FutureHouse platform.

<!--TOC-->

- [Installation](#installation)
- [Quickstart](#quickstart)
- [Functionalities](#functionalities)
- [Authentication](#authentication)
- [Simple task running](#simple-task-running)
- [Task Continuation](#task-continuation)
- [Asynchronous tasks](#asynchronous-tasks)

<!--TOC-->

## Installation

```bash
uv pip install futurehouse-client
```

## Quickstart

```python
from futurehouse_client import FutureHouseClient, JobNames

# Set your API key to FUTUREHOUSE_API_KEY environment variable,
# or pass it as a string literal to the api_key parameter
client = FutureHouseClient()

task_data = {
    "name": JobNames.CROW,
    "query": (
        "Which neglected diseases had a treatment developed"
        " by artificial intelligence?"
    ),
}
(task_response,) = client.run_tasks_until_done(task_data)
```

A quickstart example can be found in the [client_notebook.ipynb][1] file,
where we show how to submit and retrieve a job task,
pass runtime configuration to the agent,
and ask follow-up questions to the previous job.

[1]: https://futurehouse.gitbook.io/futurehouse-cookbook/futurehouse-client/docs/client_notebook

## Functionalities

FutureHouse client implements a RestClient (called `FutureHouseClient`) with the following functionalities:

- [Simple task running](#simple-task-running):
  `run_tasks_until_done(TaskRequest)` or `await arun_tasks_until_done(TaskRequest)`
- [Asynchronous tasks](#asynchronous-tasks):
  `get_task(task_id)` or `aget_task(task_id)`
  and `create_task(TaskRequest)` or `acreate_task(TaskRequest)`

To create a `FutureHouseClient`,
you need to pass an FutureHouse platform api key (see [Authentication](#authentication)):

```python
from futurehouse_client import FutureHouseClient

# Set your API key to FUTUREHOUSE_API_KEY environment variable
client = FutureHouseClient()
# Or pass it as a string literal to the api_key parameter
client = FutureHouseClient(api_key="your_api_key")
```

## Authentication

In order to use the `FutureHouseClient`, you need to authenticate yourself.
Authentication is done by providing an API key,
which can be obtained directly from your [profile page in the FutureHouse platform][2].

[2]: https://platform.futurehouse.org/profile

## Simple task running

In the FutureHouse platform,
we define the deployed combination of an agent and an environment as a `job`.
To invoke a job, we need to submit a `task` (also called a `query`) to it.
`FutureHouseClient` can be used to submit tasks/queries to available jobs in the FutureHouse platform.
Using a `FutureHouseClient` instance,
you can submit tasks to the platform by calling the `create_task` method,
which receives a `TaskRequest` (or a dictionary with `kwargs`) and returns the task id.
Aiming to make the submission of tasks as simple as possible,
we have created a `JobNames` `enum` that contains the available task types.

The available supported jobs are:

| Alias              | Job Name                        | Task type        | Description                                                                                                                                              |
| ------------------ | ------------------------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `JobNames.CROW`    | `job-futurehouse-paperqa2`      | Fast Search      | Ask a question of scientific data sources, and receive a high-accuracy, cited response. Built with [PaperQA2](https://github.com/Future-House/paper-qa). |
| `JobNames.FALCON`  | `job-futurehouse-paperqa2-deep` | Deep Search      | Use a plethora of sources to deeply research. Receive a detailed, structured report as a response.                                                       |
| `JobNames.OWL`     | `job-futurehouse-hasanyone`     | Precedent Search | Formerly known as HasAnyone, query if anyone has ever done something in science.                                                                         |
| `JobNames.PHOENIX` | `job-futurehouse-phoenix`       | Chemistry Tasks  | A new iteration of ChemCrow, Phoenix uses cheminformatics tools to do chemistry. Good for planning synthesis and designing new molecules.                |
| `JobNames.DUMMY`   | `job-futurehouse-dummy`         | Dummy Task       | This is a dummy task. Mainly for testing purposes.                                                                                                       |

Using `JobNames`, the task submission looks like this:

```python
from futurehouse_client import FutureHouseClient, JobNames

client = FutureHouseClient()

task_data = {
    "name": JobNames.OWL,
    "query": "Has anyone tested therapeutic exerkines in humans or NHPs?",
}
(task_response,) = client.run_tasks_until_done(task_data)
print(task_response.answer)
```

Or if running async code:

```python
import asyncio
from futurehouse_client import FutureHouseClient, JobNames


async def main():
    client = FutureHouseClient(
        api_key="your_api_key",
    )

    task_data = {
        "name": JobNames.OWL,
        "query": "Has anyone tested therapeutic exerkines in humans or NHPs?",
    }
    (task_response,) = await client.arun_tasks_until_done(task_data)
    print(task_response.answer)
    return task_id


# For Python 3.7+
if __name__ == "__main__":
    task_id = asyncio.run(main())
```

Note that in either the sync or the async code,
collections of tasks can be given to the client to run them in a batch:

```python
import asyncio
from futurehouse_client import FutureHouseClient, JobNames


async def main():
    client = FutureHouseClient()

    task_data = [
        {
            "name": JobNames.OWL,
            "query": "Has anyone tested therapeutic exerkines in humans or NHPs?",
        },
        {
            "name": JobNames.CROW,
            "query": (
                "Are there any clinically validated"
                " therapeutic exerkines for humans?"
            ),
        },
    ]
    task_responses = await client.arun_tasks_until_done(task_data)
    print(task_responses[0].answer)
    print(task_responses[1].answer)
    return task_id


# For Python 3.7+
if __name__ == "__main__":
    task_id = asyncio.run(main())
```

`TaskRequest` can also be used to submit jobs and it has the following fields:

| Field          | Type          | Description                                                                                                         |
| -------------- | ------------- | ------------------------------------------------------------------------------------------------------------------- |
| id             | UUID          | Optional job identifier. A UUID will be generated if not provided                                                   |
| name           | str           | Name of the job to execute eg. `job-futurehouse-paperqa2`, or using the `JobNames` for convenience: `JobNames.CROW` |
| query          | str           | Query or task to be executed by the job                                                                             |
| runtime_config | RuntimeConfig | Optional runtime parameters for the job                                                                             |

`runtime_config` can receive a `AgentConfig` object with the desired kwargs.
Check the available `AgentConfig` fields in the [LDP documentation][3].
Besides the `AgentConfig` object,
we can also pass `timeout` and `max_steps` to limit the execution time and the number of steps the agent can take.

[3]: https://github.com/Future-House/ldp/blob/main/src/ldp/agent/agent.py#L87

```python
from futurehouse_client import FutureHouseClient, JobNames
from futurehouse_client.models.app import TaskRequest

client = FutureHouseClient()

(task_response,) = client.run_tasks_until_done(
    TaskRequest(
        name=JobNames.OWL,
        query="Has anyone tested therapeutic exerkines in humans or NHPs?",
    )
)
print(task_response.answer)
```

A `TaskResponse` will be returned from using our agents.
For Owl, Crow, and Falcon, we default to a subclass, `PQATaskResponse` which has some key attributes:

| Field                 | Type | Description                                                                     |
| --------------------- | ---- | ------------------------------------------------------------------------------- |
| answer                | str  | Answer to your query.                                                           |
| formatted_answer      | str  | Specially formatted answer with references.                                     |
| has_successful_answer | bool | Flag for whether the agent was able to find a good answer to your query or not. |

If using the `verbose` setting, much more data can be pulled down from your `TaskResponse`,
which will exist across all agents (not just Owl, Crow, and Falcon).

```python
from futurehouse_client import FutureHouseClient, JobNames
from futurehouse_client.models.app import TaskRequest

client = FutureHouseClient(
    api_key="your_api_key",
)

(task_response,) = client.run_tasks_until_done(
    TaskRequest(
        name=JobNames.OWL,
        query="Has anyone tested therapeutic exerkines in humans or NHPs?",
    ),
    verbose=True,
)
print(task_response.environment_frame)
```

In that case, a `TaskResponseVerbose` will have the following fields:

| Field             | Type | Description                                                                                                            |
| ----------------- | ---- | ---------------------------------------------------------------------------------------------------------------------- |
| agent_state       | dict | Large object with all agent states during the progress of your task.                                                   |
| environment_frame | dict | Large nested object with all environment data, for PQA environments it includes contexts, paper metadata, and answers. |
| metadata          | dict | Extra metadata about your query.                                                                                       |

## Task Continuation

Once a task is submitted and the answer is returned,
FutureHouse platform allow you to ask follow-up questions to the previous task.
It is also possible through the platform API.
To accomplish that,
we can use the `runtime_config` we discussed in the [Simple task running](#simple-task-running) section.

```python
from futurehouse_client import FutureHouseClient, JobNames

client = FutureHouseClient(
    api_key="your_api_key",
)

task_data = {
    "name": JobNames.CROW,
    "query": "How many species of birds are there?",
}
task_id = client.create_task(task_data)

continued_task_data = {
    "name": JobNames.CROW,
    "query": (
        "From the previous answer,"
        " specifically, how many species of crows are there?"
    ),
    "runtime_config": {"continued_task_id": task_id},
}
(task_response,) = client.run_tasks_until_done(continued_task_data)
```

## Asynchronous tasks

Sometimes you may want to submit many jobs, while querying results at a later time.
In this way you can do other things while waiting for a response.
The platform API supports this as well rather than waiting for a result.

```python
from futurehouse_client import FutureHouseClient, JobNames

client = FutureHouseClient()

task_data = {
    "name": JobNames.CROW,
    "query": "How many species of birds are there?",
}
task_id = client.create_task(task_data)

# move on to do other things

task_status = client.get_task(task_id)
```

`task_status` contains information about the task.
For instance, its `status`, `task`, `environment_name` and `agent_name`, and other fields specific to the job.
You can continually query the status until it's `success` before moving on.
