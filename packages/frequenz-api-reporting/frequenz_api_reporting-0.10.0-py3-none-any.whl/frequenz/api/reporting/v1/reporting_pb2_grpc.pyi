"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz Reporting API

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import abc
import collections.abc
import frequenz.api.reporting.v1.reporting_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ReportingStub:
    """The Reporting service provides services for real-time and historical metrics monitoring
    of various microgrid components like Batteries, EV Chargers, and Inverters.

    Utilize these APIs for tasks ranging from real-time metric streaming to complex,
    formula-driven historical data aggregation. For detailed information on component
    categories and the metrics they provide, please consult the referenced component categories
    imported above.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ReceiveMicrogridComponentsDataStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse,
    ]
    """Streams metrics for a list of microgrid components.

    !!! note
        This RPC endpoint streams metrics data for components of one or more microgrids.
        Clients need to provide at least one microgrid ID and one component ID
        to get a result.
    """

    ReceiveAggregatedMicrogridComponentsDataStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse,
    ]
    """Streams aggregated metrics based on user-defined formulas for a list of microgrid
    components.

    !!! note
        This RPC endpoint retrieves aggregated historical metrics data based on user-defined
        formulas for microgrid components. At least one formula for one microgrid must be provided
        for a valid result.
    """

    ReceiveMicrogridSensorsDataStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridSensorsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridSensorsDataStreamResponse,
    ]
    """Streams metrics for a list of microgrid sensors.

    !!! note
        This RPC endpoint streams metrics data for sensors of one or more microgrids.
        Clients need to provide at least one microgrid ID and one sensor ID
        to get a result.
    """

    ReceiveAggregatedMicrogridSensorsDataStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridSensorsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridSensorsDataStreamResponse,
    ]
    """Streams aggregated metrics based on user-defined formulas for a list of microgrid
    sensors.

    !!! note
        This RPC endpoint retrieves aggregated historical metrics data based on user-defined
        formulas for microgrid sensors. At least one formula for one microgrid must be provided
        for a valid result.
    """

class ReportingAsyncStub:
    """The Reporting service provides services for real-time and historical metrics monitoring
    of various microgrid components like Batteries, EV Chargers, and Inverters.

    Utilize these APIs for tasks ranging from real-time metric streaming to complex,
    formula-driven historical data aggregation. For detailed information on component
    categories and the metrics they provide, please consult the referenced component categories
    imported above.
    """

    ReceiveMicrogridComponentsDataStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse,
    ]
    """Streams metrics for a list of microgrid components.

    !!! note
        This RPC endpoint streams metrics data for components of one or more microgrids.
        Clients need to provide at least one microgrid ID and one component ID
        to get a result.
    """

    ReceiveAggregatedMicrogridComponentsDataStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse,
    ]
    """Streams aggregated metrics based on user-defined formulas for a list of microgrid
    components.

    !!! note
        This RPC endpoint retrieves aggregated historical metrics data based on user-defined
        formulas for microgrid components. At least one formula for one microgrid must be provided
        for a valid result.
    """

    ReceiveMicrogridSensorsDataStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridSensorsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridSensorsDataStreamResponse,
    ]
    """Streams metrics for a list of microgrid sensors.

    !!! note
        This RPC endpoint streams metrics data for sensors of one or more microgrids.
        Clients need to provide at least one microgrid ID and one sensor ID
        to get a result.
    """

    ReceiveAggregatedMicrogridSensorsDataStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridSensorsDataStreamRequest,
        frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridSensorsDataStreamResponse,
    ]
    """Streams aggregated metrics based on user-defined formulas for a list of microgrid
    sensors.

    !!! note
        This RPC endpoint retrieves aggregated historical metrics data based on user-defined
        formulas for microgrid sensors. At least one formula for one microgrid must be provided
        for a valid result.
    """

class ReportingServicer(metaclass=abc.ABCMeta):
    """The Reporting service provides services for real-time and historical metrics monitoring
    of various microgrid components like Batteries, EV Chargers, and Inverters.

    Utilize these APIs for tasks ranging from real-time metric streaming to complex,
    formula-driven historical data aggregation. For detailed information on component
    categories and the metrics they provide, please consult the referenced component categories
    imported above.
    """

    @abc.abstractmethod
    def ReceiveMicrogridComponentsDataStream(
        self,
        request: frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse], collections.abc.AsyncIterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridComponentsDataStreamResponse]]:
        """Streams metrics for a list of microgrid components.

        !!! note
            This RPC endpoint streams metrics data for components of one or more microgrids.
            Clients need to provide at least one microgrid ID and one component ID
            to get a result.
        """

    @abc.abstractmethod
    def ReceiveAggregatedMicrogridComponentsDataStream(
        self,
        request: frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse], collections.abc.AsyncIterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridComponentsDataStreamResponse]]:
        """Streams aggregated metrics based on user-defined formulas for a list of microgrid
        components.

        !!! note
            This RPC endpoint retrieves aggregated historical metrics data based on user-defined
            formulas for microgrid components. At least one formula for one microgrid must be provided
            for a valid result.
        """

    @abc.abstractmethod
    def ReceiveMicrogridSensorsDataStream(
        self,
        request: frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridSensorsDataStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridSensorsDataStreamResponse], collections.abc.AsyncIterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveMicrogridSensorsDataStreamResponse]]:
        """Streams metrics for a list of microgrid sensors.

        !!! note
            This RPC endpoint streams metrics data for sensors of one or more microgrids.
            Clients need to provide at least one microgrid ID and one sensor ID
            to get a result.
        """

    @abc.abstractmethod
    def ReceiveAggregatedMicrogridSensorsDataStream(
        self,
        request: frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridSensorsDataStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridSensorsDataStreamResponse], collections.abc.AsyncIterator[frequenz.api.reporting.v1.reporting_pb2.ReceiveAggregatedMicrogridSensorsDataStreamResponse]]:
        """Streams aggregated metrics based on user-defined formulas for a list of microgrid
        sensors.

        !!! note
            This RPC endpoint retrieves aggregated historical metrics data based on user-defined
            formulas for microgrid sensors. At least one formula for one microgrid must be provided
            for a valid result.
        """

def add_ReportingServicer_to_server(servicer: ReportingServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
