# License: MIT
# Copyright Â© 2023 Frequenz Energy-as-a-Service GmbH

[build-system]
requires = [
  "setuptools == 80.9.0",
  "setuptools_scm[toml] == 8.3.1",
  "frequenz-repo-config[api] == 0.13.5",
  # We need to pin the protobuf, grpcio and  grpcio-tools dependencies to make
  # sure the code is generated using the minimum supported versions, as older
  # versions can't work with code that was generated with newer versions.
  # https://protobuf.dev/support/cross-version-runtime-guarantee/#backwards
  "protobuf == 6.31.1",
  "grpcio-tools == 1.72.1",
  "grpcio == 1.72.1",

]
build-backend = "setuptools.build_meta"

[project]
name = "frequenz-api-reporting"
description = "Frequenz gRPC API to aggregate component data from microgrids"
readme = "README.md"
license = { text = "MIT" }
keywords = [
  "frequenz",
  "python",
  "api",
  "grpc",
  "protobuf",
  "rpc",
  "reporting",
  "cloud",
  "microgrid",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries",
  "Typing :: Typed",
]
requires-python = ">= 3.11, < 4"
dependencies = [
  "frequenz-api-common >= 0.8.0, < 0.9.0",
  # We can't widen beyond the current value unless we bump the minimum
  # requirements too because of protobuf cross-version runtime guarantees:
  # https://protobuf.dev/support/cross-version-runtime-guarantee/#major
  "protobuf >= 6.31.1, < 8", # Do not widen beyond 8!
  # We couldn't find any document with a spec about the cross-version runtime
  # guarantee for grpcio, so unless we find one in the future, we'll assume
  # major version jumps are not compatible
  "grpcio >= 1.72.1, < 2", # Do not widen beyond 2!
]
dynamic = ["version"]

[[project.authors]]
name = "Frequenz Energy-as-a-Service GmbH"
email = "floss@frequenz.com"

[project.optional-dependencies]
dev-flake8 = [
  "flake8 == 7.3.0",
  "flake8-docstrings == 1.7.0",
  "flake8-pyproject == 1.2.3", # For reading the flake8 config from pyproject.toml
  "pydoclint == 0.7.3",
  "pydocstyle == 6.3.0",
]
dev-formatting = ["black == 25.9.0", "isort == 6.1.0"]
dev-mkdocs = [
  "Markdown == 3.9",
  "black == 25.9.0",
  "mike == 2.1.3",
  "mkdocs-gen-files == 0.5.0",
  "mkdocs-literate-nav == 0.6.2",
  "mkdocs-macros-plugin == 1.4.0",
  "mkdocs-material == 9.6.21",
  "mkdocstrings[python] == 0.30.1",
  "mkdocstrings-python == 1.18.2",
  "frequenz-repo-config[api] == 0.13.5",
]
dev-mypy = [
  "mypy == 1.18.2",
  "grpc-stubs == 1.53.0.6",
  "types-Markdown == 3.9.0.20250906",
  # For checking the noxfile, docs/ script, and tests
  "frequenz-api-reporting[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-noxfile = ["nox == 2025.5.1", "frequenz-repo-config[api] == 0.13.5"]
dev-pylint = [
  # dev-pytest already defines a dependency to pylint because of the examples
  # For checking the noxfile, docs/ script, and tests
  "frequenz-api-reporting[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-pytest = [
  "pytest == 8.4.2",
  "pylint == 3.3.8", # We need this to check for the examples
  "frequenz-repo-config[extra-lint-examples] == 0.13.5",
]
dev = [
  "frequenz-api-reporting[dev-mkdocs,dev-flake8,dev-formatting,dev-mkdocs,dev-mypy,dev-noxfile,dev-pylint,dev-pytest]",
]

[project.urls]
Documentation = "https://frequenz-floss.github.io/frequenz-api-reporting/"
Changelog = "https://github.com/frequenz-floss/frequenz-api-reporting/releases"
Issues = "https://github.com/frequenz-floss/frequenz-api-reporting/issues"
Repository = "https://github.com/frequenz-floss/frequenz-api-reporting"
Support = "https://github.com/frequenz-floss/frequenz-api-reporting/discussions/categories/support"

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88
src_paths = ["benchmarks", "examples", "src", "tests"]

[tool.flake8]
# We give some flexibility to go over 88, there are cases like long URLs or
# code in documenation that have extra indentation. Black will still take care
# of making everything that can be 88 wide, 88 wide.
max-line-length = 100
extend-ignore = [
  "E203", # Whitespace before ':' (conflicts with black)
  "W503", # Line break before binary operator (conflicts with black)
]
# pydoclint options
style = "google"
check-return-types = false
check-yield-types = false
arg-type-hints-in-docstring = false
arg-type-hints-in-signature = true
allow-init-docstring = true
check-class-attributes = false

[tool.pylint.similarities]
ignore-comments = ['yes']
ignore-docstrings = ['yes']
ignore-imports = ['no']
min-similarity-lines = 40

[tool.pylint.messages_control]
disable = [
  "too-few-public-methods",
  "too-many-return-statements",
  # disabled because it conflicts with isort
  "wrong-import-order",
  "ungrouped-imports",
  # pylint's unsubscriptable check is buggy and is not needed because
  # it is a type-check, for which we already have mypy.
  "unsubscriptable-object",
  # Checked by mypy
  "no-member",
  "possibly-used-before-assignment",
  "no-name-in-module",
  # Checked by flake8
  "f-string-without-interpolation",
  "line-too-long",
  "missing-function-docstring",
  "redefined-outer-name",
  "unnecessary-lambda-assignment",
  "unused-import",
  "unused-variable",
]

[tool.pytest.ini_options]
addopts = "-vv"
filterwarnings = [
  "error",
  "once::DeprecationWarning",
  "once::PendingDeprecationWarning",
  # We ignore warnings about protobuf gencode version being one version older
  # than the current version, as this is supported by protobuf, and we expect to
  # have such cases. If we go too far, we will get a proper error anyways.
  # We use a raw string (single quotes) to avoid the need to escape special
  # characters as this is a regex.
  'ignore:Protobuf gencode version .*exactly one major version older.*:UserWarning',
]
testpaths = ["pytests"]

[tool.mypy]
explicit_package_bases = true
namespace_packages = true
# This option disables mypy cache, and it is sometimes useful to enable it if
# you are getting weird intermittent error, or error in the CI but not locally
# (or vice versa). In particular errors saying that type: ignore is not
# used but getting the original ignored error when removing the type: ignore.
# See for example: https://github.com/python/mypy/issues/2960
#no_incremental = true
packages = ["frequenz.api.reporting"]
strict = true

[[tool.mypy.overrides]]
module = ["mkdocs_macros.*", "sybil", "sybil.*"]
ignore_missing_imports = true

[tool.setuptools.package-dir]
"" = "py"

[tool.setuptools.package-data]
"*" = ["*.pyi"]

[tool.setuptools_scm]
version_scheme = "post-release"
