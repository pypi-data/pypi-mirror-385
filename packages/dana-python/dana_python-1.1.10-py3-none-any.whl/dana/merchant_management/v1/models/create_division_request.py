# Copyright 2025 PT Espay Debit Indonesia Koe
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Merchant Management API

    API for merchant management operations in DANA

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from dana.base.model import BaseSdkModel

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dana.merchant_management.v1.models.address_info import AddressInfo
from dana.merchant_management.v1.models.business_docs import BusinessDocs
from dana.merchant_management.v1.models.create_division_request_ext_info import CreateDivisionRequestExtInfo
from dana.merchant_management.v1.models.mobile_no_info import MobileNoInfo
from dana.merchant_management.v1.models.pic_info import PicInfo
from dana.merchant_management.v1.models.user_name import UserName
from typing import Optional, Set
from typing_extensions import Self
from pydantic import AliasGenerator
from pydantic.alias_generators import to_camel

class CreateDivisionRequest(BaseModel, BaseSdkModel):
    """
    CreateDivisionRequest
    """ # noqa: E501
    api_version: Annotated[str, Field(strict=True, max_length=8)] = Field(description="API Version. As per the respective API reference. Must be > 2")
    merchant_id: Annotated[str, Field(strict=True, max_length=21)] = Field(description="Merchant identifier")
    parent_division_id: Optional[StrictStr] = Field(default=None, description="Parent division identifier. Required when parentRoleType is DIVISION or EXTERNAL_DIVISION. Length depends on parentRoleType - DIVISION (21 max), EXTERNAL_DIVISION (64 max)")
    parent_role_type: StrictStr = Field(description="Type of parent role")
    division_name: Annotated[str, Field(strict=True, max_length=256)] = Field(description="Division name")
    division_address: AddressInfo = Field()
    division_description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="Division description")
    division_type: StrictStr = Field(description="Division type")
    external_division_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="External division identifier")
    logo_url_map: Optional[Dict[str, StrictStr]] = Field(default=None, description="Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO")
    ext_info: CreateDivisionRequestExtInfo = Field()
    mcc_codes: List[StrictStr] = Field(description="Merchant category codes")
    business_docs: List[BusinessDocs] = Field(description="Business documents. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB")
    business_entity: StrictStr = Field(description="Business entity type")
    owner_name: UserName = Field()
    owner_phone_number: MobileNoInfo = Field()
    owner_id_type: StrictStr = Field(description="Owner identifier type")
    owner_id_no: StrictStr = Field(description="Owner identifier number. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)")
    owner_address: AddressInfo = Field()
    director_pics: List[PicInfo] = Field(description="Director as a PIC of sub merchant")
    non_director_pics: List[PicInfo] = Field(description="Non director which become a PIC of sub merchant")
    size_type: StrictStr = Field(description="Size type")
    pg_division_flag: Optional[StrictStr] = Field(default=None, description="Flag if division is type PG")
    __properties: ClassVar[List[str]] = ["apiVersion", "merchantId", "parentDivisionId", "parentRoleType", "divisionName", "divisionAddress", "divisionDescription", "divisionType", "externalDivisionId", "logoUrlMap", "extInfo", "mccCodes", "businessDocs", "businessEntity", "ownerName", "ownerPhoneNumber", "ownerIdType", "ownerIdNo", "ownerAddress", "directorPics", "nonDirectorPics", "sizeType", "pgDivisionFlag"]

    @field_validator('parent_role_type')
    def parent_role_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MERCHANT', 'DIVISION', 'EXTERNAL_DIVISION']):
            raise ValueError("must be one of enum values ('MERCHANT', 'DIVISION', 'EXTERNAL_DIVISION')")
        return value

    @field_validator('division_type')
    def division_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['REGION', 'AREA', 'BRANCH', 'OUTLET', 'STORE', 'KIOSK', 'STALL', 'COUNTER', 'BOOTH', 'POINT_OF_SALE', 'VENDING_MACHINE']):
            raise ValueError("must be one of enum values ('REGION', 'AREA', 'BRANCH', 'OUTLET', 'STORE', 'KIOSK', 'STALL', 'COUNTER', 'BOOTH', 'POINT_OF_SALE', 'VENDING_MACHINE')")
        return value

    @field_validator('business_entity')
    def business_entity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pt', 'cv', 'individu', 'usaha_dagang', 'yayasan', 'koperasi']):
            raise ValueError("must be one of enum values ('pt', 'cv', 'individu', 'usaha_dagang', 'yayasan', 'koperasi')")
        return value

    @field_validator('owner_id_type')
    def owner_id_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['KTP', 'SIM', 'PASSPORT', 'SIUP', 'NIB']):
            raise ValueError("must be one of enum values ('KTP', 'SIM', 'PASSPORT', 'SIUP', 'NIB')")
        return value

    @field_validator('size_type')
    def size_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UMI', 'UKE', 'UME', 'UBE', 'URE']):
            raise ValueError("must be one of enum values ('UMI', 'UKE', 'UME', 'UBE', 'URE')")
        return value

    @field_validator('pg_division_flag')
    def pg_division_flag_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        alias_generator=AliasGenerator(serialization_alias=to_camel, validation_alias=to_camel),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict(), separators=(',', ':'))

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDivisionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of division_address
        if self.division_address:
            _dict['divisionAddress'] = self.division_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ext_info
        if self.ext_info:
            _dict['extInfo'] = self.ext_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in business_docs (list)
        _items = []
        if self.business_docs:
            for _item_business_docs in self.business_docs:
                if _item_business_docs:
                    _items.append(_item_business_docs.to_dict())
            _dict['businessDocs'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner_name
        if self.owner_name:
            _dict['ownerName'] = self.owner_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_phone_number
        if self.owner_phone_number:
            _dict['ownerPhoneNumber'] = self.owner_phone_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_address
        if self.owner_address:
            _dict['ownerAddress'] = self.owner_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in director_pics (list)
        _items = []
        if self.director_pics:
            for _item_director_pics in self.director_pics:
                if _item_director_pics:
                    _items.append(_item_director_pics.to_dict())
            _dict['directorPics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in non_director_pics (list)
        _items = []
        if self.non_director_pics:
            for _item_non_director_pics in self.non_director_pics:
                if _item_non_director_pics:
                    _items.append(_item_non_director_pics.to_dict())
            _dict['nonDirectorPics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDivisionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            # If it's a string (JSON), try to parse it
            if isinstance(obj, str):
                try:
                    obj = json.loads(obj)
                except json.JSONDecodeError:
                    return cls.model_validate(obj)
            else:
                return cls.model_validate(obj)

        
        # Handle OPEN_API nested response format: {"response": {"head": {...}, "body": {...}}}
        # Check if this is a response model and has nested structure
        if "CreateDivisionRequest".endswith("Response") and "response" in obj and "body" in obj["response"]:
            # For OPEN_API nested format, pass the nested response structure directly
            _obj = cls.model_validate({
                "apiVersion": obj.get("apiVersion"),
                "merchantId": obj.get("merchantId"),
                "parentDivisionId": obj.get("parentDivisionId"),
                "parentRoleType": obj.get("parentRoleType"),
                "divisionName": obj.get("divisionName"),
                "divisionAddress": AddressInfo.from_dict(obj["divisionAddress"]) if obj.get("divisionAddress") is not None else None,
                "divisionDescription": obj.get("divisionDescription"),
                "divisionType": obj.get("divisionType"),
                "externalDivisionId": obj.get("externalDivisionId"),
                "logoUrlMap": obj.get("logoUrlMap"),
                "extInfo": CreateDivisionRequestExtInfo.from_dict(obj["extInfo"]) if obj.get("extInfo") is not None else None,
                "mccCodes": obj.get("mccCodes"),
                "businessDocs": [BusinessDocs.from_dict(_item) for _item in obj["businessDocs"]] if obj.get("businessDocs") is not None else None,
                "businessEntity": obj.get("businessEntity"),
                "ownerName": UserName.from_dict(obj["ownerName"]) if obj.get("ownerName") is not None else None,
                "ownerPhoneNumber": MobileNoInfo.from_dict(obj["ownerPhoneNumber"]) if obj.get("ownerPhoneNumber") is not None else None,
                "ownerIdType": obj.get("ownerIdType"),
                "ownerIdNo": obj.get("ownerIdNo"),
                "ownerAddress": AddressInfo.from_dict(obj["ownerAddress"]) if obj.get("ownerAddress") is not None else None,
                "directorPics": [PicInfo.from_dict(_item) for _item in obj["directorPics"]] if obj.get("directorPics") is not None else None,
                "nonDirectorPics": [PicInfo.from_dict(_item) for _item in obj["nonDirectorPics"]] if obj.get("nonDirectorPics") is not None else None,
                "sizeType": obj.get("sizeType"),
                "pgDivisionFlag": obj.get("pgDivisionFlag")
            })
        else:
            # For flat format, pass the object as-is
            _obj = cls.model_validate({
                "apiVersion": obj.get("apiVersion"),
                "merchantId": obj.get("merchantId"),
                "parentDivisionId": obj.get("parentDivisionId"),
                "parentRoleType": obj.get("parentRoleType"),
                "divisionName": obj.get("divisionName"),
                "divisionAddress": AddressInfo.from_dict(obj["divisionAddress"]) if obj.get("divisionAddress") is not None else None,
                "divisionDescription": obj.get("divisionDescription"),
                "divisionType": obj.get("divisionType"),
                "externalDivisionId": obj.get("externalDivisionId"),
                "logoUrlMap": obj.get("logoUrlMap"),
                "extInfo": CreateDivisionRequestExtInfo.from_dict(obj["extInfo"]) if obj.get("extInfo") is not None else None,
                "mccCodes": obj.get("mccCodes"),
                "businessDocs": [BusinessDocs.from_dict(_item) for _item in obj["businessDocs"]] if obj.get("businessDocs") is not None else None,
                "businessEntity": obj.get("businessEntity"),
                "ownerName": UserName.from_dict(obj["ownerName"]) if obj.get("ownerName") is not None else None,
                "ownerPhoneNumber": MobileNoInfo.from_dict(obj["ownerPhoneNumber"]) if obj.get("ownerPhoneNumber") is not None else None,
                "ownerIdType": obj.get("ownerIdType"),
                "ownerIdNo": obj.get("ownerIdNo"),
                "ownerAddress": AddressInfo.from_dict(obj["ownerAddress"]) if obj.get("ownerAddress") is not None else None,
                "directorPics": [PicInfo.from_dict(_item) for _item in obj["directorPics"]] if obj.get("directorPics") is not None else None,
                "nonDirectorPics": [PicInfo.from_dict(_item) for _item in obj["nonDirectorPics"]] if obj.get("nonDirectorPics") is not None else None,
                "sizeType": obj.get("sizeType"),
                "pgDivisionFlag": obj.get("pgDivisionFlag")
            })
        
        return _obj


