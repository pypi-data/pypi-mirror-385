[project]
name = "formatify_py"
version = "1.0.2"
description = "Auto-detect and standardize datetime formats from raw timestamps"
keywords = ["timestamp", "datetime", "standardization", "parsing", "format-detection"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
readme = "README.md"
authors = [
  { name = "AR", email = "roy.aalekh@gmail.com" }
]
license = {text = "MIT"}

requires-python = ">=3.9"
dependencies = []

[project.optional-dependencies]
dev = [
  "pytest>=8.0.0",
  "pytest-cov>=4.0.0",
  "ruff>=0.1.0",
  "mypy>=1.7.0",
  "black>=23.0.0",
  "isort>=5.12.0",
  "pre-commit>=3.0.0",
  "build>=1.0.0",
]
test = [
  "pytest>=8.0.0",
  "pytest-cov>=4.0.0",
]

[project.urls]
"Homepage"   = "https://github.com/PieceWiseProjects/formatify"
"Repository" = "https://github.com/PieceWiseProjects/formatify"

[build-system]
requires    = ["setuptools>=61.0", "wheel", "build"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 88
fix = true
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "C90", # mccabe
]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
# Allow up to 30 McCabe complexity (raise from the default 10)
max-complexity = 30

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=src/formatify_py --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
