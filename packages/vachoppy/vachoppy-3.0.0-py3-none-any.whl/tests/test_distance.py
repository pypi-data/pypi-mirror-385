import os
import pytest
import numpy as np
from pathlib import Path
from numpy.testing import assert_allclose
from vachoppy.fingerprint import plot_cosine_distance


@pytest.fixture
def run_plot_cosine_distance_fixture(tmp_path):
    """
    Fixture to run plot_cosine_distance and return the path to the
    generated output file and the expected data array.
    """
    current_dir = Path(__file__).parent
    path_traj_Hf = current_dir / 'test_data' / '7.distance' / 'TRAJ_Hf_2200K.h5'
    path_traj_O = current_dir / 'test_data' / '7.distance' / 'TRAJ_O_2200K.h5'
    path_structure = current_dir / 'test_data' / '7.distance' / 'POSCAR_TETRAGONAL'
    path_answer = current_dir / 'test_data' / '7.distance' / 'answer_cosine_distance_trace.txt'

    if not path_traj_Hf.is_file():
        pytest.fail(f"Test input file not found: {path_traj_Hf}")
    if not path_traj_O.is_file():
        pytest.fail(f"Test input file not found: {path_traj_O}")
    if not path_structure.is_file():
        pytest.fail(f"Test input file not found: {path_structure}")
    if not path_answer.is_file():
        pytest.fail(f"Test answer file not found: {path_answer}")

    try:
        expected_distance = np.loadtxt(path_answer, skiprows=2)
    except Exception as e:
        pytest.fail(f"Failed to load answer file '{path_answer}': {e}")

    output_prefix = 'cosine_distance_trace'
    output_dir = tmp_path
    
    try:
        plot_cosine_distance(
            path_traj=[str(path_traj_Hf), str(path_traj_O)],
            t_interval=0.05,
            reference_structure=str(path_structure),
            disp=False,
            verbose=False,
            path_dir=str(output_dir),
            prefix=output_prefix
        )
    except Exception as e:
        pytest.fail(f"Failed to call plot_cosine_distance(): {e}")

    output_file_path = output_dir / f'{output_prefix}.txt'

    if not output_file_path.is_file():
        pytest.fail(f"Output file was not created by plot_cosine_distance(): {output_file_path}")

    return output_file_path, expected_distance


def test_distance_output_data(run_plot_cosine_distance_fixture):
    """
    Tests if the data file generated by plot_cosine_distance matches
    the expected answer data.
    """
    output_file_path, expected_distance = run_plot_cosine_distance_fixture

    try:
        actual_distance = np.loadtxt(output_file_path, skiprows=2)
    except Exception as e:
        pytest.fail(f"Failed to read generated output file '{output_file_path}': {e}")

    assert_allclose(actual_distance, expected_distance)
