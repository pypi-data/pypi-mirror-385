# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[project]
name = "nebulog"
description = "Rich output spectacularly merged into Loguru to serve as the cradle of your stellar logs"
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.10"
authors = [
  { name = "Manoel Pereira de Queiroz", email = "mpq.dev@pm.me" },
]
maintainers = [
  { name = "Manoel Pereira de Queiroz", email = "mpq.dev@pm.me" },
]
# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  # UPDATEME with relevant keywords
dynamic = ["classifiers"]
version = "0.1.0"

[project.urls]
repository = "https://gitlab.com/galactipy/nebulog"
homepage = "https://gitlab.com/galactipy/nebulog"
"Work Item Tracker" = "https://gitlab.com/galactipy/nebulog/-/issues"
"Contributing Guidelines" = "https://gitlab.com/galactipy/nebulog/-/tree/master/CONTRIBUTING.md"


[build-system]
requires = ["poetry_core>=1.0.0", "poetry-dynamic-versioning>=1.7.1,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poetry]
requires-poetry = ">=2.0"
# Placeholder for poetry-dynamic-versioning, do not change:
# https://github.com/mtkennerly/poetry-dynamic-versioning#installation
packages = [
  {include = "nebulog"}
]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  # UPDATEME with additional classifiers
  "Development Status :: 1 - Planning",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
]


[tool.poetry.dependencies]
python = "^3.10"
rich = "^14.1.0"
loguru = "^0.7.3"
typing-extensions = "^4.15.0"


[tool.poetry.group.dev.dependencies]
invoke = "^2.2.0"
mypy = { extras = ["reports"], version = "^1.14.1" }
mypy-extensions = "^1.0.0"
pre-commit = "^4.1.0"
bandit = "^1.8.2"
ruff = "^0.13.1"
pytest = "^8.3.4"
pytest-html = "^4.1.1"
pytest-cov = "^7.0.0"
pytest-mock = "^3.14.0"
pytest-timeout = "^2.3.1"
pytest-benchmark = "^5.1.0"
pytest-sugar = "^1.0.0"
pytest-pikachu = "^1.0.0"
coverage = "^7.6.10"
richuru = "^0.1.1"


[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = "^1.7.1", extras = ["plugin"] }
poetry-plugin-export = "^1.9.0"
poetry-plugin-up = "^0.9.0"
poetry-plugin-bundle = "^1.5.0"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "semver"
metadata = false
bump = { enable = true, index = 1 }


[tool.ruff]
# https://github.com/astral-sh/ruff
# https://docs.astral.sh/ruff/settings
output-format = "grouped"
show-fixes = true
target-version = "py39"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [  # UPDATEME with additional rules from https://docs.astral.sh/ruff/rules/
  "F",
  "E",
  "W",
  "I",
  "N",
  "D",
  "S",
  "B",
  "UP",
  "C90",
  "T20",
  "EM",
  "PL",
  "C4",
  "PT",
  "TD",
  "ANN",
  "ICN",
  "RET",
  "ISC",
  "RSE",
  "ARG",
  "FBT",
  "SIM",
  "TID",
  "PTH",
  "TCH",
  "FIX",
  "BLE",
  "ERA",
  "TRY",
  "FLY",
  "YTT",
  "CPY",
  "RUF",
]
ignore = ["D200"]
task-tags = [
  "BUG",
  "HACK",
  "FIXME",
  "FIXIT",
  "FIX",
  "NEEDSWORK",
  "UPDATEME",
  "TODO",
  "REFACTOR",
]  # UPDATEME by modifying or removing this setting after addressing all UPDATEMEs

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D401",
  "S101",
  "ANN002",
  "ANN003",
  "ANN201",
  "PLR2004",
]
"tests/test_initialisation.py" = ["PLC0415"]
"tasks.py" = ["FBT", "ANN002", "ANN003"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-values-type = "tuple"
parametrize-values-row-type = "list"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
max-line-length = 88
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-copyright]
author = "The Galactipy Contributors"

[tool.ruff.lint.pylint]
max-bool-expr = 3

[tool.ruff.lint.isort]
split-on-trailing-comma = false
known-first-party = ["nebulog"]
sections.typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions", "pytype", "pydantic"]
sections.logging = ["logging", "loguru"]
sections.testing = ["pytest", "pytest_mock", "pyfakefs", "testinfra"]
section-order = [
  "future",
  "typing",
  "standard-library",
  "logging",
  "third-party",
  "testing",
  "first-party",
  "local-folder",
]


[tool.mypy]
# https://github.com/python/mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
python_version = "3.10"
packages = ["nebulog", "tests"]
html_report = "mypycov"
cobertura_xml_report = "mypy_coverage"
junit_xml = "mypy_report.xml"

pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
explicit_package_bases = true
ignore_missing_imports = true
no_implicit_reexport = true
implicit_optional = false
show_column_numbers = true
show_error_context = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "nebulog"

disallow_any_generics = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests"
disable_error_code = ["import", "name-defined", "attr-defined"]


[tool.pytest.ini_options]
# https://github.com/pytest-dev/pytest
# https://docs.pytest.org/en/stable/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =[
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
markers = [
  "backend",
  "frontend",
  "standard",
  "validation",
  "edge",
  "security",
  "performance",
  "persistence",
  "config",
  "customization",
  "compatibility",
  "async",
  "integration",
  "database",
  "api",
  "identity",
  "networking",
  "monitoring",
]
timeout = 10

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--pikachu",
  "--cov=nebulog",
  "--cov-config=pyproject.toml",
  "--junitxml=test_report.xml",
]


[tool.coverage.run]
# https://github.com/nedbat/coveragepy
# https://coverage.readthedocs.io/en/latest/config.html
source = ["tests"]
branch = true
omit = [
  "nebulog/interfaces.py",
  "nebulog/examples/constants.py",
  "nebulog/examples/highlighters.py",
  "nebulog/types.py",
]


[tool.coverage.report]
exclude_also = [
  "def main",
  "if __name__ == .__main__.:",
]
fail_under = 85
show_missing = true


[tool.coverage.paths]
source = ["nebulog"]

[tool.bandit]
# UPDATEME with your desired configuration
# https://github.com/PyCQA/bandit
# https://bandit.readthedocs.io/en/latest/config.html
