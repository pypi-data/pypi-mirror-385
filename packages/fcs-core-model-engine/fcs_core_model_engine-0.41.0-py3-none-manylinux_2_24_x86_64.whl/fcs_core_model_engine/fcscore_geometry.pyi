
import enum
from typing import ( 
    List,
    Tuple,
	Dict
)

from .fcscore_core import *

# OpenCascade Legacy Types
class TopoDS_Shape: ...
class TopAbs_ShapeEnum(enum.Enum):
	COMPSOLID : TopAbs_ShapeEnum
	SOLID : TopAbs_ShapeEnum
	SHELL : TopAbs_ShapeEnum
	FACE : TopAbs_ShapeEnum
	WIRE : TopAbs_ShapeEnum
	EDGE : TopAbs_ShapeEnum
	VERTEX : TopAbs_ShapeEnum
	SHAPE : TopAbs_ShapeEnum

class ExplodeType(enum.Enum):
	EXPLODE_OLD_INCLUDE_MAIN : ExplodeType
	EXPLODE_NEW_INCLUDE_MAIN : ExplodeType
	EXPLODE_NEW_EXCLUDE_MAIN : ExplodeType

class ComparisonConditionGeometry(enum.Enum):
	CC_GT : ComparisonConditionGeometry
	CC_GE : ComparisonConditionGeometry
	CC_LT : ComparisonConditionGeometry
	CC_LE : ComparisonConditionGeometry

class ShapeKind(enum.Enum):
	SK_NO_SHAPE : ShapeKind 
	SK_COMPOUND : ShapeKind 
	SK_COMPSOLID : ShapeKind 
	SK_SHELL : ShapeKind 
	SK_WIRE : ShapeKind 
	SK_SPHERE : ShapeKind 
	SK_CYLINDER : ShapeKind 
	SK_BOX : ShapeKind
	SK_ROTATED_BOX : ShapeKind 
	SK_TORUS : ShapeKind
	SK_CONE : ShapeKind 
	SK_POLYHEDRON : ShapeKind 
	SK_SOLID : ShapeKind
	SK_SPHERE2D : ShapeKind
	SK_CYLINDER2D : ShapeKind
	SK_TORUS2D : ShapeKind
	SK_CONE2D : ShapeKind
	SK_DISK_CIRCLE : ShapeKind
	SK_DISK_ELLIPSE : ShapeKind
	SK_POLYGON : ShapeKind
	SK_PLANE : ShapeKind
	SK_PLANAR : ShapeKind
	SK_FACE : ShapeKind 
	SK_CIRCLE : ShapeKind
	SK_ARC_CIRCLE : ShapeKind
	SK_ELLIPSE : ShapeKind
	SK_ARC_ELLIPSE : ShapeKind
	SK_LINE : ShapeKind
	SK_SEGMENT : ShapeKind
	SK_EDGE : ShapeKind
	SK_VERTEX : ShapeKind
	SK_LCS : ShapeKind 
	SK_ADVANCED : ShapeKind

class SICheckLevel(enum.Enum):
	SI_V_V : SICheckLevel # only V/V interferences
	SI_V_E : SICheckLevel # V/V and V/E interferences
	SI_E_E : SICheckLevel # V/V, V/E and E/E interferences
	SI_V_F : SICheckLevel # V/V, V/E, E/E and V/F interferences
	SI_E_F : SICheckLevel # V/V, V/E, E/E, V/F and E/F interferences
	SI_ALL : SICheckLevel # All

class GeometricShape:
    def get_t2g_file_name(self) -> str:
        """
        Gets the relative path to the T2G asset file.
        :return: The path to the T2G asset file.
        """
        ...

    def set_t2g_file_name(self, file_path: str) -> bool:
        """
        Sets the relative path to the T2G asset file.
        :param file_path: Path to the T2G asset file.
        :return: True if the file path was successfully set.
        """
        ...

    def get_shape_type(self) -> "TopAbs_ShapeEnum":
        """
        Gets the OCC shape type.
        :return: The shape type as an OCC enumeration.
        """
        ...
		
    def get_shape(self) -> "TopoDS_Shape":
        """
        Copy of the underlying OCC shape.
        :return: OCC shape
        """
        ...

    def get_shape_id(self) -> int:
        """
        Gets the unique ID of the shape.
        :return: The unique shape ID.
        """
        ...

    def is_deletable(self) -> bool:
        """
        Checks if the shape can be deleted.
        :return: True if the shape is deletable.
        """
        ...

    def is_standalone_shape(self) -> bool:
        """
        Checks if the shape is standalone.
        :return: True if the shape is standalone.
        """
        ...

    def is_main_shape(self) -> bool:
        """
        Checks if this is the main shape.
        :return: True if this is the main shape.
        """
        ...

    def get_geometry(self) -> GEOM_Object:
        """
        Gets a copy of the underlying geometry.
        :return: A handle to the underlying geometry.
        """
        ...

    def get_all_nested_shape_ids(self) -> List[Tuple[int, "TopAbs_ShapeEnum"]]:
        """
        Recursively retrieves all nested shape IDs and types.
        :return: A list of tuples with shape IDs and their corresponding types.
        """
        ...

    def get_main_shape_id(self) -> int:
        """
        Retrieves the main shape ID.
        :return: The main shape ID.
        """
        ...
		
    def get_shape_types(self, shape_ids: List[int]) -> List["TopAbs_ShapeEnum"]:
        """
        Retrieves the shape types for a collection of shape IDs.

        :param shape_ids: A list of shape IDs.
        :return: A list of shape types for the specified IDs.
        """
        ...

    def is_valid(self) -> bool:
        """
        Checks if the shape instance is valid.

        :return: True if the shape is valid.
        """
        ...
		
    def get_error_message(self) -> str:
        """
        If the shape is invalid, this may provide some information as to why 
		the shape's construction is not valid.
		
		:return: The error message as to why it is invalid
        """
        ...



class GEOM_Object: 
	def is_null(self) -> bool: ...
	def is_shape_null(self) -> bool: ...
	def is_tshape_null(self) -> bool: ...
	def get_shape_copy(self) -> TopoDS_Shape: ...
class TColStd_HSequenceOfTransient: ...
class GEOM_Field: ...
class GEOMAlgo_State(enum.Enum):
	GEOMAlgo_ST_UNKNOWN : GEOMAlgo_State
	GEOMAlgo_ST_IN : GEOMAlgo_State
	GEOMAlgo_ST_OUT : GEOMAlgo_State
	GEOMAlgo_ST_ON : GEOMAlgo_State
	GEOMAlgo_ST_ONIN : GEOMAlgo_State
	GEOMAlgo_ST_ONOUT : GEOMAlgo_State
	GEOMAlgo_ST_INOUT : GEOMAlgo_State
	

class Geometry3DPrimitives:
	def __init__(self): ...
	def make_box_dx_dy_dz(self,  the_d_x: float, the_d_y: float, the_d_z: float) -> GEOM_Object: ... 
	def make_box_two_pnt(self,  the_pnt1: GEOM_Object, the_pnt2: GEOM_Object) -> GEOM_Object: ... 
	def make_face_h_w(self,  the_h: float, the_w: float, the_orientation: int) -> GEOM_Object: ... 
	def make_face_obj_h_w(self,  the_obj: GEOM_Object, the_h: float, the_w: float) -> GEOM_Object: ... 
	def make_disk_three_pnt(self,  the_pnt1: GEOM_Object, the_pnt2: GEOM_Object, the_pnt3: GEOM_Object) -> GEOM_Object: ... 
	def make_disk_pnt_vec_r(self,  the_pnt1: GEOM_Object, the_vec: GEOM_Object, the_r: float) -> GEOM_Object: ... 
	def make_disk_r(self,  the_r: float, the_orientation: int) -> GEOM_Object: ... 
	def make_cylinder_r_h(self,  the_r: float, the_h: float) -> GEOM_Object: ... 
	def make_cylinder_pnt_vec_r_h(self,  the_pnt: GEOM_Object, the_vec: GEOM_Object, the_r: float, the_h: float) -> GEOM_Object: ... 
	def make_cylinder_r_h_a(self,  the_r: float, the_h: float, the_a: float) -> GEOM_Object: ... 
	def make_cylinder_pnt_vec_r_h_a(self,  the_pnt: GEOM_Object, the_vec: GEOM_Object, the_r: float, the_h: float, the_a: float) -> GEOM_Object: ... 
	def make_cone_r1_r2_h(self,  the_r1: float, the_r2: float, the_h: float) -> GEOM_Object: ... 
	def make_cone_pnt_vec_r1_r2_h(self,  the_pnt: GEOM_Object, the_vec: GEOM_Object, the_r1: float, the_r2: float, the_h: float) -> GEOM_Object: ... 
	def make_sphere_r(self,  the_r: float) -> GEOM_Object: ... 
	def make_sphere_pnt_r(self,  the_pnt: GEOM_Object, the_r: float) -> GEOM_Object: ... 
	def make_torus_r_r(self,  the_r_major: float, the_r_minor: float) -> GEOM_Object: ... 
	def make_torus_pnt_vec_r_r(self,  the_pnt: GEOM_Object, the_vec: GEOM_Object, the_r_major: float, the_r_minor: float) -> GEOM_Object: ... 
	def make_prism_vec_h(self,  the_base: GEOM_Object, the_vec: GEOM_Object, the_h: float, the_scale_factor=-1) -> GEOM_Object: ... 
	def make_prism_vec_h2_ways(self,  the_base: GEOM_Object, the_vec: GEOM_Object, the_h: float) -> GEOM_Object: ... 
	def make_prism_two_pnt(self,  the_base: GEOM_Object, the_point1: GEOM_Object, the_point2: GEOM_Object, the_scale_factor=-1) -> GEOM_Object: ... 
	def make_prism_two_pnt2_ways(self,  the_base: GEOM_Object, the_point1: GEOM_Object, the_point2: GEOM_Object) -> GEOM_Object: ... 
	def make_prism_dx_dy_dz(self,  the_base: GEOM_Object, the_d_x: float, the_d_y: float, the_d_z: float, the_scale_factor=-1) -> GEOM_Object: ... 
	def make_prism_dx_dy_dz_2ways(self,  the_base: GEOM_Object, the_d_x: float, the_d_y: float, the_d_z: float) -> GEOM_Object: ... 
	def make_draft_prism(self,  the_init_shape: GEOM_Object, the_base: GEOM_Object, the_height: float, the_angle: float, the_fuse: bool, invert=False) -> GEOM_Object: ... 
	def make_pipe(self,  the_base: GEOM_Object, the_path: GEOM_Object, is_generate_groups: bool) -> TColStd_HSequenceOfTransient: ... 
	def make_revolution_axis_angle(self,  the_base: GEOM_Object, the_axis: GEOM_Object, the_angle: float) -> GEOM_Object: ... 
	def make_revolution_axis_angle2_ways(self,  the_base: GEOM_Object, the_axis: GEOM_Object, the_angle: float) -> GEOM_Object: ... 
	def make_filling(self,  the_contours: list, the_min_deg: int, the_max_deg: int, the_tol2_d: float, the_tol3_d: float, the_nb_iter: int, the_method: int, is_approx: bool) -> GEOM_Object: ... 
	def make_thru_sections(self,  the_seq_sections: TColStd_HSequenceOfTransient, the_mode_solid: bool, the_preci: float, the_ruled: bool) -> GEOM_Object: ... 
	def make_pipe_with_different_sections(self,  the_bases: TColStd_HSequenceOfTransient, the_locations: TColStd_HSequenceOfTransient, the_path: GEOM_Object, the_with_contact: bool, the_with_corrections: bool, is_by_steps: bool, is_generate_groups: bool) -> TColStd_HSequenceOfTransient: ... 
	def make_pipe_with_shell_sections(self,  the_bases: TColStd_HSequenceOfTransient, the_sub_bases: TColStd_HSequenceOfTransient, the_locations: TColStd_HSequenceOfTransient, the_path: GEOM_Object, the_with_contact: bool, the_with_corrections: bool, is_generate_groups: bool) -> TColStd_HSequenceOfTransient: ... 
	def make_pipe_shells_without_path(self,  the_bases: TColStd_HSequenceOfTransient, the_locations: TColStd_HSequenceOfTransient, is_generate_groups: bool) -> TColStd_HSequenceOfTransient: ... 
	def make_thickening(self,  the_object: GEOM_Object, the_faces_id_s: list, the_offset: float, is_copy: bool, inside: bool) -> GEOM_Object: ... 
	def restore_path(self,  the_shape: GEOM_Object, the_base1: GEOM_Object, the_base2: GEOM_Object) -> GEOM_Object: ... 
	# def restore_path(self,  the_shape: GEOM_Object, the_base1: TColStd_HSequenceOfTransient, the_base2) -> GEOM_Object: ... 

class ExtGeometry3DPrimitives:
	def __init__(self, operator: Geometry3DPrimitives): ...
	def make_pipe_bi_normal_along_vector(self,  the_base: GEOM_Object, the_path: GEOM_Object, the_vec: GEOM_Object, is_generate_groups: bool) -> List[GEOM_Object]: ... 

class GeometryBasicOperations:
	def __init__(self): ...
	def make_point_xyz(self,  d__x: float, d__y: float, d__z: float) -> GEOM_Object: ... 
	def make_point_with_reference(self,  the_reference: GEOM_Object, the_x: float, the_y: float, the_z: float) -> GEOM_Object: ... 
	def make_point_on_curve(self,  the_curve: GEOM_Object, the_parameter: float, take_orientation_into_account: bool) -> GEOM_Object: ... 
	def make_point_on_curve_by_length(self,  the_curve: GEOM_Object, the_start_point: GEOM_Object, the_length: float) -> GEOM_Object: ... 
	def make_point_on_curve_by_coord(self,  the_curve: GEOM_Object, the_x_param: float, the_y_param: float, the_z_param: float) -> GEOM_Object: ... 
	def make_point_on_lines_intersection(self,  the_line1: GEOM_Object, the_line2: GEOM_Object) -> GEOM_Object: ... 
	def make_point_on_surface(self,  the_surface: GEOM_Object, the_u_parameter: float, the_v_parameter: float) -> GEOM_Object: ... 
	def make_point_on_surface_by_coord(self,  the_surface: GEOM_Object, the_x_param: float, the_y_param: float, the_z_param: float) -> GEOM_Object: ... 
	def make_point_on_face(self,  the_face: GEOM_Object) -> GEOM_Object: ... 
	def make_vector(self,  the_d_x: float, the_d_y: float, the_d_z: float) -> GEOM_Object: ... 
	def make_vector_two_pnt(self,  the_pnt1: GEOM_Object, the_pnt2: GEOM_Object) -> GEOM_Object: ... 
	def make_tangent_on_curve(self,  the_curve: GEOM_Object, the_parameter: float) -> GEOM_Object: ... 
	def make_line_two_pnt(self,  the_pnt1: GEOM_Object, the_pnt2: GEOM_Object) -> GEOM_Object: ... 
	def make_line_two_faces(self,  the_face1: GEOM_Object, the_face2: GEOM_Object) -> GEOM_Object: ... 
	def make_line(self,  the_pnt: GEOM_Object, the_dir: GEOM_Object) -> GEOM_Object: ... 
	def make_plane_three_points(self,  the_pnt1: GEOM_Object, the_pnt2: GEOM_Object, the_pnt3: GEOM_Object, the_size: float) -> GEOM_Object: ... 
	def make_plane_point_vector(self,  the_pnt: GEOM_Object, the_vec: GEOM_Object, the_size: float) -> GEOM_Object: ... 
	def make_plane_face(self,  the_face: GEOM_Object, the_size: float) -> GEOM_Object: ... 
	def make_plane_two_vectors(self,  the_vec1: GEOM_Object, the_vec2: GEOM_Object, the_size: float) -> GEOM_Object: ... 
	def make_plane_lcs(self,  the_face: GEOM_Object, the_size: float, the_orientation: int) -> GEOM_Object: ... 
	def make_marker(self,  the_o_x: float, the_o_y: float, the_o_z: float, the_x_d_x: float, the_x_d_y: float, the_x_d_z: float, the_y_d_x: float, the_y_d_y: float, the_y_d_z: float) -> GEOM_Object: ... 
	def make_marker_from_shape(self,  the_shape: GEOM_Object) -> GEOM_Object: ... 
	def make_marker_point_two_vectors(self,  the_origin: GEOM_Object, the_x_vec: GEOM_Object, the_y_vec: GEOM_Object) -> GEOM_Object: ... 
	def make_tangent_plane_on_face(self,  the_face: GEOM_Object, the_param_u: float, the_param_v: float, the_size: float) -> GEOM_Object: ...
	
class GeometryBlockOperations:
	def __init__(self): ...
	def make_quad(self,  the_edge1: GEOM_Object,  the_edge2: GEOM_Object,  the_edge3: GEOM_Object,  the_edge4: GEOM_Object) -> GEOM_Object: ... 
	def make_quad2_edges(self,  the_edge1: GEOM_Object,  the_edge2: GEOM_Object) -> GEOM_Object: ... 
	def make_quad4_vertices(self,  the_point1: GEOM_Object,  the_point2: GEOM_Object,  the_point3: GEOM_Object,  the_point4: GEOM_Object) -> GEOM_Object: ... 
	def make_hexa(self,  the_face1: GEOM_Object,  the_face2: GEOM_Object,  the_face3: GEOM_Object,  the_face4: GEOM_Object,  the_face5: GEOM_Object,  the_face6: GEOM_Object) -> GEOM_Object: ... 
	def make_hexa2_faces(self,  the_face1: GEOM_Object,  the_face2: GEOM_Object) -> GEOM_Object: ... 
	def make_block_compound(self,  the_compound: GEOM_Object) -> GEOM_Object: ... 
	def get_point(self,  the_shape: GEOM_Object,  the_x: float,  the_y: float,  the_z: float,  the_epsilon: float) -> GEOM_Object: ... 
	def get_vertex_near_point(self,  the_shape: GEOM_Object,  the_point: GEOM_Object) -> GEOM_Object: ... 
	def get_edge(self,  the_shape: GEOM_Object,  the_point1: GEOM_Object,  the_point2: GEOM_Object) -> GEOM_Object: ... 
	def get_edge_near_point(self,  the_block: GEOM_Object,  the_point: GEOM_Object) -> GEOM_Object: ... 
	def get_face_by_points(self,  the_shape: GEOM_Object,  the_point1: GEOM_Object,  the_point2: GEOM_Object,  the_point3: GEOM_Object,  the_point4: GEOM_Object) -> GEOM_Object: ... 
	def get_face_by_edges(self,  the_shape: GEOM_Object,  the_edge1: GEOM_Object,  the_edge2: GEOM_Object) -> GEOM_Object: ... 
	def get_opposite_face(self,  the_block: GEOM_Object,  the_face: GEOM_Object) -> GEOM_Object: ... 
	def get_face_near_point(self,  the_block: GEOM_Object,  the_point: GEOM_Object) -> GEOM_Object: ... 
	def get_face_by_normale(self,  the_block: GEOM_Object,  the_vector: GEOM_Object) -> GEOM_Object: ... 
	def get_shapes_near_point(self,  the_shape: GEOM_Object,  the_point: GEOM_Object,  the_shape_type: int,  the_tolerance: float) -> GEOM_Object: ... 
	def is_compound_of_blocks(self,  the_compound: GEOM_Object,  the_min_nb_faces: int,  the_max_nb_faces: int,  the_nb_blocks: int) -> bool: ... 
	def check_compound_of_blocks(self,  the_compound: GEOM_Object,  the_tolerance_c1: float,  the_errors: list) -> bool: ... 
	def print_b_c_errors(self,  the_compound: GEOM_Object,  the_errors: list) -> str: ... 
	def get_non_blocks(self,  the_shape: GEOM_Object,  the_tolerance_c1: float,  the_non_quads: GEOM_Object) -> GEOM_Object: ... 
	def remove_extra_edges(self,  the_shape: GEOM_Object,  theOptimumNbFaces = 6) -> GEOM_Object: ... 
	def union_faces(self,  the_shape: GEOM_Object) -> GEOM_Object: ... 
	def check_and_improve(self,  the_compound: GEOM_Object) -> GEOM_Object: ... 
	def explode_compound_of_blocks(self,  the_compound: GEOM_Object,  the_min_nb_faces: int,  the_max_nb_faces: int) -> TColStd_HSequenceOfTransient: ... 
	def get_block_near_point(self,  the_compound: GEOM_Object,  the_point: GEOM_Object) -> GEOM_Object: ... 
	def get_block_by_parts(self,  the_compound: GEOM_Object,  the_parts: TColStd_HSequenceOfTransient) -> GEOM_Object: ... 
	def get_blocks_by_parts(self,  the_compound: GEOM_Object,  the_parts: TColStd_HSequenceOfTransient) -> TColStd_HSequenceOfTransient: ... 
	def make_multi_transformation1_d(self,  the_block: GEOM_Object,  the_dir_face1: int,  the_dir_face2: int,  the_nb_times: int) -> GEOM_Object: ... 
	def make_multi_transformation2_d(self,  the_block: GEOM_Object,  the_dir_face1_u: int,  the_dir_face2_u: int,  the_nb_times_u: int,  the_dir_face1_v: int,  the_dir_face2_v: int,  the_nb_times_v: int) -> GEOM_Object: ... 
	def propagate(self,  the_shape: GEOM_Object) -> TColStd_HSequenceOfTransient: ... 

class GeometryBooleanOperations:
	def __init__(self): ...
	def make_boolean(self,  the_shape1: GEOM_Object,  the_shape2: GEOM_Object,  the_op: int,  is_check_self_inte: bool) -> GEOM_Object: ... 
	def make_fuse(self,  the_shape1: GEOM_Object,  the_shape2: GEOM_Object,  is_check_self_inte: bool,  is_rm_extra_edges: bool) -> GEOM_Object: ... 
	def make_fuse_list(self,  the_shapes: TColStd_HSequenceOfTransient,  is_check_self_inte: bool,  is_rm_extra_edges: bool) -> GEOM_Object: ... 
	def make_common_list(self,  the_shapes: TColStd_HSequenceOfTransient,  is_check_self_inte: bool) -> GEOM_Object: ... 
	def make_cut_list(self,  the_main_shape: GEOM_Object,  the_shapes: TColStd_HSequenceOfTransient,  is_check_self_inte: bool) -> GEOM_Object: ... 
	def make_half_partition(self,  the_shape: GEOM_Object,  the_plane: GEOM_Object) -> GEOM_Object: ... 

class ExtGeometryBooleanOperations:
	def __init__(self, engine: GeometryBooleanOperations): ...
	def make_partition(self,  the_shapes: TColStd_HSequenceOfTransient,  the_tools: TColStd_HSequenceOfTransient,  the_keep_inside: TColStd_HSequenceOfTransient,  the_remove_inside: TColStd_HSequenceOfTransient,  the_limit: int,  the_remove_webs: bool,  the_materials: list,  the_keep_nonlimit_shapes: int,  the_perform_self_intersections: bool,  is_check_self_inte: bool) -> GEOM_Object: ... 

class GeometryCurveOperations:
	def __init__(self): ...
	def make_circle_three_pnt(self,  the_pnt1: GEOM_Object,  the_pnt2: GEOM_Object,  the_pnt3: GEOM_Object) -> GEOM_Object: ... 
	def make_circle_center2_pnt(self,  the_pnt1: GEOM_Object,  the_pnt2: GEOM_Object,  the_pnt3: GEOM_Object) -> GEOM_Object: ... 
	def make_circle_pnt_vec_r(self,  the_pnt: GEOM_Object,  the_vec: GEOM_Object,  the_r: float) -> GEOM_Object: ... 
	def make_ellipse(self,  the_pnt: GEOM_Object,  the_vec: GEOM_Object,  the_r_major: float,  the_r_minor: float,  the_vec_maj: GEOM_Object) -> GEOM_Object: ... 
	def make_arc(self,  the_pnt1: GEOM_Object,  the_pnt2: GEOM_Object,  the_pnt3: GEOM_Object) -> GEOM_Object: ... 
	def make_arc_center(self,  the_pnt1: GEOM_Object,  the_pnt2: GEOM_Object,  the_pnt3: GEOM_Object,  the_sense: bool) -> GEOM_Object: ... 
	def make_arc_of_ellipse(self,  the_pnt1: GEOM_Object,  the_pnt2: GEOM_Object,  the_pnt3: GEOM_Object) -> GEOM_Object: ... 
	def make_polyline(self,  the_points: list,  is_closed=False) -> GEOM_Object: ... 
	def make_spline_bezier(self,  the_points: list,  is_closed=False) -> GEOM_Object: ... 
	def make_spline_interpolation(self,  the_points: list,  is_closed=False,  reorder=False) -> GEOM_Object: ... 
	def make_spline_interpol_with_tangents(self,  the_points: list,  the_first_vec: GEOM_Object,  the_last_vec: GEOM_Object) -> GEOM_Object: ... 
	def make3_d_sketcher(self,  the_coordinates: list) -> GEOM_Object: ... 
	def make_isoline(self,  the_face: GEOM_Object,  is_u_iso: bool,  the_parameter: float) -> GEOM_Object: ... 
	def make_polyline2_d(self,  the_coords: list,  the_names: list,  the_types: list,  the_closeds: list,  the_working_plane: list) -> GEOM_Object: ... 
	def make_polyline2_d_on_plane(self,  the_coords: list,  the_names: list,  the_types: list,  the_closeds: list,  the_working_plane: GEOM_Object) -> GEOM_Object: ... 

class GeometryFieldOperations:
	def __init__(self): ...
	def create_field(self,  the_shape: GEOM_Object,  the_name: str,  the_type: int,  the_dimension: int,  the_component_names: list) -> GEOM_Field: ... 
	def count_fields(self,  shape: GEOM_Object) -> int: ... 
	def get_fields(self,  shape: GEOM_Object) -> TColStd_HSequenceOfTransient: ... 
	def get_field(self,  shape: GEOM_Object,  name: str) -> GEOM_Field: ... 

class GeometryGroupOperations:
	def __init__(self): ...
	def create_group(self,  the_main_shape: GEOM_Object,  the_shape_type: TopAbs_ShapeEnum) -> GEOM_Object: ... 
	def add_object(self,  the_group: GEOM_Object,  the_sub_shape_i_d: int) -> None: ... 
	def remove_object(self,  the_group: GEOM_Object,  the_sub_shape_i_d: int) -> None: ... 
	def union_list(self,  the_group: GEOM_Object,  the_sub_shapes: TColStd_HSequenceOfTransient) -> None: ... 
	def difference_list(self,  the_group: GEOM_Object,  the_sub_shapes: TColStd_HSequenceOfTransient) -> None: ... 
	def union_i_ds(self,  the_group: GEOM_Object,  the_sub_shapes: list) -> None: ... 
	def difference_i_ds(self,  the_group: GEOM_Object,  the_sub_shapes: list) -> None: ... 
	def union_groups(self,  the_group1: GEOM_Object,  the_group2: GEOM_Object) -> GEOM_Object: ... 
	def intersect_groups(self,  the_group1: GEOM_Object,  the_group2: GEOM_Object) -> GEOM_Object: ... 
	def cut_groups(self,  the_group1: GEOM_Object,  the_group2: GEOM_Object) -> GEOM_Object: ... 
	def union_list_of_groups(self,  the_g_list: TColStd_HSequenceOfTransient) -> GEOM_Object: ... 
	def intersect_list_of_groups(self,  the_g_list: TColStd_HSequenceOfTransient) -> GEOM_Object: ... 
	def cut_list_of_groups(self,  the_g_list1: TColStd_HSequenceOfTransient,  the_g_list2: TColStd_HSequenceOfTransient) -> GEOM_Object: ... 
	def get_type(self,  the_group: GEOM_Object) -> TopAbs_ShapeEnum: ... 
	def get_main_shape(self,  the_group: GEOM_Object) -> GEOM_Object: ... 
	def get_objects(self,  the_group: GEOM_Object) -> list: ... 

class GeometryHealingOperations:
	def __init__(self): ...
	def shape_process(self,  the_object: GEOM_Object,  the_operations: list,  the_params: list,  the_values: list) -> GEOM_Object: ... 
	def get_shape_process_parameters(self,  the_operations: list,  the_params: list,  the_values: list) -> None: ... 
	def get_operator_parameters(self,  the_operation: str,  the_params: list,  the_values: list) -> bool: ... 
	#def get_parameters(self,  the_operation: str,  the_params: list) -> list: ... 
	def suppress_faces(self,  the_object: GEOM_Object,  the_faces: list) -> GEOM_Object: ... 
	def close_contour(self,  the_object: GEOM_Object,  the_wires: list,  is_common_vertex: bool) -> GEOM_Object: ... 
	def remove_int_wires(self,  the_object: GEOM_Object,  the_wires: list) -> GEOM_Object: ... 
	def sew(self,  the_object: list,  the_tolerance: float,  is_allow_non_manifold: bool) -> GEOM_Object: ... 
	def remove_internal_faces(self,  the_solids: list) -> GEOM_Object: ... 
	def divide_edge(self,  the_object: GEOM_Object,  the_index: int,  the_value: float,  is_by_parameter: bool) -> GEOM_Object: ... 
	def divide_edge_by_point(self,  the_object: GEOM_Object,  the_index: int,  the_point: list) -> GEOM_Object: ... 
	def fuse_collinear_edges_within_wire(self,  the_wire: GEOM_Object,  the_vertices: list) -> GEOM_Object: ... 
	def change_orientation(self,  the_object: GEOM_Object) -> GEOM_Object: ... 
	def change_orientation_copy(self,  the_object: GEOM_Object) -> GEOM_Object: ... 
	def limit_tolerance(self,  the_object: GEOM_Object,  the_tolerance: float,  shape_type: TopAbs_ShapeEnum) -> GEOM_Object: ...

class ExtGeometryHealingOperations:
	def __init__(self, operator: GeometryHealingOperations): ...
	def fill_holes(self, the_object: GEOM_Object) -> GEOM_Object: ...
	def get_free_boundary(self,  the_object: GEOM_Object) -> GEOM_Object: ... 

class GeometryInsertOperations:
	def __init__(self): ...
	def make_copy(self,  the_original: GEOM_Object) -> GEOM_Object: ... 
	def import_file(self,  the_file_name: str,  the_format_type: str) -> TColStd_HSequenceOfTransient: ... 
	def read_value(self,  the_file_name: str,  the_format_type: str,  the_parameter_name: str) -> str: ... 
	def export(self,  the_original: GEOM_Object,  the_file_name: str,  the_format_type: str) -> None: ... 
	def restore_shape(self,  the_stream: str) -> GEOM_Object: ... 
	def load_texture(self,  the_texture_file: str) -> int: ... 
	def add_texture(self,  the_width: int,  the_height: int,  the_texture: list) -> int: ... 
	def get_texture(self,  the_texture_id: int,  the_width: int,  the_height: int) -> list: ... 
	def get_all_textures(self) -> list: ... 
	def transfer_data(self,  the_object_from: GEOM_Object,  the_object_to: GEOM_Object,  the_find_method: int,  the_result: list ) -> bool: ... 

class GeometryLocalOperations:
	def __init__(self): ...
	def make_fillet_all(self,  the_shape: GEOM_Object,  the_r: float) -> GEOM_Object: ... 
	def make_fillet_edges(self,  the_shape: GEOM_Object,  the_r: float,  the_edges: list) -> GEOM_Object: ... 
	def make_fillet_edges_r1_r2(self,  the_shape: GEOM_Object,  the_r1: float,  the_r2: float,  the_edges: list) -> GEOM_Object: ... 
	def make_fillet_faces(self,  the_shape: GEOM_Object,  the_r: float,  the_faces: list) -> GEOM_Object: ... 
	def make_fillet_faces_r1_r2(self,  the_shape: GEOM_Object,  the_r1: float,  the_r2: float,  the_faces: list) -> GEOM_Object: ... 
	def make_fillet2_d(self,  the_shape: GEOM_Object,  the_r: float,  the_vertices: list) -> GEOM_Object: ... 
	def make_fillet1_d(self,  the_shape: GEOM_Object,  the_r: float,  the_vertexes: list,  do_ignore_secant_vertices: bool) -> GEOM_Object: ... 
	def make_chamfer_all(self,  the_shape: GEOM_Object,  the_d: float) -> GEOM_Object: ... 
	def make_chamfer_edge(self,  the_shape: GEOM_Object,  the_d1: float,  the_d2: float,  the_face1: int,  the_face2: int) -> GEOM_Object: ... 
	def make_chamfer_edge_a_d(self,  the_shape: GEOM_Object,  the_d: float,  the_angle: float,  the_face1: int,  the_face2: int) -> GEOM_Object: ... 
	def make_chamfer_faces(self,  the_shape: GEOM_Object,  the_d1: float,  the_d2: float,  the_faces: list) -> GEOM_Object: ... 
	def make_chamfer_faces_a_d(self,  the_shape: GEOM_Object,  the_d: float,  the_angle: float,  the_faces: list) -> GEOM_Object: ... 
	def make_chamfer_edges(self,  the_shape: GEOM_Object,  the_d1: float,  the_d2: float,  the_edges: list) -> GEOM_Object: ... 
	def make_chamfer_edges_a_d(self,  the_shape: GEOM_Object,  the_d: float,  the_angle: float,  the_edges: list) -> GEOM_Object: ... 
	def make_archimede(self,  the_shape: GEOM_Object,  the_weight: float,  the_water_density: float,  the_meshing_deflection: float) -> GEOM_Object: ... 
	def get_sub_shape_index(self,  the_shape: GEOM_Object,  the_sub_shape: GEOM_Object) -> int: ... 

class GeometryMeasureOperations:
	def __init__(self): ...
	def kind_of_shape(self,  the_shape: GEOM_Object,  the_integers: list,  the_floats: list) -> ShapeKind: ... 
	def get_position(self,  the_shape: GEOM_Object,  ox: float,  oy: float,  oz: float,  zx: float,  zy: float,  zz: float,  xx: float,  xy: float,  xz: float) -> None: ... 
	def get_centre_of_mass(self,  the_shape: GEOM_Object) -> GEOM_Object: ... 
	def get_vertex_by_index(self,  the_shape: GEOM_Object,  the_index: int,  the_use_ori: bool) -> GEOM_Object: ... 
	def get_normal_ref_point(self,  the_face: GEOM_Object,  the_optional_point: GEOM_Object) -> GEOM_Object: ... 	
	def get_normal(self,  the_face: GEOM_Object) -> GEOM_Object: ... 
	def get_basic_properties(self,  the_shape: GEOM_Object,  the_tolerance: float,  the_length: float,  the_surf_area: float,  the_volume: float) -> None: ... 
	def get_inertia(self,  the_shape: GEOM_Object,  i11: float,  i12: float,  i13: float,  i21: float,  i22: float,  i23: float,  i31: float,  i32: float,  i33: float,  ix: float,  iy: float,  iz: float) -> None: ... 
	def get_bounding_box(self,  the_shape: GEOM_Object,  precise: bool,  xmin: float,  xmax: float,  ymin: float,  ymax: float,  zmin: float,  zmax: float) -> None: ... 
	def get_bounding_box_shape(self,  the_shape: GEOM_Object,  precise: bool) -> GEOM_Object: ... 
	def get_tolerance(self,  the_shape: GEOM_Object,  face_min: float,  face_max: float,  edge_min: float,  edge_max: float,  vert_min: float,  vert_max: float) -> None: ... 
	def check_shape(self,  the_shape: GEOM_Object,  the_is_check_geom: bool,  the_errors: list) -> bool: ... 
	def print_shape_errors(self,  the_shape: GEOM_Object,  the_errors: list) -> str: ... 
	def check_self_intersections(self,  the_shape: GEOM_Object,  the_check_level: SICheckLevel,  the_intersections: list) -> bool: ... 
	def check_self_intersections_fast(self,  the_shape: GEOM_Object,  deflection: float,  tolerance: float,  the_intersections: list) -> bool: ... 
	def check_b_o_p_arguments(self,  the_shape: GEOM_Object) -> bool: ... 
	def fast_intersect(self,  the_shape1: GEOM_Object,  the_shape2: GEOM_Object,  tolerance: float,  deflection: float,  the_intersections1: list,  the_intersections2: list) -> bool: ... 
	def is_good_for_solid(self,  the_shape: GEOM_Object) -> str: ... 
	def what_is(self,  the_shape: GEOM_Object) -> str: ... 
	def are_coords_inside(self,  the_shape: GEOM_Object,  coords: list,  tolerance: float) -> list: ... 
	def get_min_distance(self,  the_shape1: GEOM_Object,  the_shape2: GEOM_Object,  x1: float,  y1: float,  z1: float,  x2: float,  y2: float,  z2: float) -> float: ... 
	def closest_points(self,  the_shape1: GEOM_Object,  the_shape2: GEOM_Object,  the_floats: list) -> int: ... 
	# def point_coordinates(self,  the_shape: GEOM_Object) -> None: ... 
	def get_angle(self,  the_line1: GEOM_Object,  the_line2: GEOM_Object) -> float: ... 
	def get_angle_btw_vectors(self,  the_vec1: GEOM_Object,  the_vec2: GEOM_Object) -> float: ... 
	def curve_curvature_by_param(self,  the_curve: GEOM_Object,  the_param: float) -> float: ... 
	def curve_curvature_by_point(self,  the_curve: GEOM_Object,  the_point: GEOM_Object) -> float: ... 
	def get_curve_location_by_parameter(self, the_curve: GEOM_Object, parameter: float) -> XYZ: ...
	def max_surface_curvature_by_param(self,  the_surf: GEOM_Object,  the_u_param: float,  the_v_param: float) -> float: ... 
	def max_surface_curvature_by_point(self,  the_surf: GEOM_Object,  the_point: GEOM_Object) -> float: ... 
	def min_surface_curvature_by_param(self,  the_surf: GEOM_Object,  the_u_param: float,  the_v_param: float) -> float: ... 
	def min_surface_curvature_by_point(self,  the_surf: GEOM_Object,  the_point: GEOM_Object) -> float: ... 

# Extension class to measure operations
class ExtGeometryMeasureOperations:
	def __init__(self, operator: GeometryMeasureOperations): ...
	def get_basic_properties(self, the_shape: GEOM_Object, the_tolerance = 1e-6) -> list: ...
	def kind_of_shape(self, the_shape: GEOM_Object) -> list: ...
	def closest_points(self, the_shape1: GEOM_Object, the_shape2: GEOM_Object) -> list: ...
	def get_min_distance(self, the_shape1: GEOM_Object, the_shape2: GEOM_Object) -> list: ...
	def point_coordinates(self, the_point: GEOM_Object) -> list: ...
	def fast_intersect(self, the_shape1: GEOM_Object, the_shape2: GEOM_Object, tolerance = 0.0, deflection = 1e-6) -> list: ... 
	def get_inertia(self, the_shape: GEOM_Object) -> list: ...
	def get_position(self, the_shape: GEOM_Object) -> list: ...
	def bounding_box(self, the_shape: GEOM_Object, is_precise: bool) -> list: ... 
	def oriented_bounding_box(self, the_shape: GEOM_Object, is_precise: bool) -> list: ...
	def calc_thickness(self, face_id_to_face_object: Dict[int, GEOM_Object], mode: int) -> Dict[int, List[float]]:
		"""
		Arguments:
		- face_id_to_face_object: 
			A dictionary mapping some type of face IDs (integers) to their corresponding GEOM_Object instances.
			The ID here is a convenience to help identify faces in the output.

			The faces must bound a solid. If the face does not bound a solid, it will be ignored in the output.
		- mode: An integer specifying the calculation mode.

		Returns:
			To each face ID the following components are present: [px, py, pz, nx, ny, nz, thickness]
			- (px, py, pz): The coordinates of the point on the face where the thickness is measured.
			- (nx, ny, nz): The components of the normal vector at that point.
			- thickness: The calculated thickness value at that point.
		"""
		...

class GeometryShapeOperations:
	def __init__(self): ...
	def make_edge(self,  the_point1: GEOM_Object,  the_point2: GEOM_Object) -> GEOM_Object: ... 
	def make_edge_on_curve_by_length(self,  the_curve: GEOM_Object,  the_length: float,  the_start_point: GEOM_Object) -> GEOM_Object: ... 
	def make_edge_wire(self,  the_wire: GEOM_Object,  the_linear_tolerance: float,  the_angular_tolerance: float) -> GEOM_Object: ... 
	def make_wire(self,  the_edges_and_wires: list,  the_tolerance: float) -> GEOM_Object: ... 
	def make_face(self,  the_wire: GEOM_Object,  is_planar_wanted: bool) -> GEOM_Object: ... 
	def make_face_wires(self,  the_wires: list,  is_planar_wanted: bool) -> GEOM_Object: ... 
	def make_face_from_surface(self,  the_face: GEOM_Object,  the_wire: GEOM_Object) -> GEOM_Object: ... 
	def make_face_with_constraints(self,  the_constraints: list) -> GEOM_Object: ... 
	def make_shell(self,  the_shapes: list) -> GEOM_Object: ... 
	def make_solid_shells(self,  the_shells: list) -> GEOM_Object: ... 
	def make_compound(self,  the_shapes: list) -> GEOM_Object: ... 
	def make_solid_from_connected_faces(self,  the_faces_or_shells: list,  is_intersect: bool) -> GEOM_Object: ... 
	def make_glue_faces(self,  the_shapes: list,  the_tolerance: float,  do_keep_non_solids: bool) -> GEOM_Object: ... 
	def make_glue_faces_by_list(self,  the_shapes: list,  the_tolerance: float,  the_faces: list,  do_keep_non_solids: bool,  do_glue_all_edges: bool) -> GEOM_Object: ... 
	def make_glue_edges(self,  the_shapes: list,  the_tolerance: float) -> GEOM_Object: ... 
	def get_glue_shapes(self,  the_shapes: list,  the_tolerance: float,  the_type: TopAbs_ShapeEnum) -> TColStd_HSequenceOfTransient: ... 
	def make_glue_edges_by_list(self,  the_shapes: list,  the_tolerance: float,  the_edges: list) -> GEOM_Object: ... 
	def get_existing_sub_objects_groups(self,  the_shape: GEOM_Object,  the_groups_only: bool) -> TColStd_HSequenceOfTransient: ... 
	def get_existing_sub_objects(self,  the_shape: GEOM_Object, the_types: int) -> TColStd_HSequenceOfTransient: ... 
	def make_explode(self,  the_shape: GEOM_Object,  the_shape_type: TopAbs_ShapeEnum,  is_sorted: bool,  the_explode_type: ExplodeType) -> TColStd_HSequenceOfTransient: ... 
	def sub_shape_all_i_ds(self,  the_shape: GEOM_Object,  the_shape_type: int,  is_sorted: bool,  the_explode_type: ExplodeType) -> list: ... 
	def get_sub_shape(self,  the_main_shape: GEOM_Object,  the_i_d: int) -> GEOM_Object: ... 
	def make_sub_shapes(self,  the_main_shape: GEOM_Object,  the_indices: list) -> TColStd_HSequenceOfTransient: ... 
	def get_sub_shape_index(self,  the_main_shape: GEOM_Object,  the_sub_shape: GEOM_Object) -> int: ... 
	def get_sub_shapes_indices(self,  the_main_shape: GEOM_Object,  the_sub_shapes: list) -> list: ... 
	def get_topology_index(self,  the_main_shape: GEOM_Object,  the_sub_shape: GEOM_Object) -> int: ... 
	def get_shape_type_string(self,  the_shape: GEOM_Object) -> str: ... 
	def is_sub_shape_belongs_to(self,  the_sub_object: GEOM_Object,  the_sub_object_index: int,  the_object: GEOM_Object,  the_object_index: int) -> bool: ... 
	def number_of_sub_shapes(self,  the_shape: GEOM_Object,  the_shape_type: int) -> int: ... 
	def reverse_shape(self,  the_shapes: GEOM_Object) -> GEOM_Object: ... 
	def get_free_faces_i_ds(self,  the_shape: GEOM_Object) -> list: ... 
	def get_shared_shapes(self,  the_shape1: GEOM_Object,  the_shape2: GEOM_Object,  the_shape_type: int) -> TColStd_HSequenceOfTransient: ... 
	def get_multi_shared_shapes(self,  the_shapes: list,  the_shape_type: int,  multi_share = True) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_plane(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_ax1: GEOM_Object,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_plane_with_location(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_ax1: GEOM_Object,  the_pnt: GEOM_Object,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_cylinder(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_axis: GEOM_Object,  the_radius: float,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_cylinder_with_location(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_axis: GEOM_Object,  the_pnt: GEOM_Object,  the_radius: float,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_sphere(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_center: GEOM_Object,  the_radius: float,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_plane_i_ds(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_ax1: GEOM_Object,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_plane_with_location_i_ds(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_ax1: GEOM_Object,  the_pnt: GEOM_Object,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_cylinder_i_ds(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_axis: GEOM_Object,  the_radius: float,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_cylinder_with_location_i_ds(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_axis: GEOM_Object,  the_pnt: GEOM_Object,  the_radius: float,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_sphere_i_ds(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_center: GEOM_Object,  the_radius: float,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_quadrangle(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_top_left_point: GEOM_Object,  the_top_right_point: GEOM_Object,  the_bottom_left_point: GEOM_Object,  the_bottom_right_point: GEOM_Object,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_quadrangle_i_ds(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_top_left_point: GEOM_Object,  the_top_right_point: GEOM_Object,  the_bottom_left_point: GEOM_Object,  the_bottom_right_point: GEOM_Object,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_cylinder_old(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_axis: GEOM_Object,  the_radius: float) -> GEOM_Object: ... 
	def get_shapes_on_sphere_old(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_center: GEOM_Object,  the_radius: float) -> GEOM_Object: ... 
	def get_in_place(self,  the_shape_where: GEOM_Object,  the_shape_what: GEOM_Object) -> GEOM_Object: ... 
	def get_in_place_old(self,  the_shape_where: GEOM_Object,  the_shape_what: GEOM_Object) -> GEOM_Object: ... 
	def get_in_place_by_history(self,  the_shape_where: GEOM_Object,  the_shape_what: GEOM_Object) -> GEOM_Object: ... 
	def get_in_place_map(self,  the_shape_where: GEOM_Object,  the_shape_what: GEOM_Object,  the_res_vec: list) -> None: ... 
	def get_same(self,  the_shape_where: GEOM_Object,  the_shape_what: GEOM_Object) -> GEOM_Object: ... 
	def get_same_i_ds(self,  the_shape_where: GEOM_Object,  the_shape_what: GEOM_Object) -> list: ... 
	def get_shapes_on_box_i_ds(self,  the_box: GEOM_Object,  the_shape: GEOM_Object,  the_shape_type: int,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_box(self,  the_box: GEOM_Object,  the_shape: GEOM_Object,  the_shape_type: int,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_shape_i_ds(self,  the_check_shape: GEOM_Object,  the_shape: GEOM_Object,  the_shape_type: int,  the_state: GEOMAlgo_State) -> list: ... 
	def get_shapes_on_shape(self,  the_check_shape: GEOM_Object,  the_shape: GEOM_Object,  the_shape_type: int,  the_state: GEOMAlgo_State) -> TColStd_HSequenceOfTransient: ... 
	def get_shapes_on_shape_as_compound(self,  the_check_shape: GEOM_Object,  the_shape: GEOM_Object,  the_shape_type: int,  the_state: GEOMAlgo_State) -> GEOM_Object: ... 
	def extend_edge(self,  the_edge: GEOM_Object,  the_min: float,  the_max: float) -> GEOM_Object: ... 
	def extend_face(self,  the_face: GEOM_Object,  the_u_min: float,  the_u_max: float,  the_v_min: float,  the_v_max: float) -> GEOM_Object: ... 
	def make_surface_from_face(self,  the_face: GEOM_Object) -> GEOM_Object: ... 
	def get_sub_shape_edge_sorted(self,  the_shape: GEOM_Object,  the_start_point: GEOM_Object) -> TColStd_HSequenceOfTransient: ... 
	def get_sub_shapes_with_tolerance(self,  the_shape: GEOM_Object,  the_shape_type: int,  the_condition: ComparisonCondition,  the_tolerance: float) -> TColStd_HSequenceOfTransient: ... 
	#def make_extraction(self,  the_shape: GEOM_Object,  the_sub_shape_i_ds: list,  the_stats: list) -> GEOM_Object: ... 

	# Extension class to shape operations
class ExtGeometryShapeOperations:
	def __init__(self, shape_operations: GeometryShapeOperations): ...
	def extract_shapes(self, the_shape: GEOM_Object, the_shape_type: TopAbs_ShapeEnum, is_sorted: bool): ...  
	def get_sub_shapes_indices(self, main_shape: GEOM_Object, sub_shapes: list) -> list: ...
	def get_visible_and_hidden_edges(self, main_shape: GEOM_Object, camera_position: list, camera_direction: list, should_include_hidden: bool) -> list: ...

class GeometryTransformOperations:
	def __init__(self): ...
	def translate_two_points(self,  the_object: GEOM_Object,  the_point1: GEOM_Object,  the_point2: GEOM_Object) -> GEOM_Object: ... 
	def translate_two_points_copy(self,  the_object: GEOM_Object,  the_point1: GEOM_Object,  the_point2: GEOM_Object) -> GEOM_Object: ... 
	def translate_d_x_d_y_d_z(self,  the_object: GEOM_Object,  the_x: float,  the_y: float,  the_z: float) -> GEOM_Object: ... 
	def translate_d_x_d_y_d_z_copy(self,  the_object: GEOM_Object,  the_x: float,  the_y: float,  the_z: float) -> GEOM_Object: ... 
	def translate_vector(self,  the_object: GEOM_Object,  the_vector: GEOM_Object) -> GEOM_Object: ... 
	def translate_vector_copy(self,  the_object: GEOM_Object,  the_vector: GEOM_Object) -> GEOM_Object: ... 
	def translate_vector_distance(self,  the_object: GEOM_Object,  the_vector: GEOM_Object,  the_distance: float,  the_copy: bool) -> GEOM_Object: ... 
	def translate1_d(self,  the_object: GEOM_Object,  the_vector: GEOM_Object,  the_step: float,  the_nb_times: int) -> GEOM_Object: ... 
	def translate2_d(self,  the_object: GEOM_Object,  the_vector: GEOM_Object,  the_step1: float,  the_nb_times1: int,  the_vector2: GEOM_Object,  the_step2: float,  the_nb_times2: int) -> GEOM_Object: ... 
	def mirror_plane(self,  the_object: GEOM_Object,  the_plane: GEOM_Object) -> GEOM_Object: ... 
	def mirror_plane_copy(self,  the_object: GEOM_Object,  the_plane: GEOM_Object) -> GEOM_Object: ... 
	def mirror_axis(self,  the_object: GEOM_Object,  the_axis: GEOM_Object) -> GEOM_Object: ... 
	def mirror_axis_copy(self,  the_object: GEOM_Object,  the_axis: GEOM_Object) -> GEOM_Object: ... 
	def mirror_point(self,  the_object: GEOM_Object,  the_point: GEOM_Object) -> GEOM_Object: ... 
	def mirror_point_copy(self,  the_object: GEOM_Object,  the_point: GEOM_Object) -> GEOM_Object: ... 
	def offset_shape(self,  the_object: GEOM_Object,  the_offset: float,  the_join_by_pipes: bool) -> GEOM_Object: ... 
	def offset_shape_copy(self,  the_object: GEOM_Object,  the_offset: float,  the_join_by_pipes: bool) -> GEOM_Object: ... 
	def project_shape_copy(self,  the_source: GEOM_Object,  the_target: GEOM_Object) -> GEOM_Object: ... 
	def project_point_on_wire(self,  the_point: GEOM_Object,  the_wire: GEOM_Object,  the_point_on_edge: GEOM_Object,  the_edge_in_wire_index: int) -> float: ... 
	def scale_shape(self,  the_object: GEOM_Object,  the_point: GEOM_Object,  the_factor: float) -> GEOM_Object: ... 
	def scale_shape_copy(self,  the_object: GEOM_Object,  the_point: GEOM_Object,  the_factor: float) -> GEOM_Object: ... 
	def scale_shape_along_axes(self,  the_object: GEOM_Object,  the_point: GEOM_Object,  the_factor_x: float,  the_factor_y: float,  the_factor_z: float,  do_copy: bool) -> GEOM_Object: ... 
	def position_shape(self,  the_object: GEOM_Object,  the_start_l_c_s: GEOM_Object,  the_end_l_c_s: GEOM_Object) -> GEOM_Object: ... 
	def position_shape_copy(self,  the_object: GEOM_Object,  the_start_l_c_s: GEOM_Object,  the_end_l_c_s: GEOM_Object) -> GEOM_Object: ... 
	def position_along_path(self,  the_object: GEOM_Object,  the_path: GEOM_Object,  the_distance: float,  the_copy: bool,  the_reverse: bool) -> GEOM_Object: ... 
	def rotate(self,  the_object: GEOM_Object,  the_axis: GEOM_Object,  the_angle: float) -> GEOM_Object: ... 
	def rotate_copy(self,  the_object: GEOM_Object,  the_axis: GEOM_Object,  the_angle: float) -> GEOM_Object: ... 
	def rotate1_d(self,  the_object: GEOM_Object,  the_axis: GEOM_Object,  the_nb_times: int) -> GEOM_Object: ... 
	def rotate1_d_steps(self,  the_object: GEOM_Object,  the_axis: GEOM_Object,  the_angle_step: float,  the_nb_steps: int) -> GEOM_Object: ... 
	def rotate2_d(self,  the_object: GEOM_Object,  the_axis: GEOM_Object,  the_nb_objects: int,  the_radial_step: float,  the_nb_steps: int) -> GEOM_Object: ... 
	def rotate2_d_steps(self,  the_object: GEOM_Object,  the_axis: GEOM_Object,  the_angle: float,  the_nb_times1: int,  the_step: float,  the_nb_times2: int) -> GEOM_Object: ... 
	def rotate_three_points(self,  the_object: GEOM_Object,  the_cent_point: GEOM_Object,  the_point1: GEOM_Object,  the_point2: GEOM_Object) -> GEOM_Object: ... 
	def rotate_three_points_copy(self,  the_object: GEOM_Object,  the_cent_point: GEOM_Object,  the_point1: GEOM_Object,  the_point2: GEOM_Object) -> GEOM_Object: ... 
	def transform_like_other_copy(self,  the_object: GEOM_Object,  the_sample: GEOM_Object) -> GEOM_Object: ... 
	def make_projection_on_cylinder(self,  the_object: GEOM_Object,  the_radius: float,  the_start_angle: float,  the_angle_length: float,  the_angle_rotation: float) -> GEOM_Object: ... 
	def deep_copy(self, the_object: GEOM_Object) -> GEOM_Object: ...

class ImportOperations:
	def __init__(self): ...
	def import_step(self, complete_path: str, assembly_info: bool) -> GEOM_Object: ...
	def import_step_by_hierarchy(self, complete_path: str) -> list: ...

class ExportOperations:
	def __init__(self): ...
	def export_step(self, model: GEOM_Object, exp_file: str) -> None: ...
	def export_stl(self, model: GEOM_Object, exp_file: str, is_binary: bool) -> None: ...
	def export_stl_for_viewer(self, model: GEOM_Object, exp_file: str, is_binary: bool) -> None: ...
	def get_default_stl_size(self, model: GEOM_Object) -> float: ...
	def get_refined_stl_size(self, model: GEOM_Object) -> float: ...
	def get_t2g_file_path(self) -> str: ...
	def get_stl_file_path(self) -> str: ...