from typing import Literal

from pydantic import BaseModel, Field


class TabuKerberosParams(BaseModel):
    """
    Mixin class that provides parameters for TabuKerberos algorithm.

    TabuKerberos implements a specialized version of TabuSearch with time-based
    constraints. This mixin provides the parameters needed to configure the
    tabu search component.

    Attributes
    ----------
    num_reads: Optional[int]
        Number of reads. Each read is generated by one run of the tabu algorithm.
        Default is None, which matches the number of initial states or uses one
        if no initial states are provided.
    tenure: Optional[int]
        Tabu tenure, which is the length of the tabu list, or number of recently
        explored solutions kept in memory. Default is None (a quarter of the
        number of problem variables up to a maximum value of 20).
    timeout: float
        Maximum running time per read in milliseconds. Default is 100.
    initial_states_generator: Literal['none', 'tile', 'random']
        Defines the expansion of `initial_states` if fewer than `num_reads` are
        specified. Default is "random".
    max_time: float | None
        Overall maximum duration in seconds for the entire tabu search algorithm.
        Default is None (run until convergence criteria are met).
    """

    num_reads: int | None = None
    tenure: int | None = Field(default=None, le=20)
    timeout: float = 100
    initial_states_generator: Literal["none", "tile", "random"] = "random"

    max_time: float | None = None
