# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import control_plane_pb2 as control__plane__pb2


class ControlPlaneServiceStub(object):
    """ControlPlaneService defines the control plane API that edge workers can call
    to report their status and lifecycle events.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReportEdgeAlive = channel.unary_unary(
                '/controlplane.v1.ControlPlaneService/ReportEdgeAlive',
                request_serializer=control__plane__pb2.EdgeAliveRequest.SerializeToString,
                response_deserializer=control__plane__pb2.EdgeAliveResponse.FromString,
                _registered_method=True)
        self.ReportEdgeGoingAway = channel.unary_unary(
                '/controlplane.v1.ControlPlaneService/ReportEdgeGoingAway',
                request_serializer=control__plane__pb2.EdgeGoingAwayRequest.SerializeToString,
                response_deserializer=control__plane__pb2.EdgeGoingAwayResponse.FromString,
                _registered_method=True)


class ControlPlaneServiceServicer(object):
    """ControlPlaneService defines the control plane API that edge workers can call
    to report their status and lifecycle events.
    """

    def ReportEdgeAlive(self, request, context):
        """ReportEdgeAlive is called by edge workers to report that they are alive
        and operational. This can be used for heartbeating and health tracking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportEdgeGoingAway(self, request, context):
        """ReportEdgeGoingAway is called by edge workers when they are shutting down
        gracefully, allowing the control plane to handle the disconnection properly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControlPlaneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReportEdgeAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportEdgeAlive,
                    request_deserializer=control__plane__pb2.EdgeAliveRequest.FromString,
                    response_serializer=control__plane__pb2.EdgeAliveResponse.SerializeToString,
            ),
            'ReportEdgeGoingAway': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportEdgeGoingAway,
                    request_deserializer=control__plane__pb2.EdgeGoingAwayRequest.FromString,
                    response_serializer=control__plane__pb2.EdgeGoingAwayResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'controlplane.v1.ControlPlaneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('controlplane.v1.ControlPlaneService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ControlPlaneService(object):
    """ControlPlaneService defines the control plane API that edge workers can call
    to report their status and lifecycle events.
    """

    @staticmethod
    def ReportEdgeAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/controlplane.v1.ControlPlaneService/ReportEdgeAlive',
            control__plane__pb2.EdgeAliveRequest.SerializeToString,
            control__plane__pb2.EdgeAliveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportEdgeGoingAway(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/controlplane.v1.ControlPlaneService/ReportEdgeGoingAway',
            control__plane__pb2.EdgeGoingAwayRequest.SerializeToString,
            control__plane__pb2.EdgeGoingAwayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
