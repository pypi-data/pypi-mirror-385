# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import edge_pb2 as edge__pb2


class EdgeServiceStub(object):
    """EdgeService defines the API exposed by edge workers.
    The control plane can call these methods via the reverse tunnel to interact
    with edge workers behind NAT/firewalls.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetId = channel.unary_unary(
                '/edge.v1.EdgeService/GetId',
                request_serializer=edge__pb2.GetIdRequest.SerializeToString,
                response_deserializer=edge__pb2.GetIdResponse.FromString,
                _registered_method=True)
        self.GetWhatTimeItIs = channel.unary_unary(
                '/edge.v1.EdgeService/GetWhatTimeItIs',
                request_serializer=edge__pb2.GetTimeRequest.SerializeToString,
                response_deserializer=edge__pb2.GetTimeResponse.FromString,
                _registered_method=True)


class EdgeServiceServicer(object):
    """EdgeService defines the API exposed by edge workers.
    The control plane can call these methods via the reverse tunnel to interact
    with edge workers behind NAT/firewalls.
    """

    def GetId(self, request, context):
        """GetId returns the unique identifier of this edge worker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWhatTimeItIs(self, request, context):
        """GetWhatTimeItIs returns the current time on the edge worker.
        This demonstrates that the control plane can call back to the edge.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EdgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetId,
                    request_deserializer=edge__pb2.GetIdRequest.FromString,
                    response_serializer=edge__pb2.GetIdResponse.SerializeToString,
            ),
            'GetWhatTimeItIs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWhatTimeItIs,
                    request_deserializer=edge__pb2.GetTimeRequest.FromString,
                    response_serializer=edge__pb2.GetTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edge.v1.EdgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edge.v1.EdgeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EdgeService(object):
    """EdgeService defines the API exposed by edge workers.
    The control plane can call these methods via the reverse tunnel to interact
    with edge workers behind NAT/firewalls.
    """

    @staticmethod
    def GetId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edge.v1.EdgeService/GetId',
            edge__pb2.GetIdRequest.SerializeToString,
            edge__pb2.GetIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWhatTimeItIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edge.v1.EdgeService/GetWhatTimeItIs',
            edge__pb2.GetTimeRequest.SerializeToString,
            edge__pb2.GetTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
