// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: control-plane.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlPlaneService_ReportEdgeAlive_FullMethodName     = "/controlplane.v1.ControlPlaneService/ReportEdgeAlive"
	ControlPlaneService_ReportEdgeGoingAway_FullMethodName = "/controlplane.v1.ControlPlaneService/ReportEdgeGoingAway"
)

// ControlPlaneServiceClient is the client API for ControlPlaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ControlPlaneService defines the control plane API that edge workers can call
// to report their status and lifecycle events.
type ControlPlaneServiceClient interface {
	// ReportEdgeAlive is called by edge workers to report that they are alive
	// and operational. This can be used for heartbeating and health tracking.
	ReportEdgeAlive(ctx context.Context, in *EdgeAliveRequest, opts ...grpc.CallOption) (*EdgeAliveResponse, error)
	// ReportEdgeGoingAway is called by edge workers when they are shutting down
	// gracefully, allowing the control plane to handle the disconnection properly.
	ReportEdgeGoingAway(ctx context.Context, in *EdgeGoingAwayRequest, opts ...grpc.CallOption) (*EdgeGoingAwayResponse, error)
}

type controlPlaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneServiceClient(cc grpc.ClientConnInterface) ControlPlaneServiceClient {
	return &controlPlaneServiceClient{cc}
}

func (c *controlPlaneServiceClient) ReportEdgeAlive(ctx context.Context, in *EdgeAliveRequest, opts ...grpc.CallOption) (*EdgeAliveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EdgeAliveResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ReportEdgeAlive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ReportEdgeGoingAway(ctx context.Context, in *EdgeGoingAwayRequest, opts ...grpc.CallOption) (*EdgeGoingAwayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EdgeGoingAwayResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ReportEdgeGoingAway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPlaneServiceServer is the server API for ControlPlaneService service.
// All implementations must embed UnimplementedControlPlaneServiceServer
// for forward compatibility.
//
// ControlPlaneService defines the control plane API that edge workers can call
// to report their status and lifecycle events.
type ControlPlaneServiceServer interface {
	// ReportEdgeAlive is called by edge workers to report that they are alive
	// and operational. This can be used for heartbeating and health tracking.
	ReportEdgeAlive(context.Context, *EdgeAliveRequest) (*EdgeAliveResponse, error)
	// ReportEdgeGoingAway is called by edge workers when they are shutting down
	// gracefully, allowing the control plane to handle the disconnection properly.
	ReportEdgeGoingAway(context.Context, *EdgeGoingAwayRequest) (*EdgeGoingAwayResponse, error)
	mustEmbedUnimplementedControlPlaneServiceServer()
}

// UnimplementedControlPlaneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlPlaneServiceServer struct{}

func (UnimplementedControlPlaneServiceServer) ReportEdgeAlive(context.Context, *EdgeAliveRequest) (*EdgeAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEdgeAlive not implemented")
}
func (UnimplementedControlPlaneServiceServer) ReportEdgeGoingAway(context.Context, *EdgeGoingAwayRequest) (*EdgeGoingAwayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEdgeGoingAway not implemented")
}
func (UnimplementedControlPlaneServiceServer) mustEmbedUnimplementedControlPlaneServiceServer() {}
func (UnimplementedControlPlaneServiceServer) testEmbeddedByValue()                             {}

// UnsafeControlPlaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServiceServer will
// result in compilation errors.
type UnsafeControlPlaneServiceServer interface {
	mustEmbedUnimplementedControlPlaneServiceServer()
}

func RegisterControlPlaneServiceServer(s grpc.ServiceRegistrar, srv ControlPlaneServiceServer) {
	// If the following call pancis, it indicates UnimplementedControlPlaneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlPlaneService_ServiceDesc, srv)
}

func _ControlPlaneService_ReportEdgeAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ReportEdgeAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ReportEdgeAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ReportEdgeAlive(ctx, req.(*EdgeAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ReportEdgeGoingAway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeGoingAwayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ReportEdgeGoingAway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ReportEdgeGoingAway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ReportEdgeGoingAway(ctx, req.(*EdgeGoingAwayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlPlaneService_ServiceDesc is the grpc.ServiceDesc for ControlPlaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.v1.ControlPlaneService",
	HandlerType: (*ControlPlaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportEdgeAlive",
			Handler:    _ControlPlaneService_ReportEdgeAlive_Handler,
		},
		{
			MethodName: "ReportEdgeGoingAway",
			Handler:    _ControlPlaneService_ReportEdgeGoingAway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control-plane.proto",
}
