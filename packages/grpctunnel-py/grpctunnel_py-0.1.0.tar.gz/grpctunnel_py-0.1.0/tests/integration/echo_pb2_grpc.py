# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import echo_pb2 as echo__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in echo_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EchoServiceStub(object):
    """Simple echo service for testing the tunnel implementation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Echo = channel.unary_unary(
                '/test.EchoService/Echo',
                request_serializer=echo__pb2.EchoRequest.SerializeToString,
                response_deserializer=echo__pb2.EchoResponse.FromString,
                _registered_method=True)
        self.EchoError = channel.unary_unary(
                '/test.EchoService/EchoError',
                request_serializer=echo__pb2.ErrorRequest.SerializeToString,
                response_deserializer=echo__pb2.EchoResponse.FromString,
                _registered_method=True)
        self.EchoClientStream = channel.stream_unary(
                '/test.EchoService/EchoClientStream',
                request_serializer=echo__pb2.EchoRequest.SerializeToString,
                response_deserializer=echo__pb2.EchoResponse.FromString,
                _registered_method=True)
        self.EchoServerStream = channel.unary_stream(
                '/test.EchoService/EchoServerStream',
                request_serializer=echo__pb2.EchoRequest.SerializeToString,
                response_deserializer=echo__pb2.EchoResponse.FromString,
                _registered_method=True)
        self.EchoBidiStream = channel.stream_stream(
                '/test.EchoService/EchoBidiStream',
                request_serializer=echo__pb2.EchoRequest.SerializeToString,
                response_deserializer=echo__pb2.EchoResponse.FromString,
                _registered_method=True)


class EchoServiceServicer(object):
    """Simple echo service for testing the tunnel implementation
    """

    def Echo(self, request, context):
        """Echo returns the same message that was sent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoError(self, request, context):
        """EchoError returns an error with the specified code and message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoClientStream(self, request_iterator, context):
        """EchoClientStream receives multiple messages and returns a summary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoServerStream(self, request, context):
        """EchoServerStream receives one message and streams multiple responses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoBidiStream(self, request_iterator, context):
        """EchoBidiStream bidirectionally streams messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=echo__pb2.EchoRequest.FromString,
                    response_serializer=echo__pb2.EchoResponse.SerializeToString,
            ),
            'EchoError': grpc.unary_unary_rpc_method_handler(
                    servicer.EchoError,
                    request_deserializer=echo__pb2.ErrorRequest.FromString,
                    response_serializer=echo__pb2.EchoResponse.SerializeToString,
            ),
            'EchoClientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.EchoClientStream,
                    request_deserializer=echo__pb2.EchoRequest.FromString,
                    response_serializer=echo__pb2.EchoResponse.SerializeToString,
            ),
            'EchoServerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.EchoServerStream,
                    request_deserializer=echo__pb2.EchoRequest.FromString,
                    response_serializer=echo__pb2.EchoResponse.SerializeToString,
            ),
            'EchoBidiStream': grpc.stream_stream_rpc_method_handler(
                    servicer.EchoBidiStream,
                    request_deserializer=echo__pb2.EchoRequest.FromString,
                    response_serializer=echo__pb2.EchoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'test.EchoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('test.EchoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EchoService(object):
    """Simple echo service for testing the tunnel implementation
    """

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/test.EchoService/Echo',
            echo__pb2.EchoRequest.SerializeToString,
            echo__pb2.EchoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/test.EchoService/EchoError',
            echo__pb2.ErrorRequest.SerializeToString,
            echo__pb2.EchoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoClientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/test.EchoService/EchoClientStream',
            echo__pb2.EchoRequest.SerializeToString,
            echo__pb2.EchoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoServerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/test.EchoService/EchoServerStream',
            echo__pb2.EchoRequest.SerializeToString,
            echo__pb2.EchoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoBidiStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/test.EchoService/EchoBidiStream',
            echo__pb2.EchoRequest.SerializeToString,
            echo__pb2.EchoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
