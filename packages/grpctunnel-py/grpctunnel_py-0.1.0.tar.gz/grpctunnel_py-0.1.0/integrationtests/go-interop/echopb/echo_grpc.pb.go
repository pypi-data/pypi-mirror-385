// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: echo.proto

package echopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EchoService_Echo_FullMethodName             = "/test.EchoService/Echo"
	EchoService_EchoError_FullMethodName        = "/test.EchoService/EchoError"
	EchoService_EchoServerStream_FullMethodName = "/test.EchoService/EchoServerStream"
	EchoService_EchoClientStream_FullMethodName = "/test.EchoService/EchoClientStream"
	EchoService_EchoBidiStream_FullMethodName   = "/test.EchoService/EchoBidiStream"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Simple echo service for testing the tunnel implementation
type EchoServiceClient interface {
	// Echo returns the same message that was sent
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// EchoError returns an error with the specified code and message
	EchoError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// EchoServerStream returns multiple responses for a single request
	EchoServerStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EchoResponse], error)
	// EchoClientStream accepts multiple requests and returns a single response
	EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EchoRequest, EchoResponse], error)
	// EchoBidiStream accepts a stream of requests and returns a stream of responses
	EchoBidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoRequest, EchoResponse], error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, EchoService_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, EchoService_EchoError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoServerStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EchoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], EchoService_EchoServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoRequest, EchoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoServerStreamClient = grpc.ServerStreamingClient[EchoResponse]

func (c *echoServiceClient) EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EchoRequest, EchoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], EchoService_EchoClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoRequest, EchoResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoClientStreamClient = grpc.ClientStreamingClient[EchoRequest, EchoResponse]

func (c *echoServiceClient) EchoBidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoRequest, EchoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], EchoService_EchoBidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoRequest, EchoResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoBidiStreamClient = grpc.BidiStreamingClient[EchoRequest, EchoResponse]

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility.
//
// Simple echo service for testing the tunnel implementation
type EchoServiceServer interface {
	// Echo returns the same message that was sent
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// EchoError returns an error with the specified code and message
	EchoError(context.Context, *ErrorRequest) (*EchoResponse, error)
	// EchoServerStream returns multiple responses for a single request
	EchoServerStream(*EchoRequest, grpc.ServerStreamingServer[EchoResponse]) error
	// EchoClientStream accepts multiple requests and returns a single response
	EchoClientStream(grpc.ClientStreamingServer[EchoRequest, EchoResponse]) error
	// EchoBidiStream accepts a stream of requests and returns a stream of responses
	EchoBidiStream(grpc.BidiStreamingServer[EchoRequest, EchoResponse]) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEchoServiceServer struct{}

func (UnimplementedEchoServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServiceServer) EchoError(context.Context, *ErrorRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoError not implemented")
}
func (UnimplementedEchoServiceServer) EchoServerStream(*EchoRequest, grpc.ServerStreamingServer[EchoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoServerStream not implemented")
}
func (UnimplementedEchoServiceServer) EchoClientStream(grpc.ClientStreamingServer[EchoRequest, EchoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoClientStream not implemented")
}
func (UnimplementedEchoServiceServer) EchoBidiStream(grpc.BidiStreamingServer[EchoRequest, EchoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoBidiStream not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}
func (UnimplementedEchoServiceServer) testEmbeddedByValue()                     {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	// If the following call pancis, it indicates UnimplementedEchoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_EchoError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoError(ctx, req.(*ErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).EchoServerStream(m, &grpc.GenericServerStream[EchoRequest, EchoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoServerStreamServer = grpc.ServerStreamingServer[EchoResponse]

func _EchoService_EchoClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoClientStream(&grpc.GenericServerStream[EchoRequest, EchoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoClientStreamServer = grpc.ClientStreamingServer[EchoRequest, EchoResponse]

func _EchoService_EchoBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoBidiStream(&grpc.GenericServerStream[EchoRequest, EchoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoBidiStreamServer = grpc.BidiStreamingServer[EchoRequest, EchoResponse]

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "EchoError",
			Handler:    _EchoService_EchoError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoServerStream",
			Handler:       _EchoService_EchoServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoClientStream",
			Handler:       _EchoService_EchoClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoBidiStream",
			Handler:       _EchoService_EchoBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo.proto",
}
