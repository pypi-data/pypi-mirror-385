[project]
name = "exeqpdal"
version = "0.1.0a2"
description = "Python API for executing PDAL CLI commands with native syntax support"
authors = [
    {name = "ElGorrion", email = "elgorrion.eu@gmail.com"}
]
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = ["pdal", "lidar", "pointcloud", "qgis", "geospatial"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "numpy>=1.26.4",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.14.0",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "build>=1.3.0",
    "twine>=6.2.0",
]

[project.urls]
Homepage = "https://github.com/elgorrion/exeqpdal"
Documentation = "https://github.com/elgorrion/exeqpdal#readme"
Repository = "https://github.com/elgorrion/exeqpdal"
"Bug Tracker" = "https://github.com/elgorrion/exeqpdal/issues"
Changelog = "https://github.com/elgorrion/exeqpdal/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/elgorrion/exeqpdal"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["exeqpdal"]

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function call in argument defaults
    "B904",   # raise from None
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["ARG", "S101", "SIM105"]

[tool.ruff.lint.isort]
known-first-party = ["exeqpdal"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=exeqpdal",
    "--cov-report=term-missing",
]
markers = [
    "integration: marks tests as integration tests (require real PDAL CLI)",
    "slow: marks tests as slow-running tests (may take >30 seconds)",
    "benchmark: marks performance benchmark tests (1-10 minutes, use large datasets)",
    "copc: marks COPC-specific tests (Cloud Optimized Point Cloud format)",
    "denoising: marks noise removal and outlier detection tests",
    "database: marks tests requiring database setup (PostgreSQL PointCloud, TileDB)",
]

[tool.coverage.run]
source = ["exeqpdal"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
