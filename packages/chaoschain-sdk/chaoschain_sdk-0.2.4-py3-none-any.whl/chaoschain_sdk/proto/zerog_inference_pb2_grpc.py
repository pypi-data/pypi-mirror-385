# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import zerog_inference_pb2 as zerog__inference__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in zerog_inference_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ZeroGInferenceServiceStub(object):
    """0G Compute Inference Service
    Based on: https://docs.0g.ai/developer-hub/building-on-0g/compute-network/sdk

    This service wraps the official @0glabs/0g-serving-broker SDK and provides
    a gRPC interface for Python clients. It follows the correct 0G flow:
    1. Acknowledge provider
    2. Get service metadata
    3. Generate auth headers
    4. Make inference request
    5. Validate response with chatID

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Health = channel.unary_unary(
                '/zerog_inference.ZeroGInferenceService/Health',
                request_serializer=zerog__inference__pb2.HealthRequest.SerializeToString,
                response_deserializer=zerog__inference__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.GetBalance = channel.unary_unary(
                '/zerog_inference.ZeroGInferenceService/GetBalance',
                request_serializer=zerog__inference__pb2.BalanceRequest.SerializeToString,
                response_deserializer=zerog__inference__pb2.BalanceResponse.FromString,
                _registered_method=True)
        self.AddFunds = channel.unary_unary(
                '/zerog_inference.ZeroGInferenceService/AddFunds',
                request_serializer=zerog__inference__pb2.AddFundsRequest.SerializeToString,
                response_deserializer=zerog__inference__pb2.AddFundsResponse.FromString,
                _registered_method=True)
        self.GetMetadata = channel.unary_unary(
                '/zerog_inference.ZeroGInferenceService/GetMetadata',
                request_serializer=zerog__inference__pb2.MetadataRequest.SerializeToString,
                response_deserializer=zerog__inference__pb2.MetadataResponse.FromString,
                _registered_method=True)
        self.Inference = channel.unary_unary(
                '/zerog_inference.ZeroGInferenceService/Inference',
                request_serializer=zerog__inference__pb2.InferenceRequest.SerializeToString,
                response_deserializer=zerog__inference__pb2.InferenceResponse.FromString,
                _registered_method=True)


class ZeroGInferenceServiceServicer(object):
    """0G Compute Inference Service
    Based on: https://docs.0g.ai/developer-hub/building-on-0g/compute-network/sdk

    This service wraps the official @0glabs/0g-serving-broker SDK and provides
    a gRPC interface for Python clients. It follows the correct 0G flow:
    1. Acknowledge provider
    2. Get service metadata
    3. Generate auth headers
    4. Make inference request
    5. Validate response with chatID

    """

    def Health(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Get account balance (0G tokens)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFunds(self, request, context):
        """Add funds to account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetadata(self, request, context):
        """Get service metadata for a provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inference(self, request, context):
        """Execute LLM inference (returns immediately with chatID)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ZeroGInferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=zerog__inference__pb2.HealthRequest.FromString,
                    response_serializer=zerog__inference__pb2.HealthResponse.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=zerog__inference__pb2.BalanceRequest.FromString,
                    response_serializer=zerog__inference__pb2.BalanceResponse.SerializeToString,
            ),
            'AddFunds': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFunds,
                    request_deserializer=zerog__inference__pb2.AddFundsRequest.FromString,
                    response_serializer=zerog__inference__pb2.AddFundsResponse.SerializeToString,
            ),
            'GetMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetadata,
                    request_deserializer=zerog__inference__pb2.MetadataRequest.FromString,
                    response_serializer=zerog__inference__pb2.MetadataResponse.SerializeToString,
            ),
            'Inference': grpc.unary_unary_rpc_method_handler(
                    servicer.Inference,
                    request_deserializer=zerog__inference__pb2.InferenceRequest.FromString,
                    response_serializer=zerog__inference__pb2.InferenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zerog_inference.ZeroGInferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('zerog_inference.ZeroGInferenceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ZeroGInferenceService(object):
    """0G Compute Inference Service
    Based on: https://docs.0g.ai/developer-hub/building-on-0g/compute-network/sdk

    This service wraps the official @0glabs/0g-serving-broker SDK and provides
    a gRPC interface for Python clients. It follows the correct 0G flow:
    1. Acknowledge provider
    2. Get service metadata
    3. Generate auth headers
    4. Make inference request
    5. Validate response with chatID

    """

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zerog_inference.ZeroGInferenceService/Health',
            zerog__inference__pb2.HealthRequest.SerializeToString,
            zerog__inference__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zerog_inference.ZeroGInferenceService/GetBalance',
            zerog__inference__pb2.BalanceRequest.SerializeToString,
            zerog__inference__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddFunds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zerog_inference.ZeroGInferenceService/AddFunds',
            zerog__inference__pb2.AddFundsRequest.SerializeToString,
            zerog__inference__pb2.AddFundsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zerog_inference.ZeroGInferenceService/GetMetadata',
            zerog__inference__pb2.MetadataRequest.SerializeToString,
            zerog__inference__pb2.MetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Inference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/zerog_inference.ZeroGInferenceService/Inference',
            zerog__inference__pb2.InferenceRequest.SerializeToString,
            zerog__inference__pb2.InferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
