# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'daily': 'str',
        'half_yearly': 'str',
        'monthly': 'str',
        'quarterly': 'str',
        'summary': 'str',
        'weekly': 'str',
        'whole_period': 'str',
        'yearly': 'str'
    }

    attribute_map = {
        'daily': 'Daily',
        'half_yearly': 'HalfYearly',
        'monthly': 'Monthly',
        'quarterly': 'Quarterly',
        'summary': 'Summary',
        'weekly': 'Weekly',
        'whole_period': 'WholePeriod',
        'yearly': 'Yearly'
    }

    def __init__(self, daily=None, half_yearly=None, monthly=None, quarterly=None, summary=None, weekly=None, whole_period=None, yearly=None):  # noqa: E501
        """TableData - a model defined in Swagger"""  # noqa: E501
        self._daily = None
        self._half_yearly = None
        self._monthly = None
        self._quarterly = None
        self._summary = None
        self._weekly = None
        self._whole_period = None
        self._yearly = None
        self.discriminator = None
        self.daily = daily
        self.half_yearly = half_yearly
        self.monthly = monthly
        self.quarterly = quarterly
        self.summary = summary
        self.weekly = weekly
        self.whole_period = whole_period
        self.yearly = yearly

    @property
    def daily(self):
        """Gets the daily of this TableData.  # noqa: E501


        :return: The daily of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this TableData.


        :param daily: The daily of this TableData.  # noqa: E501
        :type: str
        """
        if daily is None:
            raise ValueError("Invalid value for `daily`, must not be `None`")  # noqa: E501

        self._daily = daily

    @property
    def half_yearly(self):
        """Gets the half_yearly of this TableData.  # noqa: E501


        :return: The half_yearly of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._half_yearly

    @half_yearly.setter
    def half_yearly(self, half_yearly):
        """Sets the half_yearly of this TableData.


        :param half_yearly: The half_yearly of this TableData.  # noqa: E501
        :type: str
        """
        if half_yearly is None:
            raise ValueError("Invalid value for `half_yearly`, must not be `None`")  # noqa: E501

        self._half_yearly = half_yearly

    @property
    def monthly(self):
        """Gets the monthly of this TableData.  # noqa: E501


        :return: The monthly of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this TableData.


        :param monthly: The monthly of this TableData.  # noqa: E501
        :type: str
        """
        if monthly is None:
            raise ValueError("Invalid value for `monthly`, must not be `None`")  # noqa: E501

        self._monthly = monthly

    @property
    def quarterly(self):
        """Gets the quarterly of this TableData.  # noqa: E501


        :return: The quarterly of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._quarterly

    @quarterly.setter
    def quarterly(self, quarterly):
        """Sets the quarterly of this TableData.


        :param quarterly: The quarterly of this TableData.  # noqa: E501
        :type: str
        """
        if quarterly is None:
            raise ValueError("Invalid value for `quarterly`, must not be `None`")  # noqa: E501

        self._quarterly = quarterly

    @property
    def summary(self):
        """Gets the summary of this TableData.  # noqa: E501


        :return: The summary of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this TableData.


        :param summary: The summary of this TableData.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def weekly(self):
        """Gets the weekly of this TableData.  # noqa: E501


        :return: The weekly of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._weekly

    @weekly.setter
    def weekly(self, weekly):
        """Sets the weekly of this TableData.


        :param weekly: The weekly of this TableData.  # noqa: E501
        :type: str
        """
        if weekly is None:
            raise ValueError("Invalid value for `weekly`, must not be `None`")  # noqa: E501

        self._weekly = weekly

    @property
    def whole_period(self):
        """Gets the whole_period of this TableData.  # noqa: E501


        :return: The whole_period of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._whole_period

    @whole_period.setter
    def whole_period(self, whole_period):
        """Sets the whole_period of this TableData.


        :param whole_period: The whole_period of this TableData.  # noqa: E501
        :type: str
        """
        if whole_period is None:
            raise ValueError("Invalid value for `whole_period`, must not be `None`")  # noqa: E501

        self._whole_period = whole_period

    @property
    def yearly(self):
        """Gets the yearly of this TableData.  # noqa: E501


        :return: The yearly of this TableData.  # noqa: E501
        :rtype: str
        """
        return self._yearly

    @yearly.setter
    def yearly(self, yearly):
        """Sets the yearly of this TableData.


        :param yearly: The yearly of this TableData.  # noqa: E501
        :type: str
        """
        if yearly is None:
            raise ValueError("Invalid value for `yearly`, must not be `None`")  # noqa: E501

        self._yearly = yearly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
