# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PerformanceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sharpe': 'float',
        'ret': 'float',
        'mdd': 'float',
        'vol': 'float',
        'avg_pnl': 'float',
        'turnover': 'float',
        'annualized_ret': 'float'
    }

    attribute_map = {
        'sharpe': 'Sharpe',
        'ret': 'Ret',
        'mdd': 'MDD',
        'vol': 'Vol',
        'avg_pnl': 'AvgPNL',
        'turnover': 'Turnover',
        'annualized_ret': 'AnnualizedRet'
    }

    def __init__(self, sharpe=None, ret=None, mdd=None, vol=None, avg_pnl=None, turnover=None, annualized_ret=None):  # noqa: E501
        """PerformanceData - a model defined in Swagger"""  # noqa: E501
        self._sharpe = None
        self._ret = None
        self._mdd = None
        self._vol = None
        self._avg_pnl = None
        self._turnover = None
        self._annualized_ret = None
        self.discriminator = None
        self.sharpe = sharpe
        self.ret = ret
        self.mdd = mdd
        self.vol = vol
        self.avg_pnl = avg_pnl
        self.turnover = turnover
        self.annualized_ret = annualized_ret

    @property
    def sharpe(self):
        """Gets the sharpe of this PerformanceData.  # noqa: E501


        :return: The sharpe of this PerformanceData.  # noqa: E501
        :rtype: float
        """
        return self._sharpe

    @sharpe.setter
    def sharpe(self, sharpe):
        """Sets the sharpe of this PerformanceData.


        :param sharpe: The sharpe of this PerformanceData.  # noqa: E501
        :type: float
        """
        if sharpe is None:
            raise ValueError("Invalid value for `sharpe`, must not be `None`")  # noqa: E501

        self._sharpe = sharpe

    @property
    def ret(self):
        """Gets the ret of this PerformanceData.  # noqa: E501


        :return: The ret of this PerformanceData.  # noqa: E501
        :rtype: float
        """
        return self._ret

    @ret.setter
    def ret(self, ret):
        """Sets the ret of this PerformanceData.


        :param ret: The ret of this PerformanceData.  # noqa: E501
        :type: float
        """
        if ret is None:
            raise ValueError("Invalid value for `ret`, must not be `None`")  # noqa: E501

        self._ret = ret

    @property
    def mdd(self):
        """Gets the mdd of this PerformanceData.  # noqa: E501


        :return: The mdd of this PerformanceData.  # noqa: E501
        :rtype: float
        """
        return self._mdd

    @mdd.setter
    def mdd(self, mdd):
        """Sets the mdd of this PerformanceData.


        :param mdd: The mdd of this PerformanceData.  # noqa: E501
        :type: float
        """
        if mdd is None:
            raise ValueError("Invalid value for `mdd`, must not be `None`")  # noqa: E501

        self._mdd = mdd

    @property
    def vol(self):
        """Gets the vol of this PerformanceData.  # noqa: E501


        :return: The vol of this PerformanceData.  # noqa: E501
        :rtype: float
        """
        return self._vol

    @vol.setter
    def vol(self, vol):
        """Sets the vol of this PerformanceData.


        :param vol: The vol of this PerformanceData.  # noqa: E501
        :type: float
        """
        if vol is None:
            raise ValueError("Invalid value for `vol`, must not be `None`")  # noqa: E501

        self._vol = vol

    @property
    def avg_pnl(self):
        """Gets the avg_pnl of this PerformanceData.  # noqa: E501


        :return: The avg_pnl of this PerformanceData.  # noqa: E501
        :rtype: float
        """
        return self._avg_pnl

    @avg_pnl.setter
    def avg_pnl(self, avg_pnl):
        """Sets the avg_pnl of this PerformanceData.


        :param avg_pnl: The avg_pnl of this PerformanceData.  # noqa: E501
        :type: float
        """
        if avg_pnl is None:
            raise ValueError("Invalid value for `avg_pnl`, must not be `None`")  # noqa: E501

        self._avg_pnl = avg_pnl

    @property
    def turnover(self):
        """Gets the turnover of this PerformanceData.  # noqa: E501


        :return: The turnover of this PerformanceData.  # noqa: E501
        :rtype: float
        """
        return self._turnover

    @turnover.setter
    def turnover(self, turnover):
        """Sets the turnover of this PerformanceData.


        :param turnover: The turnover of this PerformanceData.  # noqa: E501
        :type: float
        """
        if turnover is None:
            raise ValueError("Invalid value for `turnover`, must not be `None`")  # noqa: E501

        self._turnover = turnover

    @property
    def annualized_ret(self):
        """Gets the annualized_ret of this PerformanceData.  # noqa: E501


        :return: The annualized_ret of this PerformanceData.  # noqa: E501
        :rtype: float
        """
        return self._annualized_ret

    @annualized_ret.setter
    def annualized_ret(self, annualized_ret):
        """Sets the annualized_ret of this PerformanceData.


        :param annualized_ret: The annualized_ret of this PerformanceData.  # noqa: E501
        :type: float
        """
        if annualized_ret is None:
            raise ValueError("Invalid value for `annualized_ret`, must not be `None`")  # noqa: E501

        self._annualized_ret = annualized_ret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerformanceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
