# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AwsCredentialsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_access_key_id': 'str',
        'aws_secret_access_key': 'str',
        'aws_session_token': 'str'
    }

    attribute_map = {
        'aws_access_key_id': 'aws_access_key_id',
        'aws_secret_access_key': 'aws_secret_access_key',
        'aws_session_token': 'aws_session_token'
    }

    def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, aws_session_token=None):  # noqa: E501
        """AwsCredentialsResponse - a model defined in Swagger"""  # noqa: E501
        self._aws_access_key_id = None
        self._aws_secret_access_key = None
        self._aws_session_token = None
        self.discriminator = None
        self.aws_access_key_id = aws_access_key_id
        self.aws_secret_access_key = aws_secret_access_key
        self.aws_session_token = aws_session_token

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this AwsCredentialsResponse.  # noqa: E501


        :return: The aws_access_key_id of this AwsCredentialsResponse.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this AwsCredentialsResponse.


        :param aws_access_key_id: The aws_access_key_id of this AwsCredentialsResponse.  # noqa: E501
        :type: str
        """
        if aws_access_key_id is None:
            raise ValueError("Invalid value for `aws_access_key_id`, must not be `None`")  # noqa: E501

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_secret_access_key(self):
        """Gets the aws_secret_access_key of this AwsCredentialsResponse.  # noqa: E501


        :return: The aws_secret_access_key of this AwsCredentialsResponse.  # noqa: E501
        :rtype: str
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """Sets the aws_secret_access_key of this AwsCredentialsResponse.


        :param aws_secret_access_key: The aws_secret_access_key of this AwsCredentialsResponse.  # noqa: E501
        :type: str
        """
        if aws_secret_access_key is None:
            raise ValueError("Invalid value for `aws_secret_access_key`, must not be `None`")  # noqa: E501

        self._aws_secret_access_key = aws_secret_access_key

    @property
    def aws_session_token(self):
        """Gets the aws_session_token of this AwsCredentialsResponse.  # noqa: E501


        :return: The aws_session_token of this AwsCredentialsResponse.  # noqa: E501
        :rtype: str
        """
        return self._aws_session_token

    @aws_session_token.setter
    def aws_session_token(self, aws_session_token):
        """Sets the aws_session_token of this AwsCredentialsResponse.


        :param aws_session_token: The aws_session_token of this AwsCredentialsResponse.  # noqa: E501
        :type: str
        """
        if aws_session_token is None:
            raise ValueError("Invalid value for `aws_session_token`, must not be `None`")  # noqa: E501

        self._aws_session_token = aws_session_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwsCredentialsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsCredentialsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
