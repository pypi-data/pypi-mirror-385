# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetafundModelResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unix_timestamp': 'int',
        'timestamp': 'str',
        'ccid': 'list[int]',
        'short_code': 'list[object]',
        'isin': 'list[object]',
        'data': 'list[int]'
    }

    attribute_map = {
        'unix_timestamp': 'unix_timestamp',
        'timestamp': 'timestamp',
        'ccid': 'ccid',
        'short_code': 'short_code',
        'isin': 'isin',
        'data': 'data'
    }

    def __init__(self, unix_timestamp=None, timestamp=None, ccid=None, short_code=None, isin=None, data=None):  # noqa: E501
        """MetafundModelResponse - a model defined in Swagger"""  # noqa: E501
        self._unix_timestamp = None
        self._timestamp = None
        self._ccid = None
        self._short_code = None
        self._isin = None
        self._data = None
        self.discriminator = None
        self.unix_timestamp = unix_timestamp
        self.timestamp = timestamp
        if ccid is not None:
            self.ccid = ccid
        if short_code is not None:
            self.short_code = short_code
        if isin is not None:
            self.isin = isin
        self.data = data

    @property
    def unix_timestamp(self):
        """Gets the unix_timestamp of this MetafundModelResponse.  # noqa: E501


        :return: The unix_timestamp of this MetafundModelResponse.  # noqa: E501
        :rtype: int
        """
        return self._unix_timestamp

    @unix_timestamp.setter
    def unix_timestamp(self, unix_timestamp):
        """Sets the unix_timestamp of this MetafundModelResponse.


        :param unix_timestamp: The unix_timestamp of this MetafundModelResponse.  # noqa: E501
        :type: int
        """
        if unix_timestamp is None:
            raise ValueError("Invalid value for `unix_timestamp`, must not be `None`")  # noqa: E501

        self._unix_timestamp = unix_timestamp

    @property
    def timestamp(self):
        """Gets the timestamp of this MetafundModelResponse.  # noqa: E501


        :return: The timestamp of this MetafundModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MetafundModelResponse.


        :param timestamp: The timestamp of this MetafundModelResponse.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def ccid(self):
        """Gets the ccid of this MetafundModelResponse.  # noqa: E501


        :return: The ccid of this MetafundModelResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._ccid

    @ccid.setter
    def ccid(self, ccid):
        """Sets the ccid of this MetafundModelResponse.


        :param ccid: The ccid of this MetafundModelResponse.  # noqa: E501
        :type: list[int]
        """

        self._ccid = ccid

    @property
    def short_code(self):
        """Gets the short_code of this MetafundModelResponse.  # noqa: E501


        :return: The short_code of this MetafundModelResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this MetafundModelResponse.


        :param short_code: The short_code of this MetafundModelResponse.  # noqa: E501
        :type: list[object]
        """

        self._short_code = short_code

    @property
    def isin(self):
        """Gets the isin of this MetafundModelResponse.  # noqa: E501


        :return: The isin of this MetafundModelResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this MetafundModelResponse.


        :param isin: The isin of this MetafundModelResponse.  # noqa: E501
        :type: list[object]
        """

        self._isin = isin

    @property
    def data(self):
        """Gets the data of this MetafundModelResponse.  # noqa: E501


        :return: The data of this MetafundModelResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this MetafundModelResponse.


        :param data: The data of this MetafundModelResponse.  # noqa: E501
        :type: list[int]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetafundModelResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetafundModelResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
