# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_name': 'str',
        'code_format': 'str',
        'tail': 'int',
        'start_date': 'str',
        'last_date': 'str'
    }

    attribute_map = {
        'identity_name': 'identity_name',
        'code_format': 'code_format',
        'tail': 'tail',
        'start_date': 'start_date',
        'last_date': 'last_date'
    }

    def __init__(self, identity_name=None, code_format=None, tail=None, start_date=None, last_date=None):  # noqa: E501
        """MetaInfo - a model defined in Swagger"""  # noqa: E501
        self._identity_name = None
        self._code_format = None
        self._tail = None
        self._start_date = None
        self._last_date = None
        self.discriminator = None
        self.identity_name = identity_name
        self.code_format = code_format
        self.tail = tail
        self.start_date = start_date
        self.last_date = last_date

    @property
    def identity_name(self):
        """Gets the identity_name of this MetaInfo.  # noqa: E501


        :return: The identity_name of this MetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._identity_name

    @identity_name.setter
    def identity_name(self, identity_name):
        """Sets the identity_name of this MetaInfo.


        :param identity_name: The identity_name of this MetaInfo.  # noqa: E501
        :type: str
        """
        if identity_name is None:
            raise ValueError("Invalid value for `identity_name`, must not be `None`")  # noqa: E501

        self._identity_name = identity_name

    @property
    def code_format(self):
        """Gets the code_format of this MetaInfo.  # noqa: E501


        :return: The code_format of this MetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._code_format

    @code_format.setter
    def code_format(self, code_format):
        """Sets the code_format of this MetaInfo.


        :param code_format: The code_format of this MetaInfo.  # noqa: E501
        :type: str
        """
        if code_format is None:
            raise ValueError("Invalid value for `code_format`, must not be `None`")  # noqa: E501

        self._code_format = code_format

    @property
    def tail(self):
        """Gets the tail of this MetaInfo.  # noqa: E501


        :return: The tail of this MetaInfo.  # noqa: E501
        :rtype: int
        """
        return self._tail

    @tail.setter
    def tail(self, tail):
        """Sets the tail of this MetaInfo.


        :param tail: The tail of this MetaInfo.  # noqa: E501
        :type: int
        """
        if tail is None:
            raise ValueError("Invalid value for `tail`, must not be `None`")  # noqa: E501

        self._tail = tail

    @property
    def start_date(self):
        """Gets the start_date of this MetaInfo.  # noqa: E501


        :return: The start_date of this MetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MetaInfo.


        :param start_date: The start_date of this MetaInfo.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def last_date(self):
        """Gets the last_date of this MetaInfo.  # noqa: E501


        :return: The last_date of this MetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_date

    @last_date.setter
    def last_date(self, last_date):
        """Sets the last_date of this MetaInfo.


        :param last_date: The last_date of this MetaInfo.  # noqa: E501
        :type: str
        """
        if last_date is None:
            raise ValueError("Invalid value for `last_date`, must not be `None`")  # noqa: E501

        self._last_date = last_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
