# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubmissionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_info': 'dict(str, object)',
        'model_dir': 'str',
        'docker_submit': 'bool',
        'staging': 'bool'
    }

    attribute_map = {
        'model_info': 'model_info',
        'model_dir': 'model_dir',
        'docker_submit': 'docker_submit',
        'staging': 'staging'
    }

    def __init__(self, model_info=None, model_dir=None, docker_submit=False, staging=False):  # noqa: E501
        """SubmissionRequest - a model defined in Swagger"""  # noqa: E501
        self._model_info = None
        self._model_dir = None
        self._docker_submit = None
        self._staging = None
        self.discriminator = None
        self.model_info = model_info
        self.model_dir = model_dir
        if docker_submit is not None:
            self.docker_submit = docker_submit
        if staging is not None:
            self.staging = staging

    @property
    def model_info(self):
        """Gets the model_info of this SubmissionRequest.  # noqa: E501


        :return: The model_info of this SubmissionRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this SubmissionRequest.


        :param model_info: The model_info of this SubmissionRequest.  # noqa: E501
        :type: dict(str, object)
        """
        if model_info is None:
            raise ValueError("Invalid value for `model_info`, must not be `None`")  # noqa: E501

        self._model_info = model_info

    @property
    def model_dir(self):
        """Gets the model_dir of this SubmissionRequest.  # noqa: E501


        :return: The model_dir of this SubmissionRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_dir

    @model_dir.setter
    def model_dir(self, model_dir):
        """Sets the model_dir of this SubmissionRequest.


        :param model_dir: The model_dir of this SubmissionRequest.  # noqa: E501
        :type: str
        """
        if model_dir is None:
            raise ValueError("Invalid value for `model_dir`, must not be `None`")  # noqa: E501

        self._model_dir = model_dir

    @property
    def docker_submit(self):
        """Gets the docker_submit of this SubmissionRequest.  # noqa: E501


        :return: The docker_submit of this SubmissionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._docker_submit

    @docker_submit.setter
    def docker_submit(self, docker_submit):
        """Sets the docker_submit of this SubmissionRequest.


        :param docker_submit: The docker_submit of this SubmissionRequest.  # noqa: E501
        :type: bool
        """

        self._docker_submit = docker_submit

    @property
    def staging(self):
        """Gets the staging of this SubmissionRequest.  # noqa: E501


        :return: The staging of this SubmissionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._staging

    @staging.setter
    def staging(self, staging):
        """Sets the staging of this SubmissionRequest.


        :param staging: The staging of this SubmissionRequest.  # noqa: E501
        :type: bool
        """

        self._staging = staging

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmissionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
