# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimulationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'str',
        'position_column_types': 'str',
        'model_info': 'dict(str, object)',
        'start': 'int',
        'end': 'int',
        'volcap_pct': 'float',
        'cost_list': 'list[str]',
        'decay': 'int',
        'return_calc_method': 'str',
        'turnover_calc_method': 'str',
        'booksize': 'int',
        'slippage': 'float',
        'reinvest': 'bool',
        'fill_nan': 'bool',
        'close': 'bool',
        'legends': 'dict(str, object)',
        'adj_dividend': 'bool',
        'adj_funding_fee': 'bool',
        'currency': 'str',
        'statistics_filter': 'list[str]'
    }

    attribute_map = {
        'position': 'position',
        'position_column_types': 'position_column_types',
        'model_info': 'model_info',
        'start': 'start',
        'end': 'end',
        'volcap_pct': 'volcap_pct',
        'cost_list': 'cost_list',
        'decay': 'decay',
        'return_calc_method': 'return_calc_method',
        'turnover_calc_method': 'turnover_calc_method',
        'booksize': 'booksize',
        'slippage': 'slippage',
        'reinvest': 'reinvest',
        'fill_nan': 'fill_nan',
        'close': 'close',
        'legends': 'legends',
        'adj_dividend': 'adj_dividend',
        'adj_funding_fee': 'adj_funding_fee',
        'currency': 'currency',
        'statistics_filter': 'statistics_filter'
    }

    def __init__(self, position=None, position_column_types=None, model_info=None, start=None, end=None, volcap_pct=0.0, cost_list=None, decay=1, return_calc_method='arithmetic', turnover_calc_method='arithmetic', booksize=100000000, slippage=0.0, reinvest=False, fill_nan=True, close=False, legends=None, adj_dividend=False, adj_funding_fee=False, currency=None, statistics_filter=None):  # noqa: E501
        """SimulationRequest - a model defined in Swagger"""  # noqa: E501
        self._position = None
        self._position_column_types = None
        self._model_info = None
        self._start = None
        self._end = None
        self._volcap_pct = None
        self._cost_list = None
        self._decay = None
        self._return_calc_method = None
        self._turnover_calc_method = None
        self._booksize = None
        self._slippage = None
        self._reinvest = None
        self._fill_nan = None
        self._close = None
        self._legends = None
        self._adj_dividend = None
        self._adj_funding_fee = None
        self._currency = None
        self._statistics_filter = None
        self.discriminator = None
        self.position = position
        self.position_column_types = position_column_types
        self.model_info = model_info
        self.start = start
        self.end = end
        if volcap_pct is not None:
            self.volcap_pct = volcap_pct
        if cost_list is not None:
            self.cost_list = cost_list
        if decay is not None:
            self.decay = decay
        if return_calc_method is not None:
            self.return_calc_method = return_calc_method
        if turnover_calc_method is not None:
            self.turnover_calc_method = turnover_calc_method
        if booksize is not None:
            self.booksize = booksize
        if slippage is not None:
            self.slippage = slippage
        if reinvest is not None:
            self.reinvest = reinvest
        if fill_nan is not None:
            self.fill_nan = fill_nan
        if close is not None:
            self.close = close
        if legends is not None:
            self.legends = legends
        if adj_dividend is not None:
            self.adj_dividend = adj_dividend
        if adj_funding_fee is not None:
            self.adj_funding_fee = adj_funding_fee
        if currency is not None:
            self.currency = currency
        if statistics_filter is not None:
            self.statistics_filter = statistics_filter

    @property
    def position(self):
        """Gets the position of this SimulationRequest.  # noqa: E501


        :return: The position of this SimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SimulationRequest.


        :param position: The position of this SimulationRequest.  # noqa: E501
        :type: str
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def position_column_types(self):
        """Gets the position_column_types of this SimulationRequest.  # noqa: E501


        :return: The position_column_types of this SimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._position_column_types

    @position_column_types.setter
    def position_column_types(self, position_column_types):
        """Sets the position_column_types of this SimulationRequest.


        :param position_column_types: The position_column_types of this SimulationRequest.  # noqa: E501
        :type: str
        """
        if position_column_types is None:
            raise ValueError("Invalid value for `position_column_types`, must not be `None`")  # noqa: E501

        self._position_column_types = position_column_types

    @property
    def model_info(self):
        """Gets the model_info of this SimulationRequest.  # noqa: E501


        :return: The model_info of this SimulationRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this SimulationRequest.


        :param model_info: The model_info of this SimulationRequest.  # noqa: E501
        :type: dict(str, object)
        """
        if model_info is None:
            raise ValueError("Invalid value for `model_info`, must not be `None`")  # noqa: E501

        self._model_info = model_info

    @property
    def start(self):
        """Gets the start of this SimulationRequest.  # noqa: E501


        :return: The start of this SimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SimulationRequest.


        :param start: The start of this SimulationRequest.  # noqa: E501
        :type: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this SimulationRequest.  # noqa: E501


        :return: The end of this SimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this SimulationRequest.


        :param end: The end of this SimulationRequest.  # noqa: E501
        :type: int
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def volcap_pct(self):
        """Gets the volcap_pct of this SimulationRequest.  # noqa: E501


        :return: The volcap_pct of this SimulationRequest.  # noqa: E501
        :rtype: float
        """
        return self._volcap_pct

    @volcap_pct.setter
    def volcap_pct(self, volcap_pct):
        """Sets the volcap_pct of this SimulationRequest.


        :param volcap_pct: The volcap_pct of this SimulationRequest.  # noqa: E501
        :type: float
        """

        self._volcap_pct = volcap_pct

    @property
    def cost_list(self):
        """Gets the cost_list of this SimulationRequest.  # noqa: E501


        :return: The cost_list of this SimulationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._cost_list

    @cost_list.setter
    def cost_list(self, cost_list):
        """Sets the cost_list of this SimulationRequest.


        :param cost_list: The cost_list of this SimulationRequest.  # noqa: E501
        :type: list[str]
        """

        self._cost_list = cost_list

    @property
    def decay(self):
        """Gets the decay of this SimulationRequest.  # noqa: E501


        :return: The decay of this SimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._decay

    @decay.setter
    def decay(self, decay):
        """Sets the decay of this SimulationRequest.


        :param decay: The decay of this SimulationRequest.  # noqa: E501
        :type: int
        """

        self._decay = decay

    @property
    def return_calc_method(self):
        """Gets the return_calc_method of this SimulationRequest.  # noqa: E501


        :return: The return_calc_method of this SimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._return_calc_method

    @return_calc_method.setter
    def return_calc_method(self, return_calc_method):
        """Sets the return_calc_method of this SimulationRequest.


        :param return_calc_method: The return_calc_method of this SimulationRequest.  # noqa: E501
        :type: str
        """

        self._return_calc_method = return_calc_method

    @property
    def turnover_calc_method(self):
        """Gets the turnover_calc_method of this SimulationRequest.  # noqa: E501


        :return: The turnover_calc_method of this SimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._turnover_calc_method

    @turnover_calc_method.setter
    def turnover_calc_method(self, turnover_calc_method):
        """Sets the turnover_calc_method of this SimulationRequest.


        :param turnover_calc_method: The turnover_calc_method of this SimulationRequest.  # noqa: E501
        :type: str
        """

        self._turnover_calc_method = turnover_calc_method

    @property
    def booksize(self):
        """Gets the booksize of this SimulationRequest.  # noqa: E501


        :return: The booksize of this SimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._booksize

    @booksize.setter
    def booksize(self, booksize):
        """Sets the booksize of this SimulationRequest.


        :param booksize: The booksize of this SimulationRequest.  # noqa: E501
        :type: int
        """

        self._booksize = booksize

    @property
    def slippage(self):
        """Gets the slippage of this SimulationRequest.  # noqa: E501


        :return: The slippage of this SimulationRequest.  # noqa: E501
        :rtype: float
        """
        return self._slippage

    @slippage.setter
    def slippage(self, slippage):
        """Sets the slippage of this SimulationRequest.


        :param slippage: The slippage of this SimulationRequest.  # noqa: E501
        :type: float
        """

        self._slippage = slippage

    @property
    def reinvest(self):
        """Gets the reinvest of this SimulationRequest.  # noqa: E501


        :return: The reinvest of this SimulationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._reinvest

    @reinvest.setter
    def reinvest(self, reinvest):
        """Sets the reinvest of this SimulationRequest.


        :param reinvest: The reinvest of this SimulationRequest.  # noqa: E501
        :type: bool
        """

        self._reinvest = reinvest

    @property
    def fill_nan(self):
        """Gets the fill_nan of this SimulationRequest.  # noqa: E501


        :return: The fill_nan of this SimulationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._fill_nan

    @fill_nan.setter
    def fill_nan(self, fill_nan):
        """Sets the fill_nan of this SimulationRequest.


        :param fill_nan: The fill_nan of this SimulationRequest.  # noqa: E501
        :type: bool
        """

        self._fill_nan = fill_nan

    @property
    def close(self):
        """Gets the close of this SimulationRequest.  # noqa: E501


        :return: The close of this SimulationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this SimulationRequest.


        :param close: The close of this SimulationRequest.  # noqa: E501
        :type: bool
        """

        self._close = close

    @property
    def legends(self):
        """Gets the legends of this SimulationRequest.  # noqa: E501


        :return: The legends of this SimulationRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._legends

    @legends.setter
    def legends(self, legends):
        """Sets the legends of this SimulationRequest.


        :param legends: The legends of this SimulationRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._legends = legends

    @property
    def adj_dividend(self):
        """Gets the adj_dividend of this SimulationRequest.  # noqa: E501


        :return: The adj_dividend of this SimulationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._adj_dividend

    @adj_dividend.setter
    def adj_dividend(self, adj_dividend):
        """Sets the adj_dividend of this SimulationRequest.


        :param adj_dividend: The adj_dividend of this SimulationRequest.  # noqa: E501
        :type: bool
        """

        self._adj_dividend = adj_dividend

    @property
    def adj_funding_fee(self):
        """Gets the adj_funding_fee of this SimulationRequest.  # noqa: E501


        :return: The adj_funding_fee of this SimulationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._adj_funding_fee

    @adj_funding_fee.setter
    def adj_funding_fee(self, adj_funding_fee):
        """Sets the adj_funding_fee of this SimulationRequest.


        :param adj_funding_fee: The adj_funding_fee of this SimulationRequest.  # noqa: E501
        :type: bool
        """

        self._adj_funding_fee = adj_funding_fee

    @property
    def currency(self):
        """Gets the currency of this SimulationRequest.  # noqa: E501


        :return: The currency of this SimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SimulationRequest.


        :param currency: The currency of this SimulationRequest.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def statistics_filter(self):
        """Gets the statistics_filter of this SimulationRequest.  # noqa: E501


        :return: The statistics_filter of this SimulationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._statistics_filter

    @statistics_filter.setter
    def statistics_filter(self, statistics_filter):
        """Sets the statistics_filter of this SimulationRequest.


        :param statistics_filter: The statistics_filter of this SimulationRequest.  # noqa: E501
        :type: list[str]
        """

        self._statistics_filter = statistics_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimulationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
