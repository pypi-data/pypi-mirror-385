# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApPosition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domestic_equity': 'dict(str, object)',
        'domestic_bonds': 'dict(str, object)',
        'foreign_equity': 'dict(str, object)',
        'foreign_bonds': 'dict(str, object)'
    }

    attribute_map = {
        'domestic_equity': 'domestic_equity',
        'domestic_bonds': 'domestic_bonds',
        'foreign_equity': 'foreign_equity',
        'foreign_bonds': 'foreign_bonds'
    }

    def __init__(self, domestic_equity=None, domestic_bonds=None, foreign_equity=None, foreign_bonds=None):  # noqa: E501
        """ApPosition - a model defined in Swagger"""  # noqa: E501
        self._domestic_equity = None
        self._domestic_bonds = None
        self._foreign_equity = None
        self._foreign_bonds = None
        self.discriminator = None
        self.domestic_equity = domestic_equity
        self.domestic_bonds = domestic_bonds
        self.foreign_equity = foreign_equity
        self.foreign_bonds = foreign_bonds

    @property
    def domestic_equity(self):
        """Gets the domestic_equity of this ApPosition.  # noqa: E501


        :return: The domestic_equity of this ApPosition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._domestic_equity

    @domestic_equity.setter
    def domestic_equity(self, domestic_equity):
        """Sets the domestic_equity of this ApPosition.


        :param domestic_equity: The domestic_equity of this ApPosition.  # noqa: E501
        :type: dict(str, object)
        """
        if domestic_equity is None:
            raise ValueError("Invalid value for `domestic_equity`, must not be `None`")  # noqa: E501

        self._domestic_equity = domestic_equity

    @property
    def domestic_bonds(self):
        """Gets the domestic_bonds of this ApPosition.  # noqa: E501


        :return: The domestic_bonds of this ApPosition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._domestic_bonds

    @domestic_bonds.setter
    def domestic_bonds(self, domestic_bonds):
        """Sets the domestic_bonds of this ApPosition.


        :param domestic_bonds: The domestic_bonds of this ApPosition.  # noqa: E501
        :type: dict(str, object)
        """
        if domestic_bonds is None:
            raise ValueError("Invalid value for `domestic_bonds`, must not be `None`")  # noqa: E501

        self._domestic_bonds = domestic_bonds

    @property
    def foreign_equity(self):
        """Gets the foreign_equity of this ApPosition.  # noqa: E501


        :return: The foreign_equity of this ApPosition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._foreign_equity

    @foreign_equity.setter
    def foreign_equity(self, foreign_equity):
        """Sets the foreign_equity of this ApPosition.


        :param foreign_equity: The foreign_equity of this ApPosition.  # noqa: E501
        :type: dict(str, object)
        """
        if foreign_equity is None:
            raise ValueError("Invalid value for `foreign_equity`, must not be `None`")  # noqa: E501

        self._foreign_equity = foreign_equity

    @property
    def foreign_bonds(self):
        """Gets the foreign_bonds of this ApPosition.  # noqa: E501


        :return: The foreign_bonds of this ApPosition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._foreign_bonds

    @foreign_bonds.setter
    def foreign_bonds(self, foreign_bonds):
        """Sets the foreign_bonds of this ApPosition.


        :param foreign_bonds: The foreign_bonds of this ApPosition.  # noqa: E501
        :type: dict(str, object)
        """
        if foreign_bonds is None:
            raise ValueError("Invalid value for `foreign_bonds`, must not be `None`")  # noqa: E501

        self._foreign_bonds = foreign_bonds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApPosition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApPosition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
