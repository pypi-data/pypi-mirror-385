# coding: utf-8

"""
    FINTER API

    ### Authorization     🔴 HTTP Authorization Header Format(Don’t forget to include the **Token** 🔑)     - Authorization: **Token** YOUR_API_KEY   # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from finter.api_client import ApiClient


class MetafundApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def metafund_identities_retrieve(self, **kwargs):  # noqa: E501
        """metafund_identities_retrieve  # noqa: E501

        ## Fund Model identity name list API ### 입력변수  (없음)       |출력변수 |설명 |타입 |  |:-------|:--------|:--------|  |unix_timestamp||int| |fm_identity_name_list|펀드 모델 identity name 리스트|List of string|  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_identities_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetafundIdentitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metafund_identities_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metafund_identities_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def metafund_identities_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """metafund_identities_retrieve  # noqa: E501

        ## Fund Model identity name list API ### 입력변수  (없음)       |출력변수 |설명 |타입 |  |:-------|:--------|:--------|  |unix_timestamp||int| |fm_identity_name_list|펀드 모델 identity name 리스트|List of string|  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_identities_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetafundIdentitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metafund_identities_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metafund/identities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetafundIdentitiesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metafund_list_retrieve(self, **kwargs):  # noqa: E501
        """metafund_list_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_list_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str universe:
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metafund_list_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metafund_list_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def metafund_list_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """metafund_list_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_list_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str universe:
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['universe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metafund_list_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'universe' in params:
            query_params.append(('universe', params['universe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metafund/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metafund_model_retrieve(self, **kwargs):  # noqa: E501
        """metafund_model_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_model_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code_format: data column code format
        :param bool forward_fill:
        :param str metafund_name:
        :return: MetafundModelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metafund_model_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metafund_model_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def metafund_model_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """metafund_model_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_model_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code_format: data column code format
        :param bool forward_fill:
        :param str metafund_name:
        :return: MetafundModelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code_format', 'forward_fill', 'metafund_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metafund_model_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'code_format' in params:
            query_params.append(('code_format', params['code_format']))  # noqa: E501
        if 'forward_fill' in params:
            query_params.append(('forward_fill', params['forward_fill']))  # noqa: E501
        if 'metafund_name' in params:
            query_params.append(('metafund_name', params['metafund_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metafund/model', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetafundModelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metafund_performance_retrieve(self, **kwargs):  # noqa: E501
        """metafund_performance_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_performance_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str by_time:
        :param str date_format:
        :param str metafund_name:
        :param str period:
        :return: MetafundPerformanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metafund_performance_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metafund_performance_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def metafund_performance_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """metafund_performance_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metafund_performance_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str by_time:
        :param str date_format:
        :param str metafund_name:
        :param str period:
        :return: MetafundPerformanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['by_time', 'date_format', 'metafund_name', 'period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metafund_performance_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'by_time' in params:
            query_params.append(('by_time', params['by_time']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('date_format', params['date_format']))  # noqa: E501
        if 'metafund_name' in params:
            query_params.append(('metafund_name', params['metafund_name']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metafund/performance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetafundPerformanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
