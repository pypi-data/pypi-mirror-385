# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from finter.api_client import ApiClient


class CalendarApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def calendar_retrieve(self, **kwargs):  # noqa: E501
        """calendar_retrieve  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |date_type |불러 올 날짜의 타입, 1: trading_day, 2: closed_day, 3: weekends 중 하나 선택하여 입력. 비워 두면 전체 날짜 출력|X |0 |  |start_date |시작 날짜 |O | | |end_date |마지막 날짜 |O | | |exchange |krx 또는 us |X |krx | ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |exchange |krx 또는 us |string | |date_type |출력 날짜의 타입 |string |  |dates |기간 내 타입에 따른 날짜 리스트 |list of string |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calendar_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_type: 0:all day 1: trading day, 2: closed day, 3: weekends (optional, default: 0)
        :param str end_date:
        :param str exchange:
        :param str start_date:
        :return: CalendarResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.calendar_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.calendar_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def calendar_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """calendar_retrieve  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |date_type |불러 올 날짜의 타입, 1: trading_day, 2: closed_day, 3: weekends 중 하나 선택하여 입력. 비워 두면 전체 날짜 출력|X |0 |  |start_date |시작 날짜 |O | | |end_date |마지막 날짜 |O | | |exchange |krx 또는 us |X |krx | ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |exchange |krx 또는 us |string | |date_type |출력 날짜의 타입 |string |  |dates |기간 내 타입에 따른 날짜 리스트 |list of string |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calendar_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_type: 0:all day 1: trading day, 2: closed day, 3: weekends (optional, default: 0)
        :param str end_date:
        :param str exchange:
        :param str start_date:
        :return: CalendarResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_type', 'end_date', 'exchange', 'start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calendar_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_type' in params:
            query_params.append(('date_type', params['date_type']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        return self.api_client.call_api(
            '/calendar', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CalendarResponse',  # noqa: E501
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trading_day_retrieve(self, **kwargs):  # noqa: E501
        """trading_day_retrieve  # noqa: E501

        ## 입력변수  |입력변수 | 설명                |필수 |기본값 |  |:-----|:------------------|:-----|:-----| |date | '%Y%m%d' 형태의 날짜   |O | | |exchange | krx 또는 us         |X |krx |  ## 출력변수  |출력변수  | 설명                         |타입                 |  |:--------|:---------------------------|:--------------------|  |unix_timestamp|                            | int                        | |exchange | krx 또는 us                  |string | |date | 입력한 date 값에 대한 1영업일 다음 거래일 |string |    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_day_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date: 0:all day 1: trading day, 2: closed day, 3: weekends (optional, default: 0)
        :param str exchange:
        :param str n: Market time to filter data (optional)
        :return: TradingDayResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trading_day_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.trading_day_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def trading_day_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """trading_day_retrieve  # noqa: E501

        ## 입력변수  |입력변수 | 설명                |필수 |기본값 |  |:-----|:------------------|:-----|:-----| |date | '%Y%m%d' 형태의 날짜   |O | | |exchange | krx 또는 us         |X |krx |  ## 출력변수  |출력변수  | 설명                         |타입                 |  |:--------|:---------------------------|:--------------------|  |unix_timestamp|                            | int                        | |exchange | krx 또는 us                  |string | |date | 입력한 date 값에 대한 1영업일 다음 거래일 |string |    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trading_day_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date: datetime format %Y%m%d for %Y%m%d%H%M%S
        :param str exchange:
        :param str n:
        :return: TradingDayResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date', 'exchange', 'n', 'func']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trading_day_day_delta_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date' in params:
            query_params.append(('date', params['date']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'n' in params:
            query_params.append(('n', params['n']))  # noqa: E501
        if 'func' in params:
            query_params.append(('func', params['func']))  # noqa: E501


        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        return self.api_client.call_api(
            '/trading_day', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradingDayResponse',  # noqa: E501
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
