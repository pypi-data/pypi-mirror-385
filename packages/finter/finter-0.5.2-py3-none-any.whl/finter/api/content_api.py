# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from finter.api_client import ApiClient


class ContentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_identities_retrieve(self, **kwargs):  # noqa: E501
        """content_identities_retrieve  # noqa: E501

        |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |category |CM category |X | |    |출력변수 |설명 |타입 |  |:-----|:-----|:-----|  |unix_timestamp||int| |cm_identity_name_list |CM 리스트 |List of string |   - 존재하지 않는 카테고리를 조회시 빈 리스트를 반환 - 카테고리 설정 하지 않으면 조회 가능한 cm list 모두를 반환  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_identities_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: content model category to get identity list
        :return: ContentIdentitesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_identities_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_identities_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_identities_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """content_identities_retrieve  # noqa: E501

        |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |category |CM category |X | |    |출력변수 |설명 |타입 |  |:-----|:-----|:-----|  |unix_timestamp||int| |cm_identity_name_list |CM 리스트 |List of string |   - 존재하지 않는 카테고리를 조회시 빈 리스트를 반환 - 카테고리 설정 하지 않으면 조회 가능한 cm list 모두를 반환  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_identities_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: content model category to get identity list
        :return: ContentIdentitesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_identities_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/content/identities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentIdentitesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_model_retrieve(self, **kwargs):  # noqa: E501
        """content_model_retrieve  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |identity_name        |CM identity name                                        |O     |            |  |end                  |받을 데이터의 마지막 인덱스(날짜)                          |X     |request 시점 | |code_format          |데이터 칼럼 형식: ccid, isin, short_code 중 택1           |X     |ccid        | |tail                 |받을 데이터의 row 개수: 마지막 인덱스부터 tail 값 만큼, 1 이상 365 이하 값으로 제한됨 |X     |20 | ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |cm       |CM 데이터          |string (json-string) | |meta     |출력값 메타 정보    |dict                 |   ### meta dict 구성  - identity_name - code_format - tail - start_date - last_date   ### 'cm'으로 받은 CM 문자열 데이터프레임 변환 - pd.read_json(cm, orient='index')  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_model_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int backup_day: YYYYMMDD; backup_target_date
        :param str code_format: data column code format
        :param str end: data end date
        :param str identity_name: content model identity name
        :param int tail: data tail row number
        :return: ContentModelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_model_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_model_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_model_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """content_model_retrieve  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |identity_name        |CM identity name                                        |O     |            |  |end                  |받을 데이터의 마지막 인덱스(날짜)                          |X     |request 시점 | |code_format          |데이터 칼럼 형식: ccid, isin, short_code 중 택1           |X     |ccid        | |tail                 |받을 데이터의 row 개수: 마지막 인덱스부터 tail 값 만큼, 1 이상 365 이하 값으로 제한됨 |X     |20 | ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |cm       |CM 데이터          |string (json-string) | |meta     |출력값 메타 정보    |dict                 |   ### meta dict 구성  - identity_name - code_format - tail - start_date - last_date   ### 'cm'으로 받은 CM 문자열 데이터프레임 변환 - pd.read_json(cm, orient='index')  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_model_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int backup_day: YYYYMMDD; backup_target_date
        :param str code_format: data column code format
        :param str end: data end date
        :param str identity_name: content model identity name
        :param int tail: data tail row number
        :return: ContentModelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backup_day', 'code_format', 'end', 'identity_name', 'tail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_model_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'backup_day' in params:
            query_params.append(('backup_day', params['backup_day']))  # noqa: E501
        if 'code_format' in params:
            query_params.append(('code_format', params['code_format']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'identity_name' in params:
            query_params.append(('identity_name', params['identity_name']))  # noqa: E501
        if 'tail' in params:
            query_params.append(('tail', params['tail']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/content/model', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentModelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ews_retrieve(self, **kwargs):  # noqa: E501
        """ews_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ews_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_name: ews cm identity name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ews_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ews_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def ews_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """ews_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ews_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_name: ews cm identity name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identity_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ews_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identity_name' in params:
            query_params.append(('identity_name', params['identity_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cm_catalog_retrieve(self, **kwargs):
        """cm_catalog_retrieve

        :param str cm_type: content, us_financial
        :return dict(str, list)
        """

        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cm_catalog_retrieve_with_http_info(**kwargs)
        else:
            (data) = self.cm_catalog_retrieve_with_http_info(**kwargs)
            return data

    def cm_catalog_retrieve_with_http_info(self, **kwargs):
        """cm_catalog_retrieve

        :param str cm_type: content, us_financial
        :return dict(str, object)
        """

        all_params = ['cm_type']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cm_catalog_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cm_type' in params:
            query_params.append(('cm_type', params['cm_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        auth_settings = ['basicAuth', 'tokenAuth']

        return self.api_client.call_api(
            '/content/cm-catalog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

