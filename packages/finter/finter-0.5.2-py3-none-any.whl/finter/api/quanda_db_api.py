# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401
# python 2 and python 3 compatibility library
import six
from finter.api_client import ApiClient
from finter.rest import ApiException
from finter.settings import logger


class QuandaDbApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def quanda_db_column_list_retrieve(self, **kwargs):  # noqa: E501
        """quanda_db_column_list_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quanda_db_column_list_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db: fnguide, spglobal, factset, etfg
        :param str table: table name in db
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quanda_db_column_list_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.quanda_db_column_list_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def quanda_db_column_list_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """quanda_db_column_list_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quanda_db_column_list_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db: fnguide, spglobal, factset, etfg
        :param str table: table name in db
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db', 'table']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quanda_db_column_list_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'db' in params:
            query_params.append(('db', params['db']))  # noqa: E501
        if 'table' in params:
            query_params.append(('table', params['table']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/quanda/db/column_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quanda_db_query_retrieve(self, **kwargs):  # noqa: E501
        """quanda_db_query_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quanda_db_query_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db: fnguide, spglobal, factset, etfg
        :param str query: sql statement
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quanda_db_query_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.quanda_db_query_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def quanda_db_query_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """quanda_db_query_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quanda_db_query_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db: fnguide, spglobal, factset, etfg
        :param str query: sql statement
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quanda_db_query_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'db' in params:
            query_params.append(('db', params['db']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        # Try multiple Accept headers
        accept_headers = [
            'application/octet-stream',
            'application/json',
            '*/*'  # This accepts any content type
        ]

        response = None
        for accept in accept_headers:
            header_params['Accept'] = self.api_client.select_header_accept([accept])

            try:
                response = self.api_client.call_api(
                    '/quanda/db/query', 'GET',
                    {},  # path_params
                    query_params,
                    header_params,
                    response_type='file',
                    auth_settings=['basicAuth', 'tokenAuth'],
                    _preload_content=False,  # Always set to False to handle streaming ourselves
                    _request_timeout=kwargs.get('_request_timeout'),
                    _return_http_data_only=True
                )
                break  # If successful, break the loop
            except ApiException as e:
                if e.status != 406:  # If it's not a 406 error, re-raise it
                    raise
                logger.warning(f"Accept header {accept} not acceptable, trying next.")
                # If it's a 406 error, try the next Accept header
                continue

        if response is None:
            raise ApiException("Could not find an acceptable content type for the response")

        # Log response details for debugging
        logger.debug(f"Response headers: {response.headers}")
        logger.debug(f"Response content type: {response.headers.get('Content-Type')}")

        return response

    def quanda_db_table_name_list_retrieve(self, **kwargs):  # noqa: E501
        """quanda_db_table_name_list_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quanda_db_table_name_list_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db: fnguide, spglobal, factset, etfg
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quanda_db_table_name_list_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.quanda_db_table_name_list_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def quanda_db_table_name_list_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """quanda_db_table_name_list_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quanda_db_table_name_list_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db: fnguide, spglobal, factset, etfg
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quanda_db_table_name_list_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'db' in params:
            query_params.append(('db', params['db']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/quanda/db/table_name_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
