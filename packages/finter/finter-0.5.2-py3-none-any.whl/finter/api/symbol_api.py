# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from finter.api_client import ApiClient


class SymbolApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def id_convert_create(self, **kwargs):  # noqa: E501
        """id_convert_create  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |from |input 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O | |  |to |output 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O |isin | |source | 바꾸려는 코드들, list 형태 |O |isin | |universe | 0:stock, 1:future_0, 2:future_1, 3:future_spread_0 |X |isin | |date | 날짜 |X |isin |  ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |code_mapped |요청한 코드 타입으로 변환한 결과, key: source (from type), value: to type of source (str) |dict |  ## Possible mapping | from\\to     | id   | isin | shortcode | entity_name | |-------------|------|------|-----------|-------------| | id          | N/A  | O    | O         | O           | | isin        | O    | N/A  | X         | O           | | shortcode   | X    | X    | N/A       | X           | | entity_name | X    | X    | X         | N/A         |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_convert_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date:
        :param str _from:
        :param str source:
        :param str to:
        :param int universe:
        :return: CodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_convert_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_convert_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_convert_create_with_http_info(self, **kwargs):  # noqa: E501
        """id_convert_create  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |from |input 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O | |  |to |output 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O |isin | |source | 바꾸려는 코드들, list 형태 |O |isin | |universe | 0:stock, 1:future_0, 2:future_1, 3:future_spread_0 |X |isin | |date | 날짜 |X |isin |  ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |code_mapped |요청한 코드 타입으로 변환한 결과, key: source (from type), value: to type of source (str) |dict |  ## Possible mapping | from\\to     | id   | isin | shortcode | entity_name | |-------------|------|------|-----------|-------------| | id          | N/A  | O    | O         | O           | | isin        | O    | N/A  | X         | O           | | shortcode   | X    | X    | N/A       | X           | | entity_name | X    | X    | X         | N/A         |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_convert_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date:
        :param str _from:
        :param str source:
        :param str to:
        :param int universe:
        :return: CodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', '_from', 'source', 'to', 'universe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_convert_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'universe' in params:
            query_params.append(('universe', params['universe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = query_params
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/id/convert', 'POST',
            path_params,
            None,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_convert_retrieve(self, **kwargs):  # noqa: E501
        """id_convert_retrieve  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |from |input 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O | |  |to |output 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O |isin | |source | 바꾸려는 코드들, list 형태 |O |isin | |universe | 0:stock, 1:future_0, 2:future_1, 3:future_spread_0 |X |isin | |date | 날짜 |X |isin |  ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |code_mapped |요청한 코드 타입으로 변환한 결과, key: source (from type), value: to type of source (str) |dict |  ## Possible mapping | from\\to     | id   | isin | shortcode | entity_name | |-------------|------|------|-----------|-------------| | id          | N/A  | O    | O         | O           | | isin        | O    | N/A  | X         | O           | | shortcode   | X    | X    | N/A       | X           | | entity_name | X    | X    | X         | N/A         |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_convert_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date:
        :param str _from:
        :param str source:
        :param str to:
        :param int universe:
        :return: CodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_convert_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.id_convert_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def id_convert_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """id_convert_retrieve  # noqa: E501

        ## 입력변수  |입력변수 |설명 |필수 |기본값 |  |:-----|:-----|:-----|:-----|  |from |input 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O | |  |to |output 코드 타입, ccid, entity_id, entity_name, isin 또는 short_code |O |isin | |source | 바꾸려는 코드들, list 형태 |O |isin | |universe | 0:stock, 1:future_0, 2:future_1, 3:future_spread_0 |X |isin | |date | 날짜 |X |isin |  ## 출력변수  |출력변수  |설명               |타입                 |  |:--------|:------------------|:--------------------|  |unix_timestamp||int| |code_mapped |요청한 코드 타입으로 변환한 결과, key: source (from type), value: to type of source (str) |dict |  ## Possible mapping | from\\to     | id   | isin | shortcode | entity_name | |-------------|------|------|-----------|-------------| | id          | N/A  | O    | O         | O           | | isin        | O    | N/A  | X         | O           | | shortcode   | X    | X    | N/A       | X           | | entity_name | X    | X    | X         | N/A         |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_convert_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date:
        :param str _from:
        :param str source:
        :param str to:
        :param int universe:
        :return: CodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', '_from', 'source', 'to', 'universe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_convert_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'universe' in params:
            query_params.append(('universe', params['universe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/id/convert', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
