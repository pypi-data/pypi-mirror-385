# coding: utf-8

"""
    FINTER API

    ## Finter API Document 1. Domain   - production      - https://api.finter.quantit.io/   - staging      - https://staging.api.finter.quantit.io/  2. Authorization <br><br/>(1) 토큰 발급<br/>curl -X POST https://api.finter.quantit.io/login -d {'username': '{finter_user_id}', 'password': '{finter_user_password}'<br> (2) username, password 로그인 (swagger ui 이용 시)<br/>  # noqa: E501

    OpenAPI spec version: 0.298
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from finter.api_client import ApiClient


class ProductionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def production_graph_retrieve(self, identity_name, **kwargs):  # noqa: E501
        """production_graph_retrieve  # noqa: E501

        ## 입력변수   | 입력변수          | 설명                                                                                                  | 필수  | 기본값 |  |:--------------|:----------------------------------------------------------------------------------------------------|:----|:----|  | identity_name | identity name, all level available(am, pm, fm, ffm, cm)                                             | O   |     |  | include         | model layer, `[\"meta_fund\", \"flexible_fund\", \"fund\", \"portfolio\", \"alpha\", \"content\"]` is available | X   | `[\"meta_fund\", \"flexible_fund\", \"fund\", \"portfolio\", \"alpha\", \"content\"]`    | | relation           | relationship with identity_name in Graph , `depended`: descendant, `affected`: ancestor             | O   | `[\"depended\", \"affected\"]`    | ## 출력변수  | 출력변수           |설명               |타입                 |  |:---------------|:------------------|:--------------------|  | unix_timestamp ||int| | identity_name  |CM 데이터          |string (json-string) | |                |출력값 메타 정보    |dict                 |    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.production_graph_retrieve(identity_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_name: (required)
        :param str include:
        :param str relation:
        :return: ProductionGraphResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.production_graph_retrieve_with_http_info(identity_name, **kwargs)  # noqa: E501
        else:
            (data) = self.production_graph_retrieve_with_http_info(identity_name, **kwargs)  # noqa: E501
            return data

    def production_graph_retrieve_with_http_info(self, identity_name, **kwargs):  # noqa: E501
        """production_graph_retrieve  # noqa: E501

        ## 입력변수   | 입력변수          | 설명                                                                                                  | 필수  | 기본값 |  |:--------------|:----------------------------------------------------------------------------------------------------|:----|:----|  | identity_name | identity name, all level available(am, pm, fm, ffm, cm)                                             | O   |     |  | include         | model layer, `[\"meta_fund\", \"flexible_fund\", \"fund\", \"portfolio\", \"alpha\", \"content\"]` is available | X   | `[\"meta_fund\", \"flexible_fund\", \"fund\", \"portfolio\", \"alpha\", \"content\"]`    | | relation           | relationship with identity_name in Graph , `depended`: descendant, `affected`: ancestor             | O   | `[\"depended\", \"affected\"]`    | ## 출력변수  | 출력변수           |설명               |타입                 |  |:---------------|:------------------|:--------------------|  | unix_timestamp ||int| | identity_name  |CM 데이터          |string (json-string) | |                |출력값 메타 정보    |dict                 |    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.production_graph_retrieve_with_http_info(identity_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_name: (required)
        :param str include:
        :param str relation:
        :return: ProductionGraphResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identity_name', 'include', 'relation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method production_graph_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identity_name' is set
        if ('identity_name' not in params or
                params['identity_name'] is None):
            raise ValueError("Missing the required parameter `identity_name` when calling `production_graph_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'identity_name' in params:
            query_params.append(('identity_name', params['identity_name']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/production/graph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductionGraphResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
