name: Build and publish wheels

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types:
      - published
jobs:
  build-matrix:
    strategy:
      fail-fast: False
      matrix:
        os: [ubuntu, windows]
        python-version: [3.11, 3.12, 3.13]

    name: ${{ matrix.os }} with Python ${{ matrix.python-version }} built and tests
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 20

    steps:
      # Setup the directories
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: python -m pip install toml

      - name: Setup directories
        run: |
          mkdir pycanha-project
          cd pycanha-project
          mkdir pycanha-core pycanha-core-python
        shell: bash

      - name: Check out pycanha-core-python repo
        uses: actions/checkout@v3
        with:
          path: pycanha-project/pycanha-core-python

      - name: Get version from pyproject.toml and Set Environment Variable
        run: |
          import toml
          pyproject = toml.load('pycanha-project/pycanha-core-python/pyproject.toml')
          version = ".".join(pyproject['project']['version'].split(".")[:2])
          print(f"::set-output name=version::{version}")
        shell: python
        id: get_version

      - name: Check out pycanha-core repo at version
        uses: actions/checkout@v3
        with:
          repository: pycanha-project/pycanha-core
          path: pycanha-project/pycanha-core
          ref: v${{ steps.get_version.outputs.version }}

      # Build/install pycanha-core-python bindings with test dependencies
      - name: Build pycanha-core-python
        run: |
          cd pycanha-project/pycanha-core-python
          pip install .[test,build]
        shell: bash

      # Run tests
      - name: Run tests
        run: |
          cd pycanha-project/pycanha-core-python
          pytest
        shell: bash

      # Build wheels
      - name: Build sddist and wheels
        run: |
          cd pycanha-project/pycanha-core-python
          python -m build

      # Repair wheel with auditwheel (only for Ubuntu)
      - name: Repair wheel with auditwheel
        if: matrix.os == 'ubuntu'
        run: |
          cd pycanha-project/pycanha-core-python/dist   
          # Install auditwheel
          python -m pip install auditwheel
          # Install patchelf
          sudo apt-get update
          sudo apt-get install patchelf
          # Repair the wheel
          for whl in *.whl; do
            auditwheel repair "$whl" --plat manylinux_2_34_x86_64 -w output
          done
          # Remove the original, non-repaired wheels
          rm *.whl
          # Move repaired wheels to dist for artifact upload
          mv output/* .
          rm -r output


      # Upload the artifacts wheels
      - uses: actions/upload-artifact@v4
        with:
          name: pycanha-dist-files-${{ matrix.os }}-${{ matrix.python-version }}
          path: pycanha-project/pycanha-core-python/dist/*.whl

      - name: Upload sdist
        if: matrix.os == 'ubuntu' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: pycanha-dist-files-sdist
          path: pycanha-project/pycanha-core-python/dist/*.tar.gz

  upload_pypi:
    name: Publish to PyPI
    needs: [build-matrix]
    runs-on: ubuntu-latest
    environment: 
      name: pypi
      url: https://pypi.org/p/pycanha-core
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all "pycanha-dist-files" artifacts into dist/
          pattern: pycanha-dist-files*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1

