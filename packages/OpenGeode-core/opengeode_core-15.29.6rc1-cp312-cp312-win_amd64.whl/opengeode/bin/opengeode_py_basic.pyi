"""
OpenGeode Python binding for basic
"""
from __future__ import annotations
import pybind11_stubgen.typing_ext
import typing
__all__: list[str] = ['AttributeBase', 'AttributeManager', 'AttributeProperties', 'BijectiveMappinguuid', 'CellArray1D', 'CellArray2D', 'CellArray3D', 'ConstantAttributeArrayDouble2', 'ConstantAttributeArrayDouble3', 'ConstantAttributeBool', 'ConstantAttributeDouble', 'ConstantAttributeFloat', 'ConstantAttributeInt', 'ConstantAttributeUInt', 'GLOBAL_EPSILON', 'GenericMappinguuid', 'Identifier', 'IdentifierBuilder', 'NO_ID', 'NO_LID', 'OpenGeodeBasicLibrary', 'Percentage', 'ReadOnlyAttributeArrayDouble2', 'ReadOnlyAttributeArrayDouble3', 'ReadOnlyAttributeBool', 'ReadOnlyAttributeDouble', 'ReadOnlyAttributeFloat', 'ReadOnlyAttributeInt', 'ReadOnlyAttributeUInt', 'SparseAttributeArrayDouble2', 'SparseAttributeArrayDouble3', 'SparseAttributeBool', 'SparseAttributeDouble', 'SparseAttributeFloat', 'SparseAttributeInt', 'SparseAttributeUInt', 'VariableAttributeArrayDouble2', 'VariableAttributeArrayDouble3', 'VariableAttributeBool', 'VariableAttributeDouble', 'VariableAttributeFloat', 'VariableAttributeInt', 'VariableAttributeUInt', 'ostream_redirect', 'uuid']
class AttributeBase:
    def generic_item_value(self, arg0: int, arg1: int) -> float:
        ...
    def generic_value(self, arg0: int) -> float:
        ...
    def is_genericable(self) -> bool:
        ...
    def name(self) -> str:
        ...
    def nb_items(self) -> int:
        ...
    def properties(self) -> AttributeProperties:
        ...
    def type(self) -> str:
        ...
class AttributeManager:
    def __init__(self) -> None:
        ...
    def attribute_exists(self, arg0: str) -> bool:
        ...
    def attribute_names(self) -> list[str]:
        ...
    def attribute_type(self, arg0: str) -> str:
        ...
    def clear(self) -> None:
        ...
    def clear_attributes(self) -> None:
        ...
    def delete_attribute(self, arg0: str) -> None:
        ...
    def delete_elements(self, arg0: list[bool]) -> None:
        ...
    def find_attribute_arraydouble2(self, arg0: str) -> ReadOnlyAttributeArrayDouble2:
        ...
    def find_attribute_arraydouble3(self, arg0: str) -> ReadOnlyAttributeArrayDouble3:
        ...
    def find_attribute_bool(self, arg0: str) -> ReadOnlyAttributeBool:
        ...
    def find_attribute_double(self, arg0: str) -> ReadOnlyAttributeDouble:
        ...
    def find_attribute_float(self, arg0: str) -> ReadOnlyAttributeFloat:
        ...
    def find_attribute_int(self, arg0: str) -> ReadOnlyAttributeInt:
        ...
    def find_attribute_uint(self, arg0: str) -> ReadOnlyAttributeUInt:
        ...
    def find_generic_attribute(self, arg0: str) -> AttributeBase:
        ...
    def find_or_create_attribute_constant_arraydouble2(self, arg0: str, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> ConstantAttributeArrayDouble2:
        ...
    def find_or_create_attribute_constant_arraydouble3(self, arg0: str, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> ConstantAttributeArrayDouble3:
        ...
    def find_or_create_attribute_constant_bool(self, arg0: str, arg1: bool) -> ConstantAttributeBool:
        ...
    def find_or_create_attribute_constant_double(self, arg0: str, arg1: float) -> ConstantAttributeDouble:
        ...
    def find_or_create_attribute_constant_float(self, arg0: str, arg1: float) -> ConstantAttributeFloat:
        ...
    def find_or_create_attribute_constant_int(self, arg0: str, arg1: int) -> ConstantAttributeInt:
        ...
    def find_or_create_attribute_constant_uint(self, arg0: str, arg1: int) -> ConstantAttributeUInt:
        ...
    def find_or_create_attribute_sparse_arraydouble2(self, arg0: str, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> SparseAttributeArrayDouble2:
        ...
    def find_or_create_attribute_sparse_arraydouble3(self, arg0: str, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> SparseAttributeArrayDouble3:
        ...
    def find_or_create_attribute_sparse_bool(self, arg0: str, arg1: bool) -> SparseAttributeBool:
        ...
    def find_or_create_attribute_sparse_double(self, arg0: str, arg1: float) -> SparseAttributeDouble:
        ...
    def find_or_create_attribute_sparse_float(self, arg0: str, arg1: float) -> SparseAttributeFloat:
        ...
    def find_or_create_attribute_sparse_int(self, arg0: str, arg1: int) -> SparseAttributeInt:
        ...
    def find_or_create_attribute_sparse_uint(self, arg0: str, arg1: int) -> SparseAttributeUInt:
        ...
    def find_or_create_attribute_variable_arraydouble2(self, arg0: str, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> VariableAttributeArrayDouble2:
        ...
    def find_or_create_attribute_variable_arraydouble3(self, arg0: str, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> VariableAttributeArrayDouble3:
        ...
    def find_or_create_attribute_variable_bool(self, arg0: str, arg1: bool) -> VariableAttributeBool:
        ...
    def find_or_create_attribute_variable_double(self, arg0: str, arg1: float) -> VariableAttributeDouble:
        ...
    def find_or_create_attribute_variable_float(self, arg0: str, arg1: float) -> VariableAttributeFloat:
        ...
    def find_or_create_attribute_variable_int(self, arg0: str, arg1: int) -> VariableAttributeInt:
        ...
    def find_or_create_attribute_variable_uint(self, arg0: str, arg1: int) -> VariableAttributeUInt:
        ...
    def nb_elements(self) -> int:
        ...
    def reserve(self, arg0: int) -> None:
        ...
    def resize(self, arg0: int) -> None:
        ...
    def set_attribute_properties(self, arg0: str, arg1: AttributeProperties) -> None:
        ...
class AttributeProperties:
    assignable: bool
    interpolable: bool
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: bool, arg1: bool) -> None:
        ...
class BijectiveMappinguuid:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: BijectiveMappinguuid) -> None:
        ...
    def has_mapping_input(self, arg0: uuid) -> bool:
        ...
    def has_mapping_output(self, arg0: uuid) -> bool:
        ...
    def in2out(self, arg0: uuid) -> uuid:
        ...
    def out2in(self, arg0: uuid) -> uuid:
        ...
class CellArray1D:
    def cell_index(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)]) -> int:
        ...
    def cell_indices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)]:
        ...
    def is_cell_on_border(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)]) -> bool:
        ...
    def nb_cell_neighbors(self) -> int:
        ...
    def nb_cells(self) -> int:
        ...
    def nb_cells_in_direction(self, arg0: int) -> int:
        ...
    def next_cell(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)] | None:
        ...
    def previous_cell(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)] | None:
        ...
class CellArray2D:
    def cell_index(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> int:
        ...
    def cell_indices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def is_cell_on_border(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> bool:
        ...
    def nb_cell_neighbors(self) -> int:
        ...
    def nb_cells(self) -> int:
        ...
    def nb_cells_in_direction(self, arg0: int) -> int:
        ...
    def next_cell(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)] | None:
        ...
    def previous_cell(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)] | None:
        ...
class CellArray3D:
    def cell_index(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> int:
        ...
    def cell_indices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
    def is_cell_on_border(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> bool:
        ...
    def nb_cell_neighbors(self) -> int:
        ...
    def nb_cells(self) -> int:
        ...
    def nb_cells_in_direction(self, arg0: int) -> int:
        ...
    def next_cell(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)] | None:
        ...
    def previous_cell(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)] | None:
        ...
class ConstantAttributeArrayDouble2(ReadOnlyAttributeArrayDouble2):
    def constant_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def default_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def set_value(self, arg0: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
class ConstantAttributeArrayDouble3(ReadOnlyAttributeArrayDouble3):
    def constant_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
    def default_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
    def set_value(self, arg0: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
class ConstantAttributeBool(ReadOnlyAttributeBool):
    def constant_value(self) -> bool:
        ...
    def default_value(self) -> bool:
        ...
    def set_value(self, arg0: bool) -> None:
        ...
class ConstantAttributeDouble(ReadOnlyAttributeDouble):
    def constant_value(self) -> float:
        ...
    def default_value(self) -> float:
        ...
    def set_value(self, arg0: float) -> None:
        ...
class ConstantAttributeFloat(ReadOnlyAttributeFloat):
    def constant_value(self) -> float:
        ...
    def default_value(self) -> float:
        ...
    def set_value(self, arg0: float) -> None:
        ...
class ConstantAttributeInt(ReadOnlyAttributeInt):
    def constant_value(self) -> int:
        ...
    def default_value(self) -> int:
        ...
    def set_value(self, arg0: int) -> None:
        ...
class ConstantAttributeUInt(ReadOnlyAttributeUInt):
    def constant_value(self) -> int:
        ...
    def default_value(self) -> int:
        ...
    def set_value(self, arg0: int) -> None:
        ...
class GenericMappinguuid:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: GenericMappinguuid) -> None:
        ...
    def has_mapping_input(self, arg0: uuid) -> bool:
        ...
    def has_mapping_output(self, arg0: uuid) -> bool:
        ...
    def in2out(self, arg0: uuid) -> list[uuid]:
        ...
    def out2in(self, arg0: uuid) -> list[uuid]:
        ...
class Identifier:
    def id(self) -> uuid:
        ...
    def name(self) -> str:
        ...
class IdentifierBuilder:
    def __init__(self, arg0: Identifier) -> None:
        ...
    def set_id(self, arg0: uuid) -> None:
        ...
    def set_name(self, arg0: str) -> None:
        ...
class OpenGeodeBasicLibrary:
    @staticmethod
    def initialize() -> None:
        ...
class Percentage:
    def __init__(self, arg0: float) -> None:
        ...
    def set_value(self, arg0: float) -> None:
        ...
    def string(self) -> str:
        ...
    def value(self) -> float:
        ...
class ReadOnlyAttributeArrayDouble2(AttributeBase):
    def value(self, arg0: int) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
class ReadOnlyAttributeArrayDouble3(AttributeBase):
    def value(self, arg0: int) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
class ReadOnlyAttributeBool(AttributeBase):
    def value(self, arg0: int) -> bool:
        ...
class ReadOnlyAttributeDouble(AttributeBase):
    def value(self, arg0: int) -> float:
        ...
class ReadOnlyAttributeFloat(AttributeBase):
    def value(self, arg0: int) -> float:
        ...
class ReadOnlyAttributeInt(AttributeBase):
    def value(self, arg0: int) -> int:
        ...
class ReadOnlyAttributeUInt(AttributeBase):
    def value(self, arg0: int) -> int:
        ...
class SparseAttributeArrayDouble2(ReadOnlyAttributeArrayDouble2):
    def default_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def set_value(self, arg0: int, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
class SparseAttributeArrayDouble3(ReadOnlyAttributeArrayDouble3):
    def default_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
    def set_value(self, arg0: int, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
class SparseAttributeBool(ReadOnlyAttributeBool):
    def default_value(self) -> bool:
        ...
    def set_value(self, arg0: int, arg1: bool) -> None:
        ...
class SparseAttributeDouble(ReadOnlyAttributeDouble):
    def default_value(self) -> float:
        ...
    def set_value(self, arg0: int, arg1: float) -> None:
        ...
class SparseAttributeFloat(ReadOnlyAttributeFloat):
    def default_value(self) -> float:
        ...
    def set_value(self, arg0: int, arg1: float) -> None:
        ...
class SparseAttributeInt(ReadOnlyAttributeInt):
    def default_value(self) -> int:
        ...
    def set_value(self, arg0: int, arg1: int) -> None:
        ...
class SparseAttributeUInt(ReadOnlyAttributeUInt):
    def default_value(self) -> int:
        ...
    def set_value(self, arg0: int, arg1: int) -> None:
        ...
class VariableAttributeArrayDouble2(ReadOnlyAttributeArrayDouble2):
    def default_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def set_value(self, arg0: int, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
class VariableAttributeArrayDouble3(ReadOnlyAttributeArrayDouble3):
    def default_value(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
    def set_value(self, arg0: int, arg1: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
class VariableAttributeBool(ReadOnlyAttributeBool):
    def default_value(self) -> bool:
        ...
    def set_value(self, arg0: int, arg1: bool) -> None:
        ...
class VariableAttributeDouble(ReadOnlyAttributeDouble):
    def default_value(self) -> float:
        ...
    def set_value(self, arg0: int, arg1: float) -> None:
        ...
class VariableAttributeFloat(ReadOnlyAttributeFloat):
    def default_value(self) -> float:
        ...
    def set_value(self, arg0: int, arg1: float) -> None:
        ...
class VariableAttributeInt(ReadOnlyAttributeInt):
    def default_value(self) -> int:
        ...
    def set_value(self, arg0: int, arg1: int) -> None:
        ...
class VariableAttributeUInt(ReadOnlyAttributeUInt):
    def default_value(self) -> int:
        ...
    def set_value(self, arg0: int, arg1: int) -> None:
        ...
class ostream_redirect:
    def __enter__(self) -> None:
        ...
    def __exit__(self, *args) -> None:
        ...
    def __init__(self, stdout: bool = True, stderr: bool = True) -> None:
        ...
class uuid:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: str) -> None:
        ...
    def string(self) -> str:
        ...
GLOBAL_EPSILON: float = 1e-06
NO_ID: int = 4294967295
NO_LID: int = 255
