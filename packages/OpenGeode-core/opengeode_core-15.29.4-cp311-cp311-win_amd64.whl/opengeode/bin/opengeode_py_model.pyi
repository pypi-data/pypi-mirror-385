"""
OpenGeode Python binding for model
"""
from __future__ import annotations
import opengeode.bin.opengeode_py_basic
import opengeode.bin.opengeode_py_geometry
import opengeode.bin.opengeode_py_mesh
import pybind11_stubgen.typing_ext
import typing
__all__: list[str] = ['AdditionalFileBRep', 'AdditionalFileSection', 'AdditionalFilesBRep', 'AdditionalFilesSection', 'BRep', 'BRepBuilder', 'BRepConcatener', 'BRepInputFactory', 'BRepOutputFactory', 'Block3D', 'BlockCollection2D', 'BlockCollection3D', 'BlockCollections2D', 'BlockCollections3D', 'BlockCollectionsBuilder2D', 'BlockCollectionsBuilder3D', 'BlockPolyhedraFacetVertices', 'BlockPolyhedronFacet', 'Blocks3D', 'BlocksBuilder3D', 'Component2D', 'Component3D', 'ComponentID', 'ComponentMeshElement', 'ComponentMeshVertex', 'ComponentRegistry', 'ComponentRegistryBuilder', 'ComponentType', 'Corner2D', 'Corner3D', 'CornerCollection2D', 'CornerCollection3D', 'CornerCollections2D', 'CornerCollections3D', 'CornerCollectionsBuilder2D', 'CornerCollectionsBuilder3D', 'Corners2D', 'Corners3D', 'CornersBuilder2D', 'CornersBuilder3D', 'Line2D', 'Line3D', 'LineCollection2D', 'LineCollection3D', 'LineCollections2D', 'LineCollections3D', 'LineCollectionsBuilder2D', 'LineCollectionsBuilder3D', 'Lines2D', 'Lines3D', 'LinesBuilder2D', 'LinesBuilder3D', 'ModelBoundaries2D', 'ModelBoundaries3D', 'ModelBoundariesBuilder2D', 'ModelBoundariesBuilder3D', 'ModelBoundary2D', 'ModelBoundary3D', 'ModelCopyMapping', 'ModelGenericMapping', 'OpenGeodeModelLibrary', 'Relationships', 'RelationshipsBuilder', 'Section', 'SectionBuilder', 'SectionConcatener', 'SectionExtruderOptions', 'SectionInputFactory', 'SectionOutputFactory', 'Surface2D', 'Surface3D', 'SurfaceCollection2D', 'SurfaceCollection3D', 'SurfaceCollections2D', 'SurfaceCollections3D', 'SurfaceCollectionsBuilder2D', 'SurfaceCollectionsBuilder3D', 'SurfacePolygonEdge', 'SurfacePolygonsEdgeVertices', 'Surfaces2D', 'Surfaces3D', 'SurfacesBuilder2D', 'SurfacesBuilder3D', 'Topology', 'TopologyBuilder', 'VertexIdentifier', 'VertexIdentifierBuilder', 'block_containing_point', 'block_mesh_polyhedra_from_surface_polygon', 'block_polygon_unique_vertices', 'block_vertices_from_surface_polygon', 'brep_active_coordinate_reference_systems', 'brep_additional_files', 'brep_coordinate_reference_systems', 'brep_object_priority', 'brep_oriented_surface_vertices_from_line_edge', 'brep_surface_vertices_from_line_edge', 'convert_brep_block_meshes_into_tetrahedral_solids', 'convert_brep_into_curve', 'convert_brep_into_section', 'convert_brep_into_solid', 'convert_brep_into_surface', 'convert_brep_surface_meshes_into_triangulated_surfaces', 'convert_section_into_brep', 'convert_section_into_curve', 'convert_section_into_surface', 'convert_section_surface_meshes_into_triangulated_surfaces', 'create_brep_coordinate_system', 'create_section_coordinate_system', 'extrude_section_to_brep', 'filter_brep_components_with_regards_to_blocks', 'filter_section_components_with_regards_to_surfaces', 'is_brep_loadable', 'is_brep_saveable', 'is_point_inside_block', 'is_section_loadable', 'is_section_saveable', 'load_brep', 'load_section', 'oriented_block_vertices_from_surface_polygon', 'ostream_redirect', 'save_brep', 'save_section', 'section_active_coordinate_reference_systems', 'section_additional_files', 'section_coordinate_reference_systems', 'section_object_priority', 'section_oriented_surface_vertices_from_line_edge', 'section_surface_vertices_from_line_edge', 'set_brep_active_coordinate_system', 'set_section_active_coordinate_system', 'surface_polygon_unique_vertices', 'triangulate_brep_surface_meshes', 'triangulate_section_surface_meshes']
class AdditionalFileBRep:
    filename: str
    is_missing: bool
class AdditionalFileSection:
    filename: str
    is_missing: bool
class AdditionalFilesBRep:
    mandatory_files: list[AdditionalFileBRep]
    optional_files: list[AdditionalFileBRep]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesSection:
    mandatory_files: list[AdditionalFileSection]
    optional_files: list[AdditionalFileSection]
    def has_additional_files(self) -> bool:
        ...
class BRep(Topology, Corners3D, Lines3D, Surfaces3D, Blocks3D, ModelBoundaries3D, CornerCollections3D, LineCollections3D, SurfaceCollections3D, BlockCollections3D, opengeode.bin.opengeode_py_basic.Identifier):
    def __init__(self) -> None:
        ...
    def block_collection_items(self, arg0: BlockCollection3D) -> list[Block3D]:
        ...
    def boundary_corners(self, arg0: Line3D) -> list[Corner3D]:
        ...
    def boundary_lines(self, arg0: Surface3D) -> list[Line3D]:
        ...
    def boundary_surfaces(self, arg0: Block3D) -> list[Surface3D]:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox3D:
        ...
    def brep_component(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Component3D:
        ...
    def corner_collection_items(self, arg0: CornerCollection3D) -> list[Corner3D]:
        ...
    def embedding_blocks_of_corner(self, arg0: Corner3D) -> list[Block3D]:
        ...
    def embedding_blocks_of_line(self, arg0: Line3D) -> list[Block3D]:
        ...
    def embedding_blocks_of_surface(self, arg0: Surface3D) -> list[Block3D]:
        ...
    def embedding_surfaces_of_corner(self, arg0: Corner3D) -> list[Surface3D]:
        ...
    def embedding_surfaces_of_line(self, arg0: Line3D) -> list[Surface3D]:
        ...
    def incident_blocks(self, arg0: Surface3D) -> list[Block3D]:
        ...
    def incident_lines(self, arg0: Corner3D) -> list[Line3D]:
        ...
    def incident_surfaces(self, arg0: Line3D) -> list[Surface3D]:
        ...
    def internal_corners_of_block(self, arg0: Block3D) -> list[Corner3D]:
        ...
    def internal_corners_of_surface(self, arg0: Surface3D) -> list[Corner3D]:
        ...
    def internal_lines_of_block(self, arg0: Block3D) -> list[Line3D]:
        ...
    def internal_lines_of_surface(self, arg0: Surface3D) -> list[Line3D]:
        ...
    def internal_surfaces_of_block(self, arg0: Block3D) -> list[Surface3D]:
        ...
    def is_block_boundary(self, arg0: Surface3D, arg1: Block3D) -> bool:
        ...
    def is_block_collection_item(self, arg0: Block3D, arg1: BlockCollection3D) -> bool:
        ...
    def is_corner_collection_item(self, arg0: Corner3D, arg1: CornerCollection3D) -> bool:
        ...
    def is_corner_in_block_internals(self, arg0: Corner3D, arg1: Block3D) -> bool:
        ...
    def is_corner_in_surface_internals(self, arg0: Corner3D, arg1: Surface3D) -> bool:
        ...
    def is_line_boundary(self, arg0: Corner3D, arg1: Line3D) -> bool:
        ...
    def is_line_closed(self, arg0: Line3D) -> bool:
        ...
    def is_line_collection_item(self, arg0: Line3D, arg1: LineCollection3D) -> bool:
        ...
    def is_line_in_block_internals(self, arg0: Line3D, arg1: Block3D) -> bool:
        ...
    def is_line_in_surface_internals(self, arg0: Line3D, arg1: Surface3D) -> bool:
        ...
    def is_model_boundary_item(self, arg0: Surface3D, arg1: ModelBoundary3D) -> bool:
        ...
    def is_surface_boundary(self, arg0: Line3D, arg1: Surface3D) -> bool:
        ...
    def is_surface_closed(self, arg0: Surface3D) -> bool:
        ...
    def is_surface_collection_item(self, arg0: Surface3D, arg1: SurfaceCollection3D) -> bool:
        ...
    def is_surface_in_block_internals(self, arg0: Surface3D, arg1: Block3D) -> bool:
        ...
    def line_collection_items(self, arg0: LineCollection3D) -> list[Line3D]:
        ...
    def model_boundary_items(self, arg0: ModelBoundary3D) -> list[Surface3D]:
        ...
    def native_extension(self) -> str:
        ...
    def nb_embedding_blocks_of_corner(self, arg0: Corner3D) -> int:
        ...
    def nb_embedding_blocks_of_line(self, arg0: Line3D) -> int:
        ...
    def nb_embedding_blocks_of_surface(self, arg0: Surface3D) -> int:
        ...
    def nb_embedding_surfaces_of_corner(self, arg0: Corner3D) -> int:
        ...
    def nb_embedding_surfaces_of_line(self, arg0: Line3D) -> int:
        ...
    def nb_internal_corners_of_block(self, arg0: Block3D) -> int:
        ...
    def nb_internal_corners_of_surface(self, arg0: Surface3D) -> int:
        ...
    def nb_internal_lines_of_block(self, arg0: Block3D) -> int:
        ...
    def nb_internal_lines_of_surface(self, arg0: Surface3D) -> int:
        ...
    def nb_internal_surfaces_of_block(self, arg0: Block3D) -> int:
        ...
    def surface_collection_items(self, arg0: SurfaceCollection3D) -> list[Surface3D]:
        ...
class BRepBuilder(TopologyBuilder, CornersBuilder3D, LinesBuilder3D, SurfacesBuilder3D, BlocksBuilder3D, ModelBoundariesBuilder3D, CornerCollectionsBuilder3D, LineCollectionsBuilder3D, SurfaceCollectionsBuilder3D, BlockCollectionsBuilder3D, opengeode.bin.opengeode_py_basic.IdentifierBuilder):
    def __init__(self, arg0: BRep) -> None:
        ...
    def add_block(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_block_collection(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_block_in_block_collection(self, arg0: Block3D, arg1: BlockCollection3D) -> None:
        ...
    def add_corner(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_corner_block_internal_relationship(self, arg0: Corner3D, arg1: Block3D) -> None:
        ...
    def add_corner_collection(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_corner_in_corner_collection(self, arg0: Corner3D, arg1: CornerCollection3D) -> None:
        ...
    def add_corner_line_boundary_relationship(self, arg0: Corner3D, arg1: Line3D) -> None:
        ...
    def add_corner_surface_internal_relationship(self, arg0: Corner3D, arg1: Surface3D) -> None:
        ...
    def add_line(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_line_block_internal_relationship(self, arg0: Line3D, arg1: Block3D) -> None:
        ...
    def add_line_collection(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_line_in_line_collection(self, arg0: Line3D, arg1: LineCollection3D) -> None:
        ...
    def add_line_surface_boundary_relationship(self, arg0: Line3D, arg1: Surface3D) -> None:
        ...
    def add_line_surface_internal_relationship(self, arg0: Line3D, arg1: Surface3D) -> None:
        ...
    def add_model_boundary(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_surface(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_surface_block_boundary_relationship(self, arg0: Surface3D, arg1: Block3D) -> None:
        ...
    def add_surface_block_internal_relationship(self, arg0: Surface3D, arg1: Block3D) -> None:
        ...
    def add_surface_collection(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_surface_in_model_boundary(self, arg0: Surface3D, arg1: ModelBoundary3D) -> None:
        ...
    def add_surface_in_surface_collection(self, arg0: Surface3D, arg1: SurfaceCollection3D) -> None:
        ...
    def copy(self, arg0: BRep) -> ModelCopyMapping:
        ...
    def remove_block(self, arg0: Block3D) -> None:
        ...
    def remove_block_collection(self, arg0: BlockCollection3D) -> None:
        ...
    def remove_corner(self, arg0: Corner3D) -> None:
        ...
    def remove_corner_collection(self, arg0: CornerCollection3D) -> None:
        ...
    def remove_line(self, arg0: Line3D) -> None:
        ...
    def remove_line_collection(self, arg0: LineCollection3D) -> None:
        ...
    def remove_model_boundary(self, arg0: ModelBoundary3D) -> None:
        ...
    def remove_surface(self, arg0: Surface3D) -> None:
        ...
    def remove_surface_collection(self, arg0: SurfaceCollection3D) -> None:
        ...
class BRepConcatener:
    def __init__(self, arg0: BRep) -> None:
        ...
    def concatenate(self, arg0: BRep) -> ModelCopyMapping:
        ...
class BRepInputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class BRepOutputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class Block3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
    def hybrid_mesh(self) -> opengeode.bin.opengeode_py_mesh.HybridSolid3D:
        ...
    def mesh(self) -> opengeode.bin.opengeode_py_mesh.SolidMesh3D:
        ...
    def polyhedral_mesh(self) -> opengeode.bin.opengeode_py_mesh.PolyhedralSolid3D:
        ...
    def tetrahedral_mesh(self) -> opengeode.bin.opengeode_py_mesh.TetrahedralSolid3D:
        ...
class BlockCollection2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class BlockCollection3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class BlockCollections2D:
    def block_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> BlockCollection2D:
        ...
    def block_collections(self) -> list[BlockCollection2D]:
        ...
    def nb_block_collections(self) -> int:
        ...
class BlockCollections3D:
    def block_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> BlockCollection3D:
        ...
    def block_collections(self) -> list[BlockCollection3D]:
        ...
    def nb_block_collections(self) -> int:
        ...
class BlockCollectionsBuilder2D:
    def set_block_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class BlockCollectionsBuilder3D:
    def set_block_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class BlockPolyhedraFacetVertices:
    opposite_polyhedron_facet: BlockPolyhedronFacet | None
    oriented_polyhedron_facet: BlockPolyhedronFacet | None
    def __init__(self) -> None:
        ...
    def nb_facets(self) -> int:
        ...
class BlockPolyhedronFacet:
    facet: opengeode.bin.opengeode_py_mesh.PolyhedronFacet
    vertices: list[int]
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: opengeode.bin.opengeode_py_mesh.PolyhedronFacet) -> None:
        ...
class Blocks3D:
    def block(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Block3D:
        ...
    def blocks(self) -> list[Block3D]:
        ...
    def nb_blocks(self) -> int:
        ...
class BlocksBuilder3D:
    def block_mesh_builder(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> opengeode.bin.opengeode_py_mesh.SolidMeshBuilder3D:
        ...
    def set_block_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class Component2D(opengeode.bin.opengeode_py_basic.Identifier):
    def component_type(self) -> ComponentType:
        ...
class Component3D(opengeode.bin.opengeode_py_basic.Identifier):
    def component_type(self) -> ComponentType:
        ...
class ComponentID:
    __hash__: typing.ClassVar[None] = None
    def __eq__(self, arg0: ComponentID) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: ComponentType, arg1: opengeode.bin.opengeode_py_basic.uuid) -> None:
        ...
    def __ne__(self, arg0: ComponentID) -> bool:
        ...
    def id(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def string(self) -> str:
        ...
    def type(self) -> ComponentType:
        ...
class ComponentMeshElement:
    def __init__(self, arg0: ComponentID, arg1: int) -> None:
        ...
    def string(self) -> str:
        ...
class ComponentMeshVertex:
    __hash__: typing.ClassVar[None] = None
    component_id: ComponentID
    vertex: int
    def __eq__(self, arg0: ComponentMeshVertex) -> bool:
        ...
    def __init__(self, arg0: ComponentID, arg1: int) -> None:
        ...
    def string(self) -> str:
        ...
class ComponentRegistry:
    def __init__(self) -> None:
        ...
    def collection_components(self) -> dict[ComponentType, list[opengeode.bin.opengeode_py_basic.uuid]]:
        ...
    def mesh_components(self) -> dict[ComponentType, list[opengeode.bin.opengeode_py_basic.uuid]]:
        ...
class ComponentRegistryBuilder:
    def __init__(self, arg0: ComponentRegistry) -> None:
        ...
    def add_collection_component(self, arg0: ComponentType, arg1: opengeode.bin.opengeode_py_basic.uuid) -> None:
        ...
    def add_mesh_component(self, arg0: ComponentType, arg1: opengeode.bin.opengeode_py_basic.uuid) -> None:
        ...
    def remove_collection_component(self, arg0: ComponentType, arg1: opengeode.bin.opengeode_py_basic.uuid) -> None:
        ...
    def remove_mesh_component(self, arg0: ComponentType, arg1: opengeode.bin.opengeode_py_basic.uuid) -> None:
        ...
class ComponentType:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: str) -> None:
        ...
    def get(self) -> str:
        ...
    def matches(self, arg0: ComponentType) -> bool:
        ...
class Corner2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
    def mesh(self) -> opengeode.bin.opengeode_py_mesh.PointSet2D:
        ...
class Corner3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
    def mesh(self) -> opengeode.bin.opengeode_py_mesh.PointSet3D:
        ...
class CornerCollection2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class CornerCollection3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class CornerCollections2D:
    def corner_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> CornerCollection2D:
        ...
    def corner_collections(self) -> list[CornerCollection2D]:
        ...
    def nb_corner_collections(self) -> int:
        ...
class CornerCollections3D:
    def corner_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> CornerCollection3D:
        ...
    def corner_collections(self) -> list[CornerCollection3D]:
        ...
    def nb_corner_collections(self) -> int:
        ...
class CornerCollectionsBuilder2D:
    def set_corner_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class CornerCollectionsBuilder3D:
    def set_corner_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class Corners2D:
    def corner(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Corner2D:
        ...
    def corners(self) -> list[Corner2D]:
        ...
    def nb_corners(self) -> int:
        ...
class Corners3D:
    def corner(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Corner3D:
        ...
    def corners(self) -> list[Corner3D]:
        ...
    def nb_corners(self) -> int:
        ...
class CornersBuilder2D:
    def corner_mesh_builder(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> opengeode.bin.opengeode_py_mesh.PointSetBuilder2D:
        ...
    def set_corner_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class CornersBuilder3D:
    def corner_mesh_builder(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> opengeode.bin.opengeode_py_mesh.PointSetBuilder3D:
        ...
    def set_corner_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class Line2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
    def mesh(self) -> opengeode.bin.opengeode_py_mesh.EdgedCurve2D:
        ...
class Line3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
    def mesh(self) -> opengeode.bin.opengeode_py_mesh.EdgedCurve3D:
        ...
class LineCollection2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class LineCollection3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class LineCollections2D:
    def line_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> LineCollection2D:
        ...
    def line_collections(self) -> list[LineCollection2D]:
        ...
    def nb_line_collections(self) -> int:
        ...
class LineCollections3D:
    def line_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> LineCollection3D:
        ...
    def line_collections(self) -> list[LineCollection3D]:
        ...
    def nb_line_collections(self) -> int:
        ...
class LineCollectionsBuilder2D:
    def set_line_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class LineCollectionsBuilder3D:
    def set_line_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class Lines2D:
    def line(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Line2D:
        ...
    def lines(self) -> list[Line2D]:
        ...
    def nb_lines(self) -> int:
        ...
class Lines3D:
    def line(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Line3D:
        ...
    def lines(self) -> list[Line3D]:
        ...
    def nb_lines(self) -> int:
        ...
class LinesBuilder2D:
    def line_mesh_builder(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> opengeode.bin.opengeode_py_mesh.EdgedCurveBuilder2D:
        ...
    def set_line_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class LinesBuilder3D:
    def line_mesh_builder(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> opengeode.bin.opengeode_py_mesh.EdgedCurveBuilder3D:
        ...
    def set_line_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class ModelBoundaries2D:
    def model_boundaries(self) -> list[ModelBoundary2D]:
        ...
    def model_boundary(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> ModelBoundary2D:
        ...
    def nb_model_boundaries(self) -> int:
        ...
class ModelBoundaries3D:
    def model_boundaries(self) -> list[ModelBoundary3D]:
        ...
    def model_boundary(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> ModelBoundary3D:
        ...
    def nb_model_boundaries(self) -> int:
        ...
class ModelBoundariesBuilder2D:
    def set_model_boundary_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class ModelBoundariesBuilder3D:
    def set_model_boundary_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class ModelBoundary2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class ModelBoundary3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class ModelCopyMapping:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: ModelCopyMapping) -> None:
        ...
    def at(self, arg0: ComponentType) -> opengeode.bin.opengeode_py_basic.BijectiveMappinguuid:
        ...
class ModelGenericMapping:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: ModelGenericMapping) -> None:
        ...
    def at(self, arg0: ComponentType) -> opengeode.bin.opengeode_py_basic.GenericMappinguuid:
        ...
class OpenGeodeModelLibrary:
    @staticmethod
    def initialize() -> None:
        ...
class Relationships:
    def __init__(self) -> None:
        ...
    def boundaries(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> list[ComponentID]:
        ...
    def collections(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> list[ComponentID]:
        ...
    def embeddings(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> list[ComponentID]:
        ...
    def incidences(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> list[ComponentID]:
        ...
    def internals(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> list[ComponentID]:
        ...
    def is_boundary(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: opengeode.bin.opengeode_py_basic.uuid) -> bool:
        ...
    def is_internal(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: opengeode.bin.opengeode_py_basic.uuid) -> bool:
        ...
    def is_item(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: opengeode.bin.opengeode_py_basic.uuid) -> bool:
        ...
    def items(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> list[ComponentID]:
        ...
    def nb_boundaries(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> int:
        ...
    def nb_collections(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> int:
        ...
    def nb_embeddings(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> int:
        ...
    def nb_incidences(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> int:
        ...
    def nb_internals(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> int:
        ...
    def nb_items(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> int:
        ...
class RelationshipsBuilder:
    def __init__(self, arg0: Relationships) -> None:
        ...
    def add_boundary_relation(self, arg0: ComponentID, arg1: ComponentID) -> int:
        ...
    def add_internal_relation(self, arg0: ComponentID, arg1: ComponentID) -> int:
        ...
    def add_item_in_collection(self, arg0: ComponentID, arg1: ComponentID) -> int:
        ...
    def unregister_component(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> None:
        ...
class Section(Topology, Corners2D, Lines2D, Surfaces2D, ModelBoundaries2D, CornerCollections2D, LineCollections2D, SurfaceCollections2D, opengeode.bin.opengeode_py_basic.Identifier):
    def __init__(self) -> None:
        ...
    def boundary_corners(self, arg0: Line2D) -> list[Corner2D]:
        ...
    def boundary_lines(self, arg0: Surface2D) -> list[Line2D]:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox2D:
        ...
    def corner_collection_items(self, arg0: CornerCollection2D) -> list[Corner2D]:
        ...
    def embedding_surfaces_of_corner(self, arg0: Corner2D) -> list[Surface2D]:
        ...
    def embedding_surfaces_of_line(self, arg0: Line2D) -> list[Surface2D]:
        ...
    def incident_lines(self, arg0: Corner2D) -> list[Line2D]:
        ...
    def incident_surfaces(self, arg0: Line2D) -> list[Surface2D]:
        ...
    def internal_corners_of_surface(self, arg0: Surface2D) -> list[Corner2D]:
        ...
    def internal_lines_of_surface(self, arg0: Surface2D) -> list[Line2D]:
        ...
    def is_corner_collection_item(self, arg0: Corner2D, arg1: CornerCollection2D) -> bool:
        ...
    def is_corner_in_surface_internals(self, arg0: Corner2D, arg1: Surface2D) -> bool:
        ...
    def is_line_boundary(self, arg0: Corner2D, arg1: Line2D) -> bool:
        ...
    def is_line_closed(self, arg0: Line2D) -> bool:
        ...
    def is_line_collection_item(self, arg0: Line2D, arg1: LineCollection2D) -> bool:
        ...
    def is_line_in_surface_internals(self, arg0: Line2D, arg1: Surface2D) -> bool:
        ...
    def is_model_boundary_item(self, arg0: Line2D, arg1: ModelBoundary2D) -> bool:
        ...
    def is_surface_boundary(self, arg0: Line2D, arg1: Surface2D) -> bool:
        ...
    def is_surface_collection_item(self, arg0: Surface2D, arg1: SurfaceCollection2D) -> bool:
        ...
    def line_collection_items(self, arg0: LineCollection2D) -> list[Line2D]:
        ...
    def model_boundary_items(self, arg0: ModelBoundary2D) -> list[Line2D]:
        ...
    def native_extension(self) -> str:
        ...
    def nb_embedding_surfaces_of_corner(self, arg0: Corner2D) -> int:
        ...
    def nb_embedding_surfaces_of_line(self, arg0: Line2D) -> int:
        ...
    def nb_internal_corners_of_surface(self, arg0: Surface2D) -> int:
        ...
    def nb_internal_lines_of_surface(self, arg0: Surface2D) -> int:
        ...
    def section_component(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Component2D:
        ...
    def surface_collection_items(self, arg0: SurfaceCollection2D) -> list[Surface2D]:
        ...
class SectionBuilder(TopologyBuilder, CornersBuilder2D, LinesBuilder2D, SurfacesBuilder2D, ModelBoundariesBuilder2D, CornerCollectionsBuilder2D, LineCollectionsBuilder2D, SurfaceCollectionsBuilder2D, opengeode.bin.opengeode_py_basic.IdentifierBuilder):
    def __init__(self, arg0: Section) -> None:
        ...
    def add_corner(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_corner_collection(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_corner_in_corner_collection(self, arg0: Corner2D, arg1: CornerCollection2D) -> None:
        ...
    def add_corner_line_boundary_relationship(self, arg0: Corner2D, arg1: Line2D) -> None:
        ...
    def add_corner_surface_internal_relationship(self, arg0: Corner2D, arg1: Surface2D) -> None:
        ...
    def add_line(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_line_collection(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_line_in_line_collection(self, arg0: Line2D, arg1: LineCollection2D) -> None:
        ...
    def add_line_in_model_boundary(self, arg0: Line2D, arg1: ModelBoundary2D) -> None:
        ...
    def add_line_surface_boundary_relationship(self, arg0: Line2D, arg1: Surface2D) -> None:
        ...
    def add_line_surface_internal_relationship(self, arg0: Line2D, arg1: Surface2D) -> None:
        ...
    def add_model_boundary(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_surface(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_surface_collection(self) -> opengeode.bin.opengeode_py_basic.uuid:
        ...
    def add_surface_in_surface_collection(self, arg0: Surface2D, arg1: SurfaceCollection2D) -> None:
        ...
    def copy(self, arg0: Section) -> ModelCopyMapping:
        ...
    def remove_corner(self, arg0: Corner2D) -> None:
        ...
    def remove_corner_collection(self, arg0: CornerCollection2D) -> None:
        ...
    def remove_line(self, arg0: Line2D) -> None:
        ...
    def remove_line_collection(self, arg0: LineCollection2D) -> None:
        ...
    def remove_model_boundary(self, arg0: ModelBoundary2D) -> None:
        ...
    def remove_surface(self, arg0: Surface2D) -> None:
        ...
    def remove_surface_collection(self, arg0: SurfaceCollection2D) -> None:
        ...
class SectionConcatener:
    def __init__(self, arg0: Section) -> None:
        ...
    def concatenate(self, arg0: Section) -> ModelCopyMapping:
        ...
class SectionExtruderOptions:
    axis_to_extrude: int
    max_coordinate: float
    min_coordinate: float
    def __init__(self) -> None:
        ...
class SectionInputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class SectionOutputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class Surface2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
    def mesh(self) -> opengeode.bin.opengeode_py_mesh.SurfaceMesh2D:
        ...
    def polygonal_mesh(self) -> opengeode.bin.opengeode_py_mesh.PolygonalSurface2D:
        ...
    def triangulated_mesh(self) -> opengeode.bin.opengeode_py_mesh.TriangulatedSurface2D:
        ...
class Surface3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
    def mesh(self) -> opengeode.bin.opengeode_py_mesh.SurfaceMesh3D:
        ...
    def polygonal_mesh(self) -> opengeode.bin.opengeode_py_mesh.PolygonalSurface3D:
        ...
    def triangulated_mesh(self) -> opengeode.bin.opengeode_py_mesh.TriangulatedSurface3D:
        ...
class SurfaceCollection2D(Component2D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class SurfaceCollection3D(Component3D):
    @staticmethod
    def component_type_static() -> ComponentType:
        ...
    def component_id(self) -> ComponentID:
        ...
class SurfaceCollections2D:
    def nb_surface_collections(self) -> int:
        ...
    def surface_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> SurfaceCollection2D:
        ...
    def surface_collections(self) -> list[SurfaceCollection2D]:
        ...
class SurfaceCollections3D:
    def nb_surface_collections(self) -> int:
        ...
    def surface_collection(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> SurfaceCollection3D:
        ...
    def surface_collections(self) -> list[SurfaceCollection3D]:
        ...
class SurfaceCollectionsBuilder2D:
    def set_surface_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class SurfaceCollectionsBuilder3D:
    def set_surface_collection_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
class SurfacePolygonEdge:
    facet: opengeode.bin.opengeode_py_mesh.PolygonEdge
    vertices: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: opengeode.bin.opengeode_py_mesh.PolygonEdge) -> None:
        ...
class SurfacePolygonsEdgeVertices:
    opposite_edge: SurfacePolygonEdge | None
    oriented_edge: SurfacePolygonEdge | None
    def __init__(self) -> None:
        ...
    def nb_edges(self) -> int:
        ...
class Surfaces2D:
    def nb_surfaces(self) -> int:
        ...
    def surface(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Surface2D:
        ...
    def surfaces(self) -> list[Surface2D]:
        ...
class Surfaces3D:
    def nb_surfaces(self) -> int:
        ...
    def surface(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> Surface3D:
        ...
    def surfaces(self) -> list[Surface3D]:
        ...
class SurfacesBuilder2D:
    def set_surface_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
    def surface_mesh_builder(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> opengeode.bin.opengeode_py_mesh.SurfaceMeshBuilder2D:
        ...
class SurfacesBuilder3D:
    def set_surface_name(self, arg0: opengeode.bin.opengeode_py_basic.uuid, arg1: str) -> None:
        ...
    def surface_mesh_builder(self, arg0: opengeode.bin.opengeode_py_basic.uuid) -> opengeode.bin.opengeode_py_mesh.SurfaceMeshBuilder3D:
        ...
class Topology(Relationships, VertexIdentifier, ComponentRegistry):
    pass
class TopologyBuilder(RelationshipsBuilder, VertexIdentifierBuilder, ComponentRegistryBuilder):
    pass
class VertexIdentifier:
    def __init__(self) -> None:
        ...
    def component_mesh_vertices(self, arg0: int) -> list[ComponentMeshVertex]:
        ...
    def nb_unique_vertices(self) -> int:
        ...
    def unique_vertex(self, arg0: ComponentMeshVertex) -> int:
        ...
class VertexIdentifierBuilder:
    def __init__(self, arg0: VertexIdentifier) -> None:
        ...
    def create_unique_vertex(self) -> int:
        ...
    def create_unique_vertices(self, arg0: int) -> int:
        ...
    def delete_isolated_vertices(self) -> list[int]:
        ...
    def register_block3D_component(self, arg0: Block3D) -> None:
        ...
    def register_corner2D_component(self, arg0: Corner2D) -> None:
        ...
    def register_corner3D_component(self, arg0: Corner3D) -> None:
        ...
    def register_line2D_component(self, arg0: Line2D) -> None:
        ...
    def register_line3D_component(self, arg0: Line3D) -> None:
        ...
    def register_surface2D_component(self, arg0: Surface2D) -> None:
        ...
    def register_surface3D_component(self, arg0: Surface3D) -> None:
        ...
    def set_unique_vertex(self, arg0: ComponentMeshVertex, arg1: int) -> None:
        ...
    def unregister_block3D_component(self, arg0: Block3D) -> None:
        ...
    def unregister_corner2D_component(self, arg0: Corner2D) -> None:
        ...
    def unregister_corner3D_component(self, arg0: Corner3D) -> None:
        ...
    def unregister_line2D_component(self, arg0: Line2D) -> None:
        ...
    def unregister_line3D_component(self, arg0: Line3D) -> None:
        ...
    def unregister_surface2D_component(self, arg0: Surface2D) -> None:
        ...
    def unregister_surface3D_component(self, arg0: Surface3D) -> None:
        ...
    def update_unique_vertices(self, arg0: ComponentID, arg1: list[int]) -> None:
        ...
class ostream_redirect:
    def __enter__(self) -> None:
        ...
    def __exit__(self, *args) -> None:
        ...
    def __init__(self, stdout: bool = True, stderr: bool = True) -> None:
        ...
def block_containing_point(arg0: BRep, arg1: opengeode.bin.opengeode_py_geometry.Point3D) -> opengeode.bin.opengeode_py_basic.uuid | None:
    ...
def block_mesh_polyhedra_from_surface_polygon(arg0: BRep, arg1: Block3D, arg2: Surface3D, arg3: int) -> list[opengeode.bin.opengeode_py_mesh.PolyhedronFacet]:
    ...
def block_polygon_unique_vertices(arg0: BRep, arg1: Block3D, arg2: opengeode.bin.opengeode_py_mesh.PolyhedronFacet) -> list[int]:
    ...
def block_vertices_from_surface_polygon(arg0: BRep, arg1: Block3D, arg2: Surface3D, arg3: int) -> list[BlockPolyhedronFacet]:
    ...
def brep_active_coordinate_reference_systems(arg0: BRep) -> list[tuple[opengeode.bin.opengeode_py_mesh.CRSType, str]]:
    ...
def brep_additional_files(arg0: str) -> AdditionalFilesBRep:
    ...
def brep_coordinate_reference_systems(arg0: BRep) -> list[tuple[opengeode.bin.opengeode_py_mesh.CRSType, str]]:
    ...
def brep_object_priority(arg0: str) -> int:
    ...
def brep_oriented_surface_vertices_from_line_edge(arg0: BRep, arg1: Surface3D, arg2: Line3D, arg3: int) -> SurfacePolygonsEdgeVertices:
    ...
def brep_surface_vertices_from_line_edge(arg0: BRep, arg1: Surface3D, arg2: Line3D, arg3: int) -> list[SurfacePolygonEdge]:
    ...
def convert_brep_block_meshes_into_tetrahedral_solids(arg0: BRep) -> None:
    ...
def convert_brep_into_curve(arg0: BRep) -> opengeode.bin.opengeode_py_mesh.EdgedCurve3D:
    ...
def convert_brep_into_section(arg0: BRep, arg1: int) -> tuple[Section, ModelCopyMapping]:
    ...
def convert_brep_into_solid(arg0: BRep) -> opengeode.bin.opengeode_py_mesh.SolidMesh3D:
    ...
def convert_brep_into_surface(arg0: BRep) -> opengeode.bin.opengeode_py_mesh.SurfaceMesh3D:
    ...
def convert_brep_surface_meshes_into_triangulated_surfaces(arg0: BRep) -> None:
    ...
def convert_section_into_brep(arg0: Section, arg1: int, arg2: float) -> tuple[BRep, ModelCopyMapping]:
    ...
def convert_section_into_curve(arg0: Section) -> opengeode.bin.opengeode_py_mesh.EdgedCurve2D:
    ...
def convert_section_into_surface(arg0: Section) -> opengeode.bin.opengeode_py_mesh.SurfaceMesh2D:
    ...
def convert_section_surface_meshes_into_triangulated_surfaces(arg0: Section) -> None:
    ...
def create_brep_coordinate_system(arg0: BRep, arg1: BRepBuilder, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def create_section_coordinate_system(arg0: Section, arg1: SectionBuilder, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def extrude_section_to_brep(arg0: Section, arg1: SectionExtruderOptions) -> BRep:
    ...
def filter_brep_components_with_regards_to_blocks(arg0: BRep) -> list[ComponentID]:
    ...
def filter_section_components_with_regards_to_surfaces(arg0: Section) -> list[ComponentID]:
    ...
def is_brep_loadable(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_brep_saveable(arg0: BRep, arg1: str) -> bool:
    ...
def is_point_inside_block(arg0: BRep, arg1: Block3D, arg2: opengeode.bin.opengeode_py_geometry.Point3D) -> bool:
    ...
def is_section_loadable(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_section_saveable(arg0: Section, arg1: str) -> bool:
    ...
def load_brep(arg0: str) -> BRep:
    ...
def load_section(arg0: str) -> Section:
    ...
def oriented_block_vertices_from_surface_polygon(arg0: BRep, arg1: Block3D, arg2: Surface3D, arg3: int) -> BlockPolyhedraFacetVertices:
    ...
def save_brep(arg0: BRep, arg1: str) -> list[str]:
    ...
def save_section(arg0: Section, arg1: str) -> list[str]:
    ...
def section_active_coordinate_reference_systems(arg0: Section) -> list[tuple[opengeode.bin.opengeode_py_mesh.CRSType, str]]:
    ...
def section_additional_files(arg0: str) -> AdditionalFilesSection:
    ...
def section_coordinate_reference_systems(arg0: Section) -> list[tuple[opengeode.bin.opengeode_py_mesh.CRSType, str]]:
    ...
def section_object_priority(arg0: str) -> int:
    ...
def section_oriented_surface_vertices_from_line_edge(arg0: Section, arg1: Surface2D, arg2: Line2D, arg3: int) -> SurfacePolygonsEdgeVertices:
    ...
def section_surface_vertices_from_line_edge(arg0: Section, arg1: Surface2D, arg2: Line2D, arg3: int) -> list[SurfacePolygonEdge]:
    ...
def set_brep_active_coordinate_system(arg0: BRep, arg1: BRepBuilder, arg2: str) -> None:
    ...
def set_section_active_coordinate_system(arg0: Section, arg1: SectionBuilder, arg2: str) -> None:
    ...
def surface_polygon_unique_vertices(arg0: BRep, arg1: Surface3D, arg2: int) -> list[int]:
    ...
def triangulate_brep_surface_meshes(arg0: BRep) -> None:
    ...
def triangulate_section_surface_meshes(arg0: Section) -> None:
    ...
