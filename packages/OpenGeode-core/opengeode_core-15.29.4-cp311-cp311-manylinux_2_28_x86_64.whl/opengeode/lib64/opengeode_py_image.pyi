"""
OpenGeode Python binding for image
"""
from __future__ import annotations
import opengeode.lib64.opengeode_py_basic
import pybind11_stubgen.typing_ext
import typing
__all__: list[str] = ['AdditionalFileRasterImage2D', 'AdditionalFileRasterImage3D', 'AdditionalFilesRasterImage2D', 'AdditionalFilesRasterImage3D', 'GreyscaleColor', 'OpenGeodeImageLibrary', 'RGBColor', 'RasterImage1D', 'RasterImage2D', 'RasterImage3D', 'RasterImageInputFactory2D', 'RasterImageInputFactory3D', 'RasterImageOutputFactory2D', 'RasterImageOutputFactory3D', 'is_raster_image_loadable2D', 'is_raster_image_loadable3D', 'is_raster_image_saveable2D', 'is_raster_image_saveable3D', 'load_raster_image2D', 'load_raster_image3D', 'ostream_redirect', 'raster_image_additional_files2D', 'raster_image_additional_files3D', 'raster_image_object_priority2D', 'raster_image_object_priority3D', 'save_raster_image2D', 'save_raster_image3D']
class AdditionalFileRasterImage2D:
    filename: str
    is_missing: bool
class AdditionalFileRasterImage3D:
    filename: str
    is_missing: bool
class AdditionalFilesRasterImage2D:
    mandatory_files: list[AdditionalFileRasterImage2D]
    optional_files: list[AdditionalFileRasterImage2D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesRasterImage3D:
    mandatory_files: list[AdditionalFileRasterImage3D]
    optional_files: list[AdditionalFileRasterImage3D]
    def has_additional_files(self) -> bool:
        ...
class GreyscaleColor:
    __hash__: typing.ClassVar[None] = None
    def __add__(self, arg0: GreyscaleColor) -> GreyscaleColor:
        ...
    def __eq__(self, arg0: GreyscaleColor) -> bool:
        ...
    def __iadd__(self, arg0: GreyscaleColor) -> None:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int) -> None:
        ...
    def __ne__(self, arg0: GreyscaleColor) -> bool:
        ...
    def set_value(self, arg0: int) -> None:
        ...
    def string(self) -> str:
        ...
    def value(self) -> int:
        ...
class OpenGeodeImageLibrary:
    @staticmethod
    def initialize() -> None:
        ...
class RGBColor:
    __hash__: typing.ClassVar[None] = None
    def __add__(self, arg0: RGBColor) -> RGBColor:
        ...
    def __eq__(self, arg0: RGBColor) -> bool:
        ...
    def __iadd__(self, arg0: RGBColor) -> None:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None:
        ...
    def __ne__(self, arg0: RGBColor) -> bool:
        ...
    def blue(self) -> int:
        ...
    def green(self) -> int:
        ...
    def red(self) -> int:
        ...
    def set_blue(self, arg0: int) -> None:
        ...
    def set_green(self, arg0: int) -> None:
        ...
    def set_red(self, arg0: int) -> None:
        ...
    def string(self) -> str:
        ...
class RasterImage1D(opengeode.lib64.opengeode_py_basic.CellArray1D, opengeode.lib64.opengeode_py_basic.Identifier):
    def __init__(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(1)]) -> None:
        ...
    def clone(self) -> RasterImage1D:
        ...
    def color(self, arg0: int) -> RGBColor:
        ...
    def native_extension(self) -> str:
        ...
    def set_color(self, arg0: int, arg1: RGBColor) -> None:
        ...
class RasterImage2D(opengeode.lib64.opengeode_py_basic.CellArray2D, opengeode.lib64.opengeode_py_basic.Identifier):
    def __init__(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
    def clone(self) -> RasterImage2D:
        ...
    def color(self, arg0: int) -> RGBColor:
        ...
    def native_extension(self) -> str:
        ...
    def set_color(self, arg0: int, arg1: RGBColor) -> None:
        ...
class RasterImage3D(opengeode.lib64.opengeode_py_basic.CellArray3D, opengeode.lib64.opengeode_py_basic.Identifier):
    def __init__(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
    def clone(self) -> RasterImage3D:
        ...
    def color(self, arg0: int) -> RGBColor:
        ...
    def native_extension(self) -> str:
        ...
    def set_color(self, arg0: int, arg1: RGBColor) -> None:
        ...
class RasterImageInputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class RasterImageInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class RasterImageOutputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class RasterImageOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class ostream_redirect:
    def __enter__(self) -> None:
        ...
    def __exit__(self, *args) -> None:
        ...
    def __init__(self, stdout: bool = True, stderr: bool = True) -> None:
        ...
def is_raster_image_loadable2D(arg0: str) -> opengeode.lib64.opengeode_py_basic.Percentage:
    ...
def is_raster_image_loadable3D(arg0: str) -> opengeode.lib64.opengeode_py_basic.Percentage:
    ...
def is_raster_image_saveable2D(arg0: RasterImage2D, arg1: str) -> bool:
    ...
def is_raster_image_saveable3D(arg0: RasterImage3D, arg1: str) -> bool:
    ...
def load_raster_image2D(arg0: str) -> RasterImage2D:
    ...
def load_raster_image3D(arg0: str) -> RasterImage3D:
    ...
def raster_image_additional_files2D(arg0: str) -> AdditionalFilesRasterImage2D:
    ...
def raster_image_additional_files3D(arg0: str) -> AdditionalFilesRasterImage3D:
    ...
def raster_image_object_priority2D(arg0: str) -> int:
    ...
def raster_image_object_priority3D(arg0: str) -> int:
    ...
def save_raster_image2D(arg0: RasterImage2D, arg1: str) -> list[str]:
    ...
def save_raster_image3D(arg0: RasterImage3D, arg1: str) -> list[str]:
    ...
