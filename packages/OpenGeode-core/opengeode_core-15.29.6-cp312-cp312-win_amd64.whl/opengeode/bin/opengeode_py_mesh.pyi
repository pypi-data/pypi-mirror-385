"""
OpenGeode Python binding for mesh
"""
from __future__ import annotations
import opengeode.bin.opengeode_py_basic
import opengeode.bin.opengeode_py_geometry
import opengeode.bin.opengeode_py_image
import pybind11_stubgen.typing_ext
import typing
__all__: list[str] = ['AdditionalFileEdgedCurve2D', 'AdditionalFileEdgedCurve3D', 'AdditionalFileGraph', 'AdditionalFileHybridSolid3D', 'AdditionalFileLightRegularGrid2D', 'AdditionalFileLightRegularGrid3D', 'AdditionalFilePointSet2D', 'AdditionalFilePointSet3D', 'AdditionalFilePolygonalSurface2D', 'AdditionalFilePolygonalSurface3D', 'AdditionalFilePolyhedralSolid3D', 'AdditionalFileRegularGrid2D', 'AdditionalFileRegularGrid3D', 'AdditionalFileTetrahedralSolid3D', 'AdditionalFileTriangulatedSurface2D', 'AdditionalFileTriangulatedSurface3D', 'AdditionalFileVertexSet', 'AdditionalFilesEdgedCurve2D', 'AdditionalFilesEdgedCurve3D', 'AdditionalFilesGraph', 'AdditionalFilesHybridSolid3D', 'AdditionalFilesLightRegularGrid2D', 'AdditionalFilesLightRegularGrid3D', 'AdditionalFilesPointSet2D', 'AdditionalFilesPointSet3D', 'AdditionalFilesPolygonalSurface2D', 'AdditionalFilesPolygonalSurface3D', 'AdditionalFilesPolyhedralSolid3D', 'AdditionalFilesRegularGrid2D', 'AdditionalFilesRegularGrid3D', 'AdditionalFilesTetrahedralSolid3D', 'AdditionalFilesTriangulatedSurface2D', 'AdditionalFilesTriangulatedSurface3D', 'AdditionalFilesVertexSet', 'CRSType', 'CoordinateReferenceSystem1D', 'CoordinateReferenceSystem2D', 'CoordinateReferenceSystem3D', 'CoordinateReferenceSystemManager1D', 'CoordinateReferenceSystemManager2D', 'CoordinateReferenceSystemManager3D', 'CoordinateReferenceSystemManagerBuilder1D', 'CoordinateReferenceSystemManagerBuilder2D', 'CoordinateReferenceSystemManagerBuilder3D', 'CoordinateReferenceSystemManagers1D', 'CoordinateReferenceSystemManagers2D', 'CoordinateReferenceSystemManagers3D', 'CoordinateReferenceSystemManagersBuilder2D', 'CoordinateReferenceSystemManagersBuilder3D', 'EdgeVertex', 'EdgedCurve2D', 'EdgedCurve3D', 'EdgedCurveBuilder2D', 'EdgedCurveBuilder3D', 'EdgedCurveInputFactory2D', 'EdgedCurveInputFactory3D', 'EdgedCurveOutputFactory2D', 'EdgedCurveOutputFactory3D', 'Graph', 'GraphBuilder', 'GraphInputFactory', 'GraphOutputFactory', 'Grid2D', 'Grid3D', 'HybridSolid3D', 'HybridSolidBuilder3D', 'HybridSolidInputFactory3D', 'HybridSolidOutputFactory3D', 'LightRegularGrid2D', 'LightRegularGrid3D', 'LightRegularGridInputFactory2D', 'LightRegularGridInputFactory3D', 'LightRegularGridOutputFactory2D', 'LightRegularGridOutputFactory3D', 'OpenGeodeMeshLibrary', 'PointSet2D', 'PointSet3D', 'PointSetBuilder2D', 'PointSetBuilder3D', 'PointSetInputFactory2D', 'PointSetInputFactory3D', 'PointSetOutputFactory2D', 'PointSetOutputFactory3D', 'PolygonEdge', 'PolygonVertex', 'PolygonalSurface2D', 'PolygonalSurface3D', 'PolygonalSurfaceBuilder2D', 'PolygonalSurfaceBuilder3D', 'PolygonalSurfaceInputFactory2D', 'PolygonalSurfaceInputFactory3D', 'PolygonalSurfaceOutputFactory2D', 'PolygonalSurfaceOutputFactory3D', 'PolyhedralSolid3D', 'PolyhedralSolidBuilder3D', 'PolyhedralSolidInputFactory3D', 'PolyhedralSolidOutputFactory3D', 'PolyhedronFacet', 'PolyhedronFacetEdge', 'PolyhedronFacetVertex', 'PolyhedronVertex', 'RegularGrid2D', 'RegularGrid3D', 'RegularGridBuilder2D', 'RegularGridBuilder3D', 'RegularGridInputFactory2D', 'RegularGridInputFactory3D', 'RegularGridOutputFactory2D', 'RegularGridOutputFactory3D', 'SolidEdges3D', 'SolidEdgesBuilder3D', 'SolidFacets3D', 'SolidFacetsBuilder3D', 'SolidMesh3D', 'SolidMeshBuilder3D', 'SurfaceEdges2D', 'SurfaceEdges3D', 'SurfaceEdgesBuilder2D', 'SurfaceEdgesBuilder3D', 'SurfaceMesh2D', 'SurfaceMesh3D', 'SurfaceMeshBuilder2D', 'SurfaceMeshBuilder3D', 'TetrahedralSolid3D', 'TetrahedralSolidBuilder3D', 'TetrahedralSolidInputFactory3D', 'TetrahedralSolidOutputFactory3D', 'Texture1D', 'Texture2D', 'Texture3D', 'TextureManager1D', 'TextureManager2D', 'TextureManager3D', 'TriangulatedSurface2D', 'TriangulatedSurface3D', 'TriangulatedSurfaceBuilder2D', 'TriangulatedSurfaceBuilder3D', 'TriangulatedSurfaceInputFactory2D', 'TriangulatedSurfaceInputFactory3D', 'TriangulatedSurfaceOutputFactory2D', 'TriangulatedSurfaceOutputFactory3D', 'VertexSet', 'VertexSetBuilder', 'VertexSetInputFactory', 'VertexSetOutputFactory', 'compute_solid_scalar_function_gradient3D', 'compute_surface_scalar_function_gradient2D', 'compute_surface_scalar_function_gradient3D', 'conservative_rasterize_segment2D', 'conservative_rasterize_segment3D', 'conservative_rasterize_triangle2D', 'conservative_rasterize_triangle3D', 'convert_edged_curve3d_into_2d', 'convert_grid_into_tetrahedral_solid', 'convert_grid_into_triangulated_surface', 'convert_point_set3d_into_2d', 'convert_polygonal_surface2d_into_3d', 'convert_polygonal_surface3d_into_2d', 'convert_solid_mesh_into_tetrahedral_solid', 'convert_surface_mesh2d_into_3d', 'convert_surface_mesh3d_into_2d', 'convert_surface_mesh_into_triangulated_surface2D', 'convert_surface_mesh_into_triangulated_surface3D', 'convert_triangulated_surface2d_into_3d', 'convert_triangulated_surface3d_into_2d', 'create_edged_curve_coordinate_system2D', 'create_edged_curve_coordinate_system3D', 'create_point_set_coordinate_system2D', 'create_point_set_coordinate_system3D', 'create_solid_mesh_coordinate_system3D', 'create_surface_mesh_coordinate_system2D', 'create_surface_mesh_coordinate_system3D', 'edged_curve_additional_files2D', 'edged_curve_additional_files3D', 'edged_curve_object_priority2D', 'edged_curve_object_priority3D', 'euclidean_distance_transform2D', 'euclidean_distance_transform3D', 'graph_additional_files', 'graph_object_priority', 'hybrid_solid_additional_files3D', 'hybrid_solid_object_priority3D', 'is_edged_curve_loadable2D', 'is_edged_curve_loadable3D', 'is_edged_curve_saveable2D', 'is_edged_curve_saveable3D', 'is_graph_loadable', 'is_graph_saveable', 'is_hybrid_solid_loadable3D', 'is_hybrid_solid_saveable3D', 'is_light_regular_grid_loadable2D', 'is_light_regular_grid_loadable3D', 'is_light_regular_grid_saveable2D', 'is_light_regular_grid_saveable3D', 'is_point_set_loadable2D', 'is_point_set_loadable3D', 'is_point_set_saveable2D', 'is_point_set_saveable3D', 'is_polygonal_surface_loadable2D', 'is_polygonal_surface_loadable3D', 'is_polygonal_surface_saveable2D', 'is_polygonal_surface_saveable3D', 'is_polyhedral_solid_loadable3D', 'is_polyhedral_solid_saveable3D', 'is_regular_grid_loadable2D', 'is_regular_grid_loadable3D', 'is_regular_grid_saveable2D', 'is_regular_grid_saveable3D', 'is_tetrahedral_solid_loadable3D', 'is_tetrahedral_solid_saveable3D', 'is_triangulated_surface_loadable2D', 'is_triangulated_surface_loadable3D', 'is_triangulated_surface_saveable2D', 'is_triangulated_surface_saveable3D', 'is_vertex_set_loadable', 'is_vertex_set_saveable', 'light_regular_grid_additional_files2D', 'light_regular_grid_additional_files3D', 'light_regular_grid_object_priority2D', 'light_regular_grid_object_priority3D', 'load_edged_curve2D', 'load_edged_curve3D', 'load_graph', 'load_hybrid_solid3D', 'load_light_regular_grid2D', 'load_light_regular_grid3D', 'load_point_set2D', 'load_point_set3D', 'load_polygonal_surface2D', 'load_polygonal_surface3D', 'load_polyhedral_solid3D', 'load_regular_grid2D', 'load_regular_grid3D', 'load_tetrahedral_solid3D', 'load_triangulated_surface2D', 'load_triangulated_surface3D', 'load_vertex_set', 'merge_edged_curves2D', 'merge_edged_curves3D', 'merge_solid_meshes', 'merge_surface_meshes2D', 'merge_surface_meshes3D', 'ostream_redirect', 'point_set_additional_files2D', 'point_set_additional_files3D', 'point_set_object_priority2D', 'point_set_object_priority3D', 'polygonal_surface_additional_files2D', 'polygonal_surface_additional_files3D', 'polygonal_surface_object_priority2D', 'polygonal_surface_object_priority3D', 'polyhedral_solid_additional_files3D', 'polyhedral_solid_object_priority3D', 'rasterize_closed_surface', 'rasterize_segment2D', 'rasterize_segment3D', 'rasterize_tetrahedron', 'regular_grid_additional_files2D', 'regular_grid_additional_files3D', 'regular_grid_object_priority2D', 'regular_grid_object_priority3D', 'repair_polygon_orientations2D', 'repair_polygon_orientations3D', 'rescale_edged_curve2D', 'rescale_edged_curve3D', 'rescale_hybrid_solid3D', 'rescale_point_set2D', 'rescale_point_set3D', 'rescale_polygonal_surface2D', 'rescale_polygonal_surface3D', 'rescale_polyhedral_solid3D', 'rescale_solid_mesh3D', 'rescale_surface_mesh2D', 'rescale_surface_mesh3D', 'rescale_tetrahedral_solid3D', 'rescale_triangulated_surface2D', 'rescale_triangulated_surface3D', 'save_edged_curve2D', 'save_edged_curve3D', 'save_graph', 'save_hybrid_solid3D', 'save_light_regular_grid2D', 'save_light_regular_grid3D', 'save_point_set2D', 'save_point_set3D', 'save_polygonal_surface2D', 'save_polygonal_surface3D', 'save_polyhedral_solid3D', 'save_regular_grid2D', 'save_regular_grid3D', 'save_tetrahedral_solid3D', 'save_triangulated_surface2D', 'save_triangulated_surface3D', 'save_vertex_set', 'tetrahedral_solid_additional_files3D', 'tetrahedral_solid_object_priority3D', 'translate_edged_curve2D', 'translate_edged_curve3D', 'translate_hybrid_solid3D', 'translate_point_set2D', 'translate_point_set3D', 'translate_polygonal_surface2D', 'translate_polygonal_surface3D', 'translate_polyhedral_solid3D', 'translate_solid_mesh3D', 'translate_surface_mesh2D', 'translate_surface_mesh3D', 'translate_tetrahedral_solid3D', 'translate_triangulated_surface2D', 'translate_triangulated_surface3D', 'triangulate_surface_mesh2D', 'triangulate_surface_mesh3D', 'triangulated_surface_additional_files2D', 'triangulated_surface_additional_files3D', 'triangulated_surface_object_priority2D', 'triangulated_surface_object_priority3D', 'vertex_set_additional_files', 'vertex_set_object_priority']
class AdditionalFileEdgedCurve2D:
    filename: str
    is_missing: bool
class AdditionalFileEdgedCurve3D:
    filename: str
    is_missing: bool
class AdditionalFileGraph:
    filename: str
    is_missing: bool
class AdditionalFileHybridSolid3D:
    filename: str
    is_missing: bool
class AdditionalFileLightRegularGrid2D:
    filename: str
    is_missing: bool
class AdditionalFileLightRegularGrid3D:
    filename: str
    is_missing: bool
class AdditionalFilePointSet2D:
    filename: str
    is_missing: bool
class AdditionalFilePointSet3D:
    filename: str
    is_missing: bool
class AdditionalFilePolygonalSurface2D:
    filename: str
    is_missing: bool
class AdditionalFilePolygonalSurface3D:
    filename: str
    is_missing: bool
class AdditionalFilePolyhedralSolid3D:
    filename: str
    is_missing: bool
class AdditionalFileRegularGrid2D:
    filename: str
    is_missing: bool
class AdditionalFileRegularGrid3D:
    filename: str
    is_missing: bool
class AdditionalFileTetrahedralSolid3D:
    filename: str
    is_missing: bool
class AdditionalFileTriangulatedSurface2D:
    filename: str
    is_missing: bool
class AdditionalFileTriangulatedSurface3D:
    filename: str
    is_missing: bool
class AdditionalFileVertexSet:
    filename: str
    is_missing: bool
class AdditionalFilesEdgedCurve2D:
    mandatory_files: list[AdditionalFileEdgedCurve2D]
    optional_files: list[AdditionalFileEdgedCurve2D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesEdgedCurve3D:
    mandatory_files: list[AdditionalFileEdgedCurve3D]
    optional_files: list[AdditionalFileEdgedCurve3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesGraph:
    mandatory_files: list[AdditionalFileGraph]
    optional_files: list[AdditionalFileGraph]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesHybridSolid3D:
    mandatory_files: list[AdditionalFileHybridSolid3D]
    optional_files: list[AdditionalFileHybridSolid3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesLightRegularGrid2D:
    mandatory_files: list[AdditionalFileLightRegularGrid2D]
    optional_files: list[AdditionalFileLightRegularGrid2D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesLightRegularGrid3D:
    mandatory_files: list[AdditionalFileLightRegularGrid3D]
    optional_files: list[AdditionalFileLightRegularGrid3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesPointSet2D:
    mandatory_files: list[AdditionalFilePointSet2D]
    optional_files: list[AdditionalFilePointSet2D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesPointSet3D:
    mandatory_files: list[AdditionalFilePointSet3D]
    optional_files: list[AdditionalFilePointSet3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesPolygonalSurface2D:
    mandatory_files: list[AdditionalFilePolygonalSurface2D]
    optional_files: list[AdditionalFilePolygonalSurface2D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesPolygonalSurface3D:
    mandatory_files: list[AdditionalFilePolygonalSurface3D]
    optional_files: list[AdditionalFilePolygonalSurface3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesPolyhedralSolid3D:
    mandatory_files: list[AdditionalFilePolyhedralSolid3D]
    optional_files: list[AdditionalFilePolyhedralSolid3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesRegularGrid2D:
    mandatory_files: list[AdditionalFileRegularGrid2D]
    optional_files: list[AdditionalFileRegularGrid2D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesRegularGrid3D:
    mandatory_files: list[AdditionalFileRegularGrid3D]
    optional_files: list[AdditionalFileRegularGrid3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesTetrahedralSolid3D:
    mandatory_files: list[AdditionalFileTetrahedralSolid3D]
    optional_files: list[AdditionalFileTetrahedralSolid3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesTriangulatedSurface2D:
    mandatory_files: list[AdditionalFileTriangulatedSurface2D]
    optional_files: list[AdditionalFileTriangulatedSurface2D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesTriangulatedSurface3D:
    mandatory_files: list[AdditionalFileTriangulatedSurface3D]
    optional_files: list[AdditionalFileTriangulatedSurface3D]
    def has_additional_files(self) -> bool:
        ...
class AdditionalFilesVertexSet:
    mandatory_files: list[AdditionalFileVertexSet]
    optional_files: list[AdditionalFileVertexSet]
    def has_additional_files(self) -> bool:
        ...
class CRSType:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: str) -> None:
        ...
    def get(self) -> str:
        ...
    def matches(self, arg0: CRSType) -> bool:
        ...
class CoordinateReferenceSystem1D:
    def point(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point1D:
        ...
    def set_point(self, arg0: int, arg1: opengeode.bin.opengeode_py_geometry.Point1D) -> None:
        ...
    def type_name(self) -> CRSType:
        ...
class CoordinateReferenceSystem2D:
    def point(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
    def set_point(self, arg0: int, arg1: opengeode.bin.opengeode_py_geometry.Point2D) -> None:
        ...
    def type_name(self) -> CRSType:
        ...
class CoordinateReferenceSystem3D:
    def point(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def set_point(self, arg0: int, arg1: opengeode.bin.opengeode_py_geometry.Point3D) -> None:
        ...
    def type_name(self) -> CRSType:
        ...
class CoordinateReferenceSystemManager1D:
    def active_coordinate_reference_system(self) -> CoordinateReferenceSystem1D:
        ...
    def active_coordinate_reference_system_name(self) -> str:
        ...
    def coordinate_reference_system_exists(self, arg0: str) -> bool:
        ...
    def coordinate_reference_system_names(self) -> list[str]:
        ...
    def find_coordinate_reference_system(self, arg0: str) -> CoordinateReferenceSystem1D:
        ...
    def nb_coordinate_reference_systems(self) -> int:
        ...
class CoordinateReferenceSystemManager2D:
    def active_coordinate_reference_system(self) -> CoordinateReferenceSystem2D:
        ...
    def active_coordinate_reference_system_name(self) -> str:
        ...
    def coordinate_reference_system_exists(self, arg0: str) -> bool:
        ...
    def coordinate_reference_system_names(self) -> list[str]:
        ...
    def find_coordinate_reference_system(self, arg0: str) -> CoordinateReferenceSystem2D:
        ...
    def nb_coordinate_reference_systems(self) -> int:
        ...
class CoordinateReferenceSystemManager3D:
    def active_coordinate_reference_system(self) -> CoordinateReferenceSystem3D:
        ...
    def active_coordinate_reference_system_name(self) -> str:
        ...
    def coordinate_reference_system_exists(self, arg0: str) -> bool:
        ...
    def coordinate_reference_system_names(self) -> list[str]:
        ...
    def find_coordinate_reference_system(self, arg0: str) -> CoordinateReferenceSystem3D:
        ...
    def nb_coordinate_reference_systems(self) -> int:
        ...
class CoordinateReferenceSystemManagerBuilder1D:
    def __init__(self, arg0: CoordinateReferenceSystemManager1D) -> None:
        ...
    def active_coordinate_reference_system(self) -> CoordinateReferenceSystem1D:
        ...
    def coordinate_reference_system(self, arg0: str) -> CoordinateReferenceSystem1D:
        ...
    def delete_coordinate_reference_system(self, arg0: str) -> None:
        ...
    def register_coordinate_reference_system(self, arg0: str, arg1: CoordinateReferenceSystem1D) -> None:
        ...
    def set_active_coordinate_reference_system(self, arg0: str) -> None:
        ...
class CoordinateReferenceSystemManagerBuilder2D:
    def __init__(self, arg0: CoordinateReferenceSystemManager2D) -> None:
        ...
    def active_coordinate_reference_system(self) -> CoordinateReferenceSystem2D:
        ...
    def coordinate_reference_system(self, arg0: str) -> CoordinateReferenceSystem2D:
        ...
    def delete_coordinate_reference_system(self, arg0: str) -> None:
        ...
    def register_coordinate_reference_system(self, arg0: str, arg1: CoordinateReferenceSystem2D) -> None:
        ...
    def set_active_coordinate_reference_system(self, arg0: str) -> None:
        ...
class CoordinateReferenceSystemManagerBuilder3D:
    def __init__(self, arg0: CoordinateReferenceSystemManager3D) -> None:
        ...
    def active_coordinate_reference_system(self) -> CoordinateReferenceSystem3D:
        ...
    def coordinate_reference_system(self, arg0: str) -> CoordinateReferenceSystem3D:
        ...
    def delete_coordinate_reference_system(self, arg0: str) -> None:
        ...
    def register_coordinate_reference_system(self, arg0: str, arg1: CoordinateReferenceSystem3D) -> None:
        ...
    def set_active_coordinate_reference_system(self, arg0: str) -> None:
        ...
class CoordinateReferenceSystemManagers1D:
    def coordinate_reference_system_manager1D(self) -> CoordinateReferenceSystemManager1D:
        ...
    def coordinate_reference_system_manager2D(self) -> CoordinateReferenceSystemManager2D:
        ...
    def coordinate_reference_system_manager3D(self) -> CoordinateReferenceSystemManager3D:
        ...
    def main_coordinate_reference_system_manager(self) -> CoordinateReferenceSystemManager1D:
        ...
    def point(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point1D:
        ...
class CoordinateReferenceSystemManagers2D:
    def coordinate_reference_system_manager1D(self) -> CoordinateReferenceSystemManager1D:
        ...
    def coordinate_reference_system_manager2D(self) -> CoordinateReferenceSystemManager2D:
        ...
    def coordinate_reference_system_manager3D(self) -> CoordinateReferenceSystemManager3D:
        ...
    def main_coordinate_reference_system_manager(self) -> CoordinateReferenceSystemManager2D:
        ...
    def point(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
class CoordinateReferenceSystemManagers3D:
    def coordinate_reference_system_manager1D(self) -> CoordinateReferenceSystemManager1D:
        ...
    def coordinate_reference_system_manager2D(self) -> CoordinateReferenceSystemManager2D:
        ...
    def coordinate_reference_system_manager3D(self) -> CoordinateReferenceSystemManager3D:
        ...
    def main_coordinate_reference_system_manager(self) -> CoordinateReferenceSystemManager3D:
        ...
    def point(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
class CoordinateReferenceSystemManagersBuilder2D:
    def __init__(self, arg0: CoordinateReferenceSystemManagers2D) -> None:
        ...
    def coordinate_reference_system_manager_builder1D(self) -> CoordinateReferenceSystemManagerBuilder1D:
        ...
    def coordinate_reference_system_manager_builder2D(self) -> CoordinateReferenceSystemManagerBuilder2D:
        ...
    def coordinate_reference_system_manager_builder3D(self) -> CoordinateReferenceSystemManagerBuilder3D:
        ...
    def main_coordinate_reference_system_manager_builder(self) -> CoordinateReferenceSystemManagerBuilder2D:
        ...
    def set_point(self, arg0: int, arg1: opengeode.bin.opengeode_py_geometry.Point2D) -> None:
        ...
class CoordinateReferenceSystemManagersBuilder3D:
    def __init__(self, arg0: CoordinateReferenceSystemManagers3D) -> None:
        ...
    def coordinate_reference_system_manager_builder1D(self) -> CoordinateReferenceSystemManagerBuilder1D:
        ...
    def coordinate_reference_system_manager_builder2D(self) -> CoordinateReferenceSystemManagerBuilder2D:
        ...
    def coordinate_reference_system_manager_builder3D(self) -> CoordinateReferenceSystemManagerBuilder3D:
        ...
    def main_coordinate_reference_system_manager_builder(self) -> CoordinateReferenceSystemManagerBuilder3D:
        ...
    def set_point(self, arg0: int, arg1: opengeode.bin.opengeode_py_geometry.Point3D) -> None:
        ...
class EdgeVertex:
    __hash__: typing.ClassVar[None] = None
    edge_id: int
    vertex_id: int
    def __eq__(self, arg0: EdgeVertex) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int) -> None:
        ...
    def __ne__(self, arg0: EdgeVertex) -> bool:
        ...
    def string(self) -> str:
        ...
class EdgedCurve2D(Graph, CoordinateReferenceSystemManagers2D):
    @staticmethod
    def create() -> EdgedCurve2D:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox2D:
        ...
    def clone(self) -> EdgedCurve2D:
        ...
    def edge_barycenter(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
    def edge_length(self, arg0: int) -> float:
        ...
    def segment(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Segment2D:
        ...
    def texture_manager(self) -> TextureManager1D:
        ...
    def vertices_around_vertex(self, arg0: int) -> list[int]:
        ...
class EdgedCurve3D(Graph, CoordinateReferenceSystemManagers3D):
    @staticmethod
    def create() -> EdgedCurve3D:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox3D:
        ...
    def clone(self) -> EdgedCurve3D:
        ...
    def edge_barycenter(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def edge_length(self, arg0: int) -> float:
        ...
    def segment(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Segment3D:
        ...
    def texture_manager(self) -> TextureManager1D:
        ...
    def vertices_around_vertex(self, arg0: int) -> list[int]:
        ...
class EdgedCurveBuilder2D(GraphBuilder, CoordinateReferenceSystemManagersBuilder2D):
    @staticmethod
    def create(arg0: EdgedCurve2D) -> EdgedCurveBuilder2D:
        ...
    def create_point(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D) -> int:
        ...
class EdgedCurveBuilder3D(GraphBuilder, CoordinateReferenceSystemManagersBuilder3D):
    @staticmethod
    def create(arg0: EdgedCurve3D) -> EdgedCurveBuilder3D:
        ...
    def create_point(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> int:
        ...
class EdgedCurveInputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class EdgedCurveInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class EdgedCurveOutputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class EdgedCurveOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class Graph(VertexSet):
    @staticmethod
    def create() -> Graph:
        ...
    def clone(self) -> Graph:
        ...
    def edge_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def edge_vertex(self, arg0: EdgeVertex) -> int:
        ...
    def edge_vertices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def edges_around_vertex(self, arg0: int) -> list[EdgeVertex]:
        ...
    def is_vertex_isolated(self, arg0: int) -> bool:
        ...
    def nb_edges(self) -> int:
        ...
class GraphBuilder(VertexSetBuilder):
    @staticmethod
    def create(arg0: Graph) -> GraphBuilder:
        ...
    def create_edge(self) -> int:
        ...
    def create_edge_with_vertices(self, arg0: int, arg1: int) -> int:
        ...
    def create_edges(self, arg0: int) -> int:
        ...
    def delete_edges(self, arg0: list[bool]) -> list[int]:
        ...
    def delete_isolated_vertices(self) -> list[int]:
        ...
    def permute_edges(self, arg0: list[int]) -> list[int]:
        ...
    def set_edge_vertex(self, arg0: EdgeVertex, arg1: int) -> None:
        ...
class GraphInputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class GraphOutputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class Grid2D(opengeode.bin.opengeode_py_basic.CellArray2D):
    def cell_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def cell_barycenter(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
    def cell_length_in_direction(self, arg0: int) -> float:
        ...
    def cell_size(self) -> float:
        ...
    def cell_vertex_indices(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def cell_vertices(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> typing.Annotated[list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]], pybind11_stubgen.typing_ext.FixedSize(4)]:
        ...
    def cells(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]]:
        ...
    def closest_vertex(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def contains(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D) -> bool:
        ...
    def grid_bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox2D:
        ...
    def grid_coordinate_system(self) -> opengeode.bin.opengeode_py_geometry.CoordinateSystem2D:
        ...
    def grid_point(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
    def grid_vertex_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def is_grid_vertex_on_border(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> bool:
        ...
    def nb_cell_vertices(self) -> int:
        ...
    def nb_grid_vertices(self) -> int:
        ...
    def nb_vertices_in_direction(self, arg0: int) -> int:
        ...
    def nb_vertices_on_borders(self) -> int:
        ...
    def next_vertex(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)] | None:
        ...
    def previous_vertex(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)] | None:
        ...
    def vertex_index(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> int:
        ...
    def vertex_indices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
class Grid3D(opengeode.bin.opengeode_py_basic.CellArray3D):
    def cell_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def cell_barycenter(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def cell_length_in_direction(self, arg0: int) -> float:
        ...
    def cell_size(self) -> float:
        ...
    def cell_vertex_indices(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
    def cell_vertices(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> typing.Annotated[list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]], pybind11_stubgen.typing_ext.FixedSize(8)]:
        ...
    def cells(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]]:
        ...
    def closest_vertex(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
    def contains(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> bool:
        ...
    def grid_bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox3D:
        ...
    def grid_coordinate_system(self) -> opengeode.bin.opengeode_py_geometry.CoordinateSystem3D:
        ...
    def grid_point(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def grid_vertex_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def is_grid_vertex_on_border(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> bool:
        ...
    def nb_cell_vertices(self) -> int:
        ...
    def nb_grid_vertices(self) -> int:
        ...
    def nb_vertices_in_direction(self, arg0: int) -> int:
        ...
    def nb_vertices_on_borders(self) -> int:
        ...
    def next_vertex(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)] | None:
        ...
    def previous_vertex(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg1: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)] | None:
        ...
    def vertex_index(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> int:
        ...
    def vertex_indices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]:
        ...
class HybridSolid3D(SolidMesh3D):
    @staticmethod
    def create() -> HybridSolid3D:
        ...
    def clone(self) -> HybridSolid3D:
        ...
class HybridSolidBuilder3D(SolidMeshBuilder3D):
    @staticmethod
    def create(arg0: HybridSolid3D) -> HybridSolidBuilder3D:
        ...
    def create_hexahedron(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(8)]) -> int:
        ...
    def create_prism(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(6)]) -> int:
        ...
    def create_pyramid(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(5)]) -> int:
        ...
    def create_tetrahedron(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(4)]) -> int:
        ...
class HybridSolidInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class HybridSolidOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class LightRegularGrid2D(Grid2D, opengeode.bin.opengeode_py_basic.Identifier):
    @typing.overload
    def __init__(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg2: typing.Annotated[list[opengeode.bin.opengeode_py_geometry.Vector2D], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
    def native_extension(self) -> str:
        ...
    def polygon_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def vertex_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
class LightRegularGrid3D(Grid3D, opengeode.bin.opengeode_py_basic.Identifier):
    @typing.overload
    def __init__(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg2: typing.Annotated[list[opengeode.bin.opengeode_py_geometry.Vector3D], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
    def native_extension(self) -> str:
        ...
    def polyhedron_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def vertex_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
class LightRegularGridInputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class LightRegularGridInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class LightRegularGridOutputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class LightRegularGridOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class OpenGeodeMeshLibrary:
    @staticmethod
    def initialize() -> None:
        ...
class PointSet2D(VertexSet, CoordinateReferenceSystemManagers2D):
    @staticmethod
    def create() -> PointSet2D:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox2D:
        ...
    def clone(self) -> PointSet2D:
        ...
class PointSet3D(VertexSet, CoordinateReferenceSystemManagers3D):
    @staticmethod
    def create() -> PointSet3D:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox3D:
        ...
    def clone(self) -> PointSet3D:
        ...
class PointSetBuilder2D(VertexSetBuilder, CoordinateReferenceSystemManagersBuilder2D):
    @staticmethod
    def create(arg0: PointSet2D) -> PointSetBuilder2D:
        ...
    def create_point(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D) -> int:
        ...
class PointSetBuilder3D(VertexSetBuilder, CoordinateReferenceSystemManagersBuilder3D):
    @staticmethod
    def create(arg0: PointSet3D) -> PointSetBuilder3D:
        ...
    def create_point(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> int:
        ...
class PointSetInputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PointSetInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PointSetOutputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PointSetOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PolygonEdge:
    __hash__: typing.ClassVar[None] = None
    edge_id: int
    polygon_id: int
    def __eq__(self, arg0: PolygonEdge) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: PolygonVertex) -> None:
        ...
    def __ne__(self, arg0: PolygonEdge) -> bool:
        ...
    def string(self) -> str:
        ...
class PolygonVertex:
    __hash__: typing.ClassVar[None] = None
    polygon_id: int
    vertex_id: int
    def __eq__(self, arg0: PolygonVertex) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: PolygonEdge) -> None:
        ...
    def __ne__(self, arg0: PolygonVertex) -> bool:
        ...
    def string(self) -> str:
        ...
class PolygonalSurface2D(SurfaceMesh2D):
    @staticmethod
    def create() -> PolygonalSurface2D:
        ...
    def clone(self) -> PolygonalSurface2D:
        ...
class PolygonalSurface3D(SurfaceMesh3D):
    @staticmethod
    def create() -> PolygonalSurface3D:
        ...
    def clone(self) -> PolygonalSurface3D:
        ...
class PolygonalSurfaceBuilder2D(SurfaceMeshBuilder2D):
    @staticmethod
    def create(arg0: PolygonalSurface2D) -> PolygonalSurfaceBuilder2D:
        ...
class PolygonalSurfaceBuilder3D(SurfaceMeshBuilder3D):
    @staticmethod
    def create(arg0: PolygonalSurface3D) -> PolygonalSurfaceBuilder3D:
        ...
class PolygonalSurfaceInputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PolygonalSurfaceInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PolygonalSurfaceOutputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PolygonalSurfaceOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PolyhedralSolid3D(SolidMesh3D):
    @staticmethod
    def create() -> PolyhedralSolid3D:
        ...
    def clone(self) -> PolyhedralSolid3D:
        ...
class PolyhedralSolidBuilder3D(SolidMeshBuilder3D):
    @staticmethod
    def create(arg0: PolyhedralSolid3D) -> PolyhedralSolidBuilder3D:
        ...
class PolyhedralSolidInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PolyhedralSolidOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class PolyhedronFacet:
    __hash__: typing.ClassVar[None] = None
    facet_id: int
    polyhedron_id: int
    def __eq__(self, arg0: PolyhedronFacet) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int) -> None:
        ...
    def __ne__(self, arg0: PolyhedronFacet) -> bool:
        ...
    def string(self) -> str:
        ...
class PolyhedronFacetEdge:
    __hash__: typing.ClassVar[None] = None
    edge_id: int
    polyhedron_facet: PolyhedronFacet
    def __eq__(self, arg0: PolyhedronFacetEdge) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: PolyhedronFacet, arg1: int) -> None:
        ...
    def __ne__(self, arg0: PolyhedronFacetEdge) -> bool:
        ...
    def string(self) -> str:
        ...
class PolyhedronFacetVertex:
    __hash__: typing.ClassVar[None] = None
    polyhedron_facet: PolyhedronFacet
    vertex_id: int
    def __eq__(self, arg0: PolyhedronFacetVertex) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: PolyhedronFacet, arg1: int) -> None:
        ...
    def __ne__(self, arg0: PolyhedronFacetVertex) -> bool:
        ...
    def string(self) -> str:
        ...
class PolyhedronVertex:
    __hash__: typing.ClassVar[None] = None
    polyhedron_id: int
    vertex_id: int
    def __eq__(self, arg0: PolyhedronVertex) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int) -> None:
        ...
    def __ne__(self, arg0: PolyhedronVertex) -> bool:
        ...
    def string(self) -> str:
        ...
class RegularGrid2D(SurfaceMesh2D, Grid2D):
    @staticmethod
    def create() -> RegularGrid2D:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox2D:
        ...
    def clone(self) -> RegularGrid2D:
        ...
class RegularGrid3D(SolidMesh3D, Grid3D):
    @staticmethod
    def create() -> RegularGrid3D:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox3D:
        ...
    def clone(self) -> RegularGrid3D:
        ...
class RegularGridBuilder2D(SurfaceMeshBuilder2D):
    @staticmethod
    def create(arg0: RegularGrid2D) -> RegularGridBuilder2D:
        ...
    def initialize_cartesian_grid(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg2: float) -> None:
        ...
    def initialize_grid(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
    def initialize_grid_with_directions(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg2: typing.Annotated[list[opengeode.bin.opengeode_py_geometry.Vector2D], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
    def update_origin(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D) -> None:
        ...
class RegularGridBuilder3D(SolidMeshBuilder3D):
    @staticmethod
    def create(arg0: RegularGrid3D) -> RegularGridBuilder3D:
        ...
    def initialize_cartesian_grid(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg2: float) -> None:
        ...
    def initialize_grid(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
    def initialize_grid_with_directions(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg2: typing.Annotated[list[opengeode.bin.opengeode_py_geometry.Vector3D], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
    def update_origin(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> None:
        ...
class RegularGridInputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class RegularGridInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class RegularGridOutputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class RegularGridOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class SolidEdges3D:
    def edge_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def edge_from_vertices(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> int | None:
        ...
    def edge_vertices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def nb_edges(self) -> int:
        ...
class SolidEdgesBuilder3D:
    def delete_isolated_edges(self) -> list[int]:
        ...
class SolidFacets3D:
    def facet_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def facet_from_vertices(self, arg0: list[int]) -> int | None:
        ...
    def facet_vertices(self, arg0: int) -> list[int]:
        ...
    def nb_facets(self) -> int:
        ...
class SolidFacetsBuilder3D:
    def delete_isolated_facets(self) -> list[int]:
        ...
class SolidMesh3D(VertexSet, CoordinateReferenceSystemManagers3D):
    @staticmethod
    def create() -> SolidMesh3D:
        ...
    def are_edges_enabled(self) -> bool:
        ...
    def are_facets_enabled(self) -> bool:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox3D:
        ...
    def clone(self) -> SolidMesh3D:
        ...
    def disable_edges(self) -> None:
        ...
    def disable_facets(self) -> None:
        ...
    def edge_barycenter(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def edge_length(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> float:
        ...
    def edge_vertices_in_polyhedron(self, arg0: int, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def edges(self) -> SolidEdges3D:
        ...
    def enable_edges(self) -> None:
        ...
    def enable_facets(self) -> None:
        ...
    def facet_barycenter(self, arg0: list[int]) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def facets(self) -> SolidFacets3D:
        ...
    def is_hybrid_type(self) -> bool:
        ...
    def is_polyhedral_type(self) -> bool:
        ...
    def is_polyhedron_facet_on_border(self, arg0: PolyhedronFacet) -> bool:
        ...
    def is_tetrahedral_type(self) -> bool:
        ...
    def is_vertex_on_border(self, arg0: int) -> bool:
        ...
    def nb_polyhedra(self) -> int:
        ...
    def nb_polyhedron_facet_vertices(self, arg0: PolyhedronFacet) -> int:
        ...
    def nb_polyhedron_facets(self, arg0: int) -> int:
        ...
    def nb_polyhedron_vertices(self, arg0: int) -> int:
        ...
    def polyhedra_around_edge(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> list[int]:
        ...
    def polyhedra_around_edge_with_hint(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg1: int) -> list[int]:
        ...
    def polyhedra_around_polyhedron_vertex(self, arg0: PolyhedronVertex) -> list[PolyhedronVertex]:
        ...
    def polyhedra_around_vertex(self, arg0: int) -> list[PolyhedronVertex]:
        ...
    def polyhedra_from_facet_vertices(self, arg0: list[int]) -> list[PolyhedronFacet]:
        ...
    def polyhedron_adjacent(self, arg0: PolyhedronFacet) -> int | None:
        ...
    def polyhedron_adjacent_facet(self, arg0: PolyhedronFacet) -> PolyhedronFacet | None:
        ...
    def polyhedron_around_vertex(self, arg0: int) -> PolyhedronVertex | None:
        ...
    def polyhedron_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def polyhedron_barycenter(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def polyhedron_facet_normal(self, arg0: PolyhedronFacet) -> opengeode.bin.opengeode_py_geometry.Vector3D | None:
        ...
    def polyhedron_facet_vertex(self, arg0: PolyhedronFacetVertex) -> int:
        ...
    def polyhedron_facet_vertices(self, arg0: PolyhedronFacet) -> list[int]:
        ...
    def polyhedron_facets_on_border(self, arg0: int) -> list[PolyhedronFacet]:
        ...
    def polyhedron_vertex(self, arg0: PolyhedronVertex) -> int:
        ...
    def polyhedron_vertices(self, arg0: int) -> list[int]:
        ...
    def polyhedron_volume(self, arg0: int) -> float:
        ...
    def texture_manager(self) -> TextureManager3D:
        ...
    def vertices_around_vertex(self, arg0: int) -> list[int]:
        ...
class SolidMeshBuilder3D(VertexSetBuilder, CoordinateReferenceSystemManagersBuilder3D):
    @staticmethod
    def create(arg0: SolidMesh3D) -> SolidMeshBuilder3D:
        ...
    def associate_polyhedron_vertex_to_vertex(self, arg0: PolyhedronVertex, arg1: int) -> None:
        ...
    def compute_polyhedron_adjacencies(self) -> None:
        ...
    def create_point(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> int:
        ...
    def create_polyhedron(self, arg0: list[int], arg1: list[list[int]]) -> int:
        ...
    def delete_isolated_vertices(self) -> list[int]:
        ...
    def delete_polyhedra(self, arg0: list[bool]) -> list[int]:
        ...
    def edges_builder(self) -> SolidEdgesBuilder3D:
        ...
    def facets_builder(self) -> SolidFacetsBuilder3D:
        ...
    def permute_polyhedra(self, arg0: list[int]) -> list[int]:
        ...
    def set_polyhedron_adjacent(self, arg0: PolyhedronFacet, arg1: int) -> None:
        ...
    def set_polyhedron_vertex(self, arg0: PolyhedronVertex, arg1: int) -> None:
        ...
class SurfaceEdges2D:
    def edge_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def edge_from_vertices(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> int | None:
        ...
    def edge_vertices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def nb_edges(self) -> int:
        ...
class SurfaceEdges3D:
    def edge_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def edge_from_vertices(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> int | None:
        ...
    def edge_vertices(self, arg0: int) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def nb_edges(self) -> int:
        ...
class SurfaceEdgesBuilder2D:
    def delete_isolated_edges(self) -> list[int]:
        ...
class SurfaceEdgesBuilder3D:
    def delete_isolated_edges(self) -> list[int]:
        ...
class SurfaceMesh2D(VertexSet, CoordinateReferenceSystemManagers2D):
    @staticmethod
    def create() -> SurfaceMesh2D:
        ...
    def are_edges_enabled(self) -> bool:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox2D:
        ...
    def clone(self) -> SurfaceMesh2D:
        ...
    def disable_edges(self) -> None:
        ...
    def edge_barycenter(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
    def edge_length(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> float:
        ...
    def edges(self) -> SurfaceEdges2D:
        ...
    def enable_edges(self) -> None:
        ...
    def is_edge_on_border(self, arg0: PolygonEdge) -> bool:
        ...
    def is_polygonal_type(self) -> bool:
        ...
    def is_triangulated_type(self) -> bool:
        ...
    def is_vertex_on_border(self, arg0: int) -> bool:
        ...
    def nb_polygon_edges(self, arg0: int) -> int:
        ...
    def nb_polygon_vertices(self, arg0: int) -> int:
        ...
    def nb_polygons(self) -> int:
        ...
    def next_on_border(self, arg0: PolygonEdge) -> PolygonEdge:
        ...
    def next_polygon_edge(self, arg0: PolygonEdge) -> PolygonEdge:
        ...
    def next_polygon_vertex(self, arg0: PolygonVertex) -> PolygonVertex:
        ...
    def polygon_adjacent(self, arg0: PolygonEdge) -> int | None:
        ...
    def polygon_adjacent_edge(self, arg0: PolygonEdge) -> PolygonEdge | None:
        ...
    def polygon_area(self, arg0: int) -> float:
        ...
    def polygon_around_vertex(self, arg0: int) -> PolygonVertex | None:
        ...
    def polygon_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def polygon_barycenter(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
    def polygon_edge_barycenter(self, arg0: PolygonEdge) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
    def polygon_edge_from_vertices(self, arg0: int, arg1: int) -> PolygonEdge | None:
        ...
    def polygon_edge_length(self, arg0: PolygonEdge) -> float:
        ...
    def polygon_edge_vertex(self, arg0: PolygonEdge, arg1: int) -> int:
        ...
    def polygon_edges_on_border(self, arg0: int) -> list[PolygonEdge]:
        ...
    def polygon_vertex(self, arg0: PolygonVertex) -> int:
        ...
    def polygon_vertices(self, arg0: int) -> list[int]:
        ...
    def polygons_around_polygon_vertex(self, arg0: PolygonVertex) -> list[PolygonVertex]:
        ...
    def polygons_around_vertex(self, arg0: int) -> list[PolygonVertex]:
        ...
    def polygons_from_edge_vertices(self, arg0: list[int]) -> list[PolygonEdge]:
        ...
    def previous_on_border(self, arg0: PolygonEdge) -> PolygonEdge:
        ...
    def previous_polygon_vertex(self, arg0: PolygonVertex) -> PolygonVertex:
        ...
    def texture_manager(self) -> TextureManager2D:
        ...
    def vertices_around_vertex(self, arg0: int) -> list[int]:
        ...
class SurfaceMesh3D(VertexSet, CoordinateReferenceSystemManagers3D):
    @staticmethod
    def create() -> SurfaceMesh3D:
        ...
    def are_edges_enabled(self) -> bool:
        ...
    def bounding_box(self) -> opengeode.bin.opengeode_py_geometry.BoundingBox3D:
        ...
    def clone(self) -> SurfaceMesh3D:
        ...
    def disable_edges(self) -> None:
        ...
    def edge_barycenter(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def edge_length(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]) -> float:
        ...
    def edges(self) -> SurfaceEdges3D:
        ...
    def enable_edges(self) -> None:
        ...
    def is_edge_on_border(self, arg0: PolygonEdge) -> bool:
        ...
    def is_polygonal_type(self) -> bool:
        ...
    def is_triangulated_type(self) -> bool:
        ...
    def is_vertex_on_border(self, arg0: int) -> bool:
        ...
    def nb_polygon_edges(self, arg0: int) -> int:
        ...
    def nb_polygon_vertices(self, arg0: int) -> int:
        ...
    def nb_polygons(self) -> int:
        ...
    def next_on_border(self, arg0: PolygonEdge) -> PolygonEdge:
        ...
    def next_polygon_edge(self, arg0: PolygonEdge) -> PolygonEdge:
        ...
    def next_polygon_vertex(self, arg0: PolygonVertex) -> PolygonVertex:
        ...
    def polygon_adjacent(self, arg0: PolygonEdge) -> int | None:
        ...
    def polygon_adjacent_edge(self, arg0: PolygonEdge) -> PolygonEdge | None:
        ...
    def polygon_area(self, arg0: int) -> float:
        ...
    def polygon_around_vertex(self, arg0: int) -> PolygonVertex | None:
        ...
    def polygon_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
    def polygon_barycenter(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def polygon_edge_barycenter(self, arg0: PolygonEdge) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
    def polygon_edge_from_vertices(self, arg0: int, arg1: int) -> PolygonEdge | None:
        ...
    def polygon_edge_length(self, arg0: PolygonEdge) -> float:
        ...
    def polygon_edge_vertex(self, arg0: PolygonEdge, arg1: int) -> int:
        ...
    def polygon_edges_on_border(self, arg0: int) -> list[PolygonEdge]:
        ...
    def polygon_normal(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Vector3D | None:
        ...
    def polygon_vertex(self, arg0: PolygonVertex) -> int:
        ...
    def polygon_vertex_normal(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Vector3D | None:
        ...
    def polygon_vertices(self, arg0: int) -> list[int]:
        ...
    def polygons_around_polygon_vertex(self, arg0: PolygonVertex) -> list[PolygonVertex]:
        ...
    def polygons_around_vertex(self, arg0: int) -> list[PolygonVertex]:
        ...
    def polygons_from_edge_vertices(self, arg0: list[int]) -> list[PolygonEdge]:
        ...
    def previous_on_border(self, arg0: PolygonEdge) -> PolygonEdge:
        ...
    def previous_polygon_vertex(self, arg0: PolygonVertex) -> PolygonVertex:
        ...
    def texture_manager(self) -> TextureManager2D:
        ...
    def vertices_around_vertex(self, arg0: int) -> list[int]:
        ...
class SurfaceMeshBuilder2D(VertexSetBuilder, CoordinateReferenceSystemManagersBuilder2D):
    @staticmethod
    def create(arg0: SurfaceMesh2D) -> SurfaceMeshBuilder2D:
        ...
    def compute_polygon_adjacencies(self) -> None:
        ...
    def create_point(self, arg0: opengeode.bin.opengeode_py_geometry.Point2D) -> int:
        ...
    def create_polygon(self, arg0: list[int]) -> int:
        ...
    def delete_isolated_vertices(self) -> list[int]:
        ...
    def delete_polygons(self, arg0: list[bool]) -> list[int]:
        ...
    def edges_builder(self) -> SurfaceEdgesBuilder2D:
        ...
    def permute_polygons(self, arg0: list[int]) -> list[int]:
        ...
    def set_polygon_adjacent(self, arg0: PolygonEdge, arg1: int) -> None:
        ...
    def set_polygon_vertex(self, arg0: PolygonVertex, arg1: int) -> None:
        ...
class SurfaceMeshBuilder3D(VertexSetBuilder, CoordinateReferenceSystemManagersBuilder3D):
    @staticmethod
    def create(arg0: SurfaceMesh3D) -> SurfaceMeshBuilder3D:
        ...
    def compute_polygon_adjacencies(self) -> None:
        ...
    def create_point(self, arg0: opengeode.bin.opengeode_py_geometry.Point3D) -> int:
        ...
    def create_polygon(self, arg0: list[int]) -> int:
        ...
    def delete_isolated_vertices(self) -> list[int]:
        ...
    def delete_polygons(self, arg0: list[bool]) -> list[int]:
        ...
    def edges_builder(self) -> SurfaceEdgesBuilder3D:
        ...
    def permute_polygons(self, arg0: list[int]) -> list[int]:
        ...
    def set_polygon_adjacent(self, arg0: PolygonEdge, arg1: int) -> None:
        ...
    def set_polygon_vertex(self, arg0: PolygonVertex, arg1: int) -> None:
        ...
class TetrahedralSolid3D(SolidMesh3D):
    @staticmethod
    def create() -> TetrahedralSolid3D:
        ...
    def clone(self) -> TetrahedralSolid3D:
        ...
    def tetrahedron(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Tetrahedron:
        ...
    def triangle(self, arg0: PolyhedronFacet) -> opengeode.bin.opengeode_py_geometry.Triangle3D:
        ...
class TetrahedralSolidBuilder3D(SolidMeshBuilder3D):
    @staticmethod
    def create(arg0: TetrahedralSolid3D) -> TetrahedralSolidBuilder3D:
        ...
    def create_tetrahedron(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(4)]) -> int:
        ...
class TetrahedralSolidInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class TetrahedralSolidOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class Texture1D:
    def image(self) -> opengeode.bin.opengeode_py_image.RasterImage1D:
        ...
    def set_image(self, arg0: opengeode.bin.opengeode_py_image.RasterImage1D) -> None:
        ...
    def set_texture_coordinates(self, arg0: EdgeVertex, arg1: opengeode.bin.opengeode_py_geometry.Point1D) -> None:
        ...
    def texture_coordinates(self, arg0: EdgeVertex) -> opengeode.bin.opengeode_py_geometry.Point1D:
        ...
class Texture2D:
    def image(self) -> opengeode.bin.opengeode_py_image.RasterImage2D:
        ...
    def set_image(self, arg0: opengeode.bin.opengeode_py_image.RasterImage2D) -> None:
        ...
    def set_texture_coordinates(self, arg0: PolygonVertex, arg1: opengeode.bin.opengeode_py_geometry.Point2D) -> None:
        ...
    def texture_coordinates(self, arg0: PolygonVertex) -> opengeode.bin.opengeode_py_geometry.Point2D:
        ...
class Texture3D:
    def image(self) -> opengeode.bin.opengeode_py_image.RasterImage3D:
        ...
    def set_image(self, arg0: opengeode.bin.opengeode_py_image.RasterImage3D) -> None:
        ...
    def set_texture_coordinates(self, arg0: PolyhedronVertex, arg1: opengeode.bin.opengeode_py_geometry.Point3D) -> None:
        ...
    def texture_coordinates(self, arg0: PolyhedronVertex) -> opengeode.bin.opengeode_py_geometry.Point3D:
        ...
class TextureManager1D:
    def delete_texture(self, arg0: str) -> None:
        ...
    def find_or_create_texture(self, arg0: str) -> Texture1D:
        ...
    def find_texture(self, arg0: str) -> Texture1D:
        ...
    def texture_exists(self, arg0: str) -> bool:
        ...
    def texture_names(self) -> list[str]:
        ...
class TextureManager2D:
    def delete_texture(self, arg0: str) -> None:
        ...
    def find_or_create_texture(self, arg0: str) -> Texture2D:
        ...
    def find_texture(self, arg0: str) -> Texture2D:
        ...
    def texture_exists(self, arg0: str) -> bool:
        ...
    def texture_names(self) -> list[str]:
        ...
class TextureManager3D:
    def delete_texture(self, arg0: str) -> None:
        ...
    def find_or_create_texture(self, arg0: str) -> Texture3D:
        ...
    def find_texture(self, arg0: str) -> Texture3D:
        ...
    def texture_exists(self, arg0: str) -> bool:
        ...
    def texture_names(self) -> list[str]:
        ...
class TriangulatedSurface2D(SurfaceMesh2D):
    @staticmethod
    def create() -> TriangulatedSurface2D:
        ...
    def clone(self) -> TriangulatedSurface2D:
        ...
    def triangle(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Triangle2D:
        ...
class TriangulatedSurface3D(SurfaceMesh3D):
    @staticmethod
    def create() -> TriangulatedSurface3D:
        ...
    def clone(self) -> TriangulatedSurface3D:
        ...
    def triangle(self, arg0: int) -> opengeode.bin.opengeode_py_geometry.Triangle3D:
        ...
class TriangulatedSurfaceBuilder2D(SurfaceMeshBuilder2D):
    @staticmethod
    def create(arg0: TriangulatedSurface2D) -> TriangulatedSurfaceBuilder2D:
        ...
    def create_triangle(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> int:
        ...
class TriangulatedSurfaceBuilder3D(SurfaceMeshBuilder3D):
    @staticmethod
    def create(arg0: TriangulatedSurface3D) -> TriangulatedSurfaceBuilder3D:
        ...
    def create_triangle(self, arg0: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]) -> int:
        ...
class TriangulatedSurfaceInputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class TriangulatedSurfaceInputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class TriangulatedSurfaceOutputFactory2D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class TriangulatedSurfaceOutputFactory3D:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class VertexSet(opengeode.bin.opengeode_py_basic.Identifier):
    @staticmethod
    def create() -> VertexSet:
        ...
    def clone(self) -> VertexSet:
        ...
    def native_extension(self) -> str:
        ...
    def nb_vertices(self) -> int:
        ...
    def vertex_attribute_manager(self) -> opengeode.bin.opengeode_py_basic.AttributeManager:
        ...
class VertexSetBuilder(opengeode.bin.opengeode_py_basic.IdentifierBuilder):
    @staticmethod
    def create(arg0: VertexSet) -> VertexSetBuilder:
        ...
    def create_vertex(self) -> int:
        ...
    def create_vertices(self, arg0: int) -> int:
        ...
    def delete_vertices(self, arg0: list[bool]) -> list[int]:
        ...
    def permute_vertices(self, arg0: list[int]) -> list[int]:
        ...
class VertexSetInputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class VertexSetOutputFactory:
    @staticmethod
    def list_creators() -> list[str]:
        ...
    def has_creator(self: str) -> bool:
        ...
class ostream_redirect:
    def __enter__(self) -> None:
        ...
    def __exit__(self, *args) -> None:
        ...
    def __init__(self, stdout: bool = True, stderr: bool = True) -> None:
        ...
def compute_solid_scalar_function_gradient3D(arg0: SolidMesh3D, arg1: str) -> str:
    ...
def compute_surface_scalar_function_gradient2D(arg0: SurfaceMesh2D, arg1: str) -> str:
    ...
def compute_surface_scalar_function_gradient3D(arg0: SurfaceMesh3D, arg1: str) -> str:
    ...
def conservative_rasterize_segment2D(arg0: Grid2D, arg1: opengeode.bin.opengeode_py_geometry.Segment2D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]]:
    ...
def conservative_rasterize_segment3D(arg0: Grid3D, arg1: opengeode.bin.opengeode_py_geometry.Segment3D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]]:
    ...
def conservative_rasterize_triangle2D(arg0: Grid2D, arg1: opengeode.bin.opengeode_py_geometry.Triangle2D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]]:
    ...
def conservative_rasterize_triangle3D(arg0: Grid3D, arg1: opengeode.bin.opengeode_py_geometry.Triangle3D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]]:
    ...
def convert_edged_curve3d_into_2d(arg0: EdgedCurve3D, arg1: int) -> EdgedCurve2D:
    ...
def convert_grid_into_tetrahedral_solid(arg0: Grid3D) -> TetrahedralSolid3D:
    ...
def convert_grid_into_triangulated_surface(arg0: Grid2D) -> TriangulatedSurface2D:
    ...
def convert_point_set3d_into_2d(arg0: PointSet3D, arg1: int) -> PointSet2D:
    ...
def convert_polygonal_surface2d_into_3d(arg0: PolygonalSurface2D, arg1: int, arg2: float) -> PolygonalSurface3D:
    ...
def convert_polygonal_surface3d_into_2d(arg0: PolygonalSurface3D, arg1: int) -> PolygonalSurface2D:
    ...
def convert_solid_mesh_into_tetrahedral_solid(arg0: SolidMesh3D) -> TetrahedralSolid3D | None:
    ...
def convert_surface_mesh2d_into_3d(arg0: SurfaceMesh2D, arg1: int, arg2: float) -> SurfaceMesh3D:
    ...
def convert_surface_mesh3d_into_2d(arg0: SurfaceMesh3D, arg1: int) -> SurfaceMesh2D:
    ...
def convert_surface_mesh_into_triangulated_surface2D(arg0: SurfaceMesh2D) -> TriangulatedSurface2D | None:
    ...
def convert_surface_mesh_into_triangulated_surface3D(arg0: SurfaceMesh3D) -> TriangulatedSurface3D | None:
    ...
def convert_triangulated_surface2d_into_3d(arg0: TriangulatedSurface2D, arg1: int, arg2: float) -> TriangulatedSurface3D:
    ...
def convert_triangulated_surface3d_into_2d(arg0: TriangulatedSurface3D, arg1: int) -> TriangulatedSurface2D:
    ...
def create_edged_curve_coordinate_system2D(arg0: EdgedCurve2D, arg1: EdgedCurveBuilder2D, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def create_edged_curve_coordinate_system3D(arg0: EdgedCurve3D, arg1: EdgedCurveBuilder3D, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def create_point_set_coordinate_system2D(arg0: PointSet2D, arg1: PointSetBuilder2D, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def create_point_set_coordinate_system3D(arg0: PointSet3D, arg1: PointSetBuilder3D, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def create_solid_mesh_coordinate_system3D(arg0: SolidMesh3D, arg1: SolidMeshBuilder3D, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def create_surface_mesh_coordinate_system2D(arg0: SurfaceMesh2D, arg1: SurfaceMeshBuilder2D, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def create_surface_mesh_coordinate_system3D(arg0: SurfaceMesh3D, arg1: SurfaceMeshBuilder3D, arg2: str, arg3: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D, arg4: opengeode.bin.opengeode_py_geometry.CoordinateSystem2D) -> None:
    ...
def edged_curve_additional_files2D(arg0: str) -> AdditionalFilesEdgedCurve2D:
    ...
def edged_curve_additional_files3D(arg0: str) -> AdditionalFilesEdgedCurve3D:
    ...
def edged_curve_object_priority2D(arg0: str) -> int:
    ...
def edged_curve_object_priority3D(arg0: str) -> int:
    ...
def euclidean_distance_transform2D(arg0: Grid2D, arg1: list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]], arg2: str) -> opengeode.bin.opengeode_py_basic.VariableAttributeDouble:
    ...
def euclidean_distance_transform3D(arg0: Grid3D, arg1: list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]], arg2: str) -> opengeode.bin.opengeode_py_basic.VariableAttributeDouble:
    ...
def graph_additional_files(arg0: str) -> AdditionalFilesGraph:
    ...
def graph_object_priority(arg0: str) -> int:
    ...
def hybrid_solid_additional_files3D(arg0: str) -> AdditionalFilesHybridSolid3D:
    ...
def hybrid_solid_object_priority3D(arg0: str) -> int:
    ...
def is_edged_curve_loadable2D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_edged_curve_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_edged_curve_saveable2D(arg0: EdgedCurve2D, arg1: str) -> bool:
    ...
def is_edged_curve_saveable3D(arg0: EdgedCurve3D, arg1: str) -> bool:
    ...
def is_graph_loadable(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_graph_saveable(arg0: Graph, arg1: str) -> bool:
    ...
def is_hybrid_solid_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_hybrid_solid_saveable3D(arg0: HybridSolid3D, arg1: str) -> bool:
    ...
def is_light_regular_grid_loadable2D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_light_regular_grid_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_light_regular_grid_saveable2D(arg0: LightRegularGrid2D, arg1: str) -> bool:
    ...
def is_light_regular_grid_saveable3D(arg0: LightRegularGrid3D, arg1: str) -> bool:
    ...
def is_point_set_loadable2D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_point_set_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_point_set_saveable2D(arg0: PointSet2D, arg1: str) -> bool:
    ...
def is_point_set_saveable3D(arg0: PointSet3D, arg1: str) -> bool:
    ...
def is_polygonal_surface_loadable2D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_polygonal_surface_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_polygonal_surface_saveable2D(arg0: PolygonalSurface2D, arg1: str) -> bool:
    ...
def is_polygonal_surface_saveable3D(arg0: PolygonalSurface3D, arg1: str) -> bool:
    ...
def is_polyhedral_solid_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_polyhedral_solid_saveable3D(arg0: PolyhedralSolid3D, arg1: str) -> bool:
    ...
def is_regular_grid_loadable2D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_regular_grid_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_regular_grid_saveable2D(arg0: RegularGrid2D, arg1: str) -> bool:
    ...
def is_regular_grid_saveable3D(arg0: RegularGrid3D, arg1: str) -> bool:
    ...
def is_tetrahedral_solid_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_tetrahedral_solid_saveable3D(arg0: TetrahedralSolid3D, arg1: str) -> bool:
    ...
def is_triangulated_surface_loadable2D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_triangulated_surface_loadable3D(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_triangulated_surface_saveable2D(arg0: TriangulatedSurface2D, arg1: str) -> bool:
    ...
def is_triangulated_surface_saveable3D(arg0: TriangulatedSurface3D, arg1: str) -> bool:
    ...
def is_vertex_set_loadable(arg0: str) -> opengeode.bin.opengeode_py_basic.Percentage:
    ...
def is_vertex_set_saveable(arg0: VertexSet, arg1: str) -> bool:
    ...
def light_regular_grid_additional_files2D(arg0: str) -> AdditionalFilesLightRegularGrid2D:
    ...
def light_regular_grid_additional_files3D(arg0: str) -> AdditionalFilesLightRegularGrid3D:
    ...
def light_regular_grid_object_priority2D(arg0: str) -> int:
    ...
def light_regular_grid_object_priority3D(arg0: str) -> int:
    ...
def load_edged_curve2D(arg0: str) -> EdgedCurve2D:
    ...
def load_edged_curve3D(arg0: str) -> EdgedCurve3D:
    ...
def load_graph(arg0: str) -> Graph:
    ...
def load_hybrid_solid3D(arg0: str) -> HybridSolid3D:
    ...
def load_light_regular_grid2D(arg0: str) -> LightRegularGrid2D:
    ...
def load_light_regular_grid3D(arg0: str) -> LightRegularGrid3D:
    ...
def load_point_set2D(arg0: str) -> PointSet2D:
    ...
def load_point_set3D(arg0: str) -> PointSet3D:
    ...
def load_polygonal_surface2D(arg0: str) -> PolygonalSurface2D:
    ...
def load_polygonal_surface3D(arg0: str) -> PolygonalSurface3D:
    ...
def load_polyhedral_solid3D(arg0: str) -> PolyhedralSolid3D:
    ...
def load_regular_grid2D(arg0: str) -> RegularGrid2D:
    ...
def load_regular_grid3D(arg0: str) -> RegularGrid3D:
    ...
def load_tetrahedral_solid3D(arg0: str) -> TetrahedralSolid3D:
    ...
def load_triangulated_surface2D(arg0: str) -> TriangulatedSurface2D:
    ...
def load_triangulated_surface3D(arg0: str) -> TriangulatedSurface3D:
    ...
def load_vertex_set(arg0: str) -> VertexSet:
    ...
def merge_edged_curves2D(arg0: list[EdgedCurve2D]) -> EdgedCurve2D:
    ...
def merge_edged_curves3D(arg0: list[EdgedCurve3D]) -> EdgedCurve3D:
    ...
def merge_solid_meshes(arg0: list[SolidMesh3D]) -> SolidMesh3D:
    ...
def merge_surface_meshes2D(arg0: list[SurfaceMesh2D]) -> SurfaceMesh2D:
    ...
def merge_surface_meshes3D(arg0: list[SurfaceMesh3D]) -> SurfaceMesh3D:
    ...
def point_set_additional_files2D(arg0: str) -> AdditionalFilesPointSet2D:
    ...
def point_set_additional_files3D(arg0: str) -> AdditionalFilesPointSet3D:
    ...
def point_set_object_priority2D(arg0: str) -> int:
    ...
def point_set_object_priority3D(arg0: str) -> int:
    ...
def polygonal_surface_additional_files2D(arg0: str) -> AdditionalFilesPolygonalSurface2D:
    ...
def polygonal_surface_additional_files3D(arg0: str) -> AdditionalFilesPolygonalSurface3D:
    ...
def polygonal_surface_object_priority2D(arg0: str) -> int:
    ...
def polygonal_surface_object_priority3D(arg0: str) -> int:
    ...
def polyhedral_solid_additional_files3D(arg0: str) -> AdditionalFilesPolyhedralSolid3D:
    ...
def polyhedral_solid_object_priority3D(arg0: str) -> int:
    ...
def rasterize_closed_surface(arg0: Grid3D, arg1: TriangulatedSurface3D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]]:
    ...
def rasterize_segment2D(arg0: Grid2D, arg1: opengeode.bin.opengeode_py_geometry.Segment2D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]]:
    ...
def rasterize_segment3D(arg0: Grid3D, arg1: opengeode.bin.opengeode_py_geometry.Segment3D) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]]:
    ...
def rasterize_tetrahedron(arg0: Grid3D, arg1: opengeode.bin.opengeode_py_geometry.Tetrahedron) -> list[typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)]]:
    ...
def regular_grid_additional_files2D(arg0: str) -> AdditionalFilesRegularGrid2D:
    ...
def regular_grid_additional_files3D(arg0: str) -> AdditionalFilesRegularGrid3D:
    ...
def regular_grid_object_priority2D(arg0: str) -> int:
    ...
def regular_grid_object_priority3D(arg0: str) -> int:
    ...
def repair_polygon_orientations2D(arg0: SurfaceMesh2D) -> None:
    ...
def repair_polygon_orientations3D(arg0: SurfaceMesh3D) -> None:
    ...
def rescale_edged_curve2D(arg0: EdgedCurve2D, arg1: EdgedCurveBuilder2D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
    ...
def rescale_edged_curve3D(arg0: EdgedCurve3D, arg1: EdgedCurveBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_hybrid_solid3D(arg0: HybridSolid3D, arg1: HybridSolidBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_point_set2D(arg0: PointSet2D, arg1: PointSetBuilder2D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
    ...
def rescale_point_set3D(arg0: PointSet3D, arg1: PointSetBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_polygonal_surface2D(arg0: PolygonalSurface2D, arg1: PolygonalSurfaceBuilder2D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
    ...
def rescale_polygonal_surface3D(arg0: PolygonalSurface3D, arg1: PolygonalSurfaceBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_polyhedral_solid3D(arg0: PolyhedralSolid3D, arg1: PolyhedralSolidBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_solid_mesh3D(arg0: SolidMesh3D, arg1: SolidMeshBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_surface_mesh2D(arg0: SurfaceMesh2D, arg1: SurfaceMeshBuilder2D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
    ...
def rescale_surface_mesh3D(arg0: SurfaceMesh3D, arg1: SurfaceMeshBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_tetrahedral_solid3D(arg0: TetrahedralSolid3D, arg1: TetrahedralSolidBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def rescale_triangulated_surface2D(arg0: TriangulatedSurface2D, arg1: TriangulatedSurfaceBuilder2D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
    ...
def rescale_triangulated_surface3D(arg0: TriangulatedSurface3D, arg1: TriangulatedSurfaceBuilder3D, arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
    ...
def save_edged_curve2D(arg0: EdgedCurve2D, arg1: str) -> list[str]:
    ...
def save_edged_curve3D(arg0: EdgedCurve3D, arg1: str) -> list[str]:
    ...
def save_graph(arg0: Graph, arg1: str) -> list[str]:
    ...
def save_hybrid_solid3D(arg0: HybridSolid3D, arg1: str) -> list[str]:
    ...
def save_light_regular_grid2D(arg0: LightRegularGrid2D, arg1: str) -> list[str]:
    ...
def save_light_regular_grid3D(arg0: LightRegularGrid3D, arg1: str) -> list[str]:
    ...
def save_point_set2D(arg0: PointSet2D, arg1: str) -> list[str]:
    ...
def save_point_set3D(arg0: PointSet3D, arg1: str) -> list[str]:
    ...
def save_polygonal_surface2D(arg0: PolygonalSurface2D, arg1: str) -> list[str]:
    ...
def save_polygonal_surface3D(arg0: PolygonalSurface3D, arg1: str) -> list[str]:
    ...
def save_polyhedral_solid3D(arg0: PolyhedralSolid3D, arg1: str) -> list[str]:
    ...
def save_regular_grid2D(arg0: RegularGrid2D, arg1: str) -> list[str]:
    ...
def save_regular_grid3D(arg0: RegularGrid3D, arg1: str) -> list[str]:
    ...
def save_tetrahedral_solid3D(arg0: TetrahedralSolid3D, arg1: str) -> list[str]:
    ...
def save_triangulated_surface2D(arg0: TriangulatedSurface2D, arg1: str) -> list[str]:
    ...
def save_triangulated_surface3D(arg0: TriangulatedSurface3D, arg1: str) -> list[str]:
    ...
def save_vertex_set(arg0: VertexSet, arg1: str) -> list[str]:
    ...
def tetrahedral_solid_additional_files3D(arg0: str) -> AdditionalFilesTetrahedralSolid3D:
    ...
def tetrahedral_solid_object_priority3D(arg0: str) -> int:
    ...
def translate_edged_curve2D(arg0: EdgedCurve2D, arg1: EdgedCurveBuilder2D, arg2: opengeode.bin.opengeode_py_geometry.Vector2D) -> None:
    ...
def translate_edged_curve3D(arg0: EdgedCurve3D, arg1: EdgedCurveBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_hybrid_solid3D(arg0: HybridSolid3D, arg1: HybridSolidBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_point_set2D(arg0: PointSet2D, arg1: PointSetBuilder2D, arg2: opengeode.bin.opengeode_py_geometry.Vector2D) -> None:
    ...
def translate_point_set3D(arg0: PointSet3D, arg1: PointSetBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_polygonal_surface2D(arg0: PolygonalSurface2D, arg1: PolygonalSurfaceBuilder2D, arg2: opengeode.bin.opengeode_py_geometry.Vector2D) -> None:
    ...
def translate_polygonal_surface3D(arg0: PolygonalSurface3D, arg1: PolygonalSurfaceBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_polyhedral_solid3D(arg0: PolyhedralSolid3D, arg1: PolyhedralSolidBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_solid_mesh3D(arg0: SolidMesh3D, arg1: SolidMeshBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_surface_mesh2D(arg0: SurfaceMesh2D, arg1: SurfaceMeshBuilder2D, arg2: opengeode.bin.opengeode_py_geometry.Vector2D) -> None:
    ...
def translate_surface_mesh3D(arg0: SurfaceMesh3D, arg1: SurfaceMeshBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_tetrahedral_solid3D(arg0: TetrahedralSolid3D, arg1: TetrahedralSolidBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def translate_triangulated_surface2D(arg0: TriangulatedSurface2D, arg1: TriangulatedSurfaceBuilder2D, arg2: opengeode.bin.opengeode_py_geometry.Vector2D) -> None:
    ...
def translate_triangulated_surface3D(arg0: TriangulatedSurface3D, arg1: TriangulatedSurfaceBuilder3D, arg2: opengeode.bin.opengeode_py_geometry.Vector3D) -> None:
    ...
def triangulate_surface_mesh2D(arg0: SurfaceMesh2D) -> None:
    ...
def triangulate_surface_mesh3D(arg0: SurfaceMesh3D) -> None:
    ...
def triangulated_surface_additional_files2D(arg0: str) -> AdditionalFilesTriangulatedSurface2D:
    ...
def triangulated_surface_additional_files3D(arg0: str) -> AdditionalFilesTriangulatedSurface3D:
    ...
def triangulated_surface_object_priority2D(arg0: str) -> int:
    ...
def triangulated_surface_object_priority3D(arg0: str) -> int:
    ...
def vertex_set_additional_files(arg0: str) -> AdditionalFilesVertexSet:
    ...
def vertex_set_object_priority(arg0: str) -> int:
    ...
