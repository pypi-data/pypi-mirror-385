# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from terrascope_api.models import notification_pb2 as notification__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in notification_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NotificationApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_subscription = channel.unary_unary(
                '/oi.papi.NotificationApi/create_subscription',
                request_serializer=notification__pb2.SubscriptionCreateRequest.SerializeToString,
                response_deserializer=notification__pb2.SubscriptionCreateResponse.FromString,
                _registered_method=True)
        self.list_topic = channel.unary_unary(
                '/oi.papi.NotificationApi/list_topic',
                request_serializer=notification__pb2.TopicListRequest.SerializeToString,
                response_deserializer=notification__pb2.TopicListResponse.FromString,
                _registered_method=True)
        self.list_channel = channel.unary_unary(
                '/oi.papi.NotificationApi/list_channel',
                request_serializer=notification__pb2.ChannelListRequest.SerializeToString,
                response_deserializer=notification__pb2.ChannelListResponse.FromString,
                _registered_method=True)
        self.delete_subscription = channel.unary_unary(
                '/oi.papi.NotificationApi/delete_subscription',
                request_serializer=notification__pb2.SubscriptionDeleteRequest.SerializeToString,
                response_deserializer=notification__pb2.SubscriptionDeleteResponse.FromString,
                _registered_method=True)
        self.list_subscription = channel.unary_unary(
                '/oi.papi.NotificationApi/list_subscription',
                request_serializer=notification__pb2.SubscriptionListRequest.SerializeToString,
                response_deserializer=notification__pb2.SubscriptionListResponse.FromString,
                _registered_method=True)
        self.send_notification = channel.unary_unary(
                '/oi.papi.NotificationApi/send_notification',
                request_serializer=notification__pb2.NotificationSendRequest.SerializeToString,
                response_deserializer=notification__pb2.NotificationSendResponse.FromString,
                _registered_method=True)
        self.list = channel.unary_unary(
                '/oi.papi.NotificationApi/list',
                request_serializer=notification__pb2.NotificationListRequest.SerializeToString,
                response_deserializer=notification__pb2.NotificationListResponse.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/oi.papi.NotificationApi/update',
                request_serializer=notification__pb2.NotificationUpdateRequest.SerializeToString,
                response_deserializer=notification__pb2.NotificationUpdateResponse.FromString,
                _registered_method=True)


class NotificationApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_subscription(self, request, context):
        """
        Create subscription for a specific topic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_topic(self, request, context):
        """
        Get all the Topics that the user can subscribe to
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_channel(self, request, context):
        """
        Get all the channels that can be used
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_subscription(self, request, context):
        """
        Deletes the specified Subscription.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_subscription(self, request, context):
        """
        List Subscriptions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_notification(self, request, context):
        """
        Send Notification.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """
        Get Notification.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """
        Update Notification.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.create_subscription,
                    request_deserializer=notification__pb2.SubscriptionCreateRequest.FromString,
                    response_serializer=notification__pb2.SubscriptionCreateResponse.SerializeToString,
            ),
            'list_topic': grpc.unary_unary_rpc_method_handler(
                    servicer.list_topic,
                    request_deserializer=notification__pb2.TopicListRequest.FromString,
                    response_serializer=notification__pb2.TopicListResponse.SerializeToString,
            ),
            'list_channel': grpc.unary_unary_rpc_method_handler(
                    servicer.list_channel,
                    request_deserializer=notification__pb2.ChannelListRequest.FromString,
                    response_serializer=notification__pb2.ChannelListResponse.SerializeToString,
            ),
            'delete_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_subscription,
                    request_deserializer=notification__pb2.SubscriptionDeleteRequest.FromString,
                    response_serializer=notification__pb2.SubscriptionDeleteResponse.SerializeToString,
            ),
            'list_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.list_subscription,
                    request_deserializer=notification__pb2.SubscriptionListRequest.FromString,
                    response_serializer=notification__pb2.SubscriptionListResponse.SerializeToString,
            ),
            'send_notification': grpc.unary_unary_rpc_method_handler(
                    servicer.send_notification,
                    request_deserializer=notification__pb2.NotificationSendRequest.FromString,
                    response_serializer=notification__pb2.NotificationSendResponse.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=notification__pb2.NotificationListRequest.FromString,
                    response_serializer=notification__pb2.NotificationListResponse.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=notification__pb2.NotificationUpdateRequest.FromString,
                    response_serializer=notification__pb2.NotificationUpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oi.papi.NotificationApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('oi.papi.NotificationApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NotificationApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/create_subscription',
            notification__pb2.SubscriptionCreateRequest.SerializeToString,
            notification__pb2.SubscriptionCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def list_topic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/list_topic',
            notification__pb2.TopicListRequest.SerializeToString,
            notification__pb2.TopicListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def list_channel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/list_channel',
            notification__pb2.ChannelListRequest.SerializeToString,
            notification__pb2.ChannelListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/delete_subscription',
            notification__pb2.SubscriptionDeleteRequest.SerializeToString,
            notification__pb2.SubscriptionDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def list_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/list_subscription',
            notification__pb2.SubscriptionListRequest.SerializeToString,
            notification__pb2.SubscriptionListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def send_notification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/send_notification',
            notification__pb2.NotificationSendRequest.SerializeToString,
            notification__pb2.NotificationSendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/list',
            notification__pb2.NotificationListRequest.SerializeToString,
            notification__pb2.NotificationListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.NotificationApi/update',
            notification__pb2.NotificationUpdateRequest.SerializeToString,
            notification__pb2.NotificationUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
