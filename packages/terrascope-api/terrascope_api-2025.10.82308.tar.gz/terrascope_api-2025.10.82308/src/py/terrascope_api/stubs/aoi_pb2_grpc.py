# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from terrascope_api.models import aoi_pb2 as aoi__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in aoi_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AOIApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/oi.papi.AOIApi/create',
                request_serializer=aoi__pb2.AOICreateRequest.SerializeToString,
                response_deserializer=aoi__pb2.AOICreateResponse.FromString,
                _registered_method=True)
        self.get = channel.unary_unary(
                '/oi.papi.AOIApi/get',
                request_serializer=aoi__pb2.AOIGetRequest.SerializeToString,
                response_deserializer=aoi__pb2.AOIGetResponse.FromString,
                _registered_method=True)
        self.upload = channel.stream_unary(
                '/oi.papi.AOIApi/upload',
                request_serializer=aoi__pb2.AOIUploadRequest.SerializeToString,
                response_deserializer=aoi__pb2.AOIUploadResponse.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/oi.papi.AOIApi/update',
                request_serializer=aoi__pb2.AOIUpdateRequest.SerializeToString,
                response_deserializer=aoi__pb2.AOIUpdateResponse.FromString,
                _registered_method=True)


class AOIApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """
        Create a new AOI in the system by passing in the required components.
        Pass in an optional aoi_id to act as the parent and create an updated version of the AOI, which will copy fields from the parent unless explicitly overridden by the input parameters.
        The aoi_id and aoi_version of the created AOI are returned. This endpoint is currently limited to 100 AOIs or less.
        If you would like to upload more, refer to aoi.upload.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """
        Get the metadata about the specified AOIs.
        Setting the verbose flag will also include the bytes in wkt format describing the geometry.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload(self, request_iterator, context):
        """
        Upload new AOIs to the system by passing in the raw bytes.
        Acceptable file formats are .zip (i.e. shapefile), geojson, kml, kmz, and wkt.
        The aoi_id and aoi_version of the created AOIs are returned. This call is asynchronous.
        It will return a aoi_transaction_id that can be used to check the state of the upload.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """
        Update an list of AOIs. Replaces the contents with the newly given constraints.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AOIApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=aoi__pb2.AOICreateRequest.FromString,
                    response_serializer=aoi__pb2.AOICreateResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=aoi__pb2.AOIGetRequest.FromString,
                    response_serializer=aoi__pb2.AOIGetResponse.SerializeToString,
            ),
            'upload': grpc.stream_unary_rpc_method_handler(
                    servicer.upload,
                    request_deserializer=aoi__pb2.AOIUploadRequest.FromString,
                    response_serializer=aoi__pb2.AOIUploadResponse.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=aoi__pb2.AOIUpdateRequest.FromString,
                    response_serializer=aoi__pb2.AOIUpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oi.papi.AOIApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('oi.papi.AOIApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AOIApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.AOIApi/create',
            aoi__pb2.AOICreateRequest.SerializeToString,
            aoi__pb2.AOICreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.AOIApi/get',
            aoi__pb2.AOIGetRequest.SerializeToString,
            aoi__pb2.AOIGetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def upload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/oi.papi.AOIApi/upload',
            aoi__pb2.AOIUploadRequest.SerializeToString,
            aoi__pb2.AOIUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.AOIApi/update',
            aoi__pb2.AOIUpdateRequest.SerializeToString,
            aoi__pb2.AOIUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
