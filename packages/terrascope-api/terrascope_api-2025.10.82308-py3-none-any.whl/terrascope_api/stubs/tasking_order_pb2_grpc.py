# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from terrascope_api.models import tasking_order_pb2 as tasking__order__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tasking_order_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaskingOrderApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list = channel.unary_unary(
                '/oi.papi.TaskingOrderApi/list',
                request_serializer=tasking__order__pb2.TaskingOrderListRequest.SerializeToString,
                response_deserializer=tasking__order__pb2.TaskingOrderListResponse.FromString,
                _registered_method=True)
        self.get = channel.unary_unary(
                '/oi.papi.TaskingOrderApi/get',
                request_serializer=tasking__order__pb2.TaskingOrderGetRequest.SerializeToString,
                response_deserializer=tasking__order__pb2.TaskingOrderGetResponse.FromString,
                _registered_method=True)
        self.create = channel.unary_unary(
                '/oi.papi.TaskingOrderApi/create',
                request_serializer=tasking__order__pb2.TaskingOrderCreateRequest.SerializeToString,
                response_deserializer=tasking__order__pb2.TaskingOrderCreateResponse.FromString,
                _registered_method=True)
        self.approve = channel.unary_unary(
                '/oi.papi.TaskingOrderApi/approve',
                request_serializer=tasking__order__pb2.TaskingOrderApproveRequest.SerializeToString,
                response_deserializer=tasking__order__pb2.TaskingOrderApproveResponse.FromString,
                _registered_method=True)
        self.cancel = channel.unary_unary(
                '/oi.papi.TaskingOrderApi/cancel',
                request_serializer=tasking__order__pb2.TaskingOrderCancelRequest.SerializeToString,
                response_deserializer=tasking__order__pb2.TaskingOrderCancelResponse.FromString,
                _registered_method=True)


class TaskingOrderApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list(self, request, context):
        """
        List the TaskingOrders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """
        Get a specified TaskingOrder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """
        Create order request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def approve(self, request, context):
        """
        Approve order request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel(self, request, context):
        """
        Cancel order request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskingOrderApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=tasking__order__pb2.TaskingOrderListRequest.FromString,
                    response_serializer=tasking__order__pb2.TaskingOrderListResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=tasking__order__pb2.TaskingOrderGetRequest.FromString,
                    response_serializer=tasking__order__pb2.TaskingOrderGetResponse.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=tasking__order__pb2.TaskingOrderCreateRequest.FromString,
                    response_serializer=tasking__order__pb2.TaskingOrderCreateResponse.SerializeToString,
            ),
            'approve': grpc.unary_unary_rpc_method_handler(
                    servicer.approve,
                    request_deserializer=tasking__order__pb2.TaskingOrderApproveRequest.FromString,
                    response_serializer=tasking__order__pb2.TaskingOrderApproveResponse.SerializeToString,
            ),
            'cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel,
                    request_deserializer=tasking__order__pb2.TaskingOrderCancelRequest.FromString,
                    response_serializer=tasking__order__pb2.TaskingOrderCancelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oi.papi.TaskingOrderApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('oi.papi.TaskingOrderApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskingOrderApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.TaskingOrderApi/list',
            tasking__order__pb2.TaskingOrderListRequest.SerializeToString,
            tasking__order__pb2.TaskingOrderListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.TaskingOrderApi/get',
            tasking__order__pb2.TaskingOrderGetRequest.SerializeToString,
            tasking__order__pb2.TaskingOrderGetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.TaskingOrderApi/create',
            tasking__order__pb2.TaskingOrderCreateRequest.SerializeToString,
            tasking__order__pb2.TaskingOrderCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def approve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.TaskingOrderApi/approve',
            tasking__order__pb2.TaskingOrderApproveRequest.SerializeToString,
            tasking__order__pb2.TaskingOrderApproveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.TaskingOrderApi/cancel',
            tasking__order__pb2.TaskingOrderCancelRequest.SerializeToString,
            tasking__order__pb2.TaskingOrderCancelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
