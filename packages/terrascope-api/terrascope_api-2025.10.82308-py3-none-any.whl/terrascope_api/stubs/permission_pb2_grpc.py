# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from terrascope_api.models import permission_pb2 as permission__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in permission_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PermissionApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/oi.papi.permission.PermissionApi/create',
                request_serializer=permission__pb2.PermissionCreateRequest.SerializeToString,
                response_deserializer=permission__pb2.PermissionCreateResponse.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/oi.papi.permission.PermissionApi/delete',
                request_serializer=permission__pb2.PermissionDeleteRequest.SerializeToString,
                response_deserializer=permission__pb2.PermissionDeleteResponse.FromString,
                _registered_method=True)
        self.get = channel.unary_unary(
                '/oi.papi.permission.PermissionApi/get',
                request_serializer=permission__pb2.PermissionGetRequest.SerializeToString,
                response_deserializer=permission__pb2.PermissionGetResponse.FromString,
                _registered_method=True)
        self.list = channel.unary_unary(
                '/oi.papi.permission.PermissionApi/list',
                request_serializer=permission__pb2.PermissionListRequest.SerializeToString,
                response_deserializer=permission__pb2.PermissionListResponse.FromString,
                _registered_method=True)
        self.get_metadata = channel.unary_unary(
                '/oi.papi.permission.PermissionApi/get_metadata',
                request_serializer=permission__pb2.PermissionGetMetadataRequest.SerializeToString,
                response_deserializer=permission__pb2.PermissionGetMetadataResponse.FromString,
                _registered_method=True)


class PermissionApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """
        Adds Permissions for the specified users to the specified resources.
        Works for all resource types, but does not add permissions for any dependent or child resources.
        Subject ID could be a User, a UserCollection or the root subject.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """
        Removes Permissions for the specified users from the specified resources.
        Works for all resource types., but does not remove Permissions for any dependent or child resources.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """
        Checks Permissions for the specified users (or authenticated user) to the specified resources.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """
        Lists Permissions for the specified users (or authenticated user) to the specified resources.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_metadata(self, request, context):
        """
        Gets Permission Metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PermissionApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=permission__pb2.PermissionCreateRequest.FromString,
                    response_serializer=permission__pb2.PermissionCreateResponse.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=permission__pb2.PermissionDeleteRequest.FromString,
                    response_serializer=permission__pb2.PermissionDeleteResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=permission__pb2.PermissionGetRequest.FromString,
                    response_serializer=permission__pb2.PermissionGetResponse.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=permission__pb2.PermissionListRequest.FromString,
                    response_serializer=permission__pb2.PermissionListResponse.SerializeToString,
            ),
            'get_metadata': grpc.unary_unary_rpc_method_handler(
                    servicer.get_metadata,
                    request_deserializer=permission__pb2.PermissionGetMetadataRequest.FromString,
                    response_serializer=permission__pb2.PermissionGetMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oi.papi.permission.PermissionApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('oi.papi.permission.PermissionApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PermissionApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.permission.PermissionApi/create',
            permission__pb2.PermissionCreateRequest.SerializeToString,
            permission__pb2.PermissionCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.permission.PermissionApi/delete',
            permission__pb2.PermissionDeleteRequest.SerializeToString,
            permission__pb2.PermissionDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.permission.PermissionApi/get',
            permission__pb2.PermissionGetRequest.SerializeToString,
            permission__pb2.PermissionGetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.permission.PermissionApi/list',
            permission__pb2.PermissionListRequest.SerializeToString,
            permission__pb2.PermissionListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_metadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oi.papi.permission.PermissionApi/get_metadata',
            permission__pb2.PermissionGetMetadataRequest.SerializeToString,
            permission__pb2.PermissionGetMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
