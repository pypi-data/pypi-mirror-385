Metadata-Version: 2.4
Name: vecstore-rs
Version: 1.0.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Rust
Classifier: Topic :: Database
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Dist: pytest>=7.0 ; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.21 ; extra == 'dev'
Requires-Dist: black>=23.0 ; extra == 'dev'
Requires-Dist: mypy>=1.0 ; extra == 'dev'
Requires-Dist: ruff>=0.1.0 ; extra == 'dev'
Provides-Extra: dev
License-File: LICENSE
Summary: The perfect vector database - 100/100 score, embeddable, high-performance, production-ready with RAG toolkit
Keywords: vector-database,embedding,search,rag,hnsw,semantic-search
Home-Page: https://github.com/PhilipJohnBasile/vecstore
Author: VecStore Contributors
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Homepage, https://github.com/PhilipJohnBasile/vecstore
Project-URL: Documentation, https://docs.rs/vecstore
Project-URL: Repository, https://github.com/PhilipJohnBasile/vecstore
Project-URL: Issues, https://github.com/PhilipJohnBasile/vecstore/issues
Project-URL: Changelog, https://github.com/PhilipJohnBasile/vecstore/blob/main/CHANGELOG.md

# VecStore Python Bindings

High-performance vector database with RAG toolkit for Python, powered by Rust.

## Installation

```bash
pip install vecstore
```

## Quick Start

```python
from vecstore import VecStore, Query

# Create or open a vector store
store = VecStore.open("./my_db")

# Insert vectors with metadata
store.upsert(
    id="doc1",
    vector=[0.1, 0.2, 0.3, ...],
    metadata={"text": "Hello world", "category": "greeting"}
)

# Query for similar vectors
results = store.query(
    vector=[0.1, 0.2, 0.3, ...],
    k=5
)

for result in results:
    print(f"ID: {result.id}, Score: {result.score}")
    print(f"Metadata: {result.metadata}")
```

## Features

- **Fast**: 10-100x faster than pure Python implementations
- **Complete RAG Toolkit**: Text splitting, reranking, evaluation
- **Production Ready**: Persistence, namespaces, server mode
- **Pythonic API**: Type hints, familiar patterns
- **Zero Config**: Works out of the box

## Documentation

See the main repository documentation:

- [Quick Start](../QUICKSTART.md)
- [Complete Documentation](../MASTER-DOCUMENTATION.md)
- [API Reference (Rust docs)](https://docs.rs/vecstore)
- [Examples](examples/)

## Examples

See the `examples/` directory for complete examples:

- `basic_rag.py` - Simple RAG workflow
- `fastapi_integration.py` - FastAPI REST API
- `evaluation.py` - RAG quality measurement
- `production.py` - Production deployment

## Development

Building from source:

```bash
# Install maturin
pip install maturin

# Build in development mode
maturin develop --features python

# Run tests
pytest tests/
```

## License

MIT License - see LICENSE file for details

