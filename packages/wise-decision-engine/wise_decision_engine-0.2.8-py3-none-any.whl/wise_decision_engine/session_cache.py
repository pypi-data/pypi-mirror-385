"""
Sistema de cache de sess√£o para WiseDecisionEngine.

Implementa cache inteligente focado em performance sem comprometer atualiza√ß√µes:
- Session Cache: V√°lido apenas durante a sess√£o atual (notebook/job)
- Auto-refresh: Limpa automaticamente quando reinicia sess√£o  
- Thread-safe: Seguro para uso concorrente
- Zero risco: Sempre usa vers√£o atual entre diferentes execu√ß√µes
"""

import json
import time
import threading
import os
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, Union
from dataclasses import dataclass
from enum import Enum


@dataclass
class CacheMetrics:
    """M√©tricas de performance do cache."""
    hits: int = 0
    misses: int = 0
    evictions: int = 0
    total_size: int = 0
    
    @property
    def hit_rate(self) -> float:
        """Taxa de acerto do cache."""
        total = self.hits + self.misses
        return (self.hits / total * 100) if total > 0 else 0.0
    
    def reset(self):
        """Reseta todas as m√©tricas."""
        self.hits = 0
        self.misses = 0
        self.evictions = 0
        self.total_size = 0


@dataclass
class SessionEntry:
    """Entrada do cache de sess√£o."""
    content: Dict[str, Any]
    session_id: str
    created_at: float
    access_count: int = 0
    
    def touch(self):
        """Atualiza contador de acesso."""
        self.access_count += 1
    
    def is_valid_for_session(self, current_session_id: str) -> bool:
        """Verifica se entrada √© v√°lida para a sess√£o atual."""
        return self.session_id == current_session_id


class SessionCache:
    """
    Cache de sess√£o - v√°lido apenas durante a sess√£o atual.
    
    Funcionalidades:
    - Auto-refresh em novas sess√µes (notebook restart, novo job)
    - Thread-safe para uso concorrente
    - Zero risco de usar vers√µes desatualizadas entre sess√µes
    - Performance m√°xima dentro da mesma sess√£o
    
    Perfeito para Databricks/Spark onde:
    - Dentro de um job: m√°xima performance (cache hit)
    - Entre jobs: sempre vers√£o atual (cache miss = reload)
    """
    
    def __init__(self, max_size: int = 50, enable_logging: bool = True):
        """
        Inicializa cache de sess√£o.
        
        Args:
            max_size: N√∫mero m√°ximo de decis√µes em cache
            enable_logging: Habilita logs de limpeza autom√°tica
        """
        self.max_size = max_size
        self.enable_logging = enable_logging
        self._cache: Dict[str, SessionEntry] = {}
        self._lock = threading.RLock()
        self._metrics = CacheMetrics()
        self._session_id = self._get_current_session_id()
    
    def _get_current_session_id(self) -> str:
        """
        Gera ID √∫nico para a sess√£o atual.
        
        Combina PID + timestamp de in√≠cio para detectar reinicializa√ß√µes.
        Funciona para:
        - Notebook Databricks (reinicializa√ß√£o = nova sess√£o)
        - Jobs Spark (novo job = nova sess√£o)
        - Desenvolvimento local (restart = nova sess√£o)
        """
        try:
            import psutil
            # PID + timestamp de cria√ß√£o do processo = sess√£o √∫nica
            process = psutil.Process(os.getpid())
            create_time = process.create_time()
            return f"{os.getpid()}_{create_time:.0f}"
        except ImportError:
            # Fallback se psutil n√£o estiver dispon√≠vel
            return f"{os.getpid()}_{time.time():.0f}"
    
    def _check_session_validity(self) -> None:
        """
        Verifica se ainda estamos na mesma sess√£o.
        Se n√£o, limpa o cache automaticamente.
        
        Isso garante que:
        - Reiniciar notebook = cache limpo = vers√£o atual
        - Novo job Spark = cache limpo = vers√£o atual  
        - Mesmo job/sess√£o = cache hit = m√°xima performance
        """
        current_session = self._get_current_session_id()
        if current_session != self._session_id:
            # Nova sess√£o detectada - limpa cache
            old_size = len(self._cache)
            self._cache.clear()
            self._session_id = current_session
            
            if old_size > 0:
                self._metrics.evictions += old_size
                if self.enable_logging:
                    print(f"üîÑ Session cache refreshed: {old_size} decisions cleared (new session detected)")
    
    def get(self, key: str) -> Optional[Dict[str, Any]]:
        """Busca decis√£o no cache de sess√£o."""
        with self._lock:
            # Verifica validade da sess√£o primeiro
            self._check_session_validity()
            
            if key not in self._cache:
                self._metrics.misses += 1
                return None
            
            entry = self._cache[key]
            
            # Dupla verifica√ß√£o de sess√£o (paranoia, mas seguro)
            if not entry.is_valid_for_session(self._session_id):
                del self._cache[key]
                self._metrics.misses += 1
                return None
            
            # Cache hit - atualiza m√©tricas
            entry.touch()
            self._metrics.hits += 1
            return entry.content.copy()  # Retorna c√≥pia segura
    
    def put(self, key: str, content: Dict[str, Any]) -> None:
        """Armazena decis√£o no cache de sess√£o."""
        with self._lock:
            # Verifica validade da sess√£o
            self._check_session_validity()
            
            # Remove entrada existente se houver
            if key in self._cache:
                del self._cache[key]
            
            # Faz eviction se necess√°rio (simples FIFO)
            while len(self._cache) >= self.max_size:
                # Remove entrada mais antiga
                oldest_key = next(iter(self._cache))
                del self._cache[oldest_key]
                self._metrics.evictions += 1
            
            # Adiciona nova entrada
            entry = SessionEntry(
                content=content.copy(),
                session_id=self._session_id,
                created_at=time.time()
            )
            self._cache[key] = entry
    
    def invalidate(self, key: str) -> bool:
        """Remove decis√£o espec√≠fica do cache."""
        with self._lock:
            if key in self._cache:
                del self._cache[key]
                return True
            return False
    
    def clear(self) -> None:
        """Limpa todo o cache manualmente."""
        with self._lock:
            evicted_count = len(self._cache)
            self._cache.clear()
            self._metrics.evictions += evicted_count
    
    def get_metrics(self) -> CacheMetrics:
        """Retorna m√©tricas do cache."""
        with self._lock:
            return CacheMetrics(
                hits=self._metrics.hits,
                misses=self._metrics.misses,
                evictions=self._metrics.evictions,
                total_size=len(self._cache)
            )
    
    def print_metrics(self) -> None:
        """Imprime m√©tricas formatadas."""
        metrics = self.get_metrics()
        print(f"üìä Session Cache Metrics:")
        print(f"   Hit Rate: {metrics.hit_rate:.1f}%")
        print(f"   Hits: {metrics.hits}")
        print(f"   Misses: {metrics.misses}")
        print(f"   Cache Size: {metrics.total_size}")
        print(f"   Auto-evictions: {metrics.evictions}")


# Inst√¢ncia global padr√£o
_default_session_cache = SessionCache()


def get_default_session_cache() -> SessionCache:
    """Retorna inst√¢ncia padr√£o do session cache."""
    return _default_session_cache


def set_default_session_cache(max_size: int = 50, enable_logging: bool = True) -> None:
    """Configura session cache padr√£o global."""
    global _default_session_cache
    _default_session_cache = SessionCache(max_size, enable_logging)


def create_cache_key(source: str, identifier: str) -> str:
    """
    Cria chave de cache padronizada.
    
    Args:
        source: Tipo de fonte (file, databricks, etc.)
        identifier: Identificador √∫nico da decis√£o
        
    Returns:
        Chave de cache formatada
    """
    return f"{source}:{identifier}"