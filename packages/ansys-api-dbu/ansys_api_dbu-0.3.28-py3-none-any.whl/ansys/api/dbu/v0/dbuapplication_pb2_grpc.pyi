"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.dbu.v0.dbuapplication_pb2
import grpc

class DbuApplicationStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    RunScriptFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileRequest,
        ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileResponse] = ...
    """Runs a script based on a file."""

    RunNotTrackedScriptFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileRequest,
        ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileResponse] = ...
    """Runs a script based on a file without having it recorded by feature tracking.
    ATTENTION! Changing geometry within a not tracked would corrupt the feature's tracking state.
    """

    RunScript: grpc.UnaryUnaryMultiCallable[
        ansys.api.dbu.v0.dbuapplication_pb2.RunScriptRequest,
        ansys.api.dbu.v0.dbuapplication_pb2.RunScriptResponse] = ...
    """Runs a script based on a supplied string."""

    RunCommand: grpc.UnaryUnaryMultiCallable[
        ansys.api.dbu.v0.dbuapplication_pb2.RunCommandRequest,
        ansys.api.dbu.v0.dbuapplication_pb2.RunCommandResponse] = ...
    """Runs a command. A command can be exposed by Addin."""


class DbuApplicationServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def RunScriptFile(self,
        request: ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileResponse:
        """Runs a script based on a file."""
        pass

    @abc.abstractmethod
    def RunNotTrackedScriptFile(self,
        request: ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.dbu.v0.dbuapplication_pb2.RunScriptFileResponse:
        """Runs a script based on a file without having it recorded by feature tracking.
        ATTENTION! Changing geometry within a not tracked would corrupt the feature's tracking state.
        """
        pass

    @abc.abstractmethod
    def RunScript(self,
        request: ansys.api.dbu.v0.dbuapplication_pb2.RunScriptRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.dbu.v0.dbuapplication_pb2.RunScriptResponse:
        """Runs a script based on a supplied string."""
        pass

    @abc.abstractmethod
    def RunCommand(self,
        request: ansys.api.dbu.v0.dbuapplication_pb2.RunCommandRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.dbu.v0.dbuapplication_pb2.RunCommandResponse:
        """Runs a command. A command can be exposed by Addin."""
        pass


def add_DbuApplicationServicer_to_server(servicer: DbuApplicationServicer, server: grpc.Server) -> None: ...
