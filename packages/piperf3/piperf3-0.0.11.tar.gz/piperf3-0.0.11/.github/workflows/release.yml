name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'src/piperf3/_version.py'
  pull_request:
    paths:
      - 'src/piperf3/_version.py'

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      version: ${{ steps.current.outputs.version }}
      tag: ${{ steps.current.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version from _version.py
        id: current
        run: |
          VERSION=$(grep '__version__ = ' src/piperf3/_version.py | sed 's/__version__ = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Get previous version from git
        id: previous
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare with the base branch
            PREVIOUS_VERSION=$(git show origin/${{ github.base_ref }}:src/piperf3/_version.py 2>/dev/null | grep '__version__ = ' | sed 's/__version__ = "\(.*\)"/\1/' || echo "")
          else
            # For pushes to main, compare with previous commit
            PREVIOUS_VERSION=$(git show HEAD~1:src/piperf3/_version.py 2>/dev/null | grep '__version__ = ' | sed 's/__version__ = "\(.*\)"/\1/' || echo "")
          fi
          echo "version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: version_check
        run: |
          CURRENT="${{ steps.current.outputs.version }}"
          PREVIOUS="${{ steps.previous.outputs.version }}"
          
          echo "Current version: $CURRENT"
          echo "Previous version: $PREVIOUS"
          
          if [ "$CURRENT" != "$PREVIOUS" ] && [ ! -z "$CURRENT" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Version changed from $PREVIOUS to $CURRENT"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No version change detected"
          fi

  build-and-test:
    name: Build and Test Package
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
      - run: uv build
      
      - name: Smoke test (wheel)
        run: uv run --isolated --no-project -p 3.12 --with dist/*.whl tests/smoke_test.py
      
      - name: Smoke test (source distribution)
        run: uv run --isolated --no-project -p 3.12 --with dist/*.tar.gz tests/smoke_test.py

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [check-version, build-and-test]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      needs.check-version.outputs.version_changed == 'true'
    # Environment and permissions trusted publishing.
    environment:
      # Create this environment in the GitHub repository under Settings -> Environments
      name: release
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - uses: astral-sh/setup-uv@v3
      
      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.check-version.outputs.tag }}
          git push origin ${{ needs.check-version.outputs.tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.tag }}
          generate_release_notes: true
          files: dist/*
      
      - run: uv publish --trusted-publishing always