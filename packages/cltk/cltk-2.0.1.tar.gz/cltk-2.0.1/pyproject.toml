[project]
name = "cltk"
version = "2.0.1"
description = "The Classical Language Toolkit"
authors = [
    {name = "Kyle P. Johnson", email = "kyle@kyle-p-johnson.com"},
    {name = "Clément Besnier", email = "clem@clementbesnier.fr"},
]
readme = { file = "README.md", content-type = "text/markdown" }
keywords = ["nlp", "ai", "nltk", "latin", "greek", "sanskrit", "hebrew", "arabic", "chinese"]
requires-python = ">=3.13"
dependencies = [
    "tqdm (>=4.67.1,<5.0.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "pydantic (>=2.11.7,<3.0.0)",
    "colorama (>=0.4.6,<0.5.0)",
    "numpy (>=2.3.2,<3.0.0)"
]

[project.optional-dependencies]
openai = [
    "openai (>=1.101.0,<2.0.0)",
]
stanza = [
    "stanza (>=1.8.2,<2.0.0)",
]
ollama = [
    "ollama (>=0.3.0,<1.0.0)",
    "httpx (<0.29)",  # pinned since ollama pulls a beta httpx with breaking changes
]

[project.urls]
Homepage = "http://cltk.org"
Repository = "https://github.com/cltk/cltk"
Documentation = "https://docs.cltk.org"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# Poetry-specific packaging config
[tool.poetry]
# Ensure Poetry discovers packages from the src layout
packages = [
    { include = "cltk", from = "src" }
]
# Explicitly include data files in both sdist and wheel
include = [
    { path = "src/cltk/py.typed", format = ["sdist", "wheel"] },
    { path = "src/cltk/languages/glottolog.json", format = ["sdist", "wheel"] }
]
[tool.poetry.group.development.dependencies]
mypy = "^1.17.1"
ipython = "^9.4.0"
jupyter = "^1.1.1"
colorama = "^0.4.6"
lxml = "^6.0.1"
ruff = "^0.6.0"
pre-commit = "^3.7.0"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
syrupy = "^4.6.0"
hypothesis = "^6.112.0"
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.20"
mkdocstrings = {version = "^0.27.0", extras = ["python"]}
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.2"
mkdocs-section-index = "^0.3.10"
mkdocs-autorefs = "^1.4.3"
mkdocs-git-revision-date-localized-plugin = "^1.4.7"
pymdown-extensions = "^10.8"
griffe = "^1.14.0"
interrogate = "^1.7.0"

# Ruff configuration: formatter + lint (including isort rules)
black = "^25.9.0"

[tool.poetry.group.dev.dependencies]
types-requests = "^2.32.4.20250913"

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = ["E", "F", "I", "D"]
# Keep lines long where appropriate; relax docstring ‘blank line’ and
# multi-line summary rules for Google style; do not fail on missing docstrings.
ignore = [
  "E501",
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D107", # Missing docstring in __init__
  "D203", # One-blank-line before class docstring
  "D213", # Multi-line docstring summary should start at the second line
]
fixable = ["E", "F", "I", "D"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["cltk"]
combine-as-imports = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_ignores = true
no_implicit_optional = true
check_untyped_defs = true
disallow_untyped_defs = true
pretty = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"
plugins = ["pydantic.mypy"]

# Interrogate: docstring coverage (non-blocking; run locally or in optional CI job)
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-private = true
ignore-property-decorators = true
fail-under = 0
exclude = ["tests", "docs", "v1_backup", "site"]
verbose = 1

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-ra"
xfail_strict = true
filterwarnings = [
  "error::DeprecationWarning",
  "error::PendingDeprecationWarning",
]

[[tool.mypy.overrides]]
module = [
  "openai.*",
  "tqdm.*",
  "colorama.*",
  "stanza",
  "stanza.*",
  "ollama",
  "ollama.*",
]
ignore_missing_imports = true
