name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync
        uv add hatch-vcs setuptools-scm[toml]
    
    - name: Build Cython extensions
      run: uv run python setup_hybrid.py build_ext --inplace
    
    - name: Run tests
      run: |
        uv run pytest tests/good_common/utilities/test_cython_optimized.py -v
        uv run pytest tests/good_common/utilities/test__utilities_collections.py -v
        uv run pytest tests/good_common/utilities/test__utilities_functional.py -v
    
    - name: Check optimization status
      run: |
        uv run python -c "
        from good_common.utilities._optimized import get_optimization_status, is_optimized
        print('Optimization status:', get_optimization_status())
        print('Is optimized:', is_optimized())
        "
    
    - name: Run benchmarks (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: uv run python scripts/benchmark_cython.py

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install setuptools-scm for version detection
      run: pip install setuptools-scm[toml]
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -m setuptools_scm)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
        # Write version file for the build
        cat > src/good_common/_version.py << EOF
        """Version information."""
        __version__ = "$VERSION"
        EOF
        
        echo "Wrote version $VERSION to src/good_common/_version.py"
      shell: bash
    
    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython numpy setuptools wheel cibuildwheel build hatch-vcs setuptools-scm[toml]
    
    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD: cp313-*
        CIBW_SKIP: "*-musllinux_*"
        # For macOS: Only build universal2 (contains both x86_64 and arm64)
        # This is much faster than building x86_64, arm64, AND universal2
        CIBW_ARCHS_MACOS: universal2
        CIBW_ARCHS_LINUX: x86_64 aarch64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_BEFORE_BUILD: pip install cython numpy setuptools-scm[toml] hatch-vcs
        CIBW_ENVIRONMENT: "SETUPTOOLS_SCM_PRETEND_VERSION=${{ steps.get_version.outputs.VERSION }}"
        CIBW_ENVIRONMENT_PASS_LINUX: SETUPTOOLS_SCM_PRETEND_VERSION
        CIBW_BUILD_VERBOSITY: 1
        # Skip testing - already tested in the test job
        CIBW_TEST_SKIP: "*"
        # Also set it at the workflow level
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.get_version.outputs.VERSION }}
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython numpy setuptools build hatch-vcs setuptools-scm[toml]
    
    - name: Build source distribution
      run: python -m build --sdist
    
    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Flatten artifacts
      run: |
        mkdir -p dist
        find artifacts -name "*.whl" -exec cp {} dist/ \;
        find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  publish_test:
    name: Publish to Test PyPI
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Flatten artifacts
      run: |
        mkdir -p dist
        find artifacts -name "*.whl" -exec cp {} dist/ \;
        find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/