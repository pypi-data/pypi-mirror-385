import gaiaengine as gaia

import math
import os
from pathlib import Path

from . import AOE_COMMON_DIR, AOE_INSTALL_DIR, LOCAL_ASSET_DIR, cache_aoe_file


class AoETerrain(gaia.Heightmap):
# Those are taken from this spreadsheet 
# https://docs.google.com/spreadsheets/d/1Fg4BM8dY0FoJ5yoQtL5S4f9LEcMIrYbH0skrFBnrS14
# whose link was taken from there:
# http://aok.heavengames.com/blacksmith/showfile.php?fileid=12226
# The last textures (after g_m29) have been manually hand-picked to match DE textures to HD ones
# 'g_sh4' was also replaced by 'g_fo2' as it looks to be AoE:DE only as well. (probable error in the spreadsheet)
    AOE_TERRAIN_TEXTURES_ORIG = ['g_grs', 'g_wtr', 'g_bch', 'g_ds3', 'g_sha', 'g_for', 'g_des', 'g_fm1', 'g_fm2', 'g_gr3', 'g_for', 'g_ds2', 'g_gr2', 'g_pal', 'g_pal', 'g_wtr', 'g_grs', 'g_for', 'g_for', 'g_for', 'g_for', 'g_snf', 'g_wt2', 'g_wt3', 'g_rd1', 'g_rd2', 'g_ice', 'g_ds2', 'g_wtr', 'g_fc1', 'g_fc2', 'g_fc3', 'g_sno', 'g_snd', 'g_sng', 'g_ice', 'g_snd', 'g_ice', 'g_sr1', 'g_sr2', 'g_rck', 'g_gr5', 'g_ds4', 'g_rd3', 'g_gr4', 'g_pal1', 'g_qs', 'g_bla', 'g_des', 'g_ds4', 'g_gr5', 'g_bc4', 'g_bc2', 'g_bc3', 'g_sh3', 'g_fo2', 'g_fo2', 'g_wt4', 'g_wt5', 'g_sh2', 'g_gr6', 'g_rd4', 'g_fo2', 'g_rm1', 'g_rm2', 'g_rc1', 'g_rc2', 'g_rc3', 'g_r01', 'g_r01', 'g_m00', 'g_m01', 'g_m02', 'g_m03', 'g_m04', 'g_m05', 'g_m06', 'g_m07', 'g_m08', 'g_m09', 'g_m10', 'g_m11', 'g_m12', 'g_m13', 'g_m14', 'g_m15', 'g_m16', 'g_m17', 'g_m18', 'g_m19', 'g_m20', 'g_m21', 'g_m22', 'g_m23', 'g_m24', 'g_m25', 'g_m26', 'g_m27', 'g_m28', 'g_m29', 'g_fo2', 'g_sh2', 'g_rd1', 'g_rd1', 'g_for', 'g_snf', 'g_snf', 'g_bch', 'g_rck', 'g_rck', 'g_for', 'g_fo2', 'g_gr2']

# AOE_TERRAIN_TEXTURES_ORIG without duplicates, in order of appearance
    AOE_TERRAIN_TEXTURES = ['g_grs', 'g_wtr', 'g_bch', 'g_ds3', 'g_sha', 'g_for', 'g_des', 'g_fm1', 'g_fm2', 'g_gr3', 'g_ds2', 'g_gr2', 'g_pal', 'g_snf', 'g_wt2', 'g_wt3', 'g_rd1', 'g_rd2', 'g_ice', 'g_fc1', 'g_fc2', 'g_fc3', 'g_sno', 'g_snd', 'g_sng', 'g_sr1', 'g_sr2', 'g_rck', 'g_gr5', 'g_ds4', 'g_rd3', 'g_gr4', 'g_pal1', 'g_qs', 'g_bla', 'g_bc4', 'g_bc2', 'g_bc3', 'g_sh3', 'g_fo2', 'g_wt4', 'g_wt5', 'g_sh2', 'g_gr6', 'g_rd4', 'g_rm1', 'g_rm2', 'g_rc1', 'g_rc2', 'g_rc3', 'g_r01', 'g_m00', 'g_m01', 'g_m02', 'g_m03', 'g_m04', 'g_m05', 'g_m06', 'g_m07', 'g_m08', 'g_m09', 'g_m10', 'g_m11', 'g_m12', 'g_m13', 'g_m14', 'g_m15', 'g_m16', 'g_m17', 'g_m18', 'g_m19', 'g_m20', 'g_m21', 'g_m22', 'g_m23', 'g_m24', 'g_m25', 'g_m26', 'g_m27', 'g_m28', 'g_m29']

# Corresponding index in AOE_TEXTURE_IDS for each texture of AOE_TERRAIN_TEXTURES_ORIG, generated by the function below
    AOE_TEXTURE_IDS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 10, 11, 12, 12, 1, 0, 5, 5, 5, 5, 13, 14, 15, 16, 17, 18, 10, 1, 19, 20, 21, 22, 23, 24, 18, 23, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 6, 29, 28, 35, 36, 37, 38, 39, 39, 40, 41, 42, 43, 44, 39, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 39, 42, 16, 16, 5, 13, 13, 2, 27, 27, 5, 39, 11]

    def _generate_AOE_TEXTURE_IDS():
        context = gaia.Context()
        window = gaia.Window()
        temp_heightmap = window.create(gaia.Heightmap, gaia.iVec2(1))
        print([temp_heightmap.loadTexture(AoETerrain.get_texture_path(orig_name)) for orig_name in AoETerrain.AOE_TERRAIN_TEXTURES_ORIG])

# Matching AOE_TERRAIN_TEXTURES
    AOE_IS_WATER = [False, True, False, False, False, False, False, False, False, False, False, False, False, False, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True]

    def get_texture_path(texture_name):
        paths_to_try = [str(Path(AOE_COMMON_DIR).joinpath("terrain").joinpath("textures").joinpath(texture_name + "_00_color.png")),
                        str(Path(AOE_COMMON_DIR).joinpath("terrain").joinpath("textures").joinpath(texture_name + "_00_COLOR.png")),
                        str(Path(LOCAL_ASSET_DIR).joinpath(texture_name + "_00_color.png")),
                        str(Path(LOCAL_ASSET_DIR).joinpath(texture_name + "_00_COLOR.png"))]

        for path in paths_to_try:
            if os.path.exists(path):
                return path                
            
        raise IOError("No texture file found for name: " + texture_name + ", AOE install folder: " + AOE_INSTALL_DIR)

    def __init__(self, window, map_data):
        super().__init__(window, gaia.iVec2(1))
        self.reset(map_data)

    def reset(self, map_data):
        # Vertex coordinates and cell coordinates
        # 0,0 --- 0,1 --- 0,2
        #  |  0,0  |  0,1  |
        # 1,0 --- 1,1 --- 1,2
        #  |  1,0  |  1,1  |
        # 2,0 --- 2,1 --- 2,2

        # + 1 because we need one more dimension of vertices compared to cells
        nb_cells = int(math.sqrt(len(map_data)))
        heightmap_dim = nb_cells + 1
        heights = [0.0] * (heightmap_dim * heightmap_dim)
        texture_ids = [0] * len(map_data)
        navigation = [True] * len(map_data)

        for i in range(len(heights)):
            x = i // heightmap_dim
            y = i % heightmap_dim
            max_height = 0.0
            if x > 0 and y > 0:
                max_height = max(max_height, map_data[(x-1) * nb_cells + (y-1)][1])
            if x > 0 and y < nb_cells:
                max_height = max(max_height, map_data[(x-1) * nb_cells +     y][1])
            if x < nb_cells and y > 0:
                max_height = max(max_height, map_data[    x * nb_cells + (y-1)][1])
            if x < nb_cells and y < nb_cells:
                max_height = max(max_height, map_data[    x * nb_cells +     y][1])
            heights[i] = max_height * 0.5

        seen_texture_ids = []
        for i in range(len(texture_ids)):
            texture_id = AoETerrain.AOE_TEXTURE_IDS[map_data[i][0]]
            if texture_id not in seen_texture_ids:
                seen_texture_ids.append(texture_id)
                texture_ids[i] = len(seen_texture_ids) - 1
            else:
                texture_ids[i] = seen_texture_ids.index(texture_id)

            navigation[i] = not AoETerrain.AOE_IS_WATER[texture_id]

        self.resize(gaia.iVec2(nb_cells))
        self.setTextureIDs(texture_ids)
        self.setHeights(heights)

        for texture_id in seen_texture_ids:
            texture_path = AoETerrain.get_texture_path(AoETerrain.AOE_TERRAIN_TEXTURES[texture_id])
            self.loadTexture(texture_path)
            cache_aoe_file(texture_path)

        self.setNavigation(navigation)

    def is_water(self, pos):
        return AoETerrain.AOE_IS_WATER[self.getTextureID(pos)]
