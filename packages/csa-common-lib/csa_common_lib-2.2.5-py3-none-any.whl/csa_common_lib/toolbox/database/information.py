import requests


def get_table_columns(table_name: str, api_key: str) -> list:
    """
    Retrieves all columns and their respective data types in a table 
    from the `db-csa-primary` database.

    Parameters
    ----------
    table_name : str
        Name of the target table.
    api_key : str
        CSA API key generated by AWS API Gateway. For more details, see:
        https://us-east-1.console.aws.amazon.com/apigateway/home?region=us-east-1

    Returns
    -------
    list of list
        A list of lists containing key-value pairs, where each sublist represents 
        a column and its respective data type. For example: 
        [['column_name', 'data_type'], ['column_name', 'data_type'], ...]
    
    Raises
    ------
    Exception
        If an error occurs during the API request or if the response contains 
        an error message.
        
    Example
    -------
    # Example usage (replace the API key and table name with actual values)
    >>> columns = get_table_columns("vault_results", "dIIFfIJPcymzq2TDRhe7chJLVBSlsa7r3axgub00")
    >>> print(columns)
    """
    
    
    url = "https://v9spadcya3.execute-api.us-east-1.amazonaws.com/v1/db-fields"
    headers = {"x-api-key": api_key}

    try:
        # Make the GET request to retrieve the table columns.
        response = requests.get(url, data=table_name, headers=headers)
        
        # Raise an exception for HTTP errors.
        response.raise_for_status()

        response_json = response.json()
        status_code = response_json['status']
        
        if status_code == 200:
            # Parse the JSON response if 'col_data' is present.
            if 'col_data' in response_json:
                # 'col_data' contains [[column_data_list], size], so we return the first element.
                fields = response_json['col_data'][0]
                if fields:
                    return fields
                else:
                    raise Exception(
                        f"The returned list of fields for table '{table_name}' was empty. "
                        f"This is likely due to a spelling error in the table name."
                    )
        else:
            # Extract and raise the error message from the response.
            error_msg = response_json.get('error_msg', 'Unknown error occurred.')
            raise Exception(f"Bad request ({status_code}): {error_msg}")
    
    except Exception as e:
        # Catch and raise any exception with additional context.
        raise Exception(f"An error occurred while fetching table columns: {e}")