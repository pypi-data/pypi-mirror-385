# coding: utf-8

"""
    Toast API

    ## Authentication API  The authentication API returns an authentication token that you can present when your integration client software uses other Toast APIs. For more information about authentication, see [the Toast Developer Guide](https://doc.toasttab.com/doc/devguide/authentication.html).  ## Menus API  Returns information about a restaurant's menus.  _Important:_ Ordering integrations should use menus API V3. Other integration types should continue to use menus API V2 until further notice. See <a href=\"https://doc.toasttab.com/doc/devguide/apiComparingMenusAPIV2AndV3.html\">Comparing menus API V2 and V3</a> for more information.  ## Orders API  The orders API includes operations that create, update, and retrieve information about restaurant guest orders.  Information on orders includes the checks, items ordered, prices, payments, discounts, and customer data.  You can create a new order. The orders API includes an operation to retrieve the order prices before you `POST` the order.  You can add items to an existing check.  The orders API also allows you to retrieve payment information for the order and add a credit card payment to the order. You cannot update an existing payment, but you can update the tip amount.  For delivery orders, you can update the delivery information.  You can retrieve the applicable discounts for an order, and then add a discount to a menu item selection or a check.  The orders API supports email addresses that:    - Are up to 53 characters long.    - Start with the email prefix, ends with the email domain name, where the prefix and domain are separated by an @.    - Use the following supported characters:     - a-z     - A-Z     - 0-9     - _ (underscore)     - International characters are not supported  ## Labor API  Toast labor API is a set of REST web services that you can use to  manage the employees, jobs, and shifts for your restaurant. The  labor API is intended for software engineers, managers, and  technical staff who are responsible for integrating third-party  systems with the Toast platform. ## Restaurants API  Returns information about the configuration of restaurant.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MenuItemSimple(BaseModel):
    """
    Simplified menu item information returned by config/v2/menuItems endpoints. This schema contains a subset of the full MenuItem properties with simpler structure. 
    """ # noqa: E501
    guid: Optional[StrictStr] = Field(default=None, description="A unique identifier for this menu item, assigned by the Toast POS system. ")
    entity_type: Optional[StrictStr] = Field(default=None, description="The type of entity. Always \"MenuItem\" for menu items. ", alias="entityType")
    external_id: Optional[StrictStr] = Field(default=None, description="An external identifier for this menu item, if configured. ", alias="externalId")
    inherit_unit_of_measure: Optional[StrictBool] = Field(default=None, description="Indicates whether this menu item inherits its unit of measure from a parent entity. ", alias="inheritUnitOfMeasure")
    images: Optional[List[StrictStr]] = Field(default=None, description="An array of image URLs or references for this menu item. ")
    inherit_option_groups: Optional[StrictBool] = Field(default=None, description="Indicates whether this menu item inherits its option groups from a parent entity. ", alias="inheritOptionGroups")
    visibility: Optional[StrictStr] = Field(default=None, description="A string that represents where this menu item is visible. Possible values include ALL, POS, KIOSK, TOAST_ONLINE_ORDERING, ORDERING_PARTNERS, GRUBHUB. ")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The unit of measure used to determine the price of the item. For example, $10.00 per gram. ", alias="unitOfMeasure")
    orderable_online: Optional[StrictStr] = Field(default=None, description="Indicates whether this menu item can be ordered online. Possible values include \"Yes\", \"No\". ", alias="orderableOnline")
    name: Optional[StrictStr] = Field(default=None, description="A descriptive name for this menu item, for example, \"Caesar Salad\" or \"Turkey Sandwich\". ")
    plu: Optional[StrictStr] = Field(default=None, description="The price lookup (PLU) code for this menu item. The PLU code can include both numbers and letters. This value contains an empty string if a PLU code has not been defined. ")
    option_groups: Optional[List[Dict[str, Any]]] = Field(default=None, description="An array of option group references for this menu item. ", alias="optionGroups")
    calories: Optional[StrictInt] = Field(default=None, description="The number of calories in this menu item. The calories value can be any positive or negative integer, or zero. This value is null if a calories amount has not been configured for the menu item. ")
    sku: Optional[StrictStr] = Field(default=None, description="The stock keeping unit (SKU) identifier for this menu item. The SKU identifier can include both numbers and letters. This value is null if a SKU has not been defined. ")
    type: Optional[StrictStr] = Field(default=None, description="The type classification of this menu item, if configured. ")
    __properties: ClassVar[List[str]] = ["guid", "entityType", "externalId", "inheritUnitOfMeasure", "images", "inheritOptionGroups", "visibility", "unitOfMeasure", "orderableOnline", "name", "plu", "optionGroups", "calories", "sku", "type"]

    @field_validator('unit_of_measure')
    def unit_of_measure_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'LB', 'OZ', 'KG', 'G']):
            raise ValueError("must be one of enum values ('NONE', 'LB', 'OZ', 'KG', 'G')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MenuItemSimple from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if calories (nullable) is None
        # and model_fields_set contains the field
        if self.calories is None and "calories" in self.model_fields_set:
            _dict['calories'] = None

        # set to None if sku (nullable) is None
        # and model_fields_set contains the field
        if self.sku is None and "sku" in self.model_fields_set:
            _dict['sku'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MenuItemSimple from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "guid": obj.get("guid"),
            "entityType": obj.get("entityType"),
            "externalId": obj.get("externalId"),
            "inheritUnitOfMeasure": obj.get("inheritUnitOfMeasure"),
            "images": obj.get("images"),
            "inheritOptionGroups": obj.get("inheritOptionGroups"),
            "visibility": obj.get("visibility"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "orderableOnline": obj.get("orderableOnline"),
            "name": obj.get("name"),
            "plu": obj.get("plu"),
            "optionGroups": obj.get("optionGroups"),
            "calories": obj.get("calories"),
            "sku": obj.get("sku"),
            "type": obj.get("type")
        })
        return _obj


