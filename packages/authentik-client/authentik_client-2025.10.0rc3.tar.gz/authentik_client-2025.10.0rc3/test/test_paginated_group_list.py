# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2025.10.0-rc3
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from authentik_client.models.paginated_group_list import PaginatedGroupList

class TestPaginatedGroupList(unittest.TestCase):
    """PaginatedGroupList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedGroupList:
        """Test PaginatedGroupList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedGroupList`
        """
        model = PaginatedGroupList()
        if include_optional:
            return PaginatedGroupList(
                pagination = authentik_client.models.pagination.Pagination(
                    next = 1.337, 
                    previous = 1.337, 
                    count = 1.337, 
                    current = 1.337, 
                    total_pages = 1.337, 
                    start_index = 1.337, 
                    end_index = 1.337, ),
                results = [
                    authentik_client.models.group.Group(
                        pk = '', 
                        num_pk = 56, 
                        name = '', 
                        is_superuser = True, 
                        parent = '', 
                        parent_name = '', 
                        users = [
                            56
                            ], 
                        users_obj = [
                            authentik_client.models.partial_user.PartialUser(
                                pk = 56, 
                                username = 'A', 
                                name = '', 
                                is_active = True, 
                                last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                email = '', 
                                attributes = {
                                    'key' : null
                                    }, 
                                uid = '', )
                            ], 
                        attributes = {
                            'key' : null
                            }, 
                        roles = [
                            ''
                            ], 
                        roles_obj = [
                            authentik_client.models.role.Role(
                                pk = '', 
                                name = '', )
                            ], 
                        children = [
                            ''
                            ], 
                        children_obj = [
                            authentik_client.models.group_child.GroupChild(
                                pk = '', 
                                name = '', 
                                is_superuser = True, 
                                group_uuid = '', )
                            ], )
                    ],
                autocomplete = {
                    'key' : null
                    }
            )
        else:
            return PaginatedGroupList(
                pagination = authentik_client.models.pagination.Pagination(
                    next = 1.337, 
                    previous = 1.337, 
                    count = 1.337, 
                    current = 1.337, 
                    total_pages = 1.337, 
                    start_index = 1.337, 
                    end_index = 1.337, ),
                results = [
                    authentik_client.models.group.Group(
                        pk = '', 
                        num_pk = 56, 
                        name = '', 
                        is_superuser = True, 
                        parent = '', 
                        parent_name = '', 
                        users = [
                            56
                            ], 
                        users_obj = [
                            authentik_client.models.partial_user.PartialUser(
                                pk = 56, 
                                username = 'A', 
                                name = '', 
                                is_active = True, 
                                last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                email = '', 
                                attributes = {
                                    'key' : null
                                    }, 
                                uid = '', )
                            ], 
                        attributes = {
                            'key' : null
                            }, 
                        roles = [
                            ''
                            ], 
                        roles_obj = [
                            authentik_client.models.role.Role(
                                pk = '', 
                                name = '', )
                            ], 
                        children = [
                            ''
                            ], 
                        children_obj = [
                            authentik_client.models.group_child.GroupChild(
                                pk = '', 
                                name = '', 
                                is_superuser = True, 
                                group_uuid = '', )
                            ], )
                    ],
                autocomplete = {
                    'key' : null
                    },
        )
        """

    def testPaginatedGroupList(self):
        """Test PaginatedGroupList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
