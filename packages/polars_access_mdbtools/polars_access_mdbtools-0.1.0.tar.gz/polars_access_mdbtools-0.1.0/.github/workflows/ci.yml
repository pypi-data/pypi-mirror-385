name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    timeout-minutes: 5
    strategy:
      matrix:
        # os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        # python-version: ["3.11", "3.12", "3.13"]
        # polars-version: ["1.20", "1.30", "1.31", "1.32", "1.33", "1.34"]
        include:
          # Base case
          - os: ubuntu-latest
            python-version: "3.12"
            polars-version: "1.31"

          # OS variations
          - os: macos-latest
            python-version: "3.12"
            polars-version: "1.31"
          - os: macos-latest # Another mac variant.
            python-version: "3.11"
            polars-version: "1.34"
          - os: windows-latest
            python-version: "3.12"
            polars-version: "1.31"
          - os: windows-latest # Another Windows variant.
            python-version: "3.13"
            polars-version: "1.34"

          # Python variations
          - os: ubuntu-latest
            python-version: "3.11"
            polars-version: "1.31"
          - os: ubuntu-latest
            python-version: "3.13"
            polars-version: "1.31"

          # Polars variations
          - os: ubuntu-latest
            python-version: "3.12"
            polars-version: "1.20"
          - os: ubuntu-latest
            python-version: "3.12"
            polars-version: "1.30"
          - os: ubuntu-latest
            python-version: "3.12"
            polars-version: "1.32"
          - os: ubuntu-latest
            python-version: "3.12"
            polars-version: "1.33"
          - os: ubuntu-latest
            python-version: "3.12"
            polars-version: "1.34"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Set up Python
        run: uv python install

      - name: Install uv dependencies (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          if [ -n "${{ matrix.polars-version || '' }}" ]; then
            echo "Overriding Polars version to ${{ matrix.polars-version }}"
            uv lock --upgrade-package polars==${{ matrix.polars-version }}
            uv sync --all-extras
          else
            uv sync --all-extras
          fi
      - name: Install uv dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if ($env:MATRIX_POLARS_VERSION) {
            Write-Host "Overriding Polars version to $env:MATRIX_POLARS_VERSION"
            uv lock --upgrade-package polars==$env:MATRIX_POLARS_VERSION
            uv sync --all-extras
          } else {
            uv sync --all-extras
          }

      - name: Run linting
        run: |
          uv run python -c "import polars ; polars.show_versions()"
          uv run ruff format --check .
          uv run ruff check .

      - name: Run type checking
        # Skip type checking on certain versions.
        if: matrix.polars-version != '1.33' && matrix.polars-version != '1.34'
        run: uv run pyright .

      # Linux (Ubuntu)
      - name: Install MDBTools on Ubuntu
        if: runner.os == 'Linux'
        run: |
          # Remove mandb (to speed up apt installs).
          sudo apt-get remove -y mandb || true
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get update
          sudo apt-get install -y mdbtools

      # macOS (Homebrew)
      - name: Install MDBTools on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install mdbtools

      # Windows (download from build at https://github.com/lsgunth/mdbtools-win)
      - name: Install MDBTools on Windows
        if: runner.os == 'Windows'
        run: |
          $url = "https://github.com/lsgunth/mdbtools-win/archive/refs/tags/v1.0.0.zip"
          $zipPath = "$env:RUNNER_TEMP\mdbtools-win-1.0.0.zip"
          $extractRoot = "$env:RUNNER_TEMP\mdbtools"
          $installPath = "$env:GITHUB_WORKSPACE\mdbtools"

          # Download the zip file
          Invoke-WebRequest -Uri $url -OutFile $zipPath

          # Create the extraction root and install directories
          New-Item -ItemType Directory -Force -Path $extractRoot | Out-Null
          New-Item -ItemType Directory -Force -Path $installPath | Out-Null

          # Extract the zip file
          Expand-Archive -Path $zipPath -DestinationPath $extractRoot -Force

          # Move contents from the subfolder (mdbtools-win-1.0.0) to install path
          $innerDir = Join-Path $extractRoot "mdbtools-win-1.0.0"
          Copy-Item -Path (Join-Path $innerDir "*") -Destination $installPath -Recurse -Force

          # Add install path to PATH
          Write-Host "Adding $installPath to PATH"
          echo "$installPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          Write-Host "MDBTools installed at $installPath"
        shell: pwsh

      - name: Verify MDBTools installation
        run: |
          mdb-ver --version

      - name: Run tests
        run: uv run pytest tests/
