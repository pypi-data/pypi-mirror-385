[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "veris-ai"
version = "1.14.1"
description = "A Python package for Veris AI tools"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Mehdi Jamei", email = "mehdi@veris.ai" }
]
dependencies = [
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "requests>=2.31.0",
    "opentelemetry-sdk>=1.34.1",
    "opentelemetry-exporter-otlp>=1.34.1",
    "opentelemetry-instrumentation>=0.55b1",
    "opentelemetry-instrumentation-fastapi>=0.55b1",
    "opentelemetry-instrumentation-requests>=0.55b1",
    "opentelemetry-instrumentation-httpx>=0.55b1",
    "opentelemetry-instrumentation-mcp>=0.44.1",
    "opentelemetry-api>=1.34.1",
    "logfire>=4.3.3",
    "tenacity>=9.1.2",
]

[project.urls]
"Homepage" = "https://github.com/veris-ai/veris-python-sdk"
"Bug Tracker" = "https://github.com/veris-ai/veris-python-sdk/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/veris_ai"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]

[tool.mypy]
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "fastapi_mcp.*",
    "agents.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "A",  # flake8-builtins
    "C90", # mccabe complexity
    "D",  # pydocstyle
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "ANN204",  # Missing type annotation for *args
    "ANN205",  # Missing type annotation for **kwargs
    "COM812", # Trailing comma conflicts with formatter
    "PLC0415",  # allow non-top-level imports
    "I001",  # ignore unsorted/unformatted import block
    "EM101", # ignore exception must not use a string literal
    "D202", # ignore No blank lines allowed after function docstring
    "C901", # ignore Complexity is too high
    "TC002", # ignore move X into type checking
    "PLR0915", # ignore Too many statements
]

[tool.ruff.lint.isort]
known-first-party = ["veris_ai"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",    # Ignore documentation requirements
    "ANN",  # Ignore type annotation requirements
    "S",    # Ignore security warnings
    "ARG",  # Ignore unused arguments
    "PLR",  # Ignore pylint refactor suggestions
    "N",    # Ignore naming conventions
    "T201", # Ignore print statements
    "E",    # Ignore style errors
    "F",    # Ignore pyflakes warnings
    "B",    # Ignore bugbear warnings
    "C4",   # Ignore comprehension warnings
    "UP",   # Ignore upgrade suggestions
    "SLF",  # Ignore self warnings
    "ERA",  # Ignore eradicate warnings
    "PD",   # Ignore pandas warnings
    "PGH",  # Ignore pygrep-hooks
    "PL",   # Ignore pylint warnings
    "PT"    # Ignore pytest warnings
]
"examples/*" = [
    "T201", # Allow print statements in examples
    "E402", # Allow module level imports not at top
    "F401", # Allow unused imports in examples
]

[tool.semantic_release]
version_variables = ["pyproject.toml:version"]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "uv build"
dist_path = "dist/"
upload_to_repository = true
repository_url = "https://upload.pypi.org/legacy/"
commit_message = "chore: release v{version}"
commit_parser = "conventional"
major_on_zero = false
tag_format = "v{version}" 

[tool.uv.sources]
veris-ai = { workspace = true }

[project.optional-dependencies]
dev = [
    "ruff>=0.12.4",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "mypy>=1.17.0",
    "types-requests>=2.32.4.20250611",
    "pre-commit>=3.3.3",
    "uvicorn>=0.30.0",
]
fastapi = [
    "fastapi>=0.116.1",
    "fastapi-mcp>=0.4.0",
]
agents = [
    "openai-agents>=0.2.5",
]
instrument = [
    "wrapt>=1.14.0",
]
