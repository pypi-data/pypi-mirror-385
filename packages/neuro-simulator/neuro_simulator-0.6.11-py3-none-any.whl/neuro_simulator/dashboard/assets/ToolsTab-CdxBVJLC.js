import{d as F,u as R,C as W,b as E,k as G,y as I,m as J,e as c,c as x,o as u,w as e,f as t,i as n,g as _,t as o,h as l,n as v,F as T,p as k}from"./index-CxlwjfZg.js";const O={class:"d-flex mb-4"},z={class:"text-caption"},H={class:"text-left"},L={class:"text-left"},P={class:"text-center"},j={class:"text-center"},q={class:"text-center"},K={class:"text-center"},Y=F({__name:"ToolsTab",setup(Q){const{t:r}=R(),m=W(),i=E(),f=G({neuro_agent:[],memory_manager:[]});I(()=>m.allocations,a=>{f.value=JSON.parse(JSON.stringify(a||{neuro_agent:[],memory_manager:[]}))},{deep:!0,immediate:!0});async function M(){if(i.isConnected)try{await i.sendAdminWsMessage("set_agent_tool_allocations",{allocations:f.value}),console.log("Tool allocations saved successfully!")}catch(a){console.error("Failed to save allocations:",a)}}async function N(){if(i.isConnected)try{await i.sendAdminWsMessage("reload_tools")}catch(a){console.error("Failed to reload tools:",a)}}async function B(){if(i.isConnected)try{const[a,d]=await Promise.all([i.sendAdminWsMessage("get_all_tools"),i.sendAdminWsMessage("get_agent_tool_allocations")]);console.log("DEBUG: toolsResponse:",a),console.log("DEBUG: allocationsResponse:",d),m.handleAvailableToolsUpdate(a.tools),m.handleAllocationsUpdate(d.allocations)}catch(a){console.error("Failed to fetch tools initial data:",a)}}return J(()=>{B()}),(a,d)=>{const w=c("v-btn"),p=c("v-col"),g=c("v-row"),h=c("v-card-title"),C=c("v-checkbox-btn"),U=c("v-table"),y=c("v-card-text"),b=c("v-card"),S=c("v-chip"),V=c("v-chip-group"),D=c("v-container");return u(),x(D,{fluid:""},{default:e(()=>[t(g,null,{default:e(()=>[t(p,{cols:"12"},{default:e(()=>[n("div",O,[t(w,{onClick:N,class:"mr-2"},{default:e(()=>[_(o(l(r)("Reload Tools")),1)]),_:1}),t(w,{onClick:M,color:"primary"},{default:e(()=>[_(o(l(r)("Save Allocations")),1)]),_:1})]),n("p",z,o(l(r)("Here you can assign available tool tags to Agents. The Neuro Agent is responsible for interacting with the audience, while the Memory Agent is responsible for organizing memories in the background.")),1)]),_:1})]),_:1}),t(g,null,{default:e(()=>[t(p,{cols:"12"},{default:e(()=>[t(b,{variant:"outlined"},{default:e(()=>[t(h,null,{default:e(()=>[_(o(l(r)("All Available Tools")),1)]),_:1}),t(y,null,{default:e(()=>[t(U,{density:"compact"},{default:e(()=>[n("thead",null,[n("tr",null,[n("th",H,o(l(r)("Tool Name")),1),n("th",L,o(l(r)("Description")),1),n("th",P,o(l(r)("Neuro Agent")),1),n("th",j,o(l(r)("Memory Agent")),1)])]),n("tbody",null,[(u(!0),v(T,null,k(l(m).availableTools,s=>(u(),v("tr",{key:s.name},[n("td",null,o(s.name),1),n("td",null,o(s.description),1),n("td",q,[t(C,{modelValue:f.value.neuro_agent,"onUpdate:modelValue":d[0]||(d[0]=A=>f.value.neuro_agent=A),value:s.name,"hide-details":""},null,8,["modelValue","value"])]),n("td",K,[t(C,{modelValue:f.value.memory_manager,"onUpdate:modelValue":d[1]||(d[1]=A=>f.value.memory_manager=A),value:s.name,"hide-details":""},null,8,["modelValue","value"])])]))),128))])]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),t(g,null,{default:e(()=>[t(p,{md:"6",cols:"12"},{default:e(()=>[t(b,{variant:"outlined"},{default:e(()=>[t(h,null,{default:e(()=>[_(o(l(r)("Neuro Agent Toolset")),1)]),_:1}),t(y,null,{default:e(()=>[t(V,{column:""},{default:e(()=>[(u(!0),v(T,null,k(l(m).allocations.neuro_agent,s=>(u(),x(S,{key:s},{default:e(()=>[_(o(s),1)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1})]),_:1}),t(p,{md:"6",cols:"12"},{default:e(()=>[t(b,{variant:"outlined"},{default:e(()=>[t(h,null,{default:e(()=>[_(o(l(r)("Memory Agent Toolset")),1)]),_:1}),t(y,null,{default:e(()=>[t(V,{column:""},{default:e(()=>[(u(!0),v(T,null,k(l(m).allocations.memory_manager,s=>(u(),x(S,{key:s},{default:e(()=>[_(o(s),1)]),_:2},1024))),128))]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})}}});export{Y as default};
