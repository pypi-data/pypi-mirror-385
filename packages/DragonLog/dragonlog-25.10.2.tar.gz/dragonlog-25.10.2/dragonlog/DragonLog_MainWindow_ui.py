# Form implementation generated from reading ui file 'DragonLog_MainWindow.ui'
#
# Created by: PyQt6 UI code generator 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1286, 900)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons:icons8-dragon-96.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.QSOTableView = QtWidgets.QTableView(parent=self.centralwidget)
        self.QSOTableView.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.QSOTableView.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)
        self.QSOTableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.QSOTableView.setSortingEnabled(True)
        self.QSOTableView.setObjectName("QSOTableView")
        self.QSOTableView.verticalHeader().setVisible(False)
        self.verticalLayout.addWidget(self.QSOTableView)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1286, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(parent=self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuUpload = QtWidgets.QMenu(parent=self.menubar)
        self.menuUpload.setObjectName("menuUpload")
        self.menuContest = QtWidgets.QMenu(parent=self.menubar)
        self.menuContest.setObjectName("menuContest")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.logDockWidget = QtWidgets.QDockWidget(parent=MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.logDockWidget.sizePolicy().hasHeightForWidth())
        self.logDockWidget.setSizePolicy(sizePolicy)
        self.logDockWidget.setFeatures(QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetClosable|QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetMovable)
        self.logDockWidget.setAllowedAreas(QtCore.Qt.DockWidgetArea.AllDockWidgetAreas)
        self.logDockWidget.setObjectName("logDockWidget")
        self.logDockWidgetContents = QtWidgets.QWidget()
        self.logDockWidgetContents.setObjectName("logDockWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.logDockWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.logTextEdit = QtWidgets.QTextEdit(parent=self.logDockWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        self.logTextEdit.setFont(font)
        self.logTextEdit.setStyleSheet("font-family: Consolas")
        self.logTextEdit.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.TextSelectableByKeyboard|QtCore.Qt.TextInteractionFlag.TextSelectableByMouse)
        self.logTextEdit.setObjectName("logTextEdit")
        self.verticalLayout_2.addWidget(self.logTextEdit)
        self.logDockWidget.setWidget(self.logDockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.logDockWidget)
        self.qsoDockWidget = QtWidgets.QDockWidget(parent=MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qsoDockWidget.sizePolicy().hasHeightForWidth())
        self.qsoDockWidget.setSizePolicy(sizePolicy)
        self.qsoDockWidget.setAllowedAreas(QtCore.Qt.DockWidgetArea.LeftDockWidgetArea|QtCore.Qt.DockWidgetArea.RightDockWidgetArea)
        self.qsoDockWidget.setObjectName("qsoDockWidget")
        self.qsoDockWidgetContents = QtWidgets.QWidget()
        self.qsoDockWidgetContents.setObjectName("qsoDockWidgetContents")
        self.qsoDockWidget.setWidget(self.qsoDockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.qsoDockWidget)
        self.filterDockWidget = QtWidgets.QDockWidget(parent=MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.filterDockWidget.sizePolicy().hasHeightForWidth())
        self.filterDockWidget.setSizePolicy(sizePolicy)
        self.filterDockWidget.setFeatures(QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetClosable|QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetMovable)
        self.filterDockWidget.setAllowedAreas(QtCore.Qt.DockWidgetArea.BottomDockWidgetArea|QtCore.Qt.DockWidgetArea.TopDockWidgetArea)
        self.filterDockWidget.setObjectName("filterDockWidget")
        self.filterDockWidgetContents = QtWidgets.QWidget()
        self.filterDockWidgetContents.setObjectName("filterDockWidgetContents")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.filterDockWidgetContents)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_4 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_6.addWidget(self.label_4)
        self.fDateFromLineEdit = QtWidgets.QLineEdit(parent=self.filterDockWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fDateFromLineEdit.sizePolicy().hasHeightForWidth())
        self.fDateFromLineEdit.setSizePolicy(sizePolicy)
        self.fDateFromLineEdit.setMaximumSize(QtCore.QSize(90, 16777215))
        self.fDateFromLineEdit.setObjectName("fDateFromLineEdit")
        self.verticalLayout_6.addWidget(self.fDateFromLineEdit)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_5 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_9.addWidget(self.label_5)
        self.fDateToLineEdit = QtWidgets.QLineEdit(parent=self.filterDockWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fDateToLineEdit.sizePolicy().hasHeightForWidth())
        self.fDateToLineEdit.setSizePolicy(sizePolicy)
        self.fDateToLineEdit.setMaximumSize(QtCore.QSize(90, 16777215))
        self.fDateToLineEdit.setObjectName("fDateToLineEdit")
        self.verticalLayout_9.addWidget(self.fDateToLineEdit)
        self.horizontalLayout_2.addLayout(self.verticalLayout_9)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.fCallsignLineEdit = QtWidgets.QLineEdit(parent=self.filterDockWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fCallsignLineEdit.sizePolicy().hasHeightForWidth())
        self.fCallsignLineEdit.setSizePolicy(sizePolicy)
        self.fCallsignLineEdit.setObjectName("fCallsignLineEdit")
        self.verticalLayout_3.addWidget(self.fCallsignLineEdit)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        spacerItem1 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_3 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_5.addWidget(self.label_3)
        self.fBandComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.fBandComboBox.setObjectName("fBandComboBox")
        self.verticalLayout_5.addWidget(self.fBandComboBox)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_2 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_4.addWidget(self.label_2)
        self.fModeComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.fModeComboBox.setObjectName("fModeComboBox")
        self.verticalLayout_4.addWidget(self.fModeComboBox)
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_6 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_7.addWidget(self.label_6)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.fQSLsComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.fQSLsComboBox.setObjectName("fQSLsComboBox")
        self.fQSLsComboBox.addItem("")
        self.fQSLsComboBox.setItemText(0, "")
        self.fQSLsComboBox.addItem("")
        self.fQSLsComboBox.addItem("")
        self.horizontalLayout.addWidget(self.fQSLsComboBox)
        self.fQSLrComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.fQSLrComboBox.setObjectName("fQSLrComboBox")
        self.fQSLrComboBox.addItem("")
        self.fQSLrComboBox.setItemText(0, "")
        self.fQSLrComboBox.addItem("")
        self.fQSLrComboBox.addItem("")
        self.horizontalLayout.addWidget(self.fQSLrComboBox)
        self.verticalLayout_7.addLayout(self.horizontalLayout)
        self.horizontalLayout_2.addLayout(self.verticalLayout_7)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.label_7 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_10.addWidget(self.label_7)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.feQSLsComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.feQSLsComboBox.setObjectName("feQSLsComboBox")
        self.feQSLsComboBox.addItem("")
        self.feQSLsComboBox.setItemText(0, "")
        self.feQSLsComboBox.addItem("")
        self.feQSLsComboBox.addItem("")
        self.horizontalLayout_3.addWidget(self.feQSLsComboBox)
        self.feQSLrComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.feQSLrComboBox.setObjectName("feQSLrComboBox")
        self.feQSLrComboBox.addItem("")
        self.feQSLrComboBox.setItemText(0, "")
        self.feQSLrComboBox.addItem("")
        self.feQSLrComboBox.addItem("")
        self.horizontalLayout_3.addWidget(self.feQSLrComboBox)
        self.verticalLayout_10.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2.addLayout(self.verticalLayout_10)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.label_8 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_11.addWidget(self.label_8)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.fLoTWsComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.fLoTWsComboBox.setObjectName("fLoTWsComboBox")
        self.fLoTWsComboBox.addItem("")
        self.fLoTWsComboBox.setItemText(0, "")
        self.fLoTWsComboBox.addItem("")
        self.fLoTWsComboBox.addItem("")
        self.horizontalLayout_4.addWidget(self.fLoTWsComboBox)
        self.fLoTWrComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.fLoTWrComboBox.setObjectName("fLoTWrComboBox")
        self.fLoTWrComboBox.addItem("")
        self.fLoTWrComboBox.setItemText(0, "")
        self.fLoTWrComboBox.addItem("")
        self.fLoTWrComboBox.addItem("")
        self.horizontalLayout_4.addWidget(self.fLoTWrComboBox)
        self.verticalLayout_11.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_2.addLayout(self.verticalLayout_11)
        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setSpacing(0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label_9 = QtWidgets.QLabel(parent=self.filterDockWidgetContents)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_12.addWidget(self.label_9)
        self.fContestComboBox = QtWidgets.QComboBox(parent=self.filterDockWidgetContents)
        self.fContestComboBox.setEditable(True)
        self.fContestComboBox.setObjectName("fContestComboBox")
        self.verticalLayout_12.addWidget(self.fContestComboBox)
        self.horizontalLayout_2.addLayout(self.verticalLayout_12)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        self.resetFilterPushButton = QtWidgets.QPushButton(parent=self.filterDockWidgetContents)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons:no.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.resetFilterPushButton.setIcon(icon1)
        self.resetFilterPushButton.setObjectName("resetFilterPushButton")
        self.horizontalLayout_2.addWidget(self.resetFilterPushButton)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem5)
        self.verticalLayout_8.addLayout(self.horizontalLayout_2)
        spacerItem6 = QtWidgets.QSpacerItem(20, 0, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_8.addItem(spacerItem6)
        self.filterDockWidget.setWidget(self.filterDockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(4), self.filterDockWidget)
        self.ccDockWidget = QtWidgets.QDockWidget(parent=MainWindow)
        self.ccDockWidget.setAllowedAreas(QtCore.Qt.DockWidgetArea.BottomDockWidgetArea|QtCore.Qt.DockWidgetArea.TopDockWidgetArea)
        self.ccDockWidget.setObjectName("ccDockWidget")
        self.ccDockWidgetContents = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ccDockWidgetContents.sizePolicy().hasHeightForWidth())
        self.ccDockWidgetContents.setSizePolicy(sizePolicy)
        self.ccDockWidgetContents.setObjectName("ccDockWidgetContents")
        self.ccDockWidget.setWidget(self.ccDockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.ccDockWidget)
        self.dxSpotsDockWidget = QtWidgets.QDockWidget(parent=MainWindow)
        self.dxSpotsDockWidget.setAllowedAreas(QtCore.Qt.DockWidgetArea.LeftDockWidgetArea|QtCore.Qt.DockWidgetArea.RightDockWidgetArea)
        self.dxSpotsDockWidget.setObjectName("dxSpotsDockWidget")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.dxSpotsDockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dxSpotsDockWidget)
        self.contestStatDockWidget = QtWidgets.QDockWidget(parent=MainWindow)
        self.contestStatDockWidget.setObjectName("contestStatDockWidget")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.contestStatDockWidget.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.contestStatDockWidget)
        self.actionLog_QSO = QtGui.QAction(parent=MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons:edit_add.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionLog_QSO.setIcon(icon2)
        self.actionLog_QSO.setObjectName("actionLog_QSO")
        self.actionLog_QSO_TB = QtGui.QAction(parent=MainWindow)
        self.actionLog_QSO_TB.setIcon(icon2)
        self.actionLog_QSO_TB.setObjectName("actionLog_QSO_TB")
        self.actionSelect_DB = QtGui.QAction(parent=MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons:db.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSelect_DB.setIcon(icon3)
        self.actionSelect_DB.setObjectName("actionSelect_DB")
        self.actionSelect_DB_TB = QtGui.QAction(parent=MainWindow)
        self.actionSelect_DB_TB.setIcon(icon3)
        self.actionSelect_DB_TB.setObjectName("actionSelect_DB_TB")
        self.actionExit = QtGui.QAction(parent=MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons:exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon4)
        self.actionExit.setObjectName("actionExit")
        self.actionExport = QtGui.QAction(parent=MainWindow)
        self.actionExport.setEnabled(False)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons:fileexport.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExport.setIcon(icon5)
        self.actionExport.setObjectName("actionExport")
        self.actionImport = QtGui.QAction(parent=MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons:fileimport.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionImport.setIcon(icon6)
        self.actionImport.setObjectName("actionImport")
        self.actionExport_TB = QtGui.QAction(parent=MainWindow)
        self.actionExport_TB.setEnabled(False)
        self.actionExport_TB.setIcon(icon5)
        self.actionExport_TB.setObjectName("actionExport_TB")
        self.actionImport_TB = QtGui.QAction(parent=MainWindow)
        self.actionImport_TB.setIcon(icon6)
        self.actionImport_TB.setObjectName("actionImport_TB")
        self.actionAbout = QtGui.QAction(parent=MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons:info.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAbout.setIcon(icon7)
        self.actionAbout.setObjectName("actionAbout")
        self.actionAbout_Qt = QtGui.QAction(parent=MainWindow)
        self.actionAbout_Qt.setIcon(icon7)
        self.actionAbout_Qt.setObjectName("actionAbout_Qt")
        self.actionDelete_log_entry = QtGui.QAction(parent=MainWindow)
        self.actionDelete_log_entry.setEnabled(False)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icons:edit_remove.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionDelete_log_entry.setIcon(icon8)
        self.actionDelete_log_entry.setObjectName("actionDelete_log_entry")
        self.actionChange_log_entry = QtGui.QAction(parent=MainWindow)
        self.actionChange_log_entry.setEnabled(False)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icons:edit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionChange_log_entry.setIcon(icon9)
        self.actionChange_log_entry.setObjectName("actionChange_log_entry")
        self.actionSettings = QtGui.QAction(parent=MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icons:gear.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSettings.setIcon(icon10)
        self.actionSettings.setObjectName("actionSettings")
        self.actionSettings_TB = QtGui.QAction(parent=MainWindow)
        self.actionSettings_TB.setIcon(icon10)
        self.actionSettings_TB.setObjectName("actionSettings_TB")
        self.actionHelp = QtGui.QAction(parent=MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("icons:help.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionHelp.setIcon(icon11)
        self.actionHelp.setObjectName("actionHelp")
        self.actionStart_hamlib_TB = QtGui.QAction(parent=MainWindow)
        self.actionStart_hamlib_TB.setCheckable(True)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("icons:player_play.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        icon12.addPixmap(QtGui.QPixmap("icons:player_stop.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.On)
        self.actionStart_hamlib_TB.setIcon(icon12)
        self.actionStart_hamlib_TB.setObjectName("actionStart_hamlib_TB")
        self.actionWatch_file_for_QSOs = QtGui.QAction(parent=MainWindow)
        self.actionWatch_file_for_QSOs.setCheckable(True)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("icons:watch.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionWatch_file_for_QSOs.setIcon(icon13)
        self.actionWatch_file_for_QSOs.setObjectName("actionWatch_file_for_QSOs")
        self.actionWatch_file_for_QSOs_TB = QtGui.QAction(parent=MainWindow)
        self.actionWatch_file_for_QSOs_TB.setCheckable(True)
        self.actionWatch_file_for_QSOs_TB.setIcon(icon13)
        self.actionWatch_file_for_QSOs_TB.setObjectName("actionWatch_file_for_QSOs_TB")
        self.actionShow_log = QtGui.QAction(parent=MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("icons:file_doc.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShow_log.setIcon(icon14)
        self.actionShow_log.setObjectName("actionShow_log")
        self.actionUpload_logs_to_LoTW = QtGui.QAction(parent=MainWindow)
        self.actionUpload_logs_to_LoTW.setEnabled(False)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("icons:upload_lotw.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionUpload_logs_to_LoTW.setIcon(icon15)
        self.actionUpload_logs_to_LoTW.setObjectName("actionUpload_logs_to_LoTW")
        self.actionShow_filter = QtGui.QAction(parent=MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("icons:filter.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShow_filter.setIcon(icon16)
        self.actionShow_filter.setObjectName("actionShow_filter")
        self.actionShow_CassiopeiaConsole = QtGui.QAction(parent=MainWindow)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("icons:terminal.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShow_CassiopeiaConsole.setIcon(icon17)
        self.actionShow_CassiopeiaConsole.setObjectName("actionShow_CassiopeiaConsole")
        self.actionUpload_to_HamQTH = QtGui.QAction(parent=MainWindow)
        self.actionUpload_to_HamQTH.setEnabled(False)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("icons:hamqth.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionUpload_to_HamQTH.setIcon(icon18)
        self.actionUpload_to_HamQTH.setObjectName("actionUpload_to_HamQTH")
        self.actionCheck_LoTW_QSL = QtGui.QAction(parent=MainWindow)
        self.actionCheck_LoTW_QSL.setEnabled(False)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap("icons:check_lotw.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionCheck_LoTW_QSL.setIcon(icon19)
        self.actionCheck_LoTW_QSL.setObjectName("actionCheck_LoTW_QSL")
        self.actionUpload_to_eQSL = QtGui.QAction(parent=MainWindow)
        self.actionUpload_to_eQSL.setEnabled(False)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap("icons:upload_eqsl.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionUpload_to_eQSL.setIcon(icon20)
        self.actionUpload_to_eQSL.setObjectName("actionUpload_to_eQSL")
        self.actionCheck_eQSL = QtGui.QAction(parent=MainWindow)
        self.actionCheck_eQSL.setEnabled(False)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap("icons:check_eqsl.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionCheck_eQSL.setIcon(icon21)
        self.actionCheck_eQSL.setObjectName("actionCheck_eQSL")
        self.actionDownload_eQSL = QtGui.QAction(parent=MainWindow)
        self.actionDownload_eQSL.setEnabled(False)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap("icons:download_eqsl.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionDownload_eQSL.setIcon(icon22)
        self.actionDownload_eQSL.setObjectName("actionDownload_eQSL")
        self.actionShortcuts = QtGui.QAction(parent=MainWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap("icons:shortcuts.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShortcuts.setIcon(icon23)
        self.actionShortcuts.setObjectName("actionShortcuts")
        self.actionHelpCassiopeiaConsole = QtGui.QAction(parent=MainWindow)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap("icons:help_terminal.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionHelpCassiopeiaConsole.setIcon(icon24)
        self.actionHelpCassiopeiaConsole.setObjectName("actionHelpCassiopeiaConsole")
        self.actionShow_DX_Spots = QtGui.QAction(parent=MainWindow)
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap("icons:find.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShow_DX_Spots.setIcon(icon25)
        self.actionShow_DX_Spots.setObjectName("actionShow_DX_Spots")
        self.actionExport_Contest_Log = QtGui.QAction(parent=MainWindow)
        icon26 = QtGui.QIcon()
        icon26.addPixmap(QtGui.QPixmap("icons:contest.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExport_Contest_Log.setIcon(icon26)
        self.actionExport_Contest_Log.setObjectName("actionExport_Contest_Log")
        self.actionContests = QtGui.QAction(parent=MainWindow)
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap("icons:contest_help.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionContests.setIcon(icon27)
        self.actionContests.setObjectName("actionContests")
        self.actionMark_QSL_sent = QtGui.QAction(parent=MainWindow)
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap("icons:ok.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionMark_QSL_sent.setIcon(icon28)
        self.actionMark_QSL_sent.setObjectName("actionMark_QSL_sent")
        self.actionMark_QSL_received = QtGui.QAction(parent=MainWindow)
        self.actionMark_QSL_received.setIcon(icon28)
        self.actionMark_QSL_received.setObjectName("actionMark_QSL_received")
        self.actionMark_HamQTH_uploaded = QtGui.QAction(parent=MainWindow)
        self.actionMark_HamQTH_uploaded.setIcon(icon28)
        self.actionMark_HamQTH_uploaded.setObjectName("actionMark_HamQTH_uploaded")
        self.actionUnmark_QSL_sent = QtGui.QAction(parent=MainWindow)
        self.actionUnmark_QSL_sent.setIcon(icon1)
        self.actionUnmark_QSL_sent.setObjectName("actionUnmark_QSL_sent")
        self.actionUnmark_QSL_received = QtGui.QAction(parent=MainWindow)
        self.actionUnmark_QSL_received.setIcon(icon1)
        self.actionUnmark_QSL_received.setObjectName("actionUnmark_QSL_received")
        self.actionShow_Contest_stats = QtGui.QAction(parent=MainWindow)
        icon29 = QtGui.QIcon()
        icon29.addPixmap(QtGui.QPixmap("icons:contest_stats.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShow_Contest_stats.setIcon(icon29)
        self.actionShow_Contest_stats.setObjectName("actionShow_Contest_stats")
        self.actionShow_statistics = QtGui.QAction(parent=MainWindow)
        self.actionShow_statistics.setEnabled(False)
        icon30 = QtGui.QIcon()
        icon30.addPixmap(QtGui.QPixmap("icons:log.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShow_statistics.setIcon(icon30)
        self.actionShow_statistics.setObjectName("actionShow_statistics")
        self.actionShow_statistics_TB = QtGui.QAction(parent=MainWindow)
        self.actionShow_statistics_TB.setEnabled(False)
        self.actionShow_statistics_TB.setIcon(icon30)
        self.actionShow_statistics_TB.setObjectName("actionShow_statistics_TB")
        self.actionSelect_callbook = QtGui.QAction(parent=MainWindow)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap("icons:contents.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSelect_callbook.setIcon(icon31)
        self.actionSelect_callbook.setObjectName("actionSelect_callbook")
        self.actionRefresh_callbook = QtGui.QAction(parent=MainWindow)
        self.actionRefresh_callbook.setEnabled(False)
        icon32 = QtGui.QIcon()
        icon32.addPixmap(QtGui.QPixmap("icons:refresh_callbook.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRefresh_callbook.setIcon(icon32)
        self.actionRefresh_callbook.setObjectName("actionRefresh_callbook")
        self.actionRefresh_call_history = QtGui.QAction(parent=MainWindow)
        self.actionRefresh_call_history.setEnabled(False)
        icon33 = QtGui.QIcon()
        icon33.addPixmap(QtGui.QPixmap("icons:refresh_history.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRefresh_call_history.setIcon(icon33)
        self.actionRefresh_call_history.setObjectName("actionRefresh_call_history")
        self.actionExport_callbook = QtGui.QAction(parent=MainWindow)
        self.actionExport_callbook.setEnabled(False)
        icon34 = QtGui.QIcon()
        icon34.addPixmap(QtGui.QPixmap("icons:callbook_export.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExport_callbook.setIcon(icon34)
        self.actionExport_callbook.setObjectName("actionExport_callbook")
        self.actionImport_callbook = QtGui.QAction(parent=MainWindow)
        self.actionImport_callbook.setEnabled(False)
        icon35 = QtGui.QIcon()
        icon35.addPixmap(QtGui.QPixmap("icons:callbook_import.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionImport_callbook.setIcon(icon35)
        self.actionImport_callbook.setObjectName("actionImport_callbook")
        self.actionExport_call_history = QtGui.QAction(parent=MainWindow)
        self.actionExport_call_history.setEnabled(False)
        icon36 = QtGui.QIcon()
        icon36.addPixmap(QtGui.QPixmap("icons:history_export.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExport_call_history.setIcon(icon36)
        self.actionExport_call_history.setObjectName("actionExport_call_history")
        self.actionImport_call_history = QtGui.QAction(parent=MainWindow)
        self.actionImport_call_history.setEnabled(False)
        icon37 = QtGui.QIcon()
        icon37.addPixmap(QtGui.QPixmap("icons:history_import.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionImport_call_history.setIcon(icon37)
        self.actionImport_call_history.setObjectName("actionImport_call_history")
        self.actionCopy = QtGui.QAction(parent=MainWindow)
        self.actionCopy.setEnabled(False)
        icon38 = QtGui.QIcon()
        icon38.addPixmap(QtGui.QPixmap("icons:editcopy.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionCopy.setIcon(icon38)
        self.actionCopy.setObjectName("actionCopy")
        self.actionRead_DARC_QSL_QR_Code = QtGui.QAction(parent=MainWindow)
        self.actionRead_DARC_QSL_QR_Code.setEnabled(False)
        icon39 = QtGui.QIcon()
        icon39.addPixmap(QtGui.QPixmap("icons:icons8-qrcode-96.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRead_DARC_QSL_QR_Code.setIcon(icon39)
        self.actionRead_DARC_QSL_QR_Code.setObjectName("actionRead_DARC_QSL_QR_Code")
        self.actionRead_DARC_QSL_QR_Code_TB = QtGui.QAction(parent=MainWindow)
        self.actionRead_DARC_QSL_QR_Code_TB.setEnabled(False)
        self.actionRead_DARC_QSL_QR_Code_TB.setIcon(icon39)
        self.actionRead_DARC_QSL_QR_Code_TB.setObjectName("actionRead_DARC_QSL_QR_Code_TB")
        self.actionChange_contest = QtGui.QAction(parent=MainWindow)
        icon40 = QtGui.QIcon()
        icon40.addPixmap(QtGui.QPixmap("icons:contest_edit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionChange_contest.setIcon(icon40)
        self.actionChange_contest.setObjectName("actionChange_contest")
        self.menuFile.addAction(self.actionSelect_DB)
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addAction(self.actionImport)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSelect_callbook)
        self.menuFile.addAction(self.actionRefresh_callbook)
        self.menuFile.addAction(self.actionExport_callbook)
        self.menuFile.addAction(self.actionImport_callbook)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSettings)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionLog_QSO)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionDelete_log_entry)
        self.menuEdit.addAction(self.actionChange_log_entry)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionMark_QSL_sent)
        self.menuEdit.addAction(self.actionUnmark_QSL_sent)
        self.menuEdit.addAction(self.actionMark_QSL_received)
        self.menuEdit.addAction(self.actionUnmark_QSL_received)
        self.menuEdit.addAction(self.actionMark_HamQTH_uploaded)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionChange_contest)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionWatch_file_for_QSOs)
        self.menuHelp.addAction(self.actionHelp)
        self.menuHelp.addAction(self.actionHelpCassiopeiaConsole)
        self.menuHelp.addAction(self.actionShortcuts)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionShow_CassiopeiaConsole)
        self.menuHelp.addAction(self.actionShow_filter)
        self.menuHelp.addAction(self.actionShow_DX_Spots)
        self.menuHelp.addAction(self.actionShow_log)
        self.menuHelp.addAction(self.actionShow_statistics)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionAbout_Qt)
        self.menuUpload.addAction(self.actionUpload_to_eQSL)
        self.menuUpload.addAction(self.actionCheck_eQSL)
        self.menuUpload.addAction(self.actionDownload_eQSL)
        self.menuUpload.addSeparator()
        self.menuUpload.addAction(self.actionUpload_logs_to_LoTW)
        self.menuUpload.addAction(self.actionCheck_LoTW_QSL)
        self.menuUpload.addSeparator()
        self.menuUpload.addAction(self.actionUpload_to_HamQTH)
        self.menuUpload.addSeparator()
        self.menuUpload.addAction(self.actionRead_DARC_QSL_QR_Code)
        self.menuContest.addAction(self.actionShow_Contest_stats)
        self.menuContest.addAction(self.actionExport_Contest_Log)
        self.menuContest.addSeparator()
        self.menuContest.addAction(self.actionContests)
        self.menuContest.addSeparator()
        self.menuContest.addAction(self.actionRefresh_call_history)
        self.menuContest.addAction(self.actionExport_call_history)
        self.menuContest.addAction(self.actionImport_call_history)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuUpload.menuAction())
        self.menubar.addAction(self.menuContest.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionSelect_DB_TB)
        self.toolBar.addAction(self.actionImport_TB)
        self.toolBar.addAction(self.actionExport_TB)
        self.toolBar.addAction(self.actionSettings_TB)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionStart_hamlib_TB)
        self.toolBar.addAction(self.actionLog_QSO_TB)
        self.toolBar.addAction(self.actionWatch_file_for_QSOs_TB)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionShow_statistics_TB)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRead_DARC_QSL_QR_Code_TB)

        self.retranslateUi(MainWindow)
        self.actionAbout.triggered.connect(MainWindow.showAbout) # type: ignore
        self.actionAbout_Qt.triggered.connect(MainWindow.showAboutQt) # type: ignore
        self.actionLog_QSO.triggered.connect(MainWindow.logQSO) # type: ignore
        self.actionLog_QSO_TB.triggered.connect(MainWindow.logQSO) # type: ignore
        self.actionExit.triggered.connect(MainWindow.close) # type: ignore
        self.actionSelect_DB.triggered.connect(MainWindow.selectDB) # type: ignore
        self.actionDelete_log_entry.triggered.connect(MainWindow.deleteQSO) # type: ignore
        self.actionChange_log_entry.triggered.connect(MainWindow.changeQSO) # type: ignore
        self.actionSettings.triggered.connect(MainWindow.showSettings) # type: ignore
        self.actionSettings_TB.triggered.connect(MainWindow.showSettings) # type: ignore
        self.actionExport.triggered.connect(MainWindow.export) # type: ignore
        self.actionExport_TB.triggered.connect(MainWindow.export) # type: ignore
        self.QSOTableView.doubleClicked['QModelIndex'].connect(MainWindow.changeQSO) # type: ignore
        self.actionHelp.triggered.connect(MainWindow.showHelp) # type: ignore
        self.actionImport.triggered.connect(MainWindow.logImport) # type: ignore
        self.actionImport_TB.triggered.connect(MainWindow.logImport) # type: ignore
        self.actionStart_hamlib_TB.triggered['bool'].connect(MainWindow.ctrlHamlib) # type: ignore
        self.actionSelect_DB_TB.triggered.connect(MainWindow.selectDB) # type: ignore
        self.actionWatch_file_for_QSOs.triggered['bool'].connect(MainWindow.ctrlWatching) # type: ignore
        self.actionWatch_file_for_QSOs_TB.triggered['bool'].connect(MainWindow.ctrlWatching) # type: ignore
        self.actionShow_log.triggered.connect(self.logDockWidget.show) # type: ignore
        self.actionUpload_logs_to_LoTW.triggered.connect(MainWindow.lotwUpload) # type: ignore
        self.QSOTableView.clicked['QModelIndex'].connect(MainWindow.clearQSOForm) # type: ignore
        self.resetFilterPushButton.clicked.connect(MainWindow.resetTableFilter) # type: ignore
        self.actionShow_filter.triggered.connect(self.filterDockWidget.show) # type: ignore
        self.fCallsignLineEdit.editingFinished.connect(MainWindow.setTableFilter) # type: ignore
        self.fBandComboBox.currentTextChanged['QString'].connect(MainWindow.setTableFilter) # type: ignore
        self.fModeComboBox.currentTextChanged['QString'].connect(MainWindow.setTableFilter) # type: ignore
        self.fDateToLineEdit.editingFinished.connect(MainWindow.setTableFilter) # type: ignore
        self.fDateFromLineEdit.editingFinished.connect(MainWindow.setTableFilter) # type: ignore
        self.actionShow_CassiopeiaConsole.triggered.connect(MainWindow.showCC) # type: ignore
        self.actionUpload_to_HamQTH.triggered.connect(MainWindow.uploadToHamQTH) # type: ignore
        self.actionCheck_LoTW_QSL.triggered.connect(MainWindow.lotwCheckQSL) # type: ignore
        self.actionCheck_eQSL.triggered.connect(MainWindow.eqslCheckInboxSelected) # type: ignore
        self.actionDownload_eQSL.triggered.connect(MainWindow.eqslDownload) # type: ignore
        self.actionUpload_to_eQSL.triggered.connect(MainWindow.eqslUpload) # type: ignore
        self.actionShortcuts.triggered.connect(MainWindow.showShortcuts) # type: ignore
        self.actionHelpCassiopeiaConsole.triggered.connect(MainWindow.showCCHelp) # type: ignore
        self.actionShow_DX_Spots.triggered.connect(self.dxSpotsDockWidget.show) # type: ignore
        self.actionExport_Contest_Log.triggered.connect(MainWindow.exportContestLog) # type: ignore
        self.actionContests.triggered.connect(MainWindow.showContestHelp) # type: ignore
        self.fQSLsComboBox.currentIndexChanged['int'].connect(MainWindow.setTableFilter) # type: ignore
        self.fQSLrComboBox.currentIndexChanged['int'].connect(MainWindow.setTableFilter) # type: ignore
        self.feQSLsComboBox.currentIndexChanged['int'].connect(MainWindow.setTableFilter) # type: ignore
        self.feQSLrComboBox.currentIndexChanged['int'].connect(MainWindow.setTableFilter) # type: ignore
        self.fLoTWsComboBox.currentIndexChanged['int'].connect(MainWindow.setTableFilter) # type: ignore
        self.fLoTWrComboBox.currentIndexChanged['int'].connect(MainWindow.setTableFilter) # type: ignore
        self.fContestComboBox.currentTextChanged['QString'].connect(MainWindow.setTableFilter) # type: ignore
        self.actionMark_HamQTH_uploaded.triggered.connect(MainWindow.markQSO) # type: ignore
        self.actionMark_QSL_received.triggered.connect(MainWindow.markQSO) # type: ignore
        self.actionMark_QSL_sent.triggered.connect(MainWindow.markQSO) # type: ignore
        self.actionUnmark_QSL_received.triggered.connect(MainWindow.markQSO) # type: ignore
        self.actionUnmark_QSL_sent.triggered.connect(MainWindow.markQSO) # type: ignore
        self.actionShow_Contest_stats.triggered.connect(self.contestStatDockWidget.show) # type: ignore
        self.actionShow_statistics.triggered.connect(MainWindow.showStatistics) # type: ignore
        self.actionShow_statistics_TB.triggered.connect(MainWindow.showStatistics) # type: ignore
        self.actionSelect_callbook.triggered.connect(MainWindow.selectCallbook) # type: ignore
        self.actionRefresh_call_history.triggered.connect(MainWindow.initialiseCallHistory) # type: ignore
        self.actionRefresh_callbook.triggered.connect(MainWindow.initialiseCallbook) # type: ignore
        self.actionExport_call_history.triggered.connect(MainWindow.exportCallHistory) # type: ignore
        self.actionExport_callbook.triggered.connect(MainWindow.exportCallbook) # type: ignore
        self.actionImport_call_history.triggered.connect(MainWindow.importCallHistory) # type: ignore
        self.actionImport_callbook.triggered.connect(MainWindow.importCallbook) # type: ignore
        self.actionCopy.triggered.connect(MainWindow.copyToClipboard) # type: ignore
        self.actionRead_DARC_QSL_QR_Code_TB.triggered.connect(MainWindow.readQRCode) # type: ignore
        self.actionWatch_file_for_QSOs.triggered.connect(MainWindow.readQRCode) # type: ignore
        self.actionChange_contest.triggered.connect(MainWindow.changeContestID) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DragonLog"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuUpload.setTitle(_translate("MainWindow", "Upload && QSL"))
        self.menuContest.setTitle(_translate("MainWindow", "Contest"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "Toolbar"))
        self.logDockWidget.setWindowTitle(_translate("MainWindow", "Application Log"))
        self.qsoDockWidget.setWindowTitle(_translate("MainWindow", "QSO Form"))
        self.filterDockWidget.setWindowTitle(_translate("MainWindow", "Filter"))
        self.label_4.setText(_translate("MainWindow", "Date from"))
        self.fDateFromLineEdit.setPlaceholderText(_translate("MainWindow", "YYYY-MM-DD"))
        self.label_5.setText(_translate("MainWindow", "Date to"))
        self.fDateToLineEdit.setPlaceholderText(_translate("MainWindow", "YYYY-MM-DD"))
        self.label.setText(_translate("MainWindow", "Callsign"))
        self.label_3.setText(_translate("MainWindow", "Band"))
        self.label_2.setText(_translate("MainWindow", "Mode"))
        self.label_6.setText(_translate("MainWindow", "QSL sent/rcvd"))
        self.fQSLsComboBox.setItemText(1, _translate("MainWindow", "Yes"))
        self.fQSLsComboBox.setItemText(2, _translate("MainWindow", "No"))
        self.fQSLrComboBox.setItemText(1, _translate("MainWindow", "Yes"))
        self.fQSLrComboBox.setItemText(2, _translate("MainWindow", "No"))
        self.label_7.setText(_translate("MainWindow", "eQSL  sent/rcvd"))
        self.feQSLsComboBox.setItemText(1, _translate("MainWindow", "Yes"))
        self.feQSLsComboBox.setItemText(2, _translate("MainWindow", "No"))
        self.feQSLrComboBox.setItemText(1, _translate("MainWindow", "Yes"))
        self.feQSLrComboBox.setItemText(2, _translate("MainWindow", "No"))
        self.label_8.setText(_translate("MainWindow", "LoTW  sent/rcvd"))
        self.fLoTWsComboBox.setItemText(1, _translate("MainWindow", "Yes"))
        self.fLoTWsComboBox.setItemText(2, _translate("MainWindow", "No"))
        self.fLoTWrComboBox.setItemText(1, _translate("MainWindow", "Yes"))
        self.fLoTWrComboBox.setItemText(2, _translate("MainWindow", "No"))
        self.label_9.setText(_translate("MainWindow", "Contest"))
        self.resetFilterPushButton.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.ccDockWidget.setWindowTitle(_translate("MainWindow", "CassiopeiaConsole"))
        self.dxSpotsDockWidget.setWindowTitle(_translate("MainWindow", "DX Spots"))
        self.contestStatDockWidget.setWindowTitle(_translate("MainWindow", "Contest Statistics"))
        self.actionLog_QSO.setText(_translate("MainWindow", "Log QSO..."))
        self.actionLog_QSO.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionLog_QSO_TB.setText(_translate("MainWindow", "Log QSO..."))
        self.actionSelect_DB.setText(_translate("MainWindow", "Select database..."))
        self.actionSelect_DB_TB.setText(_translate("MainWindow", "Select database..."))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionExport.setText(_translate("MainWindow", "Export..."))
        self.actionImport.setText(_translate("MainWindow", "Import..."))
        self.actionExport_TB.setText(_translate("MainWindow", "Export"))
        self.actionImport_TB.setText(_translate("MainWindow", "Import"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionAbout_Qt.setText(_translate("MainWindow", "About Qt"))
        self.actionDelete_log_entry.setText(_translate("MainWindow", "Delete log entry"))
        self.actionDelete_log_entry.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionChange_log_entry.setText(_translate("MainWindow", "Change log entry..."))
        self.actionChange_log_entry.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionSettings.setText(_translate("MainWindow", "Settings"))
        self.actionSettings_TB.setText(_translate("MainWindow", "Settings"))
        self.actionHelp.setText(_translate("MainWindow", "Help"))
        self.actionStart_hamlib_TB.setText(_translate("MainWindow", "Start hamlib"))
        self.actionWatch_file_for_QSOs.setText(_translate("MainWindow", "Watch file for QSOs..."))
        self.actionWatch_file_for_QSOs.setShortcut(_translate("MainWindow", "Ctrl+W"))
        self.actionWatch_file_for_QSOs_TB.setText(_translate("MainWindow", "Watch file for QSOs..."))
        self.actionShow_log.setText(_translate("MainWindow", "Show log"))
        self.actionUpload_logs_to_LoTW.setText(_translate("MainWindow", "Upload logs to LoTW..."))
        self.actionShow_filter.setText(_translate("MainWindow", "Show filter"))
        self.actionShow_filter.setShortcut(_translate("MainWindow", "Ctrl+F"))
        self.actionShow_CassiopeiaConsole.setText(_translate("MainWindow", "Show CassiopeiaConsole"))
        self.actionShow_CassiopeiaConsole.setShortcut(_translate("MainWindow", "Ctrl+K"))
        self.actionUpload_to_HamQTH.setText(_translate("MainWindow", "Upload to HamQTH"))
        self.actionCheck_LoTW_QSL.setText(_translate("MainWindow", "Check LoTW QSL"))
        self.actionCheck_LoTW_QSL.setShortcut(_translate("MainWindow", "Ctrl+Alt+L"))
        self.actionUpload_to_eQSL.setText(_translate("MainWindow", "Upload to eQSL"))
        self.actionCheck_eQSL.setText(_translate("MainWindow", "Check eQSL"))
        self.actionCheck_eQSL.setShortcut(_translate("MainWindow", "Ctrl+Alt+E"))
        self.actionDownload_eQSL.setText(_translate("MainWindow", "Download eQSL"))
        self.actionDownload_eQSL.setShortcut(_translate("MainWindow", "Ctrl+Shift+E"))
        self.actionShortcuts.setText(_translate("MainWindow", "Shortcuts"))
        self.actionHelpCassiopeiaConsole.setText(_translate("MainWindow", "Help on CassiopeiaConsole"))
        self.actionShow_DX_Spots.setText(_translate("MainWindow", "Show DX Spots"))
        self.actionShow_DX_Spots.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.actionExport_Contest_Log.setText(_translate("MainWindow", "Export Contest Log..."))
        self.actionContests.setText(_translate("MainWindow", "Contests"))
        self.actionMark_QSL_sent.setText(_translate("MainWindow", "Mark QSL sent"))
        self.actionMark_QSL_sent.setShortcut(_translate("MainWindow", "Ctrl+Alt+S"))
        self.actionMark_QSL_received.setText(_translate("MainWindow", "Mark QSL received"))
        self.actionMark_QSL_received.setShortcut(_translate("MainWindow", "Ctrl+Alt+R"))
        self.actionMark_HamQTH_uploaded.setText(_translate("MainWindow", "Mark HamQTH uploaded"))
        self.actionMark_HamQTH_uploaded.setShortcut(_translate("MainWindow", "Ctrl+Alt+U"))
        self.actionUnmark_QSL_sent.setText(_translate("MainWindow", "Unmark QSL sent"))
        self.actionUnmark_QSL_sent.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.actionUnmark_QSL_received.setText(_translate("MainWindow", "Unmark QSL received"))
        self.actionUnmark_QSL_received.setShortcut(_translate("MainWindow", "Ctrl+Shift+R"))
        self.actionShow_Contest_stats.setText(_translate("MainWindow", "Show Contest stats"))
        self.actionShow_Contest_stats.setShortcut(_translate("MainWindow", "Ctrl+T"))
        self.actionShow_statistics.setText(_translate("MainWindow", "Show statistics"))
        self.actionShow_statistics_TB.setText(_translate("MainWindow", "Show statistics"))
        self.actionSelect_callbook.setText(_translate("MainWindow", "Select callbook..."))
        self.actionRefresh_callbook.setText(_translate("MainWindow", "Refresh callbook"))
        self.actionRefresh_call_history.setText(_translate("MainWindow", "Refresh call history"))
        self.actionExport_callbook.setText(_translate("MainWindow", "Export callbook..."))
        self.actionImport_callbook.setText(_translate("MainWindow", "Import callbook..."))
        self.actionExport_call_history.setText(_translate("MainWindow", "Export call history..."))
        self.actionImport_call_history.setText(_translate("MainWindow", "Import call history..."))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionRead_DARC_QSL_QR_Code.setText(_translate("MainWindow", "Read DARC QSL-QR-Code..."))
        self.actionRead_DARC_QSL_QR_Code_TB.setText(_translate("MainWindow", "Read DARC QSL-QR-Code"))
        self.actionChange_contest.setText(_translate("MainWindow", "Change contest..."))
        self.actionChange_contest.setShortcut(_translate("MainWindow", "Ctrl+Alt+C"))
