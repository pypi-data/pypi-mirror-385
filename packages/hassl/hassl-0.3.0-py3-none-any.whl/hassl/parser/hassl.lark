// HASSL grammar — unified if_clause w/ optional inside/outside qualifier
// + additive schedule support
// + packages/imports + private visibility

start: stmt*

stmt: package_decl
    | import_stmt
    | alias
    | sync
    | rule
    | schedule_decl           

// --- Aliases ---
alias: PRIVATE? "alias" CNAME "=" entity //can mark private

// --- Sync ---
sync: "sync" synctype "[" entity_list "]" "as" CNAME syncopts?

ONOFF: "onoff"
DIMMER: "dimmer"
ATTRIBUTE: "attribute"
SHARED: "shared"
ALL: "all"
synctype: ONOFF | DIMMER | ATTRIBUTE | SHARED | ALL

syncopts: "{" ("invert" ":" entity_list) "}"

// --- Rules ---
// Allow qualifier inside (...) and/or after ) — both optional
// (augmented to allow schedule clauses inside rules)
rule: "rule" CNAME ":" rule_clause+

rule_clause: if_clause
           | rule_schedule_use      // NEW
           | rule_schedule_inline   // NEW

if_clause: "if" "(" expr qualifier? ")" qualifier? "then" actions

// ---- Conditions ----
qualifier: "not_by" ( "this" | "any_hassl" | "rule" "(" CNAME ")" )

?expr: expr "||" andexpr   -> or_
     | andexpr
?andexpr: andexpr "&&" term -> and_
        | term
?term: "!" term             -> not_
    | "(" expr ")"
    | comparison

comparison: operand OP operand
          | operand                -> bare_operand

OP: "==" | "!=" | "<" | ">" | "<=" | ">="

operand: entity | CNAME | STATE | NUMBER | STRING

STATE: "on" | "off"
NUMBER: INT | SIGNED_NUMBER

// ---- Actions ----
actions: action (";" action)*

action: assign
      | attr_assign
      | waitact
      | rulectrl
      | tagact

assign: CNAME "=" STATE ("for" dur)?

// Attribute assignment: allow alias.attr and full entity paths
attr_assign: CNAME "." CNAME ("." CNAME)* "." CNAME "=" NUMBER
           | CNAME "." CNAME "=" NUMBER

waitact: "wait" "(" condition "for" dur ")" action
// condition used by wait(): allow expr + optional qualifier inside the parens
condition: expr qualifier?

rulectrl: ("disable" | "enable") "rule" CNAME ("for" dur | "until" timepoint)
tagact: "tag" CNAME "=" (STRING | CNAME | NUMBER)

// Durations
dur: INT UNIT
UNIT: "ms" | "s" | "m" | "h" | "d"

// Timepoint placeholder (kept simple)
timepoint: CNAME

SCHEDULE: "schedule"
USE: "use"
FROM: "from"
TO: "to"
UNTIL: "until"
ENABLE: "enable"
DISABLE: "disable"
SUNRISE: "sunrise"
SUNSET: "sunset"
PRIVATE: "private"

TIME_HHMM: /[0-2]?\d:[0-5]\d/
OFFSET: /[+-]\d+(ms|s|m|h|d)/

// Reusable named schedule declarations
schedule_decl: PRIVATE? SCHEDULE CNAME ":" schedule_clause+

// Clauses usable both in declarations and inline
schedule_clause: schedule_op FROM time_spec schedule_end? ";"
schedule_op: ENABLE | DISABLE
schedule_end: TO time_spec    -> schedule_to
            | UNTIL time_spec -> schedule_until

// Rule-level usage
rule_schedule_use: SCHEDULE USE name_list ";"
// allow qualified (pkg.symbol) via existing 'entity' rule
name_list: name ("," name)*
name: CNAME | entity

// Inline schedule block inside a rule
rule_schedule_inline: SCHEDULE schedule_clause+

// Time specifications
time_spec: TIME_HHMM                 -> time_clock
         | sun_spec
         | entity
         | CNAME

sun_spec: (SUNRISE|SUNSET) OFFSET?   -> time_sun

// ---- Atoms ----
entity_list: member ("," member)*
member: entity | CNAME

entity: CNAME ("." CNAME)+

// ---- Lexer ----
%import common.CNAME
%import common.WS
%import common.ESCAPED_STRING -> STRING
%import common.INT
%import common.SIGNED_NUMBER
LINE_COMMENT: /\/\/[^\n]*/
%ignore LINE_COMMENT
%ignore WS

// ---- Packages & Imports ----
package_decl: "package" entity

// import forms (now also supports single-segment like `import aliases`):
//   import aliases
//   import home.shared.*
//   import home.shared: wake_hours, light as landing_light
//   import home.shared as shared
import_stmt: "import" module_ref import_tail?
module_ref: CNAME ("." CNAME)*
import_tail: ".*"
           | ":" import_list
           | "as" CNAME
import_list: import_item ("," import_item)*
import_item: CNAME ("as" CNAME)?
