[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qkdpy"
version = "0.2.9"
description = "A Python Package for Quantum Key Distribution"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Pranava-Kumar", email = "pranavakumar.it@gmail.com"},
]
maintainers = [
    {name = "Pranava-Kumar", email = "pranavakumar.it@gmail.com"},
]
keywords = ["quantum", "cryptography", "qkd", "simulation", "hd-qkd", "quantum-networks"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Security :: Cryptography",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "scipy>=1.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=25.1.0",
    "bandit>=1.8.6",
    "mypy>=1.17.1",
    "ruff>=0.12.8",
    "isort>=6.0.1",
    "hatchling>=1.27.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]
ml = [
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
viz = [
    "seaborn>=0.12.0",
]

[project.urls]
Homepage = "https://github.com/Pranava-Kumar/qkdpy"
Repository = "https://github.com/Pranava-Kumar/qkdpy"
"Bug Tracker" = "https://github.com/Pranava-Kumar/qkdpy/issues"

# This is the KEY fix - explicitly specify that only qkdpy should be packaged
[tool.setuptools.packages.find]
where = ["src"]  # Look in the src directory
include = ["qkdpy*"]  # Include qkdpy and all its subpackages
exclude = ["docs*", "tests*", "examples*"]  # Exclude these from packaging

# Rest of your tool configurations...
[tool.ruff]
line-length = 88
target-version = "py310"
include = ["*.py", "*.pyi"]
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
    "node_modules",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
]

[tool.ruff.lint.isort]
known-first-party = ["qkdpy"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore specific files with visualization issues
[[tool.mypy.overrides]]
module = [
    "qkdpy.utils.visualization",
    "qkdpy.utils.advanced_visualization"
]
ignore_errors = true

# Ignore missing imports for external libraries
[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "numpy.*",
    "scipy.*",
    "mpl_toolkits.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["qkdpy"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
