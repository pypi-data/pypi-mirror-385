[project]
name = "pg-mcp"
version = "0.1.4"
description = "Postgres MCP Lite - A lightweight MCP server for PostgreSQL"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "mcp[cli]>=1.5.0",
    "psycopg[binary]>=3.2.6",
    "humanize>=4.8.0",
    "pglast==7.2.0",
    "attrs>=25.3.0",
    "psycopg-pool>=3.2.6",
    "instructor>=1.7.9",
]
license = {text = "MIT"}
keywords = ["mcp", "postgres", "postgresql", "database", "ai", "llm", "model-context-protocol"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[[project.authors]]
name = "AndrÃ© C. Andersen"
email = "andre@andersen.im"

[project.urls]
Homepage = "https://github.com/andre-c-andersen/pg-mcp"
Repository = "https://github.com/andre-c-andersen/pg-mcp"
Issues = "https://github.com/andre-c-andersen/pg-mcp/issues"
"Original Project" = "https://github.com/crystaldba/postgres-mcp"

[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[project.scripts]
pg-mcp = "pg_mcp:main"

# [tool.pyright]
# venvPath = "."
# venv = ".venv"

[tool.pytest.ini_options]
pythonpath = ["./src"]
asyncio_default_fixture_loop_scope = "function"

[dependency-groups]
dev = [
    "pyright==1.1.398",
    "pytest-asyncio>=0.26.0",
    "pytest>=8.3.5",
    "ruff==0.11.2",
]

[tool.black]
line-length = 150

[tool.ruff]
line-length = 150
target-version = "py38"
exclude = [".venv*"]

lint.select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "W",   # pycodestyle warnings
    # "C90", # mccabe complexity
    "N",   # pep8-naming
    # "D",   # pydocstyle
    "UP",  # pyupgrade
    "RUF"  # ruff-specific rules
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["pg-mcp"]

[tool.pyright]
typeCheckingMode = "standard"
pythonVersion = "3.12"
strictParameterNullChecking = true
reportMissingTypeStubs = false
# reportUnknownMemberType = true
# reportUnknownParameterType = true
# reportUnknownVariableType = true
# reportUnknownArgumentType = true
reportPrivateUsage = true
reportUntypedFunctionDecorator = true
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportUnnecessaryCast = true
# reportUnnecessaryComparison = true
