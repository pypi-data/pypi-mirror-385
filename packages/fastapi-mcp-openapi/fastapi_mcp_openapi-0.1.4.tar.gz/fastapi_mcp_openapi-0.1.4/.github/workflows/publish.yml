name: Publish to PyPI and TestPyPI

on:
  # Trigger only when a release is created in GitHub
  release:
    types: [published]
  # Allow manual triggers for testing
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Run tests before building and publishing
  test:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Checkout the specific tag from the release
          ref: ${{ github.event.release.tag_name }}
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          
      - name: Install dependencies
        run: |
          uv sync --dev
          
      - name: Run tests with coverage
        run: |
          uv run pytest -v --tb=short --cov=fastapi_mcp_openapi --cov-report=xml --cov-report=html --cov-report=term-missing
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          
      - name: Upload coverage HTML report as artifact
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.12'
        with:
          name: coverage-html-report-publish
          path: htmlcov/
          retention-days: 30

  # Build distribution packages
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Checkout the specific tag from the release
          ref: ${{ github.event.release.tag_name }}
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Extract version from release tag
        id: get_version
        run: |
          # Remove 'v' prefix if present (e.g., v1.0.0 -> 1.0.0)
          VERSION=${{ github.event.release.tag_name }}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
      - name: Update version in pyproject.toml
        run: |
          # Update the version in pyproject.toml to match the release tag
          sed -i 's/^version = .*/version = "${{ steps.get_version.outputs.version }}"/' pyproject.toml
          echo "Updated pyproject.toml version:"
          grep "^version" pyproject.toml
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          
      - name: Build distribution packages
        run: python -m build
        
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Publish to TestPyPI first for testing
  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: testpypi
      url: https://test.pypi.org/p/fastapi-mcp-openapi
      
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  # Publish to PyPI only after TestPyPI succeeds
  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs: publish-to-testpypi
    runs-on: ubuntu-latest
    
    environment:
      name: pypi
      url: https://pypi.org/p/fastapi-mcp-openapi
      
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  # Create GitHub Release with the uploaded distributions
  github-release:
    name: Update GitHub Release with artifacts
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
      
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          
      - name: Upload distribution artifacts to existing GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.event.release.tag_name }}' dist/**
          --repo '${{ github.repository }}'
