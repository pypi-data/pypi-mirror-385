"""
Package providing generating support files that contain generic code for Dezyne C++ development.

Copyright (c) 2023-2025 Michael van de Ven <michael@ftr-ict.com>
This is free software, released under the MIT License. Refer to dznpy/LICENSE.
"""

# system modules
from dataclasses import dataclass, field
from typing import Optional, Tuple

# dznpy modules
from ..cpp_gen import fqn_t, Namespace, Comment
from ..dznpy_version import VERSION, COPYRIGHT
from ..misc_utils import assert_t_optional, assert_t
from ..scoping import NamespaceIds, ns_ids_t
from ..text_gen import BLANK_LINE, chunk, DO_NOT_MODIFY, TextBlock, TB


def distillate_ns(namespace_prefix: Optional[NamespaceIds]) -> Tuple[NamespaceIds, str, str]:
    """Distillate a namespace id that ends with Dzn and optionally prefixed
    with a user specified NamespaceIds into a result as a combo of this new
    NamespaceIds, its respective string of the C++ variant and a string suitable
    to preclude in a filename."""
    assert_t_optional(namespace_prefix, NamespaceIds)
    fixed_ns = ns_ids_t('Dzn')

    if namespace_prefix is None:
        return fixed_ns, str(fqn_t(fixed_ns)), "_".join(fixed_ns.items)

    prefixed_ns = namespace_prefix + fixed_ns
    return prefixed_ns, str(fqn_t(prefixed_ns)), "_".join(prefixed_ns.items)


def footer() -> str:
    """Generate the generic footer for support files."""
    return str(Comment(f'Generated by: dznpy/support_files v{VERSION}'))


@dataclass(frozen=True)
class SupportFileCfg:
    """Data class containing the parameters for generating a Support File"""
    header: TextBlock
    body: TextBlock
    includes: Optional[TextBlock] = field(default_factory=TextBlock)
    ns_prefix: Optional[NamespaceIds] = field(default=None)

    def __post_init__(self):
        """Postcheck the constructed data class members on validity."""
        assert_t(self.header, TextBlock)
        assert_t(self.body, TextBlock)
        assert_t_optional(self.includes, TextBlock)
        assert_t_optional(self.ns_prefix, NamespaceIds)


def generate_cpp_code(cfg: SupportFileCfg) -> str:
    """Create the C++ code according to the specified configuration. The output is
    associated with an extended header comment block, namespaced body and a footer."""

    full_ns, _, _ = distillate_ns(cfg.ns_prefix)

    extended_header = Comment([chunk(cfg.header),
                               chunk(DO_NOT_MODIFY),
                               COPYRIGHT
                               ])

    namespace_with_body = Namespace(full_ns, contents=TB([BLANK_LINE,
                                                          chunk(cfg.body)
                                                          ]))

    result = TB([chunk(extended_header),
                 chunk(cfg.includes),
                 namespace_with_body,
                 footer()])

    return str(result)
