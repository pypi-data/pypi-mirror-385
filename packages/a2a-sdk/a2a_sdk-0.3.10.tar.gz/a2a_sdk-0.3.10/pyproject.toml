[project]
name = "a2a-sdk"
dynamic = ["version"]
description = "A2A Python SDK"
readme = "README.md"
license = "Apache-2.0"
authors = [{ name = "Google LLC", email = "googleapis-packages@google.com" }]
requires-python = ">=3.10"
keywords = ["A2A", "A2A SDK", "A2A Protocol", "Agent2Agent", "Agent 2 Agent"]
dependencies = [
  "httpx>=0.28.1",
  "httpx-sse>=0.4.0",
  "pydantic>=2.11.3",
  "protobuf>=5.29.5",
  "google-api-core>=1.26.0",
]

classifiers = [
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: Apache Software License",
]

[project.optional-dependencies]
http-server = ["fastapi>=0.115.2", "sse-starlette", "starlette"]
encryption = ["cryptography>=43.0.0"]
grpc = ["grpcio>=1.60", "grpcio-tools>=1.60", "grpcio_reflection>=1.7.0"]
telemetry = ["opentelemetry-api>=1.33.0", "opentelemetry-sdk>=1.33.0"]
postgresql = ["sqlalchemy[asyncio,postgresql-asyncpg]>=2.0.0"]
mysql = ["sqlalchemy[asyncio,aiomysql]>=2.0.0"]
sqlite = ["sqlalchemy[asyncio,aiosqlite]>=2.0.0"]

sql = ["a2a-sdk[postgresql,mysql,sqlite]"]

all = [
  "a2a-sdk[http-server]",
  "a2a-sdk[sql]",
  "a2a-sdk[encryption]",
  "a2a-sdk[grpc]",
  "a2a-sdk[telemetry]",
]

[project.urls]
homepage = "https://a2a-protocol.org/"
repository = "https://github.com/a2aproject/a2a-python"
changelog = "https://github.com/a2aproject/a2a-python/blob/main/CHANGELOG.md"
documentation = "https://a2a-protocol.org/latest/sdk/python/"

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.hatch.build.targets.wheel]
packages = ["src/a2a"]

[tool.hatch.build.targets.sdist]
exclude = ["tests/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "-ra --strict-markers"
markers = [
  "asyncio: mark a test as a coroutine that should be run by pytest-asyncio",
]

[tool.pytest-asyncio]
mode = "strict"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"

[dependency-groups]
dev = [
  "datamodel-code-generator>=0.30.0",
  "mypy>=1.15.0",
  "pytest>=8.3.5",
  "pytest-asyncio>=0.26.0",
  "pytest-cov>=6.1.1",
  "pytest-mock>=3.14.0",
  "respx>=0.20.2",
  "ruff>=0.12.8",
  "uv-dynamic-versioning>=0.8.2",
  "types-protobuf",
  "types-requests",
  "pre-commit",
  "fastapi>=0.115.2",
  "sse-starlette",
  "starlette",
  "pyupgrade",
  "autoflake",
  "no_implicit_optional",
  "trio",
  "uvicorn>=0.35.0",
]

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = ["src/a2a/grpc/"]
disable_error_code = [
  "import-not-found",
  "annotation-unchecked",
  "import-untyped",
]

[[tool.mypy.overrides]]
module = "examples.*"
follow_imports = "skip"

[tool.pyright]
include = ["src"]
exclude = [
  "**/__pycache__",
  "**/dist",
  "**/build",
  "**/node_modules",
  "**/venv",
  "**/.venv",
  "src/a2a/grpc/",
]
reportMissingImports = "none"
reportMissingModuleSource = "none"

[tool.coverage.run]
branch = true
omit = [
    "*/tests/*",
    "*/site-packages/*",
    "*/__init__.py",
    "src/a2a/grpc/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "import",
    "def __repr__",
    "raise NotImplementedError",
    "if TYPE_CHECKING",
    "@abstractmethod",
    "pass",
    "raise ImportError",
]

#
# Ruff linter and code formatter for A2A
#
[tool.ruff]
# This file follows the standards in Google Python Style Guide
# https://google.github.io/styleguide/pyguide.html
line-length = 80 # Google Style Guide §3.2: 80 columns
indent-width = 4 # Google Style Guide §3.4: 4 spaces
target-version = "py310" # Minimum Python version

[tool.ruff.lint]
ignore = [
    "COM812", # Trailing comma missing.
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "D203",   # 1 blank line required before class docstring (Google: 0)
    "D213",   # Multi-line docstring summary should start at the second line (Google: first line)
    "D100",   # Ignore Missing docstring in public module (often desired at top level __init__.py)
    "D104",   # Ignore Missing docstring in public package (often desired at top level __init__.py)
    "D107",   # Ignore Missing docstring in __init__ (use class docstring)
    "TD002",  # Ignore Missing author in TODOs (often not required)
    "TD003",  # Ignore Missing issue link in TODOs (often not required/available)
    "T201",   # Ignore print presence
    "RUF012", # Ignore Mutable class attributes should be annotated with `typing.ClassVar`
    "E501",   # Ignore line length (handled by Ruff's dynamic line length)
    "ANN002",
    "ANN003",
    "ANN401",
    "TRY003",
    "TRY201",
    "FIX002",
]

select = [
    "E",  # pycodestyle errors (PEP 8)
    "W",  # pycodestyle warnings (PEP 8)
    "F",  # Pyflakes (logical errors, unused imports/variables)
    "I",  # isort (import sorting - Google Style §3.1.2)
    "D",  # pydocstyle (docstring conventions - Google Style §3.8)
    "N",  # pep8-naming (naming conventions - Google Style §3.16)
    "UP", # pyupgrade (use modern Python syntax)
    "ANN",# flake8-annotations (type hint usage/style - Google Style §2.22)
    "A",  # flake8-builtins (avoid shadowing builtins)
    "B",  # flake8-bugbear (potential logic errors & style issues - incl. mutable defaults B006, B008)
    "C4", # flake8-comprehensions (unnecessary list/set/dict comprehensions)
    "ISC",# flake8-implicit-str-concat (disallow implicit string concatenation across lines)
    "T20",# flake8-print (discourage `print` - prefer logging)
    "SIM",# flake8-simplify (simplify code, e.g., `if cond: return True else: return False`)
    "PTH",# flake8-use-pathlib (use pathlib instead of os.path where possible)
    "PL", # Pylint rules ported to Ruff (PLC, PLE, PLR, PLW)
    "PIE",# flake8-pie (misc code improvements, e.g., no-unnecessary-pass)
    "RUF",# Ruff-specific rules (e.g., RUF001-003 ambiguous unicode, RUF013 implicit optional)
    "RET",# flake8-return (consistency in return statements)
    "SLF",# flake8-self (check for private member access via `self`)
    "TID",# flake8-tidy-imports (relative imports, banned imports - configure if needed)
    "YTT",# flake8-boolean-trap (checks for boolean positional arguments, truthiness tests - Google Style §3.10)
    "TD", # flake8-todos (check TODO format - Google Style §3.7)
    "TCH",# flake8-type-checking (helps manage TYPE_CHECKING blocks and imports)
    "PYI",# flake8-pyi (best practices for .pyi stub files, some rules are useful for .py too)
    "S",  # flake8-bandit (security issues)
    "DTZ",# flake8-datetimez (timezone-aware datetimes)
    "ERA",# flake8-eradicate (commented-out code)
    "Q",  # flake8-quotes (quote style consistency)
    "RSE",# flake8-raise (modern raise statements)
    "TRY",# tryceratops (exception handling best practices)
    "PERF",# perflint (performance anti-patterns)
    "BLE",
    "T10",
    "ICN",
    "G",
    "FIX",
    "ASYNC",
    "INP",
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*",
    "src/a2a/grpc/**",
    "tests/**",
]

[tool.ruff.lint.isort]
case-sensitive = true
lines-after-imports = 2
lines-between-types = 1

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload", "abc.abstractmethod"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = false

[tool.ruff.lint.pep8-naming]
ignore-names = ["test_*", "setUp", "tearDown", "mock_*"]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all" # Google generally prefers absolute imports (§3.1.2)

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D", "ANN"]  # Ignore unused imports in __init__.py
"*_test.py" = [
    "D",      # All pydocstyle rules
    "ANN",    # Missing type annotation for function argument
    "RUF013", # Implicit optional type in test function signatures
    "S101",   # Use of `assert` detected (expected in tests)
    "PLR2004",
    "SLF001",
]
"test_*.py" = [
    "D",
    "ANN",
    "RUF013",
    "S101",
    "PLR2004",
    "SLF001",
]
"types.py" = ["D", "E501"]  # Ignore docstring and annotation issues in types.py
"proto_utils.py" = ["D102", "PLR0911"]
"helpers.py" = ["ANN001", "ANN201", "ANN202"]
"scripts/*.py" = ["INP001"]

[tool.ruff.format]
exclude = [
    "src/a2a/grpc/**",
]
docstring-code-format = true
docstring-code-line-length = "dynamic"
quote-style = "single"
indent-style = "space"
