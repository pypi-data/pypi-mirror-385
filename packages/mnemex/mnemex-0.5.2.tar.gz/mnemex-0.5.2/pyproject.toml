[project]
name = "mnemex"
version = "0.5.2"
description = "Mnemex: Temporal memory management for AI assistants with human-like dynamics"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Mnemex"}
]
keywords = ["mcp", "memory", "ai", "llm", "temporal-decay", "mnemonic", "memex"]

dependencies = [
    "mcp>=1.2.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "python-frontmatter>=1.1.0",
    "markdown>=3.5.0",
    "GitPython>=3.1.40",
]

[project.optional-dependencies]
embeddings = [
    "sentence-transformers>=2.0.0",
    "numpy>=1.24.0",
]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.8.0",
    "ruff>=0.2.0",
    "pre-commit>=3.7.0",
]

[project.scripts]
mnemex = "mnemex.server:main_sync"
mnemex-migrate = "mnemex.cli.migrate:main"
mnemex-index-ltm = "mnemex.storage.ltm_index:main"
mnemex-backup = "mnemex.backup.git_backup:main"
mnemex-vault = "mnemex.vault.markdown_writer:main"
mnemex-search = "mnemex.tools.search_unified:main"
mnemex-maintenance = "mnemex.storage.maintenance:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mnemex"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--verbose",
    "--cov=mnemex",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
show_error_codes = true

[[tool.mypy.overrides]]
module = "sentence_transformers.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "frontmatter.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "markdown.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "git.*"
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.isort]
known-first-party = ["mnemex"]
