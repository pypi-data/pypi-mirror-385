{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Filtering\n */\nvar gridFilterStateSelector = function gridFilterStateSelector(state) {\n  return state.filter;\n};\n\n/**\n * Get the current filter model.\n * @category Filtering\n */\nexport var gridFilterModelSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filterModel;\n});\n\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\nexport var gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, function (filterModel) {\n  return filterModel.quickFilterValues;\n});\n\n/**\n * @category Visible rows\n * @ignore - do not document.\n */\nexport var gridVisibleRowsLookupSelector = function gridVisibleRowsLookupSelector(state) {\n  return state.visibleRowsLookup;\n};\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filteredRowsLookup;\n});\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filteredDescendantCountLookup;\n});\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport var gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, function (visibleRowsLookup, sortedRows) {\n  return sortedRows.filter(function (row) {\n    return visibleRowsLookup[row.id] !== false;\n  });\n});\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport var gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, function (visibleSortedRowEntries) {\n  return visibleSortedRowEntries.map(function (row) {\n    return row.id;\n  });\n});\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport var gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, function (filteredRowsLookup, sortedRows) {\n  return sortedRows.filter(function (row) {\n    return filteredRowsLookup[row.id] !== false;\n  });\n});\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport var gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, function (filteredSortedRowEntries) {\n  return filteredSortedRowEntries.map(function (row) {\n    return row.id;\n  });\n});\n\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport var gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, function (visibleSortedRows, rowTree, rowTreeDepth) {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n  return visibleSortedRows.filter(function (row) {\n    var _rowTree$row$id;\n    return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;\n  });\n});\n\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\nexport var gridExpandedRowCountSelector = createSelector(gridExpandedSortedRowEntriesSelector, function (visibleSortedRows) {\n  return visibleSortedRows.length;\n});\n\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport var gridFilteredTopLevelRowCountSelector = createSelector(gridFilteredSortedTopLevelRowEntriesSelector, function (visibleSortedTopLevelRows) {\n  return visibleSortedTopLevelRows.length;\n});\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector, function (filterModel, columnLookup) {\n  var _filterModel$items;\n  return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter(function (item) {\n    var _column$filterOperato, _item$value;\n    if (!item.field) {\n      return false;\n    }\n    var column = columnLookup[item.field];\n    if (!(column != null && column.filterOperators) || (column == null || (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {\n      return false;\n    }\n    var filterOperator = column.filterOperators.find(function (operator) {\n      return operator.value === item.operator;\n    });\n    if (!filterOperator) {\n      return false;\n    }\n    return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== '';\n  });\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, function (activeFilters) {\n  var result = activeFilters.reduce(function (res, filterItem) {\n    if (!res[filterItem.field]) {\n      res[filterItem.field] = [filterItem];\n    } else {\n      res[filterItem.field].push(filterItem);\n    }\n    return res;\n  }, {});\n  return result;\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridSortedRowEntriesSelector","gridColumnLookupSelector","gridRowMaximumTreeDepthSelector","gridRowTreeSelector","gridFilterStateSelector","state","filter","gridFilterModelSelector","filterState","filterModel","gridQuickFilterValuesSelector","quickFilterValues","gridVisibleRowsLookupSelector","visibleRowsLookup","gridFilteredRowsLookupSelector","filteredRowsLookup","gridFilteredDescendantCountLookupSelector","filteredDescendantCountLookup","gridExpandedSortedRowEntriesSelector","sortedRows","row","id","gridExpandedSortedRowIdsSelector","visibleSortedRowEntries","map","gridFilteredSortedRowEntriesSelector","gridFilteredSortedRowIdsSelector","filteredSortedRowEntries","gridFilteredSortedTopLevelRowEntriesSelector","visibleSortedRows","rowTree","rowTreeDepth","_rowTree$row$id","depth","gridExpandedRowCountSelector","length","gridFilteredTopLevelRowCountSelector","visibleSortedTopLevelRows","gridFilterActiveItemsSelector","columnLookup","_filterModel$items","items","item","_column$filterOperato","_item$value","field","column","filterOperators","filterOperator","find","operator","value","InputComponent","toString","gridFilterActiveItemsLookupSelector","activeFilters","result","reduce","res","filterItem","push"],"sources":["/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Filtering\n */\nconst gridFilterStateSelector = state => state.filter;\n\n/**\n * Get the current filter model.\n * @category Filtering\n */\nexport const gridFilterModelSelector = createSelector(gridFilterStateSelector, filterState => filterState.filterModel);\n\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\nexport const gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, filterModel => filterModel.quickFilterValues);\n\n/**\n * @category Visible rows\n * @ignore - do not document.\n */\nexport const gridVisibleRowsLookupSelector = state => state.visibleRowsLookup;\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredRowsLookup);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredDescendantCountLookup);\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter(row => visibleRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport const gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, visibleSortedRowEntries => visibleSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter(row => filteredRowsLookup[row.id] !== false));\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport const gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, filteredSortedRowEntries => filteredSortedRowEntries.map(row => row.id));\n\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n  return visibleSortedRows.filter(row => {\n    var _rowTree$row$id;\n    return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;\n  });\n});\n\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridExpandedRowCountSelector = createSelector(gridExpandedSortedRowEntriesSelector, visibleSortedRows => visibleSortedRows.length);\n\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport const gridFilteredTopLevelRowCountSelector = createSelector(gridFilteredSortedTopLevelRowEntriesSelector, visibleSortedTopLevelRows => visibleSortedTopLevelRows.length);\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => {\n  var _filterModel$items;\n  return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter(item => {\n    var _column$filterOperato, _item$value;\n    if (!item.field) {\n      return false;\n    }\n    const column = columnLookup[item.field];\n    if (!(column != null && column.filterOperators) || (column == null || (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {\n      return false;\n    }\n    const filterOperator = column.filterOperators.find(operator => operator.value === item.operator);\n    if (!filterOperator) {\n      return false;\n    }\n    return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== '';\n  });\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport const gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, activeFilters => {\n  const result = activeFilters.reduce((res, filterItem) => {\n    if (!res[filterItem.field]) {\n      res[filterItem.field] = [filterItem];\n    } else {\n      res[filterItem.field].push(filterItem);\n    }\n    return res;\n  }, {});\n  return result;\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}