{"ast":null,"code":"import _classCallCheck from\"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import Table from'@mui/material/Table';import TableBody from'@mui/material/TableBody';import TableHead from'@mui/material/TableHead';import TableRow from'@mui/material/TableRow';import Grid from'@mui/material/Unstable_Grid2';import React from'react';import fetchWrapper from'../../components/fetchWrapper';import{toReadableSize}from'../../components/utils';import{StyledTableCell,StyledTableRow}from'./style';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NodeInfo=/*#__PURE__*/function(_React$Component){_inherits(NodeInfo,_React$Component);var _super=_createSuper(NodeInfo);function NodeInfo(props){var _this;_classCallCheck(this,NodeInfo);_this=_super.call(this,props);_this.nodeRole=props.nodeRole;_this.endpoint=props.endpoint;_this.state={version:{},info:[]};_this.t=props.t;return _this;}_createClass(NodeInfo,[{key:\"refreshInfo\",value:function refreshInfo(){var _this2=this;if(this.props.cookie.token===''||this.props.cookie.token===undefined||this.props.cookie.token!=='no_auth'&&!sessionStorage.getItem('token')){return;}fetchWrapper.get('/v1/cluster/info?detailed=true').then(function(data){var state=_this2.state;state['info']=data;_this2.setState(state);}).catch(function(error){console.error('Error:',error);if(error.response.status==403){_this2.props.handleGoBack();}});if(JSON.stringify(this.state.version)==='{}'){fetchWrapper.get('/v1/cluster/version').then(function(data){var state=_this2.state;state['version']={release:'v'+data['version'],commit:data['full-revisionid']};_this2.setState(state);}).catch(function(error){console.error('Error:',error);if(error.response.status==403){_this2.props.handleGoBack();}});}}},{key:\"componentDidMount\",value:function componentDidMount(){var _this3=this;this.interval=setInterval(function(){return _this3.refreshInfo();},5000);this.refreshInfo();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.interval);}},{key:\"render\",value:function render(){var _this4=this;if(this.state===undefined||this.state['info']===[]){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading\"});}if(this.nodeRole!=='Worker-Details'){var roleData=this.state['info'].filter(function(obj){return obj['node_type']===_this4.nodeRole;});var sum=function sum(arr){return arr.reduce(function(a,b){return a+b;},0);};var gatherResourceStats=function gatherResourceStats(prop){return sum(roleData.map(function(obj){return obj[prop];}));};var resourceStats={cpu_total:gatherResourceStats('cpu_count'),cpu_avail:gatherResourceStats('cpu_available'),memory_total:gatherResourceStats('mem_total'),memory_avail:gatherResourceStats('mem_available'),gpu_total:gatherResourceStats('gpu_count'),gpu_memory_total:gatherResourceStats('gpu_vram_total'),gpu_memory_avail:gatherResourceStats('gpu_vram_available')};//for all cases, we will at least have cpu information available.\nresourceStats.cpu_used=resourceStats.cpu_total-resourceStats.cpu_avail;resourceStats.memory_used=resourceStats.memory_total-resourceStats.memory_avail;var row_count=/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:this.t('clusterInfo.count')}),/*#__PURE__*/_jsx(StyledTableCell,{children:/*#__PURE__*/_jsx(Grid,{container:true,children:/*#__PURE__*/_jsx(Grid,{children:roleData.length})})})]});var CPU_row=/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:this.t('clusterInfo.cpuInfo')}),/*#__PURE__*/_jsx(StyledTableCell,{children:/*#__PURE__*/_jsxs(Grid,{container:true,children:[/*#__PURE__*/_jsxs(Grid,{xs:4,children:[this.t('clusterInfo.usage'),' ',resourceStats.cpu_used.toFixed(2)]}),/*#__PURE__*/_jsxs(Grid,{xs:8,children:[this.t('clusterInfo.total'),' ',resourceStats.cpu_total.toFixed(2)]})]})})]});var CPU_Memory_Info_row=/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:this.t('clusterInfo.cpuMemoryInfo')}),/*#__PURE__*/_jsx(StyledTableCell,{children:/*#__PURE__*/_jsxs(Grid,{container:true,children:[/*#__PURE__*/_jsxs(Grid,{xs:4,children:[this.t('clusterInfo.usage'),' ',toReadableSize(resourceStats.memory_used)]}),/*#__PURE__*/_jsxs(Grid,{xs:8,children:[this.t('clusterInfo.total'),' ',toReadableSize(resourceStats.memory_total)]})]})})]});var version_row=/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:this.t('clusterInfo.version')}),/*#__PURE__*/_jsx(StyledTableCell,{children:/*#__PURE__*/_jsxs(Grid,{container:true,children:[/*#__PURE__*/_jsxs(Grid,{xs:4,children:[this.t('clusterInfo.release'),\" \",this.state.version.release]}),/*#__PURE__*/_jsxs(Grid,{xs:8,children:[this.t('clusterInfo.commit'),\" \",this.state.version.commit]})]})})]});var table_bodies;//case that we do not have GPU presents.\nif(resourceStats.gpu_memory_total===0){table_bodies=[row_count,CPU_row,CPU_Memory_Info_row,version_row];}else{resourceStats.gpu_memory_used=resourceStats.gpu_memory_total-resourceStats.gpu_memory_avail;var GPU_row=/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:this.t('clusterInfo.gpuInfo')}),/*#__PURE__*/_jsx(StyledTableCell,{children:/*#__PURE__*/_jsx(Grid,{container:true,children:/*#__PURE__*/_jsxs(Grid,{xs:12,children:[this.t('clusterInfo.total'),' ',resourceStats.gpu_total.toFixed(2)]})})})]});var GPU_Memory_Info_row=/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:this.t('clusterInfo.gpuMemoryInfo')}),/*#__PURE__*/_jsx(StyledTableCell,{children:/*#__PURE__*/_jsxs(Grid,{container:true,children:[/*#__PURE__*/_jsxs(Grid,{xs:4,children:[this.t('clusterInfo.usage'),' ',toReadableSize(resourceStats.gpu_memory_used)]}),/*#__PURE__*/_jsxs(Grid,{xs:8,children:[this.t('clusterInfo.total'),' ',toReadableSize(resourceStats.gpu_memory_total)]})]})})]});table_bodies=[row_count,CPU_row,CPU_Memory_Info_row,GPU_row,GPU_Memory_Info_row,version_row];}if(this.nodeRole==='Supervisor'){var supervisor_addr_row=/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:this.t('clusterInfo.address')}),/*#__PURE__*/_jsx(StyledTableCell,{children:/*#__PURE__*/_jsx(Grid,{container:true,children:/*#__PURE__*/_jsx(Grid,{children:roleData[0]?roleData[0]['ip_address']:'-'})})})]});table_bodies.splice(1,0,supervisor_addr_row);}return/*#__PURE__*/_jsxs(Table,{size:\"small\",children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.item')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:/*#__PURE__*/_jsx(Grid,{container:true,children:/*#__PURE__*/_jsx(Grid,{children:this.t('clusterInfo.value')})})})]})}),/*#__PURE__*/_jsx(TableBody,{children:table_bodies})]});}else{var workerData=this.state['info'].filter(function(obj){return obj['node_type']==='Worker';});return/*#__PURE__*/_jsxs(Table,{size:\"small\",children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.nodeType')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.address')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.cpuUsage')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.cpuTotal')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.memUsage')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.memTotal')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.gpuCount')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.gpuMemUsage')}),/*#__PURE__*/_jsx(StyledTableCell,{style:{fontWeight:'bolder'},children:this.t('clusterInfo.gpuMemTotal')})]})}),/*#__PURE__*/_jsx(TableBody,{children:workerData.map(function(row){return/*#__PURE__*/_jsxs(StyledTableRow,{children:[/*#__PURE__*/_jsx(StyledTableCell,{children:_this4.t('clusterInfo.worker')}),/*#__PURE__*/_jsx(StyledTableCell,{children:row['ip_address']}),/*#__PURE__*/_jsx(StyledTableCell,{children:(row['cpu_count']-row['cpu_available']).toFixed(2)}),/*#__PURE__*/_jsx(StyledTableCell,{children:row['cpu_count'].toFixed(2)}),/*#__PURE__*/_jsx(StyledTableCell,{children:toReadableSize(row['mem_total']-row['mem_available'])}),/*#__PURE__*/_jsx(StyledTableCell,{children:toReadableSize(row['mem_total'])}),/*#__PURE__*/_jsx(StyledTableCell,{children:row['gpu_count'].toFixed(2)}),/*#__PURE__*/_jsx(StyledTableCell,{children:toReadableSize(row['gpu_vram_total']-row['gpu_vram_available'])}),/*#__PURE__*/_jsx(StyledTableCell,{children:toReadableSize(row['gpu_vram_total'])})]});})})]});}}}]);return NodeInfo;}(React.Component);export default NodeInfo;","map":{"version":3,"names":["Table","TableBody","TableHead","TableRow","Grid","React","fetchWrapper","toReadableSize","StyledTableCell","StyledTableRow","jsx","_jsx","jsxs","_jsxs","NodeInfo","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","nodeRole","endpoint","state","version","info","t","_createClass","key","value","refreshInfo","_this2","cookie","token","undefined","sessionStorage","getItem","get","then","data","setState","catch","error","console","response","status","handleGoBack","JSON","stringify","release","commit","componentDidMount","_this3","interval","setInterval","componentWillUnmount","clearInterval","render","_this4","children","roleData","filter","obj","sum","arr","reduce","a","b","gatherResourceStats","prop","map","resourceStats","cpu_total","cpu_avail","memory_total","memory_avail","gpu_total","gpu_memory_total","gpu_memory_avail","cpu_used","memory_used","row_count","container","length","CPU_row","xs","toFixed","CPU_Memory_Info_row","version_row","table_bodies","gpu_memory_used","GPU_row","GPU_Memory_Info_row","supervisor_addr_row","splice","size","style","fontWeight","workerData","row","Component"],"sources":["/home/runner/work/inference/inference/xinference/ui/web/ui/src/scenes/cluster_info/nodeInfo.js"],"sourcesContent":["import Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Grid from '@mui/material/Unstable_Grid2'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport fetchWrapper from '../../components/fetchWrapper'\nimport { toReadableSize } from '../../components/utils'\nimport { StyledTableCell, StyledTableRow } from './style'\n\nclass NodeInfo extends React.Component {\n  constructor(props) {\n    super(props)\n    this.nodeRole = props.nodeRole\n    this.endpoint = props.endpoint\n    this.state = {\n      version: {},\n      info: [],\n    }\n    this.t = props.t\n  }\n\n  refreshInfo() {\n    if (\n      this.props.cookie.token === '' ||\n      this.props.cookie.token === undefined ||\n      (this.props.cookie.token !== 'no_auth' &&\n        !sessionStorage.getItem('token'))\n    ) {\n      return\n    }\n    fetchWrapper\n      .get('/v1/cluster/info?detailed=true')\n      .then((data) => {\n        const { state } = this\n        state['info'] = data\n        this.setState(state)\n      })\n      .catch((error) => {\n        console.error('Error:', error)\n        if (error.response.status == 403) {\n          this.props.handleGoBack()\n        }\n      })\n\n    if (JSON.stringify(this.state.version) === '{}') {\n      fetchWrapper\n        .get('/v1/cluster/version')\n        .then((data) => {\n          const { state } = this\n          state['version'] = {\n            release: 'v' + data['version'],\n            commit: data['full-revisionid'],\n          }\n          this.setState(state)\n        })\n        .catch((error) => {\n          console.error('Error:', error)\n          if (error.response.status == 403) {\n            this.props.handleGoBack()\n          }\n        })\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.refreshInfo(), 5000)\n    this.refreshInfo()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  render() {\n    if (this.state === undefined || this.state['info'] === []) {\n      return <div>Loading</div>\n    }\n\n    if (this.nodeRole !== 'Worker-Details') {\n      const roleData = this.state['info'].filter(\n        (obj) => obj['node_type'] === this.nodeRole\n      )\n\n      const sum = (arr) => {\n        return arr.reduce((a, b) => a + b, 0)\n      }\n\n      const gatherResourceStats = (prop) =>\n        sum(roleData.map((obj) => obj[prop]))\n\n      const resourceStats = {\n        cpu_total: gatherResourceStats('cpu_count'),\n        cpu_avail: gatherResourceStats('cpu_available'),\n        memory_total: gatherResourceStats('mem_total'),\n        memory_avail: gatherResourceStats('mem_available'),\n        gpu_total: gatherResourceStats('gpu_count'),\n        gpu_memory_total: gatherResourceStats('gpu_vram_total'),\n        gpu_memory_avail: gatherResourceStats('gpu_vram_available'),\n      }\n\n      //for all cases, we will at least have cpu information available.\n      resourceStats.cpu_used = resourceStats.cpu_total - resourceStats.cpu_avail\n      resourceStats.memory_used =\n        resourceStats.memory_total - resourceStats.memory_avail\n\n      const row_count = (\n        <StyledTableRow>\n          <StyledTableCell>{this.t('clusterInfo.count')}</StyledTableCell>\n          <StyledTableCell>\n            <Grid container>\n              <Grid>{roleData.length}</Grid>\n            </Grid>\n          </StyledTableCell>\n        </StyledTableRow>\n      )\n\n      const CPU_row = (\n        <StyledTableRow>\n          <StyledTableCell>{this.t('clusterInfo.cpuInfo')}</StyledTableCell>\n          <StyledTableCell>\n            <Grid container>\n              <Grid xs={4}>\n                {this.t('clusterInfo.usage')}{' '}\n                {resourceStats.cpu_used.toFixed(2)}\n              </Grid>\n              <Grid xs={8}>\n                {this.t('clusterInfo.total')}{' '}\n                {resourceStats.cpu_total.toFixed(2)}\n              </Grid>\n            </Grid>\n          </StyledTableCell>\n        </StyledTableRow>\n      )\n\n      const CPU_Memory_Info_row = (\n        <StyledTableRow>\n          <StyledTableCell>\n            {this.t('clusterInfo.cpuMemoryInfo')}\n          </StyledTableCell>\n          <StyledTableCell>\n            <Grid container>\n              <Grid xs={4}>\n                {this.t('clusterInfo.usage')}{' '}\n                {toReadableSize(resourceStats.memory_used)}\n              </Grid>\n              <Grid xs={8}>\n                {this.t('clusterInfo.total')}{' '}\n                {toReadableSize(resourceStats.memory_total)}\n              </Grid>\n            </Grid>\n          </StyledTableCell>\n        </StyledTableRow>\n      )\n\n      const version_row = (\n        <StyledTableRow>\n          <StyledTableCell>{this.t('clusterInfo.version')}</StyledTableCell>\n          <StyledTableCell>\n            <Grid container>\n              <Grid xs={4}>\n                {this.t('clusterInfo.release')} {this.state.version.release}\n              </Grid>\n              <Grid xs={8}>\n                {this.t('clusterInfo.commit')} {this.state.version.commit}\n              </Grid>\n            </Grid>\n          </StyledTableCell>\n        </StyledTableRow>\n      )\n\n      let table_bodies\n      //case that we do not have GPU presents.\n      if (resourceStats.gpu_memory_total === 0) {\n        table_bodies = [row_count, CPU_row, CPU_Memory_Info_row, version_row]\n      } else {\n        resourceStats.gpu_memory_used =\n          resourceStats.gpu_memory_total - resourceStats.gpu_memory_avail\n\n        const GPU_row = (\n          <StyledTableRow>\n            <StyledTableCell>{this.t('clusterInfo.gpuInfo')}</StyledTableCell>\n            <StyledTableCell>\n              <Grid container>\n                <Grid xs={12}>\n                  {this.t('clusterInfo.total')}{' '}\n                  {resourceStats.gpu_total.toFixed(2)}\n                </Grid>\n              </Grid>\n            </StyledTableCell>\n          </StyledTableRow>\n        )\n\n        const GPU_Memory_Info_row = (\n          <StyledTableRow>\n            <StyledTableCell>\n              {this.t('clusterInfo.gpuMemoryInfo')}\n            </StyledTableCell>\n            <StyledTableCell>\n              <Grid container>\n                <Grid xs={4}>\n                  {this.t('clusterInfo.usage')}{' '}\n                  {toReadableSize(resourceStats.gpu_memory_used)}\n                </Grid>\n                <Grid xs={8}>\n                  {this.t('clusterInfo.total')}{' '}\n                  {toReadableSize(resourceStats.gpu_memory_total)}\n                </Grid>\n              </Grid>\n            </StyledTableCell>\n          </StyledTableRow>\n        )\n\n        table_bodies = [\n          row_count,\n          CPU_row,\n          CPU_Memory_Info_row,\n          GPU_row,\n          GPU_Memory_Info_row,\n          version_row,\n        ]\n      }\n\n      if (this.nodeRole === 'Supervisor') {\n        const supervisor_addr_row = (\n          <StyledTableRow>\n            <StyledTableCell>{this.t('clusterInfo.address')}</StyledTableCell>\n            <StyledTableCell>\n              <Grid container>\n                <Grid>{roleData[0] ? roleData[0]['ip_address'] : '-'}</Grid>\n              </Grid>\n            </StyledTableCell>\n          </StyledTableRow>\n        )\n        table_bodies.splice(1, 0, supervisor_addr_row)\n      }\n\n      return (\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.item')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                <Grid container>\n                  <Grid>{this.t('clusterInfo.value')}</Grid>\n                </Grid>\n              </StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{table_bodies}</TableBody>\n        </Table>\n      )\n    } else {\n      const workerData = this.state['info'].filter(\n        (obj) => obj['node_type'] === 'Worker'\n      )\n\n      return (\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.nodeType')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.address')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.cpuUsage')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.cpuTotal')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.memUsage')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.memTotal')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.gpuCount')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.gpuMemUsage')}\n              </StyledTableCell>\n              <StyledTableCell style={{ fontWeight: 'bolder' }}>\n                {this.t('clusterInfo.gpuMemTotal')}\n              </StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {workerData.map((row) => (\n              <StyledTableRow>\n                <StyledTableCell>\n                  {this.t('clusterInfo.worker')}\n                </StyledTableCell>\n                <StyledTableCell>{row['ip_address']}</StyledTableCell>\n                <StyledTableCell>\n                  {(row['cpu_count'] - row['cpu_available']).toFixed(2)}\n                </StyledTableCell>\n                <StyledTableCell>{row['cpu_count'].toFixed(2)}</StyledTableCell>\n                <StyledTableCell>\n                  {toReadableSize(row['mem_total'] - row['mem_available'])}\n                </StyledTableCell>\n                <StyledTableCell>\n                  {toReadableSize(row['mem_total'])}\n                </StyledTableCell>\n                <StyledTableCell>{row['gpu_count'].toFixed(2)}</StyledTableCell>\n                <StyledTableCell>\n                  {toReadableSize(\n                    row['gpu_vram_total'] - row['gpu_vram_available']\n                  )}\n                </StyledTableCell>\n                <StyledTableCell>\n                  {toReadableSize(row['gpu_vram_total'])}\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      )\n    }\n  }\n}\n\nNodeInfo.propTypes = {\n  nodeRole: PropTypes.string,\n  endpoint: PropTypes.string,\n}\n\nexport default NodeInfo\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}