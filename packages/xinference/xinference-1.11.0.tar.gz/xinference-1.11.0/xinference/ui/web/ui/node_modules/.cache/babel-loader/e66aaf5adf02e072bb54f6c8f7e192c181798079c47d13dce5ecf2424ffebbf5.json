{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nexport var gridRowSelectionStateSelector = function gridRowSelectionStateSelector(state) {\n  return state.rowSelection;\n};\nexport var selectedGridRowsCountSelector = createSelector(gridRowSelectionStateSelector, function (selection) {\n  return selection.length;\n});\nexport var selectedGridRowsSelector = createSelectorMemoized(gridRowSelectionStateSelector, gridRowsLookupSelector, function (selectedRows, rowsLookup) {\n  return new Map(selectedRows.map(function (id) {\n    return [id, rowsLookup[id]];\n  }));\n});\nexport var selectedIdsLookupSelector = createSelectorMemoized(gridRowSelectionStateSelector, function (selection) {\n  return selection.reduce(function (lookup, rowId) {\n    lookup[rowId] = rowId;\n    return lookup;\n  }, {});\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridRowsLookupSelector","gridRowSelectionStateSelector","state","rowSelection","selectedGridRowsCountSelector","selection","length","selectedGridRowsSelector","selectedRows","rowsLookup","Map","map","id","selectedIdsLookupSelector","reduce","lookup","rowId"],"sources":["/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nexport const gridRowSelectionStateSelector = state => state.rowSelection;\nexport const selectedGridRowsCountSelector = createSelector(gridRowSelectionStateSelector, selection => selection.length);\nexport const selectedGridRowsSelector = createSelectorMemoized(gridRowSelectionStateSelector, gridRowsLookupSelector, (selectedRows, rowsLookup) => new Map(selectedRows.map(id => [id, rowsLookup[id]])));\nexport const selectedIdsLookupSelector = createSelectorMemoized(gridRowSelectionStateSelector, selection => selection.reduce((lookup, rowId) => {\n  lookup[rowId] = rowId;\n  return lookup;\n}, {}));"],"mappings":"AAAA,SAASA,cAAc,EAAEC,sBAAsB,QAAQ,+BAA+B;AACtF,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,OAAO,IAAMC,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAGC,KAAK;EAAA,OAAIA,KAAK,CAACC,YAAY;AAAA;AACxE,OAAO,IAAMC,6BAA6B,GAAGN,cAAc,CAACG,6BAA6B,EAAE,UAAAI,SAAS;EAAA,OAAIA,SAAS,CAACC,MAAM;AAAA,EAAC;AACzH,OAAO,IAAMC,wBAAwB,GAAGR,sBAAsB,CAACE,6BAA6B,EAAED,sBAAsB,EAAE,UAACQ,YAAY,EAAEC,UAAU;EAAA,OAAK,IAAIC,GAAG,CAACF,YAAY,CAACG,GAAG,CAAC,UAAAC,EAAE;IAAA,OAAI,CAACA,EAAE,EAAEH,UAAU,CAACG,EAAE,CAAC,CAAC;EAAA,EAAC,CAAC;AAAA,EAAC;AAC1M,OAAO,IAAMC,yBAAyB,GAAGd,sBAAsB,CAACE,6BAA6B,EAAE,UAAAI,SAAS;EAAA,OAAIA,SAAS,CAACS,MAAM,CAAC,UAACC,MAAM,EAAEC,KAAK,EAAK;IAC9ID,MAAM,CAACC,KAAK,CAAC,GAAGA,KAAK;IACrB,OAAOD,MAAM;EACf,CAAC,EAAE,CAAC,CAAC,CAAC;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}