{"ast":null,"code":"import _defineProperty from \"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { DEFAULT_GRID_COL_TYPE_KEY, GRID_STRING_COL_DEF } from '../../../colDef';\nimport { gridColumnsStateSelector, gridColumnVisibilityModelSelector } from './gridColumnsSelector';\nimport { clamp } from '../../../utils/utils';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nexport var COLUMNS_DIMENSION_PROPERTIES = ['maxWidth', 'minWidth', 'width', 'flex'];\n/**\n * Computes width for flex columns.\n * Based on CSS Flexbox specification:\n * https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n */\nexport function computeFlexColumnsWidth(_ref) {\n  var initialFreeSpace = _ref.initialFreeSpace,\n    totalFlexUnits = _ref.totalFlexUnits,\n    flexColumns = _ref.flexColumns;\n  var uniqueFlexColumns = new Set(flexColumns.map(function (col) {\n    return col.field;\n  }));\n  var flexColumnsLookup = {\n    all: {},\n    frozenFields: [],\n    freeze: function freeze(field) {\n      var value = flexColumnsLookup.all[field];\n      if (value && value.frozen !== true) {\n        flexColumnsLookup.all[field].frozen = true;\n        flexColumnsLookup.frozenFields.push(field);\n      }\n    }\n  };\n\n  // Step 5 of https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n  function loopOverFlexItems() {\n    // 5a: If all the flex items on the line are frozen, free space has been distributed.\n    if (flexColumnsLookup.frozenFields.length === uniqueFlexColumns.size) {\n      return;\n    }\n    var violationsLookup = {\n      min: {},\n      max: {}\n    };\n    var remainingFreeSpace = initialFreeSpace;\n    var flexUnits = totalFlexUnits;\n    var totalViolation = 0;\n\n    // 5b: Calculate the remaining free space\n    flexColumnsLookup.frozenFields.forEach(function (field) {\n      remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;\n      flexUnits -= flexColumnsLookup.all[field].flex;\n    });\n    for (var i = 0; i < flexColumns.length; i += 1) {\n      var column = flexColumns[i];\n      if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {\n        continue;\n      }\n\n      // 5c: Distribute remaining free space proportional to the flex factors\n      var widthPerFlexUnit = remainingFreeSpace / flexUnits;\n      var computedWidth = widthPerFlexUnit * column.flex;\n\n      // 5d: Fix min/max violations\n      if (computedWidth < column.minWidth) {\n        totalViolation += column.minWidth - computedWidth;\n        computedWidth = column.minWidth;\n        violationsLookup.min[column.field] = true;\n      } else if (computedWidth > column.maxWidth) {\n        totalViolation += column.maxWidth - computedWidth;\n        computedWidth = column.maxWidth;\n        violationsLookup.max[column.field] = true;\n      }\n      flexColumnsLookup.all[column.field] = {\n        frozen: false,\n        computedWidth: computedWidth,\n        flex: column.flex\n      };\n    }\n\n    // 5e: Freeze over-flexed items\n    if (totalViolation < 0) {\n      // Freeze all the items with max violations\n      Object.keys(violationsLookup.max).forEach(function (field) {\n        flexColumnsLookup.freeze(field);\n      });\n    } else if (totalViolation > 0) {\n      // Freeze all the items with min violations\n      Object.keys(violationsLookup.min).forEach(function (field) {\n        flexColumnsLookup.freeze(field);\n      });\n    } else {\n      // Freeze all items\n      flexColumns.forEach(function (_ref2) {\n        var field = _ref2.field;\n        flexColumnsLookup.freeze(field);\n      });\n    }\n\n    // 5f: Return to the start of this loop\n    loopOverFlexItems();\n  }\n  loopOverFlexItems();\n  return flexColumnsLookup.all;\n}\n\n/**\n * Compute the `computedWidth` (ie: the width the column should have during rendering) based on the `width` / `flex` / `minWidth` / `maxWidth` properties of `GridColDef`.\n * The columns already have been merged with there `type` default values for `minWidth`, `maxWidth` and `width`, thus the `!` for those properties below.\n * TODO: Unit test this function in depth and only keep basic cases for the whole grid testing.\n * TODO: Improve the `GridColDef` typing to reflect the fact that `minWidth` / `maxWidth` and `width` can't be null after the merge with the `type` default values.\n */\nexport var hydrateColumnsWidth = function hydrateColumnsWidth(rawState, viewportInnerWidth) {\n  var columnsLookup = {};\n  var totalFlexUnits = 0;\n  var widthAllocatedBeforeFlex = 0;\n  var flexColumns = [];\n\n  // For the non-flex columns, compute their width\n  // For the flex columns, compute there minimum width and how much width must be allocated during the flex allocation\n  rawState.orderedFields.forEach(function (columnField) {\n    var newColumn = _extends({}, rawState.lookup[columnField]);\n    if (rawState.columnVisibilityModel[columnField] === false) {\n      newColumn.computedWidth = 0;\n    } else {\n      var computedWidth;\n      if (newColumn.flex && newColumn.flex > 0) {\n        totalFlexUnits += newColumn.flex;\n        computedWidth = 0;\n        flexColumns.push(newColumn);\n      } else {\n        computedWidth = clamp(newColumn.width || GRID_STRING_COL_DEF.width, newColumn.minWidth || GRID_STRING_COL_DEF.minWidth, newColumn.maxWidth || GRID_STRING_COL_DEF.maxWidth);\n      }\n      widthAllocatedBeforeFlex += computedWidth;\n      newColumn.computedWidth = computedWidth;\n    }\n    columnsLookup[columnField] = newColumn;\n  });\n  var initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0);\n\n  // Allocate the remaining space to the flex columns\n  if (totalFlexUnits > 0 && viewportInnerWidth > 0) {\n    var computedColumnWidths = computeFlexColumnsWidth({\n      initialFreeSpace: initialFreeSpace,\n      totalFlexUnits: totalFlexUnits,\n      flexColumns: flexColumns\n    });\n    Object.keys(computedColumnWidths).forEach(function (field) {\n      columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;\n    });\n  }\n  return _extends({}, rawState, {\n    lookup: columnsLookup\n  });\n};\n\n/**\n * Apply the order and the dimensions of the initial state.\n * The columns not registered in `orderedFields` will be placed after the imported columns.\n */\nexport var applyInitialState = function applyInitialState(columnsState, initialState) {\n  if (!initialState) {\n    return columnsState;\n  }\n  var _initialState$ordered = initialState.orderedFields,\n    orderedFields = _initialState$ordered === void 0 ? [] : _initialState$ordered,\n    _initialState$dimensi = initialState.dimensions,\n    dimensions = _initialState$dimensi === void 0 ? {} : _initialState$dimensi;\n  var columnsWithUpdatedDimensions = Object.keys(dimensions);\n  if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {\n    return columnsState;\n  }\n  var orderedFieldsLookup = {};\n  var cleanOrderedFields = [];\n  for (var i = 0; i < orderedFields.length; i += 1) {\n    var field = orderedFields[i];\n\n    // Ignores the fields in the initialState that matches no field on the current column state\n    if (columnsState.lookup[field]) {\n      orderedFieldsLookup[field] = true;\n      cleanOrderedFields.push(field);\n    }\n  }\n  var newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.orderedFields : [].concat(cleanOrderedFields, _toConsumableArray(columnsState.orderedFields.filter(function (field) {\n    return !orderedFieldsLookup[field];\n  })));\n  var newColumnLookup = _extends({}, columnsState.lookup);\n  var _loop = function _loop() {\n    var field = columnsWithUpdatedDimensions[_i];\n    var newColDef = _extends({}, newColumnLookup[field], {\n      hasBeenResized: true\n    });\n    Object.entries(dimensions[field]).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      newColDef[key] = value === -1 ? Infinity : value;\n    });\n    newColumnLookup[field] = newColDef;\n  };\n  for (var _i = 0; _i < columnsWithUpdatedDimensions.length; _i += 1) {\n    _loop();\n  }\n  var newColumnsState = _extends({}, columnsState, {\n    orderedFields: newOrderedFields,\n    lookup: newColumnLookup\n  });\n  return newColumnsState;\n};\nfunction getDefaultColTypeDef(columnTypes, type) {\n  var colDef = columnTypes[DEFAULT_GRID_COL_TYPE_KEY];\n  if (type && columnTypes[type]) {\n    colDef = columnTypes[type];\n  }\n  return colDef;\n}\nexport var createColumnsState = function createColumnsState(_ref5) {\n  var apiRef = _ref5.apiRef,\n    columnsToUpsert = _ref5.columnsToUpsert,\n    initialState = _ref5.initialState,\n    columnTypes = _ref5.columnTypes,\n    _ref5$columnVisibilit = _ref5.columnVisibilityModel,\n    columnVisibilityModel = _ref5$columnVisibilit === void 0 ? gridColumnVisibilityModelSelector(apiRef) : _ref5$columnVisibilit,\n    _ref5$keepOnlyColumns = _ref5.keepOnlyColumnsToUpsert,\n    keepOnlyColumnsToUpsert = _ref5$keepOnlyColumns === void 0 ? false : _ref5$keepOnlyColumns;\n  var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current;\n  var isInsideStateInitializer = !apiRef.current.state.columns;\n  var columnsState;\n  if (isInsideStateInitializer) {\n    columnsState = {\n      orderedFields: [],\n      lookup: {},\n      columnVisibilityModel: columnVisibilityModel\n    };\n  } else {\n    var currentState = gridColumnsStateSelector(apiRef.current.state);\n    columnsState = {\n      orderedFields: keepOnlyColumnsToUpsert ? [] : _toConsumableArray(currentState.orderedFields),\n      lookup: _extends({}, currentState.lookup),\n      // Will be cleaned later if keepOnlyColumnsToUpsert=true\n      columnVisibilityModel: columnVisibilityModel\n    };\n  }\n  var columnsToKeep = {};\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    columnsToKeep = Object.keys(columnsState.lookup).reduce(function (acc, key) {\n      return _extends({}, acc, _defineProperty({}, key, false));\n    }, {});\n  }\n  var columnsToUpsertLookup = {};\n  columnsToUpsert.forEach(function (newColumn) {\n    var field = newColumn.field;\n    columnsToUpsertLookup[field] = true;\n    columnsToKeep[field] = true;\n    var existingState = columnsState.lookup[field];\n    if (existingState == null) {\n      existingState = _extends({}, getDefaultColTypeDef(columnTypes, newColumn.type), {\n        field: field,\n        hasBeenResized: false\n      });\n      columnsState.orderedFields.push(field);\n    } else if (keepOnlyColumnsToUpsert) {\n      columnsState.orderedFields.push(field);\n    }\n\n    // If the column type has changed - merge the existing state with the default column type definition\n    if (existingState && existingState.type !== newColumn.type) {\n      existingState = _extends({}, getDefaultColTypeDef(columnTypes, newColumn.type), {\n        field: field\n      });\n    }\n    var hasBeenResized = existingState.hasBeenResized;\n    COLUMNS_DIMENSION_PROPERTIES.forEach(function (key) {\n      if (newColumn[key] !== undefined) {\n        hasBeenResized = true;\n        if (newColumn[key] === -1) {\n          newColumn[key] = Infinity;\n        }\n      }\n    });\n    columnsState.lookup[field] = _extends({}, existingState, newColumn, {\n      hasBeenResized: hasBeenResized\n    });\n  });\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    Object.keys(columnsState.lookup).forEach(function (field) {\n      if (!columnsToKeep[field]) {\n        delete columnsState.lookup[field];\n      }\n    });\n  }\n  var columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors('hydrateColumns', columnsState);\n  var columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);\n  return hydrateColumnsWidth(columnsStateWithPortableColumns, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null || (_apiRef$current$getRo2 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);\n};\nexport var mergeColumnsState = function mergeColumnsState(columnsState) {\n  return function (state) {\n    return _extends({}, state, {\n      columns: columnsState\n    });\n  };\n};\nexport function getFirstNonSpannedColumnToRender(_ref6) {\n  var firstColumnToRender = _ref6.firstColumnToRender,\n    apiRef = _ref6.apiRef,\n    firstRowToRender = _ref6.firstRowToRender,\n    lastRowToRender = _ref6.lastRowToRender,\n    visibleRows = _ref6.visibleRows;\n  var firstNonSpannedColumnToRender = firstColumnToRender;\n  for (var i = firstRowToRender; i < lastRowToRender; i += 1) {\n    var row = visibleRows[i];\n    if (row) {\n      var rowId = visibleRows[i].id;\n      var cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);\n      if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {\n        firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;\n      }\n    }\n  }\n  return firstNonSpannedColumnToRender;\n}\nexport function getFirstColumnIndexToRender(_ref7) {\n  var firstColumnIndex = _ref7.firstColumnIndex,\n    minColumnIndex = _ref7.minColumnIndex,\n    columnBuffer = _ref7.columnBuffer,\n    firstRowToRender = _ref7.firstRowToRender,\n    lastRowToRender = _ref7.lastRowToRender,\n    apiRef = _ref7.apiRef,\n    visibleRows = _ref7.visibleRows;\n  var initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);\n  var firstColumnToRender = getFirstNonSpannedColumnToRender({\n    firstColumnToRender: initialFirstColumnToRender,\n    apiRef: apiRef,\n    firstRowToRender: firstRowToRender,\n    lastRowToRender: lastRowToRender,\n    visibleRows: visibleRows\n  });\n  return firstColumnToRender;\n}\nexport function getTotalHeaderHeight(apiRef, headerHeight) {\n  var densityFactor = gridDensityFactorSelector(apiRef);\n  var maxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n  return Math.floor(headerHeight * densityFactor) * ((maxDepth != null ? maxDepth : 0) + 1);\n}","map":{"version":3,"names":["_extends","DEFAULT_GRID_COL_TYPE_KEY","GRID_STRING_COL_DEF","gridColumnsStateSelector","gridColumnVisibilityModelSelector","clamp","gridDensityFactorSelector","gridColumnGroupsHeaderMaxDepthSelector","COLUMNS_DIMENSION_PROPERTIES","computeFlexColumnsWidth","_ref","initialFreeSpace","totalFlexUnits","flexColumns","uniqueFlexColumns","Set","map","col","field","flexColumnsLookup","all","frozenFields","freeze","value","frozen","push","loopOverFlexItems","length","size","violationsLookup","min","max","remainingFreeSpace","flexUnits","totalViolation","forEach","computedWidth","flex","i","column","widthPerFlexUnit","minWidth","maxWidth","Object","keys","_ref2","hydrateColumnsWidth","rawState","viewportInnerWidth","columnsLookup","widthAllocatedBeforeFlex","orderedFields","columnField","newColumn","lookup","columnVisibilityModel","width","Math","computedColumnWidths","applyInitialState","columnsState","initialState","_initialState$ordered","_initialState$dimensi","dimensions","columnsWithUpdatedDimensions","orderedFieldsLookup","cleanOrderedFields","newOrderedFields","concat","_toConsumableArray","filter","newColumnLookup","_loop","newColDef","hasBeenResized","entries","_ref3","_ref4","_slicedToArray","key","Infinity","newColumnsState","getDefaultColTypeDef","columnTypes","type","colDef","createColumnsState","_ref5","apiRef","columnsToUpsert","_ref5$columnVisibilit","_ref5$keepOnlyColumns","keepOnlyColumnsToUpsert","_apiRef$current$getRo","_apiRef$current$getRo2","_apiRef$current","isInsideStateInitializer","current","state","columns","currentState","columnsToKeep","reduce","acc","_defineProperty","columnsToUpsertLookup","existingState","undefined","columnsStateWithPreProcessing","unstable_applyPipeProcessors","columnsStateWithPortableColumns","getRootDimensions","call","viewportInnerSize","mergeColumnsState","getFirstNonSpannedColumnToRender","_ref6","firstColumnToRender","firstRowToRender","lastRowToRender","visibleRows","firstNonSpannedColumnToRender","row","rowId","id","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","getFirstColumnIndexToRender","_ref7","firstColumnIndex","minColumnIndex","columnBuffer","initialFirstColumnToRender","getTotalHeaderHeight","headerHeight","densityFactor","maxDepth","floor"],"sources":["/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { DEFAULT_GRID_COL_TYPE_KEY, GRID_STRING_COL_DEF } from '../../../colDef';\nimport { gridColumnsStateSelector, gridColumnVisibilityModelSelector } from './gridColumnsSelector';\nimport { clamp } from '../../../utils/utils';\nimport { gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nexport const COLUMNS_DIMENSION_PROPERTIES = ['maxWidth', 'minWidth', 'width', 'flex'];\n/**\n * Computes width for flex columns.\n * Based on CSS Flexbox specification:\n * https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n */\nexport function computeFlexColumnsWidth({\n  initialFreeSpace,\n  totalFlexUnits,\n  flexColumns\n}) {\n  const uniqueFlexColumns = new Set(flexColumns.map(col => col.field));\n  const flexColumnsLookup = {\n    all: {},\n    frozenFields: [],\n    freeze: field => {\n      const value = flexColumnsLookup.all[field];\n      if (value && value.frozen !== true) {\n        flexColumnsLookup.all[field].frozen = true;\n        flexColumnsLookup.frozenFields.push(field);\n      }\n    }\n  };\n\n  // Step 5 of https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n  function loopOverFlexItems() {\n    // 5a: If all the flex items on the line are frozen, free space has been distributed.\n    if (flexColumnsLookup.frozenFields.length === uniqueFlexColumns.size) {\n      return;\n    }\n    const violationsLookup = {\n      min: {},\n      max: {}\n    };\n    let remainingFreeSpace = initialFreeSpace;\n    let flexUnits = totalFlexUnits;\n    let totalViolation = 0;\n\n    // 5b: Calculate the remaining free space\n    flexColumnsLookup.frozenFields.forEach(field => {\n      remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;\n      flexUnits -= flexColumnsLookup.all[field].flex;\n    });\n    for (let i = 0; i < flexColumns.length; i += 1) {\n      const column = flexColumns[i];\n      if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {\n        continue;\n      }\n\n      // 5c: Distribute remaining free space proportional to the flex factors\n      const widthPerFlexUnit = remainingFreeSpace / flexUnits;\n      let computedWidth = widthPerFlexUnit * column.flex;\n\n      // 5d: Fix min/max violations\n      if (computedWidth < column.minWidth) {\n        totalViolation += column.minWidth - computedWidth;\n        computedWidth = column.minWidth;\n        violationsLookup.min[column.field] = true;\n      } else if (computedWidth > column.maxWidth) {\n        totalViolation += column.maxWidth - computedWidth;\n        computedWidth = column.maxWidth;\n        violationsLookup.max[column.field] = true;\n      }\n      flexColumnsLookup.all[column.field] = {\n        frozen: false,\n        computedWidth,\n        flex: column.flex\n      };\n    }\n\n    // 5e: Freeze over-flexed items\n    if (totalViolation < 0) {\n      // Freeze all the items with max violations\n      Object.keys(violationsLookup.max).forEach(field => {\n        flexColumnsLookup.freeze(field);\n      });\n    } else if (totalViolation > 0) {\n      // Freeze all the items with min violations\n      Object.keys(violationsLookup.min).forEach(field => {\n        flexColumnsLookup.freeze(field);\n      });\n    } else {\n      // Freeze all items\n      flexColumns.forEach(({\n        field\n      }) => {\n        flexColumnsLookup.freeze(field);\n      });\n    }\n\n    // 5f: Return to the start of this loop\n    loopOverFlexItems();\n  }\n  loopOverFlexItems();\n  return flexColumnsLookup.all;\n}\n\n/**\n * Compute the `computedWidth` (ie: the width the column should have during rendering) based on the `width` / `flex` / `minWidth` / `maxWidth` properties of `GridColDef`.\n * The columns already have been merged with there `type` default values for `minWidth`, `maxWidth` and `width`, thus the `!` for those properties below.\n * TODO: Unit test this function in depth and only keep basic cases for the whole grid testing.\n * TODO: Improve the `GridColDef` typing to reflect the fact that `minWidth` / `maxWidth` and `width` can't be null after the merge with the `type` default values.\n */\nexport const hydrateColumnsWidth = (rawState, viewportInnerWidth) => {\n  const columnsLookup = {};\n  let totalFlexUnits = 0;\n  let widthAllocatedBeforeFlex = 0;\n  const flexColumns = [];\n\n  // For the non-flex columns, compute their width\n  // For the flex columns, compute there minimum width and how much width must be allocated during the flex allocation\n  rawState.orderedFields.forEach(columnField => {\n    const newColumn = _extends({}, rawState.lookup[columnField]);\n    if (rawState.columnVisibilityModel[columnField] === false) {\n      newColumn.computedWidth = 0;\n    } else {\n      let computedWidth;\n      if (newColumn.flex && newColumn.flex > 0) {\n        totalFlexUnits += newColumn.flex;\n        computedWidth = 0;\n        flexColumns.push(newColumn);\n      } else {\n        computedWidth = clamp(newColumn.width || GRID_STRING_COL_DEF.width, newColumn.minWidth || GRID_STRING_COL_DEF.minWidth, newColumn.maxWidth || GRID_STRING_COL_DEF.maxWidth);\n      }\n      widthAllocatedBeforeFlex += computedWidth;\n      newColumn.computedWidth = computedWidth;\n    }\n    columnsLookup[columnField] = newColumn;\n  });\n  const initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0);\n\n  // Allocate the remaining space to the flex columns\n  if (totalFlexUnits > 0 && viewportInnerWidth > 0) {\n    const computedColumnWidths = computeFlexColumnsWidth({\n      initialFreeSpace,\n      totalFlexUnits,\n      flexColumns\n    });\n    Object.keys(computedColumnWidths).forEach(field => {\n      columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;\n    });\n  }\n  return _extends({}, rawState, {\n    lookup: columnsLookup\n  });\n};\n\n/**\n * Apply the order and the dimensions of the initial state.\n * The columns not registered in `orderedFields` will be placed after the imported columns.\n */\nexport const applyInitialState = (columnsState, initialState) => {\n  if (!initialState) {\n    return columnsState;\n  }\n  const {\n    orderedFields = [],\n    dimensions = {}\n  } = initialState;\n  const columnsWithUpdatedDimensions = Object.keys(dimensions);\n  if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {\n    return columnsState;\n  }\n  const orderedFieldsLookup = {};\n  const cleanOrderedFields = [];\n  for (let i = 0; i < orderedFields.length; i += 1) {\n    const field = orderedFields[i];\n\n    // Ignores the fields in the initialState that matches no field on the current column state\n    if (columnsState.lookup[field]) {\n      orderedFieldsLookup[field] = true;\n      cleanOrderedFields.push(field);\n    }\n  }\n  const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.orderedFields : [...cleanOrderedFields, ...columnsState.orderedFields.filter(field => !orderedFieldsLookup[field])];\n  const newColumnLookup = _extends({}, columnsState.lookup);\n  for (let i = 0; i < columnsWithUpdatedDimensions.length; i += 1) {\n    const field = columnsWithUpdatedDimensions[i];\n    const newColDef = _extends({}, newColumnLookup[field], {\n      hasBeenResized: true\n    });\n    Object.entries(dimensions[field]).forEach(([key, value]) => {\n      newColDef[key] = value === -1 ? Infinity : value;\n    });\n    newColumnLookup[field] = newColDef;\n  }\n  const newColumnsState = _extends({}, columnsState, {\n    orderedFields: newOrderedFields,\n    lookup: newColumnLookup\n  });\n  return newColumnsState;\n};\nfunction getDefaultColTypeDef(columnTypes, type) {\n  let colDef = columnTypes[DEFAULT_GRID_COL_TYPE_KEY];\n  if (type && columnTypes[type]) {\n    colDef = columnTypes[type];\n  }\n  return colDef;\n}\nexport const createColumnsState = ({\n  apiRef,\n  columnsToUpsert,\n  initialState,\n  columnTypes,\n  columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),\n  keepOnlyColumnsToUpsert = false\n}) => {\n  var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current;\n  const isInsideStateInitializer = !apiRef.current.state.columns;\n  let columnsState;\n  if (isInsideStateInitializer) {\n    columnsState = {\n      orderedFields: [],\n      lookup: {},\n      columnVisibilityModel\n    };\n  } else {\n    const currentState = gridColumnsStateSelector(apiRef.current.state);\n    columnsState = {\n      orderedFields: keepOnlyColumnsToUpsert ? [] : [...currentState.orderedFields],\n      lookup: _extends({}, currentState.lookup),\n      // Will be cleaned later if keepOnlyColumnsToUpsert=true\n      columnVisibilityModel\n    };\n  }\n  let columnsToKeep = {};\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    columnsToKeep = Object.keys(columnsState.lookup).reduce((acc, key) => _extends({}, acc, {\n      [key]: false\n    }), {});\n  }\n  const columnsToUpsertLookup = {};\n  columnsToUpsert.forEach(newColumn => {\n    const {\n      field\n    } = newColumn;\n    columnsToUpsertLookup[field] = true;\n    columnsToKeep[field] = true;\n    let existingState = columnsState.lookup[field];\n    if (existingState == null) {\n      existingState = _extends({}, getDefaultColTypeDef(columnTypes, newColumn.type), {\n        field,\n        hasBeenResized: false\n      });\n      columnsState.orderedFields.push(field);\n    } else if (keepOnlyColumnsToUpsert) {\n      columnsState.orderedFields.push(field);\n    }\n\n    // If the column type has changed - merge the existing state with the default column type definition\n    if (existingState && existingState.type !== newColumn.type) {\n      existingState = _extends({}, getDefaultColTypeDef(columnTypes, newColumn.type), {\n        field\n      });\n    }\n    let hasBeenResized = existingState.hasBeenResized;\n    COLUMNS_DIMENSION_PROPERTIES.forEach(key => {\n      if (newColumn[key] !== undefined) {\n        hasBeenResized = true;\n        if (newColumn[key] === -1) {\n          newColumn[key] = Infinity;\n        }\n      }\n    });\n    columnsState.lookup[field] = _extends({}, existingState, newColumn, {\n      hasBeenResized\n    });\n  });\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    Object.keys(columnsState.lookup).forEach(field => {\n      if (!columnsToKeep[field]) {\n        delete columnsState.lookup[field];\n      }\n    });\n  }\n  const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors('hydrateColumns', columnsState);\n  const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);\n  return hydrateColumnsWidth(columnsStateWithPortableColumns, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null || (_apiRef$current$getRo2 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);\n};\nexport const mergeColumnsState = columnsState => state => _extends({}, state, {\n  columns: columnsState\n});\nexport function getFirstNonSpannedColumnToRender({\n  firstColumnToRender,\n  apiRef,\n  firstRowToRender,\n  lastRowToRender,\n  visibleRows\n}) {\n  let firstNonSpannedColumnToRender = firstColumnToRender;\n  for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n    const row = visibleRows[i];\n    if (row) {\n      const rowId = visibleRows[i].id;\n      const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);\n      if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {\n        firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;\n      }\n    }\n  }\n  return firstNonSpannedColumnToRender;\n}\nexport function getFirstColumnIndexToRender({\n  firstColumnIndex,\n  minColumnIndex,\n  columnBuffer,\n  firstRowToRender,\n  lastRowToRender,\n  apiRef,\n  visibleRows\n}) {\n  const initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);\n  const firstColumnToRender = getFirstNonSpannedColumnToRender({\n    firstColumnToRender: initialFirstColumnToRender,\n    apiRef,\n    firstRowToRender,\n    lastRowToRender,\n    visibleRows\n  });\n  return firstColumnToRender;\n}\nexport function getTotalHeaderHeight(apiRef, headerHeight) {\n  const densityFactor = gridDensityFactorSelector(apiRef);\n  const maxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n  return Math.floor(headerHeight * densityFactor) * ((maxDepth != null ? maxDepth : 0) + 1);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}