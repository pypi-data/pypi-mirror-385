{"ast":null,"code":"import _toConsumableArray from \"/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport var useGridCsvExport = function useGridCsvExport(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridCsvExport');\n  var ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  var ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;\n  var getDataAsCsv = React.useCallback(function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _options$getRowsToExp, _options$shouldAppend, _options$includeHeade, _options$includeColum, _options$escapeFormul;\n    logger.debug(\"Get data as CSV\");\n    var exportedColumns = getColumnsToExport({\n      apiRef: apiRef,\n      options: options\n    });\n    var getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    var exportedRowIds = getRowsToExport({\n      apiRef: apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: (_options$shouldAppend = options.shouldAppendQuotes) != null ? _options$shouldAppend : true,\n        includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n        includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n        escapeFormulas: (_options$escapeFormul = options.escapeFormulas) != null ? _options$escapeFormul : true\n      },\n      ignoreValueFormatter: ignoreValueFormatter,\n      apiRef: apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  var exportDataAsCsv = React.useCallback(function (options) {\n    logger.debug(\"Export data as CSV\");\n    var csv = getDataAsCsv(options);\n    var blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  var csvExportApi = {\n    getDataAsCsv: getDataAsCsv,\n    exportDataAsCsv: exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  var addExportMenuButtons = React.useCallback(function (initialValue, options) {\n    var _options$csvOptions;\n    if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [].concat(_toConsumableArray(initialValue), [{\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }]);\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","useGridRegisterPipeProcessor","GridCsvExportMenuItem","jsx","_jsx","useGridCsvExport","apiRef","props","logger","ignoreValueFormatterProp","unstable_ignoreValueFormatterDuringExport","ignoreValueFormatter","csvExport","getDataAsCsv","useCallback","options","arguments","length","undefined","_options$getRowsToExp","_options$shouldAppend","_options$includeHeade","_options$includeColum","_options$escapeFormul","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","csvOptions","delimiter","shouldAppendQuotes","includeHeaders","includeColumnGroupsHeaders","escapeFormulas","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi","addExportMenuButtons","initialValue","_options$csvOptions","disableToolbarButton","concat","_toConsumableArray","component","componentName"],"sources":["/home/runner/work/inference/inference/xinference/ui/web/ui/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$shouldAppend, _options$includeHeade, _options$includeColum, _options$escapeFormul;\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: (_options$shouldAppend = options.shouldAppendQuotes) != null ? _options$shouldAppend : true,\n        includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n        includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n        escapeFormulas: (_options$escapeFormul = options.escapeFormulas) != null ? _options$escapeFormul : true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$csvOptions;\n    if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}