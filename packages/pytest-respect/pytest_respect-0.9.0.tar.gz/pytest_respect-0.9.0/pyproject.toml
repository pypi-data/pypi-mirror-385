# METADATA

[project]
name = "pytest-respect"
version = "0.9.0"
description = "Pytest plugin to load resource files relative to test code and to expect values to match them."
urls.homepage = "https://github.com/Ankeri/pytest-respect"
urls.issues = "https://github.com/Ankeri/pytest-respect/issues"
changelog = "https://github.com/Ankeri/pytest-respect/blob/master/CHANGELOG.md"
readme = "README.md"
authors = [
    { name = "Logi Ragnarsson", email = "logi.ragnarsson@ankeri.is" }
]
license = "MIT"
license-files = ["LICENSE.md"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Framework :: Pytest"
]


# DEPENDENCIES

requires-python = ">=3.10"

dependencies = [
    "pytest>=8.0.0",
]

[project.optional-dependencies]
pydantic = ["pydantic>=2.0.0"]
numpy = ["numpy>=2.0.0"]
jsonyx = ["jsonyx>=2.0.0"]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pyright==1.1.*",
    "pytest-cov==6.*",
    "pytest-mock==3.*",
    "ruff==0.*",
]


# PYTEST PLUGIN

[project.entry-points.pytest11]
respect = "pytest_respect.plugin"


# BUILD

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pytest_respect"]


# LINTING

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # Pyflakes
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "I", # isort
    "N", # pep8-naming
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "D401", # imperative mode: tests are doc'd with statements and fixtures with nouns
    "N802", # snake_case: Allow test_MyFancyClass_method
]


# TESTING

[tool.pyright]
venvPath = "."
venv = ".venv"  # To help pyright in pre-commit

[tool.pytest.ini_options]
markers = [
    # Each optional extra corresponds to a marker for tests which require it
    "pydantic",
    "numpy",
    "jsonyx",
]
