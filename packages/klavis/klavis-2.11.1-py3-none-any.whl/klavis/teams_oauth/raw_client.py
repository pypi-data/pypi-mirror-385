# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.azure_ado_auth_error_response import AzureAdoAuthErrorResponse
from ..types.azure_ado_auth_success_response import AzureAdoAuthSuccessResponse
from ..types.http_validation_error import HttpValidationError


class RawTeamsOauthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def refresh_token(
        self, *, instance_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AzureAdoAuthSuccessResponse]:
        """
        Parameters
        ----------
        instance_id : str
            Instance ID for which to refresh the token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AzureAdoAuthSuccessResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "oauth/teams/refresh_token",
            method="POST",
            params={
                "instance_id": instance_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AzureAdoAuthSuccessResponse,
                    parse_obj_as(
                        type_=AzureAdoAuthSuccessResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        AzureAdoAuthErrorResponse,
                        parse_obj_as(
                            type_=AzureAdoAuthErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawTeamsOauthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def refresh_token(
        self, *, instance_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[AzureAdoAuthSuccessResponse]:
        """
        Parameters
        ----------
        instance_id : str
            Instance ID for which to refresh the token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AzureAdoAuthSuccessResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "oauth/teams/refresh_token",
            method="POST",
            params={
                "instance_id": instance_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AzureAdoAuthSuccessResponse,
                    parse_obj_as(
                        type_=AzureAdoAuthSuccessResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        AzureAdoAuthErrorResponse,
                        parse_obj_as(
                            type_=AzureAdoAuthErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
