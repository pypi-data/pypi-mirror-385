# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SegmentationShotDetectorConfig(BaseModel):
    """
    SegmentationShotDetectorConfig
    """ # noqa: E501
    threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Detection sensitivity threshold - lower values create more segments:  • **content**: Sensitivity to visual differences (default: 27.0). Lower values detect smaller changes in color/lighting. • **adaptive**: Does not support threshold parameter - uses internal adaptive algorithm.")
    min_seconds: Optional[Union[Annotated[float, Field(le=120, strict=True, ge=1)], Annotated[int, Field(le=120, strict=True, ge=1)]]] = Field(default=None, description="The minimum length of a shot in seconds. Must be between 1 and 120 seconds.")
    max_seconds: Optional[Union[Annotated[float, Field(le=120, strict=True, ge=1)], Annotated[int, Field(le=120, strict=True, ge=1)]]] = Field(default=None, description="The maximum length of a shot in seconds. Must be between 1 and 120 seconds.")
    detector: StrictStr = Field(description="The detector strategy to use:  • **adaptive**: Designed for dynamic footage with camera movement, panning, or action. Examples: sports broadcasts, drone footage, handheld documentaries, action movies, live events. • **content**: Optimized for controlled footage with clear visual transitions. Examples: studio interviews, corporate videos, educational content, product demos, scripted content.")
    __properties: ClassVar[List[str]] = ["threshold", "min_seconds", "max_seconds", "detector"]

    @field_validator('detector')
    def detector_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['adaptive', 'content']):
            raise ValueError("must be one of enum values ('adaptive', 'content')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SegmentationShotDetectorConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SegmentationShotDetectorConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "threshold": obj.get("threshold"),
            "min_seconds": obj.get("min_seconds"),
            "max_seconds": obj.get("max_seconds"),
            "detector": obj.get("detector")
        })
        return _obj


