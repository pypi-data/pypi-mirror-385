# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cloudglue.sdk.models.segmentation_config import SegmentationConfig
from cloudglue.sdk.models.thumbnails_config import ThumbnailsConfig
from typing import Optional, Set
from typing_extensions import Self

class NewTranscribe(BaseModel):
    """
    NewTranscribe
    """ # noqa: E501
    segmentation_id: Optional[StrictStr] = Field(default=None, description="Segmentation job id to use. If not provided will use default to uniform 20s segmentation. Cannot be provided together with segmentation_config.")
    segmentation_config: Optional[SegmentationConfig] = Field(default=None, description="Configuration for video segmentation. Cannot be provided together with segmentation_id.")
    url: StrictStr = Field(description="Input video URL. Supports URIs of files uploaded to Cloudglue Files endpoint, public YouTube video URLs, public HTTP URLs, and files which have been granted access to Cloudglue via data connectors.  Note that YouTube videos are currently limited to speech level understanding only. For files via our Data connectors, see our documentation on data connectors for setup information.")
    enable_summary: Optional[StrictBool] = Field(default=True, description="Whether to generate video-level and segment-level (moment-level) summaries and titles")
    enable_speech: Optional[StrictBool] = Field(default=True, description="Whether to generate speech transcript")
    enable_visual_scene_description: Optional[StrictBool] = Field(default=False, description="Whether to generate visual scene description")
    enable_scene_text: Optional[StrictBool] = Field(default=False, description="Whether to generate scene text extraction")
    thumbnails_config: Optional[ThumbnailsConfig] = None
    __properties: ClassVar[List[str]] = ["segmentation_id", "segmentation_config", "url", "enable_summary", "enable_speech", "enable_visual_scene_description", "enable_scene_text", "thumbnails_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewTranscribe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of segmentation_config
        if self.segmentation_config:
            _dict['segmentation_config'] = self.segmentation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thumbnails_config
        if self.thumbnails_config:
            _dict['thumbnails_config'] = self.thumbnails_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewTranscribe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "segmentation_id": obj.get("segmentation_id"),
            "segmentation_config": SegmentationConfig.from_dict(obj["segmentation_config"]) if obj.get("segmentation_config") is not None else None,
            "url": obj.get("url"),
            "enable_summary": obj.get("enable_summary") if obj.get("enable_summary") is not None else True,
            "enable_speech": obj.get("enable_speech") if obj.get("enable_speech") is not None else True,
            "enable_visual_scene_description": obj.get("enable_visual_scene_description") if obj.get("enable_visual_scene_description") is not None else False,
            "enable_scene_text": obj.get("enable_scene_text") if obj.get("enable_scene_text") is not None else False,
            "thumbnails_config": ThumbnailsConfig.from_dict(obj["thumbnails_config"]) if obj.get("thumbnails_config") is not None else None
        })
        return _obj


