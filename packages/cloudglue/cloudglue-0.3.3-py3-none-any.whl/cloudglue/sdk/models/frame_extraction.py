# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from cloudglue.sdk.models.frame_extraction_config import FrameExtractionConfig
from cloudglue.sdk.models.frame_extraction_data import FrameExtractionData
from typing import Optional, Set
from typing_extensions import Self

class FrameExtraction(BaseModel):
    """
    FrameExtraction
    """ # noqa: E501
    frame_extraction_id: StrictStr = Field(description="Unique identifier for the frame extraction job")
    status: StrictStr = Field(description="Status of the frame extraction job")
    created_at: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="Unix timestamp of when the frame extraction was created")
    file_id: StrictStr = Field(description="ID of the file this frame extraction belongs to")
    frame_extraction_config: FrameExtractionConfig
    frame_count: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Total number of frames extracted (only present when status is completed)")
    data: Optional[FrameExtractionData] = None
    __properties: ClassVar[List[str]] = ["frame_extraction_id", "status", "created_at", "file_id", "frame_extraction_config", "frame_count", "data"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'processing', 'completed', 'failed']):
            raise ValueError("must be one of enum values ('pending', 'processing', 'completed', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FrameExtraction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of frame_extraction_config
        if self.frame_extraction_config:
            _dict['frame_extraction_config'] = self.frame_extraction_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FrameExtraction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frame_extraction_id": obj.get("frame_extraction_id"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "file_id": obj.get("file_id"),
            "frame_extraction_config": FrameExtractionConfig.from_dict(obj["frame_extraction_config"]) if obj.get("frame_extraction_config") is not None else None,
            "frame_count": obj.get("frame_count"),
            "data": FrameExtractionData.from_dict(obj["data"]) if obj.get("data") is not None else None
        })
        return _obj


