# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cloudglue.sdk.models.new_collection_describe_config import NewCollectionDescribeConfig
from cloudglue.sdk.models.new_collection_extract_config import NewCollectionExtractConfig
from cloudglue.sdk.models.new_collection_transcribe_config import NewCollectionTranscribeConfig
from cloudglue.sdk.models.segmentation_config import SegmentationConfig
from cloudglue.sdk.models.thumbnails_config import ThumbnailsConfig
from typing import Optional, Set
from typing_extensions import Self

class NewCollection(BaseModel):
    """
    NewCollection
    """ # noqa: E501
    collection_type: StrictStr = Field(description="Type of collection, determines how videos are processed and what data is extracted.  **Collection Types:** - **media-descriptions**: Generate comprehensive media descriptions with speech, visual, and text analysis (use `describe_config`) - **entities**: Extract structured data/entities from videos (requires `extract_config`) - **rich-transcripts**: Generate rich transcriptions with speech and visual descriptions (use `transcribe_config`). For backward compatibility only, new collections should use `media-descriptions` instead.  ⚠️ **Important**: Only provide the config that matches your collection_type. Other configs will be ignored.")
    name: StrictStr = Field(description="Name of the collection (must be unique within an organization)")
    description: Optional[StrictStr] = Field(default=None, description="Description of the collection's purpose or contents")
    describe_config: Optional[NewCollectionDescribeConfig] = None
    extract_config: Optional[NewCollectionExtractConfig] = None
    transcribe_config: Optional[NewCollectionTranscribeConfig] = None
    default_segmentation_config: Optional[SegmentationConfig] = Field(default=None, description="Default segmentation configuration to use for files added to this collection. If not provided, a default uniform segmentation will be used.")
    default_thumbnails_config: Optional[ThumbnailsConfig] = Field(default=None, description="Default thumbnails configuration to use for files added to this collection. If not provided, a default thumbnails configuration will be used.")
    __properties: ClassVar[List[str]] = ["collection_type", "name", "description", "describe_config", "extract_config", "transcribe_config", "default_segmentation_config", "default_thumbnails_config"]

    @field_validator('collection_type')
    def collection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['media-descriptions', 'entities', 'rich-transcripts']):
            raise ValueError("must be one of enum values ('media-descriptions', 'entities', 'rich-transcripts')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of describe_config
        if self.describe_config:
            _dict['describe_config'] = self.describe_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extract_config
        if self.extract_config:
            _dict['extract_config'] = self.extract_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transcribe_config
        if self.transcribe_config:
            _dict['transcribe_config'] = self.transcribe_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_segmentation_config
        if self.default_segmentation_config:
            _dict['default_segmentation_config'] = self.default_segmentation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_thumbnails_config
        if self.default_thumbnails_config:
            _dict['default_thumbnails_config'] = self.default_thumbnails_config.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collection_type": obj.get("collection_type"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "describe_config": NewCollectionDescribeConfig.from_dict(obj["describe_config"]) if obj.get("describe_config") is not None else None,
            "extract_config": NewCollectionExtractConfig.from_dict(obj["extract_config"]) if obj.get("extract_config") is not None else None,
            "transcribe_config": NewCollectionTranscribeConfig.from_dict(obj["transcribe_config"]) if obj.get("transcribe_config") is not None else None,
            "default_segmentation_config": SegmentationConfig.from_dict(obj["default_segmentation_config"]) if obj.get("default_segmentation_config") is not None else None,
            "default_thumbnails_config": ThumbnailsConfig.from_dict(obj["default_thumbnails_config"]) if obj.get("default_thumbnails_config") is not None else None
        })
        return _obj


