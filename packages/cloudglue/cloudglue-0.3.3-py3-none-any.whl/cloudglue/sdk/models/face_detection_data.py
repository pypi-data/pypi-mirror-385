# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudglue.sdk.models.detected_face import DetectedFace
from typing import Optional, Set
from typing_extensions import Self

class FaceDetectionData(BaseModel):
    """
    Face detection results (only present when status is completed)
    """ # noqa: E501
    object: Optional[StrictStr] = Field(default=None, description="Object type, always 'list'")
    total: Optional[StrictInt] = Field(default=None, description="Total number of faces detected")
    limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Number of faces returned per page")
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Offset from the start of the faces list")
    faces: Optional[List[DetectedFace]] = Field(default=None, description="Array of detected faces")
    __properties: ClassVar[List[str]] = ["object", "total", "limit", "offset", "faces"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['list']):
            raise ValueError("must be one of enum values ('list')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FaceDetectionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in faces (list)
        _items = []
        if self.faces:
            for _item_faces in self.faces:
                if _item_faces:
                    _items.append(_item_faces.to_dict())
            _dict['faces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FaceDetectionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object"),
            "total": obj.get("total"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "faces": [DetectedFace.from_dict(_item) for _item in obj["faces"]] if obj.get("faces") is not None else None
        })
        return _obj


