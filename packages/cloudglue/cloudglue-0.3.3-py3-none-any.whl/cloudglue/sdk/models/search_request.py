# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudglue.sdk.models.search_filter import SearchFilter
from typing import Optional, Set
from typing_extensions import Self

class SearchRequest(BaseModel):
    """
    SearchRequest
    """ # noqa: E501
    scope: StrictStr = Field(description="Search scope - 'file' searches at file level (requires collections with enable_summary=true), 'segment' searches at segment level")
    collections: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="List of collection IDs to search within. All collections must be of collection_type 'media-descriptions' or 'rich-transcripts'.   For file-level search, collections must have 'enable_summary: true' in transcribe_config.")
    query: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Text search query to find relevant content")
    limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=10, description="Maximum number of search results to return")
    filter: Optional[SearchFilter] = None
    __properties: ClassVar[List[str]] = ["scope", "collections", "query", "limit", "filter"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['file', 'segment']):
            raise ValueError("must be one of enum values ('file', 'segment')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scope": obj.get("scope"),
            "collections": obj.get("collections"),
            "query": obj.get("query"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 10,
            "filter": SearchFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None
        })
        return _obj


