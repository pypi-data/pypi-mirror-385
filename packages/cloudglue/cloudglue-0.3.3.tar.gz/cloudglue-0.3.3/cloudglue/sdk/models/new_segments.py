# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cloudglue.sdk.models.narrative_config import NarrativeConfig
from cloudglue.sdk.models.shot_config import ShotConfig
from typing import Optional, Set
from typing_extensions import Self

class NewSegments(BaseModel):
    """
    NewSegments
    """ # noqa: E501
    url: StrictStr = Field(description="Input video URL. Supports URIs of files uploaded to Cloudglue Files endpoint, public HTTP URLs, YouTube URLs (narrative criteria only), and files which have been granted access to Cloudglue via data connectors.  **⚠️ Important: YouTube URLs are ONLY supported for narrative-based segmentation.** Shot-based segmentation requires direct video file access and does not support YouTube URLs. For files via our Data connectors, see our documentation on data connectors for setup information.")
    criteria: StrictStr = Field(description="Segmentation criteria: • **shot**: Detect scene changes and shot boundaries using computer vision (not supported for YouTube URLs) • **narrative**: Identify logical narrative segments and chapters using AI analysis (supports YouTube URLs)")
    shot_config: Optional[ShotConfig] = Field(default=None, description="Configuration for shot-based segmentation. Only provide when criteria is 'shot'.")
    narrative_config: Optional[NarrativeConfig] = Field(default=None, description="Configuration for narrative-based segmentation. Only provide when criteria is 'narrative'.")
    __properties: ClassVar[List[str]] = ["url", "criteria", "shot_config", "narrative_config"]

    @field_validator('criteria')
    def criteria_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['shot', 'narrative']):
            raise ValueError("must be one of enum values ('shot', 'narrative')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewSegments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shot_config
        if self.shot_config:
            _dict['shot_config'] = self.shot_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of narrative_config
        if self.narrative_config:
            _dict['narrative_config'] = self.narrative_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewSegments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "criteria": obj.get("criteria"),
            "shot_config": ShotConfig.from_dict(obj["shot_config"]) if obj.get("shot_config") is not None else None,
            "narrative_config": NarrativeConfig.from_dict(obj["narrative_config"]) if obj.get("narrative_config") is not None else None
        })
        return _obj


