# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudglue.sdk.models.frame_extraction_config import FrameExtractionConfig
from cloudglue.sdk.models.source_image import SourceImage
from typing import Optional, Set
from typing_extensions import Self

class FaceMatchRequest(BaseModel):
    """
    FaceMatchRequest
    """ # noqa: E501
    source_image: SourceImage = Field(description="Source image containing the face to search for")
    target_video_url: StrictStr = Field(description="URL of the target video to search in")
    max_faces: Optional[Annotated[int, Field(le=4000, strict=True, ge=1)]] = Field(default=50, description="Maximum number of faces to return")
    face_detection_id: Optional[StrictStr] = Field(default=None, description="Optional: Use previously analyzed face detections in video")
    frame_extraction_id: Optional[StrictStr] = Field(default=None, description="Optional: Use previously extracted frames")
    frame_extraction_config: Optional[FrameExtractionConfig] = Field(default=None, description="Optional: Frame extraction configuration")
    __properties: ClassVar[List[str]] = ["source_image", "target_video_url", "max_faces", "face_detection_id", "frame_extraction_id", "frame_extraction_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FaceMatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_image
        if self.source_image:
            _dict['source_image'] = self.source_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frame_extraction_config
        if self.frame_extraction_config:
            _dict['frame_extraction_config'] = self.frame_extraction_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FaceMatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source_image": SourceImage.from_dict(obj["source_image"]) if obj.get("source_image") is not None else None,
            "target_video_url": obj.get("target_video_url"),
            "max_faces": obj.get("max_faces") if obj.get("max_faces") is not None else 50,
            "face_detection_id": obj.get("face_detection_id"),
            "frame_extraction_id": obj.get("frame_extraction_id"),
            "frame_extraction_config": FrameExtractionConfig.from_dict(obj["frame_extraction_config"]) if obj.get("frame_extraction_config") is not None else None
        })
        return _obj


