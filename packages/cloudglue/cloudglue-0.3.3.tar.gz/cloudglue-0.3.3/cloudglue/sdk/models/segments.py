# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudglue.sdk.models.narrative_config import NarrativeConfig
from cloudglue.sdk.models.segment import Segment
from cloudglue.sdk.models.shot_config import ShotConfig
from typing import Optional, Set
from typing_extensions import Self

class Segments(BaseModel):
    """
    Segments
    """ # noqa: E501
    job_id: StrictStr = Field(description="Unique identifier for the segment job")
    file_id: StrictStr = Field(description="ID of the file this segment belongs to")
    object: StrictStr = Field(description="Object type, always 'segments'")
    status: StrictStr = Field(description="Current status of the segment job")
    criteria: StrictStr = Field(description="Segment criteria used for this job")
    created_at: StrictInt = Field(description="Unix timestamp of when the job was created")
    shot_config: Optional[ShotConfig] = Field(default=None, description="Configuration used for shot-based segmentation (only present when criteria is 'shot')")
    narrative_config: Optional[NarrativeConfig] = Field(default=None, description="Configuration used for narrative-based segmentation (only present when criteria is 'narrative')")
    total_segments: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Total number of segments generated (only present when status is 'completed')")
    segments: Optional[List[Segment]] = Field(default=None, description="Array of generated segments (only present when status is 'completed')")
    __properties: ClassVar[List[str]] = ["job_id", "file_id", "object", "status", "criteria", "created_at", "shot_config", "narrative_config", "total_segments", "segments"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['segments']):
            raise ValueError("must be one of enum values ('segments')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'processing', 'completed', 'failed']):
            raise ValueError("must be one of enum values ('pending', 'processing', 'completed', 'failed')")
        return value

    @field_validator('criteria')
    def criteria_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['shot', 'narrative']):
            raise ValueError("must be one of enum values ('shot', 'narrative')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Segments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shot_config
        if self.shot_config:
            _dict['shot_config'] = self.shot_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of narrative_config
        if self.narrative_config:
            _dict['narrative_config'] = self.narrative_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Segments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_id": obj.get("job_id"),
            "file_id": obj.get("file_id"),
            "object": obj.get("object"),
            "status": obj.get("status"),
            "criteria": obj.get("criteria"),
            "created_at": obj.get("created_at"),
            "shot_config": ShotConfig.from_dict(obj["shot_config"]) if obj.get("shot_config") is not None else None,
            "narrative_config": NarrativeConfig.from_dict(obj["narrative_config"]) if obj.get("narrative_config") is not None else None,
            "total_segments": obj.get("total_segments"),
            "segments": [Segment.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None
        })
        return _obj


