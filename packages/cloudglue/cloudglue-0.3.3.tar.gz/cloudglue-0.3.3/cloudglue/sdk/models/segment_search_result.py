# coding: utf-8

"""
    Cloudglue API

    API for Cloudglue

    The version of the OpenAPI document: 0.3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudglue.sdk.models.chat_completion_response_choices_inner_citations_inner_scene_text_inner import ChatCompletionResponseChoicesInnerCitationsInnerSceneTextInner
from cloudglue.sdk.models.chat_completion_response_choices_inner_citations_inner_speech_inner import ChatCompletionResponseChoicesInnerCitationsInnerSpeechInner
from cloudglue.sdk.models.chat_completion_response_choices_inner_citations_inner_visual_scene_description_inner import ChatCompletionResponseChoicesInnerCitationsInnerVisualSceneDescriptionInner
from typing import Optional, Set
from typing_extensions import Self

class SegmentSearchResult(BaseModel):
    """
    SegmentSearchResult
    """ # noqa: E501
    type: StrictStr = Field(description="Result type, always 'segment'")
    file_id: StrictStr = Field(description="ID of the file")
    collection_id: StrictStr = Field(description="ID of the collection containing this file")
    segment_id: StrictStr = Field(description="ID of the segment")
    id: StrictStr = Field(description="ID of the search document")
    score: Union[StrictFloat, StrictInt] = Field(description="Relevance score (higher is more relevant)")
    start_time: Union[StrictFloat, StrictInt] = Field(description="Start time of the segment in seconds")
    end_time: Union[StrictFloat, StrictInt] = Field(description="End time of the segment in seconds")
    title: Optional[StrictStr] = Field(default=None, description="Title associated with the segment")
    filename: Optional[StrictStr] = Field(default=None, description="Original filename of the video")
    visual_description: Optional[List[ChatCompletionResponseChoicesInnerCitationsInnerVisualSceneDescriptionInner]] = Field(default=None, description="Visual descriptions for the segment")
    scene_text: Optional[List[ChatCompletionResponseChoicesInnerCitationsInnerSceneTextInner]] = Field(default=None, description="Text detected on screen in the segment")
    speech: Optional[List[ChatCompletionResponseChoicesInnerCitationsInnerSpeechInner]] = Field(default=None, description="Speech transcription for the segment")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="URL of the thumbnail for the segment if available")
    __properties: ClassVar[List[str]] = ["type", "file_id", "collection_id", "segment_id", "id", "score", "start_time", "end_time", "title", "filename", "visual_description", "scene_text", "speech", "thumbnail_url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['segment']):
            raise ValueError("must be one of enum values ('segment')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SegmentSearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in visual_description (list)
        _items = []
        if self.visual_description:
            for _item_visual_description in self.visual_description:
                if _item_visual_description:
                    _items.append(_item_visual_description.to_dict())
            _dict['visual_description'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scene_text (list)
        _items = []
        if self.scene_text:
            for _item_scene_text in self.scene_text:
                if _item_scene_text:
                    _items.append(_item_scene_text.to_dict())
            _dict['scene_text'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in speech (list)
        _items = []
        if self.speech:
            for _item_speech in self.speech:
                if _item_speech:
                    _items.append(_item_speech.to_dict())
            _dict['speech'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SegmentSearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "file_id": obj.get("file_id"),
            "collection_id": obj.get("collection_id"),
            "segment_id": obj.get("segment_id"),
            "id": obj.get("id"),
            "score": obj.get("score"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "title": obj.get("title"),
            "filename": obj.get("filename"),
            "visual_description": [ChatCompletionResponseChoicesInnerCitationsInnerVisualSceneDescriptionInner.from_dict(_item) for _item in obj["visual_description"]] if obj.get("visual_description") is not None else None,
            "scene_text": [ChatCompletionResponseChoicesInnerCitationsInnerSceneTextInner.from_dict(_item) for _item in obj["scene_text"]] if obj.get("scene_text") is not None else None,
            "speech": [ChatCompletionResponseChoicesInnerCitationsInnerSpeechInner.from_dict(_item) for _item in obj["speech"]] if obj.get("speech") is not None else None,
            "thumbnail_url": obj.get("thumbnail_url")
        })
        return _obj


