import cv2
import numpy as np
import mediapipe as mp
from importlib.resources import path as resources_path
from mediapipe.tasks.python import BaseOptions
from mediapipe.tasks.python.vision import FaceLandmarkerOptions, FaceLandmarker
from enum import Enum
from .Utility import Utility as util
from ..protos.Validation_pb2 import TooSmallImage, FaceLost, FaceOutOfBoundary


class FacialPosition(Enum):
    """
    人脸位置枚举
    """
    LEFT_FACE = 0
    RIGHT_FACE = 1
    NOSE = 2


class SignalProcessor(object):
    # 初始化mediapipe
    with resources_path('xy_health_measurement_sdk.resources', 'face_landmarker.task') as task:
        __options = FaceLandmarkerOptions(base_options=BaseOptions(model_asset_path=task),
                                          output_face_blendshapes=True, num_faces=1)

    @classmethod
    def detect(cls, frame):
        """
        特征提取
        """
        # 图像数据转换
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        mp_image = mp.Image(image_format=mp.ImageFormat.SRGB, data=image)
        return cls.__detect_image(mp_image)

    @classmethod
    def detect_file(cls, file):
        mp_image = mp.Image.create_from_file(file)
        return cls.__detect_image(mp_image)

    @classmethod
    def __detect_image(cls, image):
        # 图像特征提取
        with FaceLandmarker.create_from_options(cls.__options) as landmarker:
            detection = landmarker.detect(image)
            return detection.face_landmarks[0] if len(
                detection.face_landmarks) > 0 else None, list(
                map(lambda b: b.score, detection.face_blendshapes[0])) if len(
                detection.face_blendshapes) > 0 else None, image.width, image.height

    @classmethod
    def validate(cls, verify_requirements_only=False, *args):
        """
        数据校验(error)
        """
        landmarks, width, height = args
        errors = []

        # 校验图像尺寸
        image_size_validation = util.get_validation(TooSmallImage)
        if image_size_validation:
            longer_side = width if width > height else height
            shorter_side = width + height - longer_side
            if longer_side < image_size_validation['min_height'] or shorter_side < image_size_validation['min_width']:
                errors.append(util.generate_error(TooSmallImage, not verify_requirements_only))

        # 校验是否存在人脸
        if not landmarks:
            errors.append(util.generate_error(FaceLost, not verify_requirements_only))

        # 查找人脸区域坐标，需要特别注意的是，mediapipe提取landmarks中x/y为相对于图像尺寸的比例，x*width、y*height 之后得到的才是绝对坐标
        min_x, min_y, max_x, max_y = width, height, 0, 0
        for landmark in landmarks:
            if landmark.x < min_x:
                min_x = landmark.x
            if landmark.x > max_x:
                max_x = landmark.x
            if landmark.y < min_y:
                min_y = landmark.y
            if landmark.y > max_y:
                max_y = landmark.y

        # 校验人脸边界
        if util.get_validation(FaceOutOfBoundary):
            if len(landmarks) < 478 or min_x < 0 or min_y < 0 or max_x > width or max_y > height:
                errors.append(util.generate_error(FaceOutOfBoundary, not verify_requirements_only))

        return min_x, min_y, max_x, max_y, errors

    @staticmethod
    def extract(*args):
        frame, landmarks, width, height = args
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
        points = SignalProcessor.__get_points(landmarks, width, height)
        left_face_mask = SignalProcessor.__get_face_nose_mask(frame.shape, points, FacialPosition.LEFT_FACE)
        right_face_mask = SignalProcessor.__get_face_nose_mask(frame.shape, points, FacialPosition.RIGHT_FACE)
        nose_mask = SignalProcessor.__get_face_nose_mask(frame.shape, points, FacialPosition.NOSE)
        forehead_mask = SignalProcessor.__get_forehead_mask(frame.shape, points)
        full_face_mask = SignalProcessor.__get_full_face_mask(frame.shape, left_face_mask, right_face_mask,
                                                              forehead_mask)
        return tuple(map(lambda mask: cv2.mean(frame, mask=cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)),
                         (left_face_mask, right_face_mask, forehead_mask, full_face_mask, nose_mask)))

    @staticmethod
    def compute_triangle_region_averages(frame, *args):
        landmarks,width,height=args
        landmarks = [(int(l.x * width), int(l.y * height)) for l in landmarks]
        FACEMESH_TRIANGLES = [
            [302, 11, 12], [302, 11, 267], [363, 420, 360], [363, 420, 456], [217, 126, 47], [217, 126, 209],
            [236, 174, 196],
            [236, 174, 217], [455, 460, 294], [455, 460, 305],
            [347, 280, 330], [347, 280, 346], [439, 438, 344], [439, 438, 392], [22, 154, 26], [22, 154, 153],
            [98, 203, 129],
            [98, 203, 165], [352, 280, 346], [352, 280, 411],
            [370, 462, 326], [370, 462, 461], [7, 25, 33], [7, 25, 110], [51, 195, 3], [51, 195, 5], [5, 195, 281],
            [336, 337, 9], [336, 337, 299], [455, 289, 305],
            [455, 289, 439], [456, 437, 399], [456, 437, 420], [202, 204, 43], [202, 204, 210], [41, 74, 42],
            [41, 74, 73],
            [150, 169, 135], [150, 169, 170], [285, 441, 295],
            [285, 441, 413], [111, 123, 116], [111, 123, 117], [134, 198, 131], [134, 198, 236], [446, 265, 340],
            [446, 265, 342], [414, 413, 441], [414, 413, 463], [314, 17, 313],
            [314, 17, 315], [279, 294, 278], [279, 294, 331], [279, 294, 358], [322, 410, 270], [322, 410, 436],
            [148, 152, 175], [196, 236, 3], [52, 105, 63], [52, 105, 66],
            [131, 49, 48], [131, 49, 209], [247, 30, 161], [247, 30, 225], [175, 152, 377], [258, 257, 386],
            [258, 257, 442],
            [9, 336, 285], [446, 255, 261], [446, 255, 359],
            [448, 261, 255], [448, 261, 346], [120, 231, 230], [120, 231, 232], [321, 375, 273], [321, 375, 307],
            [11, 72, 12],
            [11, 72, 37], [236, 51, 3], [236, 51, 134],
            [371, 355, 329], [371, 355, 358], [408, 407, 272], [408, 407, 306], [353, 265, 342], [353, 265, 372],
            [103, 104, 54], [103, 104, 67], [162, 71, 21], [162, 71, 139],
            [456, 419, 248], [456, 419, 399], [42, 74, 184], [60, 240, 75], [60, 240, 99], [245, 188, 122],
            [245, 188, 128],
            [428, 262, 396], [428, 262, 421], [64, 98, 129],
            [64, 98, 240], [391, 393, 269], [391, 393, 326], [450, 253, 252], [450, 253, 449], [341, 463, 362],
            [341, 463, 464],
            [346, 449, 347], [346, 449, 448], [169, 214, 135],
            [169, 214, 210], [423, 327, 358], [423, 327, 391], [378, 395, 379], [378, 395, 400], [19, 1, 44],
            [19, 1, 274],
            [165, 98, 97], [6, 196, 122], [6, 196, 197],
            [220, 131, 115], [220, 131, 134], [318, 325, 319], [318, 325, 324], [138, 215, 172], [138, 215, 213],
            [303, 302, 269], [303, 302, 271], [271, 268, 302], [271, 268, 311],
            [224, 53, 223], [224, 53, 225], [117, 123, 50], [121, 120, 100], [121, 120, 232], [428, 396, 199],
            [266, 371, 329],
            [266, 371, 423], [418, 406, 335], [418, 406, 421],
            [129, 102, 49], [129, 102, 64], [402, 316, 317], [402, 316, 403], [12, 72, 38], [412, 357, 343],
            [412, 357, 465],
            [267, 269, 302], [267, 269, 393], [175, 396, 199],
            [175, 396, 377], [255, 263, 249], [255, 263, 359], [125, 237, 44], [125, 237, 241], [108, 107, 9],
            [108, 107, 69],
            [440, 363, 275], [440, 363, 360], [313, 406, 405],
            [313, 406, 421], [353, 372, 383], [426, 322, 391], [426, 322, 436], [212, 57, 186], [212, 57, 202],
            [195, 3, 197],
            [450, 348, 347], [450, 348, 349], [285, 413, 417],
            [457, 438, 309], [457, 438, 440], [82, 38, 13], [82, 38, 81], [147, 213, 187], [147, 213, 215],
            [296, 334, 282],
            [296, 334, 299], [425, 411, 280], [425, 411, 427],
            [63, 105, 104], [376, 433, 411], [376, 433, 435], [28, 157, 56], [28, 157, 158], [105, 104, 69],
            [52, 222, 65],
            [52, 222, 223], [270, 269, 303], [270, 269, 322],
            [277, 357, 343], [277, 357, 350], [88, 95, 96], [35, 143, 111], [35, 143, 124], [109, 108, 67],
            [109, 108, 151],
            [181, 180, 84], [181, 180, 90], [184, 61, 76],
            [184, 61, 185], [404, 405, 314], [404, 405, 320], [247, 226, 113], [247, 226, 130], [55, 65, 107],
            [55, 65, 221],
            [112, 244, 233], [112, 244, 243], [294, 460, 327],
            [422, 273, 287], [422, 273, 424], [311, 268, 312], [43, 204, 106], [370, 94, 2], [370, 94, 19],
            [418, 424, 335],
            [418, 424, 431], [291, 375, 273], [291, 375, 306],
            [257, 443, 259], [257, 443, 442], [421, 18, 200], [421, 18, 313], [167, 39, 37], [167, 39, 165],
            [51, 45, 4],
            [51, 45, 134], [94, 141, 2], [94, 141, 19],
            [97, 98, 99], [336, 299, 296], [156, 139, 34], [156, 139, 70], [185, 186, 40], [185, 186, 57],
            [25, 110, 228],
            [316, 14, 15], [316, 14, 317], [101, 118, 50],
            [101, 118, 119], [410, 432, 287], [410, 432, 436], [138, 192, 135], [138, 192, 213], [74, 40, 73],
            [74, 40, 185],
            [37, 164, 0], [37, 164, 167], [294, 455, 278],
            [369, 262, 396], [369, 262, 431], [352, 346, 340], [25, 31, 226], [25, 31, 228], [207, 212, 214],
            [207, 212, 216],
            [189, 190, 221], [189, 190, 243], [320, 307, 321],
            [320, 307, 325], [342, 467, 445], [342, 467, 446], [75, 59, 166], [75, 59, 235], [221, 56, 28],
            [221, 56, 190],
            [23, 230, 22], [23, 230, 229], [29, 27, 160],
            [29, 27, 223], [104, 68, 54], [104, 68, 63], [340, 346, 261], [13, 268, 12], [13, 268, 312],
            [328, 290, 250],
            [328, 290, 460], [242, 238, 20], [242, 238, 241],
            [292, 415, 308], [292, 415, 407], [42, 41, 81], [282, 334, 293], [300, 276, 293], [300, 276, 383],
            [357, 453, 452],
            [357, 453, 465], [233, 244, 245], [252, 253, 374],
            [435, 433, 367], [169, 170, 211], [132, 58, 177], [42, 184, 183], [62, 191, 78], [62, 191, 183],
            [374, 253, 373],
            [409, 270, 304], [409, 270, 410], [140, 170, 176],
            [140, 170, 211], [92, 216, 186], [92, 216, 206], [405, 314, 313], [447, 366, 323], [447, 366, 345],
            [50, 187, 123],
            [50, 187, 205], [252, 451, 256], [252, 451, 450],
            [196, 174, 188], [240, 64, 235], [125, 241, 141], [15, 86, 14], [15, 86, 85], [420, 360, 429], [4, 274, 1],
            [4, 274, 275], [23, 22, 145], [264, 447, 372],
            [264, 447, 454], [101, 120, 100], [101, 120, 119], [232, 233, 112], [232, 233, 128], [434, 422, 430],
            [434, 422, 432], [20, 242, 99], [65, 66, 52], [65, 66, 107],
            [467, 466, 260], [467, 466, 263], [85, 15, 16], [412, 465, 351], [416, 367, 364], [416, 367, 433],
            [199, 428, 200],
            [399, 419, 412], [165, 167, 97], [358, 423, 371],
            [255, 339, 249], [255, 339, 448], [218, 166, 79], [218, 166, 219], [200, 208, 199], [200, 208, 201],
            [5, 4, 51],
            [5, 4, 281], [173, 56, 157], [173, 56, 190],
            [89, 179, 88], [89, 179, 180], [289, 305, 290], [205, 50, 101], [4, 281, 275], [364, 367, 365],
            [311, 272, 271],
            [311, 272, 310], [187, 213, 192], [333, 334, 293],
            [333, 334, 299], [32, 140, 171], [32, 140, 211], [141, 241, 242], [305, 290, 460], [274, 457, 354],
            [274, 457, 440],
            [171, 140, 148], [443, 444, 259], [443, 444, 283],
            [68, 71, 21], [68, 71, 63], [412, 351, 419], [457, 354, 461], [366, 345, 352], [335, 321, 273],
            [335, 321, 406],
            [282, 296, 295], [430, 431, 394], [430, 431, 424],
            [89, 180, 90], [168, 122, 6], [168, 122, 193], [403, 318, 319], [403, 318, 402], [77, 96, 62], [77, 96, 90],
            [248, 456, 281], [121, 47, 100], [121, 47, 128],
            [85, 17, 16], [85, 17, 84], [214, 202, 210], [214, 202, 212], [231, 22, 26], [231, 22, 230], [92, 165, 39],
            [92, 165, 206], [221, 28, 222], [80, 42, 81],
            [80, 42, 183], [34, 234, 127], [34, 234, 227], [201, 208, 32], [401, 376, 352], [401, 376, 435],
            [76, 62, 77],
            [76, 62, 183], [366, 352, 401], [258, 441, 286],
            [258, 441, 442], [119, 120, 230], [342, 276, 353], [342, 276, 445], [399, 343, 412], [399, 343, 437],
            [313, 18, 17],
            [96, 89, 88], [96, 89, 90], [205, 36, 101],
            [205, 36, 206], [322, 269, 391], [452, 451, 256], [452, 451, 349], [235, 59, 219], [110, 163, 7],
            [110, 163, 144],
            [256, 382, 341], [256, 382, 381], [38, 81, 41],
            [435, 397, 288], [435, 397, 367], [259, 260, 387], [259, 260, 444], [70, 139, 71], [327, 358, 294],
            [177, 215, 58],
            [177, 215, 147], [260, 444, 445], [62, 96, 78],
            [235, 48, 64], [235, 48, 219], [453, 452, 341], [38, 72, 41], [167, 97, 2], [298, 301, 251],
            [298, 301, 293],
            [466, 260, 388], [196, 122, 188], [413, 417, 464],
            [170, 150, 149], [190, 173, 133], [264, 356, 368], [264, 356, 454], [48, 49, 64], [373, 339, 254],
            [373, 339, 390],
            [30, 225, 224], [448, 449, 254], [33, 246, 247],
            [128, 121, 232], [201, 194, 32], [201, 194, 182], [309, 438, 392], [240, 99, 98], [80, 183, 191],
            [151, 9, 108],
            [151, 9, 337], [414, 286, 398], [414, 286, 441],
            [275, 363, 281], [421, 200, 428], [188, 114, 128], [188, 114, 174], [265, 340, 372], [266, 426, 423],
            [266, 426, 425], [116, 137, 123], [116, 137, 227], [228, 24, 110],
            [228, 24, 229], [251, 284, 298], [290, 250, 392], [148, 140, 176], [259, 387, 257], [422, 424, 430],
            [44, 45, 4],
            [44, 45, 220], [123, 147, 177], [123, 147, 187],
            [179, 88, 178], [258, 386, 385], [349, 451, 450], [79, 238, 20], [79, 238, 239], [27, 28, 159],
            [27, 28, 222],
            [199, 175, 171], [111, 116, 143], [166, 60, 20],
            [166, 60, 75], [205, 207, 187], [205, 207, 216], [465, 351, 417], [106, 91, 43], [106, 91, 182],
            [93, 132, 137],
            [39, 72, 37], [39, 72, 73], [404, 315, 314],
            [404, 315, 403], [63, 70, 46], [63, 70, 71], [130, 33, 25], [130, 33, 247], [15, 16, 315], [164, 267, 0],
            [164, 267, 393], [278, 279, 360], [389, 368, 301],
            [389, 368, 356], [408, 306, 291], [429, 420, 437], [416, 434, 364], [416, 434, 411], [20, 60, 99],
            [113, 35, 124],
            [113, 35, 226], [350, 357, 452], [135, 214, 192],
            [53, 52, 63], [53, 52, 223], [111, 226, 31], [111, 226, 35], [99, 97, 242], [270, 303, 304],
            [383, 372, 264],
            [295, 285, 336], [151, 338, 10], [151, 338, 337],
            [46, 124, 113], [46, 124, 156], [360, 344, 278], [360, 344, 440], [361, 366, 323], [361, 366, 401],
            [368, 264, 383],
            [41, 73, 72], [243, 133, 112], [243, 133, 190],
            [146, 43, 61], [146, 43, 91], [271, 304, 272], [271, 304, 303], [208, 171, 32], [208, 171, 199],
            [117, 111, 31],
            [85, 86, 179], [4, 44, 1], [278, 455, 439],
            [295, 282, 442], [372, 447, 345], [83, 17, 18], [83, 17, 84], [9, 8, 55], [9, 8, 285], [450, 449, 347],
            [126, 209, 129], [203, 206, 36], [203, 206, 165],
            [131, 48, 115], [350, 452, 349], [262, 431, 418], [160, 27, 159], [13, 12, 38], [276, 383, 353],
            [258, 286, 384],
            [439, 278, 344], [341, 453, 464], [167, 2, 164],
            [277, 329, 350], [277, 329, 355], [179, 180, 85], [384, 385, 258], [182, 201, 83], [297, 338, 337],
            [156, 70, 46],
            [266, 329, 330], [395, 400, 369], [114, 47, 128],
            [114, 47, 217], [168, 193, 8], [415, 407, 310], [220, 237, 44], [220, 237, 218], [148, 175, 171],
            [239, 238, 241],
            [6, 197, 419], [304, 272, 408], [286, 384, 398],
            [290, 392, 289], [55, 221, 189], [425, 330, 266], [425, 330, 280], [432, 436, 427], [229, 230, 118],
            [48, 115, 219],
            [284, 332, 333], [32, 194, 211], [321, 320, 405],
            [442, 282, 443], [405, 406, 321], [29, 160, 30], [377, 396, 369], [432, 427, 434], [422, 287, 432],
            [206, 205, 216],
            [129, 126, 142], [28, 158, 159], [380, 252, 374],
            [380, 252, 381], [437, 355, 277], [437, 355, 429], [315, 17, 16], [8, 285, 417], [354, 370, 19],
            [354, 370, 461],
            [15, 316, 315], [95, 78, 96], [118, 229, 117],
            [345, 340, 352], [345, 340, 372], [155, 26, 112], [155, 26, 154], [79, 166, 20], [161, 160, 30],
            [234, 93, 227],
            [284, 298, 333], [139, 34, 127], [74, 184, 185],
            [2, 141, 97], [347, 330, 348], [19, 354, 274], [119, 230, 118], [104, 69, 67], [381, 252, 256],
            [326, 393, 2],
            [19, 141, 125], [23, 24, 144], [23, 24, 229],
            [43, 61, 57], [411, 427, 434], [358, 429, 279], [358, 429, 355], [201, 83, 18], [225, 53, 46],
            [467, 445, 260],
            [105, 66, 69], [69, 108, 67], [218, 220, 115],
            [389, 251, 301], [137, 227, 93], [362, 463, 414], [411, 416, 433], [348, 330, 349], [333, 293, 298],
            [155, 112, 133], [129, 203, 142], [227, 143, 34], [227, 143, 116],
            [176, 170, 149], [83, 182, 181], [91, 182, 181], [185, 61, 57], [409, 287, 291], [409, 287, 410],
            [237, 241, 239],
            [279, 358, 331], [319, 320, 325], [319, 320, 404],
            [100, 142, 36], [100, 142, 126], [309, 459, 250], [309, 459, 457], [453, 465, 464], [365, 367, 397],
            [189, 193, 55],
            [189, 193, 244], [26, 232, 112], [26, 232, 231],
            [429, 360, 279], [90, 77, 91], [2, 326, 370], [458, 459, 250], [458, 459, 461], [186, 212, 216],
            [281, 248, 195],
            [39, 92, 40], [117, 50, 118], [375, 307, 306],
            [254, 373, 253], [323, 454, 447], [328, 326, 327], [328, 326, 462], [299, 337, 297], [283, 443, 282],
            [327, 391, 326], [202, 57, 43], [204, 210, 211], [448, 339, 254],
            [463, 464, 413], [219, 59, 166], [401, 361, 288], [224, 29, 30], [224, 29, 223], [407, 292, 306],
            [211, 210, 169],
            [301, 300, 293], [301, 300, 368], [49, 102, 64],
            [217, 114, 174], [91, 146, 77], [68, 21, 54], [467, 359, 263], [467, 359, 446], [306, 292, 307],
            [329, 330, 349],
            [172, 138, 136], [418, 262, 421], [391, 423, 426],
            [343, 277, 437], [387, 260, 388], [315, 316, 403], [34, 156, 143], [248, 195, 197], [425, 436, 426],
            [425, 436, 427], [249, 339, 390], [37, 11, 0], [215, 58, 172],
            [460, 328, 327], [441, 295, 442], [117, 31, 228], [75, 240, 235], [47, 126, 100], [197, 248, 419],
            [440, 344, 438],
            [325, 324, 308], [349, 350, 329], [250, 328, 462],
            [341, 452, 256], [193, 245, 122], [193, 245, 244], [408, 409, 291], [408, 409, 304], [220, 134, 45],
            [218, 79, 237],
            [203, 36, 142], [458, 250, 462], [395, 369, 431],
            [132, 177, 137], [18, 200, 201], [183, 184, 76], [272, 310, 407], [97, 141, 242], [461, 459, 457],
            [192, 214, 187],
            [168, 351, 6], [168, 351, 417], [368, 300, 383],
            [417, 465, 464], [181, 84, 83], [209, 49, 129], [276, 283, 293], [276, 283, 445], [297, 333, 299],
            [297, 333, 332],
            [207, 214, 187], [444, 283, 445], [84, 180, 85],
            [135, 136, 138], [135, 136, 150], [65, 222, 221], [364, 379, 365], [364, 379, 394], [128, 233, 245],
            [364, 394, 434], [129, 64, 49], [194, 211, 204], [69, 107, 66],
            [36, 100, 101], [307, 325, 292], [376, 352, 411], [86, 87, 14], [86, 87, 178], [386, 257, 387],
            [209, 198, 131],
            [209, 198, 217], [107, 9, 55], [123, 137, 177],
            [400, 369, 377], [439, 289, 392], [151, 109, 10], [261, 446, 340], [358, 294, 331], [319, 403, 404],
            [164, 393, 2],
            [268, 302, 12], [139, 127, 162], [197, 3, 196],
            [153, 22, 145], [250, 309, 392], [156, 124, 143], [145, 23, 144], [161, 247, 246], [218, 115, 219],
            [217, 236, 198],
            [144, 110, 24], [424, 273, 335], [44, 19, 125],
            [395, 379, 394], [435, 288, 401], [223, 27, 222], [281, 456, 363], [414, 362, 398], [229, 228, 117],
            [283, 282, 293], [194, 204, 106], [247, 113, 225], [461, 458, 462],
            [86, 178, 179], [226, 130, 25], [362, 341, 382], [40, 186, 92], [40, 73, 39], [275, 440, 274],
            [253, 449, 254],
            [308, 325, 292], [237, 239, 79], [430, 434, 394],
            [351, 6, 419], [273, 287, 291], [146, 61, 76], [90, 181, 91], [146, 76, 77], [46, 113, 225],
            [182, 106, 194],
            [0, 11, 267], [55, 193, 8], [417, 8, 168],
            [395, 394, 431], [336, 296, 295], [244, 243, 189], [63, 46, 53],
            # ...（保持原有的完整三角面片索引列表）
        ]

        # 指定的100个三角形索引
        GROUP_2_TRIANGLES = [
            603, 735, 255, 736, 10, 11, 162, 178, 179, 256,
            419, 602, 614, 616, 353, 393, 476, 502, 565, 587,
            591, 604, 680, 790, 848, 101, 164, 19, 239, 34,
            420, 421, 466, 467, 501, 524, 538, 564, 651, 777,
            788, 80, 849, 107, 112, 132, 136, 157, 18, 225,
            242, 306, 307, 358, 360, 392, 397, 403, 415, 516,
            539, 585, 698, 708, 729, 744, 766, 802, 839, 163,
            166, 195, 213, 227, 24, 240, 251, 28, 300, 302,
            325, 338, 347, 354, 362, 376, 378, 379, 382, 529,
            568, 569, 57, 624, 663, 695, 704, 755, 78, 816
        ]

        reds,greens,blues=[],[],[]
        # 只处理指定的100个三角形区域
        for tri_index in GROUP_2_TRIANGLES:
            triangle = FACEMESH_TRIANGLES[tri_index]
            idx1, idx2, idx3 = triangle

            # 获取三个点的坐标
            pt1 = landmarks[idx1]
            pt2 = landmarks[idx2]
            pt3 = landmarks[idx3]

            # 计算三角形中心点（用于权重计算）
            center_x = (pt1[0] + pt2[0] + pt3[0]) / 3
            center_y = (pt1[1] + pt2[1] + pt3[1]) / 3

            # 计算三角形区域内的加权平均RGB值
            mask = np.zeros((height, width), dtype=np.uint8)
            pts = np.array([pt1, pt2, pt3])
            cv2.fillPoly(mask, [pts], 1)

            # 获取三角形内的所有像素坐标
            y_indices, x_indices = np.where(mask == 1)

            # 计算每个像素到中心的距离
            distances = np.sqrt((x_indices - center_x) ** 2 + (y_indices - center_y) ** 2)

            # 计算权重（距离越近权重越大）
            max_distance = np.max(distances) if len(distances) > 0 else 1
            weights = 1.0 - (distances / max_distance)  # 距离越近权重越大

            # 获取像素值
            pixel_values = frame[y_indices, x_indices]

            # 计算加权平均RGB值
            if len(pixel_values) > 0:
                weighted_r = np.average(pixel_values[:, 2], weights=weights)  # R通道
                weighted_g = np.average(pixel_values[:, 1], weights=weights)  # G通道
                weighted_b = np.average(pixel_values[:, 0], weights=weights)  # B通道
                weighted_rgb = (weighted_r, weighted_g, weighted_b)
            else:
                # 如果没有像素，使用简单平均
                weighted_rgb = cv2.mean(frame, mask=mask)[:3]

            reds.append(weighted_rgb[0])
            greens.append(weighted_rgb[1])
            blues.append(weighted_rgb[2])

        return reds,greens,blues



    @staticmethod
    def __get_points(*args):
        landmarks, width, height = args
        points = []
        for landmark in landmarks:
            x, y = int(landmark.x * width), int(landmark.y * height)
            points.append((x, y))
        return points

    @staticmethod
    def __get_face_nose_mask(shape, points, position: FacialPosition):
        left_face = (232, 31, 50, 142)
        match position:
            case FacialPosition.LEFT_FACE:
                roi_points = left_face
            case FacialPosition.RIGHT_FACE:
                roi_points = (452, 261, 280, 371)
            case FacialPosition.NOSE:
                roi_points = (6, 122, 209, 49, 129, 64, 98, 97, 2, 326, 327, 294, 358, 279, 360, 351)
            case _:
                raise TypeError('invalid FacialPosition')

        black = np.zeros(shape, np.uint8)
        _points = []
        for i in range(len(left_face)):
            _points.append(points[roi_points[i]])
        _points = np.array(_points)
        cv2.fillPoly(black, [_points], (255, 255, 255))
        return black

    @staticmethod
    def __get_forehead_mask(shape, points):
        black = np.zeros(shape, np.uint8)
        pnts = [points[63], points[105], points[66], points[107],
                points[336], points[296], points[334], points[293]]
        nose_length = int(0.6 * (points[168][1] - points[2][1]))
        pnts.append((points[334][0], points[334][1] + nose_length))
        pnts.append((points[105][0], points[105][1] + nose_length))
        pnts = np.array(pnts)
        cv2.fillPoly(black, [pnts], (255, 255, 255))
        return black

    @staticmethod
    def __get_full_face_mask(shape, left_face_mask, right_face_mask, forehead_mask):
        black = np.zeros(shape, np.uint8)
        black = cv2.bitwise_or(src1=black, src2=left_face_mask)
        black = cv2.bitwise_or(src1=black, src2=right_face_mask)
        black = cv2.bitwise_or(src1=black, src2=forehead_mask)
        return black
