[project]
name = "mcp-factory"
version = "1.6.3"
description = "A lightweight factory framework for creating and managing MCP (Model Context Protocol) servers with simplified configuration and project building capabilities."
authors = [
  { name = "ACNet-AI", email = "agencollabnet@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
keywords = ["mcp", "model-context-protocol", "ai", "server", "factory", "management"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
  "fastmcp>=2.12.0",
  "pydantic>=2.11.0",
  "PyYAML>=6.0",
  "python-dotenv>=1.1.0",
  "uvicorn>=0.34.0",
  "jsonschema>=4.24.0",
  "click>=8.2.0",
  "aiohttp>=3.12.0",
  "tabulate>=0.9.0",
  "psutil>=7.0.0",
  "rich>=13.0.0",
  "questionary>=2.0.1",
  "requests>=2.32.0",
  "toml>=0.10.0",
  "httpx>=0.28.1",
  "casbin>=1.43.0",
  "lago-python-client>=1.33.1",
  "cryptography>=45.0.6",
]

[project.optional-dependencies]
# Payment gateway optional dependencies
stripe = ["stripe>=10.0.0"]
# Full billing system with all payment gateways
billing-full = ["stripe>=10.0.0"]

[project.urls]
Homepage = "https://github.com/ACNet-AI/mcp-factory"
Repository = "https://github.com/ACNet-AI/mcp-factory"
"Bug Tracker" = "https://github.com/ACNet-AI/mcp-factory/issues"

[project.scripts]
mcp-factory = "mcp_factory.cli.main:main"
mcpf = "mcp_factory.cli.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["mcp_factory"]

[tool.hatch.build.targets.sdist]
include = [
  "/mcp_factory",
  "/README.md",
  "/LICENSE",
  "/CHANGELOG.md",
]



[tool.ruff]
line-length = 120
target-version = "py310"
exclude = [
  "*.yaml",
  "*.yml", 
  "*.json",
  "*.md",
  "*.txt",
]

[tool.ruff.lint]
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # pyflakes
  "I",    # isort
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "UP",   # pyupgrade
]
ignore = [
  "E501",  # line too long - we set line-length to 120
  "B008",  # do not perform function calls in argument defaults
  "C901",  # too complex
]

# Per-file ignores for test files
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "SLF001",   # Private member access (normal in tests)
  "PLC0415",  # Import outside top-level (dynamic imports in tests)
  "PLR2004",  # Magic values (test values don't need constants)
  "S101",     # Use of assert (normal in tests)
  "S105",     # Hardcoded passwords (test values)
  "S108",     # Hardcoded temp files (test paths)
  "ANN001",   # Missing type annotations (not required in tests)
  "ANN002",   # Missing type annotations for *args
  "ANN003",   # Missing type annotations for **kwargs
  "ANN201",   # Missing return type annotations (not required in tests)
  "ANN202",   # Missing return type annotations for private functions
  "ARG002",   # Unused method arguments (fixtures)
  "D",        # docstrings (not required in tests)
]
"scripts/**/*.py" = [
  "T201",  # print
  "S101",  # assert
]

[tool.ruff.lint.isort]
known-first-party = ["mcp_factory"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
  "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["mcp_factory"]
omit = [
  "*/tests/*",
  "*/test_*",
  "*/__pycache__/*",
  "*/.*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
  "fastmcp.*",
  "uvicorn.*",
  "yaml.*",
  "dotenv.*",
]
ignore_missing_imports = true

[dependency-groups]
dev = [
  "pytest>=8.4.0",
  "pytest-asyncio>=1.0.0",
  "pytest-cov>=6.2.0",
  "pytest-mock>=3.14.0",
  "ruff>=0.12.1",
  "mypy>=1.16.0",
  "types-PyYAML>=6.0.12.20250516",
  "types-setuptools>=80.9.0.20250529",
  "types-requests>=2.32.4.20250611",
  "types-toml>=0.10.8.20240310",
  "types-jsonschema>=4.24.0.20250528",
  "types-tabulate>=0.9.0.20241207",
  "bandit>=1.8.5",
]
test = [
  "pytest>=8.4.0",
  "pytest-asyncio>=1.0.0",
  "pytest-cov>=6.2.0",
  "pytest-mock>=3.14.0",
]

