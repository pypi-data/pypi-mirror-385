name: Build Wheels

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build Linux wheels with rclone binary
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - { cibw_build: "cp310-manylinux_x86_64", arch: "x86_64" }
          - { cibw_build: "cp311-manylinux_x86_64", arch: "x86_64" }
          - { cibw_build: "cp312-manylinux_x86_64", arch: "x86_64" }
          - { cibw_build: "cp313-manylinux_x86_64", arch: "x86_64" }
          - { cibw_build: "cp314-manylinux_x86_64", arch: "x86_64" }
          - { cibw_build: "cp310-manylinux_aarch64", arch: "aarch64" }
          - { cibw_build: "cp311-manylinux_aarch64", arch: "aarch64" }
          - { cibw_build: "cp312-manylinux_aarch64", arch: "aarch64" }
          - { cibw_build: "cp313-manylinux_aarch64", arch: "aarch64" }
          - { cibw_build: "cp314-manylinux_aarch64", arch: "aarch64" }
    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
      CIBW_BUILD: "${{ matrix.cibw_build }}"

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for ARM64)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Download rclone binary
        run: |
          mkdir -p rclone/bin
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            curl -L -o /tmp/rclone-linux-amd64.zip https://downloads.rclone.org/rclone-current-linux-amd64.zip
            mkdir -p /tmp/rclone-extract && unzip -q /tmp/rclone-linux-amd64.zip -d /tmp/rclone-extract
            cp /tmp/rclone-extract/rclone-*/rclone rclone/bin/rclone-linux-amd64 2>/dev/null || cp /tmp/rclone-extract/rclone rclone/bin/rclone-linux-amd64
            chmod +x rclone/bin/rclone-linux-amd64
          else
            curl -L -o /tmp/rclone-linux-arm64.zip https://downloads.rclone.org/rclone-current-linux-arm64.zip
            mkdir -p /tmp/rclone-extract && unzip -q /tmp/rclone-linux-arm64.zip -d /tmp/rclone-extract
            cp /tmp/rclone-extract/rclone-*/rclone rclone/bin/rclone-linux-arm64 2>/dev/null || cp /tmp/rclone-extract/rclone rclone/bin/rclone-linux-arm64
            chmod +x rclone/bin/rclone-linux-arm64
          fi

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BEFORE_BUILD: "pip install -e ."
          CIBW_TEST_COMMAND: "python -c 'from rclone import RClone; print(\"âœ“ Import successful\")'"

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
          retention-days: 7

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create empty rclone bin directory for sdist
        run: mkdir -p rclone/bin

      - name: Build sdist
        run: |
          pip install build
          python -m build --sdist

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 7

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/rclone-adapter
    permissions:
      id-token: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Verify distributions
        run: |
          ls -lh dist/
          python -m pip install --upgrade twine
          python -m twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          skip-existing: true

  publish-to-test-pypi:
    name: Publish to TestPyPI
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/rclone-adapter
    permissions:
      id-token: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Verify distributions
        run: |
          ls -lh dist/
          python -m pip install --upgrade twine
          python -m twine check dist/*

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
