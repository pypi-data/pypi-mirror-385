# metamodel_version: 1.7.0
enum AddgeneSequenceType
  {
    depositor__HYPHEN_MINUS__full
    addgene__HYPHEN_MINUS__full
  }

enum AnnotationTool
  {
    plannotate
  }

enum AssociatedFileType
  {
    Sequencing_file
  }

enum Collection
  {
    AddgenePlasmid
    OligoPair
  }

enum CollectionOptionType
  {
    OligoPair
    AddgenePlasmid
  }

enum GatewayReactionType
  {
    LR
    BP
  }

enum RepositoryName
  {
    addgene
    genbank
    benchling
    snapgene
    euroscarf
    igem
    wekwikgene
    seva
    open_dna_collections
  }

enum SequenceFileFormat
  {
    fasta
    genbank
    snapgene
    embl
  }

type AddgeneIdSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryId: String!
    repositoryName: RepositoryName!
    sequenceFileUrl: String
    addgeneSequenceType: AddgeneSequenceType
  }

type AnnotationReport
  {
    type: String
  }

type AnnotationSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    annotationTool: AnnotationTool!
    annotationToolVersion: String
    annotationReport: [AnnotationReport]
  }

type AssemblyFragment
  {
    type: String
    sequence: Sequence!
    leftLocation: SequenceRange
    rightLocation: SequenceRange
    reverseComplemented: Boolean!
  }

type AssemblySource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type AssociatedFile
  {
    type: String
    sequenceId: Sequence!
    fileName: String!
    fileType: AssociatedFileType!
  }

type BenchlingUrlSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryName: RepositoryName!
    repositoryId: String!
  }

type CloningStrategy
  {
    sequences: [Sequence]!
    sources: [Source]!
    primers: [Primer]
    description: String
    files: [AssociatedFile]
    schemaVersion: VersionNumber
    backendVersion: VersionNumber
    frontendVersion: VersionNumber
  }

type CollectionOption
  {
    name: String!
    source: Source!
    info: CollectionOptionInfo
  }

type CollectionOptionInfo
  {
    name: String
    description: String
    type: CollectionOptionType
    resistance: String
    well: String
  }

type CollectionSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    categoryId: String
    title: String!
    description: String
    image: [String]
    options: [CollectionOption]
  }

type CreLoxRecombinationSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type CRISPRSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type DatabaseSource
  {
    id: Integer!
    type: String
    outputName: String
    input: [SourceInput]
    databaseId: Integer!
  }

type EuroscarfSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryName: RepositoryName!
    repositoryId: String!
  }

type GatewaySource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
    reactionType: GatewayReactionType!
    greedy: Boolean
  }

type GenomeCoordinatesSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    assemblyAccession: String
    sequenceAccession: String!
    locusTag: String
    geneId: Integer
    start: Integer!
    end: Integer!
    strand: Integer!
  }

type GibsonAssemblySource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type HomologousRecombinationSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type IGEMSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryName: RepositoryName!
    sequenceFileUrl: String!
    repositoryId: String!
  }

type InFusionSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type InVivoAssemblySource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type LigationSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type ManuallyTypedSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    overhangCrick3prime: Integer
    overhangWatson3prime: Integer
    userInput: String!
    circular: Boolean
  }

type NamedThing
  {
    id: Integer!
  }

type OligoHybridizationSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    overhangCrick3prime: Integer
  }

type OpenDNACollectionsSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryName: RepositoryName!
    sequenceFileUrl: String
    repositoryId: String!
  }

type OverlapExtensionPCRLigationSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
  }

type PCRSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
    addPrimerFeatures: Boolean
  }

type PlannotateAnnotationReport
  {
    type: String
    sseqid: String
    startLocation: Integer
    endLocation: Integer
    strand: Integer
    percentIdentity: Float
    fullLengthOfFeatureInDb: Integer
    lengthOfFoundFeature: Integer
    percentMatchLength: Float
    fragment: Boolean
    database: String
    feature: String
    type: String
    description: String
    sequence: String
  }

type PolymeraseExtensionSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
  }

type Primer
  {
    id: Integer!
    type: String
    name: String
    databaseId: Integer
    sequence: String
  }

type RepositoryIdSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryId: String!
    repositoryName: RepositoryName!
  }

type RestrictionAndLigationSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    circular: Boolean
    restrictionEnzymes: [String]!
  }

type RestrictionEnzymeDigestionSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    leftEdge: RestrictionSequenceCut
    rightEdge: RestrictionSequenceCut
  }

type RestrictionSequenceCut
  {
    cutWatson: Integer!
    overhang: Integer!
    restrictionEnzyme: String!
  }

type ReverseComplementSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
  }

interface Sequence
  {
    id: Integer!
    type: String
  }

type SequenceCut
  {
    cutWatson: Integer!
    overhang: Integer!
  }

type SequenceCutSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    leftEdge: SequenceCut
    rightEdge: SequenceCut
  }

type SequencingFile
  {
    type: String
    sequenceId: Sequence!
    fileName: String!
    fileType: AssociatedFileType!
    alignment: [String]!
  }

type SEVASource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryName: RepositoryName!
    sequenceFileUrl: String!
    repositoryId: String!
  }

type SnapGenePlasmidSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryName: RepositoryName!
    repositoryId: String!
  }

interface Source
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
  }

type SourceInput
  {
    type: String
    sequence: Sequence!
  }

type TemplateSequence
  {
    id: Integer!
    type: String
    circular: Boolean
    primerDesign: String
  }

type TextFileSequence
  {
    id: Integer!
    type: String
    sequenceFileFormat: SequenceFileFormat!
    overhangCrick3prime: Integer
    overhangWatson3prime: Integer
    fileContent: String
  }

type UploadedFileSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    sequenceFileFormat: SequenceFileFormat!
    fileName: String
    indexInFile: Integer
    circularize: Boolean
    coordinates: SequenceRange
  }

type WekWikGeneIdSource
  {
    id: Integer!
    type: String
    outputName: String
    databaseId: Integer
    input: [SourceInput]
    repositoryName: RepositoryName!
    sequenceFileUrl: String
    repositoryId: String!
  }
