name: Build and Publish to PyPI

on:
  push:
    tags: [ "v*" ]  # 只在推送标签时触发发布
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Extract version
      id: version
      run: |
        # 从 __init__.py 提取版本号
        VERSION=$(grep '__version__' src/docpipe_ai/__init__.py | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"

    - name: Build package
      run: |
        # 清理旧的构建文件
        rm -rf dist/ build/ *.egg-info/

        # 构建包
        uv build --wheel --sdist

        # 显示构建的文件
        ls -la dist/

    - name: Check package
      run: |
        python -m pip install twine
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/docpipe-ai
    permissions:
      id-token: write  # 必需：受信任发布
      contents: read    # 必需：读取仓库内容

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Display package info
      run: |
        echo "Version: ${{ needs.build.outputs.version }}"
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        skip-existing: true