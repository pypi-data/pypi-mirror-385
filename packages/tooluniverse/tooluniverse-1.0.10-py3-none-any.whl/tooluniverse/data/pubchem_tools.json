[
  {
    "name": "PubChem_get_associated_patents_by_CID",
    "description": "Get a list of patents associated with a specific compound CID.",
    "parameter": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "integer",
          "description": "PubChem compound ID to query, e.g., 2244 (Aspirin)."
        }
      },
      "required": [
        "cid"
      ]
    },
    "fields": {
      "endpoint": "/data/compound/{cid}/JSON?heading=Patents",
      "return_format": "JSON",
      "use_pugview": true,
      "input_description": "Input is a PubChem compound ID (integer).",
      "output_description": "Returns a JSON object (PUG View) with top-level key \"Record\". Example (abridged):\n{\n  \"Record\": {\n    \"RecordType\": \"CID\",\n    \"RecordNumber\": 2244,\n    \"RecordTitle\": \"Aspirin\",\n    \"Section\": [\n      {\n        \"TOCHeading\": \"Patents\",\n        \"Description\": \"Patent applications/documents that mention this compound.\",\n        \"DisplayControls\": {\"ListType\": \"Columns\"},\n        \"Information\": [\n          {\n            \"ReferenceNumber\": 35,\n            \"Value\": {\n              \"StringWithMarkup\": [\n                {\"String\": \"US5972916\", \"Markup\": [{\"Start\": 0, \"Length\": 9, \"URL\": \"https://pubchem.ncbi.nlm.nih.gov/patent/US5972916\"}]},\n                {\"String\": \"US6015577\", \"Markup\": [{\"Start\": 0, \"Length\": 9, \"URL\": \"https://pubchem.ncbi.nlm.nih.gov/patent/US6015577\"}]},\n                ... (additional patent IDs)\n              ]\n            }\n          }\n        ],\n        \"Section\": [\n          {\"TOCHeading\": \"Depositor-Supplied Patent Identifiers\", \"Information\": [...]},\n          {\"TOCHeading\": \"WIPO PATENTSCOPE\", \"Information\": [...]},\n          {\"TOCHeading\": \"FDA Orange Book Patents\", \"Information\": [...]},\n          {\"TOCHeading\": \"Chemical Co-Occurrences in Patents\", \"Information\": [...]},\n          {\"TOCHeading\": \"Chemical-Disease Co-Occurrences in Patents\", \"Information\": [...]},\n          {\"TOCHeading\": \"Chemical-Gene Co-Occurrences in Patents\", \"Information\": [...]},\n          {\"TOCHeading\": \"Chemical-Organism Co-Occurrences in Patents\", \"Information\": [...]}\n        ]\n      }\n    ],\n    \"Reference\": [ {\"ReferenceNumber\": 35, \"SourceName\": \"DrugBank\", ...}, ... ]\n  }\n}\nKey points:\n- Record.Section[0] (TOCHeading \"Patents\") holds patent ID list in Information[0].Value.StringWithMarkup (each element has String patent identifier and Markup[0].URL link).\n- Nested Section array contains related subsections (e.g., WIPO, FDA Orange Book, co-occurrence panels) each with its own Information entries.\n- Co-occurrence panels often provide structured headers or external table references (e.g., ExternalTableName or StringWithMarkup rows) for downstream follow-up queries.\n- Reference array cites data sources (DrugBank, FDA, PubChem, WIPO, etc.).\nLLM can extract patent identifiers by iterating Record.Section[0].Information[0].Value.StringWithMarkup[*].String and their URLs from Markup[*].URL.",
      "property_list": []
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_get_compound_properties_by_CID",
    "description": "Get a set of specified molecular properties through CID (Compound ID), such as molecular weight, IUPAC name, Canonical SMILES.",
    "parameter": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "integer",
          "description": "PubChem compound ID to query, e.g., 2244 (Aspirin)."
        }
      },
      "required": [
        "cid"
      ]
    },
    "fields": {
      "endpoint": "/compound/cid/{cid}/property/{property_list}/JSON",
      "use_pugview": false,
      "input_description": "Input is a PubChem compound ID (integer).",
      "output_description": "Returns a JSON object with structure example:\n{\n  \"PropertyTable\": {\n    \"Properties\": [\n      {\n        \"CID\": 2244,\n        \"MolecularWeight\": 180.157,\n        \"IUPACName\": \"2-acetyloxybenzoic acid\",\n        \"CanonicalSMILES\": \"CC(=O)OC1=CC=CC=C1C(=O)O\",\n        ...\n      }\n    ]\n  }\n}\n\nWhere:\n- PropertyTable.Properties list: each element contains properties for that CID;\n- Property names determined by {property_list}, example here is [\"MolecularWeight\",\"IUPACName\",\"CanonicalSMILES\"].\nAfter calling, LLM can directly access these important molecular properties for subsequent chemical/pharmacological reasoning.",
      "property_list": [
        "MolecularWeight",
        "IUPACName",
        "CanonicalSMILES"
      ]
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_get_CID_by_compound_name",
    "description": "Retrieve corresponding CID list (IdentifierList) by chemical name.",
    "parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Chemical name (e.g., \"Aspirin\" or IUPAC name)."
        }
      },
      "required": [
        "name"
      ]
    },
    "fields": {
      "endpoint": "/compound/name/{name}/cids/JSON",
      "use_pugview": false,
      "input_description": "Input is a chemical name string (case and space sensitive), PubChem will perform fuzzy matching automatically.",
      "output_description": "Returns a JSON object with structure example:\n{\n  \"IdentifierList\": {\n    \"CID\": [2244, 11394, ...]\n  }\n}\n\nWhere:\n- IdentifierList.CID list: all CIDs matching the name. Usually the first one is the most common compound ID.\nAfter calling, LLM can obtain the PubChem ID list corresponding to the input chemical name, for further property or structure queries by CID.",
      "property_list": []
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_get_CID_by_SMILES",
    "description": "Retrieve corresponding CID list by SMILES string.",
    "parameter": {
      "type": "object",
      "properties": {
        "smiles": {
          "type": "string",
          "description": "SMILES expression (e.g., \"CC(=O)OC1=CC=CC=C1C(=O)O\" corresponds to aspirin)."
        }
      },
      "required": [
        "smiles"
      ]
    },
    "fields": {
      "endpoint": "/compound/smiles/{smiles}/cids/JSON",
      "use_pugview": false,
      "input_description": "Input is a valid SMILES string (need to ensure beforehand that this SMILES has corresponding records in PubChem database).",
      "output_description": "Returns a JSON object with structure example:\n{\n  \"IdentifierList\": {\n    \"CID\": [2244]\n  }\n}\n\nWhere: CID array contains all compound IDs that exactly match this SMILES. LLM can use this tool to map structure to CID.",
      "property_list": []
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_search_compounds_by_substructure",
    "description": "Search for all CIDs in PubChem that contain the given substructure (SMILES).",
    "parameter": {
      "type": "object",
      "properties": {
        "smiles": {
          "type": "string",
          "description": "SMILES of substructure (e.g., \"c1ccccc1\" corresponds to benzene ring)."
        }
      },
      "required": [
        "smiles"
      ]
    },
    "fields": {
      "endpoint": "/compound/fastsubstructure/smiles/{smiles}/cids/JSON",
      "use_pugview": false,
      "input_description": "Input is SMILES of target substructure, PubChem will find all compounds containing this substructure, returns no more than 10 CIDs (MaxRecords=10)",
      "output_description": "Returns a JSON object with structure example:\n{\n  \"IdentifierList\": {\n    \"CID\": [241, 1188, ...]\n  }\n}\n\nWhere: CID array contains all compound IDs in PubChem database that contain this substructure. LLM can use this to understand which molecules contain this group.",
      "property_list": []
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_search_compounds_by_similarity",
    "description": "Search by similarity (Tanimoto coefficient), returns CID list of compounds with similarity above threshold to given SMILES molecule, returns no more than 10 CIDs (MaxRecords=10)",
    "parameter": {
      "type": "object",
      "properties": {
        "smiles": {
          "type": "string",
          "description": "SMILES expression of target molecule."
        },
        "threshold": {
          "type": "number",
          "description": "Similarity threshold (between 0 and 1), e.g., 0.9 means 90% similarity.",
          "default": 0.9
        }
      },
      "required": [
        "smiles",
        "threshold"
      ]
    },
    "fields": {
      "endpoint": "/compound/fastsimilarity_2d/smiles/{smiles}/cids/JSON",
      "use_pugview": false,
      "input_description": "Input is:\n- smiles: SMILES for similarity comparison;\n- threshold: specify similarity threshold, PubChem will return all CIDs with similarity â‰¥ threshold.",
      "output_description": "Returns a JSON object with structure example:\n{\n  \"IdentifierList\": {\n    \"CID\": [2244, 2245, ...]\n  }\n}\n\nWhere: CID array contains compound IDs with similarity above specified threshold to target molecule. LLM can use this for chemical similarity analysis.",
      "property_list": []
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_get_compound_2D_image_by_CID",
    "description": "Get 2D structure image (PNG format) of compound by CID.",
    "parameter": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "integer",
          "description": "Compound ID to get image for, e.g., 2244."
        },
        "image_size": {
          "type": "string",
          "description": "Optional parameter, image size, like \"200x200\" (default).",
          "default": "200x200"
        }
      },
      "required": [
        "cid",
        "image_size"
      ]
    },
    "fields": {
      "endpoint": "/compound/cid/{cid}/PNG?image_size={image_size}",
      "use_pugview": false,
      "input_description": "Input is:\n- cid: compound ID;\n- image_size: desired image pixel size, format is \"widthxheight\" (e.g., \"150x150\").",
      "output_description": "Returns binary PNG image data, conforming to PNG file header format. LLM can save this binary as image file, or provide to downstream visualization."
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_get_compound_synonyms_by_CID",
    "description": "Get complete list of synonyms for compound by CID.",
    "parameter": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "integer",
          "description": "Compound ID to query synonyms for, e.g., 2244."
        }
      },
      "required": [
        "cid"
      ]
    },
    "fields": {
      "endpoint": "/compound/cid/{cid}/synonyms/JSON",
      "use_pugview": false,
      "input_description": "Input is compound ID (cid), PubChem will return all synonyms recorded in database for this compound.",
      "output_description": "Returns a JSON object with structure example:\n{\n  \"InformationList\": {\n    \"Information\": [\n      {\n        \"CID\": 2244,\n        \"Synonym\": [\"Aspirin\", \"Acetylsalicylic acid\", ...]\n      }\n    ]\n  }\n}\n\nWhere: InformationList.Information[0].Synonym is a string list containing all synonyms. LLM can use this to identify various chemical nomenclature."
    },
    "type": "PubChemRESTTool"
  },
  {
    "name": "PubChem_get_compound_xrefs_by_CID",
    "description": "Get external references (XRefs) for compound by CID, including links to ChEBI, DrugBank, KEGG, etc.",
    "parameter": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "integer",
          "description": "Compound ID to query external references for, e.g., 2244."
        },
        "xref_types": {
          "type": "array",
          "description": "List of external database types to query, e.g., [\"RegistryID\", \"RN\", \"PubMedID\"].",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "cid",
        "xref_types"
      ]
    },
    "fields": {
      "endpoint": "/compound/cid/{cid}/xrefs/{xref_types}/JSON",
      "use_pugview": false,
      "input_description": "Input is:\n- cid: compound ID;\n- xref_types: list of external database types to query.",
      "output_description": "Returns a JSON object with structure example:\n{\n  \"InformationList\": {\n    \"Information\": [\n      {\n        \"CID\": 2244,\n        \"XRef\": {\n          \"ChEBI\": \"CHEBI:15365\",\n          \"DrugBank\": \"DB00945\",\n          \"KEGG\": \"D00134\",\n          ...\n        }\n      }\n    ]\n  }\n}\n\nWhere: In XRef dictionary, keys are external resource names, values are corresponding resource IDs. LLM can use this for cross-database linking and knowledge integration."
    },
    "type": "PubChemRESTTool"
  }
]
