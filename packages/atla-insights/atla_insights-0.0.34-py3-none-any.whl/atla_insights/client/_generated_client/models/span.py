# coding: utf-8

"""
    Atla Insights API

    Development documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from atla_insights.client._generated_client.models.annotation import Annotation


class Span(BaseModel):
    """
    Span
    """ # noqa: E501
    id: StrictStr
    trace_id: StrictStr = Field(alias="traceId")
    parent_span_id: Optional[StrictStr] = Field(alias="parentSpanId")
    span_name: Optional[StrictStr] = Field(alias="spanName")
    start_timestamp: StrictStr = Field(alias="startTimestamp")
    end_timestamp: StrictStr = Field(alias="endTimestamp")
    is_exception: Optional[StrictBool] = Field(alias="isException")
    otel_events: List[Any] = Field(alias="otelEvents")
    annotations: Optional[List[Annotation]] = None
    attributes: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "traceId", "parentSpanId", "spanName", "startTimestamp", "endTimestamp", "isException", "otelEvents", "annotations", "attributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Span from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # set to None if parent_span_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_span_id is None and "parent_span_id" in self.model_fields_set:
            _dict['parentSpanId'] = None

        # set to None if span_name (nullable) is None
        # and model_fields_set contains the field
        if self.span_name is None and "span_name" in self.model_fields_set:
            _dict['spanName'] = None

        # set to None if is_exception (nullable) is None
        # and model_fields_set contains the field
        if self.is_exception is None and "is_exception" in self.model_fields_set:
            _dict['isException'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Span from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "traceId": obj.get("traceId"),
            "parentSpanId": obj.get("parentSpanId"),
            "spanName": obj.get("spanName"),
            "startTimestamp": obj.get("startTimestamp"),
            "endTimestamp": obj.get("endTimestamp"),
            "isException": obj.get("isException"),
            "otelEvents": obj.get("otelEvents"),
            "annotations": [Annotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "attributes": obj.get("attributes"),
        })
        return _obj
