# coding: utf-8

"""
    Atla Insights API

    Development documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from atla_insights.client._generated_client.models.custom_metric_value import CustomMetricValue
from atla_insights.client._generated_client.models.span import Span
from typing import Optional, Set
from typing_extensions import Self

class TraceWithDetails(BaseModel):
    """
    TraceWithDetails
    """ # noqa: E501
    id: StrictStr
    environment: StrictStr
    is_success: Optional[StrictBool] = Field(alias="isSuccess")
    is_completed: StrictBool = Field(alias="isCompleted")
    metadata: Optional[Dict[str, StrictStr]] = None
    step_count: StrictInt = Field(alias="stepCount")
    started_at: StrictStr = Field(alias="startedAt")
    ended_at: StrictStr = Field(alias="endedAt")
    duration_seconds: Union[StrictFloat, StrictInt] = Field(alias="durationSeconds")
    ingested_at: StrictStr = Field(alias="ingestedAt")
    spans: Optional[List[Span]] = None
    custom_metric_values: Optional[List[CustomMetricValue]] = Field(default=None, alias="customMetricValues")
    __properties: ClassVar[List[str]] = ["id", "environment", "isSuccess", "isCompleted", "metadata", "stepCount", "startedAt", "endedAt", "durationSeconds", "ingestedAt", "spans", "customMetricValues"]

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PROD', 'DEV']):
            raise ValueError("must be one of enum values ('PROD', 'DEV')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TraceWithDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in spans (list)
        _items = []
        if self.spans:
            for _item_spans in self.spans:
                if _item_spans:
                    _items.append(_item_spans.to_dict())
            _dict['spans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_metric_values (list)
        _items = []
        if self.custom_metric_values:
            for _item_custom_metric_values in self.custom_metric_values:
                if _item_custom_metric_values:
                    _items.append(_item_custom_metric_values.to_dict())
            _dict['customMetricValues'] = _items
        # set to None if is_success (nullable) is None
        # and model_fields_set contains the field
        if self.is_success is None and "is_success" in self.model_fields_set:
            _dict['isSuccess'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TraceWithDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "environment": obj.get("environment"),
            "isSuccess": obj.get("isSuccess"),
            "isCompleted": obj.get("isCompleted"),
            "metadata": obj.get("metadata"),
            "stepCount": obj.get("stepCount"),
            "startedAt": obj.get("startedAt"),
            "endedAt": obj.get("endedAt"),
            "durationSeconds": obj.get("durationSeconds"),
            "ingestedAt": obj.get("ingestedAt"),
            "spans": [Span.from_dict(_item) for _item in obj["spans"]] if obj.get("spans") is not None else None,
            "customMetricValues": [CustomMetricValue.from_dict(_item) for _item in obj["customMetricValues"]] if obj.get("customMetricValues") is not None else None
        })
        return _obj


