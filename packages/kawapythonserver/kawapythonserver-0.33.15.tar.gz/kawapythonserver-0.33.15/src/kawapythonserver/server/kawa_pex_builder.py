import datetime
import hashlib
import os
import subprocess
import time

from .kawa_log_manager import get_kawa_logger
from .. import min_kywy_version


class KawaPexBuilder:
    PEX_BUILT_TIMEOUT = 10 * 60
    record_of_pex_being_built = {}

    def __init__(self, pex_executable_path: str, reqs_file_path: str, pex_path: str):
        self.pex_executable_path = pex_executable_path
        self.reqs_file_path = reqs_file_path
        self.pex_path = pex_path

    def lock_file(self, key):
        return f'{self.pex_path}/{key}.lock'

    def release_lock(self, key):
        if os.path.exists(self.lock_file(key)):
            os.remove(self.lock_file(key))

    def record_pex_build_start(self, key: str):
        with open(self.lock_file(key), "w") as f:
            f.write(str(time.time()))

    def wait_for_pex_build_to_finish_or_timeout(self, key: str):
        if not os.path.exists(self.lock_file(key)):
            return False
        seconds_since_lock_created = time.time() - os.path.getmtime(self.lock_file(key))
        if seconds_since_lock_created > self.PEX_BUILT_TIMEOUT:
            get_kawa_logger().info(f'The previous pex built timed out, we will start a new one')
            self.record_pex_build_start(key)
            return False
        return True

    @staticmethod
    def sha256sum(filename):
        h = hashlib.sha256()
        b = bytearray(128 * 1024)
        mv = memoryview(b)
        with open(filename, 'rb', buffering=0) as f:
            while n := f.readinto(mv):
                h.update(mv[:n])
        return h.hexdigest()

    def build_pex_if_necessary(self, job_id) -> str:
        get_kawa_logger().info(f'üèóÔ∏è  - Start pex generation for jobId: {job_id}')
        if not os.path.exists(self.reqs_file_path):
            key = f'0000_{min_kywy_version}'
            reqs_file = []
        else:
            reqs_file = ['-r', self.reqs_file_path]
            key = f'{self.sha256sum(self.reqs_file_path)}_{min_kywy_version}'

        current_pex_path = f'{self.pex_path}/{key}'
        pex_file_path = f'{current_pex_path}/main.pex'

        if not os.path.exists(current_pex_path):
            os.makedirs(current_pex_path)

        if os.path.exists(pex_file_path):
            get_kawa_logger().info(
                f'üèóÔ∏è  - Pex file was already generated for this set of requirements for jobId: {job_id} ({pex_file_path})')
            return pex_file_path

        while self.wait_for_pex_build_to_finish_or_timeout(key):
            get_kawa_logger().info(f'üèóÔ∏è  - A pex built is currently running for the key: {key} for jobId: {job_id}')
            time.sleep(2)

        if os.path.exists(pex_file_path):
            get_kawa_logger().info(f'üèóÔ∏è  - Pex file was correctly generated by another process for '
                                   f'this set of requirements for jobId: {job_id}')
            return pex_file_path

        error = ''
        try:
            get_kawa_logger().info('üèóÔ∏è Building pex start')
            self.record_pex_build_start(key)

            # If on a beta dep, force the exact version
            kywy_dep = f'kywy=={min_kywy_version}' if 'b' in min_kywy_version else f'kywy>={min_kywy_version}'

            reqs_file.append(kywy_dep)

            pip_version = os.getenv('KW_PEX_PIP_VERSION', 'latest')
            use_pip_config = os.getenv('KW_PEX_USE_PIP_CONFIG', False)
            pex = [self.pex_executable_path, *reqs_file, '--pip-version', pip_version, '-o', pex_file_path, '--venv']

            # pex = [self.pex_executable_path, *reqs_file, '--pip-version', pip_version, '-o', pex_file_path, '-f', '/Users/gregory/dev/kawa/kywy/dist']
            # can use this pex builder to use a local build of kywy

            if use_pip_config:
                get_kawa_logger().info('KW_PEX_USE_PIP_CONFIG is set, will use pip configuration when building pex')
                pex.append('--use-pip-config')

            get_kawa_logger().info(f'üèóÔ∏è Pex command line is: {" ".join(map(str, pex))}')

            subprocess.run(pex,
                           timeout=KawaPexBuilder.PEX_BUILT_TIMEOUT,
                           check=True,
                           capture_output=True,
                           env={**os.environ, 'PEX_VERBOSE': '3'})

            get_kawa_logger().info(f'üèóÔ∏è Building pex is done for jobId: {job_id}')
        except FileNotFoundError as exc:
            error = f'Building pex failed because the executable could not be found.\n{exc}'
        except subprocess.CalledProcessError as exc:
            error = f'Building pex failed with error: \n {exc.stderr.decode("unicode_escape")}'
        except subprocess.TimeoutExpired as exc:
            error = 'Building pex timed out'
        finally:
            self.release_lock(key)
            if error:
                get_kawa_logger().error(error)
                raise Exception(error)
        return pex_file_path
