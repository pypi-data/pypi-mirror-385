import argparse
import shlex
import sys
from typing import Callable, Literal, Dict

from colorama import Style, Fore

from rushlib.args import parse_args
from rushlib.func import smart_call

from rushlib.output import print_red
from rushclis.command import Command
from rushclis.help import cmd_help


class RushCli:
    @staticmethod
    def default_func(args):
        ...

    def __init__(self, name: str = "clitool", version: str = "1.0.0", description: str = None, epilog: str = None,
                 is_add_default: bool = True, show_text: bool = True):
        """
        :param name: ÂëΩ‰ª§Ë°åÊòæÁ§∫ÁöÑÂêçÁß∞
        :param version: ÁâàÊú¨Âè∑
        :param description: ‰ªãÁªç
        :param epilog: ‰æãÂ≠ê
        """
        self.name = name
        self.version = version
        self.parser = Command(
            prog=name,
            description=description,
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=epilog,
            add_help=False,
            print_error=True
        )

        self._subparsers = None
        self.subcommands: Dict[str, "RushCli"] = {}  # Â≠òÂÇ®Â≠êÂëΩ‰ª§
        self.command_dest = f"command_{id(self)}"
        self.parent = None

        self.args: argparse.Namespace | list = []
        self.main_func = self.default_func
        self.extra_args = []
        self.extra_kwargs = {}

        self.cmd_commands = {}

        self.add_version = True
        self.show_text = show_text
        self.exit = False

        if is_add_default:
            self._add_default()

    def _add_default(self):
        self.parser.add_argument('--help', '-h', action='help',
                                 help='‚ÑπÔ∏è ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ', default=argparse.SUPPRESS)
        if self.add_version:
            self.parser.add_argument('--version', '-v', action='version',
                                     help='‚ÑπÔ∏è ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ', version=f"{self.name} {self.version}")

        self.add_cmd_command("help", cmd_help)

    def set_main_func(self, func: Callable, *args, **kwargs):
        """
        ËÆæÁΩÆÊ≠§ÂëΩ‰ª§Ëß¶ÂèëÂêéÁöÑ‰∫ã‰ª∂
        :param func: Ëß¶ÂèëÂáΩÊï∞ÔºåÈªòËÆ§‰º†ÂÖ•argsÂèÇÊï∞ÔºåÂ¶ÇÊûúÈúÄË¶ÅÈ¢ùÂ§ñÂèÇÊï∞ÔºåÂàôÂèÇÊï∞ÊòØÂøÖÈ°ªÁöÑ(ÊàñÈ¢ùÂ§ñÂèÇÊï∞‰ΩøÁî®kwargs).
        :param args: È¢ùÂ§ñÂèÇÊï∞.
        :param kwargs: È¢ùÂ§ñÂèÇÊï∞.
        """
        self.main_func = func
        self.extra_args = args
        self.extra_kwargs = kwargs

    def set_sub_main_func(self, _id: str, func: Callable, *args, **kwargs):
        """
        ËÆæÁΩÆÂ≠êÂëΩ‰ª§ÁöÑ‰∏ªÂáΩÊï∞
        :param _id: Â≠êÂëΩ‰ª§ÂêçÁß∞
        :param func: Ëß¶ÂèëÂáΩÊï∞ÔºåÈªòËÆ§‰º†ÂÖ•argsÂèÇÊï∞ÔºåÂ¶ÇÊûúÈúÄË¶ÅÈ¢ùÂ§ñÂèÇÊï∞ÔºåÂàôÂèÇÊï∞ÊòØÂøÖÈ°ªÁöÑ(ÊàñÈ¢ùÂ§ñÂèÇÊï∞‰ΩøÁî®kwargs).
        :param args: È¢ùÂ§ñÂèÇÊï∞.
        :param kwargs: È¢ùÂ§ñÂèÇÊï∞.
        """
        self.get(_id).set_main_func(func, *args, **kwargs)

    def add_argument(self, name: str, flag=None, action: Literal["append", "store_true"] = None, _help=None,
                     default=None, *_args, **_kwargs):
        """
        Ê∑ªÂä†arg
        :param name: argÁöÑÂêçÁß∞„ÄÇ‰∏∫Áõ¥Êé•ÂêçÁß∞Êàñ--ÂêçÁß∞(Â¶ÇÊûúÊ∑ªÂä†‰∫ÜÂ≠êÂëΩ‰ª§ÔºåÈÇ£‰πà‰∏çËÉΩ‰ΩøÁî®Áõ¥Êé•ÂêçÁß∞)
        :param flag: argÁöÑÁÆÄÁß∞ÔºåÂè™ËÉΩÂú®name‰∏∫--ÂêçÁß∞Êó∂‰ΩøÁî®ÔºåÊ†ºÂºè‰∏∫-Âçï‰∏™Â≠óÊØç
        :param action: argËæìÂÖ•ÁöÑÁ±ªÂûãÔºåÈªòËÆ§‰∏∫strÔºåÂèØÁî®ÂÄºÊúâ[append, store_true]
        :param _help: ÊèêÁ§∫ÂëΩ‰ª§
        :param default: ÈªòËÆ§ÂÄº
        :param _args: ÂÖ∂‰ªñÂèÇÊï∞
        :param _kwargs: ÂÖ∂‰ªñÂèÇÊï∞
        """
        args = []
        kwargs = {}

        args.append(name)
        if flag:
            args.append(flag)

        if default is not None:
            kwargs["default"] = default

        if action:
            kwargs["action"] = action

        if _help:
            kwargs["help"] = _help

        args = [
            *args,
            *_args
        ]

        kwargs = {
            **kwargs,
            **_kwargs
        }

        self.parser.add_argument(
            *args,
            **kwargs
        )

    def add_sub_argument(self, _id: str, name: str, flag=None, action: Literal["append", "store_true"] = None,
                         _help=None, default=None, *_args, **_kwargs):
        """
        Ê∑ªÂä†Â≠êÂëΩ‰ª§ÁöÑarg
        :param _id: Â≠êÂëΩ‰ª§ÂêçÁß∞
        :param name: argÁöÑÂêçÁß∞„ÄÇ‰∏∫Áõ¥Êé•ÂêçÁß∞Êàñ--ÂêçÁß∞(Â¶ÇÊûúÊ∑ªÂä†‰∫ÜÂ≠êÂëΩ‰ª§ÔºåÈÇ£‰πà‰∏çËÉΩ‰ΩøÁî®Áõ¥Êé•ÂêçÁß∞)
        :param flag: argÁöÑÁÆÄÁß∞ÔºåÂè™ËÉΩÂú®name‰∏∫--ÂêçÁß∞Êó∂‰ΩøÁî®ÔºåÊ†ºÂºè‰∏∫-Âçï‰∏™Â≠óÊØç
        :param action: argËæìÂÖ•ÁöÑÁ±ªÂûãÔºåÈªòËÆ§‰∏∫strÔºåÂèØÁî®ÂÄºÊúâ[append, store_true]
        :param _help: ÊèêÁ§∫ÂëΩ‰ª§
        :param default: ÈªòËÆ§ÂÄº
        :param _args: ÂÖ∂‰ªñÂèÇÊï∞
        :param _kwargs: ÂÖ∂‰ªñÂèÇÊï∞
        """
        self.get(_id).add_argument(name, flag, action, _help=_help, default=default, *_args, **_kwargs)

    def add_command(self, name: str, _help: str = None):
        """
        Ê∑ªÂä†Â≠êÂëΩ‰ª§
        :param name: Â≠êÂëΩ‰ª§ÂêçÁß∞
        :param _help: ÊèêÁ§∫‰ø°ÊÅØ
        """
        if not self._subparsers:
            self._set_subparsers()
        _command = RushCli(name)
        parser = self._subparsers.add_parser(name, help=_help)
        _command.parser = parser
        _command.parent = self
        _command.add_version = False
        self.subcommands[name] = _command

    def add_sub_command(self, _id: str, name: str, _help: str = None):
        """
        Ê∑ªÂä†Â≠êÂëΩ‰ª§ÁöÑÂ≠êÂëΩ‰ª§
        :param _id: Â≠êÂëΩ‰ª§ÂêçÁß∞
        :param name: Â≠êÂëΩ‰ª§ÂêçÁß∞
        :param _help: ÊèêÁ§∫‰ø°ÊÅØ
        """
        self.get(_id).add_command(name, _help)

    def add_cmd_command(self, name, func):
        if name in self.cmd_commands.keys():
            raise RuntimeError(f"Command {name} already registered")

        self.cmd_commands[name] = {}

        self.cmd_commands[name]["func"] = func

    def get(self, name) -> "RushCli":
        """
        Ëé∑ÂæóÂ≠êÂëΩ‰ª§
        :param name: Â≠êÂëΩ‰ª§ÂêçÁß∞
        :return: Â≠êÂëΩ‰ª§
        """
        return self.subcommands.get(name, None)

    def _set_subparsers(self):
        if self._subparsers is None:
            self._subparsers = self.parser.add_subparsers(
                title='üìã ÂèØÁî®ÂëΩ‰ª§',
                dest=self.command_dest,  # ‰ΩøÁî®ÂîØ‰∏ÄÁöÑdestÊ†áËØÜÁ¨¶
                help='üëâ ÈÄâÊã©Ë¶ÅÊâßË°åÁöÑÊìç‰Ωú'
            )
        return self._subparsers

    def _run(self):
        args = getattr(self.parent, "args", None)
        if args:
            self.args = args[1:]

        parsed = parse_args(self.args, self.parser)

        _command = getattr(parsed, self.command_dest, None)
        if _command:
            self.subcommands[_command]._run()
        else:
            smart_call(self.main_func, parsed, *self.extra_args, **self.extra_kwargs)

    def _cmd_command(self):
        if not self.args:
            return False

        _command = self.args[0]

        match _command:
            case "exit":
                self.exit = True
                return True

        for c in self.cmd_commands.keys():
            if c == _command:
                smart_call(self.cmd_commands[c]["func"], self)
                return True

        return False

    def enter_event(self):
        pass

    def exit_event(self):
        pass

    @property
    def print_value(self):
        return ''

    def _run_cmd(self):
        self.enter_event()

        if self.show_text:
            print(f"{self.name.capitalize()} {self.version}")
            print(f'Type {", ".join([f'"{i}"' for i in self.cmd_commands.keys()])} for more information.')
            print()

        while True:
            if self.exit:
                self.exit_event()
                break

            try:
                print(f"{self.print_value}{Fore.MAGENTA}>>> {Style.RESET_ALL}", end="")
                self.args = shlex.split(input())
                print(Style.RESET_ALL, end="")
                if self._cmd_command(): continue
                self._run()
            except Exception as e:
                print_red(f"{e}")

    def run(self):
        """
        ÂºÄÂßãËøêË°å
        """
        self.args = sys.argv[1:]

        if not self.args:
            self._run_cmd()
            return
        self._run()
