name: Publish Python Package

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  release:
    types: [created, published] # For future automatic releases
  workflow_dispatch:
    inputs:
      tag:
        description: 'The git tag to build and publish (e.g., v0.1.3)'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For release events, github.ref is the tag.
          # For manual runs, we use the tag provided in the input.
          ref: ${{ github.event_name == 'release' && github.ref_name || github.event.inputs.tag }}
          fetch-depth: 0 # This ensures all tags and history are fetched
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools_scm

      - name: Get version from tag
        id: get_version
        run: |
          # Get the tag from the event trigger (e.g., 'v0.1.3')
          TAG=${{ github.event_name == 'release' && github.ref_name || github.event.inputs.tag }}
          # Strip 'v' from the tag to get the version number (e.g., '0.1.3')
          echo "VERSION=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Get tag annotation
        id: get_tag_message
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          # Get the tag annotation message
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
          # If no annotation, use a default message
          if [ -z "$TAG_MESSAGE" ]; then
            TAG_MESSAGE="Release ${{ github.ref_name }}"
          fi
          # Save to output (escape newlines for GitHub Actions)
          echo "TAG_MESSAGE<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build package
        env:
          # Force setuptools_scm to use the version from the tag
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: python -m build

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload --skip-existing dist/*

      - name: Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            ${{ steps.get_tag_message.outputs.TAG_MESSAGE }}
            
            ---
            
            ### ðŸ“¦ Installation
            ```bash
            pip install --upgrade agente==${{ steps.get_version.outputs.VERSION }}
            ```
            
            ### ðŸ”— Links
            - [PyPI Package](https://pypi.org/project/agente/${{ steps.get_version.outputs.VERSION }}/)
            - [Full Changelog](https://github.com/miguelwon/agente/compare/v0.2.2...${{ github.ref_name }})
          draft: false
          prerelease: false
          generate_release_notes: true
