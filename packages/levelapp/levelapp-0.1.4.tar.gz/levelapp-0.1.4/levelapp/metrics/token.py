"""levelapp/metrics/token.py"""
from rapidfuzz import fuzz

from typing import Dict, Any

from levelapp.core.base import BaseMetric
from levelapp.aspects.monitor import MonitoringAspect, MetricType


class WeightedRatio(BaseMetric):
    """A metric that calculates a weighted ratio based on the other ratio algorithms"""

    @MonitoringAspect.monitor(name="weighted-ratio", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the token-based metric between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the score and metadata.
        """
        score = fuzz.WRatio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score / 100,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


class TokenSetRatio(BaseMetric):
    """
    A metric that compares the words in the strings based
    on unique and common words between them using fuzz.ratio.
    """

    @MonitoringAspect.monitor(name="token-set-ratio", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the token-based metric between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the score and metadata.
        """
        score = fuzz.token_set_ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score / 100,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


class TokenSortRatio(BaseMetric):
    """A metric that sorts the words in the strings and calculates the fuzz.ratio between them."""

    @MonitoringAspect.monitor(name="token-sort-ratio", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the token-based metric between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the score and metadata.
        """
        score = fuzz.token_sort_ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score / 100,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }
