"""levelapp/metrics/fuzzy.py"""
from rapidfuzz import fuzz

from typing import Dict, Any

from levelapp.core.base import BaseMetric
from levelapp.aspects.monitor import MonitoringAspect, MetricType


class FuzzyRatio(BaseMetric):
    """A metric that computes the fuzzy ratio between two texts."""

    @MonitoringAspect.monitor(name="fuzzy-ratio", category=MetricType.API_CALL, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the fuzzy ratio between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the fuzzy ratio score and metadata.
        """
        score = fuzz.ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        # TODO-0: Return results as Pydantic model.
        return {
            "score": score / 100,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


class PartialRatio(BaseMetric):
    """
    A metric that computes the partial fuzzy ratio between two texts.
    This is useful for evaluating how similar two pieces of text are,
    allowing for partial matches.
    """

    @MonitoringAspect.monitor(name="partial-ratio", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the partial fuzzy ratio between the generated text and the reference text.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the partial fuzzy ratio.
        """
        score = fuzz.partial_ratio(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score / 100,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


FUZZY_METRICS = {
    "fuzzy_ratio": FuzzyRatio,
    "partial_ratio": PartialRatio,
}
