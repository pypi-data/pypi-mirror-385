"""levelapp/metrics/exact.py"""
from typing import Dict, Any

from rapidfuzz import distance

from levelapp.core.base import BaseMetric
from levelapp.aspects.monitor import MonitoringAspect, MetricType


class ExactMatch(BaseMetric):
    """Binary exact match comparison (1.0 for exact match, 0.0 otherwise)"""

    @MonitoringAspect.monitor(name="exact_match", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """"
        Compute the exact match score between generated and reference strings.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the exact match score and metadata.
        """
        self._validate_inputs(generated=generated, reference=reference)

        score = distance.Levenshtein.normalized_similarity(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=1.0
        )

        return {
            "score": score,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


class Levenshtein(BaseMetric):
    """Levenshtein edit distance (number of insertions, deletions, substitutions)"""

    @MonitoringAspect.monitor(name="levenshtein", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the Levenshtein distance score between generated and reference strings.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the Levenshtein score and metadata.
        """
        self._validate_inputs(generated=generated, reference=reference)

        score = distance.Levenshtein.normalized_similarity(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff or 1.0
        )

        return {
            "score": score,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


class JaroWinkler(BaseMetric):
    """Jaro-Winkler distance (similarity measure for strings)"""

    @MonitoringAspect.monitor(name="jaro-winkler", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the Jaro-Winkler distance score between generated and reference strings.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the Jaro-Winkler score and metadata.
        """
        self._validate_inputs(generated=generated, reference=reference)

        score = distance.JaroWinkler.normalized_similarity(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


class Hamming(BaseMetric):
    """Hamming distance (character substitutions only, for equal-length strings)"""

    @MonitoringAspect.monitor(name="hamming", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the Hamming distance score between generated and reference strings.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the Hamming score and metadata.
        """
        self._validate_inputs(generated=generated, reference=reference)

        score = distance.Hamming.normalized_similarity(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


class PrefixMatch(BaseMetric):
    """Prefix similarity (1.0 if generated starts with reference)"""

    @MonitoringAspect.monitor(name="prefix-match", category=MetricType.SCORING, cached=True, enable_timing=True)
    def compute(self, generated: str, reference: str) -> Dict[str, Any]:
        """
        Compute the Prefix similarity score between generated and reference strings.

        Args:
            generated (str): The text generated by the agent.
            reference (str): The expected reference text.

        Returns:
            Dict[str, Any]: A dictionary containing the Prefix similarity and metadata.
        """
        self._validate_inputs(generated=generated, reference=reference)

        score = distance.Prefix.normalized_similarity(
            s1=generated,
            s2=reference,
            processor=self.processor,
            score_cutoff=self.score_cutoff
        )

        return {
            "score": score,
            "metadata": self._build_metadata(
                generated_length=len(generated),
                reference_length=len(reference)
            )
        }


# Registry of all exact metrics
EXACT_METRICS = {
    "exact_match": ExactMatch,
    "levenshtein": Levenshtein,
    "jaro_winkler": JaroWinkler,
    "hamming": Hamming,
    "prefix_match": PrefixMatch
}
