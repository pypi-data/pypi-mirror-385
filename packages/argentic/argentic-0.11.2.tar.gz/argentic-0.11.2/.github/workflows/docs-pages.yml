name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read  # To checkout the repository
  pages: write    # To deploy to GitHub Pages
  id-token: write # To enable OIDC token authentication for GitHub Pages

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install documentation dependencies
      run: |
        uv pip install --system -e ".[docs]"
        
    - name: Prepare docs source
      run: |
        set -x # Print each command before executing
        mkdir -p docs/assets
        cp assets/logo.jpg docs/assets/logo.jpg # For theme and for the final path in docs/index.md
        
        # Find all README.md files, excluding .git, .github, docs, and virtual environment directories
        find . \( -path ./docs -o -path ./.git -o -path ./.github -o -path ./.venv -o -path ./venv \) -prune -o \( -name "README.md" -type f -print \) | while read -r file; do
          if [ -d "$file" ]; then
            echo "Warning: Skipping directory found by README.md find: $file" >&2
            continue
          fi
          # Create a relative path for the destination in docs/
          # Example: ./src/moduleA/README.md -> docs/src/moduleA/index.md
          dest_dir="docs/$(dirname "${file#./}")"
          mkdir -p "$dest_dir"
          cp "$file" "$dest_dir/index.md"
        done
        
        # Find all other .md files (excluding README.md as they are handled above, and excluding specified directories)
        # and copy them, maintaining their original names and directory structure within docs/
        find . \( -path ./docs -o -path ./.git -o -path ./.github -o -path ./.venv -o -path ./venv \) -prune -o \( -name "*.md" -not -name "README.md" -type f -print \) | while read -r file; do
          dest_path="docs/$(dirname "${file#./}")/$(basename "$file")"
          mkdir -p "$(dirname "$dest_path")"
          cp "$file" "$dest_path"
        done
        
    - name: Build MkDocs documentation
      env:
        PYTHONPATH: "./src/argentic" # Add src/argentic to Python's search path for mkdocstrings
      run: |
        echo "PYTHONPATH is: $PYTHONPATH"
        uv run mkdocs build --verbose --config-file docs/mkdocs.yml --site-dir _site
        
    - name: Debug _site location
      run: |
        echo "--- Current directory: $(pwd)"
        echo "--- Listing root directory (GITHUB_WORKSPACE):"
        ls -la
        echo "--- Listing docs/ directory:"
        ls -la docs/
        if [ -d "_site" ]; then
          echo "--- _site directory FOUND at GITHUB_WORKSPACE/_site. Contents:"
          ls -la _site
        else
          echo "--- _site directory NOT FOUND at GITHUB_WORKSPACE/_site."
        fi
        if [ -d "docs/_site" ]; then
          echo "--- docs/_site directory FOUND. Contents:"
          ls -la docs/_site
        else
          echo "--- docs/_site directory NOT FOUND."
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'docs/_site' # Upload the docs/_site directory
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 
