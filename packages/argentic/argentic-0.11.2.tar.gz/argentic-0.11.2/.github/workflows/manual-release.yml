---
name: Manual Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        run: |
          uv run cz bump --increment ${{ github.event.inputs.bump_type }} --changelog --yes

      - name: Get new version
        id: version
        run: |
          VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        run: |
          rm -rf dist build *.egg-info
          uv run python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv run python -m twine upload dist/* --non-interactive

      - name: Push changes
        run: |
          git push --follow-tags

      - name: Extract release notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          awk "/^## $VERSION/{flag=1; next} /^## [0-9]/{flag=0} flag" CHANGELOG.md > release_notes.md

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes-file release_notes.md

      - name: Output success
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "‚úÖ Release $VERSION completed!"
          echo "üåê PyPI: https://pypi.org/project/argentic/$VERSION/"

