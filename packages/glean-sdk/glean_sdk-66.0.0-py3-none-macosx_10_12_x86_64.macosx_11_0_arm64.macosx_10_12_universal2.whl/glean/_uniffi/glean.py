

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_glean_core_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_glean_core_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_glean_core_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("glean_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 29
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_glean_core_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_glean_core_checksum_func_glean_apply_server_knobs_config() != 60669:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_enable_logging() != 23531:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_enable_logging_to_fd() != 3838:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_get_debug_view_tag() != 53587:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_get_log_pings() != 20267:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_get_registered_ping_names() != 28073:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_get_upload_task() != 14859:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_handle_client_active() != 15870:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_handle_client_inactive() != 53329:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_initialize() != 28494:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_initialize_for_subprocess() != 51463:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_persist_ping_lifetime_data() != 63318:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_process_ping_upload_response() != 40546:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_register_event_listener() != 53202:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_debug_view_tag() != 40313:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_dirty_flag() != 30094:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_experiment_active() != 34395:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_experiment_inactive() != 10322:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_experimentation_id() != 36389:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_log_pings() != 11842:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_source_tags() != 52804:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_test_mode() != 4528:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_set_upload_enabled() != 20119:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_shutdown() != 1598:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name() != 23631:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name_sync() != 39533:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_destroy_glean() != 10441:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_get_attribution() != 56753:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_get_distribution() != 37826:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_get_experiment_data() != 14791:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_test_get_experimentation_id() != 22050:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_unregister_event_listener() != 22885:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_update_attribution() != 25183:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_func_glean_update_distribution() != 64281:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_booleanmetric_set() != 50883:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_booleanmetric_test_get_num_recorded_errors() != 38515:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_booleanmetric_test_get_value() != 7431:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_countermetric_add() != 22929:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_countermetric_test_get_num_recorded_errors() != 39931:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_countermetric_test_get_value() != 58948:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_samples() != 53082:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_single_sample() != 35720:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_num_recorded_errors() != 38565:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_value() != 37615:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_set() != 32949:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_test_get_num_recorded_errors() != 48816:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value() != 44669:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value_as_string() != 36662:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_denominatormetric_add() != 6770:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_denominatormetric_test_get_num_recorded_errors() != 31850:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_denominatormetric_test_get_value() != 52463:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_duallabeledcountermetric_get() != 63792:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_duallabeledcountermetric_test_get_num_recorded_errors() != 51617:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_duallabeledcountermetric_test_get_value() != 51155:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_eventmetric_record() != 47767:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_eventmetric_test_get_num_recorded_errors() != 33068:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_eventmetric_test_get_value() != 35467:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledboolean_get() != 56079:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledboolean_test_get_num_recorded_errors() != 19273:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledboolean_test_get_value() != 11029:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledcounter_get() != 3023:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledcounter_test_get_num_recorded_errors() != 15148:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledcounter_test_get_value() != 29511:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledquantity_get() != 25364:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledquantity_test_get_num_recorded_errors() != 15037:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledquantity_test_get_value() != 39120:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledstring_get() != 31395:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledstring_test_get_num_recorded_errors() != 45887:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_labeledstring_test_get_value() != 63327:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate() != 58021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate_samples() != 10336:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_num_recorded_errors() != 39138:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_value() != 17749:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_numeratormetric_add_to_numerator() != 32381:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_numeratormetric_test_get_num_recorded_errors() != 11456:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_numeratormetric_test_get_value() != 19373:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_objectmetric_record_schema_error() != 17900:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_objectmetric_set_string() != 64227:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_objectmetric_test_get_num_recorded_errors() != 38963:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_objectmetric_test_get_value() != 39743:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_pingtype_set_enabled() != 51804:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_pingtype_submit() != 47957:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_quantitymetric_set() != 44859:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_quantitymetric_test_get_num_recorded_errors() != 58789:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_quantitymetric_test_get_value() != 65232:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_add_to_denominator() != 40751:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_add_to_numerator() != 28742:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_test_get_num_recorded_errors() != 34026:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ratemetric_test_get_value() != 52482:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_add() != 48169:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_set() != 59230:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_num_recorded_errors() != 35822:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_value() != 26618:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringmetric_set() != 8577:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringmetric_test_get_num_recorded_errors() != 21908:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_stringmetric_test_get_value() != 35393:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_textmetric_set() != 47464:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_textmetric_test_get_num_recorded_errors() != 34916:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_textmetric_test_get_value() != 44213:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_cancel() != 24521:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_set_raw_nanos() != 19360:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_start() != 34133:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_stop() != 19007:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_test_get_num_recorded_errors() != 32350:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timespanmetric_test_get_value() != 30315:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_samples() != 27974:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_single_sample() != 20027:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_cancel() != 54798:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_start() != 52131:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_stop_and_accumulate() != 40025:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_num_recorded_errors() != 31282:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_value() != 50503:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_urlmetric_set() != 18842:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_urlmetric_test_get_num_recorded_errors() != 21531:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_urlmetric_test_get_value() != 53885:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_generate_and_set() != 65421:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_set() != 35424:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_test_get_num_recorded_errors() != 47242:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_uuidmetric_test_get_value() != 13986:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_booleanmetric_new() != 21464:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_countermetric_new() != 10560:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_customdistributionmetric_new() != 55228:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_datetimemetric_new() != 41604:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_denominatormetric_new() != 55721:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_duallabeledcountermetric_new() != 45810:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_eventmetric_new() != 29941:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_labeledboolean_new() != 23334:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_labeledcounter_new() != 9547:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_labeledquantity_new() != 14259:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_labeledstring_new() != 18295:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_memorydistributionmetric_new() != 55298:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_numeratormetric_new() != 64748:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_objectmetric_new() != 41544:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_pingtype_new() != 31559:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_quantitymetric_new() != 29178:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_ratemetric_new() != 5933:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_stringlistmetric_new() != 21458:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_stringmetric_new() != 26725:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_textmetric_new() != 245:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_timespanmetric_new() != 27434:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_timingdistributionmetric_new() != 16339:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_urlmetric_new() != 33728:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_constructor_uuidmetric_new() != 617:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_gleaneventlistener_on_event_recorded() != 16527:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_initialize_finished() != 55717:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_trigger_upload() != 9000:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_start_metrics_ping_scheduler() != 14495:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_cancel_uploads() != 60924:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_glean_core_checksum_method_ongleanevents_shutdown() != 61713:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UNIFFI_CALLBACK_INTERFACE_GLEAN_EVENT_LISTENER_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD2 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD3 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD4 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
class _UniffiVTableCallbackInterfaceGleanEventListener(ctypes.Structure):
    _fields_ = [
        ("on_event_recorded", _UNIFFI_CALLBACK_INTERFACE_GLEAN_EVENT_LISTENER_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class _UniffiVTableCallbackInterfaceOnGleanEvents(ctypes.Structure):
    _fields_ = [
        ("initialize_finished", _UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD0),
        ("trigger_upload", _UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD1),
        ("start_metrics_ping_scheduler", _UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD2),
        ("cancel_uploads", _UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD3),
        ("shutdown", _UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD4),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_glean_core_fn_clone_booleanmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_booleanmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_booleanmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_booleanmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_booleanmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_booleanmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_set.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_countermetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_countermetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_countermetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_countermetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_countermetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_countermetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_countermetric_add.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_countermetric_add.restype = None
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_customdistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_customdistributionmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_customdistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_customdistributionmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_customdistributionmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int64,
    ctypes.c_int64,
    ctypes.c_int64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_customdistributionmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_samples.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_samples.restype = None
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_single_sample.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_single_sample.restype = None
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_datetimemetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_datetimemetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_datetimemetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_datetimemetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_datetimemetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_datetimemetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value_as_string.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value_as_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_denominatormetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_denominatormetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_denominatormetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_denominatormetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_denominatormetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_denominatormetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_add.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_add.restype = None
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_duallabeledcountermetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_duallabeledcountermetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_duallabeledcountermetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_duallabeledcountermetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_duallabeledcountermetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_duallabeledcountermetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_eventmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_eventmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_eventmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_eventmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_eventmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_eventmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_record.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_record.restype = None
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_labeledboolean.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_labeledboolean.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_labeledboolean.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_labeledboolean.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_labeledboolean_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_labeledboolean_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_labeledcounter.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_labeledcounter.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_labeledcounter.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_labeledcounter.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_labeledcounter_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_labeledcounter_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_labeledquantity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_labeledquantity.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_labeledquantity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_labeledquantity.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_labeledquantity_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_labeledquantity_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_labeledstring.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_labeledstring.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_labeledstring.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_labeledstring.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_labeledstring_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_labeledstring_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_get.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_get.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_memorydistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_memorydistributionmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_memorydistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_memorydistributionmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_memorydistributionmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_memorydistributionmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate.restype = None
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate_samples.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate_samples.restype = None
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_numeratormetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_numeratormetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_numeratormetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_numeratormetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_numeratormetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_numeratormetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_add_to_numerator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_add_to_numerator.restype = None
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_objectmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_objectmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_objectmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_objectmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_objectmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_objectmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_record_schema_error.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_record_schema_error.restype = None
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_set_string.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_set_string.restype = None
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_objectmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_pingtype.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_pingtype.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_pingtype.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_pingtype.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_pingtype_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.c_int8,
    ctypes.c_int8,
    ctypes.c_int8,
    ctypes.c_int8,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_int8,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_pingtype_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_pingtype_set_enabled.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_pingtype_set_enabled.restype = None
_UniffiLib.uniffi_glean_core_fn_method_pingtype_submit.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_pingtype_submit.restype = None
_UniffiLib.uniffi_glean_core_fn_clone_quantitymetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_quantitymetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_quantitymetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_quantitymetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_quantitymetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_quantitymetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_set.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_ratemetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_ratemetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_ratemetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_ratemetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_ratemetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_ratemetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_denominator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_denominator.restype = None
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_numerator.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_numerator.restype = None
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_stringlistmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_stringlistmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_stringlistmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_stringlistmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_stringlistmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_stringlistmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_add.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_add.restype = None
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_stringmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_stringmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_stringmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_stringmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_stringmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_stringmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_textmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_textmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_textmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_textmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_textmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_textmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_textmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_textmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_timespanmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_timespanmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_timespanmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_timespanmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_timespanmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_timespanmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_cancel.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_cancel.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_set_raw_nanos.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_set_raw_nanos.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_start.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_start.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_stop.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_timingdistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_timingdistributionmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_timingdistributionmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_timingdistributionmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_timingdistributionmetric_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_timingdistributionmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_samples.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_samples.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_single_sample.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_single_sample.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_cancel.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_cancel.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_start.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_start.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_stop_and_accumulate.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_stop_and_accumulate.restype = None
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_urlmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_urlmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_urlmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_urlmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_urlmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_urlmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_clone_uuidmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_clone_uuidmetric.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_free_uuidmetric.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_free_uuidmetric.restype = None
_UniffiLib.uniffi_glean_core_fn_constructor_uuidmetric_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_constructor_uuidmetric_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_generate_and_set.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_generate_and_set.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_set.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_set.restype = None
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_num_recorded_errors.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_num_recorded_errors.restype = ctypes.c_int32
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_value.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_value.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_init_callback_vtable_gleaneventlistener.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceGleanEventListener),
)
_UniffiLib.uniffi_glean_core_fn_init_callback_vtable_gleaneventlistener.restype = None
_UniffiLib.uniffi_glean_core_fn_init_callback_vtable_ongleanevents.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceOnGleanEvents),
)
_UniffiLib.uniffi_glean_core_fn_init_callback_vtable_ongleanevents.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_apply_server_knobs_config.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_apply_server_knobs_config.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging_to_fd.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging_to_fd.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_get_debug_view_tag.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_get_debug_view_tag.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_get_log_pings.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_get_log_pings.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_get_registered_ping_names.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_get_registered_ping_names.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_get_upload_task.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_get_upload_task.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_active.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_active.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_inactive.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_inactive.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize_for_subprocess.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_initialize_for_subprocess.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_persist_ping_lifetime_data.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_persist_ping_lifetime_data.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_process_ping_upload_response.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_process_ping_upload_response.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_register_event_listener.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_register_event_listener.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_debug_view_tag.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_debug_view_tag.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_set_dirty_flag.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_dirty_flag.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_active.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_active.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_inactive.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_inactive.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experimentation_id.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_experimentation_id.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_log_pings.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_log_pings.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_source_tags.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_source_tags.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_set_test_mode.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_test_mode.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_set_upload_enabled.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_set_upload_enabled.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_shutdown.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_shutdown.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name_sync.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name_sync.restype = ctypes.c_int8
_UniffiLib.uniffi_glean_core_fn_func_glean_test_destroy_glean.argtypes = (
    ctypes.c_int8,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_destroy_glean.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_attribution.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_attribution.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_distribution.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_distribution.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experiment_data.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experiment_data.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experimentation_id.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experimentation_id.restype = _UniffiRustBuffer
_UniffiLib.uniffi_glean_core_fn_func_glean_unregister_event_listener.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_unregister_event_listener.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_update_attribution.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_update_attribution.restype = None
_UniffiLib.uniffi_glean_core_fn_func_glean_update_distribution.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_glean_core_fn_func_glean_update_distribution.restype = None
_UniffiLib.ffi_glean_core_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_free.restype = None
_UniffiLib.ffi_glean_core_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u8.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_u8.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_glean_core_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i8.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_i8.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_glean_core_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u16.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_u16.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_glean_core_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i16.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_i16.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_glean_core_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u32.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_u32.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_glean_core_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i32.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_i32.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_glean_core_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_u64.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_u64.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_glean_core_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_i64.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_i64.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_glean_core_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_f32.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_f32.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_glean_core_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_f64.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_f64.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_glean_core_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_pointer.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_glean_core_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_glean_core_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_poll_void.restype = None
_UniffiLib.ffi_glean_core_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_cancel_void.restype = None
_UniffiLib.ffi_glean_core_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_glean_core_rust_future_free_void.restype = None
_UniffiLib.ffi_glean_core_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_glean_core_rust_future_complete_void.restype = None
_UniffiLib.uniffi_glean_core_checksum_func_glean_apply_server_knobs_config.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_apply_server_knobs_config.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging_to_fd.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_enable_logging_to_fd.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_debug_view_tag.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_debug_view_tag.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_log_pings.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_log_pings.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_registered_ping_names.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_registered_ping_names.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_upload_task.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_get_upload_task.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_active.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_active.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_inactive.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_handle_client_inactive.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize_for_subprocess.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_initialize_for_subprocess.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_persist_ping_lifetime_data.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_persist_ping_lifetime_data.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_process_ping_upload_response.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_process_ping_upload_response.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_register_event_listener.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_register_event_listener.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_debug_view_tag.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_debug_view_tag.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_dirty_flag.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_dirty_flag.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_active.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_active.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_inactive.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experiment_inactive.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experimentation_id.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_experimentation_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_log_pings.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_log_pings.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_source_tags.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_source_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_test_mode.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_test_mode.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_upload_enabled.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_set_upload_enabled.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_shutdown.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name_sync.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_submit_ping_by_name_sync.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_destroy_glean.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_destroy_glean.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_attribution.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_attribution.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_distribution.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_distribution.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experiment_data.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experiment_data.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experimentation_id.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_test_get_experimentation_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_unregister_event_listener.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_unregister_event_listener.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_update_attribution.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_update_attribution.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_func_glean_update_distribution.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_func_glean_update_distribution.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_booleanmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_add.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_add.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_countermetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_samples.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_samples.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_single_sample.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_accumulate_single_sample.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_customdistributionmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value_as_string.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_datetimemetric_test_get_value_as_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_add.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_add.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_denominatormetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_duallabeledcountermetric_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_duallabeledcountermetric_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_duallabeledcountermetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_duallabeledcountermetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_duallabeledcountermetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_duallabeledcountermetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_record.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_record.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_eventmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledboolean_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledcounter_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledquantity_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledquantity_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledquantity_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledquantity_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledquantity_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledquantity_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_get.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_get.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_labeledstring_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate_samples.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_accumulate_samples.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_memorydistributionmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_add_to_numerator.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_add_to_numerator.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_numeratormetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_record_schema_error.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_record_schema_error.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_set_string.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_set_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_objectmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_pingtype_set_enabled.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_pingtype_set_enabled.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_pingtype_submit.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_pingtype_submit.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_quantitymetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_denominator.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_denominator.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_numerator.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_add_to_numerator.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ratemetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_add.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_add.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringlistmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_stringmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_textmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_cancel.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_cancel.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_set_raw_nanos.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_set_raw_nanos.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_start.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_stop.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timespanmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_samples.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_samples.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_single_sample.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_accumulate_single_sample.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_cancel.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_cancel.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_start.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_stop_and_accumulate.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_stop_and_accumulate.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_timingdistributionmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_urlmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_generate_and_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_generate_and_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_set.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_set.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_num_recorded_errors.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_num_recorded_errors.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_value.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_uuidmetric_test_get_value.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_booleanmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_booleanmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_countermetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_countermetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_customdistributionmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_customdistributionmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_datetimemetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_datetimemetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_denominatormetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_denominatormetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_duallabeledcountermetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_duallabeledcountermetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_eventmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_eventmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledboolean_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledboolean_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledcounter_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledcounter_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledquantity_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledquantity_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledstring_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_labeledstring_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_memorydistributionmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_memorydistributionmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_numeratormetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_numeratormetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_objectmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_objectmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_pingtype_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_pingtype_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_quantitymetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_quantitymetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_ratemetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_ratemetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_stringlistmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_stringlistmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_stringmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_stringmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_textmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_textmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_timespanmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_timespanmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_timingdistributionmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_timingdistributionmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_urlmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_urlmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_constructor_uuidmetric_new.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_constructor_uuidmetric_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_gleaneventlistener_on_event_recorded.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_gleaneventlistener_on_event_recorded.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_initialize_finished.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_initialize_finished.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_trigger_upload.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_trigger_upload.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_start_metrics_ping_scheduler.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_start_metrics_ping_scheduler.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_cancel_uploads.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_cancel_uploads.restype = ctypes.c_uint16
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_shutdown.argtypes = (
)
_UniffiLib.uniffi_glean_core_checksum_method_ongleanevents_shutdown.restype = ctypes.c_uint16
_UniffiLib.ffi_glean_core_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_glean_core_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.
# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
_UNIFFI_IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

class _UniffiConverterInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i8"
    VALUE_MIN = -2**7
    VALUE_MAX = 2**7

    @staticmethod
    def read(buf):
        return buf.read_i8()

    @staticmethod
    def write(value, buf):
        buf.write_i8(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i32"
    VALUE_MIN = -2**31
    VALUE_MAX = 2**31

    @staticmethod
    def read(buf):
        return buf.read_i32()

    @staticmethod
    def write(value, buf):
        buf.write_i32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write(value, buf):
        buf.write_i64(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()


















































class AttributionMetrics:
    source: "typing.Optional[str]"
    medium: "typing.Optional[str]"
    campaign: "typing.Optional[str]"
    term: "typing.Optional[str]"
    content: "typing.Optional[str]"
    def __init__(self, *, source: "typing.Optional[str]" = _DEFAULT, medium: "typing.Optional[str]" = _DEFAULT, campaign: "typing.Optional[str]" = _DEFAULT, term: "typing.Optional[str]" = _DEFAULT, content: "typing.Optional[str]" = _DEFAULT):
        if source is _DEFAULT:
            self.source = None
        else:
            self.source = source
        if medium is _DEFAULT:
            self.medium = None
        else:
            self.medium = medium
        if campaign is _DEFAULT:
            self.campaign = None
        else:
            self.campaign = campaign
        if term is _DEFAULT:
            self.term = None
        else:
            self.term = term
        if content is _DEFAULT:
            self.content = None
        else:
            self.content = content

    def __str__(self):
        return "AttributionMetrics(source={}, medium={}, campaign={}, term={}, content={})".format(self.source, self.medium, self.campaign, self.term, self.content)

    def __eq__(self, other):
        if self.source != other.source:
            return False
        if self.medium != other.medium:
            return False
        if self.campaign != other.campaign:
            return False
        if self.term != other.term:
            return False
        if self.content != other.content:
            return False
        return True

class _UniffiConverterTypeAttributionMetrics(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AttributionMetrics(
            source=_UniffiConverterOptionalString.read(buf),
            medium=_UniffiConverterOptionalString.read(buf),
            campaign=_UniffiConverterOptionalString.read(buf),
            term=_UniffiConverterOptionalString.read(buf),
            content=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterOptionalString.check_lower(value.source)
        _UniffiConverterOptionalString.check_lower(value.medium)
        _UniffiConverterOptionalString.check_lower(value.campaign)
        _UniffiConverterOptionalString.check_lower(value.term)
        _UniffiConverterOptionalString.check_lower(value.content)

    @staticmethod
    def write(value, buf):
        _UniffiConverterOptionalString.write(value.source, buf)
        _UniffiConverterOptionalString.write(value.medium, buf)
        _UniffiConverterOptionalString.write(value.campaign, buf)
        _UniffiConverterOptionalString.write(value.term, buf)
        _UniffiConverterOptionalString.write(value.content, buf)


class ClientInfoMetrics:
    app_build: "str"
    app_display_version: "str"
    app_build_date: "Datetime"
    architecture: "str"
    os_version: "str"
    channel: "typing.Optional[str]"
    locale: "typing.Optional[str]"
    device_manufacturer: "typing.Optional[str]"
    device_model: "typing.Optional[str]"
    android_sdk_version: "typing.Optional[str]"
    windows_build_number: "typing.Optional[int]"
    def __init__(self, *, app_build: "str", app_display_version: "str", app_build_date: "Datetime", architecture: "str", os_version: "str", channel: "typing.Optional[str]" = _DEFAULT, locale: "typing.Optional[str]" = _DEFAULT, device_manufacturer: "typing.Optional[str]" = _DEFAULT, device_model: "typing.Optional[str]" = _DEFAULT, android_sdk_version: "typing.Optional[str]" = _DEFAULT, windows_build_number: "typing.Optional[int]" = _DEFAULT):
        self.app_build = app_build
        self.app_display_version = app_display_version
        self.app_build_date = app_build_date
        self.architecture = architecture
        self.os_version = os_version
        if channel is _DEFAULT:
            self.channel = None
        else:
            self.channel = channel
        if locale is _DEFAULT:
            self.locale = None
        else:
            self.locale = locale
        if device_manufacturer is _DEFAULT:
            self.device_manufacturer = None
        else:
            self.device_manufacturer = device_manufacturer
        if device_model is _DEFAULT:
            self.device_model = None
        else:
            self.device_model = device_model
        if android_sdk_version is _DEFAULT:
            self.android_sdk_version = None
        else:
            self.android_sdk_version = android_sdk_version
        if windows_build_number is _DEFAULT:
            self.windows_build_number = None
        else:
            self.windows_build_number = windows_build_number

    def __str__(self):
        return "ClientInfoMetrics(app_build={}, app_display_version={}, app_build_date={}, architecture={}, os_version={}, channel={}, locale={}, device_manufacturer={}, device_model={}, android_sdk_version={}, windows_build_number={})".format(self.app_build, self.app_display_version, self.app_build_date, self.architecture, self.os_version, self.channel, self.locale, self.device_manufacturer, self.device_model, self.android_sdk_version, self.windows_build_number)

    def __eq__(self, other):
        if self.app_build != other.app_build:
            return False
        if self.app_display_version != other.app_display_version:
            return False
        if self.app_build_date != other.app_build_date:
            return False
        if self.architecture != other.architecture:
            return False
        if self.os_version != other.os_version:
            return False
        if self.channel != other.channel:
            return False
        if self.locale != other.locale:
            return False
        if self.device_manufacturer != other.device_manufacturer:
            return False
        if self.device_model != other.device_model:
            return False
        if self.android_sdk_version != other.android_sdk_version:
            return False
        if self.windows_build_number != other.windows_build_number:
            return False
        return True

class _UniffiConverterTypeClientInfoMetrics(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ClientInfoMetrics(
            app_build=_UniffiConverterString.read(buf),
            app_display_version=_UniffiConverterString.read(buf),
            app_build_date=_UniffiConverterTypeDatetime.read(buf),
            architecture=_UniffiConverterString.read(buf),
            os_version=_UniffiConverterString.read(buf),
            channel=_UniffiConverterOptionalString.read(buf),
            locale=_UniffiConverterOptionalString.read(buf),
            device_manufacturer=_UniffiConverterOptionalString.read(buf),
            device_model=_UniffiConverterOptionalString.read(buf),
            android_sdk_version=_UniffiConverterOptionalString.read(buf),
            windows_build_number=_UniffiConverterOptionalInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.app_build)
        _UniffiConverterString.check_lower(value.app_display_version)
        _UniffiConverterTypeDatetime.check_lower(value.app_build_date)
        _UniffiConverterString.check_lower(value.architecture)
        _UniffiConverterString.check_lower(value.os_version)
        _UniffiConverterOptionalString.check_lower(value.channel)
        _UniffiConverterOptionalString.check_lower(value.locale)
        _UniffiConverterOptionalString.check_lower(value.device_manufacturer)
        _UniffiConverterOptionalString.check_lower(value.device_model)
        _UniffiConverterOptionalString.check_lower(value.android_sdk_version)
        _UniffiConverterOptionalInt64.check_lower(value.windows_build_number)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.app_build, buf)
        _UniffiConverterString.write(value.app_display_version, buf)
        _UniffiConverterTypeDatetime.write(value.app_build_date, buf)
        _UniffiConverterString.write(value.architecture, buf)
        _UniffiConverterString.write(value.os_version, buf)
        _UniffiConverterOptionalString.write(value.channel, buf)
        _UniffiConverterOptionalString.write(value.locale, buf)
        _UniffiConverterOptionalString.write(value.device_manufacturer, buf)
        _UniffiConverterOptionalString.write(value.device_model, buf)
        _UniffiConverterOptionalString.write(value.android_sdk_version, buf)
        _UniffiConverterOptionalInt64.write(value.windows_build_number, buf)


class CommonMetricData:
    category: "str"
    name: "str"
    send_in_pings: "typing.List[str]"
    lifetime: "Lifetime"
    disabled: "bool"
    dynamic_label: "typing.Optional[DynamicLabelType]"
    def __init__(self, *, category: "str", name: "str", send_in_pings: "typing.List[str]", lifetime: "Lifetime", disabled: "bool", dynamic_label: "typing.Optional[DynamicLabelType]" = _DEFAULT):
        self.category = category
        self.name = name
        self.send_in_pings = send_in_pings
        self.lifetime = lifetime
        self.disabled = disabled
        if dynamic_label is _DEFAULT:
            self.dynamic_label = None
        else:
            self.dynamic_label = dynamic_label

    def __str__(self):
        return "CommonMetricData(category={}, name={}, send_in_pings={}, lifetime={}, disabled={}, dynamic_label={})".format(self.category, self.name, self.send_in_pings, self.lifetime, self.disabled, self.dynamic_label)

    def __eq__(self, other):
        if self.category != other.category:
            return False
        if self.name != other.name:
            return False
        if self.send_in_pings != other.send_in_pings:
            return False
        if self.lifetime != other.lifetime:
            return False
        if self.disabled != other.disabled:
            return False
        if self.dynamic_label != other.dynamic_label:
            return False
        return True

class _UniffiConverterTypeCommonMetricData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CommonMetricData(
            category=_UniffiConverterString.read(buf),
            name=_UniffiConverterString.read(buf),
            send_in_pings=_UniffiConverterSequenceString.read(buf),
            lifetime=_UniffiConverterTypeLifetime.read(buf),
            disabled=_UniffiConverterBool.read(buf),
            dynamic_label=_UniffiConverterOptionalTypeDynamicLabelType.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.category)
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterSequenceString.check_lower(value.send_in_pings)
        _UniffiConverterTypeLifetime.check_lower(value.lifetime)
        _UniffiConverterBool.check_lower(value.disabled)
        _UniffiConverterOptionalTypeDynamicLabelType.check_lower(value.dynamic_label)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.category, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterSequenceString.write(value.send_in_pings, buf)
        _UniffiConverterTypeLifetime.write(value.lifetime, buf)
        _UniffiConverterBool.write(value.disabled, buf)
        _UniffiConverterOptionalTypeDynamicLabelType.write(value.dynamic_label, buf)


class Datetime:
    year: "int"
    month: "int"
    day: "int"
    hour: "int"
    minute: "int"
    second: "int"
    nanosecond: "int"
    offset_seconds: "int"
    def __init__(self, *, year: "int", month: "int", day: "int", hour: "int", minute: "int", second: "int", nanosecond: "int", offset_seconds: "int"):
        self.year = year
        self.month = month
        self.day = day
        self.hour = hour
        self.minute = minute
        self.second = second
        self.nanosecond = nanosecond
        self.offset_seconds = offset_seconds

    def __str__(self):
        return "Datetime(year={}, month={}, day={}, hour={}, minute={}, second={}, nanosecond={}, offset_seconds={})".format(self.year, self.month, self.day, self.hour, self.minute, self.second, self.nanosecond, self.offset_seconds)

    def __eq__(self, other):
        if self.year != other.year:
            return False
        if self.month != other.month:
            return False
        if self.day != other.day:
            return False
        if self.hour != other.hour:
            return False
        if self.minute != other.minute:
            return False
        if self.second != other.second:
            return False
        if self.nanosecond != other.nanosecond:
            return False
        if self.offset_seconds != other.offset_seconds:
            return False
        return True

class _UniffiConverterTypeDatetime(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Datetime(
            year=_UniffiConverterInt32.read(buf),
            month=_UniffiConverterUInt32.read(buf),
            day=_UniffiConverterUInt32.read(buf),
            hour=_UniffiConverterUInt32.read(buf),
            minute=_UniffiConverterUInt32.read(buf),
            second=_UniffiConverterUInt32.read(buf),
            nanosecond=_UniffiConverterUInt32.read(buf),
            offset_seconds=_UniffiConverterInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterInt32.check_lower(value.year)
        _UniffiConverterUInt32.check_lower(value.month)
        _UniffiConverterUInt32.check_lower(value.day)
        _UniffiConverterUInt32.check_lower(value.hour)
        _UniffiConverterUInt32.check_lower(value.minute)
        _UniffiConverterUInt32.check_lower(value.second)
        _UniffiConverterUInt32.check_lower(value.nanosecond)
        _UniffiConverterInt32.check_lower(value.offset_seconds)

    @staticmethod
    def write(value, buf):
        _UniffiConverterInt32.write(value.year, buf)
        _UniffiConverterUInt32.write(value.month, buf)
        _UniffiConverterUInt32.write(value.day, buf)
        _UniffiConverterUInt32.write(value.hour, buf)
        _UniffiConverterUInt32.write(value.minute, buf)
        _UniffiConverterUInt32.write(value.second, buf)
        _UniffiConverterUInt32.write(value.nanosecond, buf)
        _UniffiConverterInt32.write(value.offset_seconds, buf)


class DistributionData:
    values: "dict[int, int]"
    sum: "int"
    count: "int"
    def __init__(self, *, values: "dict[int, int]", sum: "int", count: "int"):
        self.values = values
        self.sum = sum
        self.count = count

    def __str__(self):
        return "DistributionData(values={}, sum={}, count={})".format(self.values, self.sum, self.count)

    def __eq__(self, other):
        if self.values != other.values:
            return False
        if self.sum != other.sum:
            return False
        if self.count != other.count:
            return False
        return True

class _UniffiConverterTypeDistributionData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DistributionData(
            values=_UniffiConverterMapInt64Int64.read(buf),
            sum=_UniffiConverterInt64.read(buf),
            count=_UniffiConverterInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterMapInt64Int64.check_lower(value.values)
        _UniffiConverterInt64.check_lower(value.sum)
        _UniffiConverterInt64.check_lower(value.count)

    @staticmethod
    def write(value, buf):
        _UniffiConverterMapInt64Int64.write(value.values, buf)
        _UniffiConverterInt64.write(value.sum, buf)
        _UniffiConverterInt64.write(value.count, buf)


class DistributionMetrics:
    name: "typing.Optional[str]"
    def __init__(self, *, name: "typing.Optional[str]" = _DEFAULT):
        if name is _DEFAULT:
            self.name = None
        else:
            self.name = name

    def __str__(self):
        return "DistributionMetrics(name={})".format(self.name)

    def __eq__(self, other):
        if self.name != other.name:
            return False
        return True

class _UniffiConverterTypeDistributionMetrics(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DistributionMetrics(
            name=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterOptionalString.check_lower(value.name)

    @staticmethod
    def write(value, buf):
        _UniffiConverterOptionalString.write(value.name, buf)


class InternalConfiguration:
    data_path: "str"
    application_id: "str"
    language_binding_name: "str"
    upload_enabled: "bool"
    max_events: "typing.Optional[int]"
    delay_ping_lifetime_io: "bool"
    app_build: "str"
    use_core_mps: "bool"
    trim_data_to_registered_pings: "bool"
    log_level: "typing.Optional[LevelFilter]"
    rate_limit: "typing.Optional[PingRateLimit]"
    enable_event_timestamps: "bool"
    experimentation_id: "typing.Optional[str]"
    enable_internal_pings: "bool"
    ping_schedule: "dict[str, typing.List[str]]"
    ping_lifetime_threshold: "int"
    ping_lifetime_max_time: "int"
    def __init__(self, *, data_path: "str", application_id: "str", language_binding_name: "str", upload_enabled: "bool", max_events: "typing.Optional[int]", delay_ping_lifetime_io: "bool", app_build: "str", use_core_mps: "bool", trim_data_to_registered_pings: "bool", log_level: "typing.Optional[LevelFilter]", rate_limit: "typing.Optional[PingRateLimit]", enable_event_timestamps: "bool", experimentation_id: "typing.Optional[str]", enable_internal_pings: "bool", ping_schedule: "dict[str, typing.List[str]]", ping_lifetime_threshold: "int", ping_lifetime_max_time: "int"):
        self.data_path = data_path
        self.application_id = application_id
        self.language_binding_name = language_binding_name
        self.upload_enabled = upload_enabled
        self.max_events = max_events
        self.delay_ping_lifetime_io = delay_ping_lifetime_io
        self.app_build = app_build
        self.use_core_mps = use_core_mps
        self.trim_data_to_registered_pings = trim_data_to_registered_pings
        self.log_level = log_level
        self.rate_limit = rate_limit
        self.enable_event_timestamps = enable_event_timestamps
        self.experimentation_id = experimentation_id
        self.enable_internal_pings = enable_internal_pings
        self.ping_schedule = ping_schedule
        self.ping_lifetime_threshold = ping_lifetime_threshold
        self.ping_lifetime_max_time = ping_lifetime_max_time

    def __str__(self):
        return "InternalConfiguration(data_path={}, application_id={}, language_binding_name={}, upload_enabled={}, max_events={}, delay_ping_lifetime_io={}, app_build={}, use_core_mps={}, trim_data_to_registered_pings={}, log_level={}, rate_limit={}, enable_event_timestamps={}, experimentation_id={}, enable_internal_pings={}, ping_schedule={}, ping_lifetime_threshold={}, ping_lifetime_max_time={})".format(self.data_path, self.application_id, self.language_binding_name, self.upload_enabled, self.max_events, self.delay_ping_lifetime_io, self.app_build, self.use_core_mps, self.trim_data_to_registered_pings, self.log_level, self.rate_limit, self.enable_event_timestamps, self.experimentation_id, self.enable_internal_pings, self.ping_schedule, self.ping_lifetime_threshold, self.ping_lifetime_max_time)

    def __eq__(self, other):
        if self.data_path != other.data_path:
            return False
        if self.application_id != other.application_id:
            return False
        if self.language_binding_name != other.language_binding_name:
            return False
        if self.upload_enabled != other.upload_enabled:
            return False
        if self.max_events != other.max_events:
            return False
        if self.delay_ping_lifetime_io != other.delay_ping_lifetime_io:
            return False
        if self.app_build != other.app_build:
            return False
        if self.use_core_mps != other.use_core_mps:
            return False
        if self.trim_data_to_registered_pings != other.trim_data_to_registered_pings:
            return False
        if self.log_level != other.log_level:
            return False
        if self.rate_limit != other.rate_limit:
            return False
        if self.enable_event_timestamps != other.enable_event_timestamps:
            return False
        if self.experimentation_id != other.experimentation_id:
            return False
        if self.enable_internal_pings != other.enable_internal_pings:
            return False
        if self.ping_schedule != other.ping_schedule:
            return False
        if self.ping_lifetime_threshold != other.ping_lifetime_threshold:
            return False
        if self.ping_lifetime_max_time != other.ping_lifetime_max_time:
            return False
        return True

class _UniffiConverterTypeInternalConfiguration(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return InternalConfiguration(
            data_path=_UniffiConverterString.read(buf),
            application_id=_UniffiConverterString.read(buf),
            language_binding_name=_UniffiConverterString.read(buf),
            upload_enabled=_UniffiConverterBool.read(buf),
            max_events=_UniffiConverterOptionalUInt32.read(buf),
            delay_ping_lifetime_io=_UniffiConverterBool.read(buf),
            app_build=_UniffiConverterString.read(buf),
            use_core_mps=_UniffiConverterBool.read(buf),
            trim_data_to_registered_pings=_UniffiConverterBool.read(buf),
            log_level=_UniffiConverterOptionalTypeLevelFilter.read(buf),
            rate_limit=_UniffiConverterOptionalTypePingRateLimit.read(buf),
            enable_event_timestamps=_UniffiConverterBool.read(buf),
            experimentation_id=_UniffiConverterOptionalString.read(buf),
            enable_internal_pings=_UniffiConverterBool.read(buf),
            ping_schedule=_UniffiConverterMapStringSequenceString.read(buf),
            ping_lifetime_threshold=_UniffiConverterUInt64.read(buf),
            ping_lifetime_max_time=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.data_path)
        _UniffiConverterString.check_lower(value.application_id)
        _UniffiConverterString.check_lower(value.language_binding_name)
        _UniffiConverterBool.check_lower(value.upload_enabled)
        _UniffiConverterOptionalUInt32.check_lower(value.max_events)
        _UniffiConverterBool.check_lower(value.delay_ping_lifetime_io)
        _UniffiConverterString.check_lower(value.app_build)
        _UniffiConverterBool.check_lower(value.use_core_mps)
        _UniffiConverterBool.check_lower(value.trim_data_to_registered_pings)
        _UniffiConverterOptionalTypeLevelFilter.check_lower(value.log_level)
        _UniffiConverterOptionalTypePingRateLimit.check_lower(value.rate_limit)
        _UniffiConverterBool.check_lower(value.enable_event_timestamps)
        _UniffiConverterOptionalString.check_lower(value.experimentation_id)
        _UniffiConverterBool.check_lower(value.enable_internal_pings)
        _UniffiConverterMapStringSequenceString.check_lower(value.ping_schedule)
        _UniffiConverterUInt64.check_lower(value.ping_lifetime_threshold)
        _UniffiConverterUInt64.check_lower(value.ping_lifetime_max_time)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.data_path, buf)
        _UniffiConverterString.write(value.application_id, buf)
        _UniffiConverterString.write(value.language_binding_name, buf)
        _UniffiConverterBool.write(value.upload_enabled, buf)
        _UniffiConverterOptionalUInt32.write(value.max_events, buf)
        _UniffiConverterBool.write(value.delay_ping_lifetime_io, buf)
        _UniffiConverterString.write(value.app_build, buf)
        _UniffiConverterBool.write(value.use_core_mps, buf)
        _UniffiConverterBool.write(value.trim_data_to_registered_pings, buf)
        _UniffiConverterOptionalTypeLevelFilter.write(value.log_level, buf)
        _UniffiConverterOptionalTypePingRateLimit.write(value.rate_limit, buf)
        _UniffiConverterBool.write(value.enable_event_timestamps, buf)
        _UniffiConverterOptionalString.write(value.experimentation_id, buf)
        _UniffiConverterBool.write(value.enable_internal_pings, buf)
        _UniffiConverterMapStringSequenceString.write(value.ping_schedule, buf)
        _UniffiConverterUInt64.write(value.ping_lifetime_threshold, buf)
        _UniffiConverterUInt64.write(value.ping_lifetime_max_time, buf)


class PingRateLimit:
    seconds_per_interval: "int"
    pings_per_interval: "int"
    def __init__(self, *, seconds_per_interval: "int", pings_per_interval: "int"):
        self.seconds_per_interval = seconds_per_interval
        self.pings_per_interval = pings_per_interval

    def __str__(self):
        return "PingRateLimit(seconds_per_interval={}, pings_per_interval={})".format(self.seconds_per_interval, self.pings_per_interval)

    def __eq__(self, other):
        if self.seconds_per_interval != other.seconds_per_interval:
            return False
        if self.pings_per_interval != other.pings_per_interval:
            return False
        return True

class _UniffiConverterTypePingRateLimit(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PingRateLimit(
            seconds_per_interval=_UniffiConverterUInt64.read(buf),
            pings_per_interval=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.seconds_per_interval)
        _UniffiConverterUInt32.check_lower(value.pings_per_interval)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.seconds_per_interval, buf)
        _UniffiConverterUInt32.write(value.pings_per_interval, buf)


class PingRequest:
    document_id: "str"
    path: "str"
    body: "typing.List[int]"
    headers: "dict[str, str]"
    body_has_info_sections: "bool"
    ping_name: "str"
    uploader_capabilities: "typing.List[str]"
    def __init__(self, *, document_id: "str", path: "str", body: "typing.List[int]", headers: "dict[str, str]", body_has_info_sections: "bool", ping_name: "str", uploader_capabilities: "typing.List[str]"):
        self.document_id = document_id
        self.path = path
        self.body = body
        self.headers = headers
        self.body_has_info_sections = body_has_info_sections
        self.ping_name = ping_name
        self.uploader_capabilities = uploader_capabilities

    def __str__(self):
        return "PingRequest(document_id={}, path={}, body={}, headers={}, body_has_info_sections={}, ping_name={}, uploader_capabilities={})".format(self.document_id, self.path, self.body, self.headers, self.body_has_info_sections, self.ping_name, self.uploader_capabilities)

    def __eq__(self, other):
        if self.document_id != other.document_id:
            return False
        if self.path != other.path:
            return False
        if self.body != other.body:
            return False
        if self.headers != other.headers:
            return False
        if self.body_has_info_sections != other.body_has_info_sections:
            return False
        if self.ping_name != other.ping_name:
            return False
        if self.uploader_capabilities != other.uploader_capabilities:
            return False
        return True

class _UniffiConverterTypePingRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PingRequest(
            document_id=_UniffiConverterString.read(buf),
            path=_UniffiConverterString.read(buf),
            body=_UniffiConverterSequenceUInt8.read(buf),
            headers=_UniffiConverterMapStringString.read(buf),
            body_has_info_sections=_UniffiConverterBool.read(buf),
            ping_name=_UniffiConverterString.read(buf),
            uploader_capabilities=_UniffiConverterSequenceString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.document_id)
        _UniffiConverterString.check_lower(value.path)
        _UniffiConverterSequenceUInt8.check_lower(value.body)
        _UniffiConverterMapStringString.check_lower(value.headers)
        _UniffiConverterBool.check_lower(value.body_has_info_sections)
        _UniffiConverterString.check_lower(value.ping_name)
        _UniffiConverterSequenceString.check_lower(value.uploader_capabilities)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.document_id, buf)
        _UniffiConverterString.write(value.path, buf)
        _UniffiConverterSequenceUInt8.write(value.body, buf)
        _UniffiConverterMapStringString.write(value.headers, buf)
        _UniffiConverterBool.write(value.body_has_info_sections, buf)
        _UniffiConverterString.write(value.ping_name, buf)
        _UniffiConverterSequenceString.write(value.uploader_capabilities, buf)


class Rate:
    numerator: "int"
    denominator: "int"
    def __init__(self, *, numerator: "int", denominator: "int"):
        self.numerator = numerator
        self.denominator = denominator

    def __str__(self):
        return "Rate(numerator={}, denominator={})".format(self.numerator, self.denominator)

    def __eq__(self, other):
        if self.numerator != other.numerator:
            return False
        if self.denominator != other.denominator:
            return False
        return True

class _UniffiConverterTypeRate(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Rate(
            numerator=_UniffiConverterInt32.read(buf),
            denominator=_UniffiConverterInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterInt32.check_lower(value.numerator)
        _UniffiConverterInt32.check_lower(value.denominator)

    @staticmethod
    def write(value, buf):
        _UniffiConverterInt32.write(value.numerator, buf)
        _UniffiConverterInt32.write(value.denominator, buf)


class RecordedEvent:
    timestamp: "int"
    category: "str"
    name: "str"
    extra: "typing.Optional[dict[str, str]]"
    def __init__(self, *, timestamp: "int", category: "str", name: "str", extra: "typing.Optional[dict[str, str]]"):
        self.timestamp = timestamp
        self.category = category
        self.name = name
        self.extra = extra

    def __str__(self):
        return "RecordedEvent(timestamp={}, category={}, name={}, extra={})".format(self.timestamp, self.category, self.name, self.extra)

    def __eq__(self, other):
        if self.timestamp != other.timestamp:
            return False
        if self.category != other.category:
            return False
        if self.name != other.name:
            return False
        if self.extra != other.extra:
            return False
        return True

class _UniffiConverterTypeRecordedEvent(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RecordedEvent(
            timestamp=_UniffiConverterUInt64.read(buf),
            category=_UniffiConverterString.read(buf),
            name=_UniffiConverterString.read(buf),
            extra=_UniffiConverterOptionalMapStringString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.timestamp)
        _UniffiConverterString.check_lower(value.category)
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterOptionalMapStringString.check_lower(value.extra)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.timestamp, buf)
        _UniffiConverterString.write(value.category, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterOptionalMapStringString.write(value.extra, buf)


class RecordedExperiment:
    branch: "str"
    extra: "typing.Optional[dict[str, str]]"
    def __init__(self, *, branch: "str", extra: "typing.Optional[dict[str, str]]"):
        self.branch = branch
        self.extra = extra

    def __str__(self):
        return "RecordedExperiment(branch={}, extra={})".format(self.branch, self.extra)

    def __eq__(self, other):
        if self.branch != other.branch:
            return False
        if self.extra != other.extra:
            return False
        return True

class _UniffiConverterTypeRecordedExperiment(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RecordedExperiment(
            branch=_UniffiConverterString.read(buf),
            extra=_UniffiConverterOptionalMapStringString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.branch)
        _UniffiConverterOptionalMapStringString.check_lower(value.extra)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.branch, buf)
        _UniffiConverterOptionalMapStringString.write(value.extra, buf)


class TimerId:
    id: "int"
    def __init__(self, *, id: "int"):
        self.id = id

    def __str__(self):
        return "TimerId(id={})".format(self.id)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        return True

class _UniffiConverterTypeTimerId(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TimerId(
            id=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.id, buf)


# CallbackError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class CallbackError(Exception):
    pass

_UniffiTempCallbackError = CallbackError

class CallbackError:  # type: ignore
    class UnexpectedError(_UniffiTempCallbackError):

        def __repr__(self):
            return "CallbackError.UnexpectedError({})".format(repr(str(self)))
    _UniffiTempCallbackError.UnexpectedError = UnexpectedError # type: ignore

CallbackError = _UniffiTempCallbackError # type: ignore
del _UniffiTempCallbackError


class _UniffiConverterTypeCallbackError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return CallbackError.UnexpectedError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, CallbackError.UnexpectedError):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, CallbackError.UnexpectedError):
            buf.write_i32(1)





class DynamicLabelType:
    """
    The type of dynamic label applied to a base metric. Used to help identify
    the necessary validation to be performed.
    """

    def __init__(self):
        raise RuntimeError("DynamicLabelType cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class LABEL:
        """
        A dynamic label applied from a `LabeledMetric`
        """

        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __str__(self):
            return f"DynamicLabelType.LABEL{self._values!r}"

        def __eq__(self, other):
            if not other.is_LABEL():
                return False
            return self._values == other._values
    class KEY_ONLY:
        """
        A label applied by a `DualLabeledCounter` that contains a dynamic key
        """

        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __str__(self):
            return f"DynamicLabelType.KEY_ONLY{self._values!r}"

        def __eq__(self, other):
            if not other.is_KEY_ONLY():
                return False
            return self._values == other._values
    class CATEGORY_ONLY:
        """
        A label applied by a `DualLabeledCounter` that contains a dynamic category
        """

        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __str__(self):
            return f"DynamicLabelType.CATEGORY_ONLY{self._values!r}"

        def __eq__(self, other):
            if not other.is_CATEGORY_ONLY():
                return False
            return self._values == other._values
    class KEY_AND_CATEGORY:
        """
        A label applied by a `DualLabeledCounter` that contains a dynamic key and category
        """

        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __str__(self):
            return f"DynamicLabelType.KEY_AND_CATEGORY{self._values!r}"

        def __eq__(self, other):
            if not other.is_KEY_AND_CATEGORY():
                return False
            return self._values == other._values
    

    # For each variant, we have `is_NAME` and `is_name` methods for easily checking
    # whether an instance is that variant.
    def is_LABEL(self) -> bool:
        return isinstance(self, DynamicLabelType.LABEL)
    def is_label(self) -> bool:
        return isinstance(self, DynamicLabelType.LABEL)
    def is_KEY_ONLY(self) -> bool:
        return isinstance(self, DynamicLabelType.KEY_ONLY)
    def is_key_only(self) -> bool:
        return isinstance(self, DynamicLabelType.KEY_ONLY)
    def is_CATEGORY_ONLY(self) -> bool:
        return isinstance(self, DynamicLabelType.CATEGORY_ONLY)
    def is_category_only(self) -> bool:
        return isinstance(self, DynamicLabelType.CATEGORY_ONLY)
    def is_KEY_AND_CATEGORY(self) -> bool:
        return isinstance(self, DynamicLabelType.KEY_AND_CATEGORY)
    def is_key_and_category(self) -> bool:
        return isinstance(self, DynamicLabelType.KEY_AND_CATEGORY)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
DynamicLabelType.LABEL = type("DynamicLabelType.LABEL", (DynamicLabelType.LABEL, DynamicLabelType,), {})  # type: ignore
DynamicLabelType.KEY_ONLY = type("DynamicLabelType.KEY_ONLY", (DynamicLabelType.KEY_ONLY, DynamicLabelType,), {})  # type: ignore
DynamicLabelType.CATEGORY_ONLY = type("DynamicLabelType.CATEGORY_ONLY", (DynamicLabelType.CATEGORY_ONLY, DynamicLabelType,), {})  # type: ignore
DynamicLabelType.KEY_AND_CATEGORY = type("DynamicLabelType.KEY_AND_CATEGORY", (DynamicLabelType.KEY_AND_CATEGORY, DynamicLabelType,), {})  # type: ignore




class _UniffiConverterTypeDynamicLabelType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return DynamicLabelType.LABEL(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return DynamicLabelType.KEY_ONLY(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return DynamicLabelType.CATEGORY_ONLY(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return DynamicLabelType.KEY_AND_CATEGORY(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_LABEL():
            _UniffiConverterString.check_lower(value._values[0])
            return
        if value.is_KEY_ONLY():
            _UniffiConverterString.check_lower(value._values[0])
            return
        if value.is_CATEGORY_ONLY():
            _UniffiConverterString.check_lower(value._values[0])
            return
        if value.is_KEY_AND_CATEGORY():
            _UniffiConverterString.check_lower(value._values[0])
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_LABEL():
            buf.write_i32(1)
            _UniffiConverterString.write(value._values[0], buf)
        if value.is_KEY_ONLY():
            buf.write_i32(2)
            _UniffiConverterString.write(value._values[0], buf)
        if value.is_CATEGORY_ONLY():
            buf.write_i32(3)
            _UniffiConverterString.write(value._values[0], buf)
        if value.is_KEY_AND_CATEGORY():
            buf.write_i32(4)
            _UniffiConverterString.write(value._values[0], buf)







class ErrorType(enum.Enum):
    INVALID_VALUE = 0
    
    INVALID_LABEL = 1
    
    INVALID_STATE = 2
    
    INVALID_OVERFLOW = 3
    


class _UniffiConverterTypeErrorType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ErrorType.INVALID_VALUE
        if variant == 2:
            return ErrorType.INVALID_LABEL
        if variant == 3:
            return ErrorType.INVALID_STATE
        if variant == 4:
            return ErrorType.INVALID_OVERFLOW
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == ErrorType.INVALID_VALUE:
            return
        if value == ErrorType.INVALID_LABEL:
            return
        if value == ErrorType.INVALID_STATE:
            return
        if value == ErrorType.INVALID_OVERFLOW:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == ErrorType.INVALID_VALUE:
            buf.write_i32(1)
        if value == ErrorType.INVALID_LABEL:
            buf.write_i32(2)
        if value == ErrorType.INVALID_STATE:
            buf.write_i32(3)
        if value == ErrorType.INVALID_OVERFLOW:
            buf.write_i32(4)







class HistogramType(enum.Enum):
    LINEAR = 0
    
    EXPONENTIAL = 1
    


class _UniffiConverterTypeHistogramType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return HistogramType.LINEAR
        if variant == 2:
            return HistogramType.EXPONENTIAL
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == HistogramType.LINEAR:
            return
        if value == HistogramType.EXPONENTIAL:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == HistogramType.LINEAR:
            buf.write_i32(1)
        if value == HistogramType.EXPONENTIAL:
            buf.write_i32(2)







class LabeledMetricData:
    def __init__(self):
        raise RuntimeError("LabeledMetricData cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class COMMON:
        cmd: "CommonMetricData"

        def __init__(self,cmd: "CommonMetricData"):
            self.cmd = cmd

        def __str__(self):
            return "LabeledMetricData.COMMON(cmd={})".format(self.cmd)

        def __eq__(self, other):
            if not other.is_COMMON():
                return False
            if self.cmd != other.cmd:
                return False
            return True
    
    class CUSTOM_DISTRIBUTION:
        cmd: "CommonMetricData"
        range_min: "int"
        range_max: "int"
        bucket_count: "int"
        histogram_type: "HistogramType"

        def __init__(self,cmd: "CommonMetricData", range_min: "int", range_max: "int", bucket_count: "int", histogram_type: "HistogramType"):
            self.cmd = cmd
            self.range_min = range_min
            self.range_max = range_max
            self.bucket_count = bucket_count
            self.histogram_type = histogram_type

        def __str__(self):
            return "LabeledMetricData.CUSTOM_DISTRIBUTION(cmd={}, range_min={}, range_max={}, bucket_count={}, histogram_type={})".format(self.cmd, self.range_min, self.range_max, self.bucket_count, self.histogram_type)

        def __eq__(self, other):
            if not other.is_CUSTOM_DISTRIBUTION():
                return False
            if self.cmd != other.cmd:
                return False
            if self.range_min != other.range_min:
                return False
            if self.range_max != other.range_max:
                return False
            if self.bucket_count != other.bucket_count:
                return False
            if self.histogram_type != other.histogram_type:
                return False
            return True
    
    class MEMORY_DISTRIBUTION:
        cmd: "CommonMetricData"
        unit: "MemoryUnit"

        def __init__(self,cmd: "CommonMetricData", unit: "MemoryUnit"):
            self.cmd = cmd
            self.unit = unit

        def __str__(self):
            return "LabeledMetricData.MEMORY_DISTRIBUTION(cmd={}, unit={})".format(self.cmd, self.unit)

        def __eq__(self, other):
            if not other.is_MEMORY_DISTRIBUTION():
                return False
            if self.cmd != other.cmd:
                return False
            if self.unit != other.unit:
                return False
            return True
    
    class TIMING_DISTRIBUTION:
        cmd: "CommonMetricData"
        unit: "TimeUnit"

        def __init__(self,cmd: "CommonMetricData", unit: "TimeUnit"):
            self.cmd = cmd
            self.unit = unit

        def __str__(self):
            return "LabeledMetricData.TIMING_DISTRIBUTION(cmd={}, unit={})".format(self.cmd, self.unit)

        def __eq__(self, other):
            if not other.is_TIMING_DISTRIBUTION():
                return False
            if self.cmd != other.cmd:
                return False
            if self.unit != other.unit:
                return False
            return True
    
    

    # For each variant, we have `is_NAME` and `is_name` methods for easily checking
    # whether an instance is that variant.
    def is_COMMON(self) -> bool:
        return isinstance(self, LabeledMetricData.COMMON)
    def is_common(self) -> bool:
        return isinstance(self, LabeledMetricData.COMMON)
    def is_CUSTOM_DISTRIBUTION(self) -> bool:
        return isinstance(self, LabeledMetricData.CUSTOM_DISTRIBUTION)
    def is_custom_distribution(self) -> bool:
        return isinstance(self, LabeledMetricData.CUSTOM_DISTRIBUTION)
    def is_MEMORY_DISTRIBUTION(self) -> bool:
        return isinstance(self, LabeledMetricData.MEMORY_DISTRIBUTION)
    def is_memory_distribution(self) -> bool:
        return isinstance(self, LabeledMetricData.MEMORY_DISTRIBUTION)
    def is_TIMING_DISTRIBUTION(self) -> bool:
        return isinstance(self, LabeledMetricData.TIMING_DISTRIBUTION)
    def is_timing_distribution(self) -> bool:
        return isinstance(self, LabeledMetricData.TIMING_DISTRIBUTION)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
LabeledMetricData.COMMON = type("LabeledMetricData.COMMON", (LabeledMetricData.COMMON, LabeledMetricData,), {})  # type: ignore
LabeledMetricData.CUSTOM_DISTRIBUTION = type("LabeledMetricData.CUSTOM_DISTRIBUTION", (LabeledMetricData.CUSTOM_DISTRIBUTION, LabeledMetricData,), {})  # type: ignore
LabeledMetricData.MEMORY_DISTRIBUTION = type("LabeledMetricData.MEMORY_DISTRIBUTION", (LabeledMetricData.MEMORY_DISTRIBUTION, LabeledMetricData,), {})  # type: ignore
LabeledMetricData.TIMING_DISTRIBUTION = type("LabeledMetricData.TIMING_DISTRIBUTION", (LabeledMetricData.TIMING_DISTRIBUTION, LabeledMetricData,), {})  # type: ignore




class _UniffiConverterTypeLabeledMetricData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LabeledMetricData.COMMON(
                _UniffiConverterTypeCommonMetricData.read(buf),
            )
        if variant == 2:
            return LabeledMetricData.CUSTOM_DISTRIBUTION(
                _UniffiConverterTypeCommonMetricData.read(buf),
                _UniffiConverterInt64.read(buf),
                _UniffiConverterInt64.read(buf),
                _UniffiConverterInt64.read(buf),
                _UniffiConverterTypeHistogramType.read(buf),
            )
        if variant == 3:
            return LabeledMetricData.MEMORY_DISTRIBUTION(
                _UniffiConverterTypeCommonMetricData.read(buf),
                _UniffiConverterTypeMemoryUnit.read(buf),
            )
        if variant == 4:
            return LabeledMetricData.TIMING_DISTRIBUTION(
                _UniffiConverterTypeCommonMetricData.read(buf),
                _UniffiConverterTypeTimeUnit.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_COMMON():
            _UniffiConverterTypeCommonMetricData.check_lower(value.cmd)
            return
        if value.is_CUSTOM_DISTRIBUTION():
            _UniffiConverterTypeCommonMetricData.check_lower(value.cmd)
            _UniffiConverterInt64.check_lower(value.range_min)
            _UniffiConverterInt64.check_lower(value.range_max)
            _UniffiConverterInt64.check_lower(value.bucket_count)
            _UniffiConverterTypeHistogramType.check_lower(value.histogram_type)
            return
        if value.is_MEMORY_DISTRIBUTION():
            _UniffiConverterTypeCommonMetricData.check_lower(value.cmd)
            _UniffiConverterTypeMemoryUnit.check_lower(value.unit)
            return
        if value.is_TIMING_DISTRIBUTION():
            _UniffiConverterTypeCommonMetricData.check_lower(value.cmd)
            _UniffiConverterTypeTimeUnit.check_lower(value.unit)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_COMMON():
            buf.write_i32(1)
            _UniffiConverterTypeCommonMetricData.write(value.cmd, buf)
        if value.is_CUSTOM_DISTRIBUTION():
            buf.write_i32(2)
            _UniffiConverterTypeCommonMetricData.write(value.cmd, buf)
            _UniffiConverterInt64.write(value.range_min, buf)
            _UniffiConverterInt64.write(value.range_max, buf)
            _UniffiConverterInt64.write(value.bucket_count, buf)
            _UniffiConverterTypeHistogramType.write(value.histogram_type, buf)
        if value.is_MEMORY_DISTRIBUTION():
            buf.write_i32(3)
            _UniffiConverterTypeCommonMetricData.write(value.cmd, buf)
            _UniffiConverterTypeMemoryUnit.write(value.unit, buf)
        if value.is_TIMING_DISTRIBUTION():
            buf.write_i32(4)
            _UniffiConverterTypeCommonMetricData.write(value.cmd, buf)
            _UniffiConverterTypeTimeUnit.write(value.unit, buf)







class LevelFilter(enum.Enum):
    OFF = 0
    
    ERROR = 1
    
    WARN = 2
    
    INFO = 3
    
    DEBUG = 4
    
    TRACE = 5
    


class _UniffiConverterTypeLevelFilter(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LevelFilter.OFF
        if variant == 2:
            return LevelFilter.ERROR
        if variant == 3:
            return LevelFilter.WARN
        if variant == 4:
            return LevelFilter.INFO
        if variant == 5:
            return LevelFilter.DEBUG
        if variant == 6:
            return LevelFilter.TRACE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == LevelFilter.OFF:
            return
        if value == LevelFilter.ERROR:
            return
        if value == LevelFilter.WARN:
            return
        if value == LevelFilter.INFO:
            return
        if value == LevelFilter.DEBUG:
            return
        if value == LevelFilter.TRACE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == LevelFilter.OFF:
            buf.write_i32(1)
        if value == LevelFilter.ERROR:
            buf.write_i32(2)
        if value == LevelFilter.WARN:
            buf.write_i32(3)
        if value == LevelFilter.INFO:
            buf.write_i32(4)
        if value == LevelFilter.DEBUG:
            buf.write_i32(5)
        if value == LevelFilter.TRACE:
            buf.write_i32(6)







class Lifetime(enum.Enum):
    PING = 0
    
    APPLICATION = 1
    
    USER = 2
    


class _UniffiConverterTypeLifetime(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Lifetime.PING
        if variant == 2:
            return Lifetime.APPLICATION
        if variant == 3:
            return Lifetime.USER
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Lifetime.PING:
            return
        if value == Lifetime.APPLICATION:
            return
        if value == Lifetime.USER:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Lifetime.PING:
            buf.write_i32(1)
        if value == Lifetime.APPLICATION:
            buf.write_i32(2)
        if value == Lifetime.USER:
            buf.write_i32(3)







class MemoryUnit(enum.Enum):
    BYTE = 0
    
    KILOBYTE = 1
    
    MEGABYTE = 2
    
    GIGABYTE = 3
    


class _UniffiConverterTypeMemoryUnit(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return MemoryUnit.BYTE
        if variant == 2:
            return MemoryUnit.KILOBYTE
        if variant == 3:
            return MemoryUnit.MEGABYTE
        if variant == 4:
            return MemoryUnit.GIGABYTE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == MemoryUnit.BYTE:
            return
        if value == MemoryUnit.KILOBYTE:
            return
        if value == MemoryUnit.MEGABYTE:
            return
        if value == MemoryUnit.GIGABYTE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == MemoryUnit.BYTE:
            buf.write_i32(1)
        if value == MemoryUnit.KILOBYTE:
            buf.write_i32(2)
        if value == MemoryUnit.MEGABYTE:
            buf.write_i32(3)
        if value == MemoryUnit.GIGABYTE:
            buf.write_i32(4)







class PingUploadTask:
    def __init__(self):
        raise RuntimeError("PingUploadTask cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class UPLOAD:
        request: "PingRequest"

        def __init__(self,request: "PingRequest"):
            self.request = request

        def __str__(self):
            return "PingUploadTask.UPLOAD(request={})".format(self.request)

        def __eq__(self, other):
            if not other.is_UPLOAD():
                return False
            if self.request != other.request:
                return False
            return True
    
    class WAIT:
        time: "int"

        def __init__(self,time: "int"):
            self.time = time

        def __str__(self):
            return "PingUploadTask.WAIT(time={})".format(self.time)

        def __eq__(self, other):
            if not other.is_WAIT():
                return False
            if self.time != other.time:
                return False
            return True
    
    class DONE:
        unused: "int"

        def __init__(self,unused: "int"):
            self.unused = unused

        def __str__(self):
            return "PingUploadTask.DONE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_DONE():
                return False
            if self.unused != other.unused:
                return False
            return True
    
    

    # For each variant, we have `is_NAME` and `is_name` methods for easily checking
    # whether an instance is that variant.
    def is_UPLOAD(self) -> bool:
        return isinstance(self, PingUploadTask.UPLOAD)
    def is_upload(self) -> bool:
        return isinstance(self, PingUploadTask.UPLOAD)
    def is_WAIT(self) -> bool:
        return isinstance(self, PingUploadTask.WAIT)
    def is_wait(self) -> bool:
        return isinstance(self, PingUploadTask.WAIT)
    def is_DONE(self) -> bool:
        return isinstance(self, PingUploadTask.DONE)
    def is_done(self) -> bool:
        return isinstance(self, PingUploadTask.DONE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
PingUploadTask.UPLOAD = type("PingUploadTask.UPLOAD", (PingUploadTask.UPLOAD, PingUploadTask,), {})  # type: ignore
PingUploadTask.WAIT = type("PingUploadTask.WAIT", (PingUploadTask.WAIT, PingUploadTask,), {})  # type: ignore
PingUploadTask.DONE = type("PingUploadTask.DONE", (PingUploadTask.DONE, PingUploadTask,), {})  # type: ignore




class _UniffiConverterTypePingUploadTask(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PingUploadTask.UPLOAD(
                _UniffiConverterTypePingRequest.read(buf),
            )
        if variant == 2:
            return PingUploadTask.WAIT(
                _UniffiConverterUInt64.read(buf),
            )
        if variant == 3:
            return PingUploadTask.DONE(
                _UniffiConverterInt8.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_UPLOAD():
            _UniffiConverterTypePingRequest.check_lower(value.request)
            return
        if value.is_WAIT():
            _UniffiConverterUInt64.check_lower(value.time)
            return
        if value.is_DONE():
            _UniffiConverterInt8.check_lower(value.unused)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_UPLOAD():
            buf.write_i32(1)
            _UniffiConverterTypePingRequest.write(value.request, buf)
        if value.is_WAIT():
            buf.write_i32(2)
            _UniffiConverterUInt64.write(value.time, buf)
        if value.is_DONE():
            buf.write_i32(3)
            _UniffiConverterInt8.write(value.unused, buf)







class TimeUnit(enum.Enum):
    NANOSECOND = 0
    
    MICROSECOND = 1
    
    MILLISECOND = 2
    
    SECOND = 3
    
    MINUTE = 4
    
    HOUR = 5
    
    DAY = 6
    


class _UniffiConverterTypeTimeUnit(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TimeUnit.NANOSECOND
        if variant == 2:
            return TimeUnit.MICROSECOND
        if variant == 3:
            return TimeUnit.MILLISECOND
        if variant == 4:
            return TimeUnit.SECOND
        if variant == 5:
            return TimeUnit.MINUTE
        if variant == 6:
            return TimeUnit.HOUR
        if variant == 7:
            return TimeUnit.DAY
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == TimeUnit.NANOSECOND:
            return
        if value == TimeUnit.MICROSECOND:
            return
        if value == TimeUnit.MILLISECOND:
            return
        if value == TimeUnit.SECOND:
            return
        if value == TimeUnit.MINUTE:
            return
        if value == TimeUnit.HOUR:
            return
        if value == TimeUnit.DAY:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == TimeUnit.NANOSECOND:
            buf.write_i32(1)
        if value == TimeUnit.MICROSECOND:
            buf.write_i32(2)
        if value == TimeUnit.MILLISECOND:
            buf.write_i32(3)
        if value == TimeUnit.SECOND:
            buf.write_i32(4)
        if value == TimeUnit.MINUTE:
            buf.write_i32(5)
        if value == TimeUnit.HOUR:
            buf.write_i32(6)
        if value == TimeUnit.DAY:
            buf.write_i32(7)







class UploadResult:
    def __init__(self):
        raise RuntimeError("UploadResult cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class RECOVERABLE_FAILURE:
        unused: "int"

        def __init__(self,unused: "int"):
            self.unused = unused

        def __str__(self):
            return "UploadResult.RECOVERABLE_FAILURE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_RECOVERABLE_FAILURE():
                return False
            if self.unused != other.unused:
                return False
            return True
    
    class UNRECOVERABLE_FAILURE:
        unused: "int"

        def __init__(self,unused: "int"):
            self.unused = unused

        def __str__(self):
            return "UploadResult.UNRECOVERABLE_FAILURE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_UNRECOVERABLE_FAILURE():
                return False
            if self.unused != other.unused:
                return False
            return True
    
    class INCAPABLE:
        unused: "int"

        def __init__(self,unused: "int"):
            self.unused = unused

        def __str__(self):
            return "UploadResult.INCAPABLE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_INCAPABLE():
                return False
            if self.unused != other.unused:
                return False
            return True
    
    class HTTP_STATUS:
        code: "int"

        def __init__(self,code: "int"):
            self.code = code

        def __str__(self):
            return "UploadResult.HTTP_STATUS(code={})".format(self.code)

        def __eq__(self, other):
            if not other.is_HTTP_STATUS():
                return False
            if self.code != other.code:
                return False
            return True
    
    class DONE:
        unused: "int"

        def __init__(self,unused: "int"):
            self.unused = unused

        def __str__(self):
            return "UploadResult.DONE(unused={})".format(self.unused)

        def __eq__(self, other):
            if not other.is_DONE():
                return False
            if self.unused != other.unused:
                return False
            return True
    
    

    # For each variant, we have `is_NAME` and `is_name` methods for easily checking
    # whether an instance is that variant.
    def is_RECOVERABLE_FAILURE(self) -> bool:
        return isinstance(self, UploadResult.RECOVERABLE_FAILURE)
    def is_recoverable_failure(self) -> bool:
        return isinstance(self, UploadResult.RECOVERABLE_FAILURE)
    def is_UNRECOVERABLE_FAILURE(self) -> bool:
        return isinstance(self, UploadResult.UNRECOVERABLE_FAILURE)
    def is_unrecoverable_failure(self) -> bool:
        return isinstance(self, UploadResult.UNRECOVERABLE_FAILURE)
    def is_INCAPABLE(self) -> bool:
        return isinstance(self, UploadResult.INCAPABLE)
    def is_incapable(self) -> bool:
        return isinstance(self, UploadResult.INCAPABLE)
    def is_HTTP_STATUS(self) -> bool:
        return isinstance(self, UploadResult.HTTP_STATUS)
    def is_http_status(self) -> bool:
        return isinstance(self, UploadResult.HTTP_STATUS)
    def is_DONE(self) -> bool:
        return isinstance(self, UploadResult.DONE)
    def is_done(self) -> bool:
        return isinstance(self, UploadResult.DONE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
UploadResult.RECOVERABLE_FAILURE = type("UploadResult.RECOVERABLE_FAILURE", (UploadResult.RECOVERABLE_FAILURE, UploadResult,), {})  # type: ignore
UploadResult.UNRECOVERABLE_FAILURE = type("UploadResult.UNRECOVERABLE_FAILURE", (UploadResult.UNRECOVERABLE_FAILURE, UploadResult,), {})  # type: ignore
UploadResult.INCAPABLE = type("UploadResult.INCAPABLE", (UploadResult.INCAPABLE, UploadResult,), {})  # type: ignore
UploadResult.HTTP_STATUS = type("UploadResult.HTTP_STATUS", (UploadResult.HTTP_STATUS, UploadResult,), {})  # type: ignore
UploadResult.DONE = type("UploadResult.DONE", (UploadResult.DONE, UploadResult,), {})  # type: ignore




class _UniffiConverterTypeUploadResult(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return UploadResult.RECOVERABLE_FAILURE(
                _UniffiConverterInt8.read(buf),
            )
        if variant == 2:
            return UploadResult.UNRECOVERABLE_FAILURE(
                _UniffiConverterInt8.read(buf),
            )
        if variant == 3:
            return UploadResult.INCAPABLE(
                _UniffiConverterInt8.read(buf),
            )
        if variant == 4:
            return UploadResult.HTTP_STATUS(
                _UniffiConverterInt32.read(buf),
            )
        if variant == 5:
            return UploadResult.DONE(
                _UniffiConverterInt8.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_RECOVERABLE_FAILURE():
            _UniffiConverterInt8.check_lower(value.unused)
            return
        if value.is_UNRECOVERABLE_FAILURE():
            _UniffiConverterInt8.check_lower(value.unused)
            return
        if value.is_INCAPABLE():
            _UniffiConverterInt8.check_lower(value.unused)
            return
        if value.is_HTTP_STATUS():
            _UniffiConverterInt32.check_lower(value.code)
            return
        if value.is_DONE():
            _UniffiConverterInt8.check_lower(value.unused)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_RECOVERABLE_FAILURE():
            buf.write_i32(1)
            _UniffiConverterInt8.write(value.unused, buf)
        if value.is_UNRECOVERABLE_FAILURE():
            buf.write_i32(2)
            _UniffiConverterInt8.write(value.unused, buf)
        if value.is_INCAPABLE():
            buf.write_i32(3)
            _UniffiConverterInt8.write(value.unused, buf)
        if value.is_HTTP_STATUS():
            buf.write_i32(4)
            _UniffiConverterInt32.write(value.code, buf)
        if value.is_DONE():
            buf.write_i32(5)
            _UniffiConverterInt8.write(value.unused, buf)







class UploadTaskAction(enum.Enum):
    NEXT = 0
    
    END = 1
    


class _UniffiConverterTypeUploadTaskAction(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return UploadTaskAction.NEXT
        if variant == 2:
            return UploadTaskAction.END
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == UploadTaskAction.NEXT:
            return
        if value == UploadTaskAction.END:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == UploadTaskAction.NEXT:
            buf.write_i32(1)
        if value == UploadTaskAction.END:
            buf.write_i32(2)






class GleanEventListener(typing.Protocol):
    def on_event_recorded(self, id: "str"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplGleanEventListener:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_GLEAN_EVENT_LISTENER_METHOD0
    def on_event_recorded(
            uniffi_handle,
            id,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeGleanEventListener._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(id), )
            method = uniffi_obj.on_event_recorded
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeGleanEventListener._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceGleanEventListener(
        on_event_recorded,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_glean_core_fn_init_callback_vtable_gleaneventlistener(ctypes.byref(_uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterTypeGleanEventListener = _UniffiCallbackInterfaceFfiConverter()




class OnGleanEvents(typing.Protocol):
    def initialize_finished(self, ):
        raise NotImplementedError
    def trigger_upload(self, ):
        raise NotImplementedError
    def start_metrics_ping_scheduler(self, ):
        raise NotImplementedError
    def cancel_uploads(self, ):
        raise NotImplementedError
    def shutdown(self, ):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplOnGleanEvents:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD0
    def initialize_finished(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeOnGleanEvents._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.initialize_finished
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD1
    def trigger_upload(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeOnGleanEvents._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.trigger_upload
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                CallbackError,
                _UniffiConverterTypeCallbackError.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD2
    def start_metrics_ping_scheduler(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeOnGleanEvents._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.start_metrics_ping_scheduler
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD3
    def cancel_uploads(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeOnGleanEvents._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.cancel_uploads
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                CallbackError,
                _UniffiConverterTypeCallbackError.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_ON_GLEAN_EVENTS_METHOD4
    def shutdown(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeOnGleanEvents._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.shutdown
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                CallbackError,
                _UniffiConverterTypeCallbackError.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeOnGleanEvents._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceOnGleanEvents(
        initialize_finished,
        trigger_upload,
        start_metrics_ping_scheduler,
        cancel_uploads,
        shutdown,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_glean_core_fn_init_callback_vtable_ongleanevents(ctypes.byref(_uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterTypeOnGleanEvents = _UniffiCallbackInterfaceFfiConverter()



class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterInt64.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBool(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterBool.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBool.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBool.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeDatetime(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeDatetime.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeDatetime.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeDatetime.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeDistributionData(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeDistributionData.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeDistributionData.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeDistributionData.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypePingRateLimit(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypePingRateLimit.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypePingRateLimit.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypePingRateLimit.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeRate(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeRate.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRate.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRate.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeRecordedExperiment(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeRecordedExperiment.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRecordedExperiment.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRecordedExperiment.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeDynamicLabelType(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeDynamicLabelType.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeDynamicLabelType.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeDynamicLabelType.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeLevelFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeLevelFilter.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeLevelFilter.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeLevelFilter.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeRecordedEvent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceTypeRecordedEvent.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeRecordedEvent.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeRecordedEvent.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeCowString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceTypeCowString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeCowString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeCowString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterMapStringInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterMapStringInt64.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringBool(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterMapStringBool.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringBool.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringBool.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterMapStringString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringMapStringInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterMapStringMapStringInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringMapStringInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringMapStringInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeJsonValue(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeJsonValue.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeJsonValue.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeJsonValue.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterUInt8.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt8.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterInt64.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterInt64.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterInt64.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeCommonMetricData(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeCommonMetricData.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCommonMetricData.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeCommonMetricData.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeRecordedEvent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeRecordedEvent.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeRecordedEvent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeRecordedEvent.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeCowString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeCowString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCowString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeCowString.read(buf) for i in range(count)
        ]



class _UniffiConverterMapInt64Int64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterInt64.check_lower(key)
            _UniffiConverterInt64.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterInt64.write(key, buf)
            _UniffiConverterInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterInt64.read(buf)
            val = _UniffiConverterInt64.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterInt32.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterInt32.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterInt64.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterInt64.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringBool(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterBool.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterBool.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterBool.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterString.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterSequenceString.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringMapStringInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterMapStringInt32.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterMapStringInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterMapStringInt32.read(buf)
            d[key] = val
        return d


class _UniffiConverterTypeCowString:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypeJsonValue:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)

# objects.
class BooleanMetricProtocol(typing.Protocol):
    def set(self, value: "bool"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# BooleanMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class BooleanMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_booleanmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_booleanmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_booleanmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "bool") -> None:
        _UniffiConverterBool.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[bool]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalBool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_booleanmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeBooleanMetric:

    @staticmethod
    def lift(value: int):
        return BooleanMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: BooleanMetric):
        if not isinstance(value, BooleanMetric):
            raise TypeError("Expected BooleanMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: BooleanMetricProtocol):
        if not isinstance(value, BooleanMetric):
            raise TypeError("Expected BooleanMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: BooleanMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class CounterMetricProtocol(typing.Protocol):
    def add(self, amount: "typing.Union[object, int]" = _DEFAULT):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# CounterMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class CounterMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_countermetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_countermetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_countermetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add(self, amount: "typing.Union[object, int]" = _DEFAULT) -> None:
        if amount is _DEFAULT:
            amount = 1
        _UniffiConverterInt32.check_lower(amount)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_countermetric_add,self._uniffi_clone_pointer(),
        _UniffiConverterInt32.lower(amount))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_countermetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeCounterMetric:

    @staticmethod
    def lift(value: int):
        return CounterMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: CounterMetric):
        if not isinstance(value, CounterMetric):
            raise TypeError("Expected CounterMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CounterMetricProtocol):
        if not isinstance(value, CounterMetric):
            raise TypeError("Expected CounterMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CounterMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class CustomDistributionMetricProtocol(typing.Protocol):
    def accumulate_samples(self, samples: "typing.List[int]"):
        raise NotImplementedError
    def accumulate_single_sample(self, sample: "int"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# CustomDistributionMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class CustomDistributionMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",range_min: "int",range_max: "int",bucket_count: "int",histogram_type: "HistogramType"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterInt64.check_lower(range_min)
        
        _UniffiConverterInt64.check_lower(range_max)
        
        _UniffiConverterInt64.check_lower(bucket_count)
        
        _UniffiConverterTypeHistogramType.check_lower(histogram_type)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_customdistributionmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterInt64.lower(range_min),
        _UniffiConverterInt64.lower(range_max),
        _UniffiConverterInt64.lower(bucket_count),
        _UniffiConverterTypeHistogramType.lower(histogram_type))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_customdistributionmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_customdistributionmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def accumulate_samples(self, samples: "typing.List[int]") -> None:
        _UniffiConverterSequenceInt64.check_lower(samples)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_samples,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt64.lower(samples))






    def accumulate_single_sample(self, sample: "int") -> None:
        _UniffiConverterInt64.check_lower(sample)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_accumulate_single_sample,self._uniffi_clone_pointer(),
        _UniffiConverterInt64.lower(sample))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[DistributionData]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalTypeDistributionData.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_customdistributionmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeCustomDistributionMetric:

    @staticmethod
    def lift(value: int):
        return CustomDistributionMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: CustomDistributionMetric):
        if not isinstance(value, CustomDistributionMetric):
            raise TypeError("Expected CustomDistributionMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CustomDistributionMetricProtocol):
        if not isinstance(value, CustomDistributionMetric):
            raise TypeError("Expected CustomDistributionMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CustomDistributionMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class DatetimeMetricProtocol(typing.Protocol):
    def set(self, value: "typing.Union[object, typing.Optional[Datetime]]" = _DEFAULT):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
    def test_get_value_as_string(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# DatetimeMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class DatetimeMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",time_unit: "TimeUnit"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterTypeTimeUnit.check_lower(time_unit)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_datetimemetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeTimeUnit.lower(time_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_datetimemetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_datetimemetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "typing.Union[object, typing.Optional[Datetime]]" = _DEFAULT) -> None:
        if value is _DEFAULT:
            value = None
        _UniffiConverterOptionalTypeDatetime.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalTypeDatetime.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[Datetime]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalTypeDatetime.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )





    def test_get_value_as_string(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_datetimemetric_test_get_value_as_string,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeDatetimeMetric:

    @staticmethod
    def lift(value: int):
        return DatetimeMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: DatetimeMetric):
        if not isinstance(value, DatetimeMetric):
            raise TypeError("Expected DatetimeMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: DatetimeMetricProtocol):
        if not isinstance(value, DatetimeMetric):
            raise TypeError("Expected DatetimeMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: DatetimeMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class DenominatorMetricProtocol(typing.Protocol):
    def add(self, amount: "int"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# DenominatorMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class DenominatorMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",numerators: "typing.List[CommonMetricData]"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterSequenceTypeCommonMetricData.check_lower(numerators)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_denominatormetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterSequenceTypeCommonMetricData.lower(numerators))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_denominatormetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_denominatormetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add(self, amount: "int") -> None:
        _UniffiConverterInt32.check_lower(amount)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_add,self._uniffi_clone_pointer(),
        _UniffiConverterInt32.lower(amount))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_denominatormetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeDenominatorMetric:

    @staticmethod
    def lift(value: int):
        return DenominatorMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: DenominatorMetric):
        if not isinstance(value, DenominatorMetric):
            raise TypeError("Expected DenominatorMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: DenominatorMetricProtocol):
        if not isinstance(value, DenominatorMetric):
            raise TypeError("Expected DenominatorMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: DenominatorMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class DualLabeledCounterMetricProtocol(typing.Protocol):
    def get(self, key: "str",category: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# DualLabeledCounterMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class DualLabeledCounterMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",keys: "typing.Optional[typing.List[CowString]]",categories: "typing.Optional[typing.List[CowString]]"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterOptionalSequenceTypeCowString.check_lower(keys)
        
        _UniffiConverterOptionalSequenceTypeCowString.check_lower(categories)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_duallabeledcountermetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(keys),
        _UniffiConverterOptionalSequenceTypeCowString.lower(categories))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_duallabeledcountermetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_duallabeledcountermetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, key: "str",category: "str") -> "CounterMetric":
        _UniffiConverterString.check_lower(key)
        
        _UniffiConverterString.check_lower(category)
        
        return _UniffiConverterTypeCounterMetric.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_get,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(key),
        _UniffiConverterString.lower(category))
        )





    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[dict[str, dict[str, int]]]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalMapStringMapStringInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_duallabeledcountermetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeDualLabeledCounterMetric:

    @staticmethod
    def lift(value: int):
        return DualLabeledCounterMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: DualLabeledCounterMetric):
        if not isinstance(value, DualLabeledCounterMetric):
            raise TypeError("Expected DualLabeledCounterMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: DualLabeledCounterMetricProtocol):
        if not isinstance(value, DualLabeledCounterMetric):
            raise TypeError("Expected DualLabeledCounterMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: DualLabeledCounterMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class EventMetricProtocol(typing.Protocol):
    def record(self, extra: "dict[str, str]"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# EventMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class EventMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",allowed_extra_keys: "typing.List[str]"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterSequenceString.check_lower(allowed_extra_keys)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_eventmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterSequenceString.lower(allowed_extra_keys))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_eventmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_eventmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def record(self, extra: "dict[str, str]") -> None:
        _UniffiConverterMapStringString.check_lower(extra)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_eventmetric_record,self._uniffi_clone_pointer(),
        _UniffiConverterMapStringString.lower(extra))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[typing.List[RecordedEvent]]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalSequenceTypeRecordedEvent.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_eventmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeEventMetric:

    @staticmethod
    def lift(value: int):
        return EventMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: EventMetric):
        if not isinstance(value, EventMetric):
            raise TypeError("Expected EventMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: EventMetricProtocol):
        if not isinstance(value, EventMetric):
            raise TypeError("Expected EventMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: EventMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class LabeledBooleanProtocol(typing.Protocol):
    def get(self, label: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# LabeledBoolean is a Rust-only trait - it's a wrapper around a Rust implementation.
class LabeledBoolean():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "LabeledMetricData",labels: "typing.Optional[typing.List[CowString]]"):
        _UniffiConverterTypeLabeledMetricData.check_lower(meta)
        
        _UniffiConverterOptionalSequenceTypeCowString.check_lower(labels)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_labeledboolean_new,
        _UniffiConverterTypeLabeledMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(labels))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_labeledboolean, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_labeledboolean, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, label: "str") -> "BooleanMetric":
        _UniffiConverterString.check_lower(label)
        
        return _UniffiConverterTypeBooleanMetric.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_get,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(label))
        )





    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[dict[str, bool]]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalMapStringBool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledboolean_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeLabeledBoolean:

    @staticmethod
    def lift(value: int):
        return LabeledBoolean._make_instance_(value)

    @staticmethod
    def check_lower(value: LabeledBoolean):
        if not isinstance(value, LabeledBoolean):
            raise TypeError("Expected LabeledBoolean instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: LabeledBooleanProtocol):
        if not isinstance(value, LabeledBoolean):
            raise TypeError("Expected LabeledBoolean instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: LabeledBooleanProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class LabeledCounterProtocol(typing.Protocol):
    def get(self, label: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# LabeledCounter is a Rust-only trait - it's a wrapper around a Rust implementation.
class LabeledCounter():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "LabeledMetricData",labels: "typing.Optional[typing.List[CowString]]"):
        _UniffiConverterTypeLabeledMetricData.check_lower(meta)
        
        _UniffiConverterOptionalSequenceTypeCowString.check_lower(labels)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_labeledcounter_new,
        _UniffiConverterTypeLabeledMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(labels))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_labeledcounter, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_labeledcounter, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, label: "str") -> "CounterMetric":
        _UniffiConverterString.check_lower(label)
        
        return _UniffiConverterTypeCounterMetric.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_get,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(label))
        )





    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[dict[str, int]]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalMapStringInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledcounter_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeLabeledCounter:

    @staticmethod
    def lift(value: int):
        return LabeledCounter._make_instance_(value)

    @staticmethod
    def check_lower(value: LabeledCounter):
        if not isinstance(value, LabeledCounter):
            raise TypeError("Expected LabeledCounter instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: LabeledCounterProtocol):
        if not isinstance(value, LabeledCounter):
            raise TypeError("Expected LabeledCounter instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: LabeledCounterProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class LabeledQuantityProtocol(typing.Protocol):
    def get(self, label: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# LabeledQuantity is a Rust-only trait - it's a wrapper around a Rust implementation.
class LabeledQuantity():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "LabeledMetricData",labels: "typing.Optional[typing.List[CowString]]"):
        _UniffiConverterTypeLabeledMetricData.check_lower(meta)
        
        _UniffiConverterOptionalSequenceTypeCowString.check_lower(labels)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_labeledquantity_new,
        _UniffiConverterTypeLabeledMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(labels))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_labeledquantity, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_labeledquantity, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, label: "str") -> "QuantityMetric":
        _UniffiConverterString.check_lower(label)
        
        return _UniffiConverterTypeQuantityMetric.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_get,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(label))
        )





    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[dict[str, int]]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalMapStringInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledquantity_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeLabeledQuantity:

    @staticmethod
    def lift(value: int):
        return LabeledQuantity._make_instance_(value)

    @staticmethod
    def check_lower(value: LabeledQuantity):
        if not isinstance(value, LabeledQuantity):
            raise TypeError("Expected LabeledQuantity instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: LabeledQuantityProtocol):
        if not isinstance(value, LabeledQuantity):
            raise TypeError("Expected LabeledQuantity instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: LabeledQuantityProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class LabeledStringProtocol(typing.Protocol):
    def get(self, label: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# LabeledString is a Rust-only trait - it's a wrapper around a Rust implementation.
class LabeledString():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "LabeledMetricData",labels: "typing.Optional[typing.List[CowString]]"):
        _UniffiConverterTypeLabeledMetricData.check_lower(meta)
        
        _UniffiConverterOptionalSequenceTypeCowString.check_lower(labels)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_labeledstring_new,
        _UniffiConverterTypeLabeledMetricData.lower(meta),
        _UniffiConverterOptionalSequenceTypeCowString.lower(labels))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_labeledstring, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_labeledstring, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get(self, label: "str") -> "StringMetric":
        _UniffiConverterString.check_lower(label)
        
        return _UniffiConverterTypeStringMetric.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledstring_get,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(label))
        )





    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[dict[str, str]]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalMapStringString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_labeledstring_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeLabeledString:

    @staticmethod
    def lift(value: int):
        return LabeledString._make_instance_(value)

    @staticmethod
    def check_lower(value: LabeledString):
        if not isinstance(value, LabeledString):
            raise TypeError("Expected LabeledString instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: LabeledStringProtocol):
        if not isinstance(value, LabeledString):
            raise TypeError("Expected LabeledString instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: LabeledStringProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class MemoryDistributionMetricProtocol(typing.Protocol):
    def accumulate(self, sample: "int"):
        raise NotImplementedError
    def accumulate_samples(self, samples: "typing.List[int]"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# MemoryDistributionMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class MemoryDistributionMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",memory_unit: "MemoryUnit"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterTypeMemoryUnit.check_lower(memory_unit)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_memorydistributionmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeMemoryUnit.lower(memory_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_memorydistributionmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_memorydistributionmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def accumulate(self, sample: "int") -> None:
        _UniffiConverterInt64.check_lower(sample)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate,self._uniffi_clone_pointer(),
        _UniffiConverterInt64.lower(sample))






    def accumulate_samples(self, samples: "typing.List[int]") -> None:
        _UniffiConverterSequenceInt64.check_lower(samples)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_accumulate_samples,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt64.lower(samples))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[DistributionData]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalTypeDistributionData.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_memorydistributionmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeMemoryDistributionMetric:

    @staticmethod
    def lift(value: int):
        return MemoryDistributionMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: MemoryDistributionMetric):
        if not isinstance(value, MemoryDistributionMetric):
            raise TypeError("Expected MemoryDistributionMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: MemoryDistributionMetricProtocol):
        if not isinstance(value, MemoryDistributionMetric):
            raise TypeError("Expected MemoryDistributionMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: MemoryDistributionMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class NumeratorMetricProtocol(typing.Protocol):
    def add_to_numerator(self, amount: "int"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# NumeratorMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class NumeratorMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_numeratormetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_numeratormetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_numeratormetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_to_numerator(self, amount: "int") -> None:
        _UniffiConverterInt32.check_lower(amount)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_add_to_numerator,self._uniffi_clone_pointer(),
        _UniffiConverterInt32.lower(amount))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[Rate]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalTypeRate.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_numeratormetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeNumeratorMetric:

    @staticmethod
    def lift(value: int):
        return NumeratorMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: NumeratorMetric):
        if not isinstance(value, NumeratorMetric):
            raise TypeError("Expected NumeratorMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NumeratorMetricProtocol):
        if not isinstance(value, NumeratorMetric):
            raise TypeError("Expected NumeratorMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NumeratorMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class ObjectMetricProtocol(typing.Protocol):
    def record_schema_error(self, ):
        raise NotImplementedError
    def set_string(self, object: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# ObjectMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class ObjectMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_objectmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_objectmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_objectmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def record_schema_error(self, ) -> None:
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_objectmetric_record_schema_error,self._uniffi_clone_pointer(),)






    def set_string(self, object: "str") -> None:
        _UniffiConverterString.check_lower(object)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_objectmetric_set_string,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(object))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_objectmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[JsonValue]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalTypeJsonValue.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_objectmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeObjectMetric:

    @staticmethod
    def lift(value: int):
        return ObjectMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: ObjectMetric):
        if not isinstance(value, ObjectMetric):
            raise TypeError("Expected ObjectMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ObjectMetricProtocol):
        if not isinstance(value, ObjectMetric):
            raise TypeError("Expected ObjectMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ObjectMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class PingTypeProtocol(typing.Protocol):
    def set_enabled(self, enabled: "bool"):
        raise NotImplementedError
    def submit(self, reason: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# PingType is a Rust-only trait - it's a wrapper around a Rust implementation.
class PingType():
    _pointer: ctypes.c_void_p
    def __init__(self, name: "str",include_client_id: "bool",send_if_empty: "bool",precise_timestamps: "bool",include_info_sections: "bool",enabled: "bool",schedules_pings: "typing.List[str]",reason_codes: "typing.List[str]",follows_collection_enabled: "bool",uploader_capabilities: "typing.List[str]"):
        _UniffiConverterString.check_lower(name)
        
        _UniffiConverterBool.check_lower(include_client_id)
        
        _UniffiConverterBool.check_lower(send_if_empty)
        
        _UniffiConverterBool.check_lower(precise_timestamps)
        
        _UniffiConverterBool.check_lower(include_info_sections)
        
        _UniffiConverterBool.check_lower(enabled)
        
        _UniffiConverterSequenceString.check_lower(schedules_pings)
        
        _UniffiConverterSequenceString.check_lower(reason_codes)
        
        _UniffiConverterBool.check_lower(follows_collection_enabled)
        
        _UniffiConverterSequenceString.check_lower(uploader_capabilities)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_pingtype_new,
        _UniffiConverterString.lower(name),
        _UniffiConverterBool.lower(include_client_id),
        _UniffiConverterBool.lower(send_if_empty),
        _UniffiConverterBool.lower(precise_timestamps),
        _UniffiConverterBool.lower(include_info_sections),
        _UniffiConverterBool.lower(enabled),
        _UniffiConverterSequenceString.lower(schedules_pings),
        _UniffiConverterSequenceString.lower(reason_codes),
        _UniffiConverterBool.lower(follows_collection_enabled),
        _UniffiConverterSequenceString.lower(uploader_capabilities))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_pingtype, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_pingtype, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set_enabled(self, enabled: "bool") -> None:
        _UniffiConverterBool.check_lower(enabled)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_pingtype_set_enabled,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(enabled))






    def submit(self, reason: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> None:
        if reason is _DEFAULT:
            reason = None
        _UniffiConverterOptionalString.check_lower(reason)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_pingtype_submit,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(reason))







class _UniffiConverterTypePingType:

    @staticmethod
    def lift(value: int):
        return PingType._make_instance_(value)

    @staticmethod
    def check_lower(value: PingType):
        if not isinstance(value, PingType):
            raise TypeError("Expected PingType instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: PingTypeProtocol):
        if not isinstance(value, PingType):
            raise TypeError("Expected PingType instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PingTypeProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class QuantityMetricProtocol(typing.Protocol):
    def set(self, value: "int"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# QuantityMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class QuantityMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_quantitymetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_quantitymetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_quantitymetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "int") -> None:
        _UniffiConverterInt64.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterInt64.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_quantitymetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeQuantityMetric:

    @staticmethod
    def lift(value: int):
        return QuantityMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: QuantityMetric):
        if not isinstance(value, QuantityMetric):
            raise TypeError("Expected QuantityMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: QuantityMetricProtocol):
        if not isinstance(value, QuantityMetric):
            raise TypeError("Expected QuantityMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: QuantityMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class RateMetricProtocol(typing.Protocol):
    def add_to_denominator(self, amount: "int"):
        raise NotImplementedError
    def add_to_numerator(self, amount: "int"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# RateMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class RateMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_ratemetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_ratemetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_ratemetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_to_denominator(self, amount: "int") -> None:
        _UniffiConverterInt32.check_lower(amount)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_denominator,self._uniffi_clone_pointer(),
        _UniffiConverterInt32.lower(amount))






    def add_to_numerator(self, amount: "int") -> None:
        _UniffiConverterInt32.check_lower(amount)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_add_to_numerator,self._uniffi_clone_pointer(),
        _UniffiConverterInt32.lower(amount))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[Rate]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalTypeRate.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_ratemetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeRateMetric:

    @staticmethod
    def lift(value: int):
        return RateMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: RateMetric):
        if not isinstance(value, RateMetric):
            raise TypeError("Expected RateMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RateMetricProtocol):
        if not isinstance(value, RateMetric):
            raise TypeError("Expected RateMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RateMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class StringListMetricProtocol(typing.Protocol):
    def add(self, value: "str"):
        raise NotImplementedError
    def set(self, value: "typing.List[str]"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# StringListMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class StringListMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_stringlistmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_stringlistmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_stringlistmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add(self, value: "str") -> None:
        _UniffiConverterString.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_add,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(value))






    def set(self, value: "typing.List[str]") -> None:
        _UniffiConverterSequenceString.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[typing.List[str]]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalSequenceString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringlistmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeStringListMetric:

    @staticmethod
    def lift(value: int):
        return StringListMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: StringListMetric):
        if not isinstance(value, StringListMetric):
            raise TypeError("Expected StringListMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: StringListMetricProtocol):
        if not isinstance(value, StringListMetric):
            raise TypeError("Expected StringListMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: StringListMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class StringMetricProtocol(typing.Protocol):
    def set(self, value: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# StringMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class StringMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_stringmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_stringmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_stringmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "str") -> None:
        _UniffiConverterString.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringmetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_stringmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeStringMetric:

    @staticmethod
    def lift(value: int):
        return StringMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: StringMetric):
        if not isinstance(value, StringMetric):
            raise TypeError("Expected StringMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: StringMetricProtocol):
        if not isinstance(value, StringMetric):
            raise TypeError("Expected StringMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: StringMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class TextMetricProtocol(typing.Protocol):
    def set(self, value: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# TextMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class TextMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_textmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_textmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_textmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "str") -> None:
        _UniffiConverterString.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_textmetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_textmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeTextMetric:

    @staticmethod
    def lift(value: int):
        return TextMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: TextMetric):
        if not isinstance(value, TextMetric):
            raise TypeError("Expected TextMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: TextMetricProtocol):
        if not isinstance(value, TextMetric):
            raise TypeError("Expected TextMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: TextMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class TimespanMetricProtocol(typing.Protocol):
    def cancel(self, ):
        raise NotImplementedError
    def set_raw_nanos(self, elapsed: "int"):
        raise NotImplementedError
    def start(self, ):
        raise NotImplementedError
    def stop(self, ):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# TimespanMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class TimespanMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",time_unit: "TimeUnit"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterTypeTimeUnit.check_lower(time_unit)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_timespanmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeTimeUnit.lower(time_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_timespanmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_timespanmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def cancel(self, ) -> None:
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_cancel,self._uniffi_clone_pointer(),)






    def set_raw_nanos(self, elapsed: "int") -> None:
        _UniffiConverterInt64.check_lower(elapsed)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_set_raw_nanos,self._uniffi_clone_pointer(),
        _UniffiConverterInt64.lower(elapsed))






    def start(self, ) -> None:
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_start,self._uniffi_clone_pointer(),)






    def stop(self, ) -> None:
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_stop,self._uniffi_clone_pointer(),)






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[int]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timespanmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeTimespanMetric:

    @staticmethod
    def lift(value: int):
        return TimespanMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: TimespanMetric):
        if not isinstance(value, TimespanMetric):
            raise TypeError("Expected TimespanMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: TimespanMetricProtocol):
        if not isinstance(value, TimespanMetric):
            raise TypeError("Expected TimespanMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: TimespanMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class TimingDistributionMetricProtocol(typing.Protocol):
    def accumulate_samples(self, samples: "typing.List[int]"):
        raise NotImplementedError
    def accumulate_single_sample(self, sample: "int"):
        raise NotImplementedError
    def cancel(self, timer_id: "TimerId"):
        raise NotImplementedError
    def start(self, ):
        raise NotImplementedError
    def stop_and_accumulate(self, timer_id: "TimerId"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# TimingDistributionMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class TimingDistributionMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData",time_unit: "TimeUnit"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        _UniffiConverterTypeTimeUnit.check_lower(time_unit)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_timingdistributionmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta),
        _UniffiConverterTypeTimeUnit.lower(time_unit))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_timingdistributionmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_timingdistributionmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def accumulate_samples(self, samples: "typing.List[int]") -> None:
        _UniffiConverterSequenceInt64.check_lower(samples)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_samples,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt64.lower(samples))






    def accumulate_single_sample(self, sample: "int") -> None:
        _UniffiConverterInt64.check_lower(sample)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_accumulate_single_sample,self._uniffi_clone_pointer(),
        _UniffiConverterInt64.lower(sample))






    def cancel(self, timer_id: "TimerId") -> None:
        _UniffiConverterTypeTimerId.check_lower(timer_id)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_cancel,self._uniffi_clone_pointer(),
        _UniffiConverterTypeTimerId.lower(timer_id))






    def start(self, ) -> "TimerId":
        return _UniffiConverterTypeTimerId.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_start,self._uniffi_clone_pointer(),)
        )





    def stop_and_accumulate(self, timer_id: "TimerId") -> None:
        _UniffiConverterTypeTimerId.check_lower(timer_id)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_stop_and_accumulate,self._uniffi_clone_pointer(),
        _UniffiConverterTypeTimerId.lower(timer_id))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[DistributionData]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalTypeDistributionData.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_timingdistributionmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeTimingDistributionMetric:

    @staticmethod
    def lift(value: int):
        return TimingDistributionMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: TimingDistributionMetric):
        if not isinstance(value, TimingDistributionMetric):
            raise TypeError("Expected TimingDistributionMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: TimingDistributionMetricProtocol):
        if not isinstance(value, TimingDistributionMetric):
            raise TypeError("Expected TimingDistributionMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: TimingDistributionMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class UrlMetricProtocol(typing.Protocol):
    def set(self, value: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# UrlMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class UrlMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_urlmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_urlmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_urlmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set(self, value: "str") -> None:
        _UniffiConverterString.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_urlmetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_urlmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeUrlMetric:

    @staticmethod
    def lift(value: int):
        return UrlMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: UrlMetric):
        if not isinstance(value, UrlMetric):
            raise TypeError("Expected UrlMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: UrlMetricProtocol):
        if not isinstance(value, UrlMetric):
            raise TypeError("Expected UrlMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: UrlMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class UuidMetricProtocol(typing.Protocol):
    def generate_and_set(self, ):
        raise NotImplementedError
    def set(self, value: "str"):
        raise NotImplementedError
    def test_get_num_recorded_errors(self, error: "ErrorType"):
        raise NotImplementedError
    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT):
        raise NotImplementedError
# UuidMetric is a Rust-only trait - it's a wrapper around a Rust implementation.
class UuidMetric():
    _pointer: ctypes.c_void_p
    def __init__(self, meta: "CommonMetricData"):
        _UniffiConverterTypeCommonMetricData.check_lower(meta)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_constructor_uuidmetric_new,
        _UniffiConverterTypeCommonMetricData.lower(meta))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_free_uuidmetric, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_clone_uuidmetric, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def generate_and_set(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_generate_and_set,self._uniffi_clone_pointer(),)
        )





    def set(self, value: "str") -> None:
        _UniffiConverterString.check_lower(value)
        
        _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_set,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(value))






    def test_get_num_recorded_errors(self, error: "ErrorType") -> "int":
        _UniffiConverterTypeErrorType.check_lower(error)
        
        return _UniffiConverterInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_num_recorded_errors,self._uniffi_clone_pointer(),
        _UniffiConverterTypeErrorType.lower(error))
        )





    def test_get_value(self, ping_name: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "typing.Optional[str]":
        if ping_name is _DEFAULT:
            ping_name = None
        _UniffiConverterOptionalString.check_lower(ping_name)
        
        return _UniffiConverterOptionalString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_method_uuidmetric_test_get_value,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(ping_name))
        )






class _UniffiConverterTypeUuidMetric:

    @staticmethod
    def lift(value: int):
        return UuidMetric._make_instance_(value)

    @staticmethod
    def check_lower(value: UuidMetric):
        if not isinstance(value, UuidMetric):
            raise TypeError("Expected UuidMetric instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: UuidMetricProtocol):
        if not isinstance(value, UuidMetric):
            raise TypeError("Expected UuidMetric instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: UuidMetricProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
CowString = str
JsonValue = str

# Async support

def glean_apply_server_knobs_config(json: "str") -> None:
    _UniffiConverterString.check_lower(json)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_apply_server_knobs_config,
        _UniffiConverterString.lower(json))


def glean_enable_logging() -> None:
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging,)


def glean_enable_logging_to_fd(fd: "int") -> None:
    _UniffiConverterUInt64.check_lower(fd)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_enable_logging_to_fd,
        _UniffiConverterUInt64.lower(fd))


def glean_get_debug_view_tag() -> "typing.Optional[str]":
    return _UniffiConverterOptionalString.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_get_debug_view_tag,))


def glean_get_log_pings() -> "bool":
    return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_get_log_pings,))


def glean_get_registered_ping_names() -> "typing.List[str]":
    return _UniffiConverterSequenceString.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_get_registered_ping_names,))


def glean_get_upload_task() -> "PingUploadTask":
    return _UniffiConverterTypePingUploadTask.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_get_upload_task,))


def glean_handle_client_active() -> None:
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_active,)


def glean_handle_client_inactive() -> None:
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_handle_client_inactive,)


def glean_initialize(cfg: "InternalConfiguration",client_info: "ClientInfoMetrics",callbacks: "OnGleanEvents") -> None:
    _UniffiConverterTypeInternalConfiguration.check_lower(cfg)
    
    _UniffiConverterTypeClientInfoMetrics.check_lower(client_info)
    
    _UniffiConverterTypeOnGleanEvents.check_lower(callbacks)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_initialize,
        _UniffiConverterTypeInternalConfiguration.lower(cfg),
        _UniffiConverterTypeClientInfoMetrics.lower(client_info),
        _UniffiConverterTypeOnGleanEvents.lower(callbacks))


def glean_initialize_for_subprocess(cfg: "InternalConfiguration") -> "bool":
    _UniffiConverterTypeInternalConfiguration.check_lower(cfg)
    
    return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_initialize_for_subprocess,
        _UniffiConverterTypeInternalConfiguration.lower(cfg)))


def glean_persist_ping_lifetime_data() -> None:
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_persist_ping_lifetime_data,)


def glean_process_ping_upload_response(uuid: "str",result: "UploadResult") -> "UploadTaskAction":
    _UniffiConverterString.check_lower(uuid)
    
    _UniffiConverterTypeUploadResult.check_lower(result)
    
    return _UniffiConverterTypeUploadTaskAction.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_process_ping_upload_response,
        _UniffiConverterString.lower(uuid),
        _UniffiConverterTypeUploadResult.lower(result)))


def glean_register_event_listener(tag: "str",listener: "GleanEventListener") -> None:
    _UniffiConverterString.check_lower(tag)
    
    _UniffiConverterTypeGleanEventListener.check_lower(listener)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_register_event_listener,
        _UniffiConverterString.lower(tag),
        _UniffiConverterTypeGleanEventListener.lower(listener))


def glean_set_debug_view_tag(tag: "str") -> "bool":
    _UniffiConverterString.check_lower(tag)
    
    return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_debug_view_tag,
        _UniffiConverterString.lower(tag)))


def glean_set_dirty_flag(flag: "bool") -> None:
    _UniffiConverterBool.check_lower(flag)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_dirty_flag,
        _UniffiConverterBool.lower(flag))


def glean_set_experiment_active(experiment_id: "str",branch: "str",extra: "dict[str, str]") -> None:
    _UniffiConverterString.check_lower(experiment_id)
    
    _UniffiConverterString.check_lower(branch)
    
    _UniffiConverterMapStringString.check_lower(extra)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_active,
        _UniffiConverterString.lower(experiment_id),
        _UniffiConverterString.lower(branch),
        _UniffiConverterMapStringString.lower(extra))


def glean_set_experiment_inactive(experiment_id: "str") -> None:
    _UniffiConverterString.check_lower(experiment_id)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_experiment_inactive,
        _UniffiConverterString.lower(experiment_id))


def glean_set_experimentation_id(experimentation_id: "str") -> None:
    _UniffiConverterString.check_lower(experimentation_id)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_experimentation_id,
        _UniffiConverterString.lower(experimentation_id))


def glean_set_log_pings(value: "bool") -> None:
    _UniffiConverterBool.check_lower(value)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_log_pings,
        _UniffiConverterBool.lower(value))


def glean_set_source_tags(tags: "typing.List[str]") -> "bool":
    _UniffiConverterSequenceString.check_lower(tags)
    
    return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_source_tags,
        _UniffiConverterSequenceString.lower(tags)))


def glean_set_test_mode(enabled: "bool") -> None:
    _UniffiConverterBool.check_lower(enabled)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_test_mode,
        _UniffiConverterBool.lower(enabled))


def glean_set_upload_enabled(enabled: "bool") -> None:
    _UniffiConverterBool.check_lower(enabled)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_set_upload_enabled,
        _UniffiConverterBool.lower(enabled))


def glean_shutdown() -> None:
    """
    Shuts down Glean in an orderly fashion.
    """

    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_shutdown,)


def glean_submit_ping_by_name(ping_name: "str",reason: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> None:
    _UniffiConverterString.check_lower(ping_name)
    
    if reason is _DEFAULT:
        reason = None
    _UniffiConverterOptionalString.check_lower(reason)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name,
        _UniffiConverterString.lower(ping_name),
        _UniffiConverterOptionalString.lower(reason))


def glean_submit_ping_by_name_sync(ping_name: "str",reason: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> "bool":
    _UniffiConverterString.check_lower(ping_name)
    
    if reason is _DEFAULT:
        reason = None
    _UniffiConverterOptionalString.check_lower(reason)
    
    return _UniffiConverterBool.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_submit_ping_by_name_sync,
        _UniffiConverterString.lower(ping_name),
        _UniffiConverterOptionalString.lower(reason)))


def glean_test_destroy_glean(clear_stores: "bool",data_path: "typing.Union[object, typing.Optional[str]]" = _DEFAULT) -> None:
    _UniffiConverterBool.check_lower(clear_stores)
    
    if data_path is _DEFAULT:
        data_path = None
    _UniffiConverterOptionalString.check_lower(data_path)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_destroy_glean,
        _UniffiConverterBool.lower(clear_stores),
        _UniffiConverterOptionalString.lower(data_path))


def glean_test_get_attribution() -> "AttributionMetrics":
    return _UniffiConverterTypeAttributionMetrics.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_attribution,))


def glean_test_get_distribution() -> "DistributionMetrics":
    return _UniffiConverterTypeDistributionMetrics.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_distribution,))


def glean_test_get_experiment_data(experiment_id: "str") -> "typing.Optional[RecordedExperiment]":
    _UniffiConverterString.check_lower(experiment_id)
    
    return _UniffiConverterOptionalTypeRecordedExperiment.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experiment_data,
        _UniffiConverterString.lower(experiment_id)))


def glean_test_get_experimentation_id() -> "typing.Optional[str]":
    return _UniffiConverterOptionalString.lift(_uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_test_get_experimentation_id,))


def glean_unregister_event_listener(tag: "str") -> None:
    _UniffiConverterString.check_lower(tag)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_unregister_event_listener,
        _UniffiConverterString.lower(tag))


def glean_update_attribution(attribution: "AttributionMetrics") -> None:
    _UniffiConverterTypeAttributionMetrics.check_lower(attribution)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_update_attribution,
        _UniffiConverterTypeAttributionMetrics.lower(attribution))


def glean_update_distribution(distribution: "DistributionMetrics") -> None:
    _UniffiConverterTypeDistributionMetrics.check_lower(distribution)
    
    _uniffi_rust_call(_UniffiLib.uniffi_glean_core_fn_func_glean_update_distribution,
        _UniffiConverterTypeDistributionMetrics.lower(distribution))


__all__ = [
    "InternalError",
    "CallbackError",
    "DynamicLabelType",
    "ErrorType",
    "HistogramType",
    "LabeledMetricData",
    "LevelFilter",
    "Lifetime",
    "MemoryUnit",
    "PingUploadTask",
    "TimeUnit",
    "UploadResult",
    "UploadTaskAction",
    "AttributionMetrics",
    "ClientInfoMetrics",
    "CommonMetricData",
    "Datetime",
    "DistributionData",
    "DistributionMetrics",
    "InternalConfiguration",
    "PingRateLimit",
    "PingRequest",
    "Rate",
    "RecordedEvent",
    "RecordedExperiment",
    "TimerId",
    "glean_apply_server_knobs_config",
    "glean_enable_logging",
    "glean_enable_logging_to_fd",
    "glean_get_debug_view_tag",
    "glean_get_log_pings",
    "glean_get_registered_ping_names",
    "glean_get_upload_task",
    "glean_handle_client_active",
    "glean_handle_client_inactive",
    "glean_initialize",
    "glean_initialize_for_subprocess",
    "glean_persist_ping_lifetime_data",
    "glean_process_ping_upload_response",
    "glean_register_event_listener",
    "glean_set_debug_view_tag",
    "glean_set_dirty_flag",
    "glean_set_experiment_active",
    "glean_set_experiment_inactive",
    "glean_set_experimentation_id",
    "glean_set_log_pings",
    "glean_set_source_tags",
    "glean_set_test_mode",
    "glean_set_upload_enabled",
    "glean_shutdown",
    "glean_submit_ping_by_name",
    "glean_submit_ping_by_name_sync",
    "glean_test_destroy_glean",
    "glean_test_get_attribution",
    "glean_test_get_distribution",
    "glean_test_get_experiment_data",
    "glean_test_get_experimentation_id",
    "glean_unregister_event_listener",
    "glean_update_attribution",
    "glean_update_distribution",
    "BooleanMetric",
    "CounterMetric",
    "CustomDistributionMetric",
    "DatetimeMetric",
    "DenominatorMetric",
    "DualLabeledCounterMetric",
    "EventMetric",
    "LabeledBoolean",
    "LabeledCounter",
    "LabeledQuantity",
    "LabeledString",
    "MemoryDistributionMetric",
    "NumeratorMetric",
    "ObjectMetric",
    "PingType",
    "QuantityMetric",
    "RateMetric",
    "StringListMetric",
    "StringMetric",
    "TextMetric",
    "TimespanMetric",
    "TimingDistributionMetric",
    "UrlMetric",
    "UuidMetric",
    "GleanEventListener",
    "OnGleanEvents",
]

