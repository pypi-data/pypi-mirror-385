#!/usr/bin/env python3
'''
run_sequence_search.py

Purpose:
    This script performs the actual selection of an orthogonal set of DNA sequence pairs
    using the evolutionary vertex cover algorithm. It selects sequences whose on-target
    energies fall within a desired range and whose off-target interactions are minimized.

    This script is intended to be run **after** initial exploration with
    `preanalyze_sequences.py` and optionally `analyze_on_target_range.py` to determine
    sensible energy cutoffs.

Main Steps:
    1. Set a fixed random seed for reproducibility.
    2. Generate the full pool of sequence pairs (with optional flanking sequences).
    3. Define energy cutoffs for on-target and off-target interactions based on prior analysis.
    4. Configure and enable the precomputed energy cache (auto-created if missing).
    5. Run the evolutionary vertex cover algorithm to find a set of sequences with minimal cross-interaction.
    6. Save the selected sequences to file for downstream use.
    7. Recompute and visualize final on- and off-target energy distributions.

Usage:
    python run_sequence_search.py
'''

import random
from orthoseq_generator import helper_functions as hf
from orthoseq_generator import sequence_computations as sc
from orthoseq_generator.vertex_cover_algorithms import evolutionary_vertex_cover

if __name__ == "__main__":
    # 1) Set a random seed for reproducibility 
    RANDOM_SEED = 42
    random.seed(RANDOM_SEED)

    # 2) Generate the full pool of 8-mer handle/antihandle pairs (with 'TT' flanking on 5' end)
    ontarget8mer = sc.create_sequence_pairs_pool(
        length=8,
        fivep_ext="TT",
        threep_ext="",
        avoid_gggg=True
    )

    # 3) Define energy thresholds based on prior analysis
    offtarget_limit = -7.4    # Maximum allowed off-target binding strength 
    max_ontarget = -9.6       # Maximum acceptable on-target binding energy 
    min_ontarget = -10.4      # Minimum acceptable on-target binding energy 

    # 4) Configure and enable the precomputed energy cache.
    #    The specified pickle file will be created inside 'pre_computed_energies' if it doesn't exist.
    #    Existing files are reused automatically to avoid recomputation.
    hf.choose_precompute_library("8mers101.pkl")
    hf.USE_LIBRARY = True

    # 5) Run the evolutionary vertex cover algorithm to find an orthogonal set of sequences
    # The subset size is the number of random sequences selected from the provided sequence pairs (ontarget8mer) each generation.
    # Higher subset sizes make the computation significantly slower. 
    # This function automatically save the sequences it found with an autogenerated name in the results folder.
    orthogonal_seq_pairs = evolutionary_vertex_cover(
        ontarget8mer,
        offtarget_limit,
        max_ontarget,
        min_ontarget,
        subsetsize=250,
        generations=2000
    )

    # 6) Save the selected orthogonal sequences to a file with a name you choose for later use
    hf.save_sequence_pairs_to_txt(orthogonal_seq_pairs, filename='my_sequences101.txt')

    # 7) Compute and plot the on-target and off-target energy distributions for the selected set
    hf.USE_LIBRARY = False  # Force recomputation to double-check energies. The library might have been corrupted. Better safe than sorry 

    onef = sc.compute_ontarget_energies(orthogonal_seq_pairs)
    offef = sc.compute_offtarget_energies(orthogonal_seq_pairs)

    stats = sc.plot_on_off_target_histograms(
        onef,
        offef,
        output_path='result_energy_plot.pdf'
    )
