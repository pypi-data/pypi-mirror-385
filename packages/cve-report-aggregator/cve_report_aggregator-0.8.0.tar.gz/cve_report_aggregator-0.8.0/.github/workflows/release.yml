---
name: Release Please
on:
  push:
    branches:
      - main
jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      # Create releases only from main branch
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          target-branch: main

  # Trigger Docker build workflow after successful release
  trigger-docker-build:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      actions: write
      contents: read
    steps:
      - name: Wait for tag propagation
        run: sleep 5

      - name: Trigger Docker Build Workflow
        uses: actions/github-script@v7
        with:
          retries: 3
          retry-exempt-status-codes: 400,401,403,404
          script: |
            const tag_name = '${{ needs.release-please.outputs.tag_name }}';

            try {
              console.log(`Triggering Docker build for tag: ${tag_name}`);

              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'docker-build.yml',
                ref: 'main',
                inputs: {
                  version: tag_name,
                  push: 'true'
                }
              });

              console.log('Docker build workflow triggered successfully');
              console.log(`Workflow dispatch response status: ${response.status}`);
            } catch (error) {
              core.setFailed(`Failed to trigger Docker build: ${error.message}`);
              throw error;
            }

      - name: Generate Trigger Summary
        if: success()
        run: |
          echo "## Docker Build Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ needs.release-please.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: \`docker-build.yml\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Successfully triggered" >> $GITHUB_STEP_SUMMARY

  publish-pypi:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Build Package
        run: |
          uv build
      - name: Publish to PyPI
        run: |
          uv publish --trusted-publishing always

      - name: Generate PyPI Summary
        if: success()
        run: |
          echo "## PyPI Package Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ needs.release-please.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: \`cve-report-aggregator\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Successfully published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install cve-report-aggregator==${{ needs.release-please.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
