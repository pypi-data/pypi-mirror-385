---
name: Docker Build and Push

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (v0.1.0, v1.2.3, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to use (e.g., v0.1.0)'
        required: true
        type: string
      push:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Dockerfile
            suffix: ""
            platforms: linux/amd64,linux/arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            # Manual workflow dispatch with version input
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Triggered by tag push (Release Please creates tags like v0.1.0)
            VERSION="${{ github.ref_name }}"
          else
            # Fallback (shouldn't happen with current triggers)
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=${{ matrix.suffix }},onlatest=true
          tags: |
            # Use the exact version tag (e.g., v0.1.0)
            type=raw,value=${{ steps.version.outputs.version }}
            # Also tag as 'latest' for stable releases (not rc/beta/alpha)
            type=raw,value=latest,enable=${{ !contains(steps.version.outputs.version, '-') }}
            # For release candidates, also tag as 'rc'
            type=raw,value=rc,enable=${{ contains(steps.version.outputs.version, '-rc') }}

      - name: Build and push Docker image
        timeout-minutes: 10
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name == 'push' || inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            GIT_URL=${{ github.server_url }}/${{ github.repository }}

      - name: Generate image summary
        if: success()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SUFFIX="${{ matrix.suffix }}"

          echo "## Docker Image Built & Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ env.IMAGE_NAME }}$SUFFIX\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: \`${{ matrix.platforms }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Add note about release type
          if [[ "$VERSION" == *"-rc"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: This is a release candidate image." >> $GITHUB_STEP_SUMMARY
            echo "Also available as: \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:rc\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "$VERSION" != *"-"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: This is a stable release image." >> $GITHUB_STEP_SUMMARY
            echo "Also available as: \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:latest\`" >> $GITHUB_STEP_SUMMARY
          fi
