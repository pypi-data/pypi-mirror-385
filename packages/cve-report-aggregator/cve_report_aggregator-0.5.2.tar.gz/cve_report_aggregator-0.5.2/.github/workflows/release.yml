---
name: Release Please
on:
  push:
    branches:
      - main
permissions:
  contents: write
  pull-requests: write
jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      # Create releases only from main branch
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          target-branch: main

  # Trigger Docker build workflow after successful release
  trigger-docker-build:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Trigger Docker Build Workflow
        uses: actions/github-script@v7
        with:
          script: |
            const tag_name = '${{ needs.release-please.outputs.tag_name }}';
            console.log(`Triggering Docker build for tag: ${tag_name}`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-build.yml',
              ref: 'main',
              inputs: {
                version: tag_name,
                push: 'true'
              }
            });

            console.log('Docker build workflow triggered successfully');

  trigger-pypi-publish:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Build Package
        run: |
          uv build
      - name: Publish to PyPI
        run: |
          uv publish --trusted-publishing always
