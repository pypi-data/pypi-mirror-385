[project]
name = "cve-report-aggregator"
# x-release-please-start-version
version = "0.10.1"
# x-release-please-end
description = "Aggregate and deduplicate vulnerability scan reports from Grype and Trivy"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [
    { name = "Mitchell Murphy", email = "mitchell.murphy@defenseunicorns.com" }
]
keywords = ["security", "vulnerability", "cve", "grype", "trivy", "sbom"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "rich>=14.2.0",
    "click>=8.3.0",
    "rich-click>=1.9.3",
    "pydantic>=2.12.2",
    "pydantic-settings>=2.7.1",
    "pyyaml>=6.0.2",
    "structlog>=25.1.0",
    "openai[aiohttp]>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=7.0.0",
    "ruff>=0.14.1",
    "mypy>=1.18.2",
]

[project.scripts]
cve-report-aggregator = "cve_report_aggregator.__main__:run"
lint = "utils.lint:main"
format-yaml = "utils.format_yaml:main"
format-md = "utils.format_markdown:main"
validate-docker = "utils.validate_docker:main"
check-python = "utils.check_python:main"

[project.urls]
Homepage = "https://github.com/mkm29/cve-report-aggregator"
Repository = "https://github.com/mkm29/cve-report-aggregator"
Issues = "https://github.com/mkm29/cve-report-aggregator/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/cve_report_aggregator", "utils"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=cve_report_aggregator",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[dependency-groups]
dev = [
    "ruff>=0.14.1",
    "pytest>=8.4.1",
    "pytest-cov>=7.0.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    "pre-commit>=4.2.0",
    "mypy>=1.18.2",
    "types-pyyaml>=6.0.12.20250516",
    "types-requests>=2.32.4.20250913",
    "idna>=3.10,<3.12",
    "pytest-mock>=3.15.1",
]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py311"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable pyflakes, pycodestyle, and isort
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]

# Enable automatic removal of unused variables and imports
extend-select = [
    "F401",  # unused-import
    "F841",  # unused-variable
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore specific rules in specific files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]  # Module level import not at top of file
"src/cve_report_aggregator/main.py" = ["E402"]  # Add this
"tests/conftest.py" = ["E402"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["cve_report_aggregator"]

[tool.coverage.run]
source = ["src/cve_report_aggregator"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
