---
name: Container Security Scan
permissions:
  contents: read
  security-events: write
  actions: read  # Required to download artifacts from workflow_run

on:
  # Primary trigger: Scan when docker-build workflow completes
  # This ensures we scan the exact image that was built and pushed
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
    branches:
      - main
      - develop
  # Manual trigger for ad-hoc scans
  workflow_dispatch:
    inputs:
      build_fresh:
        description: 'Build fresh image instead of using artifact'
        required: false
        default: false
        type: boolean
  # Weekly scheduled scan (builds fresh image)
  schedule:
    - cron: '0 6 * * 1'

jobs:
  grype:
    name: Grype Container Scan
    runs-on: ubuntu-latest
    # Only run on successful workflow_run builds or manual/scheduled runs, skip dependabot
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'schedule') &&
      github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v5

      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Build fresh: ${{ inputs.build_fresh || 'false' }}"
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
            echo "Workflow run head branch: ${{ github.event.workflow_run.head_branch }}"
          fi

      - name: Download image artifact from docker-build
        id: download-artifact
        # Only try to download artifact if workflow_run trigger and not forced to build fresh
        if: |
          github.event_name == 'workflow_run' &&
          (inputs.build_fresh != true && inputs.build_fresh != 'true')
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          pattern: docker-image-*
          merge-multiple: false
        continue-on-error: true

      - name: Load Docker image from artifact
        id: load-artifact
        if: steps.download-artifact.outcome == 'success'
        run: |
          # Find the downloaded image tarball
          IMAGE_TAR=$(find . -name "image.tar" -type f | head -n 1)
          if [[ -n "$IMAGE_TAR" ]]; then
            echo "Loading image from artifact: $IMAGE_TAR"
            docker load -i "$IMAGE_TAR"
            # Get the image name from the loaded image
            LOADED_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
            echo "Loaded image: $LOADED_IMAGE"
            echo "scan_image=$LOADED_IMAGE" >> $GITHUB_OUTPUT
            echo "use_artifact=true" >> $GITHUB_OUTPUT
          else
            echo "No image.tar found in artifact"
            echo "use_artifact=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.load-artifact.outputs.use_artifact != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        if: steps.load-artifact.outputs.use_artifact != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: false
          load: true
          tags: cve-report-aggregator:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image name for scan
        id: set-image
        if: steps.load-artifact.outputs.use_artifact != 'true'
        run: echo "scan_image=cve-report-aggregator:scan" >> $GITHUB_OUTPUT

      - name: Determine final image name
        id: final-image
        run: |
          if [[ -n "${{ steps.load-artifact.outputs.scan_image }}" ]]; then
            echo "image=${{ steps.load-artifact.outputs.scan_image }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ steps.set-image.outputs.scan_image }}" >> $GITHUB_OUTPUT
          fi

      - name: Run Grype vulnerability scan
        uses: anchore/scan-action@v4
        id: grype-scan
        with:
          image: ${{ steps.final-image.outputs.image }}
          fail-build: false
          output-format: sarif
          severity-cutoff: high

      - name: Upload Grype SARIF results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}
        if: always()

      - name: Generate scan summary
        if: always()
        run: |
          echo "## Grype Container Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ steps.final-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.load-artifact.outputs.use_artifact }}" == "true" ]]; then
            echo "### Efficient Scan" >> $GITHUB_STEP_SUMMARY
            echo "Scanned the exact image from docker-build workflow artifact" >> $GITHUB_STEP_SUMMARY
            echo "- **Benefit**: Same image that was pushed to registry" >> $GITHUB_STEP_SUMMARY
            echo "- **Time saved**: ~5 minutes (no rebuild needed)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ðŸ”¨ Fresh Build Scan" >> $GITHUB_STEP_SUMMARY
            echo "Built image fresh for scanning" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              echo "- **Reason**: Weekly scheduled scan" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ inputs.build_fresh }}" == "true" ]]; then
              echo "- **Reason**: Manual trigger with build_fresh=true" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Reason**: Artifact not available" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "Scan results uploaded to:" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Security â†’ Code scanning alerts**" >> $GITHUB_STEP_SUMMARY
