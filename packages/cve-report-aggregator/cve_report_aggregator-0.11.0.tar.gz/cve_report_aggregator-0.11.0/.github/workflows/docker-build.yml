---
name: Docker Build and Push

on:
  push:
    branches:
      - develop
  # Commented out for now: release-please creates tags from Actions directly,
  # which are ignored by this workflow. Uncomment if tags are created manually
  # push:
  #   tags:
  #     - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to use (e.g., v0.1.0)'
        required: true
        type: string
      push:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # For cosign keyless signing
      attestations: write  # For SBOM attestations
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Dockerfile
            suffix: ""
            platforms: linux/amd64,linux/arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          # Calculate short SHA for all branches
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

          if [[ -n "${{ inputs.version }}" ]]; then
            # Workflow dispatch with version input (triggered by release workflow)
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            # Develop branch: use 'develop' as primary tag
            VERSION="develop"
          else
            # Fallback to short SHA for feature branches
            VERSION="$SHORT_SHA"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
          echo "Short SHA: $SHORT_SHA"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=${{ matrix.suffix }},onlatest=true
          tags: |
            # Use the exact version tag (e.g., v0.1.0, develop, or short SHA)
            type=raw,value=${{ steps.version.outputs.version }}
            # For develop branch, also add develop-{short-sha} tag
            type=raw,value=develop-${{ steps.version.outputs.short_sha }},enable=${{ github.ref_name == 'develop' }}
            # Also tag as 'latest' for stable releases (not rc/beta/alpha)
            type=raw,value=latest,enable=${{ !contains(steps.version.outputs.version, '-') && github.ref_name == 'main' }}
            # For release candidates, also tag as 'rc'
            type=raw,value=rc,enable=${{ contains(steps.version.outputs.version, '-rc') }}
          labels: |
            org.opencontainers.image.title=CVE Report Aggregator
            org.opencontainers.image.description=Scans SBOM files contained in Zarf packages using Grype and/or Trivy, deduplicates findings, and saves results.
            org.opencontainers.image.vendor=Defense Unicorns

      - name: Build and push Docker image
        id: build
        timeout-minutes: 10
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name == 'push' || inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          # Enable provenance and SBOM attestations
          provenance: true
          sbom: true

      - name: Install Cosign
        if: ${{ github.event_name == 'push' || inputs.push }}
        uses: sigstore/cosign-installer@v3

      - name: Sign container image with Cosign
        if: ${{ github.event_name == 'push' || inputs.push }}
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          echo "Signing image digest: ${DIGEST}"
          # Sign all tags with keyless signing (uses OIDC identity)
          for tag in ${TAGS}; do
            echo "Signing ${tag}@${DIGEST}"
            cosign sign --yes "${tag}@${DIGEST}"
          done

      - name: Generate and attest SBOM
        if: ${{ github.event_name == 'push' || inputs.push }}
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          IMAGE_NAME: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Generate SBOM in multiple formats
          IMAGE_REF="${IMAGE_NAME}:${VERSION}"
          echo "Generating SBOM for ${IMAGE_REF}"

          # Generate CycloneDX JSON SBOM
          syft "${IMAGE_REF}" -o cyclonedx-json > sbom-cyclonedx.json

          # Generate SPDX JSON SBOM
          syft "${IMAGE_REF}" -o spdx-json > sbom-spdx.json

          # Create SBOM attestation using cosign attest (proper in-toto format)
          echo "Attesting SBOM to ${IMAGE_NAME}@${DIGEST}"
          cosign attest --yes \
            --predicate sbom-cyclonedx.json \
            --type cyclonedx \
            "${IMAGE_NAME}@${DIGEST}"

          # Also create SPDX attestation
          cosign attest --yes \
            --predicate sbom-spdx.json \
            --type spdx \
            "${IMAGE_NAME}@${DIGEST}"

      - name: Export image for scanning
        if: success()
        env:
          VERSION: ${{ steps.version.outputs.version }}
          IMAGE_NAME: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          # Export the built image to a tarball for security scanning
          # This allows the scan workflow to run without pulling from the registry
          docker pull "${IMAGE_NAME}:${VERSION}"
          docker save "${IMAGE_NAME}:${VERSION}" -o image.tar
          echo "Exported ${IMAGE_NAME}:${VERSION} to image.tar"
          ls -lh image.tar

      - name: Upload image artifact for scanning
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.version.outputs.version }}
          path: image.tar
          retention-days: 1  # Only needed for immediate scanning

      - name: Generate image summary
        if: success()
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SUFFIX="${{ matrix.suffix }}"
          IMAGE_FULL="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX"

          echo "## Docker Image Built & Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ env.IMAGE_NAME }}$SUFFIX\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: \`${{ matrix.platforms }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: \`${DIGEST}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${IMAGE_FULL}:$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Add provenance and security information
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security & Provenance" >> $GITHUB_STEP_SUMMARY
          echo "- **Signed**: Yes (Cosign keyless signing)" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM**: Attached (CycloneDX & SPDX attestations)" >> $GITHUB_STEP_SUMMARY
          echo "- **Provenance**: Enabled (buildx attestation)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Verify Signature" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Verify image signature" >> $GITHUB_STEP_SUMMARY
          echo "cosign verify ${IMAGE_FULL}:$VERSION \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-identity-regexp='https://github.com/${{ github.repository }}' \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-oidc-issuer='https://token.actions.githubusercontent.com'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Download SBOM" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Download CycloneDX SBOM attestation" >> $GITHUB_STEP_SUMMARY
          echo "cosign verify-attestation ${IMAGE_FULL}:$VERSION \\" >> $GITHUB_STEP_SUMMARY
          echo "  --type cyclonedx \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-identity-regexp='https://github.com/${{ github.repository }}' \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-oidc-issuer='https://token.actions.githubusercontent.com' | \\" >> $GITHUB_STEP_SUMMARY
          echo "  jq -r '.payload' | base64 -d | jq ." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Download SPDX SBOM attestation" >> $GITHUB_STEP_SUMMARY
          echo "cosign verify-attestation ${IMAGE_FULL}:$VERSION \\" >> $GITHUB_STEP_SUMMARY
          echo "  --type spdx \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-identity-regexp='https://github.com/${{ github.repository }}' \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-oidc-issuer='https://token.actions.githubusercontent.com' | \\" >> $GITHUB_STEP_SUMMARY
          echo "  jq -r '.payload' | base64 -d | jq ." >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Add note about release type
          if [[ "$VERSION" == *"-rc"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: This is a release candidate image." >> $GITHUB_STEP_SUMMARY
            echo "Also available as: \`docker pull ${IMAGE_FULL}:rc\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "$VERSION" != *"-"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: This is a stable release image." >> $GITHUB_STEP_SUMMARY
            echo "Also available as: \`docker pull ${IMAGE_FULL}:latest\`" >> $GITHUB_STEP_SUMMARY
          fi
