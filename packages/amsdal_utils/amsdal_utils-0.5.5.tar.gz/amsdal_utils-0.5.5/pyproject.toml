[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["src/amsdal_utils"]

[project]
name = "amsdal_utils"
dynamic = ["version"]
description = 'Utils for AMSDAL data framework'
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE.txt"}
keywords = []
authors = [
    { name = "A. Michael Salem", email = "ams@amsdal.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "pydantic~=2.6",
    "PyYAML~=6.0",
]

[dependency-groups]
dev = [
    "coverage[toml]>=7.4",
    "pytest==8.3.4",
    "pydantic==2.6.4",
    "black>=24.3.0",
    "mypy>=1.15.0",
    "ruff>=0.12.4",
    "towncrier==24.8.0",
    "types-PyYAML==6.0.12.20250516",
]

[project.urls]
Documentation = "https://pypi.org/project/amsdal_utils/#readme"
Issues = "https://pypi.org/project/amsdal_utils/#issues"
Source = "https://pypi.org/project/amsdal_utils/"

[tool.hatch.version]
path = "src/amsdal_utils/__about__.py"

[tool.hatch.envs.default]
installer = "uv"
path = ".venv"

[tool.hatch.envs.default.scripts]
sync = "uv sync --group dev"
lock = "uv lock"
lock-upgrade = "uv lock --upgrade"
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]
typing = "mypy --install-types --non-interactive {args:src/amsdal_utils tests}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]
change-logs = "towncrier {args:.}"
release = "rm latest-changelogs.md && towncrier build --yes --version {args:version} && (cat latest-changelogs.md; cat change-logs.md) > temp.md && mv temp.md change-logs.md && git add change-logs.md latest-changelogs.md release_notes && git commit -m 'Updated release notes'"


[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.ci]
installer = "uv"
path = ".venv"

[tool.hatch.envs.ci.scripts]
sync = "uv sync --group dev"
typing = "mypy --install-types --non-interactive {args:src/amsdal_utils tests}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]
check-style = [
    "style",
    "typing",
]

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.mypy]
plugins = ["pydantic.mypy"]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "A005",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
force-single-line = true
order-by-type = true
known-first-party = ["amsdal_utils"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["amsdal_utils", "tests"]
branch = true
parallel = true
omit = [
    "src/amsdal_utils/__about__.py",
]

[tool.coverage.paths]
amsdal_utils = ["src/amsdal_utils", "*/amsdal_utils/src/amsdal_utils"]
tests = ["tests", "*/amsdal_utils/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.towncrier]
directory= "release_notes"
name = "AMSDAL UTILS"
title_format = "## [v{version}](https://pypi.org/project/amsdal_utils/{version}/) - {project_date}"
filename = "latest-changelogs.md"
underlines = ["", "", ""]

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[[tool.towncrier.type]]
directory = "performance"
name = "Performance"
showcontent = true
