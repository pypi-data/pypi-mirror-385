[project]
name = "result-parser-agent"
version = "2.0.3"
description = "A CLI tool for extracting metrics from raw result files using workload-specific tools"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Akhilreddy", email = "akhil@Infobellit.com" }
]
requires-python = ">=3.11,<3.13"
keywords = ["agent", "parsing", "metrics", "langgraph", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "loguru>=0.7.0",
    "click>=8.0.0",
    "pyyaml>=6.0.0",
    "typer>=0.9.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "python-dotenv>=1.1.1",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "bandit>=1.7.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]


[project.scripts]
result-parser = "result_parser_agent.main:app"

[project.urls]
Homepage = "https://github.com/Infobellit-Solutions-Pvt-Ltd/result-parser-agent"
Repository = "https://github.com/Infobellit-Solutions-Pvt-Ltd/result-parser-agent"
Documentation = "https://github.com/Infobellit-Solutions-Pvt-Ltd/result-parser-agent#readme"
Issues = "https://github.com/Infobellit-Solutions-Pvt-Ltd/result-parser-agent/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/result_parser_agent"]

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["result_parser_agent"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=result_parser_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"] 

[dependency-groups]
dev = [
    "build>=1.3.0",
    "types-requests>=2.32.4.20250809",
]
