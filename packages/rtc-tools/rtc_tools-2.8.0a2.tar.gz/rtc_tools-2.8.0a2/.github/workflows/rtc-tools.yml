name: deltares/rtc-tools

on:
  push:
  workflow_dispatch:
concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true
# env:
#   PYPI_USER: "${{ secrets.PYPI_USER }}"
#   PYPI_PASSWORD: "${{ secrets.PYPI_PASSWORD }}"
#   CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN}}"

jobs:
  style:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/setup-python
      with:
        dependency-groups: "style"
    - run: uv run pre-commit run --all-files --show-diff-on-failure

  build:
    needs: [style]
    runs-on: ubuntu-latest
    container:
      image: python:3.9
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup-python
    - run: uv build
    - uses: actions/upload-artifact@v4
      if: success()
      with:
        name: "${{ github.job }}"
        retention-days: 7
        path: dist/

  test-linux:
    name: Test Linux (Python ${{ matrix.version }}${{ matrix.label }})
    needs: build
    runs-on: ubuntu-latest
    container:
      image: python:${{ matrix.version }}
    timeout-minutes: 30
    env:
      TOXENV: py
    strategy:
      matrix:
        include:
          - version: '3.9'  # Also update sonar-project.properties when updating the python versions.
          - version: '3.10'
          - version: '3.11'
          - version: '3.12'
          - version: '3.13'
          # Lowest and highest resolution modes to test oldest and newest dependencies.
          - version: '3.9'
            resolution_mode: 'lowest'
            label: ' (Oldest Dependencies)'
          - version: '3.13'
            resolution_mode: 'highest'
            label: ' (Newest Dependencies)'
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/setup-python
      with:
        dependency-groups: "tests"
        resolution-mode: ${{ matrix.resolution_mode }}
    - run: uv run tox -vv

  coverage:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: python:3.9
    timeout-minutes: 30
    env:
      TOXENV: coverage
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: ./.github/actions/setup-python
      with:
        dependency-groups: "tests"
    - run: uv run tox -vv
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: coverage-report
        retention-days: 7
        path: coverage.xml

  sonar:
    needs: [coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis.
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  examples-linux:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: python:${{ matrix.version }}
    if: startsWith(github.ref, 'refs/tags')
    timeout-minutes: 30
    env:
      TOXENV: examples
    strategy:
      matrix:
        version:
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
        - '3.13'
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: ./.github/actions/setup-python
      with:
        dependency-groups: "tests"
    - run: uv run tox -vv

  deploy:
    needs: [test-linux, coverage, examples-linux]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/2.')  }}
    permissions:
      id-token: write  # Required for OIDC PyPI publishing
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python and uv
        uses: ./.github/actions/setup-python

      - name: Build package
        run: uv build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
