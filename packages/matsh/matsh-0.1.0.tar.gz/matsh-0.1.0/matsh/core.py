from openai import OpenAI


class OpenRouterAI:
    def __init__(self, api_keys, site_url="https://github.com", site_name="MatshLibrary"):
        self.api_keys = api_keys
        self.current_key_index = 0
        self.site_url = site_url
        self.site_name = site_name
        self.client = None
        self._initialize_client()

    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º API –∫–ª—é—á–æ–º"""
        if self.api_keys:
            self.client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=self.api_keys[self.current_key_index],
            )

    def _rotate_key(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π API –∫–ª—é—á"""
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ API –∫–ª—é—á #{self.current_key_index + 1}")
        self._initialize_client()

    def ask(self, question, max_retries=3):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
        for attempt in range(max_retries):
            try:
                if not self.client:
                    raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                completion = self.client.chat.completions.create(
                    extra_headers={
                        "HTTP-Referer": self.site_url,
                        "X-Title": self.site_name,
                    },
                    extra_body={},
                    model="tngtech/deepseek-r1t2-chimera:free",  # –ú–æ–¥–µ–ª—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
                    messages=[
                        {
                            "role": "user",
                            "content": question
                        }
                    ],
                    timeout=30
                )
                return completion.choices[0].message.content

            except Exception as e:
                error_msg = str(e).lower()
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å API –∫–ª—é—á–æ–º
                if any(keyword in error_msg for keyword in ['key', 'auth', '401', '403', 'invalid', 'quota']):
                    if len(self.api_keys) > 1:
                        self._rotate_key()
                        continue

                if attempt == max_retries - 1:
                    return f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}"

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"


# –ü—É–ª API –∫–ª—é—á–µ–π
API_KEYS_POOL_1 = [
    "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",
    "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",
]

API_KEYS_POOL_2 = [
    "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",
    "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",
]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
ai1 = OpenRouterAI(API_KEYS_POOL_1)
ai2 = OpenRouterAI(API_KEYS_POOL_2)


def depsek1(question):
    """
    –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–≤—ã–π –ø—É–ª API –∫–ª—é—á–µ–π

    Args:
        question (str): –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    return ai1.ask(question)


def depsek2(question):
    """
    –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è –≤—Ç–æ—Ä–æ–π –ø—É–ª API –∫–ª—é—á–µ–π

    Args:
        question (str): –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    return ai2.ask(question)


def add_api_key_to_pool1(api_key):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á –≤ –ø–µ—Ä–≤—ã–π –ø—É–ª"""
    API_KEYS_POOL_1.append(api_key)
    ai1.api_keys = API_KEYS_POOL_1
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ø—É–ª 1. –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {len(API_KEYS_POOL_1)}")


def add_api_key_to_pool2(api_key):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á –≤–æ –≤—Ç–æ—Ä–æ–π –ø—É–ª"""
    API_KEYS_POOL_2.append(api_key)
    ai2.api_keys = API_KEYS_POOL_2
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ø—É–ª 2. –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {len(API_KEYS_POOL_2)}")


def get_pool_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—É–ª–∞–º –∫–ª—é—á–µ–π"""
    return {
        "pool1_keys_count": len(API_KEYS_POOL_1),
        "pool2_keys_count": len(API_KEYS_POOL_2),
        "pool1_current_index": ai1.current_key_index,
        "pool2_current_index": ai2.current_key_index
    }