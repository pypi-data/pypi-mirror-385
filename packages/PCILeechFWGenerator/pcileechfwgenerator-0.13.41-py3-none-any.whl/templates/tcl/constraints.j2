{{ header }}

{% from "_helpers.j2" import board_name, board_fpga_part, safe_attr %}
puts "Adding constraint files..."

# Get script directory for reliable path resolution
set script_dir [file dirname [info script]]

# Only include constraint files provided by PCILeech discovery and generation
set already_added_files [list]

# Generated XDC path (copied by the builder)
{% if generated_xdc_path %}
set generated_xdc "{{ generated_xdc_path }}"
if {[file exists $generated_xdc]} {
    if {[lsearch -exact $already_added_files $generated_xdc] == -1} {
        add_files -fileset constrs_1 -norecurse $generated_xdc
        lappend already_added_files $generated_xdc
        puts "Added generated XDC constraints: $generated_xdc"
    }
} else {
    puts "WARNING: Generated XDC path does not exist: $generated_xdc"
}
{% endif %}

# Explicit constraint files provided by the builder
{% if constraint_files %}
set pcileech_xdc_files [list \
{% for f in constraint_files %}    "{{ f }}" \
{% endfor %}]
foreach xdc_file $pcileech_xdc_files {
    if {[file exists $xdc_file]} {
        if {[lsearch -exact $already_added_files $xdc_file] == -1} {
            add_files -fileset constrs_1 -norecurse $xdc_file
            lappend already_added_files $xdc_file
            puts "  Added PCILeech XDC: $xdc_file"
        }
    } else {
        puts "WARNING: PCILeech XDC not found: $xdc_file"
    }
}
{% endif %}

# Generate device-specific timing constraints
puts "Adding device-specific timing constraints..."
# Try to use board-specific XDC constraints if board type is specified
{%- if board is defined -%}
puts "Attempting to load board-specific XDC constraints for: {{ board_name(board) }}"

{%- if board_xdc_content is defined and board_xdc_content %}
# Load XDC constraints from PCILeech repository
# This will be populated by the constraint generation system
# with actual XDC content from the PCILeech FPGA repository
# Write board XDC content to temporary file to avoid brace/semicolon issues
set board_auto_xdc_file [file join $script_dir "{{ board_name(board) }}_auto.xdc"]
set fp [open $board_auto_xdc_file w]
puts $fp {{ "{" ~ board_xdc_content ~ "}" }}
close $fp
add_files -fileset constrs_1 -norecurse $board_auto_xdc_file
read_xdc $board_auto_xdc_file
puts "Added auto-generated board XDC: $board_auto_xdc_file"
{%- else %}
# No board-specific XDC available, using generic constraints
puts "WARNING: No board-specific XDC constraints available for {{ board_name(board) }}"
puts "Using generic timing constraints only. You may need to add board-specific pin assignments."
{%- endif %}
{%- endif %}

# Generate device-specific timing constraints file
{# Determine safe system clock frequency in MHz. Prefer explicit context key; otherwise, use any board hint; finally fall back to 100. #}
{% set _sys_clk_mhz = (sys_clk_freq_mhz | safe_int(0)) if (sys_clk_freq_mhz is defined) else 0 %}
{% if _sys_clk_mhz <= 0 %}
    {% set _sys_clk_mhz = (safe_attr(board, 'sys_clk_mhz', 0) | int) if (board is defined) else 0 %}
{% endif %}
{% if _sys_clk_mhz <= 0 %}
    {% set _sys_clk_mhz = 100 %}
{% endif %}
{% set sys_clk_period = (1000.0 / _sys_clk_mhz) | round(3) %}
set timing_constraints_content {
# Device-specific timing constraints for {{ device.vendor_id }}:{{ device.device_id }}
# Board: {{ board_name(board) }}
# System Clock: {{ _sys_clk_mhz }} MHz (period: {{ sys_clk_period }} ns)

# PCIe Transceiver Pin Constraints
# PCIe differential pairs connect directly to GTX/GTP/GTH transceivers
# These are NOT regular IO - they are handled by the PCIE IP core

# The PCIe IP core manages transceiver placement automatically
# based on the PCIE primitive site configuration in the IP.
# No PACKAGE_PIN or IOSTANDARD constraints should be applied
# to pci_exp_* ports - they are internal to the transceiver tiles.

# NOTE: The PCIE IP core XDC files handle all necessary constraints
# for the transceiver pins. Any additional constraints here would
# conflict with the IP core and cause DRC errors.

# System Reference Clock (PCIe REFCLK)
# This differential clock is the reference for the PCIe transceiver
# IMPORTANT: This clock connects to the IBUFDS_GTE2 primitive, NOT regular IO
# Pin locations are typically set by the PCIE IP core configuration

# The sys_clk_p/sys_clk_n ports feed the IBUFDS_GTE2 instance in the top level
# to create the single-ended sys_clk input required by the PCIe core. If you
# need to override pin locations, provide board-specific XDC entries.
# Do NOT apply an IOSTANDARD here â€“ the clock buffer primitive owns that.

# IBUFDS_GTE2 LOC constraint - required for 7-series devices
{% if board is defined -%}
{%- set pcie_refclk_loc = safe_attr(board, 'pcie_refclk_loc', '') -%}
{%- if pcie_refclk_loc %}
# PCIe reference clock buffer location for {{ board_name(board) }}
set_property LOC {{ pcie_refclk_loc }} [get_cells pcie_refclk_ibuf]
{%- else %}
# WARNING: No IBUFDS_GTE2 LOC constraint provided for {{ board_name(board) }}
# This will cause DRC errors during place_design
# Please add pcie_refclk_loc to board configuration (e.g., IBUFDS_GTE2_X0Y1)
{%- endif %}
{%- endif %}

# System reset
# NOTE: Pin assignments MUST be loaded from board-specific XDC files
# Uncomment and set for your specific board:
# set_property PACKAGE_PIN U7 [get_ports sys_rst_n]
# set_property IOSTANDARD LVCMOS33 [get_ports sys_rst_n]
# set_property PULLUP TRUE [get_ports sys_rst_n]

# Timing Constraints
# Create clock constraint for the reference clock
# Note: Period depends on whether using 100MHz or 125MHz reference
create_clock -period {{ sys_clk_period }} -name sys_clk_p [get_ports sys_clk_p]
set_input_delay -clock sys_clk_p 2.000 [get_ports sys_rst_n]
set_false_path -from [get_ports sys_rst_n]

# PCIe IP Core Clocks (generated by IP, constraints added automatically)
# Reference: refclk={{ pcie_refclk_freq | default('100 MHz') }}
# User clocks: userclk1={{ pcie_userclk1_freq | default('N/A') }}, userclk2={{ pcie_userclk2_freq | default('N/A') }}
}

# Write timing constraints to file
set constraints_file [file join $script_dir "device_constraints.xdc"]
set fp [open $constraints_file w]
puts $fp $timing_constraints_content
close $fp
add_files -fileset constrs_1 -norecurse $constraints_file
read_xdc $constraints_file
set_property PROCESSING_ORDER LATE [get_files $constraints_file]
puts "Generated device constraints file: $constraints_file"

# Quality-of-life tweaks for USB-heavy designs
{% if board and board.features is defined and board.features %}
set_param xicom.use_bs_reader 1
puts "Enabled fast bitstream reader for FT601 board"
{% endif %}

puts "Constraints setup completed"