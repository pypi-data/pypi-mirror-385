[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "mx-bluesky"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
description = "Bluesky tools for MX Beamlines at DLS"
dependencies = [
    #
    # If a constraint is not set here or if the dependency is pinned to a hash
    # it will be auto-pinned to the latest release version by the pre-release workflow
    #
    "annotated_types",
    "caproto",
    "fastapi[all]",
    "flask-restful",
    "ispyb",
    "jupyterlab",
    "matplotlib",
    "nexgen >= 0.11.0",
    "numpy == 2.2.6",                 # See https://github.com/DiamondLightSource/mx-bluesky/issues/1119
    "opencv-python",                  # Needed for I24 ssx moveonclick. To be changed to headless once this is moved to separate ui.
    "opentelemetry-distro",
    "opentelemetry-exporter-otlp",
    "pydantic",
    "pydantic-extra-types >= 2.10.1",
    "pyepics",
    "pyzmq",
    "requests",
    "scanspec",
    "scipy",
    "semver",
    "deepdiff",
    "matplotlib",
    "cachetools",
    #
    # These dependencies may be issued as pre-release versions and should have a pin constraint
    # as by default pip-install will not upgrade to a pre-release.
    #
    "daq-config-server>=v1.0.0-rc.2",
    "blueapi >= 1.5.0",
    "ophyd >= 1.10.5",
    "ophyd-async >= 0.10.0a2",
    "bluesky >= 1.14.6",
    "dls-dodal == 1.63.0",
]


dynamic = ["version"]
license.file = "LICENSE"
readme = "README.rst"
requires-python = ">=3.11"

[project.optional-dependencies]
dev = [
    "black",
    "build",
    # Commented out due to dependency version conflict with pydantic 1.x
    # "copier",
    "diff-cover",
    "GitPython",
    "import-linter",
    "ipython",
    "mypy",
    "myst-parser",
    "pipdeptree",
    "plantweb",
    "pre-commit",
    "pydata-sphinx-theme>=0.12",
    "pyright",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-random-order",
    "pytest-timeout",
    "pytest",
    "ruff",
    "sphinx-autobuild",
    "sphinx-copybutton",
    "sphinx-design",
    "tox-direct",
    "tox",
    "types-mock",
    "types-requests",
]

[project.scripts]
mx-bluesky = "mx_bluesky.__main__:main"
run_extruder = "mx_bluesky.beamlines.i24.serial.run_serial:run_extruder"
run_fixed_target = "mx_bluesky.beamlines.i24.serial.run_serial:run_fixed_target"
hyperion = "mx_bluesky.hyperion.__main__:main"
hyperion-callbacks = "mx_bluesky.hyperion.external_interaction.callbacks.__main__:main"
redis_to_murko = "mx_bluesky.beamlines.i04.redis_to_murko_forwarder:main"

[project.urls]
GitHub = "https://github.com/DiamondLightSource/mx-bluesky"

[[project.authors]] # Further authors may be added by duplicating this section
email = "dominic.oram@diamond.ac.uk"
name = "Dominic Oram"


[tool.setuptools_scm]
version_file = "src/mx_bluesky/_version.py"

[tool.pyright]
typeCheckingMode = "standard"

[tool.pytest.ini_options]
# Run pytest with all our checkers, and don't spam us with massive tracebacks on error
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
timeout = 1
markers = [
    "dlstbx: marks tests as requiring dlstbx (deselect with '-m \"not dlstbx\"')",
    "skip_log_setup: marks tests so that loggers are not setup before the test.",
    "skip_in_pycharm: marks test as not working in pycharm testrunner",
    "system_test: marks tests as a system test",
    "requires: marks a test as having an external dependency such as a service or hardware",
]
addopts = """
    --tb=native -vv --doctest-modules --doctest-glob="*.rst" --durations=10
    """
# https://iscinumpy.gitlab.io/post/bound-version-constraints/#watch-for-warnings
filterwarnings = [
    "error",
    # Ophyd status objects in tests
    "ignore:.*The 'done' and 'success' parameters will be removed.*:DeprecationWarning",
    # Ignore nondeterministic closing of log, RE, etc. before test end
    "ignore:(.*)unclosed file(.*)name='(.*)dodal.log'(.*):ResourceWarning",
    "ignore:(.*)unclosed <socket(.*):ResourceWarning",
    "ignore:(.*)unclosed event loop(.*):ResourceWarning",
    # Ignore deprecation warning from python-workflows https://github.com/DiamondLightSource/python-workflows/issues/180
    "ignore:.*pkg_resources.*:DeprecationWarning",
    # Ignore warning about deprecated throw() call https://github.com/bluesky/bluesky/issues/1817
    "ignore:.*signature of throw\\(\\) is deprecated.*:DeprecationWarning",
    # Ignore warning about deprecations in python-workflows encountered during system tests
    # https://github.com/DiamondLightSource/python-workflows/issues/188
    "ignore:.*`Field` should not be instantiated.*:marshmallow.warnings.ChangedInMarshmallow4Warning",
    #Remove when we drop python 3.11
    "ignore:.*__contains__ will no longer raise TypeError.*:DeprecationWarning",
    # epicscorelibs requires setuptools >= 70.1
    "ignore:.*The 'wheel' package is no longer the canonical location of the 'bdist_wheel' command.*:DeprecationWarning",
]
# Doctest python code in docs, python code in src docstrings, test functions in tests
testpaths = "docs src tests/unit_tests"

[tool.coverage.run]
data_file = "/tmp/mx_bluesky.coverage"

[tool.coverage.paths]
# Tests are run from installed location, map back to the src directory
source = ["src", "**/site-packages/"]

# tox must currently be configured via an embedded ini string
# See: https://github.com/tox-dev/tox/issues/999
[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist=True

[testenv]
# Don't create a virtualenv for the command, requires tox-direct plugin
direct = True
passenv = *
allowlist_externals =
    pytest
    pre-commit
    pyright
    sphinx-build
    sphinx-autobuild

[testenv:{pre-commit,type-checking,tests,docs}]
commands =
    pre-commit: pre-commit run --all-files --show-diff-on-failure {posargs}
    type-checking: pyright src tests {posargs}
    tests: pytest {posargs}
    docs: sphinx-{posargs:build -EW --keep-going} -T docs build/html
commands_pre =
    docs: /usr/bin/bash -c "{toxinidir}/utility_scripts/generate_plantuml.py > \
        docs/developer/hyperion/reference/param_hierarchy.puml"

# Runs the system tests in CI
[testenv:systemtests]
setenv =
    DODAL_TEST_MODE=true
commands =
    pytest --junit-xml=systemtests_output.xml -m system_test --timeout=60 tests/system_tests

# Runs the system tests locally
[testenv:localsystemtests]
setenv =
    DOCKER=podman
    DODAL_TEST_MODE=true
    ISPYB_CONFIG_PATH={toxinidir}/tests/test_data/ispyb-test-credentials.cfg
    ZOCALO_CONFIG={toxinidir}/tests/test_data/zocalo-test-configuration.yaml
commands =
    pytest -m system_test --timeout=60 tests/system_tests
"""

[tool.ruff]
src = ["src", "tests"]
line-length = 88
lint.select = [
    "B",      # flake8-bugbear - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4",     # flake8-comprehensions - https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "E",      # pycodestyle errors - https://docs.astral.sh/ruff/rules/#error-e
    "F",      # pyflakes rules - https://docs.astral.sh/ruff/rules/#pyflakes-f
    "W",      # pycodestyle warnings - https://docs.astral.sh/ruff/rules/#warning-w
    "I",      # isort - https://docs.astral.sh/ruff/rules/#isort-i
    "UP",     # pyupgrade - https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "SLF",    # self - https://docs.astral.sh/ruff/settings/#lintflake8-self
    "PT012",  # flake8-pytest-style rules - https://docs.astral.sh/ruff/rules/pytest-raises-with-multiple-statements/#pytest-raises-with-multiple-statements-pt012
    "RUF018", # walrus operators in asserts - https://docs.astral.sh/ruff/rules/assignment-in-assert/
    "TID251", # banned api - https://docs.astral.sh/ruff/rules/banned-api/
    "INP001", # missing __init__.py - https://docs.astral.sh/ruff/rules/implicit-namespace-package/
]
lint.extend-ignore = [
    "E501", # Line too long
    "B008", # Allow inject("device")
]
[tool.ruff.lint.per-file-ignores]
# By default, private member access is allowed in tests
# See https://github.com/DiamondLightSource/python-copier-template/issues/154
# Remove this line to forbid private member access, walrys operators in asserts, banned api in tests
"tests/**/*" = ["SLF001", "B023", "RUF018", "TID251"]
".github/**/*" = ["INP001"]
"docs/**/*" = ["INP001"]
"utility_scripts/**/*" = ["INP001"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"time.sleep".msg = "Use bps.sleep instead. # noqa will disable this rule for that line. See https://github.com/DiamondLightSource/mx-bluesky/issues/925"

[tool.mypy]
plugins = ["pydantic.mypy"]

[tool.importlinter]
root_package = "mx_bluesky"

[[tool.importlinter.contracts]]
name = "Common does not import from apps"
type = "forbidden"
source_modules = "mx_bluesky.common"
forbidden_modules = ["mx_bluesky.beamlines", "mx_bluesky.hyperion"]

[[tool.importlinter.contracts]]
name = "Beamlines do not import from each other"
type = "independence"
modules = "mx_bluesky.beamlines.*"

[[tool.importlinter.contracts]]
name = "Beamlines do not import from hyperion"
type = "forbidden"
source_modules = "mx_bluesky.beamlines.**"
forbidden_modules = "mx_bluesky.hyperion.**"
