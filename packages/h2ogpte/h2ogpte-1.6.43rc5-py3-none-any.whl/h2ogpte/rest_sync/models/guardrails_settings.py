# coding: utf-8

"""
    h2oGPTe REST API

     # Overview   Users can easily interact with the h2oGPTe API through its REST API, allowing HTTP requests from any programming language.  ## Authorization: Getting an API key  Sign up/in at Enterprise h2oGPTe and generate one of the following two types of API keys:   - **Global API key**: If a Collection is not specified when creating a new API Key, that key is considered to be a global API Key. Use global API Keys to grant full user impersonation and system-wide access to all of your work. Anyone with access to one of your global API Keys can create, delete, or interact with any of your past, current, and future Collections, Documents, Chats, and settings.  - **Collection-specific API key**: Use Collection-specific API Keys to grant external access to only Chat with a specified Collection and make related API calls to it. Collection-specific API keys do not allow other API calls, such as creation, deletion, or access to other Collections or Chats.   Access Enterprise h2oGPTe through your [H2O Generative AI](https://genai.h2o.ai/appstore) app store account, available with a freemium tier.  ## Authorization: Using an API key   All h2oGPTe REST API requests must include an API Key in the \"Authorization\" HTTP header, formatted as follows:  ``` Authorization: Bearer sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ```  ```sh curl -X 'POST' \\   'https://h2ogpte.genai.h2o.ai/api/v1/collections' \\   -H 'accept: application/json' \\   -H 'Content-Type: application/json' \\   -H 'Authorization: Bearer sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' \\   -d '{     \"name\": \"The name of my Collection\",     \"description\": \"The description of my Collection\",     \"embedding_model\": \"BAAI/bge-large-en-v1.5\"   }' ```      ## Interactive h2oGPTe API testing  This page only showcases the h2oGPTe REST API; you can test it directly in the [Swagger UI](https://h2ogpte.genai.h2o.ai/swagger-ui/). Ensure that you are logged into your Enterprise h2oGPTe account. 

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GuardrailsSettings(BaseModel):
    """
    GuardrailsSettings
    """ # noqa: E501
    exception_message: Optional[StrictStr] = Field(default=None, description="A message that will be returned in case some guardrails settings are violated.")
    column_redaction_config: Optional[List[Annotated[List[StrictStr], Field(min_length=2, max_length=2)]]] = Field(default=None, description="List of [column_pattern, redaction_label], both strings.")
    disallowed_regex_patterns: Optional[List[StrictStr]] = Field(default=None, description="A list of regular expressions that match custom PII.")
    presidio_labels_to_flag: Optional[List[StrictStr]] = Field(default=None, description="A list of entities to be flagged as PII by the built-in Presidio model.")
    pii_labels_to_flag: Optional[List[StrictStr]] = Field(default=None, description="A list of entities to be flagged as PII by the built-in PII model.")
    pii_detection_parse_action: Optional[StrictStr] = Field(default=None, description="What to do when PII is detected during parsing of documents. The 'redact' option will replace disallowed content in the ingested documents with redaction bars.")
    pii_detection_llm_input_action: Optional[StrictStr] = Field(default=None, description="What to do when PII is detected in the input to the LLM (document content and user prompts). The 'redact' option will replace disallowed content with placeholders.")
    pii_detection_llm_output_action: Optional[StrictStr] = Field(default=None, description="What to do when PII is detected in the output of the LLM. The 'redact' option will replace disallowed content with placeholders.")
    prompt_guard_labels_to_flag: Optional[List[StrictStr]] = Field(default=None, description="A list of entities to be flagged as safety violations in user prompts by the built-in prompt guard model.")
    guardrails_labels_to_flag: Optional[List[StrictStr]] = Field(default=None, description="A list of entities to be flagged as safety violations in user prompts. Must be a subset of guardrails_entities, if provided.")
    guardrails_llm: Optional[StrictStr] = Field(default=None, description="LLM to use for Guardrails and PII detection")
    guardrails_safe_category: Optional[StrictStr] = Field(default=None, description="Name of the safe category for guardrails. Must be a key in guardrails_entities, if provided. Otherwise uses system defaults.")
    guardrails_entities: Optional[Dict[str, StrictStr]] = Field(default=None, description="Dictionary of entities and their descriptions for the guardrails model to classify. The first entry is the \"safe\" class, the rest are \"unsafe\" classes.")
    column_redaction_custom_entities_to_flag: Optional[List[StrictStr]] = Field(default=None, description="Deprecated - Use custom_pii_entities_to_flag. A list of entities to redact in tabular data files. Must be a subset of column_redaction_custom_entities, if provided.")
    column_redaction_custom_entities: Optional[Dict[str, StrictStr]] = Field(default=None, description="(Optional) Deprecated - Use custom_pii_entities. A dictionary of entities and a short description for the LLM to check for and redact columns containing PII in tabular data files.")
    custom_pii_entities_to_flag: Optional[List[StrictStr]] = Field(default=None, description="A list of entities to redact in tabular data files. Must be a subset of custom_pii_entities, if provided.")
    custom_pii_entities: Optional[Dict[str, StrictStr]] = Field(default=None, description="(Optional) A dictionary of entities and a short description for the LLM to check for and redact columns containing PII in tabular data files.")
    __properties: ClassVar[List[str]] = ["exception_message", "column_redaction_config", "disallowed_regex_patterns", "presidio_labels_to_flag", "pii_labels_to_flag", "pii_detection_parse_action", "pii_detection_llm_input_action", "pii_detection_llm_output_action", "prompt_guard_labels_to_flag", "guardrails_labels_to_flag", "guardrails_llm", "guardrails_safe_category", "guardrails_entities", "column_redaction_custom_entities_to_flag", "column_redaction_custom_entities", "custom_pii_entities_to_flag", "custom_pii_entities"]

    @field_validator('pii_detection_parse_action')
    def pii_detection_parse_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allow', 'redact', 'fail']):
            raise ValueError("must be one of enum values ('allow', 'redact', 'fail')")
        return value

    @field_validator('pii_detection_llm_input_action')
    def pii_detection_llm_input_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allow', 'redact', 'fail']):
            raise ValueError("must be one of enum values ('allow', 'redact', 'fail')")
        return value

    @field_validator('pii_detection_llm_output_action')
    def pii_detection_llm_output_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allow', 'redact', 'fail']):
            raise ValueError("must be one of enum values ('allow', 'redact', 'fail')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuardrailsSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuardrailsSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exception_message": obj.get("exception_message"),
            "column_redaction_config": obj.get("column_redaction_config"),
            "disallowed_regex_patterns": obj.get("disallowed_regex_patterns"),
            "presidio_labels_to_flag": obj.get("presidio_labels_to_flag"),
            "pii_labels_to_flag": obj.get("pii_labels_to_flag"),
            "pii_detection_parse_action": obj.get("pii_detection_parse_action"),
            "pii_detection_llm_input_action": obj.get("pii_detection_llm_input_action"),
            "pii_detection_llm_output_action": obj.get("pii_detection_llm_output_action"),
            "prompt_guard_labels_to_flag": obj.get("prompt_guard_labels_to_flag"),
            "guardrails_labels_to_flag": obj.get("guardrails_labels_to_flag"),
            "guardrails_llm": obj.get("guardrails_llm"),
            "guardrails_safe_category": obj.get("guardrails_safe_category"),
            "guardrails_entities": obj.get("guardrails_entities"),
            "column_redaction_custom_entities_to_flag": obj.get("column_redaction_custom_entities_to_flag"),
            "column_redaction_custom_entities": obj.get("column_redaction_custom_entities"),
            "custom_pii_entities_to_flag": obj.get("custom_pii_entities_to_flag"),
            "custom_pii_entities": obj.get("custom_pii_entities")
        })
        return _obj


