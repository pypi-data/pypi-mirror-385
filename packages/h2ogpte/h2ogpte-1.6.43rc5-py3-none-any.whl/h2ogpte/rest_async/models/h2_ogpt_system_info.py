# coding: utf-8

"""
    h2oGPTe REST API

     # Overview   Users can easily interact with the h2oGPTe API through its REST API, allowing HTTP requests from any programming language.  ## Authorization: Getting an API key  Sign up/in at Enterprise h2oGPTe and generate one of the following two types of API keys:   - **Global API key**: If a Collection is not specified when creating a new API Key, that key is considered to be a global API Key. Use global API Keys to grant full user impersonation and system-wide access to all of your work. Anyone with access to one of your global API Keys can create, delete, or interact with any of your past, current, and future Collections, Documents, Chats, and settings.  - **Collection-specific API key**: Use Collection-specific API Keys to grant external access to only Chat with a specified Collection and make related API calls to it. Collection-specific API keys do not allow other API calls, such as creation, deletion, or access to other Collections or Chats.   Access Enterprise h2oGPTe through your [H2O Generative AI](https://genai.h2o.ai/appstore) app store account, available with a freemium tier.  ## Authorization: Using an API key   All h2oGPTe REST API requests must include an API Key in the \"Authorization\" HTTP header, formatted as follows:  ``` Authorization: Bearer sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ```  ```sh curl -X 'POST' \\   'https://h2ogpte.genai.h2o.ai/api/v1/collections' \\   -H 'accept: application/json' \\   -H 'Content-Type: application/json' \\   -H 'Authorization: Bearer sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' \\   -d '{     \"name\": \"The name of my Collection\",     \"description\": \"The description of my Collection\",     \"embedding_model\": \"BAAI/bge-large-en-v1.5\"   }' ```      ## Interactive h2oGPTe API testing  This page only showcases the h2oGPTe REST API; you can test it directly in the [Swagger UI](https://h2ogpte.genai.h2o.ai/swagger-ui/). Ensure that you are logged into your Enterprise h2oGPTe account. 

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from h2ogpte.rest_async.models.h2_ogptgpu_info import H2OGPTGPUInfo
from typing import Optional, Set
from typing_extensions import Self

class H2OGPTSystemInfo(BaseModel):
    """
    H2OGPTSystemInfo
    """ # noqa: E501
    timestamp: StrictStr
    uptime_seconds: Union[StrictFloat, StrictInt]
    hostname: StrictStr
    os_name: StrictStr
    os_version: StrictStr
    kernel_version: StrictStr
    cpu_count_physical: StrictInt
    cpu_count_logical: StrictInt
    cpu_percent_per_cpu: List[Union[StrictFloat, StrictInt]]
    cpu_freq_current: Union[StrictFloat, StrictInt]
    cpu_freq_min: Union[StrictFloat, StrictInt]
    cpu_freq_max: Union[StrictFloat, StrictInt]
    cpu_temperature: Optional[Union[StrictFloat, StrictInt]] = None
    load_avg_1min: Union[StrictFloat, StrictInt]
    load_avg_5min: Union[StrictFloat, StrictInt]
    load_avg_15min: Union[StrictFloat, StrictInt]
    memory_total: StrictInt
    memory_available: StrictInt
    memory_used: StrictInt
    memory_percent: Union[StrictFloat, StrictInt]
    swap_total: StrictInt
    swap_used: StrictInt
    swap_percent: Union[StrictFloat, StrictInt]
    disk_partitions: List[Dict[str, StrictStr]]
    disk_usage: Dict[str, Dict[str, Union[StrictFloat, StrictInt]]]
    disk_io_counters: Dict[str, Union[StrictFloat, StrictInt]]
    network_interfaces: List[StrictStr]
    network_io_counters: Dict[str, Dict[str, Union[StrictFloat, StrictInt]]]
    network_connections_count: StrictInt
    gpus: List[H2OGPTGPUInfo]
    process_count: StrictInt
    top_processes_cpu: List[Dict[str, Any]]
    top_processes_memory: List[Dict[str, Any]]
    __properties: ClassVar[List[str]] = ["timestamp", "uptime_seconds", "hostname", "os_name", "os_version", "kernel_version", "cpu_count_physical", "cpu_count_logical", "cpu_percent_per_cpu", "cpu_freq_current", "cpu_freq_min", "cpu_freq_max", "cpu_temperature", "load_avg_1min", "load_avg_5min", "load_avg_15min", "memory_total", "memory_available", "memory_used", "memory_percent", "swap_total", "swap_used", "swap_percent", "disk_partitions", "disk_usage", "disk_io_counters", "network_interfaces", "network_io_counters", "network_connections_count", "gpus", "process_count", "top_processes_cpu", "top_processes_memory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of H2OGPTSystemInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in gpus (list)
        _items = []
        if self.gpus:
            for _item_gpus in self.gpus:
                if _item_gpus:
                    _items.append(_item_gpus.to_dict())
            _dict['gpus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of H2OGPTSystemInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "uptime_seconds": obj.get("uptime_seconds"),
            "hostname": obj.get("hostname"),
            "os_name": obj.get("os_name"),
            "os_version": obj.get("os_version"),
            "kernel_version": obj.get("kernel_version"),
            "cpu_count_physical": obj.get("cpu_count_physical"),
            "cpu_count_logical": obj.get("cpu_count_logical"),
            "cpu_percent_per_cpu": obj.get("cpu_percent_per_cpu"),
            "cpu_freq_current": obj.get("cpu_freq_current"),
            "cpu_freq_min": obj.get("cpu_freq_min"),
            "cpu_freq_max": obj.get("cpu_freq_max"),
            "cpu_temperature": obj.get("cpu_temperature"),
            "load_avg_1min": obj.get("load_avg_1min"),
            "load_avg_5min": obj.get("load_avg_5min"),
            "load_avg_15min": obj.get("load_avg_15min"),
            "memory_total": obj.get("memory_total"),
            "memory_available": obj.get("memory_available"),
            "memory_used": obj.get("memory_used"),
            "memory_percent": obj.get("memory_percent"),
            "swap_total": obj.get("swap_total"),
            "swap_used": obj.get("swap_used"),
            "swap_percent": obj.get("swap_percent"),
            "disk_partitions": obj.get("disk_partitions"),
            "disk_usage": obj.get("disk_usage"),
            "disk_io_counters": obj.get("disk_io_counters"),
            "network_interfaces": obj.get("network_interfaces"),
            "network_io_counters": obj.get("network_io_counters"),
            "network_connections_count": obj.get("network_connections_count"),
            "gpus": [H2OGPTGPUInfo.from_dict(_item) for _item in obj["gpus"]] if obj.get("gpus") is not None else None,
            "process_count": obj.get("process_count"),
            "top_processes_cpu": obj.get("top_processes_cpu"),
            "top_processes_memory": obj.get("top_processes_memory")
        })
        return _obj


