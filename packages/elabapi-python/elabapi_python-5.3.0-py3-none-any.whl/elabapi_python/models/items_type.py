# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemsType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'status': 'int',
        'color': 'str',
        'body': 'str',
        'ordering': 'int',
        'canread': 'str',
        'canwrite': 'str',
        'metadata': 'Metadata'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'status': 'status',
        'color': 'color',
        'body': 'body',
        'ordering': 'ordering',
        'canread': 'canread',
        'canwrite': 'canwrite',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, title=None, status=None, color=None, body=None, ordering=None, canread=None, canwrite=None, metadata=None):  # noqa: E501
        """ItemsType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._status = None
        self._color = None
        self._body = None
        self._ordering = None
        self._canread = None
        self._canwrite = None
        self._metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if status is not None:
            self.status = status
        if color is not None:
            self.color = color
        if body is not None:
            self.body = body
        if ordering is not None:
            self.ordering = ordering
        if canread is not None:
            self.canread = canread
        if canwrite is not None:
            self.canwrite = canwrite
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this ItemsType.  # noqa: E501


        :return: The id of this ItemsType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemsType.


        :param id: The id of this ItemsType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this ItemsType.  # noqa: E501


        :return: The title of this ItemsType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemsType.


        :param title: The title of this ItemsType.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def status(self):
        """Gets the status of this ItemsType.  # noqa: E501


        :return: The status of this ItemsType.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItemsType.


        :param status: The status of this ItemsType.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def color(self):
        """Gets the color of this ItemsType.  # noqa: E501


        :return: The color of this ItemsType.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ItemsType.


        :param color: The color of this ItemsType.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def body(self):
        """Gets the body of this ItemsType.  # noqa: E501


        :return: The body of this ItemsType.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ItemsType.


        :param body: The body of this ItemsType.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def ordering(self):
        """Gets the ordering of this ItemsType.  # noqa: E501


        :return: The ordering of this ItemsType.  # noqa: E501
        :rtype: int
        """
        return self._ordering

    @ordering.setter
    def ordering(self, ordering):
        """Sets the ordering of this ItemsType.


        :param ordering: The ordering of this ItemsType.  # noqa: E501
        :type: int
        """

        self._ordering = ordering

    @property
    def canread(self):
        """Gets the canread of this ItemsType.  # noqa: E501


        :return: The canread of this ItemsType.  # noqa: E501
        :rtype: str
        """
        return self._canread

    @canread.setter
    def canread(self, canread):
        """Sets the canread of this ItemsType.


        :param canread: The canread of this ItemsType.  # noqa: E501
        :type: str
        """

        self._canread = canread

    @property
    def canwrite(self):
        """Gets the canwrite of this ItemsType.  # noqa: E501


        :return: The canwrite of this ItemsType.  # noqa: E501
        :rtype: str
        """
        return self._canwrite

    @canwrite.setter
    def canwrite(self, canwrite):
        """Sets the canwrite of this ItemsType.


        :param canwrite: The canwrite of this ItemsType.  # noqa: E501
        :type: str
        """

        self._canwrite = canwrite

    @property
    def metadata(self):
        """Gets the metadata of this ItemsType.  # noqa: E501


        :return: The metadata of this ItemsType.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ItemsType.


        :param metadata: The metadata of this ItemsType.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemsType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemsType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
