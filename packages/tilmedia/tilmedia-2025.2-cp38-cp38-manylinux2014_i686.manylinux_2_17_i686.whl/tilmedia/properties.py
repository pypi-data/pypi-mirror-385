# fmt: off

PROPERTY_INFORMATION = {
    'd': {
        'description': 'Density',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'h': {
        'description': 'Specific enthalpy',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p': {
        'description': 'Pressure',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    's': {
        'description': 'Specific entropy',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T': {
        'description': 'Temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'xi': {
        'description': 'Mass fractions of the first nc-1 components',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'xi': {
        'description': 'Water Mass fraction',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'x': {
        'description': 'Mole fraction',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'M': {
        'description': 'Average molar mass',
        'unit': 'kg/mol',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'phase': {
        'description': '0=subcooled, 1=two phase, 2=superheated',
        'unit': '1',
        'numpy_type': 'int32',
        'is_vector': False,
    },
    'q': {
        'description': 'Vapor quality (steam mass fraction)',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'cp': {
        'description': 'Specific isobaric heat capacity cp',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'cv': {
        'description': 'Specific isochoric heat capacity cv',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'beta': {
        'description': 'Isobaric thermal expansion coefficient',
        'unit': '1/K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'kappa': {
        'description': 'Isothermal compressibility',
        'unit': '1/Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'w': {
        'description': 'Speed of sound',
        'unit': 'm/s',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'drhodh_pxi': {
        'description': 'Derivative of density wrt specific enthalpy at constant pressure and mass fraction',
        'unit': 'kg^2/(m^3*J)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'drhodp_hxi': {
        'description': 'Derivative of density wrt pressure at specific enthalpy and mass fraction',
        'unit': 'kg/(N*m)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'drhodxi_ph': {
        'description': 'Derivative of density wrt mass fraction of water at constant pressure and specific enthalpy',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'p_i': {
        'description': 'Partial pressure',
        'unit': 'kg^2/(m^3*J)',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'xi_gas': {
        'description': 'Mass fraction of gaseous condensing component',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'phi': {
        'description': 'Relative humidity',
        'unit': '%',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'gamma': {
        'description': 'Heat capacity ratio aka isentropic expansion factor',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p_s': {
        'description': 'Saturation partial pressure of condensing component',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'xi_s': {
        'description': 'Saturation mass fraction of condensing component',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'delta_hv': {
        'description': 'Specific enthalpy of vaporisation of condensing component',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'delta_hd': {
        'description': 'Specific enthalpy of desublimation of condensing component',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'h_i': {
        'description': 'Specific enthalpy of theoretical pure component',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    's_i': {
        'description': 'Specific entropy of theoretical pure component',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'M_i': {
        'description': 'Molar mass of component i',
        'unit': 'kg/mol',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'hF_i': {
        'description': 'Specific enthalpy of formation',
        'unit': 'kJ/kg',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'cp_i': {
        'description': 'Specific isobaric heat capacity of theoretical pure component',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'humRatio': {
        'description': 'Content of condensing component aka humidity ratio',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'humRatio_s': {
        'description': 'Saturation content of condensing component aka saturation humidity ratio',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'h1px': {
        'description': 'Specific enthalpy h related to the mass of components that cannot condense',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_freeze': {
        'description': 'Freezing point of condensing component',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'Pr': {
        'description': 'Prandtl number',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'lamb': {
        'description': 'Thermal conductivity',
        'unit': 'W/(m*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'eta': {
        'description': 'Dynamic viscosity',
        'unit': 'Pa*s',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'sigma': {
        'description': 'Surface tension',
        'unit': 'J/m^2',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'dc': {
        'description': 'Critical density',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'hc': {
        'description': 'Critical specific enthalpy',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'pc': {
        'description': 'Critical pressure',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'sc': {
        'description': 'Critical specific entropy',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'Tc': {
        'description': 'Critical temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'cpc': {
        'description': 'Critical specific isobaric heat capacity cp',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'betac': {
        'description': 'Critical isobaric thermal expansion coefficient',
        'unit': '1/K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'kappac': {
        'description': 'Critical isothermal compressibility',
        'unit': '1/Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'lambdac': {
        'description': 'Critical thermal conductivity',
        'unit': 'W/(m*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'etac': {
        'description': 'Critical dynamic viscosity',
        'unit': 'Pa*s',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'sigmac': {
        'description': 'Critical surface tension',
        'unit': 'J/m^2',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'd_l': {
        'description': 'Density of liquid phase',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'd_v': {
        'description': 'Density of vapour phase',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'h_l': {
        'description': 'Specific enthalpy of liquid phase',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'h_v': {
        'description': 'Specific enthalpy of vapour phase',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p_l': {
        'description': 'Pressure of liquid phase',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p_v': {
        'description': 'Pressure of vapour phase',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    's_l': {
        'description': 'Specific entropy of liquid phase',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    's_v': {
        'description': 'Specific entropy of vapour phase',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_l': {
        'description': 'Temperature of liquid phase',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_v': {
        'description': 'Temperature of vapour phase',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'xi_l': {
        'description': 'Mass fraction of liquid phase',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'xi_v': {
        'description': 'Mass fraction of vapour phase',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'cp_l': {
        'description': 'Specific heat capacity cp of liquid phase',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'cp_v': {
        'description': 'Specific heat capacity cp of vapour phase',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'beta_l': {
        'description': 'Isobaric expansion coefficient of liquid phase',
        'unit': '1/K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'beta_v': {
        'description': 'Isobaric expansion coefficient of vapour phase',
        'unit': '1/K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'kappa_l': {
        'description': 'Isothermal compressibility of liquid phase',
        'unit': '1/Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'kappa_v': {
        'description': 'Isothermal compressibility of vapour phase',
        'unit': '1/Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'Pr_l': {
        'description': 'Prandtl number of liquid phase',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'Pr_v': {
        'description': 'Prandtl number of vapour phase',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'lambda_l': {
        'description': 'Thermal conductivity of liquid phase',
        'unit': 'W/(m*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'lambda_v': {
        'description': 'Thermal conductivity of vapour phase',
        'unit': 'W/(m*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'eta_l': {
        'description': 'Dynamic viscosity of liquid phase',
        'unit': 'Pa*s',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'eta_v': {
        'description': 'Dynamic viscosity of vapour phase',
        'unit': 'Pa*s',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'dv_dew': {
        'description': 'dew point vapour density',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'dl_bubble': {
        'description': 'bubble point liquid density',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'hv_dew': {
        'description': 'dew point vapour specific enthalpy',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'hl_bubble': {
        'description': 'bubble point liquid specific enthalpy',
        'unit': 'J/kg',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p_dew': {
        'description': 'dew point pressure',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p_bubble': {
        'description': 'bubble point pressure',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'sv_dew': {
        'description': 'dew point vapour specific entropy',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'sl_bubble': {
        'description': 'bubble point liquid specific entropy',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_dew': {
        'description': 'dew point temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_bubble': {
        'description': 'bubble point temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'xil_dew': {
        'description': 'dew point liquid mass fraction',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'xiv_bubble': {
        'description': 'bubble point vapour mass fraction',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'cpv_dew': {
        'description': 'Specific isobaric heat capacity cp at dew point',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'cpl_bubble': {
        'description': 'Specific isobaric heat capacity cp at bubble point',
        'unit': 'J/(kg*K)',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'betav_dew': {
        'description': 'Isobaric thermal expansion coefficient at dew point',
        'unit': '1/K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'betal_bubble': {
        'description': 'Isobaric thermal expansion coefficient at bubble point',
        'unit': '1/K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'kappav_dew': {
        'description': 'Isothermal compressibility at dew point',
        'unit': '1/Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'kappal_bubble': {
        'description': 'Isothermal compressibility at bubble point',
        'unit': '1/Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'wv_dew': {
        'description': 'Speed of sound at dew point',
        'unit': 'm/s',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'wl_bubble': {
        'description': 'Speed of sound at bubble point',
        'unit': 'm/s',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_ccb': {
        'description': 'Cricondenbar temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_cct': {
        'description': 'Cricondentherm temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p_ccb': {
        'description': 'Cricondenbar pressure',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'p_cct': {
        'description': 'Cricondentherm pressure',
        'unit': 'Pa',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_wetBulb': {
        'description': 'Wet bulb temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'T_iceBulb': {
        'description': 'Ice bulb temperature',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'dv_bubble': {
        'description': 'bubble point vapour density',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'dl_dew': {
        'description': 'dew point liquid density',
        'unit': 'kg/m^3',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'Y': {
        'description': 'Transformed y axis in Mollier\'s hx chart',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'xi_dryGas': {
        'description': 'Mass fraction of dry gas',
        'unit': '1',
        'numpy_type': 'float64',
        'is_vector': True,
    },
    'current_T_min': {
        'description': 'Minimal temperature of the valid region',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
    'current_T_max': {
        'description': 'Maximal temperature of the valid region',
        'unit': 'K',
        'numpy_type': 'float64',
        'is_vector': False,
    },
}

