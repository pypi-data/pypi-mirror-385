{"version":3,"file":"static/js/230.190c8dfc.chunk.js","mappings":"oSAOA,MAsGA,EAtGkBA,KAChB,MAAM,IAAEC,EAAG,GAAEC,EAAE,IAAEC,IAAQC,EAAAA,EAAAA,MAKlBC,EAAQC,IAAaC,EAAAA,EAAAA,aACrBC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,UAC/BG,GAAeC,EAAAA,EAAAA,cACnB,ICYoBC,EAACV,EAAYC,EAAaU,IACzCC,IAAAA,IAAkB,cAAe,CACtCC,OAAQ,CACNb,KACAC,MACAU,aDhBAD,CAASV,EAAIC,EAAKK,GACfQ,MAAMC,IACDA,EAAIC,KAAKb,OACXC,EAAUW,EAAIC,KAAKA,KAAKC,QAExBb,EAAUW,EAAIC,KAAKE,IACrB,IAEDC,OAAOC,GAAQhB,EAAUgB,EAAIC,eAClC,CAACrB,EAAIC,EAAKK,IAoCZ,OAjCAgB,EAAAA,EAAAA,YAAU,KACR,OAAQvB,GACN,IAAK,SCrBcwB,EAACvB,EAAYC,IAC7BW,IAAAA,IAAkB,eAAgB,CACvCC,OAAQ,CACNb,KACAC,SDkBEsB,CAAUvB,EAAIC,GACXa,MAAMC,IACDA,EAAIC,KAAKb,OACXC,EAAUW,EAAIC,KAAKA,KAAKC,QAExBb,EAAUW,EAAIC,KAAKE,IACrB,IAEDC,OAAOC,GAAQhB,EAAUgB,EAAIC,cAChC,MACF,IAAK,OCvBYG,EAACxB,EAAYC,IAC3BW,IAAAA,IAAkB,aAAc,CACrCC,OAAQ,CACNb,KACAC,SDoBEuB,CAAQxB,EAAIC,GACTa,MAAMC,IACDA,EAAIC,KAAKb,OACXC,EAAUW,EAAIC,KAAKA,KAAKC,QAExBb,EAAUW,EAAIC,KAAKE,IACrB,IAEDC,OAAOC,GAAQhB,EAAUgB,EAAIC,cAChC,MACF,IAAK,QACHb,IACA,MACF,QACEJ,EAAU,WAAWL,uBAEzB,GACC,CAACA,EAAKS,EAAcR,EAAIC,KAGzBwB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,EAAGC,MAAO,QAASC,SAAA,EACrCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,MAAOlC,EAAI+B,SACX,UAAR/B,IACCgC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,EAAGM,UAAW,GAAIJ,UACpCL,EAAAA,EAAAA,MAACU,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEP,SAAA,EACzBC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACG,MAAI,EAAAR,UACRC,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CACLC,MAAOlC,EACPmC,SAAWC,GAAMnC,EAAUmC,EAAEC,OAAOH,OAAiBV,SAEpD,CACC,QACA,WACA,KACA,aACA,iBACA,QACA,gBACA,QACA,gBACA,SACA,UACA,oBACAc,KAAKF,IACLX,EAAAA,EAAAA,KAACc,EAAAA,EAAQ,CAACL,MAAOE,EAAEZ,SAAEY,WAI3BX,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACG,MAAI,EAAAR,UACRC,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAACC,QAASvC,EAAasB,SAAC,sBAMzCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,MAAO,OAAOjC,YAAaC,IAAM6B,UAC1CC,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CACbC,QAAS9C,GAAU,UACnB+C,SAAS,SACTC,OAAQ,UAGR,C","sources":["pages/cmd/CMDResult.tsx","service/util.ts"],"sourcesContent":["import { Box, Button, Grid, MenuItem, Select } from \"@mui/material\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LogVirtualView from \"../../components/LogView/LogVirtualView\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { getJmap, getJstack, getJstat } from \"../../service/util\";\n\nconst CMDResult = () => {\n  const { cmd, ip, pid } = useParams() as {\n    cmd: string;\n    ip: string;\n    pid: string;\n  };\n  const [result, setResult] = useState<string>();\n  const [option, setOption] = useState(\"gcutil\");\n  const executeJstat = useCallback(\n    () =>\n      getJstat(ip, pid, option)\n        .then((rsp) => {\n          if (rsp.data.result) {\n            setResult(rsp.data.data.output);\n          } else {\n            setResult(rsp.data.msg);\n          }\n        })\n        .catch((err) => setResult(err.toString())),\n    [ip, pid, option],\n  );\n\n  useEffect(() => {\n    switch (cmd) {\n      case \"jstack\":\n        getJstack(ip, pid)\n          .then((rsp) => {\n            if (rsp.data.result) {\n              setResult(rsp.data.data.output);\n            } else {\n              setResult(rsp.data.msg);\n            }\n          })\n          .catch((err) => setResult(err.toString()));\n        break;\n      case \"jmap\":\n        getJmap(ip, pid)\n          .then((rsp) => {\n            if (rsp.data.result) {\n              setResult(rsp.data.data.output);\n            } else {\n              setResult(rsp.data.msg);\n            }\n          })\n          .catch((err) => setResult(err.toString()));\n        break;\n      case \"jstat\":\n        executeJstat();\n        break;\n      default:\n        setResult(`Command ${cmd} is not supported.`);\n        break;\n    }\n  }, [cmd, executeJstat, ip, pid]);\n\n  return (\n    <Box sx={{ padding: 4, width: \"100%\" }}>\n      <TitleCard title={cmd}>\n        {cmd === \"jstat\" && (\n          <Box sx={{ padding: 2, marginTop: 2 }}>\n            <Grid container spacing={1}>\n              <Grid item>\n                <Select\n                  value={option}\n                  onChange={(e) => setOption(e.target.value as string)}\n                >\n                  {[\n                    \"class\",\n                    \"compiler\",\n                    \"gc\",\n                    \"gccapacity\",\n                    \"gcmetacapacity\",\n                    \"gcnew\",\n                    \"gcnewcapacity\",\n                    \"gcold\",\n                    \"gcoldcapacity\",\n                    \"gcutil\",\n                    \"gccause\",\n                    \"printcompilation\",\n                  ].map((e) => (\n                    <MenuItem value={e}>{e}</MenuItem>\n                  ))}\n                </Select>\n              </Grid>\n              <Grid item>\n                <Button onClick={executeJstat}>Execute</Button>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n      </TitleCard>\n      <TitleCard title={`IP: ${ip} / Pid: ${pid}`}>\n        <LogVirtualView\n          content={result || \"loading\"}\n          language=\"prolog\"\n          height={800}\n        />\n      </TitleCard>\n    </Box>\n  );\n};\n\nexport default CMDResult;\n","import axios from \"axios\";\n\ntype CMDRsp = {\n  result: boolean;\n  msg: string;\n  data: {\n    output: string;\n  };\n};\n\nexport const getJstack = (ip: string, pid: string) => {\n  return axios.get<CMDRsp>(\"utils/jstack\", {\n    params: {\n      ip,\n      pid,\n    },\n  });\n};\n\nexport const getJmap = (ip: string, pid: string) => {\n  return axios.get<CMDRsp>(\"utils/jmap\", {\n    params: {\n      ip,\n      pid,\n    },\n  });\n};\n\nexport const getJstat = (ip: string, pid: string, options: string) => {\n  return axios.get<CMDRsp>(\"utils/jstat\", {\n    params: {\n      ip,\n      pid,\n      options,\n    },\n  });\n};\n\ntype NamespacesRsp = {\n  result: boolean;\n  msg: string;\n  data: {\n    namespaces: {\n      namespaceId: string;\n      hostNameList: string[];\n    }[];\n  };\n};\n\nexport const getNamespaces = () => {\n  return axios.get<NamespacesRsp>(\"namespaces\");\n};\n"],"names":["CMDResult","cmd","ip","pid","useParams","result","setResult","useState","option","setOption","executeJstat","useCallback","getJstat","options","axios","params","then","rsp","data","output","msg","catch","err","toString","useEffect","getJstack","getJmap","_jsxs","Box","sx","padding","width","children","_jsx","TitleCard","title","marginTop","Grid","container","spacing","item","Select","value","onChange","e","target","map","MenuItem","Button","onClick","LogVirtualView","content","language","height"],"sourceRoot":""}