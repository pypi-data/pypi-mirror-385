{"version":3,"file":"CreditsPanel-Boe99Tcg.js","sources":["../../src/services/customerEventsService.ts","../../src/components/dialog/content/setting/UsageLogsTable.vue","../../src/components/dialog/content/setting/CreditsPanel.vue"],"sourcesContent":["import type { AxiosError, AxiosResponse } from 'axios'\nimport axios from 'axios'\nimport { ref } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nimport { COMFY_API_BASE_URL } from '@/config/comfyApi'\nimport { useFirebaseAuthStore } from '@/stores/firebaseAuthStore'\nimport type { components, operations } from '@/types/comfyRegistryTypes'\nimport { isAbortError } from '@/utils/typeGuardUtil'\n\nexport enum EventType {\n  CREDIT_ADDED = 'credit_added',\n  ACCOUNT_CREATED = 'account_created',\n  API_USAGE_STARTED = 'api_usage_started',\n  API_USAGE_COMPLETED = 'api_usage_completed'\n}\n\ntype CustomerEventsResponse =\n  operations['GetCustomerEvents']['responses']['200']['content']['application/json']\n\ntype CustomerEventsResponseQuery =\n  operations['GetCustomerEvents']['parameters']['query']\n\nexport type AuditLog = components['schemas']['AuditLog']\n\nconst customerApiClient = axios.create({\n  baseURL: COMFY_API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nexport const useCustomerEventsService = () => {\n  const isLoading = ref(false)\n  const error = ref<string | null>(null)\n  const { d } = useI18n()\n\n  const handleRequestError = (\n    err: unknown,\n    context: string,\n    routeSpecificErrors?: Record<number, string>\n  ) => {\n    // Don't treat cancellation as an error\n    if (isAbortError(err)) return\n\n    let message: string\n    if (!axios.isAxiosError(err)) {\n      message = `${context} failed: ${err instanceof Error ? err.message : String(err)}`\n    } else {\n      const axiosError = err as AxiosError<{ message: string }>\n      const status = axiosError.response?.status\n      if (status && routeSpecificErrors?.[status]) {\n        message = routeSpecificErrors[status]\n      } else {\n        message =\n          axiosError.response?.data?.message ??\n          `${context} failed with status ${status}`\n      }\n    }\n\n    error.value = message\n  }\n\n  const executeRequest = async <T>(\n    requestCall: () => Promise<AxiosResponse<T>>,\n    options: {\n      errorContext: string\n      routeSpecificErrors?: Record<number, string>\n    }\n  ): Promise<T | null> => {\n    const { errorContext, routeSpecificErrors } = options\n\n    isLoading.value = true\n    error.value = null\n\n    try {\n      const response = await requestCall()\n      return response.data\n    } catch (err) {\n      handleRequestError(err, errorContext, routeSpecificErrors)\n      return null\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  function formatEventType(eventType: string) {\n    switch (eventType) {\n      case 'credit_added':\n        return 'Credits Added'\n      case 'account_created':\n        return 'Account Created'\n      case 'api_usage_completed':\n        return 'API Usage'\n      default:\n        return eventType\n    }\n  }\n\n  function formatDate(dateString: string): string {\n    const date = new Date(dateString)\n\n    return d(date, {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  function formatJsonKey(key: string) {\n    return key\n      .split('_')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ')\n  }\n\n  function formatJsonValue(value: any) {\n    if (typeof value === 'number') {\n      // Format numbers with commas and decimals if needed\n      return value.toLocaleString()\n    }\n    if (typeof value === 'string' && value.match(/^\\d{4}-\\d{2}-\\d{2}/)) {\n      // Format dates nicely\n      return new Date(value).toLocaleString()\n    }\n    return value\n  }\n\n  function getEventSeverity(eventType: string) {\n    switch (eventType) {\n      case 'credit_added':\n        return 'success'\n      case 'account_created':\n        return 'info'\n      case 'api_usage_completed':\n        return 'warning'\n      default:\n        return 'info'\n    }\n  }\n\n  function hasAdditionalInfo(event: AuditLog) {\n    const { amount, api_name, model, ...otherParams } = event.params || {}\n    return Object.keys(otherParams).length > 0\n  }\n\n  function getTooltipContent(event: AuditLog) {\n    const { ...params } = event.params || {}\n\n    return Object.entries(params)\n      .map(([key, value]) => {\n        const formattedKey = formatJsonKey(key)\n        const formattedValue = formatJsonValue(value)\n        return `<strong>${formattedKey}:</strong> ${formattedValue}`\n      })\n      .join('<br>')\n  }\n\n  function formatAmount(amountMicros?: number) {\n    if (!amountMicros) return '0.00'\n    return (amountMicros / 100).toFixed(2)\n  }\n\n  async function getMyEvents({\n    page = 1,\n    limit = 10\n  }: CustomerEventsResponseQuery = {}): Promise<CustomerEventsResponse | null> {\n    const errorContext = 'Fetching customer events'\n    const routeSpecificErrors = {\n      400: 'Invalid input, object invalid',\n      404: 'Not found'\n    }\n\n    // Get auth headers\n    const authHeaders = await useFirebaseAuthStore().getAuthHeader()\n    if (!authHeaders) {\n      error.value = 'Authentication header is missing'\n      return null\n    }\n\n    return executeRequest<CustomerEventsResponse>(\n      () =>\n        customerApiClient.get('/customers/events', {\n          params: { page, limit },\n          headers: authHeaders\n        }),\n      { errorContext, routeSpecificErrors }\n    )\n  }\n\n  return {\n    // State\n    isLoading,\n    error,\n\n    // Methods\n    getMyEvents,\n    formatEventType,\n    getEventSeverity,\n    formatAmount,\n    hasAdditionalInfo,\n    formatDate,\n    formatJsonKey,\n    formatJsonValue,\n    getTooltipContent\n  }\n}\n","<template>\n  <div>\n    <div v-if=\"loading\" class=\"flex items-center justify-center p-8\">\n      <ProgressSpinner />\n    </div>\n    <div v-else-if=\"error\" class=\"p-4\">\n      <Message severity=\"error\" :closable=\"false\">{{ error }}</Message>\n    </div>\n    <DataTable\n      v-else\n      :value=\"events\"\n      :paginator=\"true\"\n      :rows=\"pagination.limit\"\n      :total-records=\"pagination.total\"\n      :first=\"dataTableFirst\"\n      :lazy=\"true\"\n      class=\"p-datatable-sm custom-datatable\"\n      @page=\"onPageChange\"\n    >\n      <Column field=\"event_type\" :header=\"$t('credits.eventType')\">\n        <template #body=\"{ data }\">\n          <Badge\n            :value=\"customerEventService.formatEventType(data.event_type)\"\n            :severity=\"customerEventService.getEventSeverity(data.event_type)\"\n          />\n        </template>\n      </Column>\n      <Column field=\"details\" :header=\"$t('credits.details')\">\n        <template #body=\"{ data }\">\n          <div class=\"event-details\">\n            <!-- Credits Added -->\n            <template v-if=\"data.event_type === EventType.CREDIT_ADDED\">\n              <div class=\"font-semibold text-green-500\">\n                {{ $t('credits.added') }} ${{\n                  customerEventService.formatAmount(data.params?.amount)\n                }}\n              </div>\n            </template>\n\n            <!-- Account Created -->\n            <template v-else-if=\"data.event_type === EventType.ACCOUNT_CREATED\">\n              <div>{{ $t('credits.accountInitialized') }}</div>\n            </template>\n\n            <!-- API Usage -->\n            <template\n              v-else-if=\"data.event_type === EventType.API_USAGE_COMPLETED\"\n            >\n              <div class=\"flex flex-col gap-1\">\n                <div class=\"font-semibold\">\n                  {{ data.params?.api_name || 'API' }}\n                </div>\n                <div class=\"text-sm text-gray-400\">\n                  {{ $t('credits.model') }}: {{ data.params?.model || '-' }}\n                </div>\n              </div>\n            </template>\n          </div>\n        </template>\n      </Column>\n      <Column field=\"createdAt\" :header=\"$t('credits.time')\">\n        <template #body=\"{ data }\">\n          {{ customerEventService.formatDate(data.createdAt) }}\n        </template>\n      </Column>\n      <Column field=\"params\" :header=\"$t('credits.additionalInfo')\">\n        <template #body=\"{ data }\">\n          <Button\n            v-if=\"customerEventService.hasAdditionalInfo(data)\"\n            v-tooltip.top=\"{\n              escape: false,\n              value: tooltipContentMap.get(data.event_id) || '',\n              pt: {\n                text: {\n                  style: {\n                    width: 'max-content !important'\n                  }\n                }\n              }\n            }\"\n            icon=\"pi pi-info-circle\"\n            class=\"p-button-text p-button-sm\"\n          />\n        </template>\n      </Column>\n    </DataTable>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Badge from 'primevue/badge'\nimport Button from 'primevue/button'\nimport Column from 'primevue/column'\nimport DataTable from 'primevue/datatable'\nimport Message from 'primevue/message'\nimport ProgressSpinner from 'primevue/progressspinner'\nimport { computed, ref } from 'vue'\n\nimport type { AuditLog } from '@/services/customerEventsService'\nimport {\n  EventType,\n  useCustomerEventsService\n} from '@/services/customerEventsService'\n\nconst events = ref<AuditLog[]>([])\nconst loading = ref(true)\nconst error = ref<string | null>(null)\n\nconst customerEventService = useCustomerEventsService()\n\nconst pagination = ref({\n  page: 1,\n  limit: 7,\n  total: 0,\n  totalPages: 0\n})\n\nconst dataTableFirst = computed(\n  () => (pagination.value.page - 1) * pagination.value.limit\n)\n\nconst tooltipContentMap = computed(() => {\n  const map = new Map<string, string>()\n  events.value.forEach((event) => {\n    if (customerEventService.hasAdditionalInfo(event) && event.event_id) {\n      map.set(event.event_id, customerEventService.getTooltipContent(event))\n    }\n  })\n  return map\n})\n\nconst loadEvents = async () => {\n  loading.value = true\n  error.value = null\n\n  try {\n    const response = await customerEventService.getMyEvents({\n      page: pagination.value.page,\n      limit: pagination.value.limit\n    })\n\n    if (response) {\n      if (response.events) {\n        events.value = response.events\n      }\n\n      if (response.page) {\n        pagination.value.page = response.page\n      }\n\n      if (response.limit) {\n        pagination.value.limit = response.limit\n      }\n\n      if (response.total) {\n        pagination.value.total = response.total\n      }\n\n      if (response.totalPages) {\n        pagination.value.totalPages = response.totalPages\n      }\n    } else {\n      error.value = customerEventService.error.value || 'Failed to load events'\n    }\n  } catch (err) {\n    error.value = err instanceof Error ? err.message : 'Unknown error'\n    console.error('Error loading events:', err)\n  } finally {\n    loading.value = false\n  }\n}\n\nconst onPageChange = (event: { page: number }) => {\n  pagination.value.page = event.page + 1\n  loadEvents().catch((error) => {\n    console.error('Error loading events:', error)\n  })\n}\n\nconst refresh = async () => {\n  pagination.value.page = 1\n  await loadEvents()\n}\n\ndefineExpose({\n  refresh\n})\n</script>\n","<template>\n  <TabPanel value=\"Credits\" class=\"credits-container h-full\">\n    <div class=\"flex h-full flex-col\">\n      <h2 class=\"mb-2 text-2xl font-bold\">\n        {{ $t('credits.credits') }}\n      </h2>\n\n      <Divider />\n\n      <div class=\"flex flex-col gap-2\">\n        <h3 class=\"text-sm font-medium text-muted\">\n          {{ $t('credits.yourCreditBalance') }}\n        </h3>\n        <div class=\"flex items-center justify-between\">\n          <UserCredit text-class=\"text-3xl font-bold\" />\n          <Skeleton v-if=\"loading\" width=\"2rem\" height=\"2rem\" />\n          <Button\n            v-else\n            :label=\"$t('credits.purchaseCredits')\"\n            :loading=\"loading\"\n            @click=\"handlePurchaseCreditsClick\"\n          />\n        </div>\n        <div class=\"flex flex-row items-center\">\n          <Skeleton\n            v-if=\"balanceLoading\"\n            width=\"12rem\"\n            height=\"1rem\"\n            class=\"text-xs\"\n          />\n          <div v-else-if=\"formattedLastUpdateTime\" class=\"text-xs text-muted\">\n            {{ $t('credits.lastUpdated') }}: {{ formattedLastUpdateTime }}\n          </div>\n          <Button\n            icon=\"pi pi-refresh\"\n            text\n            size=\"small\"\n            severity=\"secondary\"\n            @click=\"() => authActions.fetchBalance()\"\n          />\n        </div>\n      </div>\n\n      <div class=\"flex items-center justify-between\">\n        <h3>{{ $t('credits.activity') }}</h3>\n        <Button\n          :label=\"$t('credits.invoiceHistory')\"\n          text\n          severity=\"secondary\"\n          icon=\"pi pi-arrow-up-right\"\n          :loading=\"loading\"\n          @click=\"handleCreditsHistoryClick\"\n        />\n      </div>\n\n      <template v-if=\"creditHistory.length > 0\">\n        <div class=\"grow\">\n          <DataTable :value=\"creditHistory\" :show-headers=\"false\">\n            <Column field=\"title\" :header=\"$t('g.name')\">\n              <template #body=\"{ data }\">\n                <div class=\"text-sm font-medium\">{{ data.title }}</div>\n                <div class=\"text-xs text-muted\">{{ data.timestamp }}</div>\n              </template>\n            </Column>\n            <Column field=\"amount\" :header=\"$t('g.amount')\">\n              <template #body=\"{ data }\">\n                <div\n                  :class=\"[\n                    'text-center text-base font-medium',\n                    data.isPositive ? 'text-sky-500' : 'text-red-400'\n                  ]\"\n                >\n                  {{ data.isPositive ? '+' : '-' }}${{\n                    formatMetronomeCurrency(data.amount, 'usd')\n                  }}\n                </div>\n              </template>\n            </Column>\n          </DataTable>\n        </div>\n      </template>\n\n      <Divider />\n\n      <UsageLogsTable ref=\"usageLogsTableRef\" />\n\n      <div class=\"flex flex-row gap-2\">\n        <Button\n          :label=\"$t('credits.faqs')\"\n          text\n          severity=\"secondary\"\n          icon=\"pi pi-question-circle\"\n          @click=\"handleFaqClick\"\n        />\n        <Button\n          :label=\"$t('credits.messageSupport')\"\n          text\n          severity=\"secondary\"\n          icon=\"pi pi-comments\"\n          @click=\"handleMessageSupport\"\n        />\n      </div>\n    </div>\n  </TabPanel>\n</template>\n\n<script setup lang=\"ts\">\nimport Button from 'primevue/button'\nimport Column from 'primevue/column'\nimport DataTable from 'primevue/datatable'\nimport Divider from 'primevue/divider'\nimport Skeleton from 'primevue/skeleton'\nimport TabPanel from 'primevue/tabpanel'\nimport { computed, ref, watch } from 'vue'\n\nimport UserCredit from '@/components/common/UserCredit.vue'\nimport UsageLogsTable from '@/components/dialog/content/setting/UsageLogsTable.vue'\nimport { useFirebaseAuthActions } from '@/composables/auth/useFirebaseAuthActions'\nimport { useDialogService } from '@/services/dialogService'\nimport { useCommandStore } from '@/stores/commandStore'\nimport { useFirebaseAuthStore } from '@/stores/firebaseAuthStore'\nimport { formatMetronomeCurrency } from '@/utils/formatUtil'\n\ninterface CreditHistoryItemData {\n  title: string\n  timestamp: string\n  amount: number\n  isPositive: boolean\n}\n\nconst dialogService = useDialogService()\nconst authStore = useFirebaseAuthStore()\nconst authActions = useFirebaseAuthActions()\nconst commandStore = useCommandStore()\nconst loading = computed(() => authStore.loading)\nconst balanceLoading = computed(() => authStore.isFetchingBalance)\n\nconst usageLogsTableRef = ref<InstanceType<typeof UsageLogsTable> | null>(null)\n\nconst formattedLastUpdateTime = computed(() =>\n  authStore.lastBalanceUpdateTime\n    ? authStore.lastBalanceUpdateTime.toLocaleString()\n    : ''\n)\n\nwatch(\n  () => authStore.lastBalanceUpdateTime,\n  (newTime, oldTime) => {\n    if (newTime && newTime !== oldTime && usageLogsTableRef.value) {\n      usageLogsTableRef.value.refresh()\n    }\n  }\n)\n\nconst handlePurchaseCreditsClick = () => {\n  dialogService.showTopUpCreditsDialog()\n}\n\nconst handleCreditsHistoryClick = async () => {\n  await authActions.accessBillingPortal()\n}\n\nconst handleMessageSupport = async () => {\n  await commandStore.execute('Comfy.ContactSupport')\n}\n\nconst handleFaqClick = () => {\n  window.open('https://docs.comfy.org/tutorials/api-nodes/faq', '_blank')\n}\n\nconst creditHistory = ref<CreditHistoryItemData[]>([])\n</script>\n"],"names":["EventType","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUY,IAAA,8BAAAA,eAAL;AACLA,aAAA,cAAe,IAAA;AACfA,aAAA,iBAAkB,IAAA;AAClBA,aAAA,mBAAoB,IAAA;AACpBA,aAAA,qBAAsB,IAAA;AAJZA,SAAAA;AAAA,GAAA,aAAA,CAAA,CAAA;AAeZ,MAAM,oBAAoB,MAAM,OAAO;AAAA,EACrC,SAAS;AAAA,EACT,SAAS;AAAA,IACP,gBAAgB;AAAA,EAClB;AACF,CAAC;AAEM,MAAM,2BAA2B,6BAAM;AACtC,QAAA,YAAY,IAAI,KAAK;AACrB,QAAA,QAAQ,IAAmB,IAAI;AAC/B,QAAA,EAAE,MAAM;AAEd,QAAM,qBAAqB,wBACzB,KACA,SACA,wBACG;AAEC,QAAA,aAAa,GAAG,EAAG;AAEnB,QAAA;AACJ,QAAI,CAAC,MAAM,aAAa,GAAG,GAAG;AAClB,gBAAA,GAAG,OAAO,YAAY,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG,CAAC;AAAA,IAAA,OAC3E;AACL,YAAM,aAAa;AACb,YAAA,SAAS,WAAW,UAAU;AAChC,UAAA,UAAU,sBAAsB,MAAM,GAAG;AAC3C,kBAAU,oBAAoB,MAAM;AAAA,MAAA,OAC/B;AACL,kBACE,WAAW,UAAU,MAAM,WAC3B,GAAG,OAAO,uBAAuB,MAAM;AAAA,MAC3C;AAAA,IACF;AAEA,UAAM,QAAQ;AAAA,EAAA,GAvBW;AA0BrB,QAAA,iBAAiB,8BACrB,aACA,YAIsB;AAChB,UAAA,EAAE,cAAc,oBAAwB,IAAA;AAE9C,cAAU,QAAQ;AAClB,UAAM,QAAQ;AAEV,QAAA;AACI,YAAA,WAAW,MAAM;AACvB,aAAO,SAAS;AAAA,aACT,KAAK;AACO,yBAAA,KAAK,cAAc,mBAAmB;AAClD,aAAA;AAAA,IAAA,UACP;AACA,gBAAU,QAAQ;AAAA,IACpB;AAAA,EAAA,GApBqB;AAuBvB,WAAS,gBAAgB,WAAmB;AAC1C,YAAQ,WAAW;AAAA,MACjB,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT;AACS,eAAA;AAAA,IACX;AAAA,EACF;AAXS;AAaT,WAAS,WAAW,YAA4B;AACxC,UAAA,OAAO,IAAI,KAAK,UAAU;AAEhC,WAAO,EAAE,MAAM;AAAA,MACb,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,IAAA,CACT;AAAA,EACH;AATS;AAWT,WAAS,cAAc,KAAa;AAClC,WAAO,IACJ,MAAM,GAAG,EACT,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,EAAE,YAAA,IAAgB,KAAK,MAAM,CAAC,CAAC,EAC1D,KAAK,GAAG;AAAA,EACb;AALS;AAOT,WAAS,gBAAgB,OAAY;AAC/B,QAAA,OAAO,UAAU,UAAU;AAE7B,aAAO,MAAM;IACf;AACA,QAAI,OAAO,UAAU,YAAY,MAAM,MAAM,oBAAoB,GAAG;AAElE,aAAO,IAAI,KAAK,KAAK,EAAE,eAAe;AAAA,IACxC;AACO,WAAA;AAAA,EACT;AAVS;AAYT,WAAS,iBAAiB,WAAmB;AAC3C,YAAQ,WAAW;AAAA,MACjB,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT,KAAK;AACI,eAAA;AAAA,MACT;AACS,eAAA;AAAA,IACX;AAAA,EACF;AAXS;AAaT,WAAS,kBAAkB,OAAiB;AACpC,UAAA,EAAE,QAAQ,UAAU,OAAO,GAAG,gBAAgB,MAAM,UAAU;AACpE,WAAO,OAAO,KAAK,WAAW,EAAE,SAAS;AAAA,EAC3C;AAHS;AAKT,WAAS,kBAAkB,OAAiB;AAC1C,UAAM,EAAE,GAAG,OAAA,IAAW,MAAM,UAAU,CAAA;AAE/B,WAAA,OAAO,QAAQ,MAAM,EACzB,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AACf,YAAA,eAAe,cAAc,GAAG;AAChC,YAAA,iBAAiB,gBAAgB,KAAK;AACrC,aAAA,WAAW,YAAY,cAAc,cAAc;AAAA,IAAA,CAC3D,EACA,KAAK,MAAM;AAAA,EAChB;AAVS;AAYT,WAAS,aAAa,cAAuB;AACvC,QAAA,CAAC,aAAqB,QAAA;AAClB,YAAA,eAAe,KAAK,QAAQ,CAAC;AAAA,EACvC;AAHS;AAKT,iBAAe,YAAY;AAAA,IACzB,OAAO;AAAA,IACP,QAAQ;AAAA,EACV,IAAiC,IAA4C;AAC3E,UAAM,eAAe;AACrB,UAAM,sBAAsB;AAAA,MAC1B,KAAK;AAAA,MACL,KAAK;AAAA,IAAA;AAIP,UAAM,cAAc,MAAM,qBAAqB,EAAE,cAAc;AAC/D,QAAI,CAAC,aAAa;AAChB,YAAM,QAAQ;AACP,aAAA;AAAA,IACT;AAEO,WAAA;AAAA,MACL,MACE,kBAAkB,IAAI,qBAAqB;AAAA,QACzC,QAAQ,EAAE,MAAM,MAAM;AAAA,QACtB,SAAS;AAAA,MAAA,CACV;AAAA,MACH,EAAE,cAAc,oBAAoB;AAAA,IAAA;AAAA,EAExC;AAzBe;AA2BR,SAAA;AAAA;AAAA,IAEL;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ,GA/KwC;;;;;;;;;;;;;;;;;;;;;;;;ACwElC,UAAA,SAAS,IAAgB,CAAA,CAAE;AAC3B,UAAA,UAAU,IAAI,IAAI;AAClB,UAAA,QAAQ,IAAmB,IAAI;AAErC,UAAM,uBAAuB;AAE7B,UAAM,aAAa,IAAI;AAAA,MACrB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA,IAAA,CACb;AAED,UAAM,iBAAiB;AAAA,MACrB,OAAO,WAAW,MAAM,OAAO,KAAK,WAAW,MAAM;AAAA,IAAA;AAGjD,UAAA,oBAAoB,SAAS,MAAM;AACjC,YAAA,0BAAU;AACT,aAAA,MAAM,QAAQ,CAAC,UAAU;AAC9B,YAAI,qBAAqB,kBAAkB,KAAK,KAAK,MAAM,UAAU;AACnE,cAAI,IAAI,MAAM,UAAU,qBAAqB,kBAAkB,KAAK,CAAC;AAAA,QACvE;AAAA,MAAA,CACD;AACM,aAAA;AAAA,IAAA,CACR;AAED,UAAM,aAAa,mCAAY;AAC7B,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAEV,UAAA;AACI,cAAA,WAAW,MAAM,qBAAqB,YAAY;AAAA,UACtD,MAAM,WAAW,MAAM;AAAA,UACvB,OAAO,WAAW,MAAM;AAAA,QAAA,CACzB;AAED,YAAI,UAAU;AACZ,cAAI,SAAS,QAAQ;AACnB,mBAAO,QAAQ,SAAS;AAAA,UAC1B;AAEA,cAAI,SAAS,MAAM;AACN,uBAAA,MAAM,OAAO,SAAS;AAAA,UACnC;AAEA,cAAI,SAAS,OAAO;AACP,uBAAA,MAAM,QAAQ,SAAS;AAAA,UACpC;AAEA,cAAI,SAAS,OAAO;AACP,uBAAA,MAAM,QAAQ,SAAS;AAAA,UACpC;AAEA,cAAI,SAAS,YAAY;AACZ,uBAAA,MAAM,aAAa,SAAS;AAAA,UACzC;AAAA,QAAA,OACK;AACC,gBAAA,QAAQ,qBAAqB,MAAM,SAAS;AAAA,QACpD;AAAA,eACO,KAAK;AACZ,cAAM,QAAQ,eAAe,QAAQ,IAAI,UAAU;AAC3C,gBAAA,MAAM,yBAAyB,GAAG;AAAA,MAAA,UAC1C;AACA,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IAAA,GAtCiB;AAyCb,UAAA,eAAe,wBAAC,UAA4B;AACrC,iBAAA,MAAM,OAAO,MAAM,OAAO;AAC1B,iBAAA,EAAE,MAAM,CAACC,WAAU;AACpB,gBAAA,MAAM,yBAAyBA,MAAK;AAAA,MAAA,CAC7C;AAAA,IAAA,GAJkB;AAOrB,UAAM,UAAU,mCAAY;AAC1B,iBAAW,MAAM,OAAO;AACxB,YAAM,WAAW;AAAA,IAAA,GAFH;AAKH,aAAA;AAAA,MACX;AAAA,IAAA,CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDD,UAAM,gBAAgB;AACtB,UAAM,YAAY;AAClB,UAAM,cAAc;AACpB,UAAM,eAAe;AACrB,UAAM,UAAU,SAAS,MAAM,UAAU,OAAO;AAChD,UAAM,iBAAiB,SAAS,MAAM,UAAU,iBAAiB;AAE3D,UAAA,oBAAoB,IAAgD,IAAI;AAE9E,UAAM,0BAA0B;AAAA,MAAS,MACvC,UAAU,wBACN,UAAU,sBAAsB,eAChC,IAAA;AAAA,IAAA;AAGN;AAAA,MACE,MAAM,UAAU;AAAA,MAChB,CAAC,SAAS,YAAY;AACpB,YAAI,WAAW,YAAY,WAAW,kBAAkB,OAAO;AAC7D,4BAAkB,MAAM;QAC1B;AAAA,MACF;AAAA,IAAA;AAGF,UAAM,6BAA6B,6BAAM;AACvC,oBAAc,uBAAuB;AAAA,IAAA,GADJ;AAInC,UAAM,4BAA4B,mCAAY;AAC5C,YAAM,YAAY;IAAoB,GADN;AAIlC,UAAM,uBAAuB,mCAAY;AACjC,YAAA,aAAa,QAAQ,sBAAsB;AAAA,IAAA,GADtB;AAI7B,UAAM,iBAAiB,6BAAM;AACpB,aAAA,KAAK,kDAAkD,QAAQ;AAAA,IAAA,GADjD;AAIjB,UAAA,gBAAgB,IAA6B,CAAA,CAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}