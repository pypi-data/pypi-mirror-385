{"version":3,"file":"ExtensionPanel-NC7l2shG.js","sources":["../../src/platform/settings/components/ExtensionPanel.vue"],"sourcesContent":["<template>\n  <PanelTemplate value=\"Extension\" class=\"extension-panel\">\n    <template #header>\n      <SearchBox\n        v-model=\"filters['global'].value\"\n        :placeholder=\"$t('g.searchExtensions') + '...'\"\n      />\n      <Message\n        v-if=\"hasChanges\"\n        severity=\"info\"\n        pt:text=\"w-full\"\n        class=\"max-h-96 overflow-y-auto\"\n      >\n        <ul>\n          <li v-for=\"ext in changedExtensions\" :key=\"ext.name\">\n            <span>\n              {{ extensionStore.isExtensionEnabled(ext.name) ? '[-]' : '[+]' }}\n            </span>\n            {{ ext.name }}\n          </li>\n        </ul>\n        <div class=\"flex justify-end\">\n          <Button\n            :label=\"$t('g.reloadToApplyChanges')\"\n            outlined\n            severity=\"danger\"\n            @click=\"applyChanges\"\n          />\n        </div>\n      </Message>\n    </template>\n    <div class=\"mb-3 flex gap-2\">\n      <SelectButton v-model=\"filterType\" :options=\"filterTypes\" />\n    </div>\n    <DataTable\n      v-model:selection=\"selectedExtensions\"\n      :value=\"filteredExtensions\"\n      striped-rows\n      size=\"small\"\n      :filters=\"filters\"\n      selection-mode=\"multiple\"\n      data-key=\"name\"\n    >\n      <Column selection-mode=\"multiple\" :frozen=\"true\" style=\"width: 3rem\" />\n      <Column :header=\"$t('g.extensionName')\" sortable field=\"name\">\n        <template #body=\"slotProps\">\n          {{ slotProps.data.name }}\n          <Tag\n            v-if=\"extensionStore.isCoreExtension(slotProps.data.name)\"\n            value=\"Core\"\n          />\n          <Tag v-else value=\"Custom\" severity=\"info\" />\n        </template>\n      </Column>\n      <Column\n        :pt=\"{\n          headerCell: 'flex items-center justify-end',\n          bodyCell: 'flex items-center justify-end'\n        }\"\n      >\n        <template #header>\n          <Button\n            icon=\"pi pi-ellipsis-h\"\n            text\n            severity=\"secondary\"\n            @click=\"menu?.show($event)\"\n          />\n          <ContextMenu ref=\"menu\" :model=\"contextMenuItems\" />\n        </template>\n        <template #body=\"slotProps\">\n          <ToggleSwitch\n            v-model=\"editingEnabledExtensions[slotProps.data.name]\"\n            :disabled=\"extensionStore.isExtensionReadOnly(slotProps.data.name)\"\n            @change=\"updateExtensionStatus\"\n          />\n        </template>\n      </Column>\n    </DataTable>\n  </PanelTemplate>\n</template>\n\n<script setup lang=\"ts\">\nimport { FilterMatchMode } from '@primevue/core/api'\nimport Button from 'primevue/button'\nimport Column from 'primevue/column'\nimport ContextMenu from 'primevue/contextmenu'\nimport DataTable from 'primevue/datatable'\nimport Message from 'primevue/message'\nimport SelectButton from 'primevue/selectbutton'\nimport Tag from 'primevue/tag'\nimport ToggleSwitch from 'primevue/toggleswitch'\nimport { computed, onMounted, ref } from 'vue'\n\nimport SearchBox from '@/components/common/SearchBox.vue'\nimport PanelTemplate from '@/components/dialog/content/setting/PanelTemplate.vue'\nimport { useSettingStore } from '@/platform/settings/settingStore'\nimport { useExtensionStore } from '@/stores/extensionStore'\n\nconst filterTypes = ['All', 'Core', 'Custom']\nconst filterType = ref('All')\nconst selectedExtensions = ref<Array<any>>([])\n\nconst filters = ref({\n  global: { value: '', matchMode: FilterMatchMode.CONTAINS }\n})\n\nconst extensionStore = useExtensionStore()\nconst settingStore = useSettingStore()\n\nconst editingEnabledExtensions = ref<Record<string, boolean>>({})\n\nconst filteredExtensions = computed(() => {\n  const extensions = extensionStore.extensions\n  switch (filterType.value) {\n    case 'Core':\n      return extensions.filter((ext) =>\n        extensionStore.isCoreExtension(ext.name)\n      )\n    case 'Custom':\n      return extensions.filter(\n        (ext) => !extensionStore.isCoreExtension(ext.name)\n      )\n    default:\n      return extensions\n  }\n})\n\nonMounted(() => {\n  extensionStore.extensions.forEach((ext) => {\n    editingEnabledExtensions.value[ext.name] =\n      extensionStore.isExtensionEnabled(ext.name)\n  })\n})\n\nconst changedExtensions = computed(() => {\n  return extensionStore.extensions.filter(\n    (ext) =>\n      editingEnabledExtensions.value[ext.name] !==\n      extensionStore.isExtensionEnabled(ext.name)\n  )\n})\n\nconst hasChanges = computed(() => {\n  return changedExtensions.value.length > 0\n})\n\nconst updateExtensionStatus = async () => {\n  const editingDisabledExtensionNames = Object.entries(\n    editingEnabledExtensions.value\n  )\n    .filter(([_, enabled]) => !enabled)\n    .map(([name]) => name)\n\n  await settingStore.set('Comfy.Extension.Disabled', [\n    ...extensionStore.inactiveDisabledExtensionNames,\n    ...editingDisabledExtensionNames\n  ])\n}\n\nconst enableAllExtensions = async () => {\n  extensionStore.extensions.forEach((ext) => {\n    if (extensionStore.isExtensionReadOnly(ext.name)) return\n\n    editingEnabledExtensions.value[ext.name] = true\n  })\n  await updateExtensionStatus()\n}\n\nconst disableAllExtensions = async () => {\n  extensionStore.extensions.forEach((ext) => {\n    if (extensionStore.isExtensionReadOnly(ext.name)) return\n\n    editingEnabledExtensions.value[ext.name] = false\n  })\n  await updateExtensionStatus()\n}\n\nconst disableThirdPartyExtensions = async () => {\n  extensionStore.extensions.forEach((ext) => {\n    if (extensionStore.isCoreExtension(ext.name)) return\n\n    editingEnabledExtensions.value[ext.name] = false\n  })\n  await updateExtensionStatus()\n}\n\nconst applyChanges = () => {\n  // Refresh the page to apply changes\n  window.location.reload()\n}\n\nconst menu = ref<InstanceType<typeof ContextMenu>>()\nconst contextMenuItems = [\n  {\n    label: 'Enable Selected',\n    icon: 'pi pi-check',\n    command: async () => {\n      selectedExtensions.value.forEach((ext) => {\n        if (!extensionStore.isExtensionReadOnly(ext.name)) {\n          editingEnabledExtensions.value[ext.name] = true\n        }\n      })\n      await updateExtensionStatus()\n    }\n  },\n  {\n    label: 'Disable Selected',\n    icon: 'pi pi-times',\n    command: async () => {\n      selectedExtensions.value.forEach((ext) => {\n        if (!extensionStore.isExtensionReadOnly(ext.name)) {\n          editingEnabledExtensions.value[ext.name] = false\n        }\n      })\n      await updateExtensionStatus()\n    }\n  },\n  {\n    separator: true\n  },\n  {\n    label: 'Enable All',\n    icon: 'pi pi-check',\n    command: enableAllExtensions\n  },\n  {\n    label: 'Disable All',\n    icon: 'pi pi-times',\n    command: disableAllExtensions\n  },\n  {\n    label: 'Disable 3rd Party',\n    icon: 'pi pi-times',\n    command: disableThirdPartyExtensions,\n    disabled: !extensionStore.hasThirdPartyExtensions\n  }\n]\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA,UAAM,cAAc,CAAC,OAAO,QAAQ,QAAQ;AACtC,UAAA,aAAa,IAAI,KAAK;AACtB,UAAA,qBAAqB,IAAgB,CAAA,CAAE;AAE7C,UAAM,UAAU,IAAI;AAAA,MAClB,QAAQ,EAAE,OAAO,IAAI,WAAW,gBAAgB,SAAS;AAAA,IAAA,CAC1D;AAED,UAAM,iBAAiB;AACvB,UAAM,eAAe;AAEf,UAAA,2BAA2B,IAA6B,CAAA,CAAE;AAE1D,UAAA,qBAAqB,SAAS,MAAM;AACxC,YAAM,aAAa,eAAe;AAClC,cAAQ,WAAW,OAAO;AAAA,QACxB,KAAK;AACH,iBAAO,WAAW;AAAA,YAAO,CAAC,QACxB,eAAe,gBAAgB,IAAI,IAAI;AAAA,UAAA;AAAA,QAE3C,KAAK;AACH,iBAAO,WAAW;AAAA,YAChB,CAAC,QAAQ,CAAC,eAAe,gBAAgB,IAAI,IAAI;AAAA,UAAA;AAAA,QAErD;AACS,iBAAA;AAAA,MACX;AAAA,IAAA,CACD;AAED,cAAU,MAAM;AACC,qBAAA,WAAW,QAAQ,CAAC,QAAQ;AACzC,iCAAyB,MAAM,IAAI,IAAI,IACrC,eAAe,mBAAmB,IAAI,IAAI;AAAA,MAAA,CAC7C;AAAA,IAAA,CACF;AAEK,UAAA,oBAAoB,SAAS,MAAM;AACvC,aAAO,eAAe,WAAW;AAAA,QAC/B,CAAC,QACC,yBAAyB,MAAM,IAAI,IAAI,MACvC,eAAe,mBAAmB,IAAI,IAAI;AAAA,MAAA;AAAA,IAC9C,CACD;AAEK,UAAA,aAAa,SAAS,MAAM;AACzB,aAAA,kBAAkB,MAAM,SAAS;AAAA,IAAA,CACzC;AAED,UAAM,wBAAwB,mCAAY;AACxC,YAAM,gCAAgC,OAAO;AAAA,QAC3C,yBAAyB;AAAA,MAExB,EAAA,OAAO,CAAC,CAAC,GAAG,OAAO,MAAM,CAAC,OAAO,EACjC,IAAI,CAAC,CAAC,IAAI,MAAM,IAAI;AAEjB,YAAA,aAAa,IAAI,4BAA4B;AAAA,QACjD,GAAG,eAAe;AAAA,QAClB,GAAG;AAAA,MAAA,CACJ;AAAA,IAAA,GAV2B;AAa9B,UAAM,sBAAsB,mCAAY;AACvB,qBAAA,WAAW,QAAQ,CAAC,QAAQ;AACzC,YAAI,eAAe,oBAAoB,IAAI,IAAI,EAAG;AAEzB,iCAAA,MAAM,IAAI,IAAI,IAAI;AAAA,MAAA,CAC5C;AACD,YAAM,sBAAsB;AAAA,IAAA,GANF;AAS5B,UAAM,uBAAuB,mCAAY;AACxB,qBAAA,WAAW,QAAQ,CAAC,QAAQ;AACzC,YAAI,eAAe,oBAAoB,IAAI,IAAI,EAAG;AAEzB,iCAAA,MAAM,IAAI,IAAI,IAAI;AAAA,MAAA,CAC5C;AACD,YAAM,sBAAsB;AAAA,IAAA,GAND;AAS7B,UAAM,8BAA8B,mCAAY;AAC/B,qBAAA,WAAW,QAAQ,CAAC,QAAQ;AACzC,YAAI,eAAe,gBAAgB,IAAI,IAAI,EAAG;AAErB,iCAAA,MAAM,IAAI,IAAI,IAAI;AAAA,MAAA,CAC5C;AACD,YAAM,sBAAsB;AAAA,IAAA,GANM;AASpC,UAAM,eAAe,6BAAM;AAEzB,aAAO,SAAS;IAAO,GAFJ;AAKrB,UAAM,OAAO;AACb,UAAM,mBAAmB;AAAA,MACvB;AAAA,QACE,OAAO;AAAA,QACP,MAAM;AAAA,QACN,SAAS,mCAAY;AACA,6BAAA,MAAM,QAAQ,CAAC,QAAQ;AACxC,gBAAI,CAAC,eAAe,oBAAoB,IAAI,IAAI,GAAG;AACxB,uCAAA,MAAM,IAAI,IAAI,IAAI;AAAA,YAC7C;AAAA,UAAA,CACD;AACD,gBAAM,sBAAsB;AAAA,QAC9B,GAPS;AAAA,MAQX;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAM;AAAA,QACN,SAAS,mCAAY;AACA,6BAAA,MAAM,QAAQ,CAAC,QAAQ;AACxC,gBAAI,CAAC,eAAe,oBAAoB,IAAI,IAAI,GAAG;AACxB,uCAAA,MAAM,IAAI,IAAI,IAAI;AAAA,YAC7C;AAAA,UAAA,CACD;AACD,gBAAM,sBAAsB;AAAA,QAC9B,GAPS;AAAA,MAQX;AAAA,MACA;AAAA,QACE,WAAW;AAAA,MACb;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU,CAAC,eAAe;AAAA,MAC5B;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}