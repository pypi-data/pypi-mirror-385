[build-system]
requires = ["setuptools>=77.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "planemo"
dynamic = ["version", "readme", "dependencies"]
description = "Command-line utilities to assist in building tools for the Galaxy project (http://galaxyproject.org/)."
license = "MIT"
license-files = [
    "LICENSE",
]
authors = [
    { name = "Galaxy Project and Community", email = "galaxy-committers@lists.galaxyproject.org" }
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Environment :: Console",
    "Operating System :: POSIX",
    "Topic :: Software Development",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Testing",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.setuptools]
packages = [
    "planemo",
    "planemo.autopygen",
    "planemo.autopygen.commands",
    "planemo.autopygen.source_file_parsing",
    "planemo.autopygen.xml",
    "planemo.cwl",
    "planemo.commands",
    "planemo.database",
    "planemo.engine",
    "planemo.galaxy",
    "planemo.galaxy.invocations",
    "planemo.galaxy.test",
    "planemo.linters",
    "planemo.reports",
    "planemo.shed",
    "planemo.shed2tap",
    "planemo.test",
    "planemo.training",
    "planemo.xml",
]

[tool.setuptools.package-data]
"planemo" = [
    "xml/xsd/repository_dependencies.xsd",
    "xml/xsd/tool_dependencies.xsd",
    "reports/*",
    "scripts/*"
]

[tool.setuptools.dynamic]
version = {attr = "planemo.__version__"}
readme = {file = ["README.rst", "HISTORY.rst"], content-type = "text/x-rst"}
dependencies = {file = "requirements.txt"}

[project.scripts]
planemo = "planemo.cli:planemo"

[tool.black]
extend-exclude = '^/(docs/standards)/'
include = '\.pyi?$'
line-length = 120
target-version = ['py37']

[tool.darker]
isort = true

[tool.ruff]
# Match flake8 configuration from setup.cfg
line-length = 120  # Match black configuration
target-version = "py37"
exclude = [
    ".eggs",
    ".git",
    ".tox",
    ".venv",
    "build",
    "docs/conf.py",
    "docs/standards",
    "project_templates/cwl_draft3_spec/",
    "planemo/autopygen/",
    "*.ipynb",
]

[tool.ruff.lint]
# Only enable rules that flake8 would check by default
# This corresponds to the default flake8 ruleset minus ignored codes
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
]
ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (managed by black)
    "E701",  # multiple statements on one line (conflicts with black)
]

[tool.ruff.lint.mccabe]
# Match flake8 max-complexity setting
max-complexity = 14
