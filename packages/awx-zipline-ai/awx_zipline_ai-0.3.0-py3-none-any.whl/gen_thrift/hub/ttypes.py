#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import gen_thrift.common.ttypes
import gen_thrift.api.ttypes

from thrift.transport import TTransport
all_structs = []


class Direction(object):
    UPSTREAM = 0
    DOWNSTREAM = 1
    BOTH = 2

    _VALUES_TO_NAMES = {
        0: "UPSTREAM",
        1: "DOWNSTREAM",
        2: "BOTH",
    }

    _NAMES_TO_VALUES = {
        "UPSTREAM": 0,
        "DOWNSTREAM": 1,
        "BOTH": 2,
    }


class Status(object):
    WAITING_FOR_UPSTREAM = 0
    WAITING_FOR_RESOURCES = 1
    QUEUED = 2
    RUNNING = 3
    SUCCESS = 4
    FAILED = 5
    UPSTREAM_FAILED = 6
    UPSTREAM_MISSING = 7

    _VALUES_TO_NAMES = {
        0: "WAITING_FOR_UPSTREAM",
        1: "WAITING_FOR_RESOURCES",
        2: "QUEUED",
        3: "RUNNING",
        4: "SUCCESS",
        5: "FAILED",
        6: "UPSTREAM_FAILED",
        7: "UPSTREAM_MISSING",
    }

    _NAMES_TO_VALUES = {
        "WAITING_FOR_UPSTREAM": 0,
        "WAITING_FOR_RESOURCES": 1,
        "QUEUED": 2,
        "RUNNING": 3,
        "SUCCESS": 4,
        "FAILED": 5,
        "UPSTREAM_FAILED": 6,
        "UPSTREAM_MISSING": 7,
    }


class LineageRequest(object):
    """
    Attributes:
     - name
     - type
     - branch
     - direction

    """
    thrift_spec = None


    def __init__(self, name = None, type = None, branch = None, direction = None,):
        self.name = name
        self.type = type
        self.branch = branch
        self.direction = direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.branch = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LineageRequest')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.branch is not None:
            oprot.writeFieldBegin('branch', TType.STRING, 3)
            oprot.writeString(self.branch.encode('utf-8') if sys.version_info[0] == 2 else self.branch)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 4)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JobTrackerRequest(object):
    """
    Attributes:
     - name
     - type
     - branch
     - dateRange

    """
    thrift_spec = None


    def __init__(self, name = None, type = None, branch = None, dateRange = None,):
        self.name = name
        self.type = type
        self.branch = branch
        self.dateRange = dateRange

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.branch = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.dateRange = gen_thrift.common.ttypes.DateRange()
                    self.dateRange.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JobTrackerRequest')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.branch is not None:
            oprot.writeFieldBegin('branch', TType.STRING, 3)
            oprot.writeString(self.branch.encode('utf-8') if sys.version_info[0] == 2 else self.branch)
            oprot.writeFieldEnd()
        if self.dateRange is not None:
            oprot.writeFieldBegin('dateRange', TType.STRUCT, 10)
            self.dateRange.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JobTrackerResponse(object):
    """
    Attributes:
     - tasks

    """
    thrift_spec = None


    def __init__(self, tasks = None,):
        self.tasks = tasks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.tasks = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = TaskInfo()
                        _elem5.read(iprot)
                        self.tasks.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JobTrackerResponse')
        if self.tasks is not None:
            oprot.writeFieldBegin('tasks', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.tasks))
            for iter6 in self.tasks:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SubmissionsRequest(object):
    """
    Attributes:
     - user

    """
    thrift_spec = None


    def __init__(self, user = None,):
        self.user = user

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SubmissionsRequest')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 1)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SubmissionsResponse(object):
    """
    Attributes:
     - submissions

    """
    thrift_spec = None


    def __init__(self, submissions = None,):
        self.submissions = submissions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.submissions = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Submission()
                        _elem12.read(iprot)
                        self.submissions.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SubmissionsResponse')
        if self.submissions is not None:
            oprot.writeFieldBegin('submissions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.submissions))
            for iter13 in self.submissions:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaskInfo(object):
    """
    Attributes:
     - status
     - logPath
     - trackerUrl
     - taskArgs
     - dateRange
     - submittedTs
     - startedTs
     - finishedTs
     - user
     - team
     - allocatedResources
     - utilizedResources

    """
    thrift_spec = None


    def __init__(self, status = None, logPath = None, trackerUrl = None, taskArgs = None, dateRange = None, submittedTs = None, startedTs = None, finishedTs = None, user = None, team = None, allocatedResources = None, utilizedResources = None,):
        self.status = status
        self.logPath = logPath
        self.trackerUrl = trackerUrl
        self.taskArgs = taskArgs
        self.dateRange = dateRange
        self.submittedTs = submittedTs
        self.startedTs = startedTs
        self.finishedTs = finishedTs
        self.user = user
        self.team = team
        self.allocatedResources = allocatedResources
        self.utilizedResources = utilizedResources

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.logPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.trackerUrl = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.taskArgs = TaskArgs()
                    self.taskArgs.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.dateRange = gen_thrift.common.ttypes.DateRange()
                    self.dateRange.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.submittedTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.startedTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.finishedTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.user = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.team = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.allocatedResources = TaskResources()
                    self.allocatedResources.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.utilizedResources = TaskResources()
                    self.utilizedResources.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaskInfo')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.logPath is not None:
            oprot.writeFieldBegin('logPath', TType.STRING, 2)
            oprot.writeString(self.logPath.encode('utf-8') if sys.version_info[0] == 2 else self.logPath)
            oprot.writeFieldEnd()
        if self.trackerUrl is not None:
            oprot.writeFieldBegin('trackerUrl', TType.STRING, 3)
            oprot.writeString(self.trackerUrl.encode('utf-8') if sys.version_info[0] == 2 else self.trackerUrl)
            oprot.writeFieldEnd()
        if self.taskArgs is not None:
            oprot.writeFieldBegin('taskArgs', TType.STRUCT, 4)
            self.taskArgs.write(oprot)
            oprot.writeFieldEnd()
        if self.dateRange is not None:
            oprot.writeFieldBegin('dateRange', TType.STRUCT, 5)
            self.dateRange.write(oprot)
            oprot.writeFieldEnd()
        if self.submittedTs is not None:
            oprot.writeFieldBegin('submittedTs', TType.I64, 10)
            oprot.writeI64(self.submittedTs)
            oprot.writeFieldEnd()
        if self.startedTs is not None:
            oprot.writeFieldBegin('startedTs', TType.I64, 11)
            oprot.writeI64(self.startedTs)
            oprot.writeFieldEnd()
        if self.finishedTs is not None:
            oprot.writeFieldBegin('finishedTs', TType.I64, 12)
            oprot.writeI64(self.finishedTs)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRING, 20)
            oprot.writeString(self.user.encode('utf-8') if sys.version_info[0] == 2 else self.user)
            oprot.writeFieldEnd()
        if self.team is not None:
            oprot.writeFieldBegin('team', TType.STRING, 21)
            oprot.writeString(self.team.encode('utf-8') if sys.version_info[0] == 2 else self.team)
            oprot.writeFieldEnd()
        if self.allocatedResources is not None:
            oprot.writeFieldBegin('allocatedResources', TType.STRUCT, 30)
            self.allocatedResources.write(oprot)
            oprot.writeFieldEnd()
        if self.utilizedResources is not None:
            oprot.writeFieldBegin('utilizedResources', TType.STRUCT, 31)
            self.utilizedResources.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaskArgs(object):
    """
    Attributes:
     - argsList
     - env

    """
    thrift_spec = None


    def __init__(self, argsList = None, env = None,):
        self.argsList = argsList
        self.env = env

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.argsList = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.argsList.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.env = {}
                    (_ktype21, _vtype22, _size20) = iprot.readMapBegin()
                    for _i24 in range(_size20):
                        _key25 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val26 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.env[_key25] = _val26
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaskArgs')
        if self.argsList is not None:
            oprot.writeFieldBegin('argsList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.argsList))
            for iter27 in self.argsList:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.env is not None:
            oprot.writeFieldBegin('env', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.env))
            for kiter28, viter29 in self.env.items():
                oprot.writeString(kiter28.encode('utf-8') if sys.version_info[0] == 2 else kiter28)
                oprot.writeString(viter29.encode('utf-8') if sys.version_info[0] == 2 else viter29)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaskResources(object):
    """
    Attributes:
     - vcoreSeconds
     - megaByteSeconds
     - cumulativeDiskWriteBytes
     - cumulativeDiskReadBytes

    """
    thrift_spec = None


    def __init__(self, vcoreSeconds = None, megaByteSeconds = None, cumulativeDiskWriteBytes = None, cumulativeDiskReadBytes = None,):
        self.vcoreSeconds = vcoreSeconds
        self.megaByteSeconds = megaByteSeconds
        self.cumulativeDiskWriteBytes = cumulativeDiskWriteBytes
        self.cumulativeDiskReadBytes = cumulativeDiskReadBytes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vcoreSeconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.megaByteSeconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cumulativeDiskWriteBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.cumulativeDiskReadBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaskResources')
        if self.vcoreSeconds is not None:
            oprot.writeFieldBegin('vcoreSeconds', TType.I64, 1)
            oprot.writeI64(self.vcoreSeconds)
            oprot.writeFieldEnd()
        if self.megaByteSeconds is not None:
            oprot.writeFieldBegin('megaByteSeconds', TType.I64, 2)
            oprot.writeI64(self.megaByteSeconds)
            oprot.writeFieldEnd()
        if self.cumulativeDiskWriteBytes is not None:
            oprot.writeFieldBegin('cumulativeDiskWriteBytes', TType.I64, 3)
            oprot.writeI64(self.cumulativeDiskWriteBytes)
            oprot.writeFieldEnd()
        if self.cumulativeDiskReadBytes is not None:
            oprot.writeFieldBegin('cumulativeDiskReadBytes', TType.I64, 4)
            oprot.writeI64(self.cumulativeDiskReadBytes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Submission(object):
    """
    Attributes:
     - submittedTs
     - finishedTs
     - dateRange

    """
    thrift_spec = None


    def __init__(self, submittedTs = None, finishedTs = None, dateRange = None,):
        self.submittedTs = submittedTs
        self.finishedTs = finishedTs
        self.dateRange = dateRange

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 10:
                if ftype == TType.I64:
                    self.submittedTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I64:
                    self.finishedTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.dateRange = gen_thrift.common.ttypes.DateRange()
                    self.dateRange.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Submission')
        if self.submittedTs is not None:
            oprot.writeFieldBegin('submittedTs', TType.I64, 10)
            oprot.writeI64(self.submittedTs)
            oprot.writeFieldEnd()
        if self.finishedTs is not None:
            oprot.writeFieldBegin('finishedTs', TType.I64, 20)
            oprot.writeI64(self.finishedTs)
            oprot.writeFieldEnd()
        if self.dateRange is not None:
            oprot.writeFieldBegin('dateRange', TType.STRUCT, 21)
            self.dateRange.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConfRequest(object):
    """
    Attributes:
     - confName
     - confType
     - branch
     - version

    """
    thrift_spec = None


    def __init__(self, confName = None, confType = None, branch = None, version = None,):
        self.confName = confName
        self.confType = confType
        self.branch = branch
        self.version = version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.confName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.confType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.branch = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConfRequest')
        if self.confName is not None:
            oprot.writeFieldBegin('confName', TType.STRING, 1)
            oprot.writeString(self.confName.encode('utf-8') if sys.version_info[0] == 2 else self.confName)
            oprot.writeFieldEnd()
        if self.confType is not None:
            oprot.writeFieldBegin('confType', TType.I32, 2)
            oprot.writeI32(self.confType)
            oprot.writeFieldEnd()
        if self.branch is not None:
            oprot.writeFieldBegin('branch', TType.STRING, 3)
            oprot.writeString(self.branch.encode('utf-8') if sys.version_info[0] == 2 else self.branch)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 4)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LineageRequest)
LineageRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'branch', 'UTF8', None, ),  # 3
    (4, TType.I32, 'direction', None, None, ),  # 4
)
all_structs.append(JobTrackerRequest)
JobTrackerRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'branch', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRUCT, 'dateRange', [gen_thrift.common.ttypes.DateRange, None], None, ),  # 10
)
all_structs.append(JobTrackerResponse)
JobTrackerResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'tasks', (TType.STRUCT, [TaskInfo, None], False), None, ),  # 1
)
all_structs.append(SubmissionsRequest)
SubmissionsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'user', 'UTF8', None, ),  # 1
)
all_structs.append(SubmissionsResponse)
SubmissionsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'submissions', (TType.STRUCT, [Submission, None], False), None, ),  # 1
)
all_structs.append(TaskInfo)
TaskInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'logPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'trackerUrl', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'taskArgs', [TaskArgs, None], None, ),  # 4
    (5, TType.STRUCT, 'dateRange', [gen_thrift.common.ttypes.DateRange, None], None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I64, 'submittedTs', None, None, ),  # 10
    (11, TType.I64, 'startedTs', None, None, ),  # 11
    (12, TType.I64, 'finishedTs', None, None, ),  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'user', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'team', 'UTF8', None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRUCT, 'allocatedResources', [TaskResources, None], None, ),  # 30
    (31, TType.STRUCT, 'utilizedResources', [TaskResources, None], None, ),  # 31
)
all_structs.append(TaskArgs)
TaskArgs.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'argsList', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.MAP, 'env', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(TaskResources)
TaskResources.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vcoreSeconds', None, None, ),  # 1
    (2, TType.I64, 'megaByteSeconds', None, None, ),  # 2
    (3, TType.I64, 'cumulativeDiskWriteBytes', None, None, ),  # 3
    (4, TType.I64, 'cumulativeDiskReadBytes', None, None, ),  # 4
)
all_structs.append(Submission)
Submission.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I64, 'submittedTs', None, None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I64, 'finishedTs', None, None, ),  # 20
    (21, TType.STRUCT, 'dateRange', [gen_thrift.common.ttypes.DateRange, None], None, ),  # 21
)
all_structs.append(ConfRequest)
ConfRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'confName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'confType', None, None, ),  # 2
    (3, TType.STRING, 'branch', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'version', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
