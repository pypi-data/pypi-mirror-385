#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys

from thrift.transport import TTransport
all_structs = []


class CheckResult(object):
    SUCCESS = 0
    FAILURE = 1
    SKIPPED = 2

    _VALUES_TO_NAMES = {
        0: "SUCCESS",
        1: "FAILURE",
        2: "SKIPPED",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 0,
        "FAILURE": 1,
        "SKIPPED": 2,
    }


class BaseEvalResult(object):
    """
    Attributes:
     - checkResult
     - message

    """
    thrift_spec = None


    def __init__(self, checkResult = None, message = None,):
        self.checkResult = checkResult
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.checkResult = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BaseEvalResult')
        if self.checkResult is not None:
            oprot.writeFieldBegin('checkResult', TType.I32, 1)
            oprot.writeI32(self.checkResult)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JoinPartEvalResult(object):
    """
    Attributes:
     - partName
     - gbEvalResult
     - keySchemaCheck

    """
    thrift_spec = None


    def __init__(self, partName = None, gbEvalResult = None, keySchemaCheck = None,):
        self.partName = partName
        self.gbEvalResult = gbEvalResult
        self.keySchemaCheck = keySchemaCheck

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.partName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.gbEvalResult = GroupByEvalResult()
                    self.gbEvalResult.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.keySchemaCheck = BaseEvalResult()
                    self.keySchemaCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JoinPartEvalResult')
        if self.partName is not None:
            oprot.writeFieldBegin('partName', TType.STRING, 1)
            oprot.writeString(self.partName.encode('utf-8') if sys.version_info[0] == 2 else self.partName)
            oprot.writeFieldEnd()
        if self.gbEvalResult is not None:
            oprot.writeFieldBegin('gbEvalResult', TType.STRUCT, 2)
            self.gbEvalResult.write(oprot)
            oprot.writeFieldEnd()
        if self.keySchemaCheck is not None:
            oprot.writeFieldBegin('keySchemaCheck', TType.STRUCT, 3)
            self.keySchemaCheck.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JoinEvalResult(object):
    """
    Attributes:
     - leftExpressionCheck
     - leftTimestampCheck
     - joinPartChecks
     - derivationValidityCheck
     - leftQuerySchema
     - rightPartsSchema
     - derivationsSchema
     - externalPartsSchema

    """
    thrift_spec = None


    def __init__(self, leftExpressionCheck = None, leftTimestampCheck = None, joinPartChecks = None, derivationValidityCheck = None, leftQuerySchema = None, rightPartsSchema = None, derivationsSchema = None, externalPartsSchema = None,):
        self.leftExpressionCheck = leftExpressionCheck
        self.leftTimestampCheck = leftTimestampCheck
        self.joinPartChecks = joinPartChecks
        self.derivationValidityCheck = derivationValidityCheck
        self.leftQuerySchema = leftQuerySchema
        self.rightPartsSchema = rightPartsSchema
        self.derivationsSchema = derivationsSchema
        self.externalPartsSchema = externalPartsSchema

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.leftExpressionCheck = BaseEvalResult()
                    self.leftExpressionCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.leftTimestampCheck = BaseEvalResult()
                    self.leftTimestampCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.joinPartChecks = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = JoinPartEvalResult()
                        _elem5.read(iprot)
                        self.joinPartChecks.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.derivationValidityCheck = BaseEvalResult()
                    self.derivationValidityCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.leftQuerySchema = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.leftQuerySchema[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.rightPartsSchema = {}
                    (_ktype14, _vtype15, _size13) = iprot.readMapBegin()
                    for _i17 in range(_size13):
                        _key18 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val19 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.rightPartsSchema[_key18] = _val19
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.derivationsSchema = {}
                    (_ktype21, _vtype22, _size20) = iprot.readMapBegin()
                    for _i24 in range(_size20):
                        _key25 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val26 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.derivationsSchema[_key25] = _val26
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.externalPartsSchema = {}
                    (_ktype28, _vtype29, _size27) = iprot.readMapBegin()
                    for _i31 in range(_size27):
                        _key32 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val33 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.externalPartsSchema[_key32] = _val33
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JoinEvalResult')
        if self.leftExpressionCheck is not None:
            oprot.writeFieldBegin('leftExpressionCheck', TType.STRUCT, 1)
            self.leftExpressionCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.leftTimestampCheck is not None:
            oprot.writeFieldBegin('leftTimestampCheck', TType.STRUCT, 2)
            self.leftTimestampCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.joinPartChecks is not None:
            oprot.writeFieldBegin('joinPartChecks', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.joinPartChecks))
            for iter34 in self.joinPartChecks:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.derivationValidityCheck is not None:
            oprot.writeFieldBegin('derivationValidityCheck', TType.STRUCT, 4)
            self.derivationValidityCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.leftQuerySchema is not None:
            oprot.writeFieldBegin('leftQuerySchema', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.leftQuerySchema))
            for kiter35, viter36 in self.leftQuerySchema.items():
                oprot.writeString(kiter35.encode('utf-8') if sys.version_info[0] == 2 else kiter35)
                oprot.writeString(viter36.encode('utf-8') if sys.version_info[0] == 2 else viter36)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.rightPartsSchema is not None:
            oprot.writeFieldBegin('rightPartsSchema', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.rightPartsSchema))
            for kiter37, viter38 in self.rightPartsSchema.items():
                oprot.writeString(kiter37.encode('utf-8') if sys.version_info[0] == 2 else kiter37)
                oprot.writeString(viter38.encode('utf-8') if sys.version_info[0] == 2 else viter38)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.derivationsSchema is not None:
            oprot.writeFieldBegin('derivationsSchema', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.derivationsSchema))
            for kiter39, viter40 in self.derivationsSchema.items():
                oprot.writeString(kiter39.encode('utf-8') if sys.version_info[0] == 2 else kiter39)
                oprot.writeString(viter40.encode('utf-8') if sys.version_info[0] == 2 else viter40)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.externalPartsSchema is not None:
            oprot.writeFieldBegin('externalPartsSchema', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.externalPartsSchema))
            for kiter41, viter42 in self.externalPartsSchema.items():
                oprot.writeString(kiter41.encode('utf-8') if sys.version_info[0] == 2 else kiter41)
                oprot.writeString(viter42.encode('utf-8') if sys.version_info[0] == 2 else viter42)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GroupByEvalResult(object):
    """
    Attributes:
     - sourceExpressionCheck
     - sourceTimestampCheck
     - aggExpressionCheck
     - derivationsExpressionCheck
     - keySchema
     - aggSchema
     - derivationsSchema

    """
    thrift_spec = None


    def __init__(self, sourceExpressionCheck = None, sourceTimestampCheck = None, aggExpressionCheck = None, derivationsExpressionCheck = None, keySchema = None, aggSchema = None, derivationsSchema = None,):
        self.sourceExpressionCheck = sourceExpressionCheck
        self.sourceTimestampCheck = sourceTimestampCheck
        self.aggExpressionCheck = aggExpressionCheck
        self.derivationsExpressionCheck = derivationsExpressionCheck
        self.keySchema = keySchema
        self.aggSchema = aggSchema
        self.derivationsSchema = derivationsSchema

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sourceExpressionCheck = BaseEvalResult()
                    self.sourceExpressionCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sourceTimestampCheck = BaseEvalResult()
                    self.sourceTimestampCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.aggExpressionCheck = BaseEvalResult()
                    self.aggExpressionCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.derivationsExpressionCheck = BaseEvalResult()
                    self.derivationsExpressionCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.keySchema = {}
                    (_ktype44, _vtype45, _size43) = iprot.readMapBegin()
                    for _i47 in range(_size43):
                        _key48 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val49 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.keySchema[_key48] = _val49
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.aggSchema = {}
                    (_ktype51, _vtype52, _size50) = iprot.readMapBegin()
                    for _i54 in range(_size50):
                        _key55 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val56 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.aggSchema[_key55] = _val56
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.derivationsSchema = {}
                    (_ktype58, _vtype59, _size57) = iprot.readMapBegin()
                    for _i61 in range(_size57):
                        _key62 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val63 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.derivationsSchema[_key62] = _val63
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GroupByEvalResult')
        if self.sourceExpressionCheck is not None:
            oprot.writeFieldBegin('sourceExpressionCheck', TType.STRUCT, 1)
            self.sourceExpressionCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.sourceTimestampCheck is not None:
            oprot.writeFieldBegin('sourceTimestampCheck', TType.STRUCT, 2)
            self.sourceTimestampCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.aggExpressionCheck is not None:
            oprot.writeFieldBegin('aggExpressionCheck', TType.STRUCT, 3)
            self.aggExpressionCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.derivationsExpressionCheck is not None:
            oprot.writeFieldBegin('derivationsExpressionCheck', TType.STRUCT, 4)
            self.derivationsExpressionCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.keySchema is not None:
            oprot.writeFieldBegin('keySchema', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.keySchema))
            for kiter64, viter65 in self.keySchema.items():
                oprot.writeString(kiter64.encode('utf-8') if sys.version_info[0] == 2 else kiter64)
                oprot.writeString(viter65.encode('utf-8') if sys.version_info[0] == 2 else viter65)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.aggSchema is not None:
            oprot.writeFieldBegin('aggSchema', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.aggSchema))
            for kiter66, viter67 in self.aggSchema.items():
                oprot.writeString(kiter66.encode('utf-8') if sys.version_info[0] == 2 else kiter66)
                oprot.writeString(viter67.encode('utf-8') if sys.version_info[0] == 2 else viter67)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.derivationsSchema is not None:
            oprot.writeFieldBegin('derivationsSchema', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.derivationsSchema))
            for kiter68, viter69 in self.derivationsSchema.items():
                oprot.writeString(kiter68.encode('utf-8') if sys.version_info[0] == 2 else kiter68)
                oprot.writeString(viter69.encode('utf-8') if sys.version_info[0] == 2 else viter69)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StagingQueryEvalResult(object):
    """
    Attributes:
     - queryCheck
     - outputSchema

    """
    thrift_spec = None


    def __init__(self, queryCheck = None, outputSchema = None,):
        self.queryCheck = queryCheck
        self.outputSchema = outputSchema

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.queryCheck = BaseEvalResult()
                    self.queryCheck.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.outputSchema = {}
                    (_ktype71, _vtype72, _size70) = iprot.readMapBegin()
                    for _i74 in range(_size70):
                        _key75 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val76 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.outputSchema[_key75] = _val76
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StagingQueryEvalResult')
        if self.queryCheck is not None:
            oprot.writeFieldBegin('queryCheck', TType.STRUCT, 1)
            self.queryCheck.write(oprot)
            oprot.writeFieldEnd()
        if self.outputSchema is not None:
            oprot.writeFieldBegin('outputSchema', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.outputSchema))
            for kiter77, viter78 in self.outputSchema.items():
                oprot.writeString(kiter77.encode('utf-8') if sys.version_info[0] == 2 else kiter77)
                oprot.writeString(viter78.encode('utf-8') if sys.version_info[0] == 2 else viter78)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(BaseEvalResult)
BaseEvalResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'checkResult', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
all_structs.append(JoinPartEvalResult)
JoinPartEvalResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'partName', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'gbEvalResult', [GroupByEvalResult, None], None, ),  # 2
    (3, TType.STRUCT, 'keySchemaCheck', [BaseEvalResult, None], None, ),  # 3
)
all_structs.append(JoinEvalResult)
JoinEvalResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'leftExpressionCheck', [BaseEvalResult, None], None, ),  # 1
    (2, TType.STRUCT, 'leftTimestampCheck', [BaseEvalResult, None], None, ),  # 2
    (3, TType.LIST, 'joinPartChecks', (TType.STRUCT, [JoinPartEvalResult, None], False), None, ),  # 3
    (4, TType.STRUCT, 'derivationValidityCheck', [BaseEvalResult, None], None, ),  # 4
    (5, TType.MAP, 'leftQuerySchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.MAP, 'rightPartsSchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.MAP, 'derivationsSchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.MAP, 'externalPartsSchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)
all_structs.append(GroupByEvalResult)
GroupByEvalResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sourceExpressionCheck', [BaseEvalResult, None], None, ),  # 1
    (2, TType.STRUCT, 'sourceTimestampCheck', [BaseEvalResult, None], None, ),  # 2
    (3, TType.STRUCT, 'aggExpressionCheck', [BaseEvalResult, None], None, ),  # 3
    (4, TType.STRUCT, 'derivationsExpressionCheck', [BaseEvalResult, None], None, ),  # 4
    (5, TType.MAP, 'keySchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.MAP, 'aggSchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.MAP, 'derivationsSchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(StagingQueryEvalResult)
StagingQueryEvalResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'queryCheck', [BaseEvalResult, None], None, ),  # 1
    (2, TType.MAP, 'outputSchema', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
