"""
symbol_shorthand submodule
"""
from __future__ import annotations
import typing
__all__: list[str] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
def A(j: typing.SupportsInt) -> int:
    ...
def B(j: typing.SupportsInt) -> int:
    ...
def C(j: typing.SupportsInt) -> int:
    ...
def D(j: typing.SupportsInt) -> int:
    ...
def E(j: typing.SupportsInt) -> int:
    ...
def F(j: typing.SupportsInt) -> int:
    ...
def G(j: typing.SupportsInt) -> int:
    ...
def H(j: typing.SupportsInt) -> int:
    ...
def I(j: typing.SupportsInt) -> int:
    ...
def J(j: typing.SupportsInt) -> int:
    ...
def K(j: typing.SupportsInt) -> int:
    ...
def L(j: typing.SupportsInt) -> int:
    ...
def M(j: typing.SupportsInt) -> int:
    ...
def N(j: typing.SupportsInt) -> int:
    ...
def O(j: typing.SupportsInt) -> int:
    ...
def P(j: typing.SupportsInt) -> int:
    ...
def Q(j: typing.SupportsInt) -> int:
    ...
def R(j: typing.SupportsInt) -> int:
    ...
def S(j: typing.SupportsInt) -> int:
    ...
def T(j: typing.SupportsInt) -> int:
    ...
def U(j: typing.SupportsInt) -> int:
    ...
def V(j: typing.SupportsInt) -> int:
    ...
def W(j: typing.SupportsInt) -> int:
    ...
def X(j: typing.SupportsInt) -> int:
    ...
def Y(j: typing.SupportsInt) -> int:
    ...
def Z(j: typing.SupportsInt) -> int:
    ...
