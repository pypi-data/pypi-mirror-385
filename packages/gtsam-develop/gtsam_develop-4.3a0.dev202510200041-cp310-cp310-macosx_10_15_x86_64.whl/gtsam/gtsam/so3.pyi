"""
so3 submodule
"""
from __future__ import annotations
import numpy
import numpy.typing
import typing
__all__: list[str] = ['DexpFunctor', 'ExpmapFunctor', 'InvJKernel', 'Kernel']
class DexpFunctor(ExpmapFunctor):
    def C(self) -> float:
        ...
    def D(self) -> float:
        ...
    def E(self) -> float:
        ...
    def Gamma(self) -> Kernel:
        ...
    def InvJacobian(self) -> InvJKernel:
        ...
    def Jacobian(self) -> Kernel:
        ...
    def Rodrigues(self) -> Kernel:
        ...
    @typing.overload
    def __init__(self, omega: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> None:
        ...
    @typing.overload
    def __init__(self, omega: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"], nearZeroThresholdSq: typing.SupportsFloat, nearPiThresholdSq: typing.SupportsFloat) -> None:
        ...
    def leftJacobian(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
    def rightJacobian(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
    @property
    def omega(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 1]"]:
        ...
class ExpmapFunctor:
    @typing.overload
    def __init__(self, omega: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> None:
        ...
    @typing.overload
    def __init__(self, nearZeroThresholdSq: typing.SupportsFloat, axis: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> None:
        ...
    @typing.overload
    def __init__(self, axis: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"], angle: typing.SupportsFloat) -> None:
        ...
    def expmap(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        """
        Rodrigues formula.
        """
    @property
    def A(self) -> float:
        ...
    @A.setter
    def A(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def B(self) -> float:
        ...
    @B.setter
    def B(self, arg0: typing.SupportsFloat) -> None:
        ...
    @property
    def W(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
    @property
    def WW(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
    @property
    def nearZero(self) -> bool:
        ...
    @property
    def theta(self) -> float:
        ...
    @property
    def theta2(self) -> float:
        ...
class InvJKernel:
    J: Kernel
    def applyLeft(self, v: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 1]"]:
        ...
    def applyRight(self, v: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 1]"]:
        ...
    def left(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
    def right(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
class Kernel:
    def applyFrechet(self, v: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        """
        Apply Fréchet derivative to vector (left specialization)
        """
    def applyLeft(self, v: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 1]"]:
        ...
    def applyRight(self, v: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 1]"]) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 1]"]:
        ...
    def frechet(self, X: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[3, 3]"]) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        """
        Fréchet derivative of left-kernel M(ω) in the direction X ∈ so(3) L_M(Ω)[X] = b X + c (Ω X + X Ω) + s (db Ω + dc Ω²), with s = -½ tr(Ω X)
        """
    def left(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
    def right(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[3, 3]"]:
        ...
