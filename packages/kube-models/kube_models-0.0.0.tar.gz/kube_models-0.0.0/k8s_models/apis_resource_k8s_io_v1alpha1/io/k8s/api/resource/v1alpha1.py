# generated by puzl.cloud generator:
#   filename:  apis__resource.k8s.io__v1alpha1_openapi.json
#   timestamp: 2025-10-20T15:37:45+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from k8s_models.const import *
from k8s_models.loader import *
from k8s_models.loader import LazyLoadModel
from k8s_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import ListMeta, ObjectMeta
from ..core.v1 import NodeSelector


@dataclass(kw_only=True, frozen=True)
class PodSchedulingSpec(LazyLoadModel):
    potentialNodes: List[str] | None = None
    selectedNode: str | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaimConsumerReference(LazyLoadModel):
    name: str
    resource: str
    uid: str
    apiGroup: str | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaimParametersReference(LazyLoadModel):
    kind: str
    name: str
    apiGroup: str | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaimSchedulingStatus(LazyLoadModel):
    name: str | None = None
    unsuitableNodes: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaimSpec(LazyLoadModel):
    resourceClassName: str
    allocationMode: str | None = None
    parametersRef: ResourceClaimParametersReference | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClassParametersReference(LazyLoadModel):
    kind: str
    name: str
    apiGroup: str | None = None
    namespace: str | None = None


@dataclass(kw_only=True, frozen=True)
class AllocationResult(LazyLoadModel):
    availableOnNodes: NodeSelector | None = None
    resourceHandle: str | None = None
    shareable: bool | None = None


@dataclass(kw_only=True, frozen=True)
class PodSchedulingStatus(LazyLoadModel):
    resourceClaims: List[ResourceClaimSchedulingStatus] | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaimStatus(LazyLoadModel):
    allocation: AllocationResult | None = None
    deallocationRequested: bool | None = None
    driverName: str | None = None
    reservedFor: List[ResourceClaimConsumerReference] | None = None


@dataclass(kw_only=True, frozen=True)
class PodScheduling(K8sResource):
    spec: PodSchedulingSpec
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'PodScheduling'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    status: PodSchedulingStatus | None = None
    api_path_: ClassVar[str] = (
        'apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings'
    )
    plural_: ClassVar[str] = 'podschedulings'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1alpha1'
    kind_: ClassVar[str] = 'PodScheduling'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/strategic-merge-patch+json',
        'application/merge-patch+json',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class PodSchedulingList(LazyLoadModel):
    items: List[PodScheduling]
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'PodSchedulingList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ResourceClaim(K8sResource):
    spec: ResourceClaimSpec
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'ResourceClaim'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    status: ResourceClaimStatus | None = None
    api_path_: ClassVar[str] = (
        'apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims'
    )
    plural_: ClassVar[str] = 'resourceclaims'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1alpha1'
    kind_: ClassVar[str] = 'ResourceClaim'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/strategic-merge-patch+json',
        'application/merge-patch+json',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ResourceClaimList(LazyLoadModel):
    items: List[ResourceClaim]
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'ResourceClaimList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ResourceClaimTemplateSpec(LazyLoadModel):
    spec: ResourceClaimSpec
    metadata: ObjectMeta | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClass(K8sResource):
    driverName: str
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'ResourceClass'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    parametersRef: ResourceClassParametersReference | None = None
    suitableNodes: NodeSelector | None = None
    api_path_: ClassVar[str] = 'apis/resource.k8s.io/v1alpha1/resourceclasses'
    plural_: ClassVar[str] = 'resourceclasses'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1alpha1'
    kind_: ClassVar[str] = 'ResourceClass'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/strategic-merge-patch+json',
        'application/merge-patch+json',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ResourceClassList(LazyLoadModel):
    items: List[ResourceClass]
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'ResourceClassList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ResourceClaimTemplate(K8sResource):
    spec: ResourceClaimTemplateSpec
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'ResourceClaimTemplate'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    api_path_: ClassVar[str] = (
        'apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates'
    )
    plural_: ClassVar[str] = 'resourceclaimtemplates'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1alpha1'
    kind_: ClassVar[str] = 'ResourceClaimTemplate'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/strategic-merge-patch+json',
        'application/merge-patch+json',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ResourceClaimTemplateList(LazyLoadModel):
    items: List[ResourceClaimTemplate]
    apiVersion: str = 'resource.k8s.io/v1alpha1'
    kind: str = 'ResourceClaimTemplateList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
