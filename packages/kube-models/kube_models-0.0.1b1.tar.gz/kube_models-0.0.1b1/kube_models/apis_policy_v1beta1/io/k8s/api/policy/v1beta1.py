# generated by https://github.com/puzl-cloud/kubesdk
#   filename:  apis__policy__v1beta1_openapi.json
#   timestamp: 2025-10-21T10:16:06+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, Dict, List, Set

from kube_models.const import *
from kube_models.loader import *
from kube_models.loader import LazyLoadModel
from kube_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import (
    Condition,
    LabelSelector,
    ListMeta,
    ObjectMeta,
    Time,
)
from ...apimachinery.pkg.util.intstr import IntOrString
from ..core.v1 import SELinuxOptions


@dataclass(kw_only=True, frozen=True)
class AllowedCSIDriver(LazyLoadModel):
    name: str


@dataclass(kw_only=True, frozen=True)
class AllowedFlexVolume(LazyLoadModel):
    driver: str


@dataclass(kw_only=True, frozen=True)
class AllowedHostPath(LazyLoadModel):
    pathPrefix: str | None = None
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class HostPortRange(LazyLoadModel):
    max: int
    min: int


@dataclass(kw_only=True, frozen=True)
class IDRange(LazyLoadModel):
    max: int
    min: int


@dataclass(kw_only=True, frozen=True)
class RunAsGroupStrategyOptions(LazyLoadModel):
    rule: str
    ranges: List[IDRange] | None = None


@dataclass(kw_only=True, frozen=True)
class RunAsUserStrategyOptions(LazyLoadModel):
    rule: str
    ranges: List[IDRange] | None = None


@dataclass(kw_only=True, frozen=True)
class RuntimeClassStrategyOptions(LazyLoadModel):
    allowedRuntimeClassNames: List[str]
    defaultRuntimeClassName: str | None = None


@dataclass(kw_only=True, frozen=True)
class SELinuxStrategyOptions(LazyLoadModel):
    rule: str
    seLinuxOptions: SELinuxOptions | None = None


@dataclass(kw_only=True, frozen=True)
class SupplementalGroupsStrategyOptions(LazyLoadModel):
    ranges: List[IDRange] | None = None
    rule: str | None = None


@dataclass(kw_only=True, frozen=True)
class FSGroupStrategyOptions(LazyLoadModel):
    ranges: List[IDRange] | None = None
    rule: str | None = None


@dataclass(kw_only=True, frozen=True)
class PodSecurityPolicySpec(LazyLoadModel):
    fsGroup: FSGroupStrategyOptions
    runAsUser: RunAsUserStrategyOptions
    seLinux: SELinuxStrategyOptions
    supplementalGroups: SupplementalGroupsStrategyOptions
    allowPrivilegeEscalation: bool | None = None
    allowedCSIDrivers: List[AllowedCSIDriver] | None = None
    allowedCapabilities: List[str] | None = None
    allowedFlexVolumes: List[AllowedFlexVolume] | None = None
    allowedHostPaths: List[AllowedHostPath] | None = None
    allowedProcMountTypes: List[str] | None = None
    allowedUnsafeSysctls: List[str] | None = None
    defaultAddCapabilities: List[str] | None = None
    defaultAllowPrivilegeEscalation: bool | None = None
    forbiddenSysctls: List[str] | None = None
    hostIPC: bool | None = None
    hostNetwork: bool | None = None
    hostPID: bool | None = None
    hostPorts: List[HostPortRange] | None = None
    privileged: bool | None = None
    readOnlyRootFilesystem: bool | None = None
    requiredDropCapabilities: List[str] | None = None
    runAsGroup: RunAsGroupStrategyOptions | None = None
    runtimeClass: RuntimeClassStrategyOptions | None = None
    volumes: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class PodDisruptionBudgetSpec(LazyLoadModel):
    maxUnavailable: IntOrString | None = None
    minAvailable: IntOrString | None = None
    selector: LabelSelector | None = None


@dataclass(kw_only=True, frozen=True)
class PodDisruptionBudgetStatus(LazyLoadModel):
    currentHealthy: int
    desiredHealthy: int
    disruptionsAllowed: int
    expectedPods: int
    conditions: List[Condition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )
    disruptedPods: Dict[str, Time] | None = None
    observedGeneration: int | None = None


@dataclass(kw_only=True, frozen=True)
class PodSecurityPolicy(K8sResource):
    apiVersion: str = 'policy/v1beta1'
    kind: str = 'PodSecurityPolicy'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: PodSecurityPolicySpec | None = None
    api_path_: ClassVar[str] = 'apis/policy/v1beta1/podsecuritypolicies'
    plural_: ClassVar[str] = 'podsecuritypolicies'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'policy'
    apiVersion_: ClassVar[str] = 'policy/v1beta1'
    kind_: ClassVar[str] = 'PodSecurityPolicy'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/merge-patch+json',
        'application/json-patch+json',
    }


@dataclass(kw_only=True, frozen=True)
class PodSecurityPolicyList(LazyLoadModel):
    items: List[PodSecurityPolicy]
    apiVersion: str = 'policy/v1beta1'
    kind: str = 'PodSecurityPolicyList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class PodDisruptionBudget(K8sResource):
    apiVersion: str = 'policy/v1beta1'
    kind: str = 'PodDisruptionBudget'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: PodDisruptionBudgetSpec | None = None
    status: PodDisruptionBudgetStatus | None = None
    api_path_: ClassVar[str] = (
        'apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets'
    )
    plural_: ClassVar[str] = 'poddisruptionbudgets'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'policy'
    apiVersion_: ClassVar[str] = 'policy/v1beta1'
    kind_: ClassVar[str] = 'PodDisruptionBudget'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/merge-patch+json',
        'application/json-patch+json',
    }


@dataclass(kw_only=True, frozen=True)
class PodDisruptionBudgetList(LazyLoadModel):
    items: List[PodDisruptionBudget]
    apiVersion: str = 'policy/v1beta1'
    kind: str = 'PodDisruptionBudgetList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
