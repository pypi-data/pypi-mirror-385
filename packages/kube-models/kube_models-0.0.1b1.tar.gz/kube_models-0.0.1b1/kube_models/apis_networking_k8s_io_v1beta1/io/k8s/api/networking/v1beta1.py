# generated by https://github.com/puzl-cloud/kubesdk
#   filename:  apis__networking.k8s.io__v1beta1_openapi.json
#   timestamp: 2025-10-21T10:17:19+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from kube_models.const import *
from kube_models.loader import *
from kube_models.loader import LazyLoadModel
from kube_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import Condition, ListMeta, ObjectMeta


@dataclass(kw_only=True, frozen=True)
class ParentReference(LazyLoadModel):
    name: str
    resource: str
    group: str | None = None
    namespace: str | None = None


@dataclass(kw_only=True, frozen=True)
class ServiceCIDRSpec(LazyLoadModel):
    cidrs: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class IPAddressSpec(LazyLoadModel):
    parentRef: ParentReference


@dataclass(kw_only=True, frozen=True)
class IPAddress(K8sResource):
    apiVersion: str = 'networking.k8s.io/v1beta1'
    kind: str = 'IPAddress'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: IPAddressSpec | None = None
    api_path_: ClassVar[str] = 'apis/networking.k8s.io/v1beta1/ipaddresses'
    plural_: ClassVar[str] = 'ipaddresses'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'networking.k8s.io'
    apiVersion_: ClassVar[str] = 'networking.k8s.io/v1beta1'
    kind_: ClassVar[str] = 'IPAddress'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class IPAddressList(LazyLoadModel):
    items: List[IPAddress]
    apiVersion: str = 'networking.k8s.io/v1beta1'
    kind: str = 'IPAddressList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ServiceCIDRStatus(LazyLoadModel):
    conditions: List[Condition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )


@dataclass(kw_only=True, frozen=True)
class ServiceCIDR(K8sResource):
    apiVersion: str = 'networking.k8s.io/v1beta1'
    kind: str = 'ServiceCIDR'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: ServiceCIDRSpec | None = None
    status: ServiceCIDRStatus | None = None
    api_path_: ClassVar[str] = 'apis/networking.k8s.io/v1beta1/servicecidrs'
    plural_: ClassVar[str] = 'servicecidrs'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'networking.k8s.io'
    apiVersion_: ClassVar[str] = 'networking.k8s.io/v1beta1'
    kind_: ClassVar[str] = 'ServiceCIDR'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ServiceCIDRList(LazyLoadModel):
    items: List[ServiceCIDR]
    apiVersion: str = 'networking.k8s.io/v1beta1'
    kind: str = 'ServiceCIDRList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
