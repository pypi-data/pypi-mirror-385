# generated by https://github.com/puzl-cloud/kubesdk
#   filename:  apis__batch__v1_openapi.json
#   timestamp: 2025-10-21T10:17:23+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from kube_models.const import *
from kube_models.loader import *
from kube_models.loader import LazyLoadModel
from kube_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import LabelSelector, ListMeta, ObjectMeta, Time
from ..core.v1 import ObjectReference, PodTemplateSpec


@dataclass(kw_only=True, frozen=True)
class PodFailurePolicyOnExitCodesRequirement(LazyLoadModel):
    operator: str
    values: List[int]
    containerName: str | None = None


@dataclass(kw_only=True, frozen=True)
class PodFailurePolicyOnPodConditionsPattern(LazyLoadModel):
    status: str
    type: str


@dataclass(kw_only=True, frozen=True)
class PodFailurePolicyRule(LazyLoadModel):
    action: str
    onExitCodes: PodFailurePolicyOnExitCodesRequirement | None = None
    onPodConditions: List[PodFailurePolicyOnPodConditionsPattern] | None = None


@dataclass(kw_only=True, frozen=True)
class SuccessPolicyRule(LazyLoadModel):
    succeededCount: int | None = None
    succeededIndexes: str | None = None


@dataclass(kw_only=True, frozen=True)
class UncountedTerminatedPods(LazyLoadModel):
    failed: List[str] | None = None
    succeeded: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class CronJobStatus(LazyLoadModel):
    active: List[ObjectReference] | None = None
    lastScheduleTime: Time | None = None
    lastSuccessfulTime: Time | None = None


@dataclass(kw_only=True, frozen=True)
class JobCondition(LazyLoadModel):
    status: str
    type: str
    lastProbeTime: Time | None = None
    lastTransitionTime: Time | None = None
    message: str | None = None
    reason: str | None = None


@dataclass(kw_only=True, frozen=True)
class JobStatus(LazyLoadModel):
    active: int | None = None
    completedIndexes: str | None = None
    completionTime: Time | None = None
    conditions: List[JobCondition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )
    failed: int | None = None
    failedIndexes: str | None = None
    ready: int | None = None
    startTime: Time | None = None
    succeeded: int | None = None
    terminating: int | None = None
    uncountedTerminatedPods: UncountedTerminatedPods | None = None


@dataclass(kw_only=True, frozen=True)
class PodFailurePolicy(LazyLoadModel):
    rules: List[PodFailurePolicyRule]


@dataclass(kw_only=True, frozen=True)
class SuccessPolicy(LazyLoadModel):
    rules: List[SuccessPolicyRule]


@dataclass(kw_only=True, frozen=True)
class JobSpec(LazyLoadModel):
    template: PodTemplateSpec
    activeDeadlineSeconds: int | None = None
    backoffLimit: int | None = None
    backoffLimitPerIndex: int | None = None
    completionMode: str | None = None
    completions: int | None = None
    managedBy: str | None = None
    manualSelector: bool | None = None
    maxFailedIndexes: int | None = None
    parallelism: int | None = None
    podFailurePolicy: PodFailurePolicy | None = None
    podReplacementPolicy: str | None = None
    selector: LabelSelector | None = None
    successPolicy: SuccessPolicy | None = None
    suspend: bool | None = None
    ttlSecondsAfterFinished: int | None = None


@dataclass(kw_only=True, frozen=True)
class JobTemplateSpec(LazyLoadModel):
    metadata: ObjectMeta | None = None
    spec: JobSpec | None = None


@dataclass(kw_only=True, frozen=True)
class CronJobSpec(LazyLoadModel):
    jobTemplate: JobTemplateSpec
    schedule: str
    concurrencyPolicy: str | None = None
    failedJobsHistoryLimit: int | None = None
    startingDeadlineSeconds: int | None = None
    successfulJobsHistoryLimit: int | None = None
    suspend: bool | None = None
    timeZone: str | None = None


@dataclass(kw_only=True, frozen=True)
class Job(K8sResource):
    apiVersion: str = 'batch/v1'
    kind: str = 'Job'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: JobSpec | None = None
    status: JobStatus | None = None
    api_path_: ClassVar[str] = 'apis/batch/v1/namespaces/{namespace}/jobs'
    plural_: ClassVar[str] = 'jobs'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'batch'
    apiVersion_: ClassVar[str] = 'batch/v1'
    kind_: ClassVar[str] = 'Job'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class JobList(LazyLoadModel):
    items: List[Job]
    apiVersion: str = 'batch/v1'
    kind: str = 'JobList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class CronJob(K8sResource):
    apiVersion: str = 'batch/v1'
    kind: str = 'CronJob'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: CronJobSpec | None = None
    status: CronJobStatus | None = None
    api_path_: ClassVar[str] = 'apis/batch/v1/namespaces/{namespace}/cronjobs'
    plural_: ClassVar[str] = 'cronjobs'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'batch'
    apiVersion_: ClassVar[str] = 'batch/v1'
    kind_: ClassVar[str] = 'CronJob'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class CronJobList(LazyLoadModel):
    items: List[CronJob]
    apiVersion: str = 'batch/v1'
    kind: str = 'CronJobList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
