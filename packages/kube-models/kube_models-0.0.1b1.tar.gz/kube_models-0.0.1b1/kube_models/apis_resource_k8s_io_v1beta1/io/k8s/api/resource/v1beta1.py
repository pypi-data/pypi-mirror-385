# generated by https://github.com/puzl-cloud/kubesdk
#   filename:  apis__resource.k8s.io__v1beta1_openapi.json
#   timestamp: 2025-10-21T10:17:20+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, Dict, List, Set

from kube_models.const import *
from kube_models.loader import *
from kube_models.loader import LazyLoadModel
from kube_models.resource import *

from ...apimachinery.pkg.api.resource import Quantity
from ...apimachinery.pkg.apis.meta.v1 import Condition, ListMeta, ObjectMeta, Time
from ...apimachinery.pkg.runtime import RawExtension
from ..core.v1 import NodeSelector


@dataclass(kw_only=True, frozen=True)
class CELDeviceSelector(LazyLoadModel):
    expression: str


@dataclass(kw_only=True, frozen=True)
class DeviceAttribute(LazyLoadModel):
    bool: bool_aliased | None = None
    int: int_aliased | None = None
    string: str | None = None
    version: str | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceConstraint(LazyLoadModel):
    distinctAttribute: str | None = None
    matchAttribute: str | None = None
    requests: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceSelector(LazyLoadModel):
    cel: CELDeviceSelector | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceToleration(LazyLoadModel):
    effect: str | None = None
    key: str | None = None
    operator: str | None = 'Equal'
    tolerationSeconds: int_aliased | None = None
    value: str | None = None


@dataclass(kw_only=True, frozen=True)
class NetworkDeviceData(LazyLoadModel):
    hardwareAddress: str | None = None
    interfaceName: str | None = None
    ips: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaimConsumerReference(LazyLoadModel):
    name: str
    resource: str
    uid: str
    apiGroup: str | None = None


@dataclass(kw_only=True, frozen=True)
class ResourcePool(LazyLoadModel):
    generation: int_aliased
    name: str
    resourceSliceCount: int_aliased


@dataclass(kw_only=True, frozen=True)
class CapacityRequestPolicyRange(LazyLoadModel):
    min: Quantity
    max: Quantity | None = None
    step: Quantity | None = None


@dataclass(kw_only=True, frozen=True)
class CapacityRequirements(LazyLoadModel):
    requests: Dict[str, Quantity] | None = None


@dataclass(kw_only=True, frozen=True)
class Counter(LazyLoadModel):
    value: Quantity


@dataclass(kw_only=True, frozen=True)
class CounterSet(LazyLoadModel):
    counters: Dict[str, Counter]
    name: str


@dataclass(kw_only=True, frozen=True)
class DeviceCounterConsumption(LazyLoadModel):
    counterSet: str
    counters: Dict[str, Counter]


@dataclass(kw_only=True, frozen=True)
class DeviceRequestAllocationResult(LazyLoadModel):
    device: str
    driver: str
    pool: str
    request: str
    adminAccess: bool_aliased | None = None
    bindingConditions: List[str] | None = None
    bindingFailureConditions: List[str] | None = None
    consumedCapacity: Dict[str, Quantity] | None = None
    shareID: str | None = None
    tolerations: List[DeviceToleration] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceSubRequest(LazyLoadModel):
    deviceClassName: str
    name: str
    allocationMode: str | None = None
    capacity: CapacityRequirements | None = None
    count: int_aliased | None = None
    selectors: List[DeviceSelector] | None = None
    tolerations: List[DeviceToleration] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceTaint(LazyLoadModel):
    effect: str
    key: str
    timeAdded: Time | None = None
    value: str | None = None


@dataclass(kw_only=True, frozen=True)
class OpaqueDeviceConfiguration(LazyLoadModel):
    driver: str
    parameters: RawExtension


@dataclass(kw_only=True, frozen=True)
class AllocatedDeviceStatus(LazyLoadModel):
    device: str
    driver: str
    pool: str
    conditions: List[Condition] | None = None
    data: RawExtension | None = None
    networkData: NetworkDeviceData | None = None
    shareID: str | None = None


@dataclass(kw_only=True, frozen=True)
class CapacityRequestPolicy(LazyLoadModel):
    default: Quantity | None = None
    validRange: CapacityRequestPolicyRange | None = None
    validValues: List[Quantity] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceAllocationConfiguration(LazyLoadModel):
    source: str
    opaque: OpaqueDeviceConfiguration | None = None
    requests: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceAllocationResult(LazyLoadModel):
    config: List[DeviceAllocationConfiguration] | None = None
    results: List[DeviceRequestAllocationResult] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceCapacity(LazyLoadModel):
    value: Quantity
    requestPolicy: CapacityRequestPolicy | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceClaimConfiguration(LazyLoadModel):
    opaque: OpaqueDeviceConfiguration | None = None
    requests: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceClassConfiguration(LazyLoadModel):
    opaque: OpaqueDeviceConfiguration | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceClassSpec(LazyLoadModel):
    config: List[DeviceClassConfiguration] | None = None
    extendedResourceName: str | None = None
    selectors: List[DeviceSelector] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceRequest(LazyLoadModel):
    name: str
    adminAccess: bool_aliased | None = None
    allocationMode: str | None = None
    capacity: CapacityRequirements | None = None
    count: int_aliased | None = None
    deviceClassName: str | None = None
    firstAvailable: List[DeviceSubRequest] | None = None
    selectors: List[DeviceSelector] | None = None
    tolerations: List[DeviceToleration] | None = None


@dataclass(kw_only=True, frozen=True)
class AllocationResult(LazyLoadModel):
    allocationTimestamp: Time | None = None
    devices: DeviceAllocationResult | None = None
    nodeSelector: NodeSelector | None = None


@dataclass(kw_only=True, frozen=True)
class BasicDevice(LazyLoadModel):
    allNodes: bool_aliased | None = None
    allowMultipleAllocations: bool_aliased | None = None
    attributes: Dict[str, DeviceAttribute] | None = None
    bindingConditions: List[str] | None = None
    bindingFailureConditions: List[str] | None = None
    bindsToNode: bool_aliased | None = None
    capacity: Dict[str, DeviceCapacity] | None = None
    consumesCounters: List[DeviceCounterConsumption] | None = None
    nodeName: str | None = None
    nodeSelector: NodeSelector | None = None
    taints: List[DeviceTaint] | None = None


@dataclass(kw_only=True, frozen=True)
class Device(LazyLoadModel):
    name: str
    basic: BasicDevice | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceClaim(LazyLoadModel):
    config: List[DeviceClaimConfiguration] | None = None
    constraints: List[DeviceConstraint] | None = None
    requests: List[DeviceRequest] | None = None


@dataclass(kw_only=True, frozen=True)
class DeviceClass(K8sResource):
    spec: DeviceClassSpec
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'DeviceClass'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    api_path_: ClassVar[str] = 'apis/resource.k8s.io/v1beta1/deviceclasses'
    plural_: ClassVar[str] = 'deviceclasses'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1beta1'
    kind_: ClassVar[str] = 'DeviceClass'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class DeviceClassList(LazyLoadModel):
    items: List[DeviceClass]
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'DeviceClassList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ResourceClaimSpec(LazyLoadModel):
    devices: DeviceClaim | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaimStatus(LazyLoadModel):
    allocation: AllocationResult | None = None
    devices: List[AllocatedDeviceStatus] | None = None
    reservedFor: List[ResourceClaimConsumerReference] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'uid',
        },
    )


@dataclass(kw_only=True, frozen=True)
class ResourceClaimTemplateSpec(LazyLoadModel):
    spec: ResourceClaimSpec
    metadata: ObjectMeta | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceSliceSpec(LazyLoadModel):
    driver: str
    pool: ResourcePool
    allNodes: bool_aliased | None = None
    devices: List[Device] | None = None
    nodeName: str | None = None
    nodeSelector: NodeSelector | None = None
    perDeviceNodeSelection: bool_aliased | None = None
    sharedCounters: List[CounterSet] | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceClaim(K8sResource):
    spec: ResourceClaimSpec
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'ResourceClaim'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    status: ResourceClaimStatus | None = None
    api_path_: ClassVar[str] = (
        'apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims'
    )
    plural_: ClassVar[str] = 'resourceclaims'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1beta1'
    kind_: ClassVar[str] = 'ResourceClaim'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ResourceClaimList(LazyLoadModel):
    items: List[ResourceClaim]
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'ResourceClaimList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ResourceClaimTemplate(K8sResource):
    spec: ResourceClaimTemplateSpec
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'ResourceClaimTemplate'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    api_path_: ClassVar[str] = (
        'apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates'
    )
    plural_: ClassVar[str] = 'resourceclaimtemplates'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1beta1'
    kind_: ClassVar[str] = 'ResourceClaimTemplate'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ResourceClaimTemplateList(LazyLoadModel):
    items: List[ResourceClaimTemplate]
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'ResourceClaimTemplateList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ResourceSlice(K8sResource):
    spec: ResourceSliceSpec
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'ResourceSlice'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    api_path_: ClassVar[str] = 'apis/resource.k8s.io/v1beta1/resourceslices'
    plural_: ClassVar[str] = 'resourceslices'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'resource.k8s.io'
    apiVersion_: ClassVar[str] = 'resource.k8s.io/v1beta1'
    kind_: ClassVar[str] = 'ResourceSlice'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ResourceSliceList(LazyLoadModel):
    items: List[ResourceSlice]
    apiVersion: str = 'resource.k8s.io/v1beta1'
    kind: str = 'ResourceSliceList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
