# generated by https://github.com/puzl-cloud/kubesdk
#   filename:  apis__certificates.k8s.io__v1alpha1_openapi.json
#   timestamp: 2025-10-21T10:17:17+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from kube_models.const import *
from kube_models.loader import *
from kube_models.loader import LazyLoadModel
from kube_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import Condition, ListMeta, ObjectMeta, Time


@dataclass(kw_only=True, frozen=True)
class ClusterTrustBundleSpec(LazyLoadModel):
    trustBundle: str
    signerName: str | None = None


@dataclass(kw_only=True, frozen=True)
class PodCertificateRequestSpec(LazyLoadModel):
    nodeName: str
    nodeUID: str
    pkixPublicKey: str
    podName: str
    podUID: str
    proofOfPossession: str
    serviceAccountName: str
    serviceAccountUID: str
    signerName: str
    maxExpirationSeconds: int | None = 86400


@dataclass(kw_only=True, frozen=True)
class ClusterTrustBundle(K8sResource):
    spec: ClusterTrustBundleSpec
    apiVersion: str = 'certificates.k8s.io/v1alpha1'
    kind: str = 'ClusterTrustBundle'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    api_path_: ClassVar[str] = 'apis/certificates.k8s.io/v1alpha1/clustertrustbundles'
    plural_: ClassVar[str] = 'clustertrustbundles'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'certificates.k8s.io'
    apiVersion_: ClassVar[str] = 'certificates.k8s.io/v1alpha1'
    kind_: ClassVar[str] = 'ClusterTrustBundle'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ClusterTrustBundleList(LazyLoadModel):
    items: List[ClusterTrustBundle]
    apiVersion: str = 'certificates.k8s.io/v1alpha1'
    kind: str = 'ClusterTrustBundleList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class PodCertificateRequestStatus(LazyLoadModel):
    beginRefreshAt: Time | None = None
    certificateChain: str | None = None
    conditions: List[Condition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )
    notAfter: Time | None = None
    notBefore: Time | None = None


@dataclass(kw_only=True, frozen=True)
class PodCertificateRequest(K8sResource):
    spec: PodCertificateRequestSpec
    apiVersion: str = 'certificates.k8s.io/v1alpha1'
    kind: str = 'PodCertificateRequest'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    status: PodCertificateRequestStatus | None = None
    api_path_: ClassVar[str] = (
        'apis/certificates.k8s.io/v1alpha1/namespaces/{namespace}/podcertificaterequests'
    )
    plural_: ClassVar[str] = 'podcertificaterequests'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'certificates.k8s.io'
    apiVersion_: ClassVar[str] = 'certificates.k8s.io/v1alpha1'
    kind_: ClassVar[str] = 'PodCertificateRequest'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class PodCertificateRequestList(LazyLoadModel):
    items: List[PodCertificateRequest]
    apiVersion: str = 'certificates.k8s.io/v1alpha1'
    kind: str = 'PodCertificateRequestList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
