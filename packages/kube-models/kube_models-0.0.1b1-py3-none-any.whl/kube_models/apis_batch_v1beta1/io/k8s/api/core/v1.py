# generated by https://github.com/puzl-cloud/kubesdk
#   filename:  apis__batch__v1beta1_openapi.json
#   timestamp: 2025-10-21T10:16:08+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, Dict, List, Set

from kube_models.const import *
from kube_models.loader import *
from kube_models.loader import LazyLoadModel
from kube_models.resource import *

from ...apimachinery.pkg.api.resource import Quantity
from ...apimachinery.pkg.apis.meta.v1 import LabelSelector, ObjectMeta
from ...apimachinery.pkg.util.intstr import IntOrString


@dataclass(kw_only=True, frozen=True)
class AWSElasticBlockStoreVolumeSource(LazyLoadModel):
    volumeID: str
    fsType: str | None = None
    partition: int | None = None
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class AzureDiskVolumeSource(LazyLoadModel):
    diskName: str
    diskURI: str
    cachingMode: str | None = None
    fsType: str | None = None
    kind: str | None = None
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class AzureFileVolumeSource(LazyLoadModel):
    secretName: str
    shareName: str
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class Capabilities(LazyLoadModel):
    add: List[str] | None = None
    drop: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class ConfigMapEnvSource(LazyLoadModel):
    name: str | None = None
    optional: bool | None = None


@dataclass(kw_only=True, frozen=True)
class ConfigMapKeySelector(LazyLoadModel):
    key: str
    name: str | None = None
    optional: bool | None = None


@dataclass(kw_only=True, frozen=True)
class ContainerPort(LazyLoadModel):
    containerPort: int
    hostIP: str | None = None
    hostPort: int | None = None
    name: str | None = None
    protocol: str | None = 'TCP'


@dataclass(kw_only=True, frozen=True)
class ExecAction(LazyLoadModel):
    command: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class FCVolumeSource(LazyLoadModel):
    fsType: str | None = None
    lun: int | None = None
    readOnly: bool | None = None
    targetWWNs: List[str] | None = None
    wwids: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class FlockerVolumeSource(LazyLoadModel):
    datasetName: str | None = None
    datasetUUID: str | None = None


@dataclass(kw_only=True, frozen=True)
class GCEPersistentDiskVolumeSource(LazyLoadModel):
    pdName: str
    fsType: str | None = None
    partition: int | None = None
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class GRPCAction(LazyLoadModel):
    port: int
    service: str | None = None


@dataclass(kw_only=True, frozen=True)
class GitRepoVolumeSource(LazyLoadModel):
    repository: str
    directory: str | None = None
    revision: str | None = None


@dataclass(kw_only=True, frozen=True)
class GlusterfsVolumeSource(LazyLoadModel):
    endpoints: str
    path: str
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class HTTPHeader(LazyLoadModel):
    name: str
    value: str


@dataclass(kw_only=True, frozen=True)
class HostAlias(LazyLoadModel):
    hostnames: List[str] | None = None
    ip: str | None = None


@dataclass(kw_only=True, frozen=True)
class HostPathVolumeSource(LazyLoadModel):
    path: str
    type: str | None = None


@dataclass(kw_only=True, frozen=True)
class KeyToPath(LazyLoadModel):
    key: str
    path: str
    mode: int | None = None


@dataclass(kw_only=True, frozen=True)
class LocalObjectReference(LazyLoadModel):
    name: str | None = None


@dataclass(kw_only=True, frozen=True)
class NFSVolumeSource(LazyLoadModel):
    path: str
    server: str
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class NodeSelectorRequirement(LazyLoadModel):
    key: str
    operator: str
    values: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class NodeSelectorTerm(LazyLoadModel):
    matchExpressions: List[NodeSelectorRequirement] | None = None
    matchFields: List[NodeSelectorRequirement] | None = None


@dataclass(kw_only=True, frozen=True)
class ObjectFieldSelector(LazyLoadModel):
    fieldPath: str
    apiVersion: str | None = None


@dataclass(kw_only=True, frozen=True)
class ObjectReference(LazyLoadModel):
    apiVersion: str | None = None
    fieldPath: str | None = None
    kind: str | None = None
    name: str | None = None
    namespace: str | None = None
    resourceVersion: str | None = None
    uid: str | None = None


@dataclass(kw_only=True, frozen=True)
class PersistentVolumeClaimVolumeSource(LazyLoadModel):
    claimName: str
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class PhotonPersistentDiskVolumeSource(LazyLoadModel):
    pdID: str
    fsType: str | None = None


@dataclass(kw_only=True, frozen=True)
class PodDNSConfigOption(LazyLoadModel):
    name: str | None = None
    value: str | None = None


@dataclass(kw_only=True, frozen=True)
class PodOS(LazyLoadModel):
    name: str


@dataclass(kw_only=True, frozen=True)
class PodReadinessGate(LazyLoadModel):
    conditionType: str


@dataclass(kw_only=True, frozen=True)
class PortworxVolumeSource(LazyLoadModel):
    volumeID: str
    fsType: str | None = None
    readOnly: bool | None = None


@dataclass(kw_only=True, frozen=True)
class PreferredSchedulingTerm(LazyLoadModel):
    preference: NodeSelectorTerm
    weight: int


@dataclass(kw_only=True, frozen=True)
class QuobyteVolumeSource(LazyLoadModel):
    registry: str
    volume: str
    group: str | None = None
    readOnly: bool | None = None
    tenant: str | None = None
    user: str | None = None


@dataclass(kw_only=True, frozen=True)
class RBDVolumeSource(LazyLoadModel):
    image: str
    monitors: List[str]
    fsType: str | None = None
    keyring: str | None = None
    pool: str | None = None
    readOnly: bool | None = None
    secretRef: LocalObjectReference | None = None
    user: str | None = None


@dataclass(kw_only=True, frozen=True)
class SELinuxOptions(LazyLoadModel):
    level: str | None = None
    role: str | None = None
    type: str | None = None
    user: str | None = None


@dataclass(kw_only=True, frozen=True)
class ScaleIOVolumeSource(LazyLoadModel):
    gateway: str
    secretRef: LocalObjectReference
    system: str
    fsType: str | None = None
    protectionDomain: str | None = None
    readOnly: bool | None = None
    sslEnabled: bool | None = None
    storageMode: str | None = None
    storagePool: str | None = None
    volumeName: str | None = None


@dataclass(kw_only=True, frozen=True)
class SeccompProfile(LazyLoadModel):
    type: str
    localhostProfile: str | None = None


@dataclass(kw_only=True, frozen=True)
class SecretEnvSource(LazyLoadModel):
    name: str | None = None
    optional: bool | None = None


@dataclass(kw_only=True, frozen=True)
class SecretKeySelector(LazyLoadModel):
    key: str
    name: str | None = None
    optional: bool | None = None


@dataclass(kw_only=True, frozen=True)
class SecretProjection(LazyLoadModel):
    items: List[KeyToPath] | None = None
    name: str | None = None
    optional: bool | None = None


@dataclass(kw_only=True, frozen=True)
class SecretVolumeSource(LazyLoadModel):
    defaultMode: int | None = None
    items: List[KeyToPath] | None = None
    optional: bool | None = None
    secretName: str | None = None


@dataclass(kw_only=True, frozen=True)
class ServiceAccountTokenProjection(LazyLoadModel):
    path: str
    audience: str | None = None
    expirationSeconds: int | None = None


@dataclass(kw_only=True, frozen=True)
class StorageOSVolumeSource(LazyLoadModel):
    fsType: str | None = None
    readOnly: bool | None = None
    secretRef: LocalObjectReference | None = None
    volumeName: str | None = None
    volumeNamespace: str | None = None


@dataclass(kw_only=True, frozen=True)
class Sysctl(LazyLoadModel):
    name: str
    value: str


@dataclass(kw_only=True, frozen=True)
class Toleration(LazyLoadModel):
    effect: str | None = None
    key: str | None = None
    operator: str | None = None
    tolerationSeconds: int | None = None
    value: str | None = None


@dataclass(kw_only=True, frozen=True)
class TypedLocalObjectReference(LazyLoadModel):
    kind: str
    name: str
    apiGroup: str | None = None


@dataclass(kw_only=True, frozen=True)
class VolumeDevice(LazyLoadModel):
    devicePath: str
    name: str


@dataclass(kw_only=True, frozen=True)
class VolumeMount(LazyLoadModel):
    mountPath: str
    name: str
    mountPropagation: str | None = None
    readOnly: bool | None = None
    subPath: str | None = None
    subPathExpr: str | None = None


@dataclass(kw_only=True, frozen=True)
class VsphereVirtualDiskVolumeSource(LazyLoadModel):
    volumePath: str
    fsType: str | None = None
    storagePolicyID: str | None = None
    storagePolicyName: str | None = None


@dataclass(kw_only=True, frozen=True)
class WindowsSecurityContextOptions(LazyLoadModel):
    gmsaCredentialSpec: str | None = None
    gmsaCredentialSpecName: str | None = None
    hostProcess: bool | None = None
    runAsUserName: str | None = None


@dataclass(kw_only=True, frozen=True)
class CSIVolumeSource(LazyLoadModel):
    driver: str
    fsType: str | None = None
    nodePublishSecretRef: LocalObjectReference | None = None
    readOnly: bool | None = None
    volumeAttributes: Dict[str, str] | None = None


@dataclass(kw_only=True, frozen=True)
class CephFSVolumeSource(LazyLoadModel):
    monitors: List[str]
    path: str | None = None
    readOnly: bool | None = None
    secretFile: str | None = None
    secretRef: LocalObjectReference | None = None
    user: str | None = None


@dataclass(kw_only=True, frozen=True)
class CinderVolumeSource(LazyLoadModel):
    volumeID: str
    fsType: str | None = None
    readOnly: bool | None = None
    secretRef: LocalObjectReference | None = None


@dataclass(kw_only=True, frozen=True)
class ConfigMapProjection(LazyLoadModel):
    items: List[KeyToPath] | None = None
    name: str | None = None
    optional: bool | None = None


@dataclass(kw_only=True, frozen=True)
class ConfigMapVolumeSource(LazyLoadModel):
    defaultMode: int | None = None
    items: List[KeyToPath] | None = None
    name: str | None = None
    optional: bool | None = None


@dataclass(kw_only=True, frozen=True)
class EmptyDirVolumeSource(LazyLoadModel):
    medium: str | None = None
    sizeLimit: Quantity | None = None


@dataclass(kw_only=True, frozen=True)
class EnvFromSource(LazyLoadModel):
    configMapRef: ConfigMapEnvSource | None = None
    prefix: str | None = None
    secretRef: SecretEnvSource | None = None


@dataclass(kw_only=True, frozen=True)
class FlexVolumeSource(LazyLoadModel):
    driver: str
    fsType: str | None = None
    options: Dict[str, str] | None = None
    readOnly: bool | None = None
    secretRef: LocalObjectReference | None = None


@dataclass(kw_only=True, frozen=True)
class HTTPGetAction(LazyLoadModel):
    port: IntOrString
    host: str | None = None
    httpHeaders: List[HTTPHeader] | None = None
    path: str | None = None
    scheme: str | None = None


@dataclass(kw_only=True, frozen=True)
class ISCSIVolumeSource(LazyLoadModel):
    iqn: str
    lun: int
    targetPortal: str
    chapAuthDiscovery: bool | None = None
    chapAuthSession: bool | None = None
    fsType: str | None = None
    initiatorName: str | None = None
    iscsiInterface: str | None = None
    portals: List[str] | None = None
    readOnly: bool | None = None
    secretRef: LocalObjectReference | None = None


@dataclass(kw_only=True, frozen=True)
class NodeSelector(LazyLoadModel):
    nodeSelectorTerms: List[NodeSelectorTerm]


@dataclass(kw_only=True, frozen=True)
class PodDNSConfig(LazyLoadModel):
    nameservers: List[str] | None = None
    options: List[PodDNSConfigOption] | None = None
    searches: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class PodSecurityContext(LazyLoadModel):
    fsGroup: int | None = None
    fsGroupChangePolicy: str | None = None
    runAsGroup: int | None = None
    runAsNonRoot: bool | None = None
    runAsUser: int | None = None
    seLinuxOptions: SELinuxOptions | None = None
    seccompProfile: SeccompProfile | None = None
    supplementalGroups: List[int] | None = None
    sysctls: List[Sysctl] | None = None
    windowsOptions: WindowsSecurityContextOptions | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceFieldSelector(LazyLoadModel):
    resource: str
    containerName: str | None = None
    divisor: Quantity | None = None


@dataclass(kw_only=True, frozen=True)
class ResourceRequirements(LazyLoadModel):
    limits: Dict[str, Quantity] | None = None
    requests: Dict[str, Quantity] | None = None


@dataclass(kw_only=True, frozen=True)
class SecurityContext(LazyLoadModel):
    allowPrivilegeEscalation: bool | None = None
    capabilities: Capabilities | None = None
    privileged: bool | None = None
    procMount: str | None = None
    readOnlyRootFilesystem: bool | None = None
    runAsGroup: int | None = None
    runAsNonRoot: bool | None = None
    runAsUser: int | None = None
    seLinuxOptions: SELinuxOptions | None = None
    seccompProfile: SeccompProfile | None = None
    windowsOptions: WindowsSecurityContextOptions | None = None


@dataclass(kw_only=True, frozen=True)
class TCPSocketAction(LazyLoadModel):
    port: IntOrString
    host: str | None = None


@dataclass(kw_only=True, frozen=True)
class DownwardAPIVolumeFile(LazyLoadModel):
    path: str
    fieldRef: ObjectFieldSelector | None = None
    mode: int | None = None
    resourceFieldRef: ResourceFieldSelector | None = None


@dataclass(kw_only=True, frozen=True)
class DownwardAPIVolumeSource(LazyLoadModel):
    defaultMode: int | None = None
    items: List[DownwardAPIVolumeFile] | None = None


@dataclass(kw_only=True, frozen=True)
class EnvVarSource(LazyLoadModel):
    configMapKeyRef: ConfigMapKeySelector | None = None
    fieldRef: ObjectFieldSelector | None = None
    resourceFieldRef: ResourceFieldSelector | None = None
    secretKeyRef: SecretKeySelector | None = None


@dataclass(kw_only=True, frozen=True)
class LifecycleHandler(LazyLoadModel):
    exec: ExecAction | None = None
    httpGet: HTTPGetAction | None = None
    tcpSocket: TCPSocketAction | None = None


@dataclass(kw_only=True, frozen=True)
class NodeAffinity(LazyLoadModel):
    preferredDuringSchedulingIgnoredDuringExecution: (
        List[PreferredSchedulingTerm] | None
    ) = None
    requiredDuringSchedulingIgnoredDuringExecution: NodeSelector | None = None


@dataclass(kw_only=True, frozen=True)
class PersistentVolumeClaimSpec(LazyLoadModel):
    accessModes: List[str] | None = None
    dataSource: TypedLocalObjectReference | None = None
    dataSourceRef: TypedLocalObjectReference | None = None
    resources: ResourceRequirements | None = None
    selector: LabelSelector | None = None
    storageClassName: str | None = None
    volumeMode: str | None = None
    volumeName: str | None = None


@dataclass(kw_only=True, frozen=True)
class PersistentVolumeClaimTemplate(LazyLoadModel):
    spec: PersistentVolumeClaimSpec
    metadata: ObjectMeta | None = None


@dataclass(kw_only=True, frozen=True)
class PodAffinityTerm(LazyLoadModel):
    topologyKey: str
    labelSelector: LabelSelector | None = None
    namespaceSelector: LabelSelector | None = None
    namespaces: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class Probe(LazyLoadModel):
    exec: ExecAction | None = None
    failureThreshold: int | None = None
    grpc: GRPCAction | None = None
    httpGet: HTTPGetAction | None = None
    initialDelaySeconds: int | None = None
    periodSeconds: int | None = None
    successThreshold: int | None = None
    tcpSocket: TCPSocketAction | None = None
    terminationGracePeriodSeconds: int | None = None
    timeoutSeconds: int | None = None


@dataclass(kw_only=True, frozen=True)
class TopologySpreadConstraint(LazyLoadModel):
    maxSkew: int
    topologyKey: str
    whenUnsatisfiable: str
    labelSelector: LabelSelector | None = None
    minDomains: int | None = None


@dataclass(kw_only=True, frozen=True)
class WeightedPodAffinityTerm(LazyLoadModel):
    podAffinityTerm: PodAffinityTerm
    weight: int


@dataclass(kw_only=True, frozen=True)
class DownwardAPIProjection(LazyLoadModel):
    items: List[DownwardAPIVolumeFile] | None = None


@dataclass(kw_only=True, frozen=True)
class EnvVar(LazyLoadModel):
    name: str
    value: str | None = None
    valueFrom: EnvVarSource | None = None


@dataclass(kw_only=True, frozen=True)
class EphemeralVolumeSource(LazyLoadModel):
    volumeClaimTemplate: PersistentVolumeClaimTemplate | None = None


@dataclass(kw_only=True, frozen=True)
class Lifecycle(LazyLoadModel):
    postStart: LifecycleHandler | None = None
    preStop: LifecycleHandler | None = None


@dataclass(kw_only=True, frozen=True)
class PodAffinity(LazyLoadModel):
    preferredDuringSchedulingIgnoredDuringExecution: (
        List[WeightedPodAffinityTerm] | None
    ) = None
    requiredDuringSchedulingIgnoredDuringExecution: List[PodAffinityTerm] | None = None


@dataclass(kw_only=True, frozen=True)
class PodAntiAffinity(LazyLoadModel):
    preferredDuringSchedulingIgnoredDuringExecution: (
        List[WeightedPodAffinityTerm] | None
    ) = None
    requiredDuringSchedulingIgnoredDuringExecution: List[PodAffinityTerm] | None = None


@dataclass(kw_only=True, frozen=True)
class VolumeProjection(LazyLoadModel):
    configMap: ConfigMapProjection | None = None
    downwardAPI: DownwardAPIProjection | None = None
    secret: SecretProjection | None = None
    serviceAccountToken: ServiceAccountTokenProjection | None = None


@dataclass(kw_only=True, frozen=True)
class Affinity(LazyLoadModel):
    nodeAffinity: NodeAffinity | None = None
    podAffinity: PodAffinity | None = None
    podAntiAffinity: PodAntiAffinity | None = None


@dataclass(kw_only=True, frozen=True)
class Container(LazyLoadModel):
    name: str
    args: List[str] | None = None
    command: List[str] | None = None
    env: List[EnvVar] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'name',
        },
    )
    envFrom: List[EnvFromSource] | None = None
    image: str | None = None
    imagePullPolicy: str | None = None
    lifecycle: Lifecycle | None = None
    livenessProbe: Probe | None = None
    ports: List[ContainerPort] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'containerPort',
        },
    )
    readinessProbe: Probe | None = None
    resources: ResourceRequirements | None = None
    securityContext: SecurityContext | None = None
    startupProbe: Probe | None = None
    stdin: bool | None = None
    stdinOnce: bool | None = None
    terminationMessagePath: str | None = None
    terminationMessagePolicy: str | None = None
    tty: bool | None = None
    volumeDevices: List[VolumeDevice] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'devicePath',
        },
    )
    volumeMounts: List[VolumeMount] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'mountPath',
        },
    )
    workingDir: str | None = None


@dataclass(kw_only=True, frozen=True)
class EphemeralContainer(LazyLoadModel):
    name: str
    args: List[str] | None = None
    command: List[str] | None = None
    env: List[EnvVar] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'name',
        },
    )
    envFrom: List[EnvFromSource] | None = None
    image: str | None = None
    imagePullPolicy: str | None = None
    lifecycle: Lifecycle | None = None
    livenessProbe: Probe | None = None
    ports: List[ContainerPort] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'containerPort',
        },
    )
    readinessProbe: Probe | None = None
    resources: ResourceRequirements | None = None
    securityContext: SecurityContext | None = None
    startupProbe: Probe | None = None
    stdin: bool | None = None
    stdinOnce: bool | None = None
    targetContainerName: str | None = None
    terminationMessagePath: str | None = None
    terminationMessagePolicy: str | None = None
    tty: bool | None = None
    volumeDevices: List[VolumeDevice] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'devicePath',
        },
    )
    volumeMounts: List[VolumeMount] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'mountPath',
        },
    )
    workingDir: str | None = None


@dataclass(kw_only=True, frozen=True)
class ProjectedVolumeSource(LazyLoadModel):
    defaultMode: int | None = None
    sources: List[VolumeProjection] | None = None


@dataclass(kw_only=True, frozen=True)
class Volume(LazyLoadModel):
    name: str
    awsElasticBlockStore: AWSElasticBlockStoreVolumeSource | None = None
    azureDisk: AzureDiskVolumeSource | None = None
    azureFile: AzureFileVolumeSource | None = None
    cephfs: CephFSVolumeSource | None = None
    cinder: CinderVolumeSource | None = None
    configMap: ConfigMapVolumeSource | None = None
    csi: CSIVolumeSource | None = None
    downwardAPI: DownwardAPIVolumeSource | None = None
    emptyDir: EmptyDirVolumeSource | None = None
    ephemeral: EphemeralVolumeSource | None = None
    fc: FCVolumeSource | None = None
    flexVolume: FlexVolumeSource | None = None
    flocker: FlockerVolumeSource | None = None
    gcePersistentDisk: GCEPersistentDiskVolumeSource | None = None
    gitRepo: GitRepoVolumeSource | None = None
    glusterfs: GlusterfsVolumeSource | None = None
    hostPath: HostPathVolumeSource | None = None
    iscsi: ISCSIVolumeSource | None = None
    nfs: NFSVolumeSource | None = None
    persistentVolumeClaim: PersistentVolumeClaimVolumeSource | None = None
    photonPersistentDisk: PhotonPersistentDiskVolumeSource | None = None
    portworxVolume: PortworxVolumeSource | None = None
    projected: ProjectedVolumeSource | None = None
    quobyte: QuobyteVolumeSource | None = None
    rbd: RBDVolumeSource | None = None
    scaleIO: ScaleIOVolumeSource | None = None
    secret: SecretVolumeSource | None = None
    storageos: StorageOSVolumeSource | None = None
    vsphereVolume: VsphereVirtualDiskVolumeSource | None = None


@dataclass(kw_only=True, frozen=True)
class PodSpec(LazyLoadModel):
    activeDeadlineSeconds: int | None = None
    affinity: Affinity | None = None
    automountServiceAccountToken: bool | None = None
    containers: List[Container] = field(
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'name',
        }
    )
    dnsConfig: PodDNSConfig | None = None
    dnsPolicy: str | None = None
    enableServiceLinks: bool | None = None
    ephemeralContainers: List[EphemeralContainer] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'name',
        },
    )
    hostAliases: List[HostAlias] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'ip',
        },
    )
    hostIPC: bool | None = None
    hostNetwork: bool | None = None
    hostPID: bool | None = None
    hostname: str | None = None
    imagePullSecrets: List[LocalObjectReference] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'name',
        },
    )
    initContainers: List[Container] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'name',
        },
    )
    nodeName: str | None = None
    nodeSelector: Dict[str, str] | None = None
    os: PodOS | None = None
    overhead: Dict[str, Quantity] | None = None
    preemptionPolicy: str | None = None
    priority: int | None = None
    priorityClassName: str | None = None
    readinessGates: List[PodReadinessGate] | None = None
    restartPolicy: str | None = None
    runtimeClassName: str | None = None
    schedulerName: str | None = None
    securityContext: PodSecurityContext | None = None
    serviceAccount: str | None = None
    serviceAccountName: str | None = None
    setHostnameAsFQDN: bool | None = None
    shareProcessNamespace: bool | None = None
    subdomain: str | None = None
    terminationGracePeriodSeconds: int | None = None
    tolerations: List[Toleration] | None = None
    topologySpreadConstraints: List[TopologySpreadConstraint] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'topologyKey',
        },
    )
    volumes: List[Volume] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge,retainKeys',
            'x-kubernetes-patch-merge-key': 'name',
        },
    )


@dataclass(kw_only=True, frozen=True)
class PodTemplateSpec(LazyLoadModel):
    metadata: ObjectMeta | None = None
    spec: PodSpec | None = None
