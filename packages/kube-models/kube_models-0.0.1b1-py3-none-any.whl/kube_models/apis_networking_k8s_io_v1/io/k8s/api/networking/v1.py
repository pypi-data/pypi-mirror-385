# generated by https://github.com/puzl-cloud/kubesdk
#   filename:  apis__networking.k8s.io__v1_openapi.json
#   timestamp: 2025-10-21T10:17:21+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from kube_models.const import *
from kube_models.loader import *
from kube_models.loader import LazyLoadModel
from kube_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import (
    Condition,
    LabelSelector,
    ListMeta,
    ObjectMeta,
)
from ...apimachinery.pkg.util.intstr import IntOrString
from ..core.v1 import TypedLocalObjectReference


@dataclass(kw_only=True, frozen=True)
class IPBlock(LazyLoadModel):
    cidr: str
    except_: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class IngressClassParametersReference(LazyLoadModel):
    kind: str
    name: str
    apiGroup: str | None = None
    namespace: str | None = None
    scope: str | None = None


@dataclass(kw_only=True, frozen=True)
class IngressClassSpec(LazyLoadModel):
    controller: str | None = None
    parameters: IngressClassParametersReference | None = None


@dataclass(kw_only=True, frozen=True)
class IngressPortStatus(LazyLoadModel):
    port: int
    protocol: str
    error: str | None = None


@dataclass(kw_only=True, frozen=True)
class IngressTLS(LazyLoadModel):
    hosts: List[str] | None = None
    secretName: str | None = None


@dataclass(kw_only=True, frozen=True)
class ParentReference(LazyLoadModel):
    name: str
    resource: str
    group: str | None = None
    namespace: str | None = None


@dataclass(kw_only=True, frozen=True)
class ServiceBackendPort(LazyLoadModel):
    name: str | None = None
    number: int | None = None


@dataclass(kw_only=True, frozen=True)
class ServiceCIDRSpec(LazyLoadModel):
    cidrs: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class IPAddressSpec(LazyLoadModel):
    parentRef: ParentReference


@dataclass(kw_only=True, frozen=True)
class IngressLoadBalancerIngress(LazyLoadModel):
    hostname: str | None = None
    ip: str | None = None
    ports: List[IngressPortStatus] | None = None


@dataclass(kw_only=True, frozen=True)
class IngressLoadBalancerStatus(LazyLoadModel):
    ingress: List[IngressLoadBalancerIngress] | None = None


@dataclass(kw_only=True, frozen=True)
class IngressServiceBackend(LazyLoadModel):
    name: str
    port: ServiceBackendPort | None = None


@dataclass(kw_only=True, frozen=True)
class IngressStatus(LazyLoadModel):
    loadBalancer: IngressLoadBalancerStatus | None = None


@dataclass(kw_only=True, frozen=True)
class NetworkPolicyPort(LazyLoadModel):
    endPort: int | None = None
    port: IntOrString | None = None
    protocol: str | None = None


@dataclass(kw_only=True, frozen=True)
class IPAddress(K8sResource):
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'IPAddress'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: IPAddressSpec | None = None
    api_path_: ClassVar[str] = 'apis/networking.k8s.io/v1/ipaddresses'
    plural_: ClassVar[str] = 'ipaddresses'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'networking.k8s.io'
    apiVersion_: ClassVar[str] = 'networking.k8s.io/v1'
    kind_: ClassVar[str] = 'IPAddress'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class IPAddressList(LazyLoadModel):
    items: List[IPAddress]
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'IPAddressList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class IngressBackend(LazyLoadModel):
    resource: TypedLocalObjectReference | None = None
    service: IngressServiceBackend | None = None


@dataclass(kw_only=True, frozen=True)
class IngressClass(K8sResource):
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'IngressClass'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: IngressClassSpec | None = None
    api_path_: ClassVar[str] = 'apis/networking.k8s.io/v1/ingressclasses'
    plural_: ClassVar[str] = 'ingressclasses'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'networking.k8s.io'
    apiVersion_: ClassVar[str] = 'networking.k8s.io/v1'
    kind_: ClassVar[str] = 'IngressClass'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class IngressClassList(LazyLoadModel):
    items: List[IngressClass]
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'IngressClassList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class NetworkPolicyPeer(LazyLoadModel):
    ipBlock: IPBlock | None = None
    namespaceSelector: LabelSelector | None = None
    podSelector: LabelSelector | None = None


@dataclass(kw_only=True, frozen=True)
class ServiceCIDRStatus(LazyLoadModel):
    conditions: List[Condition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )


@dataclass(kw_only=True, frozen=True)
class HTTPIngressPath(LazyLoadModel):
    backend: IngressBackend
    pathType: str
    path: str | None = None


@dataclass(kw_only=True, frozen=True)
class HTTPIngressRuleValue(LazyLoadModel):
    paths: List[HTTPIngressPath]


@dataclass(kw_only=True, frozen=True)
class IngressRule(LazyLoadModel):
    host: str | None = None
    http: HTTPIngressRuleValue | None = None


@dataclass(kw_only=True, frozen=True)
class IngressSpec(LazyLoadModel):
    defaultBackend: IngressBackend | None = None
    ingressClassName: str | None = None
    rules: List[IngressRule] | None = None
    tls: List[IngressTLS] | None = None


@dataclass(kw_only=True, frozen=True)
class NetworkPolicyEgressRule(LazyLoadModel):
    ports: List[NetworkPolicyPort] | None = None
    to: List[NetworkPolicyPeer] | None = None


@dataclass(kw_only=True, frozen=True)
class NetworkPolicyIngressRule(LazyLoadModel):
    from_: List[NetworkPolicyPeer] | None = None
    ports: List[NetworkPolicyPort] | None = None


@dataclass(kw_only=True, frozen=True)
class NetworkPolicySpec(LazyLoadModel):
    egress: List[NetworkPolicyEgressRule] | None = None
    ingress: List[NetworkPolicyIngressRule] | None = None
    podSelector: LabelSelector | None = None
    policyTypes: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class ServiceCIDR(K8sResource):
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'ServiceCIDR'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: ServiceCIDRSpec | None = None
    status: ServiceCIDRStatus | None = None
    api_path_: ClassVar[str] = 'apis/networking.k8s.io/v1/servicecidrs'
    plural_: ClassVar[str] = 'servicecidrs'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'networking.k8s.io'
    apiVersion_: ClassVar[str] = 'networking.k8s.io/v1'
    kind_: ClassVar[str] = 'ServiceCIDR'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class ServiceCIDRList(LazyLoadModel):
    items: List[ServiceCIDR]
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'ServiceCIDRList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class Ingress(K8sResource):
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'Ingress'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: IngressSpec | None = None
    status: IngressStatus | None = None
    api_path_: ClassVar[str] = (
        'apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses'
    )
    plural_: ClassVar[str] = 'ingresses'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'networking.k8s.io'
    apiVersion_: ClassVar[str] = 'networking.k8s.io/v1'
    kind_: ClassVar[str] = 'Ingress'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class IngressList(LazyLoadModel):
    items: List[Ingress]
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'IngressList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class NetworkPolicy(K8sResource):
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'NetworkPolicy'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: NetworkPolicySpec | None = None
    api_path_: ClassVar[str] = (
        'apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies'
    )
    plural_: ClassVar[str] = 'networkpolicies'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'networking.k8s.io'
    apiVersion_: ClassVar[str] = 'networking.k8s.io/v1'
    kind_: ClassVar[str] = 'NetworkPolicy'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/json-patch+json',
        'application/merge-patch+json',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
        'application/apply-patch+yaml',
    }


@dataclass(kw_only=True, frozen=True)
class NetworkPolicyList(LazyLoadModel):
    items: List[NetworkPolicy]
    apiVersion: str = 'networking.k8s.io/v1'
    kind: str = 'NetworkPolicyList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
