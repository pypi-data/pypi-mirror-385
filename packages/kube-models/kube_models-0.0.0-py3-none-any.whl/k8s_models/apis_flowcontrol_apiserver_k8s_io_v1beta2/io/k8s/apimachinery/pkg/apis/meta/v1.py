# generated by puzl.cloud generator:
#   filename:  apis__flowcontrol.apiserver.k8s.io__v1beta2_openapi.json
#   timestamp: 2025-10-20T15:37:57+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, Dict, List, Set

from k8s_models.const import *
from k8s_models.loader import *
from k8s_models.loader import LazyLoadModel
from k8s_models.resource import *

from ...runtime import RawExtension


@dataclass(kw_only=True, frozen=True)
class APIResource(LazyLoadModel):
    kind: str
    name: str
    namespaced: bool
    singularName: str
    verbs: List[str]
    categories: List[str] | None = None
    group: str | None = None
    shortNames: List[str] | None = None
    storageVersionHash: str | None = None
    version: str | None = None


@dataclass(kw_only=True, frozen=True)
class APIResourceList(LazyLoadModel):
    groupVersion: str
    resources: List[APIResource]
    apiVersion: str = 'v1'
    kind: str = 'APIResourceList'


@dataclass(kw_only=True, frozen=True)
class FieldsV1(LazyLoadModel):
    pass


@dataclass(kw_only=True, frozen=True)
class ListMeta(LazyLoadModel):
    continue_: str | None = None
    remainingItemCount: int | None = None
    resourceVersion: str | None = None
    selfLink: str | None = None


@dataclass(kw_only=True, frozen=True)
class OwnerReference(LazyLoadModel):
    apiVersion: str
    kind: str
    name: str
    uid: str
    blockOwnerDeletion: bool | None = None
    controller: bool | None = None


@dataclass(kw_only=True, frozen=True)
class Patch(LazyLoadModel):
    pass


@dataclass(kw_only=True, frozen=True)
class Preconditions(LazyLoadModel):
    resourceVersion: str | None = None
    uid: str | None = None


@dataclass(kw_only=True, frozen=True)
class StatusCause(LazyLoadModel):
    field: str | None = None
    message: str | None = None
    reason: str | None = None


@dataclass(kw_only=True, frozen=True)
class StatusDetails(LazyLoadModel):
    causes: List[StatusCause] | None = None
    group: str | None = None
    kind: str | None = None
    name: str | None = None
    retryAfterSeconds: int | None = None
    uid: str | None = None


Time = str


@dataclass(kw_only=True, frozen=True)
class DeleteOptions(LazyLoadModel):
    apiVersion: str = 'v1'
    dryRun: List[str] | None = None
    gracePeriodSeconds: int | None = None
    kind: str = 'DeleteOptions'
    orphanDependents: bool | None = None
    preconditions: Preconditions | None = None
    propagationPolicy: str | None = None


@dataclass(kw_only=True, frozen=True)
class ManagedFieldsEntry(LazyLoadModel):
    apiVersion: str | None = None
    fieldsType: str | None = None
    fieldsV1: FieldsV1 | None = None
    manager: str | None = None
    operation: str | None = None
    subresource: str | None = None
    time: Time | None = None


@dataclass(kw_only=True, frozen=True)
class ObjectMeta(LazyLoadModel):
    annotations: Dict[str, str] | None = None
    creationTimestamp: Time | None = None
    deletionGracePeriodSeconds: int | None = None
    deletionTimestamp: Time | None = None
    finalizers: List[str] = field(
        default_factory=list, metadata={'x-kubernetes-patch-strategy': 'merge'}
    )
    generateName: str | None = None
    generation: int | None = None
    labels: Dict[str, str] = field(default_factory=dict)
    managedFields: List[ManagedFieldsEntry] | None = None
    name: str | None = None
    namespace: str | None = None
    ownerReferences: List[OwnerReference] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'uid',
        },
    )
    resourceVersion: str | None = None
    selfLink: str | None = None
    uid: str | None = None


@dataclass(kw_only=True, frozen=True)
class Status(LazyLoadModel):
    apiVersion: str = 'v1'
    code: int | None = None
    details: StatusDetails | None = None
    kind: str = 'Status'
    message: str | None = None
    metadata: ListMeta = field(default_factory=ObjectMeta)
    reason: str | None = None
    status: str | None = None


@dataclass(kw_only=True, frozen=True)
class WatchEvent(LazyLoadModel):
    object: RawExtension
    type: str
