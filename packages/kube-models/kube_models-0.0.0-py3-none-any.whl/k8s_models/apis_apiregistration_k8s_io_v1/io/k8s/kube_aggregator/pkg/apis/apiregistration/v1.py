# generated by puzl.cloud generator:
#   filename:  apis__apiregistration.k8s.io__v1_openapi.json
#   timestamp: 2025-10-20T15:38:47+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from k8s_models.const import *
from k8s_models.loader import *
from k8s_models.loader import LazyLoadModel
from k8s_models.resource import *

from .....apimachinery.pkg.apis.meta.v1 import ListMeta, ObjectMeta, Time


@dataclass(kw_only=True, frozen=True)
class APIServiceCondition(LazyLoadModel):
    status: str
    type: str
    lastTransitionTime: Time | None = None
    message: str | None = None
    reason: str | None = None


@dataclass(kw_only=True, frozen=True)
class APIServiceStatus(LazyLoadModel):
    conditions: List[APIServiceCondition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )


@dataclass(kw_only=True, frozen=True)
class ServiceReference(LazyLoadModel):
    name: str | None = None
    namespace: str | None = None
    port: int | None = None


@dataclass(kw_only=True, frozen=True)
class APIServiceSpec(LazyLoadModel):
    groupPriorityMinimum: int
    versionPriority: int
    caBundle: str | None = None
    group: str | None = None
    insecureSkipTLSVerify: bool | None = None
    service: ServiceReference | None = None
    version: str | None = None


@dataclass(kw_only=True, frozen=True)
class APIService(K8sResource):
    apiVersion: str = 'apiregistration.k8s.io/v1'
    kind: str = 'APIService'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: APIServiceSpec | None = None
    status: APIServiceStatus | None = None
    api_path_: ClassVar[str] = 'apis/apiregistration.k8s.io/v1/apiservices'
    plural_: ClassVar[str] = 'apiservices'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'apiregistration.k8s.io'
    apiVersion_: ClassVar[str] = 'apiregistration.k8s.io/v1'
    kind_: ClassVar[str] = 'APIService'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class APIServiceList(LazyLoadModel):
    items: List[APIService]
    apiVersion: str = 'apiregistration.k8s.io/v1'
    kind: str = 'APIServiceList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
