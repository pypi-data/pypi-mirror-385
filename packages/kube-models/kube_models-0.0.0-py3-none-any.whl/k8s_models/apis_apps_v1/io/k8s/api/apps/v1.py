# generated by puzl.cloud generator:
#   filename:  apis__apps__v1_openapi.json
#   timestamp: 2025-10-20T15:38:51+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from k8s_models.const import *
from k8s_models.loader import *
from k8s_models.loader import LazyLoadModel
from k8s_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import LabelSelector, ListMeta, ObjectMeta, Time
from ...apimachinery.pkg.runtime import RawExtension
from ...apimachinery.pkg.util.intstr import IntOrString
from ..core.v1 import PersistentVolumeClaim, PodTemplateSpec


@dataclass(kw_only=True, frozen=True)
class StatefulSetOrdinals(LazyLoadModel):
    start: int | None = None


@dataclass(kw_only=True, frozen=True)
class StatefulSetPersistentVolumeClaimRetentionPolicy(LazyLoadModel):
    whenDeleted: str | None = None
    whenScaled: str | None = None


@dataclass(kw_only=True, frozen=True)
class DaemonSetCondition(LazyLoadModel):
    status: str
    type: str
    lastTransitionTime: Time | None = None
    message: str | None = None
    reason: str | None = None


@dataclass(kw_only=True, frozen=True)
class DaemonSetStatus(LazyLoadModel):
    currentNumberScheduled: int
    desiredNumberScheduled: int
    numberMisscheduled: int
    numberReady: int
    collisionCount: int | None = None
    conditions: List[DaemonSetCondition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )
    numberAvailable: int | None = None
    numberUnavailable: int | None = None
    observedGeneration: int | None = None
    updatedNumberScheduled: int | None = None


@dataclass(kw_only=True, frozen=True)
class DeploymentCondition(LazyLoadModel):
    status: str
    type: str
    lastTransitionTime: Time | None = None
    lastUpdateTime: Time | None = None
    message: str | None = None
    reason: str | None = None


@dataclass(kw_only=True, frozen=True)
class DeploymentStatus(LazyLoadModel):
    availableReplicas: int | None = None
    collisionCount: int | None = None
    conditions: List[DeploymentCondition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )
    observedGeneration: int | None = None
    readyReplicas: int | None = None
    replicas: int | None = None
    terminatingReplicas: int | None = None
    unavailableReplicas: int | None = None
    updatedReplicas: int | None = None


@dataclass(kw_only=True, frozen=True)
class ReplicaSetCondition(LazyLoadModel):
    status: str
    type: str
    lastTransitionTime: Time | None = None
    message: str | None = None
    reason: str | None = None


@dataclass(kw_only=True, frozen=True)
class ReplicaSetStatus(LazyLoadModel):
    replicas: int
    availableReplicas: int | None = None
    conditions: List[ReplicaSetCondition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )
    fullyLabeledReplicas: int | None = None
    observedGeneration: int | None = None
    readyReplicas: int | None = None
    terminatingReplicas: int | None = None


@dataclass(kw_only=True, frozen=True)
class RollingUpdateDaemonSet(LazyLoadModel):
    maxSurge: IntOrString | None = None
    maxUnavailable: IntOrString | None = None


@dataclass(kw_only=True, frozen=True)
class RollingUpdateDeployment(LazyLoadModel):
    maxSurge: IntOrString | None = None
    maxUnavailable: IntOrString | None = None


@dataclass(kw_only=True, frozen=True)
class RollingUpdateStatefulSetStrategy(LazyLoadModel):
    maxUnavailable: IntOrString | None = None
    partition: int | None = None


@dataclass(kw_only=True, frozen=True)
class StatefulSetCondition(LazyLoadModel):
    status: str
    type: str
    lastTransitionTime: Time | None = None
    message: str | None = None
    reason: str | None = None


@dataclass(kw_only=True, frozen=True)
class StatefulSetStatus(LazyLoadModel):
    replicas: int
    availableReplicas: int | None = None
    collisionCount: int | None = None
    conditions: List[StatefulSetCondition] = field(
        default_factory=list,
        metadata={
            'x-kubernetes-patch-strategy': 'merge',
            'x-kubernetes-patch-merge-key': 'type',
        },
    )
    currentReplicas: int | None = None
    currentRevision: str | None = None
    observedGeneration: int | None = None
    readyReplicas: int | None = None
    updateRevision: str | None = None
    updatedReplicas: int | None = None


@dataclass(kw_only=True, frozen=True)
class StatefulSetUpdateStrategy(LazyLoadModel):
    rollingUpdate: RollingUpdateStatefulSetStrategy | None = None
    type: str | None = None


@dataclass(kw_only=True, frozen=True)
class ControllerRevision(K8sResource):
    revision: int
    apiVersion: str = 'apps/v1'
    data: RawExtension | None = None
    kind: str = 'ControllerRevision'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    api_path_: ClassVar[str] = 'apis/apps/v1/namespaces/{namespace}/controllerrevisions'
    plural_: ClassVar[str] = 'controllerrevisions'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'apps'
    apiVersion_: ClassVar[str] = 'apps/v1'
    kind_: ClassVar[str] = 'ControllerRevision'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class ControllerRevisionList(LazyLoadModel):
    items: List[ControllerRevision]
    apiVersion: str = 'apps/v1'
    kind: str = 'ControllerRevisionList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class DaemonSetUpdateStrategy(LazyLoadModel):
    rollingUpdate: RollingUpdateDaemonSet | None = None
    type: str | None = None


@dataclass(kw_only=True, frozen=True)
class DeploymentStrategy(LazyLoadModel):
    rollingUpdate: RollingUpdateDeployment | None = None
    type: str | None = None


@dataclass(kw_only=True, frozen=True)
class DaemonSetSpec(LazyLoadModel):
    selector: LabelSelector
    template: PodTemplateSpec
    minReadySeconds: int | None = None
    revisionHistoryLimit: int | None = None
    updateStrategy: DaemonSetUpdateStrategy | None = None


@dataclass(kw_only=True, frozen=True)
class DeploymentSpec(LazyLoadModel):
    selector: LabelSelector
    template: PodTemplateSpec
    minReadySeconds: int | None = None
    paused: bool | None = None
    progressDeadlineSeconds: int | None = None
    replicas: int | None = None
    revisionHistoryLimit: int | None = None
    strategy: DeploymentStrategy = field(
        default_factory=dict, metadata={'x-kubernetes-patch-strategy': 'retainKeys'}
    )


@dataclass(kw_only=True, frozen=True)
class ReplicaSetSpec(LazyLoadModel):
    selector: LabelSelector
    minReadySeconds: int | None = None
    replicas: int | None = None
    template: PodTemplateSpec | None = None


@dataclass(kw_only=True, frozen=True)
class StatefulSetSpec(LazyLoadModel):
    selector: LabelSelector
    template: PodTemplateSpec
    minReadySeconds: int | None = None
    ordinals: StatefulSetOrdinals | None = None
    persistentVolumeClaimRetentionPolicy: (
        StatefulSetPersistentVolumeClaimRetentionPolicy | None
    ) = None
    podManagementPolicy: str | None = None
    replicas: int | None = None
    revisionHistoryLimit: int | None = None
    serviceName: str | None = None
    updateStrategy: StatefulSetUpdateStrategy | None = None
    volumeClaimTemplates: List[PersistentVolumeClaim] | None = None


@dataclass(kw_only=True, frozen=True)
class DaemonSet(K8sResource):
    apiVersion: str = 'apps/v1'
    kind: str = 'DaemonSet'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: DaemonSetSpec | None = None
    status: DaemonSetStatus | None = None
    api_path_: ClassVar[str] = 'apis/apps/v1/namespaces/{namespace}/daemonsets'
    plural_: ClassVar[str] = 'daemonsets'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'apps'
    apiVersion_: ClassVar[str] = 'apps/v1'
    kind_: ClassVar[str] = 'DaemonSet'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class DaemonSetList(LazyLoadModel):
    items: List[DaemonSet]
    apiVersion: str = 'apps/v1'
    kind: str = 'DaemonSetList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class Deployment(K8sResource):
    apiVersion: str = 'apps/v1'
    kind: str = 'Deployment'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: DeploymentSpec | None = None
    status: DeploymentStatus | None = None
    api_path_: ClassVar[str] = 'apis/apps/v1/namespaces/{namespace}/deployments'
    plural_: ClassVar[str] = 'deployments'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'apps'
    apiVersion_: ClassVar[str] = 'apps/v1'
    kind_: ClassVar[str] = 'Deployment'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class DeploymentList(LazyLoadModel):
    items: List[Deployment]
    apiVersion: str = 'apps/v1'
    kind: str = 'DeploymentList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ReplicaSet(K8sResource):
    apiVersion: str = 'apps/v1'
    kind: str = 'ReplicaSet'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: ReplicaSetSpec | None = None
    status: ReplicaSetStatus | None = None
    api_path_: ClassVar[str] = 'apis/apps/v1/namespaces/{namespace}/replicasets'
    plural_: ClassVar[str] = 'replicasets'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'apps'
    apiVersion_: ClassVar[str] = 'apps/v1'
    kind_: ClassVar[str] = 'ReplicaSet'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class ReplicaSetList(LazyLoadModel):
    items: List[ReplicaSet]
    apiVersion: str = 'apps/v1'
    kind: str = 'ReplicaSetList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class StatefulSet(K8sResource):
    apiVersion: str = 'apps/v1'
    kind: str = 'StatefulSet'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    spec: StatefulSetSpec | None = None
    status: StatefulSetStatus | None = None
    api_path_: ClassVar[str] = 'apis/apps/v1/namespaces/{namespace}/statefulsets'
    plural_: ClassVar[str] = 'statefulsets'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'apps'
    apiVersion_: ClassVar[str] = 'apps/v1'
    kind_: ClassVar[str] = 'StatefulSet'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class StatefulSetList(LazyLoadModel):
    items: List[StatefulSet]
    apiVersion: str = 'apps/v1'
    kind: str = 'StatefulSetList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
