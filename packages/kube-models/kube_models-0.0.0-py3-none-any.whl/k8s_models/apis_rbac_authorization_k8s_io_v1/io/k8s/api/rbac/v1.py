# generated by puzl.cloud generator:
#   filename:  apis__rbac.authorization.k8s.io__v1_openapi.json
#   timestamp: 2025-10-20T15:38:46+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime, timezone
from typing import ClassVar, List, Set

from k8s_models.const import *
from k8s_models.loader import *
from k8s_models.loader import LazyLoadModel
from k8s_models.resource import *

from ...apimachinery.pkg.apis.meta.v1 import LabelSelector, ListMeta, ObjectMeta


@dataclass(kw_only=True, frozen=True)
class PolicyRule(LazyLoadModel):
    verbs: List[str]
    apiGroups: List[str] | None = None
    nonResourceURLs: List[str] | None = None
    resourceNames: List[str] | None = None
    resources: List[str] | None = None


@dataclass(kw_only=True, frozen=True)
class RoleRef(LazyLoadModel):
    apiGroup: str
    kind: str
    name: str


@dataclass(kw_only=True, frozen=True)
class Subject(LazyLoadModel):
    kind: str
    name: str
    apiGroup: str | None = None
    namespace: str | None = None


@dataclass(kw_only=True, frozen=True)
class AggregationRule(LazyLoadModel):
    clusterRoleSelectors: List[LabelSelector] | None = None


@dataclass(kw_only=True, frozen=True)
class ClusterRole(K8sResource):
    aggregationRule: AggregationRule | None = None
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'ClusterRole'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    rules: List[PolicyRule] | None = None
    api_path_: ClassVar[str] = 'apis/rbac.authorization.k8s.io/v1/clusterroles'
    plural_: ClassVar[str] = 'clusterroles'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'rbac.authorization.k8s.io'
    apiVersion_: ClassVar[str] = 'rbac.authorization.k8s.io/v1'
    kind_: ClassVar[str] = 'ClusterRole'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class ClusterRoleBinding(K8sResource):
    roleRef: RoleRef
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'ClusterRoleBinding'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    subjects: List[Subject] | None = None
    api_path_: ClassVar[str] = 'apis/rbac.authorization.k8s.io/v1/clusterrolebindings'
    plural_: ClassVar[str] = 'clusterrolebindings'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'rbac.authorization.k8s.io'
    apiVersion_: ClassVar[str] = 'rbac.authorization.k8s.io/v1'
    kind_: ClassVar[str] = 'ClusterRoleBinding'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class ClusterRoleBindingList(LazyLoadModel):
    items: List[ClusterRoleBinding]
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'ClusterRoleBindingList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class ClusterRoleList(LazyLoadModel):
    items: List[ClusterRole]
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'ClusterRoleList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class Role(K8sResource):
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'Role'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    rules: List[PolicyRule] | None = None
    api_path_: ClassVar[str] = (
        'apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles'
    )
    plural_: ClassVar[str] = 'roles'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'rbac.authorization.k8s.io'
    apiVersion_: ClassVar[str] = 'rbac.authorization.k8s.io/v1'
    kind_: ClassVar[str] = 'Role'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class RoleBinding(K8sResource):
    roleRef: RoleRef
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'RoleBinding'
    metadata: ObjectMeta = field(default_factory=ObjectMeta)
    subjects: List[Subject] | None = None
    api_path_: ClassVar[str] = (
        'apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings'
    )
    plural_: ClassVar[str] = 'rolebindings'
    is_namespaced_: ClassVar[bool] = False
    group_: ClassVar[Optional[str]] = 'rbac.authorization.k8s.io'
    apiVersion_: ClassVar[str] = 'rbac.authorization.k8s.io/v1'
    kind_: ClassVar[str] = 'RoleBinding'
    patch_strategies_: ClassVar[Set[PatchRequestType]] = {
        'application/merge-patch+json',
        'application/json-patch+json',
        'application/apply-patch+yaml',
        'application/strategic-merge-patch+json',
        'application/apply-patch+cbor',
    }


@dataclass(kw_only=True, frozen=True)
class RoleBindingList(LazyLoadModel):
    items: List[RoleBinding]
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'RoleBindingList'
    metadata: ListMeta = field(default_factory=ObjectMeta)


@dataclass(kw_only=True, frozen=True)
class RoleList(LazyLoadModel):
    items: List[Role]
    apiVersion: str = 'rbac.authorization.k8s.io/v1'
    kind: str = 'RoleList'
    metadata: ListMeta = field(default_factory=ObjectMeta)
