[project]
name = "deltadefi"
version = "0.1.3"
description = "Python SDK for DeltaDeFi protocol."
readme = "README.md"
requires-python = ">3.11,<4.0.0"
license = "Apache-2.0"
authors = [
    {name = "HinsonSIDAN", email = "wongkahinhinson@gmail.com"}
]
keywords = ["cardano", "defi", "trading", "sdk"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "sidan-gin>=0.1.6",
    "requests>=2.25.0",
    "certifi>=2024.8.30",
    "charset-normalizer>=3.4.0",
    "idna>=3.10",
    "urllib3>=2.2.3",
    "pycardano>=0.12.3",
    "python-dotenv>=0.9.9",
    "websockets>=12.0",
]

[dependency-groups]
dev = [
    "pytest>=8.2.0",
    "pytest-xdist>=3.5.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.10",
    "mypy>=1.17.1",
    "twine>=5.0.0",
    "build>=1.3.0",
    "pre-commit>=4.3.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-copybutton>=0.5.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src"]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "RUF",  # ruff-specific rules
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
]

ignore = [
    "E501",    # Line too long - handled by formatter
    "W505",    # Doc line too long - handled by formatter
    "E203",    # Whitespace before ':' - conflicts with ruff formatter
]

[tool.ruff.lint.isort]
known-first-party = ["deltadefi"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert statements in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.11"
strict = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"
