# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .job_status import JobStatus
from .job_type import JobType
from .stop_reason_type import StopReasonType


class Job(UncheckedBaseModel):
    """
    Representation of offline jobs, used for tracking status of data loading tasks (involving parsing and embedding files).

    Parameters:
        id (str): The unique identifier of the job.
        status (JobStatus): The status of the job.
        created_at (datetime): The unix timestamp of when the job was created.
        completed_at (datetime): The unix timestamp of when the job was completed.
        user_id (str): The unique identifier of the user associated with the.
    """

    created_by_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The id of the user that made this object.
    """

    last_updated_by_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The id of the user that made this object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The unix timestamp of when the job was created.
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The timestamp when the object was last updated.
    """

    status: typing.Optional[JobStatus] = pydantic.Field(default=None)
    """
    The status of the job.
    """

    completed_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The unix timestamp of when the job was completed.
    """

    stop_reason: typing.Optional[StopReasonType] = pydantic.Field(default=None)
    """
    The reason why the job was stopped.
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The metadata of the job.
    """

    job_type: typing.Optional[JobType] = pydantic.Field(default=None)
    """
    The type of the job.
    """

    background: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the job was created in background mode.
    """

    agent_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The agent associated with this job/run.
    """

    callback_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    If set, POST to this URL when the job completes.
    """

    callback_sent_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Timestamp when the callback was last attempted.
    """

    callback_status_code: typing.Optional[int] = pydantic.Field(default=None)
    """
    HTTP status code returned by the callback endpoint.
    """

    callback_error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional error message from attempting to POST the callback endpoint.
    """

    ttft_ns: typing.Optional[int] = pydantic.Field(default=None)
    """
    Time to first token for a run in nanoseconds
    """

    total_duration_ns: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total run duration in nanoseconds
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The human-friendly ID of the Job
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
