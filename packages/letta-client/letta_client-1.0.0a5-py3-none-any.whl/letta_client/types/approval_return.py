# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class ApprovalReturn(UncheckedBaseModel):
    type: typing.Literal["approval"] = "approval"
    tool_call_id: str = pydantic.Field()
    """
    The ID of the tool call that corresponds to this approval
    """

    approve: bool = pydantic.Field()
    """
    Whether the tool has been approved
    """

    reason: typing.Optional[str] = pydantic.Field(default=None)
    """
    An optional explanation for the provided approval status
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
