# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .tool_call_node import ToolCallNode


class ChildToolRule(UncheckedBaseModel):
    """
    A ToolRule represents a tool that can be invoked by the agent.
    """

    tool_name: str = pydantic.Field()
    """
    The name of the tool. Must exist in the database for the user's organization.
    """

    type: typing.Literal["constrain_child_tools"] = "constrain_child_tools"
    prompt_template: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional template string (ignored).
    """

    children: typing.List[str] = pydantic.Field()
    """
    The children tools that can be invoked.
    """

    child_arg_nodes: typing.Optional[typing.List[ToolCallNode]] = pydantic.Field(default=None)
    """
    Optional list of typed child argument overrides. Each node must reference a child in 'children'.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
