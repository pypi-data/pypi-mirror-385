# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel
from .templates_get_template_snapshot_response_agents_item_tool_rules_item_child_arg_nodes_child_arg_nodes_item import (
    TemplatesGetTemplateSnapshotResponseAgentsItemToolRulesItemChildArgNodesChildArgNodesItem,
)


class TemplatesGetTemplateSnapshotResponseAgentsItemToolRulesItemChildArgNodes(UncheckedBaseModel):
    tool_name: str
    type: typing.Optional[typing.Literal["constrain_child_tools"]] = None
    prompt_template: typing.Optional[str] = None
    children: typing.List[str]
    child_arg_nodes: typing.Optional[
        typing.List[TemplatesGetTemplateSnapshotResponseAgentsItemToolRulesItemChildArgNodesChildArgNodesItem]
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
