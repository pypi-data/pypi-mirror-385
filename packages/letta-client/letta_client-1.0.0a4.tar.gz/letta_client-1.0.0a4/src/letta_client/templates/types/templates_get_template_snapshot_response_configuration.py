# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from ...core.unchecked_base_model import UncheckedBaseModel


class TemplatesGetTemplateSnapshotResponseConfiguration(UncheckedBaseModel):
    manager_agent_entity_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="managerAgentEntityId")
    ] = None
    manager_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="managerType")] = None
    termination_token: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="terminationToken")] = None
    max_turns: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="maxTurns")] = None
    sleeptime_agent_frequency: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="sleeptimeAgentFrequency")
    ] = None
    max_message_buffer_length: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="maxMessageBufferLength")
    ] = None
    min_message_buffer_length: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="minMessageBufferLength")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
