# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .message import Message


class LettaUsageStatistics(UncheckedBaseModel):
    """
    Usage statistics for the agent interaction.

    Attributes:
        completion_tokens (int): The number of tokens generated by the agent.
        prompt_tokens (int): The number of tokens in the prompt.
        total_tokens (int): The total number of tokens processed by the agent.
        step_count (int): The number of steps taken by the agent.
    """

    message_type: typing.Optional[typing.Literal["usage_statistics"]] = None
    completion_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of tokens generated by the agent.
    """

    prompt_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of tokens in the prompt.
    """

    total_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    The total number of tokens processed by the agent.
    """

    step_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of steps taken by the agent.
    """

    steps_messages: typing.Optional[typing.List[typing.List[Message]]] = pydantic.Field(default=None)
    """
    The messages generated per step
    """

    run_ids: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The background task run IDs associated with the agent interaction
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
