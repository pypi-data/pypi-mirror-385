# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .letta_schemas_message_tool_return_status import LettaSchemasMessageToolReturnStatus


class LettaSchemasMessageToolReturn(UncheckedBaseModel):
    tool_call_id: typing.Optional[typing.Optional[typing.Any]] = None
    status: LettaSchemasMessageToolReturnStatus = pydantic.Field()
    """
    The status of the tool call
    """

    stdout: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Captured stdout (e.g. prints, logs) from the tool invocation
    """

    stderr: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Captured stderr from the tool invocation
    """

    func_response: typing.Optional[str] = pydantic.Field(default=None)
    """
    The function response string
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
