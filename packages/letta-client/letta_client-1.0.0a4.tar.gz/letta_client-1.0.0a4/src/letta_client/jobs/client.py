# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.job import Job
from .raw_client import AsyncRawJobsClient, RawJobsClient
from .types.jobs_list_request_order import JobsListRequestOrder


class JobsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawJobsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawJobsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawJobsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        source_id: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        order: typing.Optional[JobsListRequestOrder] = None,
        order_by: typing.Optional[typing.Literal["created_at"]] = None,
        active: typing.Optional[bool] = None,
        ascending: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Job]:
        """
        List all jobs.

        Parameters
        ----------
        source_id : typing.Optional[str]
            Only list jobs associated with the source.

        before : typing.Optional[str]
            Job ID cursor for pagination. Returns jobs that come before this job ID in the specified sort order

        after : typing.Optional[str]
            Job ID cursor for pagination. Returns jobs that come after this job ID in the specified sort order

        limit : typing.Optional[int]
            Maximum number of jobs to return

        order : typing.Optional[JobsListRequestOrder]
            Sort order for jobs by creation time. 'asc' for oldest first, 'desc' for newest first

        order_by : typing.Optional[typing.Literal["created_at"]]
            Field to sort by

        active : typing.Optional[bool]
            Filter for active jobs.

        ascending : typing.Optional[bool]
            Whether to sort jobs oldest to newest (True, default) or newest to oldest (False). Deprecated in favor of order field.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Job]
            Successful Response

        Examples
        --------
        from letta_client import Letta

        client = Letta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )
        client.jobs.list(
            source_id="source_id",
            before="before",
            after="after",
            limit=1,
            order="asc",
            active=True,
            ascending=True,
        )
        """
        _response = self._raw_client.list(
            source_id=source_id,
            before=before,
            after=after,
            limit=limit,
            order=order,
            order_by=order_by,
            active=active,
            ascending=ascending,
            request_options=request_options,
        )
        return _response.data

    def list_active(
        self,
        *,
        source_id: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        ascending: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Job]:
        """
        List all active jobs.

        Parameters
        ----------
        source_id : typing.Optional[str]
            Only list jobs associated with the source.

        before : typing.Optional[str]
            Cursor for pagination

        after : typing.Optional[str]
            Cursor for pagination

        limit : typing.Optional[int]
            Limit for pagination

        ascending : typing.Optional[bool]
            Whether to sort jobs oldest to newest (True, default) or newest to oldest (False)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Job]
            Successful Response

        Examples
        --------
        from letta_client import Letta

        client = Letta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )
        client.jobs.list_active(
            source_id="source_id",
            before="before",
            after="after",
            limit=1,
            ascending=True,
        )
        """
        _response = self._raw_client.list_active(
            source_id=source_id,
            before=before,
            after=after,
            limit=limit,
            ascending=ascending,
            request_options=request_options,
        )
        return _response.data

    def retrieve(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Get the status of a job.

        Parameters
        ----------
        job_id : str
            The ID of the job in the format 'job-<uuid4>'

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            Successful Response

        Examples
        --------
        from letta_client import Letta

        client = Letta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )
        client.jobs.retrieve(
            job_id="job-123e4567-e89b-42d3-8456-426614174000",
        )
        """
        _response = self._raw_client.retrieve(job_id, request_options=request_options)
        return _response.data

    def delete(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Delete a job by its job_id.

        Parameters
        ----------
        job_id : str
            The ID of the job in the format 'job-<uuid4>'

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            Successful Response

        Examples
        --------
        from letta_client import Letta

        client = Letta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )
        client.jobs.delete(
            job_id="job-123e4567-e89b-42d3-8456-426614174000",
        )
        """
        _response = self._raw_client.delete(job_id, request_options=request_options)
        return _response.data

    def cancel_job(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Cancel a job by its job_id.

        This endpoint marks a job as cancelled, which will cause any associated
        agent execution to terminate as soon as possible.

        Parameters
        ----------
        job_id : str
            The ID of the job in the format 'job-<uuid4>'

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            Successful Response

        Examples
        --------
        from letta_client import Letta

        client = Letta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )
        client.jobs.cancel_job(
            job_id="job-123e4567-e89b-42d3-8456-426614174000",
        )
        """
        _response = self._raw_client.cancel_job(job_id, request_options=request_options)
        return _response.data


class AsyncJobsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawJobsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawJobsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawJobsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        source_id: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        order: typing.Optional[JobsListRequestOrder] = None,
        order_by: typing.Optional[typing.Literal["created_at"]] = None,
        active: typing.Optional[bool] = None,
        ascending: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Job]:
        """
        List all jobs.

        Parameters
        ----------
        source_id : typing.Optional[str]
            Only list jobs associated with the source.

        before : typing.Optional[str]
            Job ID cursor for pagination. Returns jobs that come before this job ID in the specified sort order

        after : typing.Optional[str]
            Job ID cursor for pagination. Returns jobs that come after this job ID in the specified sort order

        limit : typing.Optional[int]
            Maximum number of jobs to return

        order : typing.Optional[JobsListRequestOrder]
            Sort order for jobs by creation time. 'asc' for oldest first, 'desc' for newest first

        order_by : typing.Optional[typing.Literal["created_at"]]
            Field to sort by

        active : typing.Optional[bool]
            Filter for active jobs.

        ascending : typing.Optional[bool]
            Whether to sort jobs oldest to newest (True, default) or newest to oldest (False). Deprecated in favor of order field.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Job]
            Successful Response

        Examples
        --------
        import asyncio

        from letta_client import AsyncLetta

        client = AsyncLetta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.jobs.list(
                source_id="source_id",
                before="before",
                after="after",
                limit=1,
                order="asc",
                active=True,
                ascending=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            source_id=source_id,
            before=before,
            after=after,
            limit=limit,
            order=order,
            order_by=order_by,
            active=active,
            ascending=ascending,
            request_options=request_options,
        )
        return _response.data

    async def list_active(
        self,
        *,
        source_id: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        ascending: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Job]:
        """
        List all active jobs.

        Parameters
        ----------
        source_id : typing.Optional[str]
            Only list jobs associated with the source.

        before : typing.Optional[str]
            Cursor for pagination

        after : typing.Optional[str]
            Cursor for pagination

        limit : typing.Optional[int]
            Limit for pagination

        ascending : typing.Optional[bool]
            Whether to sort jobs oldest to newest (True, default) or newest to oldest (False)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Job]
            Successful Response

        Examples
        --------
        import asyncio

        from letta_client import AsyncLetta

        client = AsyncLetta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.jobs.list_active(
                source_id="source_id",
                before="before",
                after="after",
                limit=1,
                ascending=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_active(
            source_id=source_id,
            before=before,
            after=after,
            limit=limit,
            ascending=ascending,
            request_options=request_options,
        )
        return _response.data

    async def retrieve(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Get the status of a job.

        Parameters
        ----------
        job_id : str
            The ID of the job in the format 'job-<uuid4>'

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            Successful Response

        Examples
        --------
        import asyncio

        from letta_client import AsyncLetta

        client = AsyncLetta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.jobs.retrieve(
                job_id="job-123e4567-e89b-42d3-8456-426614174000",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.retrieve(job_id, request_options=request_options)
        return _response.data

    async def delete(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Delete a job by its job_id.

        Parameters
        ----------
        job_id : str
            The ID of the job in the format 'job-<uuid4>'

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            Successful Response

        Examples
        --------
        import asyncio

        from letta_client import AsyncLetta

        client = AsyncLetta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.jobs.delete(
                job_id="job-123e4567-e89b-42d3-8456-426614174000",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(job_id, request_options=request_options)
        return _response.data

    async def cancel_job(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Cancel a job by its job_id.

        This endpoint marks a job as cancelled, which will cause any associated
        agent execution to terminate as soon as possible.

        Parameters
        ----------
        job_id : str
            The ID of the job in the format 'job-<uuid4>'

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            Successful Response

        Examples
        --------
        import asyncio

        from letta_client import AsyncLetta

        client = AsyncLetta(
            project="YOUR_PROJECT",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.jobs.cancel_job(
                job_id="job-123e4567-e89b-42d3-8456-426614174000",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.cancel_job(job_id, request_options=request_options)
        return _response.data
