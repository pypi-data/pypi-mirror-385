# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel


class TemplatesGetTemplateSnapshotResponseAgentsItemToolRulesItemChildOutputMapping(UncheckedBaseModel):
    tool_name: str
    type: typing.Optional[typing.Literal["conditional"]] = None
    prompt_template: typing.Optional[str] = None
    default_child: typing.Optional[str] = None
    child_output_mapping: typing.Dict[str, str]
    require_output_mapping: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
