standards:
  id: adri_execution_standard
  name: ADRI Execution Standard
  version: 1.0.0
  authority: ADRI Framework
  description: |
    Standard for validating workflow execution metadata.
    This standard defines the required structure for workflow_context dictionaries
    passed to ADRI for workflow orchestration integration.

    ADRI validates its own execution metadata using this standard before logging,
    demonstrating recursive application of the ADRI validation principle.

record_identification:
  primary_key_fields:
    - run_id
    - step_id
  strategy: primary_key_with_fallback

requirements:
  overall_minimum: 90.0

  dimension_requirements:
    validity:
      weight: 1.0
      minimum_score: 85.0
      scoring:
        rule_weights:
          type: 0.2
          pattern: 0.4
          numeric_bounds: 0.4

  field_requirements:
    # Core workflow identification
    run_id:
      type: string
      nullable: false
      pattern: '^run_[0-9]{8}_[0-9]{6}_[a-f0-9]{8}$'
      description: "Format: run_YYYYMMDD_HHMMSS_randomhex (e.g., run_20250107_143022_a1b2c3d4)"

    workflow_id:
      type: string
      nullable: false
      description: "Identifier for the workflow template/definition"

    workflow_version:
      type: string
      nullable: false
      description: "Version of the workflow definition (e.g., '1.0.0', 'v2.3')"

    # Step identification
    step_id:
      type: string
      nullable: false
      description: "Identifier for the current step in the workflow"

    step_sequence:
      type: integer
      nullable: false
      min_value: 1
      max_value: 10000
      description: "Sequential number of this step in the workflow (1-based)"

    # Temporal context
    run_at_utc:
      type: string
      nullable: false
      pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}'
      description: "ISO 8601 timestamp (e.g., '2025-01-07T14:30:22Z' or '2025-01-07T14:30:22.123Z')"

    # Optional data source information (basic)
    data_source_type:
      type: string
      nullable: true
      valid_values:
        - verodat_query
        - file
        - previous_step
        - api
        - manual
        - other
      description: "Type of data source for this step"

metadata:
  created_by: ADRI Development Team
  created_date: 2025-01-07
  purpose: workflow_orchestration_metadata_validation
  tags:
    - workflow_orchestration
    - metadata_validation
    - recursive_validation
    - adri_internal

  usage_guidelines: |
    This standard validates workflow context metadata before ADRI logs it.

    USAGE IN WORKFLOW ORCHESTRATION:

    The workflow runner passes context to ADRI via the workflow_context parameter:

    ```python
    from adri import adri_protected

    workflow_context = {
        "run_id": "run_20250107_143022_a1b2c3d4",
        "workflow_id": "credit_approval_workflow",
        "workflow_version": "2.1.0",
        "step_id": "risk_assessment",
        "step_sequence": 3,
        "run_at_utc": "2025-01-07T14:30:22Z"
    }

    @adri_protected(
        standard="ai_decision_step_standard",
        data_param="decision_data",
        workflow_context=workflow_context  # Validated against THIS standard
    )
    def make_credit_decision(decision_data):
        # AI agent makes decision
        return decision_output
    ```

    VALIDATION FLOW:

    1. Workflow runner creates workflow_context dict
    2. ADRI receives workflow_context parameter
    3. ADRI validates context against adri_execution_standard
    4. If valid: ADRI logs context and continues with data validation
    5. If invalid: ADRI raises error with specific field violations

    FIELD DESCRIPTIONS:

    run_id:
      - Unique identifier for this specific workflow run
      - Format enforced by pattern: run_YYYYMMDD_HHMMSS_randomhex
      - Example: "run_20250107_143022_a1b2c3d4"

    workflow_id:
      - Identifier for the workflow template/definition
      - Same workflow_id across different runs of same workflow
      - Example: "credit_approval_workflow", "invoice_processing"

    workflow_version:
      - Version of the workflow definition
      - Tracks which version of workflow logic was used
      - Example: "1.0.0", "v2.3", "2023-Q4"

    step_id:
      - Identifier for current step in workflow
      - Unique within workflow definition
      - Example: "risk_assessment", "credit_decision", "notification"

    step_sequence:
      - Sequential position of step in workflow execution
      - 1-based numbering (first step = 1)
      - Allows ordering of executions in audit trail

    run_at_utc:
      - ISO 8601 timestamp when step was executed
      - Must be in UTC timezone
      - Example: "2025-01-07T14:30:22Z" or "2025-01-07T14:30:22.123456Z"

    data_source_type: (optional)
      - High-level categorization of data source
      - For detailed provenance, use data_provenance parameter
      - Useful for quick filtering in query interface

    RECURSIVE VALIDATION PRINCIPLE:

    ADRI validates its own metadata using ADRI standards!

    This demonstrates the power of standard-driven validation:
    - No hardcoded validation logic in Python
    - Context structure defined declaratively in YAML
    - Easy to extend by adding fields to this standard
    - Testable like any other ADRI standard
    - Self-documenting through standard metadata

    INTEGRATION WITH OTHER FEATURES:

    - Data Provenance: Use data_provenance parameter for detailed source tracking
    - Reasoning Context: Links AI prompts/responses to workflow executions
    - Query Interface: Query logs by run_id, workflow_id, or step_id
    - Enhanced Logs: Execution_id derived from run_id + step_id

    ERROR HANDLING:

    If workflow_context fails validation against this standard, ADRI will:
    1. Raise InvalidWorkflowContextError with specific field violations
    2. Include the failed assessment in error message
    3. NOT proceed with data validation or logging
    4. Allow workflow runner to fix context and retry

    BACKWARD COMPATIBILITY:

    workflow_context parameter is OPTIONAL:
    - If not provided: ADRI works exactly as before (no workflow integration)
    - If provided: ADRI validates and logs workflow execution context
    - Existing code without workflow_context continues to work unchanged
