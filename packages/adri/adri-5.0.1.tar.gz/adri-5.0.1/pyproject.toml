[build-system]
requires = ["setuptools>=61.0", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adri"
dynamic = ["version"]
description = "The missing data layer for AI agents - Auto-validates data quality with one decorator. Works with any framework."
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Thomas Russell", email = "adri@verodat.com"}
]
maintainers = [
    {name = "Thomas Russell", email = "adri@verodat.com"}
]
keywords = ["data-quality", "ai", "validation", "assessment", "reliability"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.10"
dependencies = [
    "pandas>=2.2.2",
    "pyyaml>=6.0.2",
    "click>=8.1.7",
    "pyarrow>=16.1.0",  # For parquet support
    "tabulate>=0.9.0",  # For benchmark comparison output
    "requests>=2.32.3",  # For HTTP requests in verodat_logger
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0",
    "pytest-timeout>=2.1.0",  # For test timeout support
    "pytest-mock>=3.12.0",  # Enhanced mocking for quality framework
    "psutil>=5.9.0",  # Memory monitoring for performance tests
    "pre-commit>=3.0.0",  # For pre-commit hooks
    "black==25.9.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "mypy>=1.11.2",
    "pylint>=3.2.6",
    "bandit[toml]>=1.7.10",
    "safety>=3.2.8",
    "pip-audit>=2.7.3",
    "types-requests>=2.28.0",  # Type stubs for requests library
]
test = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0",
    "pytest-timeout>=2.1.0",  # For test timeout support
    "pytest-mock>=3.12.0",  # Enhanced mocking for quality framework
    "psutil>=5.9.0",  # Memory monitoring for performance tests
    "pyarrow>=14.0.0",  # For parquet support in tests
    "tabulate>=0.9.0",  # For benchmark comparison script
]
security = [
    "bandit[toml]>=1.7.10",
    "safety>=3.2.8",
    "pip-audit>=2.7.3",
]

[project.urls]
Homepage = "https://github.com/adri-standard/adri"
Documentation = "https://github.com/adri-standard/adri/blob/main/README.md"
Repository = "https://github.com/adri-standard/adri"
Issues = "https://github.com/adri-standard/adri/issues"
Changelog = "https://github.com/adri-standard/adri/blob/main/CHANGELOG.md"

[project.scripts]
adri = "adri.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["adri*"]
exclude = [
    "development*",
    "*_example.py",
    "basic_example.py",
    "test_standalone*",
    "tests*",
    "examples*",
    "docs*",
    "tools*",
    "htmlcov*",
    "logs*",
    "*_test_env*"
]

[tool.setuptools.package-data]
adri = [
    "*.yaml",
    "*.yml",
    "templates/*.yaml",
    "standards/*.yaml",
    "standards/*.yml"
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["adri"]
known_third_party = ["pandas", "yaml", "click", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_alphabetical_sort_within_sections = true

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "yaml.*",
    "setuptools.*",
]
ignore_missing_imports = true

# pylint configuration
[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "duplicate-code",
    "fixme",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 8
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60

# bandit configuration
[tool.bandit]
exclude_dirs = ["development"]
skips = ["B101", "B601", "B110"]  # Skip assert_used, shell_injection_process_args, and try_except_pass

# pytest configuration - Modern ADRI Test Framework (80% Coverage Target)
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/adri",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=json",
    "--cov-fail-under=10",  # Current realistic coverage target (adjusted from 80%)
    "--tb=short",  # Shorter traceback format for readability
    # Removed --maxfail=5 to ensure ALL 863 tests execute in CI, regardless of failures
    "-v",  # Verbose output for quality framework reporting
]
testpaths = ["tests"]
console_output_style = "progress"
markers = [
    # Test execution categories (Quality Framework)
    "unit: Unit test - individual component functionality",
    "integration: Integration test - component interactions",
    "performance: Performance test - speed and efficiency",
    "error_handling: Error handling test - failure scenarios",
    "end_to_end: End-to-end test - complete workflows",
    "benchmark: Performance benchmarks with pytest-benchmark",

    # Component quality targets (Architecture-based)
    "business_critical: Business critical component (90%+ quality target)",
    "system_infrastructure: System infrastructure component (80%+ quality target)",
    "data_processing: Data processing component (75%+ quality target)",
    "supporting_infrastructure: Supporting infrastructure component",

    # Legacy compatibility markers (maintained during transition)
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "quick: marks tests as quick/fast",
    "stress: marks tests with extreme conditions",
    "timeout: marks tests with custom timeout values",
    "ci_skip: marks tests to skip in CI environment",
    "ci_only: marks tests that should only run in CI environments",
    "audit: marks tests for audit logging functionality",
    "csv_output: marks tests for CSV output functionality",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*pkg_resources.*:DeprecationWarning",  # Common in CI environments
]
# Timeout settings for comprehensive testing (in seconds)
timeout = 60  # Extended timeout for quality framework tests
timeout_method = "thread"  # Use thread-based timeout

# Quality framework specific configuration
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Enhanced test configuration for quality framework
norecursedirs = [
    "tests/fixtures/__pycache__",
    "tests/coverage",
]

# coverage configuration
[tool.coverage.run]
source = ["src/adri"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/setup.py",
    "examples/*",           # EXCLUDE examples from coverage
    "development/*",        # EXCLUDE development tools
    "tools/*",             # EXCLUDE utility tools
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "tests/coverage/html"

[tool.coverage.xml]
output = "tests/coverage/coverage.xml"

[tool.coverage.json]
output = "tests/coverage/coverage.json"

# Ruff configuration for modern Python linting
[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
    "venv",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "PL",   # pylint
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "PLR0913"]
"examples/*" = ["PLR2004", "S101"]

# setuptools_scm configuration
[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "node-and-date"
write_to = "src/adri/_version.py"
fallback_version = "5.0.0"
