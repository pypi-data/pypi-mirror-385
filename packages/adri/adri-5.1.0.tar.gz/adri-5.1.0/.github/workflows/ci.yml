name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Check if this is a docs-only change
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      docs-only: ${{ steps.filter.outputs.docs-only }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check changed files
        id: filter
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            FILES=$(git diff --name-only HEAD^ HEAD)
          fi

          echo "Changed files:"
          echo "$FILES"

          # Check if ALL changes are documentation files
          DOCS_ONLY=true
          while IFS= read -r file; do
            # Documentation files
            if [[ "$file" =~ ^(README\.md|CHANGELOG\.md|CONTRIBUTING\.md|QUICKSTART\.md|LICENSE|CODE_OF_CONDUCT\.md)$ ]] || \
               [[ "$file" =~ ^docs/ ]] || \
               [[ "$file" =~ ^examples/README\.md$ ]] || \
               [[ "$file" =~ ^\.github/(ISSUE_TEMPLATE|PULL_REQUEST_TEMPLATE)/ ]] || \
               [[ "$file" =~ ^implementation_plan\.md$ ]]; then
              continue
            else
              # Non-documentation file found
              DOCS_ONLY=false
              break
            fi
          done <<< "$FILES"

          echo "docs-only=$DOCS_ONLY" >> $GITHUB_OUTPUT
          echo "Documentation-only changes: $DOCS_ONLY"

  # Lightweight validation for docs-only changes
  validate-docs:
    needs: check-changes
    if: needs.check-changes.outputs.docs-only == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate documentation structure
        run: |
          echo "‚úÖ Checking required documentation files..."

          REQUIRED_FILES=(
            "README.md"
            "QUICKSTART.md"
            "CHANGELOG.md"
            "CONTRIBUTING.md"
            "docs/GETTING_STARTED.md"
            "docs/HOW_IT_WORKS.md"
            "docs/FAQ.md"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done

          echo "‚úÖ All required documentation files present"

      - name: Check for broken internal links
        run: |
          echo "‚úÖ Checking internal links..."
          # Simple grep-based check for markdown links
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Checking $file"
            # Extract markdown links and check if files exist
            grep -oP '\[.*?\]\(\K[^)]+(?=\))' "$file" | while read link; do
              # Skip external links
              if [[ "$link" =~ ^https?:// ]]; then
                continue
              fi
              # Skip anchors
              if [[ "$link" =~ ^# ]]; then
                continue
              fi
              # Check if file exists (relative to file location)
              dir=$(dirname "$file")
              if [ ! -f "$dir/$link" ] && [ ! -f "$link" ]; then
                echo "‚ö†Ô∏è  Potentially broken link in $file: $link"
              fi
            done
          done
          echo "‚úÖ Internal link check complete"

      - name: Success message
        run: |
          echo "üéâ Documentation validation passed!"
          echo "This is a documentation-only change - skipping code tests."

  # Full test suite for code changes
  test:
    needs: check-changes
    if: needs.check-changes.outputs.docs-only == 'false'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: |
          pytest tests/ -v --cov=adri --cov-report=xml --cov-report=term

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Check code style
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          flake8 src/adri/

      - name: Check formatting
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          black --check src/adri/

  # Build and test package installation
  build-test:
    needs: check-changes
    if: needs.check-changes.outputs.docs-only == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Test install from built package
        run: |
          pip install dist/*.whl
          python -c "import adri; print(f'‚úÖ ADRI version {adri.__version__} installed successfully')"

  # Security scanning
  security:
    needs: check-changes
    if: needs.check-changes.outputs.docs-only == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r src/adri/ -c pyproject.toml

      - name: Run safety check on dependencies
        run: |
          pip install safety
          safety check --json || echo "‚ö†Ô∏è  Safety check completed with warnings"

  # Validate .gitignore protection
  validate-gitignore-protection:
    needs: check-changes
    if: needs.check-changes.outputs.docs-only == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate .gitignore protects sensitive files
        run: |
          echo "‚úÖ Checking .gitignore protection..."

          # Check that .gitignore exists
          if [ ! -f .gitignore ]; then
            echo "‚ùå .gitignore file not found"
            exit 1
          fi

          # Required patterns in .gitignore (or their equivalents)
          # Check __pycache__
          if grep -qE "__pycache__|\.pyc" .gitignore; then
            echo "‚úÖ Protected: Python bytecode (__pycache__ or *.pyc)"
          else
            echo "‚ùå Missing protection for: __pycache__ or *.pyc"
            exit 1
          fi

          # Check .pytest_cache
          if grep -q ".pytest_cache" .gitignore; then
            echo "‚úÖ Protected: .pytest_cache"
          else
            echo "‚ùå Missing protection for: .pytest_cache"
            exit 1
          fi

          # Check .coverage
          if grep -q ".coverage" .gitignore; then
            echo "‚úÖ Protected: .coverage"
          else
            echo "‚ùå Missing protection for: .coverage"
            exit 1
          fi

          # Check .egg-info
          if grep -q ".egg-info" .gitignore; then
            echo "‚úÖ Protected: .egg-info"
          else
            echo "‚ùå Missing protection for: .egg-info"
            exit 1
          fi

          # Check .env
          if grep -q ".env" .gitignore; then
            echo "‚úÖ Protected: .env"
          else
            echo "‚ùå Missing protection for: .env"
            exit 1
          fi

          # Check venv
          if grep -q "venv" .gitignore; then
            echo "‚úÖ Protected: venv"
          else
            echo "‚ùå Missing protection for: venv"
            exit 1
          fi

          echo "‚úÖ All required patterns protected"

  # Validate root structure
  validate-root-structure:
    needs: check-changes
    if: needs.check-changes.outputs.docs-only == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate project root structure
        run: |
          echo "‚úÖ Checking project structure..."

          # Required root files
          REQUIRED_FILES=(
            "README.md"
            "LICENSE"
            "pyproject.toml"
            ".gitignore"
            "CONTRIBUTING.md"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found: $file"
            else
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
          done

          # Required directories
          REQUIRED_DIRS=(
            "src/adri"
            "tests"
            "docs"
            ".github/workflows"
          )

          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Found: $dir/"
            else
              echo "‚ùå Missing required directory: $dir/"
              exit 1
            fi
          done

          echo "‚úÖ Project structure validated"

  # Status check that always runs
  ci-status:
    needs: [check-changes, validate-docs, test, build-test, security, validate-gitignore-protection, validate-root-structure]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.validate-docs.result }}" == "success" ] || [ "${{ needs.test.result }}" == "success" ]; then
            echo "‚úÖ CI passed"
            exit 0
          elif [ "${{ needs.validate-docs.result }}" == "skipped" ] && [ "${{ needs.test.result }}" == "skipped" ]; then
            echo "‚ö†Ô∏è  Both jobs skipped - this shouldn't happen"
            exit 1
          else
            echo "‚ùå CI failed"
            exit 1
          fi
