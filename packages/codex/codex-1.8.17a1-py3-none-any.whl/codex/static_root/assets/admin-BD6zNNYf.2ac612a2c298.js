import{cP as e,cQ as c,b4 as l,E as o,H as m}from"./main-BYF-1NPs.js";const p=r=>e.post("/admin/user",r),f=()=>{const r=c();return e.get("/admin/user",{params:r})},h=(r,t)=>e.put(`/admin/user/${r}/`,t),b=(r,t)=>e.put(`/admin/user/${r}/password`,t),g=r=>e.delete(`/admin/user/${r}/`),y=r=>e.post("/admin/group",r),w=()=>{const r=c();return e.get("/admin/group",{params:r})},S=(r,t)=>e.put(`/admin/group/${r}/`,t),A=r=>e.delete(`/admin/group/${r}/`),L=r=>e.post("/admin/library",r),U=()=>{const r=c();return e.get("/admin/library",{params:r})},T=(r,t)=>e.put(`/admin/library/${r}/`,t),P=r=>e.delete(`/admin/library/${r}/`),F=(r,t)=>{const s={path:r,showHidden:t};return e.get("/admin/folders",{params:s})},E=()=>{const r=c();return e.get("/admin/failed-import",{params:r})},k=()=>{const r=c();return e.get("/admin/flag",{params:r})},I=(r,t)=>e.put(`/admin/flag/${r}/`,t),$=async r=>await e.post("/admin/librarian/task",r),G=()=>{const r={ts:Date.now()};return e.get("/admin/librarian/status",{params:r})},R=()=>{const r={ts:Date.now()};return e.get("/admin/stats",{params:r})},O=async()=>await e.put("/admin/api_key"),n={changeUserPassword:b,createGroup:y,createLibrary:L,createUser:p,deleteLibrary:P,deleteGroup:A,deleteUser:g,getFailedImports:E,getFlags:k,getFolders:F,getGroups:w,getLibrarianStatuses:G,getLibraries:U,getStats:R,getUsers:f,postLibrarianTask:$,updateAPIKey:O,updateFlag:I,updateGroup:S,updateLibrary:T,updateUser:h},j=r=>console.warn(r),u={LibrarianStatus:"LibrarianStatuses",Library:"Libraries"};Object.freeze(u);const v=["Users","Groups","Libraries","Flags","Tasks","Stats"];Object.freeze(v);const C=r=>r in u?u[r]:r+"s",x=l("admin",{state:()=>({librarianStatuses:[],unseenFailedImports:!1,users:[],groups:[],libraries:void 0,failedImports:[],flags:[],folderPicker:{root:void 0,folders:[]},timestamps:{},stats:void 0,activeTab:"Libraries"}),getters:{isUserAdmin(){return m().isUserAdmin},normalLibraries(){const r=[];if(this.libraries)for(const t of this.libraries)t.coversOnly||r.push(t);return r},customCoverLibraries(){const r=[];if(this.libraries)for(const t of this.libraries)t.coversOnly&&r.push(t);return r},doNormalComicLibrariesExist(){return Object.keys(this.normalLibraries).length>0}},actions:{async loadTable(r){if(!this.isUserAdmin)return!1;const t=C(r),s="get"+t;await n[s]().then(a=>{const i=t.charAt(0).toLowerCase()+t.slice(1);return Array.isArray(a.data)?(this[i]=a.data,!0):(console.warn(i,"response not an array"),!1)}).catch(j)},loadTables(r){for(const t of r)this.loadTable(t)},async loadFolders(r,t){if(!this.isUserAdmin)return!1;await n.getFolders(r,t).then(s=>(this.folderPicker=s.data,!0)).catch(o().setErrors)},async clearFolders(r){if(!this.isUserAdmin)return!1;this.folderPicker={root:r,folders:[""]}},async createRow(r,t){if(!this.isUserAdmin)return!1;const s="create"+r,a=o();await n[s](t).then(()=>(a.clearErrors(),this.loadTable(r))).catch(a.setErrors)},async updateRow(r,t,s){if(!this.isUserAdmin)return!1;const a="update"+r,i=o();await n[a](t,s).then(()=>(i.clearErrors(),this.loadTable(r))).catch(i.setErrors)},async changeUserPassword(r,t){if(!this.isUserAdmin)return!1;const s=o();await n.changeUserPassword(r,t).then(a=>(s.setSuccess(a.data.detail),!0)).catch(s.setErrors)},async deleteRow(r,t){if(!this.isUserAdmin)return!1;const s="delete"+r,a=o();await n[s](t).then(()=>(a.clearErrors(),this.loadTable(r))).catch(a.setErrors)},async librarianTask(r,t,s){if(!this.isUserAdmin)return!1;const a=o();await n.postLibrarianTask({task:r,libraryId:s}).then(()=>a.setSuccess(t)).catch(a.setErrors)},nameSet(r,t,s,a){const i=new Set;if(r)for(const d of r)(!a||!s||d[t]!==s[t])&&i.add(d[t]);return i},async loadStats(){await n.getStats().then(r=>(this.stats=r.data,!0)).catch(console.warn)},async updateAPIKey(){await n.updateAPIKey().then(()=>!0).catch(console.warn)}}});export{v as TABS,x as useAdminStore};
