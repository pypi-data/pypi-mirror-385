Metadata-Version: 2.4
Name: dilib
Version: 1.1.0
Summary: Dependency injection (DI) library for Python
Project-URL: Homepage, https://github.com/ansatzcapital/dilib
Project-URL: Documentation, https://ansatzcapital.github.io/dilib
Project-URL: Packaging, https://pypi.org/project/dilib
Project-URL: Source, https://github.com/ansatzcapital/dilib
Project-URL: Tracker, https://github.com/ansatzcapital/dilib/issues
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
License-File: LICENSE
Keywords: dependency injection,design patterns,di,inversion of control,ioc
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3.14
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Requires-Dist: typing-extensions>=4.4.0
Description-Content-Type: text/markdown

# dilib

Dependency injection (DI) library for Python

[![PyPI version](https://badge.fury.io/py/dilib.svg)](https://badge.fury.io/py/dilib)
[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/dilib.svg)](https://pypi.python.org/pypi/dilib/)
[![GitHub Actions (Tests)](https://github.com/ansatzcapital/dilib/workflows/Test/badge.svg)](https://github.com/ansatzcapital/dilib)

## Installation

`dilib` is available on [PyPI](https://pypi.org/project/dilib/):

```bash
pip install dilib
```

## Documentation

Documentation, design principles, and patterns are available [here](https://ansatzcapital.github.io/dilib).

Examples are available [here](https://github.com/ansatzcapital/dilib/tree/main/examples).

## About DI

[Dependency injection](https://en.wikipedia.org/wiki/Dependency_injection)
can be thought of as a **software engineering pattern**
as well as a **framework**. The goal is to describe and instantiate objects
in a more composable, modular, and uniform way.

The **pattern** is: when creating objects, always express what you depend on,
and let someone else give you those dependencies. (This is sometimes
referred to as the "Hollywood principle": "Don't call us; we'll call you." 😎)

The **framework** is meant to ease the inevitable boilerplate
that occurs when following this pattern, and `dilib` is one such framework.
It makes it easier to describe a large graph of dependent objects
and then instantiate only the objects you need as you need them.

## Quick Start

The framework takes a 3-step approach to configuring and instantiating objects.
Think of it like [mise en place](https://en.wikipedia.org/wiki/Mise_en_place),
a method of cooking where you prepare everything in its place
before taking actions.

The 3 steps are:

1. 🥣 **Prepare:** Describe the recipe of how objects are to be created and how
they depend on each via **specs** inside **configs**
2. 🔄 **Replace:** Optionally, perturb the configs
3. 🔥 **Create:** Create the **container**, which lazily instantiates only the
objects needed per user request

These are the 3 major components needed for these 3 steps:

- **Specs**: These are the recipes that
describe how to instantiate the object when needed later. Common specs
include:
    - `dilib.Object(obj)`: Pass through precreated object (often used
    for primitive config values).
    - `dilib.Prototype(cls, *args, **kwargs)`: Whenever the container
    is asked to create this object, call `cls(*args, **kwargs)`
    each time (with no caching).
    - `dilib.Singleton(cls, *args, **kwargs)`: Same as `Prototype`,
    except the result is cached per config field per container.
    - `dilib.Forward(other_spec)`: Forward this request to another spec.
    Think of it like a [mux](https://en.wikipedia.org/wiki/Multiplexer)
    or control switch.
    - For more, see [Overview](https://ansatzcapital.github.io/dilib/latest/overview.html).
- `dilib.Config`: Configs give names to specs and also provide a
way to describe how the specs depend on each other. Configs can nest
and reference each other via **child configs**, defined in the same
syntax as specs. Configs can be arbitrarily perturbed programmatically.
- `dilib.Container`: This is the chef, i.e., the object retriever.
It's in charge of *materializing*/*instantiating* the aforementioned
delayed specs into actual instances and caching these objects when required,
(i.e., in the case of `dilib.Singleton`).

```python
from __future__ import annotations

import abc
import dataclasses

import dilib


# API
class Engine(abc.ABC):
    pass


# An implementation of the engine API that makes network calls
@dataclasses.dataclass(frozen=True)
class DBEngine(Engine):
    address: str
    token: str | None = None


# An implementation of the engine API designed for testing
class MockEngine(Engine):
     pass


# An object that depends on having an instance of an `Engine`
@dataclasses.dataclass(frozen=True)
class Car:
    # Takes an `Engine` instance via "constructor injection"
    engine: Engine


class EngineConfig(dilib.Config):
    # Glboal inputs are provided by the config **user**
    db_address = dilib.GlobalInput(str, default="some-db-address")

    # Local inputs are provided by downstream config **author**
    token_prefix = dilib.LocalInput(str)

    # Simple primitives must be wrapped in `Object`
    token_suffix = dilib.Object(".bar")

    # Because this lambda is wrapped in a `Prototype`, it will
    # only be called if required. Note how specs depend on other specs
    # explicitly via named aliases.
    token = dilib.Prototype(lambda x, y: x + y, x=token_prefix, y=token_suffix)

    # `Singleton` is very much like `Prototype`, except the container
    # will cache this instance by the key `db_engine0`
    db_engine0 = dilib.Singleton(DBEngine, db_address, token=token)

    # Alternate engine spec
    db_engine1 = dilib.Singleton(DBEngine, db_address)

    # Forward spec resolution to the target spec.
    # Note how we widen the type of the object from `DBEngine` to `Engine`.
    engine: Engine = dilib.Forward(db_engine0)


class CarConfig(dilib.Config):
    # Configs can depend on other configs. Here, `CarConfig`
    # depends on an `EngineConfig` (with local input value set).
    engine_config = EngineConfig(token_prefix="baz")

    # The idea is to reach into child configs and get whatever objects you
    # need from there
    car = dilib.Singleton(Car, engine_config.engine)


# Get instance of root config (with global input value set)
car_config = dilib.get_config(CarConfig, db_address="another-db-address")

# Perturb here as you'd like. Note that the new object
# doesn't need to have been set up by the config author beforehand.
car_config.engine_config.engine = dilib.Singleton(MockEngine)

# Create container from config
container = dilib.get_container(car_config)

# Retrieve objects from container (some of which are cached inside),
# all with IDE auto-complete and static type checking
assert container.config.engine_config.db_address == "another-db-address"
assert isinstance(container.config.engine_config.engine, MockEngine)
assert isinstance(container.config.car, Car)
assert container.config.car is container.car  # Because it's a Singleton
```

Notes:

- `Car` *takes in* an `Engine` via its constructor
(known as ["constructor injection"](https://en.wikipedia.org/wiki/Dependency_injection#Constructor_injection)),
instead of making or getting one within itself.
- For this to work, `Car` cannot make any assumptions about
*what kind* of `Engine` it received. Different engines have different
constructor params but have the [same API and semantics](https://en.wikipedia.org/wiki/Liskov_substitution_principle).
- Both config wiring and `container.config` calls are all statically
type safe, meaning you should see auto-complete in your IDE and
everything should pass `mypy` and `pyright` checking.

## Features

### Overview

* 📇 **Global addressability:** `dilib` provides a way to map a
unique name to an object instance. E.g., with Python, you can come up
with a fully-qualified name of a class or symbol
(just `module_a.module_b.SomeClass`), but there is no natural parallel
for object *instances* (without resorting to global variables).
* ⧴ **Delayed instantiation:** If you're describing a very large graph
of objects, it's useful to delay instantiation such that you create
only the exact subgraph of objects required to fulfill the user's request
on the container. It's especially important that these instantiations
(which can have expensive compute or IO calls) not be done at import time.
* 🔄 **Ability to perturb with self-consistency guarantee:** Delayed
instantiation also provides a guarantee of self-consistency. If two or more
objects depend on a parameter, and that parameter is perturbed, you almost
certainly want both objects to see only the new value. By having a linear
set of steps to take--create config, perturb config, create container
(which *freezes* the config from further perturbations automatically)--you
know that all instantiations are performed exactly
after all perturbations have been performed.
See [below](#perturb-config-fields-with-ease).
* 🛠️ **Static auto-complete and type safety**: All attrs available
on a `container.config`, as well as specs and child configs,
are available statically to both the IDE and
any standard type checker like `mypy` and `pyright`.
Equivalent dynamic attrs for IPython/Jupyter sessions are also available.
All calls to specs like `dilib.Singleton`
are annotated with `ParamSpec`s, so static type checkers should
alert you if you get arg names wrong or mismatches in types.
* 🚫🌎 **Discourages global state:** Often, implementations
of the [singleton pattern](https://en.wikipedia.org/wiki/Singleton_pattern)
come with the baggage of global state. However, with `dilib`
(and DI in general), the lifecycle of an object is managed by the
authors of the config/bindings, not by the downstream clients of the object.
Thus, we can achieve a singleton lifecycle
with respect to all the objects in the *container*, instead of
with respect to all the objects in the *process*.
* ⌨️ **Optionally easier syntax:** If you don't mind "polluting" your object
model with references to the DI framework, you can opt into the easier
syntax mode, writing `MockEngine()` instead of `dilib.Singleton(MockEngine)`.
See [Easier syntax](https://ansatzcapital.github.io/dilib/latest/patterns.html#easier-syntax).

### Perturb Config Fields with Ease

A major goal of `dilib` is the ability to perturb any config field
and have a guarantee that, when instantiated, all objects that depend on
that field will see the same perturbed value.

This enables the user to easily perform param scans, integration tests,
meta-optimizers, and more, even with params that are deeply
embedded in the system. Furthermore, these can be performed in the
same process, side-by-side. E.g.:

```python
def get_container(
    db_address: str = "db-address",
    perturb_func: Callable[[CarConfig], None] | None = None,
) -> dilib.Container[CarConfig]:
    """Helper for users to get container instance.

    This should only be called at the application level, never by
    a function in a library.
    """

    config = dilib.get_config(CarConfig, db_address=db_address)

    if perturb_func is not None:
        perturb_func(config)

    return dilib.get_container(config)


def perturb_func_a(config: CarConfig) -> None:
    config.engine_config.token = "a"


def perturb_func_b(config: CarConfig) -> None:
    config.engine_config.token = "b"


# Create multiple containers for each perturbation
container_a = get_container(perturb_func=perturb_func_a)
container_b = get_container(perturb_func=perturb_func_b)

# Get cars corresponding to each perturbation, all in the same process space.
# No matter what object we get from `container_a`, it will only have been
# created using objects that have seen `token = "a"` perturbation.
car_a = container_a.config.car
car_b = container_a.config.car
```
