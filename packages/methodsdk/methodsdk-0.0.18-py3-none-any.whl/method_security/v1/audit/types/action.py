# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata


class Action_UserLogin(UniversalBaseModel):
    type: typing.Literal["userLogin"] = "userLogin"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Action_UserLogout(UniversalBaseModel):
    type: typing.Literal["userLogout"] = "userLogout"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Action_UserAccountCreation(UniversalBaseModel):
    type: typing.Literal["userAccountCreation"] = "userAccountCreation"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Action_UserAccountModification(UniversalBaseModel):
    type: typing.Literal["userAccountModification"] = "userAccountModification"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Action_UserAccountDeletion(UniversalBaseModel):
    type: typing.Literal["userAccountDeletion"] = "userAccountDeletion"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Action_AuditLogAccess(UniversalBaseModel):
    type: typing.Literal["auditLogAccess"] = "auditLogAccess"
    page_size: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="pageSize")] = None
    since: typing.Optional[dt.datetime] = None
    until: typing.Optional[dt.datetime] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Action = typing.Union[
    Action_UserLogin,
    Action_UserLogout,
    Action_UserAccountCreation,
    Action_UserAccountModification,
    Action_UserAccountDeletion,
    Action_AuditLogAccess,
]
