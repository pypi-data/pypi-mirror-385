# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Action,
        Action_AuditLogAccess,
        Action_UserAccountCreation,
        Action_UserAccountDeletion,
        Action_UserAccountModification,
        Action_UserLogin,
        Action_UserLogout,
        Actor,
        Actor_ServiceAccount,
        Actor_User,
        AuditEvent,
        AuditEventId,
        AuditEventsResponse,
        AuditLogAccess,
        Context,
        ExternalUserId,
        GetAuditEventsRequest,
        Group,
        GroupId,
        IpAddress,
        Resource,
        Resource_Group,
        Resource_UserAccount,
        ServiceAccount,
        ServiceAccountId,
        TenantId,
        User,
        UserAccount,
        UserAccountCreation,
        UserAccountDeletion,
        UserAccountModification,
        UserAgent,
        UserId,
        UserLogin,
        UserLogout,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "Action": ".types",
    "Action_AuditLogAccess": ".types",
    "Action_UserAccountCreation": ".types",
    "Action_UserAccountDeletion": ".types",
    "Action_UserAccountModification": ".types",
    "Action_UserLogin": ".types",
    "Action_UserLogout": ".types",
    "Actor": ".types",
    "Actor_ServiceAccount": ".types",
    "Actor_User": ".types",
    "AuditEvent": ".types",
    "AuditEventId": ".types",
    "AuditEventsResponse": ".types",
    "AuditLogAccess": ".types",
    "Context": ".types",
    "ExternalUserId": ".types",
    "GetAuditEventsRequest": ".types",
    "Group": ".types",
    "GroupId": ".types",
    "IpAddress": ".types",
    "Resource": ".types",
    "Resource_Group": ".types",
    "Resource_UserAccount": ".types",
    "ServiceAccount": ".types",
    "ServiceAccountId": ".types",
    "TenantId": ".types",
    "User": ".types",
    "UserAccount": ".types",
    "UserAccountCreation": ".types",
    "UserAccountDeletion": ".types",
    "UserAccountModification": ".types",
    "UserAgent": ".types",
    "UserId": ".types",
    "UserLogin": ".types",
    "UserLogout": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Action",
    "Action_AuditLogAccess",
    "Action_UserAccountCreation",
    "Action_UserAccountDeletion",
    "Action_UserAccountModification",
    "Action_UserLogin",
    "Action_UserLogout",
    "Actor",
    "Actor_ServiceAccount",
    "Actor_User",
    "AuditEvent",
    "AuditEventId",
    "AuditEventsResponse",
    "AuditLogAccess",
    "Context",
    "ExternalUserId",
    "GetAuditEventsRequest",
    "Group",
    "GroupId",
    "IpAddress",
    "Resource",
    "Resource_Group",
    "Resource_UserAccount",
    "ServiceAccount",
    "ServiceAccountId",
    "TenantId",
    "User",
    "UserAccount",
    "UserAccountCreation",
    "UserAccountDeletion",
    "UserAccountModification",
    "UserAgent",
    "UserId",
    "UserLogin",
    "UserLogout",
]
