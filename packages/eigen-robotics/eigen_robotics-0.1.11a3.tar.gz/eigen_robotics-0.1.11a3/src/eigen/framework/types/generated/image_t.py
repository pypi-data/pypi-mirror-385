"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class image_t(object):
    """ A representation of an image. """

    __slots__ = ["frame_name", "width", "height", "row_stride", "size", "data", "bigendian", "pixel_format", "channel_type", "compression_method"]

    __typenames__ = ["string", "int32_t", "int32_t", "int32_t", "int32_t", "byte", "boolean", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, ["size"], None, None, None, None]

    PIXEL_FORMAT_GRAY = 0
    """ enum for pixel_format. """
    PIXEL_FORMAT_RGB = 1
    PIXEL_FORMAT_BGR = 2
    PIXEL_FORMAT_RGBA = 3
    PIXEL_FORMAT_BGRA = 4
    PIXEL_FORMAT_DEPTH = 5
    PIXEL_FORMAT_LABEL = 6
    PIXEL_FORMAT_MASK = 7
    PIXEL_FORMAT_DISPARITY = 8
    PIXEL_FORMAT_BAYER_BGGR = 9
    PIXEL_FORMAT_BAYER_RGGB = 10
    PIXEL_FORMAT_BAYER_GBRG = 11
    PIXEL_FORMAT_BAYER_GRBG = 12
    PIXEL_FORMAT_INVALID = -1
    CHANNEL_TYPE_INT8 = 0
    """ enum for channel_type. """
    CHANNEL_TYPE_UINT8 = 1
    CHANNEL_TYPE_INT16 = 2
    CHANNEL_TYPE_UINT16 = 3
    CHANNEL_TYPE_INT32 = 4
    CHANNEL_TYPE_UINT32 = 5
    CHANNEL_TYPE_FLOAT32 = 6
    CHANNEL_TYPE_FLOAT64 = 7
    CHANNEL_TYPE_INVALID = -1
    COMPRESSION_METHOD_NOT_COMPRESSED = 0
    """ enum for compression_method. """
    COMPRESSION_METHOD_ZLIB = 1
    COMPRESSION_METHOD_JPEG = 2
    COMPRESSION_METHOD_PNG = 3
    COMPRESSION_METHOD_INVALID = -1

    def __init__(self):
        self.frame_name = ""
        """
        The frame name where this image is obtained
        LCM Type: string
        """

        self.width = 0
        """
        The image width in pixels.
        LCM Type: int32_t
        """

        self.height = 0
        """
        The image height in pixels.
        LCM Type: int32_t
        """

        self.row_stride = 0
        """
        The physical memory size per a single row in bytes.
        LCM Type: int32_t
        """

        self.size = 0
        """
        The size of `data` in bytes.
        LCM Type: int32_t
        """

        self.data = b""
        """
        The data that contains actual image.
        LCM Type: byte[size]
        """

        self.bigendian = False
        """
        The boolean to denote if the data is stored in the bigendian order.
        LCM Type: boolean
        """

        self.pixel_format = 0
        """
        The semantic meaning of pixels.
        LCM Type: int8_t
        """

        self.channel_type = 0
        """
        The data type for a channel.
        LCM Type: int8_t
        """

        self.compression_method = 0
        """
        The compression method.
        LCM Type: int8_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(image_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __frame_name_encoded = self.frame_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_name_encoded)+1))
        buf.write(__frame_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iiii", self.width, self.height, self.row_stride, self.size))
        buf.write(bytearray(self.data[:self.size]))
        buf.write(struct.pack(">bbbb", self.bigendian, self.pixel_format, self.channel_type, self.compression_method))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != image_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return image_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = image_t()
        __frame_name_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_name = buf.read(__frame_name_len)[:-1].decode('utf-8', 'replace')
        self.width, self.height, self.row_stride, self.size = struct.unpack(">iiii", buf.read(16))
        self.data = buf.read(self.size)
        self.bigendian = bool(struct.unpack('b', buf.read(1))[0])
        self.pixel_format, self.channel_type, self.compression_method = struct.unpack(">bbb", buf.read(3))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if image_t in parents: return 0
        tmphash = (0x75bbda18a08d13af) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if image_t._packed_fingerprint is None:
            image_t._packed_fingerprint = struct.pack(">Q", image_t._get_hash_recursive([]))
        return image_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", image_t._get_packed_fingerprint())[0]

