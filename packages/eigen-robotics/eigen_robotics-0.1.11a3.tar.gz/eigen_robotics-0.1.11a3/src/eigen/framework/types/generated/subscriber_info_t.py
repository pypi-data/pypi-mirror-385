"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class subscriber_info_t(object):

    __slots__ = ["comms_type", "channel_name", "channel_type", "channel_status"]

    __typenames__ = ["string", "string", "string", "int16_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.comms_type = ""
        """ LCM Type: string """
        self.channel_name = ""
        """ LCM Type: string """
        self.channel_type = ""
        """ LCM Type: string """
        self.channel_status = 0
        """ LCM Type: int16_t """

    def encode(self):
        buf = BytesIO()
        buf.write(subscriber_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __comms_type_encoded = self.comms_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__comms_type_encoded)+1))
        buf.write(__comms_type_encoded)
        buf.write(b"\0")
        __channel_name_encoded = self.channel_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__channel_name_encoded)+1))
        buf.write(__channel_name_encoded)
        buf.write(b"\0")
        __channel_type_encoded = self.channel_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__channel_type_encoded)+1))
        buf.write(__channel_type_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">h", self.channel_status))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != subscriber_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return subscriber_info_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = subscriber_info_t()
        __comms_type_len = struct.unpack('>I', buf.read(4))[0]
        self.comms_type = buf.read(__comms_type_len)[:-1].decode('utf-8', 'replace')
        __channel_name_len = struct.unpack('>I', buf.read(4))[0]
        self.channel_name = buf.read(__channel_name_len)[:-1].decode('utf-8', 'replace')
        __channel_type_len = struct.unpack('>I', buf.read(4))[0]
        self.channel_type = buf.read(__channel_type_len)[:-1].decode('utf-8', 'replace')
        self.channel_status = struct.unpack(">h", buf.read(2))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if subscriber_info_t in parents: return 0
        tmphash = (0xc33ca6ab139fefe0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if subscriber_info_t._packed_fingerprint is None:
            subscriber_info_t._packed_fingerprint = struct.pack(">Q", subscriber_info_t._get_hash_recursive([]))
        return subscriber_info_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", subscriber_info_t._get_packed_fingerprint())[0]

