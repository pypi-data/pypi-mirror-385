"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class laser_scan_t(object):
    """ Laser Scan """

    __slots__ = ["angles", "ranges"]

    __typenames__ = ["generated.float_vector_t", "generated.float_vector_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.angles = generated.float_vector_t()
        """
        Scan angle
        LCM Type: generated.float_vector_t
        """

        self.ranges = generated.float_vector_t()
        """
        Scan range
        LCM Type: generated.float_vector_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(laser_scan_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.angles._get_packed_fingerprint() == generated.float_vector_t._get_packed_fingerprint()
        self.angles._encode_one(buf)
        assert self.ranges._get_packed_fingerprint() == generated.float_vector_t._get_packed_fingerprint()
        self.ranges._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != laser_scan_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return laser_scan_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = laser_scan_t()
        self.angles = generated.float_vector_t._decode_one(buf)
        self.ranges = generated.float_vector_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if laser_scan_t in parents: return 0
        newparents = parents + [laser_scan_t]
        tmphash = (0xeccac1c288c7cce0+ generated.float_vector_t._get_hash_recursive(newparents)+ generated.float_vector_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if laser_scan_t._packed_fingerprint is None:
            laser_scan_t._packed_fingerprint = struct.pack(">Q", laser_scan_t._get_hash_recursive([]))
        return laser_scan_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", laser_scan_t._get_packed_fingerprint())[0]

