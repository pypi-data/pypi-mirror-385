"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class rgbd_t(object):
    """ Synchronized RGBD (Image + Depth) """

    __slots__ = ["image", "depth"]

    __typenames__ = ["generated.image_t", "generated.image_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.image = generated.image_t()
        """
        RGB image.
        LCM Type: generated.image_t
        """

        self.depth = generated.image_t()
        """
        Depth map
        LCM Type: generated.image_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(rgbd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.image._get_packed_fingerprint() == generated.image_t._get_packed_fingerprint()
        self.image._encode_one(buf)
        assert self.depth._get_packed_fingerprint() == generated.image_t._get_packed_fingerprint()
        self.depth._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rgbd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rgbd_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = rgbd_t()
        self.image = generated.image_t._decode_one(buf)
        self.depth = generated.image_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if rgbd_t in parents: return 0
        newparents = parents + [rgbd_t]
        tmphash = (0x530a90c7b4c87f64+ generated.image_t._get_hash_recursive(newparents)+ generated.image_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if rgbd_t._packed_fingerprint is None:
            rgbd_t._packed_fingerprint = struct.pack(">Q", rgbd_t._get_hash_recursive([]))
        return rgbd_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", rgbd_t._get_packed_fingerprint())[0]

