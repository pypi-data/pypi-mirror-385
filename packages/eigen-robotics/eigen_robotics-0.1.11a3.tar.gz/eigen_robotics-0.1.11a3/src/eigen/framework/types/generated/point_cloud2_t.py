"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class point_cloud2_t(object):

    __slots__ = ["height", "width", "num_fields", "fields", "is_bigendian", "point_step", "row_step", "num_bytes", "data", "is_dense"]

    __typenames__ = ["int32_t", "int32_t", "int64_t", "generated.point_field_t", "boolean", "int32_t", "int32_t", "int64_t", "int32_t", "boolean"]

    __dimensions__ = [None, None, None, ["num_fields"], None, None, None, None, ["num_bytes"], None]

    def __init__(self):
        self.height = 0
        """ LCM Type: int32_t """
        self.width = 0
        """ LCM Type: int32_t """
        self.num_fields = 0
        """ LCM Type: int64_t """
        self.fields = []
        """ LCM Type: generated.point_field_t[num_fields] """
        self.is_bigendian = False
        """ LCM Type: boolean """
        self.point_step = 0
        """ LCM Type: int32_t """
        self.row_step = 0
        """ LCM Type: int32_t """
        self.num_bytes = 0
        """ LCM Type: int64_t """
        self.data = []
        """ LCM Type: int32_t[num_bytes] """
        self.is_dense = False
        """ LCM Type: boolean """

    def encode(self):
        buf = BytesIO()
        buf.write(point_cloud2_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiq", self.height, self.width, self.num_fields))
        for i0 in range(self.num_fields):
            assert self.fields[i0]._get_packed_fingerprint() == generated.point_field_t._get_packed_fingerprint()
            self.fields[i0]._encode_one(buf)
        buf.write(struct.pack(">biiq", self.is_bigendian, self.point_step, self.row_step, self.num_bytes))
        buf.write(struct.pack('>%di' % self.num_bytes, *self.data[:self.num_bytes]))
        buf.write(struct.pack(">b", self.is_dense))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != point_cloud2_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return point_cloud2_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = point_cloud2_t()
        self.height, self.width, self.num_fields = struct.unpack(">iiq", buf.read(16))
        self.fields = []
        for i0 in range(self.num_fields):
            self.fields.append(generated.point_field_t._decode_one(buf))
        self.is_bigendian = bool(struct.unpack('b', buf.read(1))[0])
        self.point_step, self.row_step, self.num_bytes = struct.unpack(">iiq", buf.read(16))
        self.data = struct.unpack('>%di' % self.num_bytes, buf.read(self.num_bytes * 4))
        self.is_dense = bool(struct.unpack('b', buf.read(1))[0])
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if point_cloud2_t in parents: return 0
        newparents = parents + [point_cloud2_t]
        tmphash = (0xa9a372e129fdd8c4+ generated.point_field_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if point_cloud2_t._packed_fingerprint is None:
            point_cloud2_t._packed_fingerprint = struct.pack(">Q", point_cloud2_t._get_hash_recursive([]))
        return point_cloud2_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", point_cloud2_t._get_packed_fingerprint())[0]

