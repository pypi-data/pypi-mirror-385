"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class node_info_t(object):

    __slots__ = ["node_name", "node_id", "comms"]

    __typenames__ = ["string", "string", "generated.comms_info_t"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.node_name = ""
        """ LCM Type: string """
        self.node_id = ""
        """ LCM Type: string """
        self.comms = generated.comms_info_t()
        """ LCM Type: generated.comms_info_t """

    def encode(self):
        buf = BytesIO()
        buf.write(node_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __node_name_encoded = self.node_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__node_name_encoded)+1))
        buf.write(__node_name_encoded)
        buf.write(b"\0")
        __node_id_encoded = self.node_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__node_id_encoded)+1))
        buf.write(__node_id_encoded)
        buf.write(b"\0")
        assert self.comms._get_packed_fingerprint() == generated.comms_info_t._get_packed_fingerprint()
        self.comms._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != node_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return node_info_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = node_info_t()
        __node_name_len = struct.unpack('>I', buf.read(4))[0]
        self.node_name = buf.read(__node_name_len)[:-1].decode('utf-8', 'replace')
        __node_id_len = struct.unpack('>I', buf.read(4))[0]
        self.node_id = buf.read(__node_id_len)[:-1].decode('utf-8', 'replace')
        self.comms = generated.comms_info_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if node_info_t in parents: return 0
        newparents = parents + [node_info_t]
        tmphash = (0x2935a5062337a0ca+ generated.comms_info_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if node_info_t._packed_fingerprint is None:
            node_info_t._packed_fingerprint = struct.pack(">Q", node_info_t._get_hash_recursive([]))
        return node_info_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", node_info_t._get_packed_fingerprint())[0]

