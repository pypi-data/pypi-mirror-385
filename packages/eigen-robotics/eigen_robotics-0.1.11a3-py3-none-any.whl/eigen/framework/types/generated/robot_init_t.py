"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class robot_init_t(object):

    __slots__ = ["name", "position", "orientation", "n", "q_init"]

    __typenames__ = ["string", "float", "float", "int64_t", "float"]

    __dimensions__ = [None, [3], [4], None, ["n"]]

    def __init__(self):
        self.name = ""
        """ LCM Type: string """
        self.position = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.orientation = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.n = 0
        """ LCM Type: int64_t """
        self.q_init = []
        """
        number of actuated joints
        LCM Type: float[n]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(robot_init_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>3f', *self.position[:3]))
        buf.write(struct.pack('>4f', *self.orientation[:4]))
        buf.write(struct.pack(">q", self.n))
        buf.write(struct.pack('>%df' % self.n, *self.q_init[:self.n]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_init_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_init_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = robot_init_t()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.position = struct.unpack('>3f', buf.read(12))
        self.orientation = struct.unpack('>4f', buf.read(16))
        self.n = struct.unpack(">q", buf.read(8))[0]
        self.q_init = struct.unpack('>%df' % self.n, buf.read(self.n * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if robot_init_t in parents: return 0
        tmphash = (0xcb5b32a5d24fe32a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if robot_init_t._packed_fingerprint is None:
            robot_init_t._packed_fingerprint = struct.pack(">Q", robot_init_t._get_hash_recursive([]))
        return robot_init_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", robot_init_t._get_packed_fingerprint())[0]

