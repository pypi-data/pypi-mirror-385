"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class double_vector_t(object):

    __slots__ = ["n", "data"]

    __typenames__ = ["int64_t", "double"]

    __dimensions__ = [None, ["n"]]

    def __init__(self):
        self.n = 0
        """
        The size of the data vector (the number of double-precision floating-point values).
        LCM Type: int64_t
        """

        self.data = []
        """
        The data vector itself, which holds 'n' double-precision floating-point numbers.
        LCM Type: double[n]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(double_vector_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.n))
        buf.write(struct.pack('>%dd' % self.n, *self.data[:self.n]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != double_vector_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return double_vector_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = double_vector_t()
        self.n = struct.unpack(">q", buf.read(8))[0]
        self.data = struct.unpack('>%dd' % self.n, buf.read(self.n * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if double_vector_t in parents: return 0
        tmphash = (0x2389e2f4cd970885) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if double_vector_t._packed_fingerprint is None:
            double_vector_t._packed_fingerprint = struct.pack(">Q", double_vector_t._get_hash_recursive([]))
        return double_vector_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", double_vector_t._get_packed_fingerprint())[0]

