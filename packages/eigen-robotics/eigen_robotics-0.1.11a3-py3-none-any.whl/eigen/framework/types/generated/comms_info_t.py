"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class comms_info_t(object):

    __slots__ = ["n_listeners", "listeners", "n_subscribers", "subscribers", "n_publishers", "publishers", "n_services", "services"]

    __typenames__ = ["int64_t", "generated.listener_info_t", "int64_t", "generated.subscriber_info_t", "int64_t", "generated.publisher_info_t", "int64_t", "generated.service_info_t"]

    __dimensions__ = [None, ["n_listeners"], None, ["n_subscribers"], None, ["n_publishers"], None, ["n_services"]]

    def __init__(self):
        self.n_listeners = 0
        """ LCM Type: int64_t """
        self.listeners = []
        """ LCM Type: generated.listener_info_t[n_listeners] """
        self.n_subscribers = 0
        """
        Array of listeners
        LCM Type: int64_t
        """

        self.subscribers = []
        """ LCM Type: generated.subscriber_info_t[n_subscribers] """
        self.n_publishers = 0
        """
        Array of subscribers
        LCM Type: int64_t
        """

        self.publishers = []
        """ LCM Type: generated.publisher_info_t[n_publishers] """
        self.n_services = 0
        """
        Array of publishers
        LCM Type: int64_t
        """

        self.services = []
        """ LCM Type: generated.service_info_t[n_services] """

    def encode(self):
        buf = BytesIO()
        buf.write(comms_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.n_listeners))
        for i0 in range(self.n_listeners):
            assert self.listeners[i0]._get_packed_fingerprint() == generated.listener_info_t._get_packed_fingerprint()
            self.listeners[i0]._encode_one(buf)
        buf.write(struct.pack(">q", self.n_subscribers))
        for i0 in range(self.n_subscribers):
            assert self.subscribers[i0]._get_packed_fingerprint() == generated.subscriber_info_t._get_packed_fingerprint()
            self.subscribers[i0]._encode_one(buf)
        buf.write(struct.pack(">q", self.n_publishers))
        for i0 in range(self.n_publishers):
            assert self.publishers[i0]._get_packed_fingerprint() == generated.publisher_info_t._get_packed_fingerprint()
            self.publishers[i0]._encode_one(buf)
        buf.write(struct.pack(">q", self.n_services))
        for i0 in range(self.n_services):
            assert self.services[i0]._get_packed_fingerprint() == generated.service_info_t._get_packed_fingerprint()
            self.services[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != comms_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return comms_info_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = comms_info_t()
        self.n_listeners = struct.unpack(">q", buf.read(8))[0]
        self.listeners = []
        for i0 in range(self.n_listeners):
            self.listeners.append(generated.listener_info_t._decode_one(buf))
        self.n_subscribers = struct.unpack(">q", buf.read(8))[0]
        self.subscribers = []
        for i0 in range(self.n_subscribers):
            self.subscribers.append(generated.subscriber_info_t._decode_one(buf))
        self.n_publishers = struct.unpack(">q", buf.read(8))[0]
        self.publishers = []
        for i0 in range(self.n_publishers):
            self.publishers.append(generated.publisher_info_t._decode_one(buf))
        self.n_services = struct.unpack(">q", buf.read(8))[0]
        self.services = []
        for i0 in range(self.n_services):
            self.services.append(generated.service_info_t._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if comms_info_t in parents: return 0
        newparents = parents + [comms_info_t]
        tmphash = (0x2916a096b65dc7ad+ generated.listener_info_t._get_hash_recursive(newparents)+ generated.subscriber_info_t._get_hash_recursive(newparents)+ generated.publisher_info_t._get_hash_recursive(newparents)+ generated.service_info_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if comms_info_t._packed_fingerprint is None:
            comms_info_t._packed_fingerprint = struct.pack(">Q", comms_info_t._get_hash_recursive([]))
        return comms_info_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", comms_info_t._get_packed_fingerprint())[0]

