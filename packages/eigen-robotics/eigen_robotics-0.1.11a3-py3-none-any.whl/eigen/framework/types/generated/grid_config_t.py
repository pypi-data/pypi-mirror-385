"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class grid_config_t(object):

    __slots__ = ["x_bounds", "y_bounds", "grid_size"]

    __typenames__ = ["float", "float", "float"]

    __dimensions__ = [[2], [2], None]

    def __init__(self):
        self.x_bounds = [ 0.0 for dim0 in range(2) ]
        """
        World-space bounds of the grid along the X axis: [min_x, max_x]
        LCM Type: float[2]
        """

        self.y_bounds = [ 0.0 for dim0 in range(2) ]
        """
        World-space bounds of the grid along the Y axis: [min_y, max_y]
        LCM Type: float[2]
        """

        self.grid_size = 0.0
        """
        Side length of each square grid cell, in world units
        LCM Type: float
        """


    def encode(self):
        buf = BytesIO()
        buf.write(grid_config_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2f', *self.x_bounds[:2]))
        buf.write(struct.pack('>2f', *self.y_bounds[:2]))
        buf.write(struct.pack(">f", self.grid_size))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != grid_config_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return grid_config_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = grid_config_t()
        self.x_bounds = struct.unpack('>2f', buf.read(8))
        self.y_bounds = struct.unpack('>2f', buf.read(8))
        self.grid_size = struct.unpack(">f", buf.read(4))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if grid_config_t in parents: return 0
        tmphash = (0x4d897a8eed5f264a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if grid_config_t._packed_fingerprint is None:
            grid_config_t._packed_fingerprint = struct.pack(">Q", grid_config_t._get_hash_recursive([]))
        return grid_config_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", grid_config_t._get_packed_fingerprint())[0]

