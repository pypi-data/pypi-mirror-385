"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class network_info_t(object):

    __slots__ = ["n_nodes", "nodes"]

    __typenames__ = ["int64_t", "generated.node_info_t"]

    __dimensions__ = [None, ["n_nodes"]]

    def __init__(self):
        self.n_nodes = 0
        """ LCM Type: int64_t """
        self.nodes = []
        """
        Number of nodes in the network
        LCM Type: generated.node_info_t[n_nodes]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(network_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.n_nodes))
        for i0 in range(self.n_nodes):
            assert self.nodes[i0]._get_packed_fingerprint() == generated.node_info_t._get_packed_fingerprint()
            self.nodes[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != network_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return network_info_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = network_info_t()
        self.n_nodes = struct.unpack(">q", buf.read(8))[0]
        self.nodes = []
        for i0 in range(self.n_nodes):
            self.nodes.append(generated.node_info_t._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if network_info_t in parents: return 0
        newparents = parents + [network_info_t]
        tmphash = (0xd5253b1d636e7b28+ generated.node_info_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if network_info_t._packed_fingerprint is None:
            network_info_t._packed_fingerprint = struct.pack(">Q", network_info_t._get_hash_recursive([]))
        return network_info_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", network_info_t._get_packed_fingerprint())[0]

