"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class joint_state_t(object):

    __slots__ = ["header", "n", "name", "position", "velocity", "effort"]

    __typenames__ = ["generated.header_t", "int64_t", "string", "double", "double", "double"]

    __dimensions__ = [None, None, ["n"], ["n"], ["n"], ["n"]]

    def __init__(self):
        self.header = generated.header_t()
        """ LCM Type: generated.header_t """
        self.n = 0
        """ LCM Type: int64_t """
        self.name = []
        """ LCM Type: string[n] """
        self.position = []
        """ LCM Type: double[n] """
        self.velocity = []
        """ LCM Type: double[n] """
        self.effort = []
        """ LCM Type: double[n] """

    def encode(self):
        buf = BytesIO()
        buf.write(joint_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == generated.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">q", self.n))
        for i0 in range(self.n):
            __name_encoded = self.name[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__name_encoded)+1))
            buf.write(__name_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.n, *self.position[:self.n]))
        buf.write(struct.pack('>%dd' % self.n, *self.velocity[:self.n]))
        buf.write(struct.pack('>%dd' % self.n, *self.effort[:self.n]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != joint_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joint_state_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = joint_state_t()
        self.header = generated.header_t._decode_one(buf)
        self.n = struct.unpack(">q", buf.read(8))[0]
        self.name = []
        for i0 in range(self.n):
            __name_len = struct.unpack('>I', buf.read(4))[0]
            self.name.append(buf.read(__name_len)[:-1].decode('utf-8', 'replace'))
        self.position = struct.unpack('>%dd' % self.n, buf.read(self.n * 8))
        self.velocity = struct.unpack('>%dd' % self.n, buf.read(self.n * 8))
        self.effort = struct.unpack('>%dd' % self.n, buf.read(self.n * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if joint_state_t in parents: return 0
        newparents = parents + [joint_state_t]
        tmphash = (0x5cf141922785539d+ generated.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if joint_state_t._packed_fingerprint is None:
            joint_state_t._packed_fingerprint = struct.pack(">Q", joint_state_t._get_hash_recursive([]))
        return joint_state_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", joint_state_t._get_packed_fingerprint())[0]

