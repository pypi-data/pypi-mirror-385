"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct



class image_array_t(object):
    """ This is used for sending and/or receiving multiple images at the same time. """

    __slots__ = ["timestamp_ns", "num_images", "images"]

    __typenames__ = ["int64_t", "int32_t", "generated.image_t"]

    __dimensions__ = [None, None, ["num_images"]]

    def __init__(self):
        self.timestamp_ns = 0
        """
        The timestamp and the frame name.
        The timestamp holds when this data is packed. It's convenient to store
        the latest timestamp among the timestamps in `images` since it is possible
        for each of `images` having different timestamps if their camera's shutters
        are not synchronized.
        The timestamp in nanoseconds.
        LCM Type: int64_t
        """

        self.num_images = 0
        """
        The number of images.
        LCM Type: int32_t
        """

        self.images = []
        """
        An array of image_t.
        LCM Type: generated.image_t[num_images]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(image_array_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp_ns, self.num_images))
        for i0 in range(self.num_images):
            assert self.images[i0]._get_packed_fingerprint() == generated.image_t._get_packed_fingerprint()
            self.images[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != image_array_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return image_array_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = image_array_t()
        self.timestamp_ns, self.num_images = struct.unpack(">qi", buf.read(12))
        self.images = []
        for i0 in range(self.num_images):
            self.images.append(generated.image_t._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if image_array_t in parents: return 0
        newparents = parents + [image_array_t]
        tmphash = (0x7fbb3284dcdd82df+ generated.image_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if image_array_t._packed_fingerprint is None:
            image_array_t._packed_fingerprint = struct.pack(">Q", image_array_t._get_hash_recursive([]))
        return image_array_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", image_array_t._get_packed_fingerprint())[0]

