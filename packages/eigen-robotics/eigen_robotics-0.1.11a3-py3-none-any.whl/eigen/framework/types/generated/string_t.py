"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class string_t(object):

    __slots__ = ["data"]

    __typenames__ = ["string"]

    __dimensions__ = [None]

    def __init__(self):
        self.data = ""
        """
        The string data, which can hold any sequence of characters.
        This field stores the actual string content.
        LCM Type: string
        """


    def encode(self):
        buf = BytesIO()
        buf.write(string_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __data_encoded = self.data.encode('utf-8')
        buf.write(struct.pack('>I', len(__data_encoded)+1))
        buf.write(__data_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != string_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return string_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = string_t()
        __data_len = struct.unpack('>I', buf.read(4))[0]
        self.data = buf.read(__data_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if string_t in parents: return 0
        tmphash = (0x90df9b84cdceaf0a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if string_t._packed_fingerprint is None:
            string_t._packed_fingerprint = struct.pack(">Q", string_t._get_hash_recursive([]))
        return string_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", string_t._get_packed_fingerprint())[0]

