"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class service_info_t(object):

    __slots__ = ["comms_type", "service_name", "service_host", "service_port", "registry_host", "registry_port", "request_type", "response_type"]

    __typenames__ = ["string", "string", "string", "int64_t", "string", "int64_t", "string", "string"]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    def __init__(self):
        self.comms_type = ""
        """ LCM Type: string """
        self.service_name = ""
        """ LCM Type: string """
        self.service_host = ""
        """ LCM Type: string """
        self.service_port = 0
        """ LCM Type: int64_t """
        self.registry_host = ""
        """ LCM Type: string """
        self.registry_port = 0
        """ LCM Type: int64_t """
        self.request_type = ""
        """ LCM Type: string """
        self.response_type = ""
        """ LCM Type: string """

    def encode(self):
        buf = BytesIO()
        buf.write(service_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __comms_type_encoded = self.comms_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__comms_type_encoded)+1))
        buf.write(__comms_type_encoded)
        buf.write(b"\0")
        __service_name_encoded = self.service_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__service_name_encoded)+1))
        buf.write(__service_name_encoded)
        buf.write(b"\0")
        __service_host_encoded = self.service_host.encode('utf-8')
        buf.write(struct.pack('>I', len(__service_host_encoded)+1))
        buf.write(__service_host_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">q", self.service_port))
        __registry_host_encoded = self.registry_host.encode('utf-8')
        buf.write(struct.pack('>I', len(__registry_host_encoded)+1))
        buf.write(__registry_host_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">q", self.registry_port))
        __request_type_encoded = self.request_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__request_type_encoded)+1))
        buf.write(__request_type_encoded)
        buf.write(b"\0")
        __response_type_encoded = self.response_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__response_type_encoded)+1))
        buf.write(__response_type_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != service_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return service_info_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = service_info_t()
        __comms_type_len = struct.unpack('>I', buf.read(4))[0]
        self.comms_type = buf.read(__comms_type_len)[:-1].decode('utf-8', 'replace')
        __service_name_len = struct.unpack('>I', buf.read(4))[0]
        self.service_name = buf.read(__service_name_len)[:-1].decode('utf-8', 'replace')
        __service_host_len = struct.unpack('>I', buf.read(4))[0]
        self.service_host = buf.read(__service_host_len)[:-1].decode('utf-8', 'replace')
        self.service_port = struct.unpack(">q", buf.read(8))[0]
        __registry_host_len = struct.unpack('>I', buf.read(4))[0]
        self.registry_host = buf.read(__registry_host_len)[:-1].decode('utf-8', 'replace')
        self.registry_port = struct.unpack(">q", buf.read(8))[0]
        __request_type_len = struct.unpack('>I', buf.read(4))[0]
        self.request_type = buf.read(__request_type_len)[:-1].decode('utf-8', 'replace')
        __response_type_len = struct.unpack('>I', buf.read(4))[0]
        self.response_type = buf.read(__response_type_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if service_info_t in parents: return 0
        tmphash = (0xa4e237dbecd38559) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if service_info_t._packed_fingerprint is None:
            service_info_t._packed_fingerprint = struct.pack(">Q", service_info_t._get_hash_recursive([]))
        return service_info_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", service_info_t._get_packed_fingerprint())[0]

