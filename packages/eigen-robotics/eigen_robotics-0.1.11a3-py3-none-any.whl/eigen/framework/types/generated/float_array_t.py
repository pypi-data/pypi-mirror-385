"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class float_array_t(object):

    __slots__ = ["m", "n", "data"]

    __typenames__ = ["int64_t", "int64_t", "float"]

    __dimensions__ = [None, None, ["m", "n"]]

    def __init__(self):
        self.m = 0
        """
        The number of rows in the array.
        LCM Type: int64_t
        """

        self.n = 0
        """
        The number of columns in the array.
        LCM Type: int64_t
        """

        self.data = []
        """
        The data array itself, which holds 'm x n' floating-point numbers.
        LCM Type: float[m][n]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(float_array_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.m, self.n))
        for i0 in range(self.m):
            buf.write(struct.pack('>%df' % self.n, *self.data[i0][:self.n]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != float_array_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return float_array_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = float_array_t()
        self.m, self.n = struct.unpack(">qq", buf.read(16))
        self.data = []
        for i0 in range(self.m):
            self.data.append(struct.unpack('>%df' % self.n, buf.read(self.n * 4)))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if float_array_t in parents: return 0
        tmphash = (0x2fcd7deef594bdf3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if float_array_t._packed_fingerprint is None:
            float_array_t._packed_fingerprint = struct.pack(">Q", float_array_t._get_hash_recursive([]))
        return float_array_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", float_array_t._get_packed_fingerprint())[0]

