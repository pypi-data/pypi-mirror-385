# coding: utf-8

"""
    perceptic-core-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from perceptic_core_client.models.list_schedule_executions_response import ListScheduleExecutionsResponse

class TestListScheduleExecutionsResponse(unittest.TestCase):
    """ListScheduleExecutionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListScheduleExecutionsResponse:
        """Test ListScheduleExecutionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListScheduleExecutionsResponse`
        """
        model = ListScheduleExecutionsResponse()
        if include_optional:
            return ListScheduleExecutionsResponse(
                executions = [
                    perceptic_core_client.models.schedule_execution_dto.ScheduleExecutionDto(
                        execution_rid = '', 
                        schedule_rid = '', 
                        task_rid = '', 
                        triggered_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        reason = 'SCHEDULED', 
                        trigger_details = '', )
                    ],
                total_count = 56,
                next_offset = 56
            )
        else:
            return ListScheduleExecutionsResponse(
        )
        """

    def testListScheduleExecutionsResponse(self):
        """Test ListScheduleExecutionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
