# coding: utf-8

"""
    perceptic-core-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from perceptic_core_client.models.schema_location import SchemaLocation
from typing import Optional, Set
from typing_extensions import Self

class ModelSchema(BaseModel):
    """
    ModelSchema
    """ # noqa: E501
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    schema_location: Optional[StrictStr] = Field(default=None, alias="schemaLocation")
    location: Optional[SchemaLocation] = None
    default_value: Optional[Any] = Field(default=None, alias="defaultValue")
    nullable: Optional[StrictBool] = None
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly")
    write_only: Optional[StrictBool] = Field(default=None, alias="writeOnly")
    unprocessed_properties: Optional[Dict[str, Any]] = Field(default=None, alias="unprocessedProperties")
    __properties: ClassVar[List[str]] = ["title", "description", "id", "schemaLocation", "location", "defaultValue", "nullable", "readOnly", "writeOnly", "unprocessedProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "schemaLocation": obj.get("schemaLocation"),
            "location": SchemaLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "defaultValue": obj.get("defaultValue"),
            "nullable": obj.get("nullable"),
            "readOnly": obj.get("readOnly"),
            "writeOnly": obj.get("writeOnly"),
            "unprocessedProperties": obj.get("unprocessedProperties")
        })
        return _obj


