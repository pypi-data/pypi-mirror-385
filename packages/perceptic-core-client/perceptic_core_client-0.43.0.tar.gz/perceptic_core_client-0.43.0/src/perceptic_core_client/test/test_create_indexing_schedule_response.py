# coding: utf-8

"""
    perceptic-core-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from perceptic_core_client.models.create_indexing_schedule_response import CreateIndexingScheduleResponse

class TestCreateIndexingScheduleResponse(unittest.TestCase):
    """CreateIndexingScheduleResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateIndexingScheduleResponse:
        """Test CreateIndexingScheduleResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateIndexingScheduleResponse`
        """
        model = CreateIndexingScheduleResponse()
        if include_optional:
            return CreateIndexingScheduleResponse(
                schedule_rid = '',
                schedule = perceptic_core_client.models.indexing_schedule_dto.IndexingScheduleDto(
                    schedule_rid = '', 
                    name = '', 
                    description = '', 
                    indexer_rid = '', 
                    target_uri = '', 
                    namespace = '', 
                    target_minimum_version = 56, 
                    indexing_settings = {
                        'key' : null
                        }, 
                    trigger = perceptic_core_client.models.schedule_trigger.ScheduleTrigger(), 
                    enabled = True, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_executed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    next_execution_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return CreateIndexingScheduleResponse(
        )
        """

    def testCreateIndexingScheduleResponse(self):
        """Test CreateIndexingScheduleResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
