# coding: utf-8

"""
    perceptic-core-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from perceptic_core_client.models.action_type import ActionType
from perceptic_core_client.models.indexing_action_status import IndexingActionStatus
from typing import Optional, Set
from typing_extensions import Self

class IndexingActionDto(BaseModel):
    """
    IndexingActionDto
    """ # noqa: E501
    action_type: Optional[ActionType] = Field(default=None, alias="actionType")
    target_uri: Optional[StrictStr] = Field(default=None, alias="targetUri")
    target_minimum_version: Optional[StrictInt] = Field(default=None, alias="targetMinimumVersion")
    status: Optional[IndexingActionStatus] = None
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    executed_at: Optional[datetime] = Field(default=None, alias="executedAt")
    reason: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["actionType", "targetUri", "targetMinimumVersion", "status", "errorMessage", "executedAt", "reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexingActionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['errorMessage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexingActionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionType": obj.get("actionType"),
            "targetUri": obj.get("targetUri"),
            "targetMinimumVersion": obj.get("targetMinimumVersion"),
            "status": obj.get("status"),
            "errorMessage": obj.get("errorMessage"),
            "executedAt": obj.get("executedAt"),
            "reason": obj.get("reason")
        })
        return _obj


