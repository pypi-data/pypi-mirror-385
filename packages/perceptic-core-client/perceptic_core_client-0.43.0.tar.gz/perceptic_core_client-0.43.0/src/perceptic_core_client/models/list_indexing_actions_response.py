# coding: utf-8

"""
    perceptic-core-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1-SNAPSHOT
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from perceptic_core_client.models.indexing_action_dto import IndexingActionDto
from typing import Optional, Set
from typing_extensions import Self

class ListIndexingActionsResponse(BaseModel):
    """
    ListIndexingActionsResponse
    """ # noqa: E501
    actions: Optional[List[IndexingActionDto]] = None
    total_actions: Optional[StrictInt] = Field(default=None, alias="totalActions")
    next_offset: Optional[StrictInt] = Field(default=None, alias="nextOffset")
    pending_count: Optional[StrictInt] = Field(default=None, alias="pendingCount")
    executing_count: Optional[StrictInt] = Field(default=None, alias="executingCount")
    succeeded_count: Optional[StrictInt] = Field(default=None, alias="succeededCount")
    failed_count: Optional[StrictInt] = Field(default=None, alias="failedCount")
    index_count: Optional[StrictInt] = Field(default=None, alias="indexCount")
    delete_count: Optional[StrictInt] = Field(default=None, alias="deleteCount")
    __properties: ClassVar[List[str]] = ["actions", "totalActions", "nextOffset", "pendingCount", "executingCount", "succeededCount", "failedCount", "indexCount", "deleteCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListIndexingActionsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # set to None if next_offset (nullable) is None
        # and model_fields_set contains the field
        if self.next_offset is None and "next_offset" in self.model_fields_set:
            _dict['nextOffset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListIndexingActionsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [IndexingActionDto.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "totalActions": obj.get("totalActions"),
            "nextOffset": obj.get("nextOffset"),
            "pendingCount": obj.get("pendingCount"),
            "executingCount": obj.get("executingCount"),
            "succeededCount": obj.get("succeededCount"),
            "failedCount": obj.get("failedCount"),
            "indexCount": obj.get("indexCount"),
            "deleteCount": obj.get("deleteCount")
        })
        return _obj


