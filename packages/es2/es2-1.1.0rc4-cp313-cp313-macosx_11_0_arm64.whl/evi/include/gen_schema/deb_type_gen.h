// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEBTYPE_DEB_FB_H_
#define FLATBUFFERS_GENERATED_DEBTYPE_DEB_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace deb_fb {

struct Complex;

struct Message;
struct MessageBuilder;

struct Coeff;
struct CoeffBuilder;

struct Poly;
struct PolyBuilder;

struct Bigpoly;
struct BigpolyBuilder;

struct Cipher;
struct CipherBuilder;

struct Sk;
struct SkBuilder;

struct Swk;
struct SwkBuilder;

struct Deb;
struct DebBuilder;

enum DebUnion : uint8_t {
  DebUnion_NONE = 0,
  DebUnion_Swk = 1,
  DebUnion_Sk = 2,
  DebUnion_Cipher = 3,
  DebUnion_Bigpoly = 4,
  DebUnion_Poly = 5,
  DebUnion_Message = 6,
  DebUnion_Coeff = 7,
  DebUnion_MIN = DebUnion_NONE,
  DebUnion_MAX = DebUnion_Coeff
};

inline const DebUnion (&EnumValuesDebUnion())[8] {
  static const DebUnion values[] = {
    DebUnion_NONE,
    DebUnion_Swk,
    DebUnion_Sk,
    DebUnion_Cipher,
    DebUnion_Bigpoly,
    DebUnion_Poly,
    DebUnion_Message,
    DebUnion_Coeff
  };
  return values;
}

inline const char * const *EnumNamesDebUnion() {
  static const char * const names[9] = {
    "NONE",
    "Swk",
    "Sk",
    "Cipher",
    "Bigpoly",
    "Poly",
    "Message",
    "Coeff",
    nullptr
  };
  return names;
}

inline const char *EnumNameDebUnion(DebUnion e) {
  if (::flatbuffers::IsOutRange(e, DebUnion_NONE, DebUnion_Coeff)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDebUnion()[index];
}

template<typename T> struct DebUnionTraits {
  static const DebUnion enum_value = DebUnion_NONE;
};

template<> struct DebUnionTraits<deb_fb::Swk> {
  static const DebUnion enum_value = DebUnion_Swk;
};

template<> struct DebUnionTraits<deb_fb::Sk> {
  static const DebUnion enum_value = DebUnion_Sk;
};

template<> struct DebUnionTraits<deb_fb::Cipher> {
  static const DebUnion enum_value = DebUnion_Cipher;
};

template<> struct DebUnionTraits<deb_fb::Bigpoly> {
  static const DebUnion enum_value = DebUnion_Bigpoly;
};

template<> struct DebUnionTraits<deb_fb::Poly> {
  static const DebUnion enum_value = DebUnion_Poly;
};

template<> struct DebUnionTraits<deb_fb::Message> {
  static const DebUnion enum_value = DebUnion_Message;
};

template<> struct DebUnionTraits<deb_fb::Coeff> {
  static const DebUnion enum_value = DebUnion_Coeff;
};

bool VerifyDebUnion(::flatbuffers::Verifier &verifier, const void *obj, DebUnion type);
bool VerifyDebUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Complex FLATBUFFERS_FINAL_CLASS {
 private:
  double real_;
  double imag_;

 public:
  Complex()
      : real_(0),
        imag_(0) {
  }
  Complex(double _real, double _imag)
      : real_(::flatbuffers::EndianScalar(_real)),
        imag_(::flatbuffers::EndianScalar(_imag)) {
  }
  double real() const {
    return ::flatbuffers::EndianScalar(real_);
  }
  double imag() const {
    return ::flatbuffers::EndianScalar(imag_);
  }
};
FLATBUFFERS_STRUCT_END(Complex, 16);

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_DATA = 6
  };
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const ::flatbuffers::Vector<const deb_fb::Complex *> *data() const {
    return GetPointer<const ::flatbuffers::Vector<const deb_fb::Complex *> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Message::VT_SIZE, size, 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<const deb_fb::Complex *>> data) {
    fbb_.AddOffset(Message::VT_DATA, data);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const deb_fb::Complex *>> data = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_size(size);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Message> CreateMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    const std::vector<deb_fb::Complex> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVectorOfStructs<deb_fb::Complex>(*data) : 0;
  return deb_fb::CreateMessage(
      _fbb,
      size,
      data__);
}

struct Coeff FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CoeffBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_DATA = 6
  };
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const ::flatbuffers::Vector<double> *data() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct CoeffBuilder {
  typedef Coeff Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Coeff::VT_SIZE, size, 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<double>> data) {
    fbb_.AddOffset(Coeff::VT_DATA, data);
  }
  explicit CoeffBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Coeff> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Coeff>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Coeff> CreateCoeff(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> data = 0) {
  CoeffBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_size(size);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Coeff> CreateCoeffDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    const std::vector<double> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<double>(*data) : 0;
  return deb_fb::CreateCoeff(
      _fbb,
      size,
      data__);
}

struct Poly FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PolyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRIME = 4,
    VT_DEGREE = 6,
    VT_NTT_STATE = 8,
    VT_ARRAY = 10
  };
  uint64_t prime() const {
    return GetField<uint64_t>(VT_PRIME, 0);
  }
  uint32_t degree() const {
    return GetField<uint32_t>(VT_DEGREE, 0);
  }
  bool ntt_state() const {
    return GetField<uint8_t>(VT_NTT_STATE, 0) != 0;
  }
  const ::flatbuffers::Vector<uint64_t> *array() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_ARRAY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PRIME, 8) &&
           VerifyField<uint32_t>(verifier, VT_DEGREE, 4) &&
           VerifyField<uint8_t>(verifier, VT_NTT_STATE, 1) &&
           VerifyOffset(verifier, VT_ARRAY) &&
           verifier.VerifyVector(array()) &&
           verifier.EndTable();
  }
};

struct PolyBuilder {
  typedef Poly Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_prime(uint64_t prime) {
    fbb_.AddElement<uint64_t>(Poly::VT_PRIME, prime, 0);
  }
  void add_degree(uint32_t degree) {
    fbb_.AddElement<uint32_t>(Poly::VT_DEGREE, degree, 0);
  }
  void add_ntt_state(bool ntt_state) {
    fbb_.AddElement<uint8_t>(Poly::VT_NTT_STATE, static_cast<uint8_t>(ntt_state), 0);
  }
  void add_array(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> array) {
    fbb_.AddOffset(Poly::VT_ARRAY, array);
  }
  explicit PolyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Poly> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Poly>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Poly> CreatePoly(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t prime = 0,
    uint32_t degree = 0,
    bool ntt_state = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> array = 0) {
  PolyBuilder builder_(_fbb);
  builder_.add_prime(prime);
  builder_.add_array(array);
  builder_.add_degree(degree);
  builder_.add_ntt_state(ntt_state);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Poly> CreatePolyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t prime = 0,
    uint32_t degree = 0,
    bool ntt_state = false,
    const std::vector<uint64_t> *array = nullptr) {
  auto array__ = array ? _fbb.CreateVector<uint64_t>(*array) : 0;
  return deb_fb::CreatePoly(
      _fbb,
      prime,
      degree,
      ntt_state,
      array__);
}

struct Bigpoly FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BigpolyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_RNSPOLYS = 6
  };
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Poly>> *rnspolys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Poly>> *>(VT_RNSPOLYS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_RNSPOLYS) &&
           verifier.VerifyVector(rnspolys()) &&
           verifier.VerifyVectorOfTables(rnspolys()) &&
           verifier.EndTable();
  }
};

struct BigpolyBuilder {
  typedef Bigpoly Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Bigpoly::VT_SIZE, size, 0);
  }
  void add_rnspolys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Poly>>> rnspolys) {
    fbb_.AddOffset(Bigpoly::VT_RNSPOLYS, rnspolys);
  }
  explicit BigpolyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Bigpoly> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Bigpoly>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Bigpoly> CreateBigpoly(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Poly>>> rnspolys = 0) {
  BigpolyBuilder builder_(_fbb);
  builder_.add_rnspolys(rnspolys);
  builder_.add_size(size);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Bigpoly> CreateBigpolyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    const std::vector<::flatbuffers::Offset<deb_fb::Poly>> *rnspolys = nullptr) {
  auto rnspolys__ = rnspolys ? _fbb.CreateVector<::flatbuffers::Offset<deb_fb::Poly>>(*rnspolys) : 0;
  return deb_fb::CreateBigpoly(
      _fbb,
      size,
      rnspolys__);
}

struct Cipher FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CipherBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRESET = 4,
    VT_ENCODING = 6,
    VT_SIZE = 8,
    VT_BIGPOLYS = 10
  };
  uint32_t preset() const {
    return GetField<uint32_t>(VT_PRESET, 0);
  }
  uint32_t encoding() const {
    return GetField<uint32_t>(VT_ENCODING, 0);
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *bigpolys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *>(VT_BIGPOLYS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PRESET, 4) &&
           VerifyField<uint32_t>(verifier, VT_ENCODING, 4) &&
           VerifyField<uint32_t>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_BIGPOLYS) &&
           verifier.VerifyVector(bigpolys()) &&
           verifier.VerifyVectorOfTables(bigpolys()) &&
           verifier.EndTable();
  }
};

struct CipherBuilder {
  typedef Cipher Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_preset(uint32_t preset) {
    fbb_.AddElement<uint32_t>(Cipher::VT_PRESET, preset, 0);
  }
  void add_encoding(uint32_t encoding) {
    fbb_.AddElement<uint32_t>(Cipher::VT_ENCODING, encoding, 0);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Cipher::VT_SIZE, size, 0);
  }
  void add_bigpolys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> bigpolys) {
    fbb_.AddOffset(Cipher::VT_BIGPOLYS, bigpolys);
  }
  explicit CipherBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Cipher> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Cipher>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Cipher> CreateCipher(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t preset = 0,
    uint32_t encoding = 0,
    uint32_t size = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> bigpolys = 0) {
  CipherBuilder builder_(_fbb);
  builder_.add_bigpolys(bigpolys);
  builder_.add_size(size);
  builder_.add_encoding(encoding);
  builder_.add_preset(preset);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Cipher> CreateCipherDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t preset = 0,
    uint32_t encoding = 0,
    uint32_t size = 0,
    const std::vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *bigpolys = nullptr) {
  auto bigpolys__ = bigpolys ? _fbb.CreateVector<::flatbuffers::Offset<deb_fb::Bigpoly>>(*bigpolys) : 0;
  return deb_fb::CreateCipher(
      _fbb,
      preset,
      encoding,
      size,
      bigpolys__);
}

struct Sk FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRESET = 4,
    VT_COEFFS = 6,
    VT_RANK = 8,
    VT_BIGPOLYS = 10
  };
  uint32_t preset() const {
    return GetField<uint32_t>(VT_PRESET, 0);
  }
  const ::flatbuffers::Vector<int8_t> *coeffs() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_COEFFS);
  }
  uint32_t rank() const {
    return GetField<uint32_t>(VT_RANK, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *bigpolys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *>(VT_BIGPOLYS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PRESET, 4) &&
           VerifyOffset(verifier, VT_COEFFS) &&
           verifier.VerifyVector(coeffs()) &&
           VerifyField<uint32_t>(verifier, VT_RANK, 4) &&
           VerifyOffset(verifier, VT_BIGPOLYS) &&
           verifier.VerifyVector(bigpolys()) &&
           verifier.VerifyVectorOfTables(bigpolys()) &&
           verifier.EndTable();
  }
};

struct SkBuilder {
  typedef Sk Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_preset(uint32_t preset) {
    fbb_.AddElement<uint32_t>(Sk::VT_PRESET, preset, 0);
  }
  void add_coeffs(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> coeffs) {
    fbb_.AddOffset(Sk::VT_COEFFS, coeffs);
  }
  void add_rank(uint32_t rank) {
    fbb_.AddElement<uint32_t>(Sk::VT_RANK, rank, 0);
  }
  void add_bigpolys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> bigpolys) {
    fbb_.AddOffset(Sk::VT_BIGPOLYS, bigpolys);
  }
  explicit SkBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sk> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sk>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sk> CreateSk(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t preset = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> coeffs = 0,
    uint32_t rank = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> bigpolys = 0) {
  SkBuilder builder_(_fbb);
  builder_.add_bigpolys(bigpolys);
  builder_.add_rank(rank);
  builder_.add_coeffs(coeffs);
  builder_.add_preset(preset);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Sk> CreateSkDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t preset = 0,
    const std::vector<int8_t> *coeffs = nullptr,
    uint32_t rank = 0,
    const std::vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *bigpolys = nullptr) {
  auto coeffs__ = coeffs ? _fbb.CreateVector<int8_t>(*coeffs) : 0;
  auto bigpolys__ = bigpolys ? _fbb.CreateVector<::flatbuffers::Offset<deb_fb::Bigpoly>>(*bigpolys) : 0;
  return deb_fb::CreateSk(
      _fbb,
      preset,
      coeffs__,
      rank,
      bigpolys__);
}

struct Swk FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SwkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRESET = 4,
    VT_TYPE = 6,
    VT_ROT_IDX = 8,
    VT_DNUM = 10,
    VT_AX = 12,
    VT_BX = 14
  };
  uint32_t preset() const {
    return GetField<uint32_t>(VT_PRESET, 0);
  }
  uint32_t type() const {
    return GetField<uint32_t>(VT_TYPE, 0);
  }
  uint32_t rot_idx() const {
    return GetField<uint32_t>(VT_ROT_IDX, 0);
  }
  uint32_t dnum() const {
    return GetField<uint32_t>(VT_DNUM, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *ax() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *>(VT_AX);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *bx() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *>(VT_BX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PRESET, 4) &&
           VerifyField<uint32_t>(verifier, VT_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_ROT_IDX, 4) &&
           VerifyField<uint32_t>(verifier, VT_DNUM, 4) &&
           VerifyOffset(verifier, VT_AX) &&
           verifier.VerifyVector(ax()) &&
           verifier.VerifyVectorOfTables(ax()) &&
           VerifyOffset(verifier, VT_BX) &&
           verifier.VerifyVector(bx()) &&
           verifier.VerifyVectorOfTables(bx()) &&
           verifier.EndTable();
  }
};

struct SwkBuilder {
  typedef Swk Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_preset(uint32_t preset) {
    fbb_.AddElement<uint32_t>(Swk::VT_PRESET, preset, 0);
  }
  void add_type(uint32_t type) {
    fbb_.AddElement<uint32_t>(Swk::VT_TYPE, type, 0);
  }
  void add_rot_idx(uint32_t rot_idx) {
    fbb_.AddElement<uint32_t>(Swk::VT_ROT_IDX, rot_idx, 0);
  }
  void add_dnum(uint32_t dnum) {
    fbb_.AddElement<uint32_t>(Swk::VT_DNUM, dnum, 0);
  }
  void add_ax(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> ax) {
    fbb_.AddOffset(Swk::VT_AX, ax);
  }
  void add_bx(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> bx) {
    fbb_.AddOffset(Swk::VT_BX, bx);
  }
  explicit SwkBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Swk> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Swk>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Swk> CreateSwk(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t preset = 0,
    uint32_t type = 0,
    uint32_t rot_idx = 0,
    uint32_t dnum = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> ax = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<deb_fb::Bigpoly>>> bx = 0) {
  SwkBuilder builder_(_fbb);
  builder_.add_bx(bx);
  builder_.add_ax(ax);
  builder_.add_dnum(dnum);
  builder_.add_rot_idx(rot_idx);
  builder_.add_type(type);
  builder_.add_preset(preset);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Swk> CreateSwkDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t preset = 0,
    uint32_t type = 0,
    uint32_t rot_idx = 0,
    uint32_t dnum = 0,
    const std::vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *ax = nullptr,
    const std::vector<::flatbuffers::Offset<deb_fb::Bigpoly>> *bx = nullptr) {
  auto ax__ = ax ? _fbb.CreateVector<::flatbuffers::Offset<deb_fb::Bigpoly>>(*ax) : 0;
  auto bx__ = bx ? _fbb.CreateVector<::flatbuffers::Offset<deb_fb::Bigpoly>>(*bx) : 0;
  return deb_fb::CreateSwk(
      _fbb,
      preset,
      type,
      rot_idx,
      dnum,
      ax__,
      bx__);
}

struct Deb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DebBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIST_TYPE = 4,
    VT_LIST = 6
  };
  const ::flatbuffers::Vector<uint8_t> *list_type() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_LIST_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *list() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_LIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIST_TYPE) &&
           verifier.VerifyVector(list_type()) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           VerifyDebUnionVector(verifier, list(), list_type()) &&
           verifier.EndTable();
  }
};

struct DebBuilder {
  typedef Deb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_list_type(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> list_type) {
    fbb_.AddOffset(Deb::VT_LIST_TYPE, list_type);
  }
  void add_list(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> list) {
    fbb_.AddOffset(Deb::VT_LIST, list);
  }
  explicit DebBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Deb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Deb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Deb> CreateDeb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> list_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> list = 0) {
  DebBuilder builder_(_fbb);
  builder_.add_list(list);
  builder_.add_list_type(list_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Deb> CreateDebDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *list_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *list = nullptr) {
  auto list_type__ = list_type ? _fbb.CreateVector<uint8_t>(*list_type) : 0;
  auto list__ = list ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*list) : 0;
  return deb_fb::CreateDeb(
      _fbb,
      list_type__,
      list__);
}

inline bool VerifyDebUnion(::flatbuffers::Verifier &verifier, const void *obj, DebUnion type) {
  switch (type) {
    case DebUnion_NONE: {
      return true;
    }
    case DebUnion_Swk: {
      auto ptr = reinterpret_cast<const deb_fb::Swk *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DebUnion_Sk: {
      auto ptr = reinterpret_cast<const deb_fb::Sk *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DebUnion_Cipher: {
      auto ptr = reinterpret_cast<const deb_fb::Cipher *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DebUnion_Bigpoly: {
      auto ptr = reinterpret_cast<const deb_fb::Bigpoly *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DebUnion_Poly: {
      auto ptr = reinterpret_cast<const deb_fb::Poly *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DebUnion_Message: {
      auto ptr = reinterpret_cast<const deb_fb::Message *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DebUnion_Coeff: {
      auto ptr = reinterpret_cast<const deb_fb::Coeff *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDebUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDebUnion(
        verifier,  values->Get(i), types->GetEnum<DebUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const deb_fb::Deb *GetDeb(const void *buf) {
  return ::flatbuffers::GetRoot<deb_fb::Deb>(buf);
}

inline const deb_fb::Deb *GetSizePrefixedDeb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<deb_fb::Deb>(buf);
}

inline bool VerifyDebBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<deb_fb::Deb>(nullptr);
}

inline bool VerifySizePrefixedDebBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<deb_fb::Deb>(nullptr);
}

inline void FinishDebBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<deb_fb::Deb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDebBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<deb_fb::Deb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace deb_fb

#endif  // FLATBUFFERS_GENERATED_DEBTYPE_DEB_FB_H_
