"""Ground truth for game graph information"""
from typing import TypedDict


# Type definition for GRAPH_DATABASE entries
class GraphData(TypedDict, total=False):
    # total=False is here because GRAPH_DATABASE entries aren't all defined at the same time
    num_nodes: int
    edge_list: list[tuple[int, int]]
    vertex_positions: list[tuple[float, float]]
    player1_node: int
    player2_node: int

# Vertex ownership; index is graph_id, value is (red_vertex_index, blue_vertex_index)
VERTEX_OWNERSHIP: dict[int, tuple[int, int]] = {1: (0, 1),
                                                2: (0, 1),
                                                3: (0, 2),
                                                4: (0, 3),
                                                5: (5, 7),
                                                6: (14, 10),
                                                7: (1, 4),
                                                8: (0, 11),
                                                10: (0, 23),
                                                11: (0, 2),
                                                12: (2, 4),
                                                13: (0, 1),
                                                14: (7, 16),
                                                15: (1, 4),
                                                16: (136, 31),
                                                17: (0, 7),
                                                18: (0, 4),
                                                19: (0, 4),
                                                20: (0, 2),
                                                21: (0, 2),
                                                22: (0, 3),
                                                23: (111, 889),  # N^2+N+1 should be first and last vertex with 6 connections
                                                24: (0, 54)}  # at max diameter (9 jumps) for C_60

# Graph definitions; this is the ground truth for all graph properties
GRAPH_DATABASE: dict[int, GraphData] = {
    1: {   # K_2
        "num_nodes": 2,
        "edge_list": [(0, 1)],
        "vertex_positions": [(0.0, 0.0), (1.0, 0.0)]
    },
    2: {   # K_3
        "num_nodes": 3,
        "edge_list": [(0, 1), (0, 2), (1, 2)],
        "vertex_positions": [(0.0, 0.0), (1.0, 0.0), (0.5, -1.0)]
    },
    3: {   # K_4
        "num_nodes": 4,
        "edge_list": [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)],
        "vertex_positions": [(-0.5, 0.5), (0.0, 0.0), (0.5, 0.5), (0.0, 1.0)]
    },
    4: {   # hexagon
        "num_nodes": 6,
        "edge_list": [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (0, 5)],
        "vertex_positions": [(-2.000, 0.000), (-1.000, -1.732), (1.000, -1.732), (2.000, 0.000), (1.000, 1.732), (-1.000, 1.732)]
    },
    5: {   # petersen
        "num_nodes": 10,
        "edge_list": [(0, 2), (0, 3), (0, 6), (1, 3), (1, 4), (1, 7), (2, 4), (2, 8), (3, 9), (4, 5), (5, 6), (5, 9),
                      (6, 7), (7, 8), (8, 9)],
        "vertex_positions": [[0, -100], [95, -31], [58, 80], [-59, 80], [-96, -31], [-210, -68], [0, -220], [209, -68],
                             [129, 177], [-130, 177]]
    },
    11: {  # P_3 AKA Ridiculously Small Graph AKA RSG
        "num_nodes": 3,
        "edge_list":  [(0, 1), (1, 2)],
        "vertex_positions": [(0.0, 0.0), (0.5, 0.0), (1.0, 0.0)]
    },
    12: {  # Moser Spindle
        "num_nodes": 7,
        "edge_list": [(0, 1), (0, 4), (0, 6), (1, 2), (1, 5), (2, 3), (2, 5), (3, 4), (3, 5), (3, 6), (4, 6)],
        "vertex_positions": [[0.5,0.],[-0.5,0.],[-0.728714,-0.973494],[0.,-1.65831],[0.728714,-0.973494],[-0.228714,-0.684819], [0.228714,-0.684819]]
    },
    18: {   # 3-prism graph; 6 vertices, 9 edges
        "num_nodes": 6,
        "edge_list": [(0, 1), (0, 2), (0, 3), (1, 2), (1, 4), (2, 5), (3, 4), (3, 5), (4, 5)],
        "vertex_positions": [(0, -0.5), (1.1, 1.75), (-1.1, 1.75), (0, -3), (2.5, 3), (-2.5, 3)]
    },
    19: {   # barbell graph; 6 vertices, 7 edges
        "num_nodes": 6,
        "edge_list": [(0, 1), (0, 2), (1, 2), (2, 5), (3, 4), (3, 5), (4, 5)],
        "vertex_positions": [(-2.866, -1), (-2.866, 0.5), (-1.134, -0.25), (2.866, -1), (2.866, 0.5), (1.134, -0.25)]
    },
    20: {   # diamond graph; 4 vertices, 5 edges
        "num_nodes": 4,
        "edge_list": [(0, 1), (0, 3), (1, 2), (1, 3), (2, 3)],
        "vertex_positions": [(-0.5, 0.5), (0.0, 0.0), (0.5, 0.5), (0.0, 1.0)]
    },
    24: {   # Mutant C60; 60 vertices, 90 edges, NOT C60 but ... something
        "num_nodes": 60,
        "edge_list":  [(0, 1), (0, 5), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), (4, 5), (4, 10), (5, 11), (6, 12), (6, 13), (7, 13), (7, 14), (8, 14), (8, 15), (9, 15), (9, 16), (10, 16), (10, 17), (11, 17), (11, 12), (12, 18), (13, 19), (14, 20), (15, 21), (16, 22), (17, 23), (18, 24), (18, 25), (19, 25), (19, 26), (20, 26), (20, 27), (21, 27), (21, 28), (22, 28), (22, 29), (23, 29), (23, 24), (24, 30), (25, 31), (26, 32), (27, 33), (28, 34), (29, 35), (30, 36), (30, 37), (31, 37), (31, 38), (32, 38), (32, 39), (33, 39), (33, 40), (34, 40), (34, 41), (35, 41), (35, 36), (36, 42), (37, 43), (38, 44), (39, 45), (40, 46), (41, 47), (42, 48), (42, 49), (43, 49), (43, 50), (44, 50), (44, 51), (45, 51), (45, 52), (46, 52), (46, 53), (47, 53), (47, 48), (48, 54), (49, 55), (50, 56), (51, 57), (52, 58), (53, 59), (54, 55), (54, 59), (55, 56), (56, 57), (57, 58), (58, 59)],
        "vertex_positions": [(0.415745789630079, 0.1722075445642904), (0.5635665148318849, 0.23343689374270477), (0.7341036279796919, 0.19670247427791587), (0.734103627979692, -0.19670247427791573), (0.5635665148318849, -0.23343689374270477), (0.415745789630079, -0.1722075445642904), (0.17220754456429044, 0.415745789630079), (0.5374011537017761, 0.5374011537017761), (0.9176295349746147, 0.24587809284739484), (0.9176295349746149, -0.24587809284739465), (0.5374011537017762, -0.537401153701776), (0.17220754456429044, -0.415745789630079), (0.21000000000000002, 0.0), (0.2334368937427048, 0.5635665148318849), (0.67175144212722, 0.6717514421272202), (1.15, 0.0), (0.6717514421272203, -0.6717514421272199), (0.2334368937427048, -0.5635665148318849), (0.07, 0.0), (0.19670247427791576, 0.734103627979692), (0.575, 0.9959292143521044), (1.3, 0.0), (0.575, -0.9959292143521044), (0.19670247427791576, -0.734103627979692), (0.07, -0.6), (0.07, 0.6), (0.2458780928473947, 0.9176295349746149), (0.65, 1.12583302491977), (0.65, -1.12583302491977), (0.2458780928473947, -0.9176295349746149), (-0.07, -0.6), (-0.07, 0.6), (-0.24587809284739542, 0.9176295349746146), (-0.65, 1.12583302491977), (-0.65, -1.12583302491977), (-0.2458780928473946, -0.9176295349746149), (-0.19670247427791568, -0.734103627979692), (-0.07, 0.0), (-0.19670247427791634, 0.7341036279796918), (-0.575, 0.9959292143521044), (-1.3, 0.0), (-0.575, -0.9959292143521044), (-0.23343689374270474, -0.5635665148318849), (-0.21000000000000002, 0.0), (-0.2334368937427051, 0.5635665148318848), (-0.6717514421272203, 0.67175144212722), (-1.15, 0.0), (-0.67175144212722, -0.6717514421272202), (-0.5374011537017761, -0.5374011537017761), (-0.17220754456429038, -0.415745789630079), (-0.17220754456429066, 0.41574578963007897), (-0.5374011537017762, 0.5374011537017761), (-0.917629534974615, 0.24587809284739431), (-0.9176295349746146, -0.24587809284739537), (-0.5635665148318849, -0.23343689374270482), (-0.415745789630079, -0.17220754456429047), (-0.4157457896300791, 0.17220754456429035), (-0.5635665148318849, 0.23343689374270468), (-0.734103627979692, 0.19670247427791546), (-0.7341036279796918, -0.19670247427791632)]
    }
}

for key in GRAPH_DATABASE:
    GRAPH_DATABASE[key]["player1_node"] = VERTEX_OWNERSHIP[key][0]
    GRAPH_DATABASE[key]["player2_node"] = VERTEX_OWNERSHIP[key][1]

# game graphs, epsilon values, and anneal times for examples in xprize paper

ALLOWED_GRAPHS = [2, 11, 12, 18, 19, 20, 24]
EPSILON_VALUES = [0.5, 0.5, 0.05, 0.125, 0.25, 0.5, 0.0]
ANNEAL_TIMES = [350, 350, 40, 100, 350, 350, 40]

class GraphProperties(object):
    def __init__(self):
        self.graph_database: dict[int, GraphData]  = GRAPH_DATABASE
        self.vertex_ownership: dict[int, tuple[int, int]] = VERTEX_OWNERSHIP
        self.allowed_graphs: list[int] = ALLOWED_GRAPHS
        self.epsilon_values: list[float] = EPSILON_VALUES
        self.anneal_times: list[int] = ANNEAL_TIMES
