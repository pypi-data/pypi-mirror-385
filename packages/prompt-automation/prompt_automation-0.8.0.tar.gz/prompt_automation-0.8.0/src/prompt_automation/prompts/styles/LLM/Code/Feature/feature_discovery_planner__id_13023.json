{
  "schema": 1,
  "id": 13023,
  "title": "Feature Discovery & Planning (Phase 1)",
  "style": "LLM",
  "placeholders": [
    {
      "name": "feature_context",
      "label": "Optional: Specific feature folder (e.g. '00_test_feature'). Leave empty for auto-discovery.",
      "multiline": false,
      "required": false,
      "default": ""
    }
  ],
  "template": [
    "# Feature Discovery & Planning Workflow - Phase 1",
    "",
    "# ‚ö†Ô∏è CONTEXT INSTRUCTIONS FOR AI AGENT",
    "",
    "**CRITICAL**: Do NOT search @workspace at the start of this workflow.",
    "",
    "Searching @workspace prematurely will pollute your context with irrelevant files, feature specs, and code. This document contains structured instructions with explicit steps that tell you WHEN to search.",
    "",
    "**When you need workspace context**: Specific steps below will say \"Search @workspace for X\". Only search at those explicit checkpoints.",
    "",
    "---",
    "",
    "**Your Task**: Discover the next feature, analyze it, assess risks, generate approval spec, and **create a state file**.",
    "",
    "**Output Goal**: State file at `docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase1.json` (version-controlled, portable across machines)",
    "",
    "---",
    "",
    "## Context",
    "",
    "- **Phase 1** (NOW): Discovery ‚Üí Analysis ‚Üí Risks ‚Üí Approval ‚Üí State File",
    "- **Phase 2** (NEXT): Implementation using state file context",
    "- **Phase 3** (FINAL): Archive + documentation updates",
    "",
    "**Input**: `{{feature_context}}`",
    "- If provided ‚Üí analyze that specific feature",
    "- If empty ‚Üí auto-discover next feature",
    "",
    "**Constraints**:",
    "- Follow AGENTS.md (‚â§400 LOC/file, ‚â§75 LOC/function, ‚â•85% coverage, TDD)",
    "- Feature flags default OFF",
    "- No breaking changes without approval",
    "",
    "---",
    "",
    "## Step 0: Rebuild Workspace Index",
    "",
    "**ALWAYS rebuild the workspace index at the start of each feature discovery.**",
    "",
    "**Why**: The index becomes stale quickly as features are implemented. Rebuilding ensures accurate context.",
    "",
    "**Command**:",
    "```bash",
    "prompt-automation --index-workspace",
    "```",
    "",
    "**What happens**:",
    "- Scans workspace (~2s for 817 files)",
    "- Builds `.prompt-automation-index.json`",
    "- Enables fast context gathering in Step 2",
    "",
    "**Skip if**:",
    "- `PA_SKIP_WORKSPACE_INDEX=1` is set",
    "- Index was just rebuilt (<5 min ago)",
    "",
    "**Output**:",
    "```",
    "‚úì Workspace index built successfully",
    "  Indexed: 817 files",
    "  Time: 1.8s",
    "```",
    "",
    "---",
    "",
    "## Step 1: Discover Feature",
    "",
    "### Step 1a: Check for Existing State File (Resume Check)",
    "",
    "**BEFORE discovering a new feature**, check if there's an existing state file that indicates a paused implementation.",
    "",
    "**If `{{feature_context}}` is provided:**",
    "",
    "1. Check for state file: `docs/agentic_feature_implementation/{{feature_context}}/workflow_state_phase1.json`",
    "2. If found, read the `_resume_instructions` field",
    "3. **‚è∏Ô∏è ASK USER**: \"Found paused implementation for this feature. Would you like to resume? (Y/n)\"",
    "   - If YES ‚Üí Skip to Step 5 and load the existing state",
    "   - If NO ‚Üí Continue with fresh discovery",
    "",
    "**Output if state file found**:",
    "```markdown",
    "## üîÑ Resume Available",
    "",
    "**Feature**: {feature_title from state}",
    "**Last Checkpoint**: {_resume_instructions.last_checkpoint}",
    "**Resume Command**: {_resume_instructions.command}",
    "",
    "Would you like to:",
    "1. **Resume** from where you left off (load existing state)",
    "2. **Restart** feature discovery from scratch (overwrites state)",
    "",
    "**Your choice**: {1 or 2}",
    "```",
    "",
    "---",
    "",
    "### Step 1b: Feature Discovery (New Implementation)",
    "",
    "**Search** `@workspace` for features:",
    "",
    "1. **Location**: `docs/agentic_feature_implementation/`",
    "2. **Pattern**: `{NN}_{feature_name}/feature_spec.md`",
    "3. **Exclude**: `_archive/` folder",
    "",
    "**Selection Logic**:",
    "- If `{{feature_context}}` provided ‚Üí use that folder",
    "- Else ‚Üí find folders NOT in `_archive/`, pick by:",
    "  - Lowest folder number with met dependencies",
    "  - OR most recently modified (fallback)",
    "",
    "**Read** the `feature_spec.md` and extract:",
    "- Feature ID (from metadata)",
    "- Title",
    "- Dependencies (check if each exists in `_archive/`)",
    "",
    "**Output**:",
    "",
    "```markdown",
    "## Discovery Results",
    "",
    "**Selected Feature**: `{NN}_{feature_name}`",
    "**Title**: {title}",
    "**Path**: `docs/agentic_feature_implementation/{NN}_{feature_name}/feature_spec.md`",
    "**Dependencies**: ",
    "  - {dep1}: ‚úÖ implemented (in _archive/)",
    "  - {dep2}: ‚ùå missing (blocks implementation)",
    "**Status**: {READY or BLOCKED}",
    "",
    "**Proceed with this feature?** (Y/n)",
    "```",
    "",
    "**‚è∏Ô∏è STOP**: Wait for user confirmation before continuing to Step 2.",
    "",
    "---",
    "",
    "## Step 1.5: Classify Feature as MAJOR or MINOR",
    "",
    "**CRITICAL**: Determine if this feature requires full TDD pipeline (MAJOR) or quick implementation (MINOR).",
    "",
    "**Read** `feature_spec.md` and extract:",
    "- Estimated effort (days)",
    "- Estimated LOC (lines of code)",
    "- New dependencies required (libraries, MCPs)",
    "- Breaking changes (API modifications)",
    "- Integration points (GUI, CLI, pipeline, MCP)",
    "- Extension of existing feature (Feature 01-23)",
    "",
    "**Apply 6-Criteria Test** (ALL must pass for MINOR):",
    "",
    "| Criterion | Threshold | Status |",
    "|-----------|-----------|--------|",
    "| 1. Effort | ‚â§1 day | ‚úÖ/‚ùå |",
    "| 2. LOC | ‚â§150 lines | ‚úÖ/‚ùå |",
    "| 3. Dependencies | No new libraries/MCPs | ‚úÖ/‚ùå |",
    "| 4. Breaking Changes | None (additive only) | ‚úÖ/‚ùå |",
    "| 5. Integration Points | Single (GUI-only OR CLI-only) | ‚úÖ/‚ùå |",
    "| 6. Extends Existing | Yes (enhances Feature NN) | ‚úÖ/‚ùå |",
    "",
    "**Classification Logic**:",
    "- **ALL 6 ‚úÖ** ‚Üí MINOR Feature (quick add, 0.5-1 day, stub-driven)",
    "- **ANY ‚ùå** ‚Üí MAJOR Feature (full pipeline, plan.md, tasks.md, TDD)",
    "",
    "**Output**:",
    "",
    "```markdown",
    "## Feature Classification",
    "",
    "**Feature**: {NN}_{feature_name}",
    "**Title**: {title}",
    "",
    "### Classification Criteria Analysis",
    "",
    "| Criterion | Threshold | Actual | Status |",
    "|-----------|-----------|--------|--------|",
    "| Effort | ‚â§1 day | {X} days | ‚úÖ/‚ùå |",
    "| LOC | ‚â§150 | ~{Y} LOC | ‚úÖ/‚ùå |",
    "| New Dependencies | None | {list or \"None\"} | ‚úÖ/‚ùå |",
    "| Breaking Changes | None | {list or \"None\"} | ‚úÖ/‚ùå |",
    "| Integration Points | 1 | {count}: {list} | ‚úÖ/‚ùå |",
    "| Extends Existing | Yes | Feature {NN} or \"No\" | ‚úÖ/‚ùå |",
    "",
    "### Classification Result",
    "",
    "**Type**: {MAJOR ‚≠ê / MINOR üîπ}",
    "",
    "**Reasoning**: {If MINOR: \"All 6 criteria met: quick add to existing {module}.\" | If MAJOR: \"Criterion {N} failed: {reason}.\"}",
    "",
    "**Workflow Path**:",
    "- {MAJOR: \"Full TDD pipeline (plan.md, tasks.md, manual test guide)\" | MINOR: \"Simplified workflow (stub-driven, quick implementation)\"}",
    "```",
    "",
    "**‚è∏Ô∏è CHECKPOINT**: If you discover **multiple features** (both MAJOR and MINOR), present **user choice prompt** before proceeding:",
    "",
    "```markdown",
    "## Multiple Features Found",
    "",
    "I found both MAJOR and MINOR features ready for implementation:",
    "",
    "### 1. ‚≠ê MAJOR: Feature {NN} - {title}",
    "- **Effort**: {X} days",
    "- **Classification**: {criterion that failed}",
    "- **Workflow**: Full TDD pipeline (plan.md, tasks.md, 2-5 days)",
    "- **Output**: `docs/agentic_feature_implementation/{NN}_{name}/` (full folder)",
    "",
    "### 2. üîπ MINOR: Feature {MM} - {title}",
    "- **Effort**: {Y} days (‚â§1 day)",
    "- **Classification**: All 6 criteria met ‚úÖ",
    "- **Workflow**: Quick add (stub-driven, 0.5-1 day)",
    "- **Output**: `minor_features/{MM}_{name}.md` (stub only)",
    "",
    "**Which feature would you like to focus on?**",
    "- Enter **1** for MAJOR feature (full pipeline)",
    "- Enter **2** for MINOR feature (quick add)",
    "",
    "**Your choice**: {1 or 2}",
    "```",
    "",
    "**After user selection**: Proceed with selected feature to Step 2.",
    "",
    "---",
    "",
    "## Step 2: Extract Definition of Done",
    "",
    "**Read** the complete `feature_spec.md` and extract:",
    "",
    "1. **Acceptance Criteria** (from spec)",
    "2. **Files to Create** (from Implementation Plan)",
    "3. **Files to Modify** (from Implementation Plan)",
    "4. **Documentation to Update** (from spec)",
    "",
    "**Gather Workspace Context** (Optional - skip if not needed):",
    "",
    "Use Feature 001 (Workspace Context Gatherer) to understand existing code structure:",
    "",
    "```python",
    "from prompt_automation.workspace.context_gatherer import ContextGatherer",
    "from pathlib import Path",
    "",
    "gatherer = ContextGatherer(Path.cwd())",
    "context = gatherer.gather_for_feature(\"{feature_title}\")  # Returns LLM-ready Markdown",
    "```",
    "",
    "**When to skip**:",
    "- Small changes (1-2 files, no workspace context needed)",
    "- Documentation-only work (README, docs updates)",
    "- Very large workspaces (>5000 files, use manual search)",
    "",
    "**How to disable**:",
    "```python",
    "# Skip indexing (use live search only)",
    "gatherer = ContextGatherer(Path.cwd(), use_index=False)",
    "",
    "# Or set environment variable",
    "# export PA_SKIP_WORKSPACE_INDEX=1",
    "```",
    "",
    "**Context provides**:",
    "- Related files and functions",
    "- Existing patterns to reuse",
    "- Integration points",
    "- Relevant tests",
    "",
    "**Derive DoD**:",
    "- Map each acceptance criterion ‚Üí test case",
    "- Add standard checks (coverage ‚â•85%, existing tests pass, docs updated)",
    "",
    "**Output**:",
    "",
    "```markdown",
    "## Scope & Definition of Done",
    "",
    "**Purpose**: {1-2 sentence summary}",
    "",
    "**Deliverables**:",
    "- Create: `{file1.py}` - {purpose}",
    "- Modify: `{file2.py}` - {changes}",
    "- Update: `README.md`, `CHANGELOG.md`",
    "",
    "**Definition of Done**:",
    "- [ ] {Acceptance criterion 1} ‚Üí Test: `tests/{path}/test_{name}.py::{test_fn}`",
    "- [ ] {Acceptance criterion 2} ‚Üí Test: `tests/{path}/test_{name}.py::{test_fn}`",
    "- [ ] Coverage ‚â•85% for new modules",
    "- [ ] All existing tests pass",
    "- [ ] Documentation updated",
    "- [ ] Feature flag implemented (default OFF)",
    "",
    "**Non-Goals** (Out of Scope):",
    "- {Item 1}",
    "- {Item 2}",
    "```",
    "",
    "---",
    "",
    "## Step 3: Assess Risks",
    "",
    "**Analyze** impact:",
    "",
    "1. **Public API changes?** ‚Üí HIGH RISK",
    "2. **Core flow changes?** ‚Üí HIGH RISK  ",
    "3. **New dependencies?** ‚Üí MEDIUM RISK",
    "4. **Data/schema changes?** ‚Üí MEDIUM RISK",
    "",
    "**Use Workspace Context** (if gathered in Step 2):",
    "- Identify files that import modules to be modified (breaking change risk)",
    "- Find similar features to reuse patterns (reduce risk)",
    "- Locate existing tests to extend (integration risk)",
    "",
    "**Check** spec for \"Critical Questions & Risks\" section.",
    "",
    "**Output**:",
    "",
    "```markdown",
    "## Risk Assessment",
    "",
    "**Risk Level**: {HIGH / MEDIUM / LOW}",
    "",
    "**High Risks**:",
    "1. {Risk title}",
    "   - Issue: {description}",
    "   - Impact: {what breaks}",
    "   - Mitigation: {specific action}",
    "",
    "**Medium Risks**:",
    "{same format}",
    "",
    "**Unknowns**:",
    "- {Question} ‚Üí Assume: {assumption} ‚Üí Validate: {how}",
    "```",
    "",
    "---",
    "",
    "## Step 4: Generate Approval Spec",
    "",
    "**Summarize** Steps 2-3 for stakeholder review.",
    "",
    "**Output**:",
    "",
    "```markdown",
    "## Approval Spec",
    "",
    "**Feature**: {title}",
    "**Estimated Effort**: {hours from spec}",
    "**Risk Level**: {HIGH/MEDIUM/LOW}",
    "",
    "**Summary**: {2-3 sentences describing what will change}",
    "",
    "**Impact**:",
    "- Files: {N files created, M modified}",
    "- Public APIs: {yes/no - details}",
    "- Dependencies: {yes/no - list}",
    "- Breaking changes: {yes/no - details}",
    "",
    "**High-Risk Items**: {list from Step 3}",
    "",
    "---",
    "",
    "**Approval Options**:",
    "",
    "1. **Approve - Direct Implementation** (Phase 2a)",
    "   - AI implements code using TDD",
    "   - Timeline: {estimate}",
    "   - Next: Run Phase 2a (Template 13024)",
    "",
    "2. **Approve - Generate Meta-Prompt** (Phase 2b)",
    "   - AI generates implementation guide",
    "   - You implement manually or with external LLM",
    "   - Next: Run Phase 2b (Template 13016)",
    "",
    "3. **Request Changes**",
    "   - Specify edits ‚Üí regenerate this approval spec",
    "",
    "4. **Defer Feature**",
    "   - Move to `_archive/deferred/`",
    "",
    "**Your decision**: {1, 2, 3, or 4}",
    "```",
    "",
    "**‚è∏Ô∏è STOP HERE - BRANCH DECISION REQUIRED**",
    "",
    "Wait for user's approval decision. If they choose Option 1 or 2, proceed to Step 5 to create the state file.",
    "",
    "---",
    "",
    "## Step 5: Create State File",
    "",
    "**After approval**, create the state file for Phase 2 handoff.",
    "",
    "**File Path**: `docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase1.json`",
    "",
    "**Why in feature folder?**",
    "- Version controlled with the feature spec",
    "- Portable across machines (git pull ‚Üí resume)",
    "- Editable for cross-device collaboration",
    "",
    "**JSON Structure**:",
    "",
    "```json",
    "{",
    "  \"_resume_instructions\": {",
    "    \"message\": \"This feature implementation was paused. To resume:\",",
    "    \"command\": \"prompt-automation --template 13024 --var 'feature_id={feature_id}'\",",
    "    \"alternative\": \"In Copilot Chat, say: 'Resume feature {NN} implementation'\",",
    "    \"last_checkpoint\": \"Phase 1 complete - approval granted for {direct AI / meta-prompt} implementation\",",
    "    \"next_step\": \"Phase 2{a/b}: {Implementation / Meta-prompt generation}\"",
    "  },",
    "  \"phase\": 1,",
    "  \"feature_id\": \"{feature_id_from_spec}\",",
    "  \"feature_folder\": \"{NN}_{feature_name}\",",
    "  \"feature_title\": \"{title}\",",
    "  \"spec_path\": \"docs/agentic_feature_implementation/{NN}_{feature_name}/feature_spec.md\",",
    "  \"timestamp\": \"{ISO 8601 timestamp}\",",
    "  \"approval_decision\": {1 or 2},",
    "  \"feature_classification\": \"{MAJOR | MINOR}\",",
    "  \"classification_reasoning\": \"{explanation}\",",
    "  \"classification_criteria\": {",
    "    \"effort_days\": {N},",
    "    \"estimated_loc\": {N},",
    "    \"new_dependencies\": {true | false},",
    "    \"breaking_changes\": {true | false},",
    "    \"integration_points\": {N},",
    "    \"extends_existing\": \"{Feature NN or null}\"",
    "  },",
    "  \"workflow_path\": \"{simplified | full}\",",
    "  \"scope\": {",
    "    \"purpose\": \"{brief summary}\",",
    "    \"files_to_create\": [\"{file1}\", \"{file2}\"],",
    "    \"files_to_modify\": [",
    "      {\"path\": \"{file}\", \"changes\": \"{description}\"}",
    "    ],",
    "    \"docs_to_update\": [\"README.md\", \"CHANGELOG.md\"]",
    "  },",
    "  \"dod\": [",
    "    {\"criterion\": \"{description}\", \"test\": \"{test_path}\", \"met\": false}",
    "  ],",
    "  \"risks\": {",
    "    \"level\": \"{HIGH/MEDIUM/LOW}\",",
    "    \"high\": [{\"title\": \"...\", \"mitigation\": \"...\"}],",
    "    \"medium\": [],",
    "    \"unknowns\": []",
    "  },",
    "  \"estimate_hours\": {N}",
    "}",
    "```",
    "",
    "**ACTION**: Use a tool or write command to create this file.",
    "",
    "**Confirmation**:",
    "",
    "```markdown",
    "## ‚úÖ Phase 1 Complete",
    "",
    "**State File Created**: `docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase1.json`",
    "",
    "**Next Steps - BRANCH DECISION**:",
    "",
    "You chose: **Option {1 or 2}**",
    "",
    "### Path A: Direct AI Implementation (Template 13024)",
    "",
    "AI will implement using TDD cycle. Run:",
    "",
    "```bash",
    "# Generate Phase 2a instructions",
    "./scripts/feature_workflow_copilot.sh --phase 2 {feature_id}",
    "",
    "# OR directly with prompt-automation CLI",
    "prompt-automation --template 13024 --var \"feature_id={feature_id}\"",
    "```",
    "",
    "### Path B: Meta-Prompt Generation (Template 13016)",
    "",
    "AI generates detailed guide, you implement manually. Run:",
    "",
    "```bash",
    "prompt-automation --template 13016 --var \"feature_id={feature_id}\"",
    "```",
    "",
    "**‚ö†Ô∏è STOP HERE**: Choose your path (A or B) and run the appropriate command above.",
    "```",
    "",
    "---",
    "",
    "## Quality Checklist",
    "",
    "Before finalizing, verify:",
    "- [ ] Feature discovered and dependencies validated",
    "- [ ] DoD is measurable (each criterion has a test)",
    "- [ ] All HIGH and MEDIUM risks have mitigations",
    "- [ ] Approval spec is concise (<500 words)",
    "- [ ] State file JSON is valid and complete",
    "- [ ] User has confirmed approval decision"
  ],
  "metadata": {
    "path": "LLM/Code/Feature/feature_discovery_planner.json",
    "tags": ["feature", "planning", "discovery", "workflow", "phase1"],
    "version": 2.0,
    "render": "markdown",
    "share_this_file_openly": true,
    "last_edited": "2025-10-02T00:00:00Z",
    "workflow_phase": 1,
    "depends_on_templates": [],
    "produces_state_for": [13024, 13016]
  }
}
