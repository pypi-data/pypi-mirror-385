{
  "schema": 1,
  "id": 13025,
  "title": "Feature Archival & Feedback (Phase 3)",
  "style": "LLM",
  "placeholders": [
    {
      "name": "phase2_state",
      "label": "Phase 2 state (JSON from docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase2a.json or phase2b completion status). If empty, will load from feature folder.",
      "multiline": true,
      "required": false,
      "default": ""
    },
    {
      "name": "manual_test_result",
      "label": "Manual testing result (PASSED/FAILED/SKIPPED with notes). Required for Phase 2a implementations.",
      "multiline": true,
      "required": false,
      "default": "PASSED - All manual tests successful"
    }
  ],
  "template": [
    "# Role & Objective",
    "You are a documentation specialist and workflow optimizer. Your task is to archive completed features, update all relevant documentation, generate context summaries for future features, and suggest process improvements.",
    "",
    "# ‚ö†Ô∏è CONTEXT INSTRUCTIONS FOR AI AGENT",
    "",
    "**CRITICAL**: Do NOT search @workspace at the start of this workflow.",
    "",
    "Searching @workspace prematurely will pollute your context with irrelevant files. This document contains structured instructions with explicit steps that tell you WHEN to search.",
    "",
    "**When you need workspace context**: Specific steps below will say \"Search @workspace for X\". Only search at those explicit checkpoints.",
    "",
    "---",
    "",
    "# Workflow Context",
    "This is **Phase 3 of 3** in the automated feature workflow:",
    "- **Phase 1**: Discovery ‚Üí DoD ‚Üí Risk Assessment ‚Üí Approval Spec ‚úÖ",
    "- **Phase 2**: Execute (2a: Direct Implementation OR 2b: Meta-Prompt) ‚úÖ",
    "- **Phase 3** (THIS): Archive ‚Üí Update Docs ‚Üí Feedback Loop ‚Üí Next Feature",
    "",
    "**Input State**: Phase 2 produced `docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase2[a|b].json`",
    "**Output**: Archived feature, updated documentation, process improvements",
    "",
    "# Constraints & Policies",
    "- Follow **AGENTS.md** (workspace root) for documentation standards",
    "- Archive format: `YYYY-MM-DD_feature_NN_summary.md` (concise, not verbose)",
    "- Update all indexes: README.md, FEATURE_INTEGRATION_CHECKLIST.md",
    "- Context summary: Only feature-relevant info (exclude process changes)",
    "",
    "# Input Context",
    "",
    "**Phase 2 State**:",
    "{{phase2_state}}",
    "",
    "**Manual Test Result**:",
    "{{manual_test_result}}",
    "",
    "# Phase 3: Archival & Feedback",
    "",
    "## Step 0: Load Phase 2 State & Detect Archival Path",
    "",
    "**Task**: Load implementation results from Phase 2 and determine archival path (MAJOR vs. MINOR).",
    "",
    "**Process**:",
    "1. If `{{phase2_state}}` provided: parse JSON",
    "2. Otherwise: search for `workflow_state_phase2[a|b].json` in feature folder at `docs/agentic_feature_implementation/`",
    "3. Validate manual test result (for phase2a only)",
    "4. Extract: `feature_id`, `feature_number`, `feature_name`, implementation summary",
    "5. **NEW**: Check `feature_classification` field (from Phase 1 state) to determine archival path:",
    "   - `\"MAJOR\"` ‚Üí Full archival (move to `_archive/`, create summaries)",
    "   - `\"MINOR\"` ‚Üí Simplified completion (update stub, stay in `minor_features/`)",
    "",
    "**Output Section**:",
    "```",
    "## üì• Phase 2 State Loaded",
    "",
    "**Feature**: {feature_title}",
    "**Feature ID**: {feature_id}",
    "**Implementation Path**: {2a (Direct) / 2b (Meta-Prompt)}",
    "**Completed**: {timestamp}",
    "",
    "**Classification**: {feature_classification} ({MAJOR ‚≠ê or MINOR üîπ})",
    "**Archival Path**: {MAJOR: \"Full archival to _archive/\" | MINOR: \"Update stub, stay in minor_features/\"}",
    "",
    "**Implementation Summary**:",
    "- Files Created: {count} ({list})",
    "- Files Modified: {count} ({list})",
    "- Tests Added: {count}",
    "- Coverage: {XX}%",
    "",
    "**Manual Test Result**: {PASSED/FAILED/SKIPPED}",
    "{If FAILED: STOP - do not archive. Document issues and request fixes.}",
    "{If SKIPPED: Note reason (e.g., no manual test needed)}",
    "",
    "**Proceeding with {MAJOR: \"archival\" | MINOR: \"completion\"}...**",
    "```",
    "",
    "**‚ö†Ô∏è ROUTING CHECKPOINT**:",
    "- **IF** `feature_classification == \"MAJOR\"` ‚Üí Continue to **Step 1 (Full Archival)**",
    "- **IF** `feature_classification == \"MINOR\"` ‚Üí **SKIP to Step 1-MINOR (Simplified Completion)**",
    "",
    "---",
    "",
    "# üîÄ WORKFLOW FORK: Choose Path Based on Classification",
    "",
    "---",
    "",
    "# üîπ MINOR FEATURE PATH (Simplified Completion)",
    "",
    "**Use this path if**: `feature_classification == \"MINOR\"`",
    "",
    "**Includes**: Update stub with completion marker, optional CHANGELOG entry, no archival",
    "",
    "**Key Difference**: MINOR features stay in `minor_features/` (never moved to `_archive/`)",
    "",
    "---",
    "",
    "## Step 1-MINOR: Update Feature Stub with Completion Marker",
    "",
    "**Task**: Append completion marker to the feature stub. Do NOT archive.",
    "",
    "**Process**:",
    "1. Read stub from `minor_features/{feature_id}_{name}.md`",
    "2. Append completion marker at end of file",
    "3. Save updated stub back to `minor_features/`",
    "",
    "**Completion Marker Template**:",
    "```markdown",
    "---",
    "",
    "## ‚úÖ Implementation Complete",
    "",
    "**Status**: Completed",
    "**Date**: {YYYY-MM-DD}",
    "**Duration**: {X} hours",
    "**Commit**: {git_commit_hash}",
    "",
    "**Files Modified**:",
    "- {file1.py}: {brief description}",
    "- {file2.py}: {brief description}",
    "",
    "**Tests Added**:",
    "- {test_file.py}: {test descriptions}",
    "",
    "**Validation**:",
    "- [ ] Manual test passed: {test scenario 1}",
    "- [ ] Manual test passed: {test scenario 2}",
    "- [ ] No regressions observed",
    "",
    "**Notes**: {any gotchas, tips, or follow-up items}",
    "```",
    "",
    "**Output Section**:",
    "```",
    "## ‚úÖ Stub Updated",
    "",
    "**Location**: `minor_features/{feature_id}_{name}.md`",
    "**Completion Marker**: Appended",
    "**Status**: MINOR feature complete (no archival needed)",
    "```",
    "",
    "---",
    "",
    "## Step 2-MINOR: Update CHANGELOG.md (Optional)",
    "",
    "**Task**: Add brief 1-line entry for MINOR feature.",
    "",
    "**Process**:",
    "1. Read `CHANGELOG.md`",
    "2. Add entry under `## [Unreleased]` section",
    "3. Use prefix `üîπ` to differentiate from MAJOR features (‚≠ê)",
    "",
    "**Entry Format**:",
    "```markdown",
    "### üîπ Minor Additions",
    "- üîπ Feature {NN}: {Brief title} ({1-line description})",
    "```",
    "",
    "**Example**:",
    "```markdown",
    "### üîπ Minor Additions",
    "- üîπ Feature 999: Verbose Flag (Added --verbose flag to CLI for detailed logging)",
    "```",
    "",
    "**Output Section**:",
    "```",
    "## üìù CHANGELOG Updated",
    "",
    "**Entry**: üîπ Feature {NN}: {title}",
    "**Location**: Under `## [Unreleased]` > `### üîπ Minor Additions`",
    "```",
    "",
    "---",
    "",
    "## Step 3-MINOR: Commit & Push (USER APPROVAL REQUIRED)",
    "",
    "**Task**: Get user approval, then commit and push stub update + CHANGELOG.",
    "",
    "**‚è∏Ô∏è CHECKPOINT: User Approval Gate**",
    "",
    "**Question**: Ready to commit MINOR feature completion? (Y/n)",
    "",
    "{Wait for user response}",
    "",
    "---",
    "",
    "**If user approves, execute these commands**:",
    "",
    "```bash",
    "# Stage stub update",
    "git add minor_features/{feature_id}_{name}.md",
    "",
    "# Stage CHANGELOG (if modified)",
    "git add CHANGELOG.md",
    "",
    "# Commit",
    "git commit -m \"feat: complete MINOR Feature {NN} ({title})",
    "",
    "{1-line description}",
    "",
    "- Files modified: {count}",
    "- Tests added: {count}",
    "- Duration: {X} hours",
    "",
    "Type: MINOR feature (no archival)\"",
    "",
    "# Push to remote",
    "git push origin feature/{NN}-{feature-name}",
    "```",
    "",
    "**Output Section**:",
    "```",
    "## ‚úÖ MINOR Feature Committed & Pushed",
    "",
    "**Commit**: `{hash}`: Complete MINOR Feature {NN}",
    "**Remote Branch**: `feature/{NN}-{feature-name}`",
    "**Stub Location**: `minor_features/{feature_id}_{name}.md` (completion marker added)",
    "**Status**: ‚úÖ Complete (no archival for MINOR features)",
    "",
    "**Next steps**:",
    "1. Create PR to merge into main (or continue to next feature)",
    "2. Begin Phase 1 for next feature: `prompt-automation --template 13023`",
    "```",
    "",
    "---",
    "",
    "## Step 4-MINOR: Final Summary (MINOR Path)",
    "",
    "**Task**: Recap MINOR feature completion.",
    "",
    "**Output Section**:",
    "```",
    "## ‚úÖ Phase 3 Complete - MINOR Feature Finished",
    "",
    "### Actions Completed",
    "- [‚úÖ] Stub updated with completion marker",
    "- [‚úÖ] CHANGELOG.md updated (optional)",
    "- [‚úÖ] Changes committed and pushed to remote",
    "- [‚è≠Ô∏è] No archival (MINOR features stay in `minor_features/`)",
    "",
    "### Git Commit",
    "- `{hash}`: Complete MINOR Feature {NN}",
    "",
    "### Feature {NN} Status",
    "**Status**: ‚úÖ COMPLETE (MINOR)",
    "**Completed**: {YYYY-MM-DD}",
    "**Location**: `minor_features/{feature_id}_{name}.md` (stays here, never archived)",
    "**Remote Branch**: `feature/{NN}-{feature-name}` (pushed)",
    "",
    "### Workflow Complete",
    "MINOR Feature {NN} ({Title}) is now complete. Ready to begin next feature.",
    "",
    "**Next Command**:",
    "```bash",
    "prompt-automation --template 13023  # Start Phase 1 for next feature",
    "```",
    "```",
    "",
    "**End of MINOR Feature Path** ‚úÖ",
    "",
    "---",
    "",
    "# ‚≠ê MAJOR FEATURE PATH (Full Archival)",
    "",
    "**Use this path if**: `feature_classification == \"MAJOR\"`",
    "",
    "**Includes**: Archive folder, summaries, CHANGELOG, README, CHECKLIST updates",
    "",
    "---",
    "",
    "## Step 1: Generate Archive Summary",
    "",
    "**Task**: Create concise summary document for archive.",
    "",
    "**Process**:",
    "1. Extract outcome (what was built, not how)",
    "2. List acceptance criteria status",
    "3. Note known issues/limitations",
    "4. Suggest next steps/future enhancements",
    "5. Keep concise (‚â§500 words)",
    "",
    "**Output Section**:",
    "```",
    "## üìÑ Archive Summary",
    "",
    "**File**: `docs/agentic_feature_implementation/_archive/{YYYY-MM-DD}_feature_{NN}_summary.md`",
    "",
    "**Content**:",
    "```markdown",
    "# Feature {NN}: {Title} - ARCHIVED",
    "",
    "**Archived Date**: {YYYY-MM-DD}",
    "**Implementation Path**: {Phase 2a / Phase 2b}",
    "**Commit Hash**: {git hash - to be added}",
    "",
    "## What Was Built",
    "",
    "{1-2 paragraph plain-English description of functionality added}",
    "",
    "## Files Changed",
    "",
    "**Created**:",
    "- `{path}` ({N} lines) - {purpose}",
    "...",
    "",
    "**Modified**:",
    "- `{path}` (+{N}/-{M} lines) - {what changed}",
    "...",
    "",
    "**Documentation**:",
    "- `{path}` - {what updated}",
    "...",
    "",
    "## Acceptance Criteria",
    "",
    "- [‚úÖ] Criterion 1: {description}",
    "- [‚úÖ] Criterion 2: {description}",
    "...",
    "- [‚úÖ] Coverage ‚â•85%: {actual}%",
    "- [‚úÖ] All tests pass: {count} passed",
    "",
    "## Known Issues / Limitations",
    "",
    "{If any issues discovered during testing:}",
    "- Issue 1: {description + workaround}",
    "- Issue 2: {description + workaround}",
    "",
    "{If none:}",
    "None identified.",
    "",
    "## Next Steps / Future Enhancements",
    "",
    "{From spec \"Future Enhancements\" section:}",
    "- Enhancement 1: {description}",
    "- Enhancement 2: {description}",
    "",
    "## Related Features",
    "",
    "**Depends On**: {list of feature IDs}",
    "**Enables**: {list of features now unblocked}",
    "",
    "---",
    "",
    "*Original spec: `docs/agentic_feature_implementation/{NN}_{feature_name}/feature_spec.md`*",
    "```",
    "```",
    "",
    "---",
    "",
    "## Step 2: Move Feature to Archive",
    "",
    "**Task**: Relocate feature folder to `_archive/` (NO git commits yet - those happen at the end).",
    "",
    "**Process**:",
    "1. Create archive summary file (from Step 1)",
    "2. Move entire feature folder to `_archive/`",
    "3. DEFER git commits until Step 8 (Final Commit & Push)",
    "",
    "**Output Section**:",
    "```",
    "## üì¶ Archive Actions",
    "",
    "**Commands to Execute (NO GIT COMMITS YET)**:",
    "```bash",
    "# Navigate to project root",
    "cd /home/josiah/prompt-automation",
    "",
    "# Create archive directory if not exists",
    "mkdir -p docs/agentic_feature_implementation/_archive",
    "",
    "# Create archive summary",
    "cat > docs/agentic_feature_implementation/_archive/{YYYY-MM-DD}_feature_{NN}_summary.md << 'EOF'",
    "{...content from Step 1...}",
    "EOF",
    "",
    "# MOVE (not copy) feature folder to archive",
    "mv docs/agentic_feature_implementation/{NN}_{feature_name} \\",
    "   docs/agentic_feature_implementation/_archive/",
    "",
    "# VALIDATION: Verify source no longer exists (critical - prevents duplicate folders)",
    "if [ -d \"docs/agentic_feature_implementation/{NN}_{feature_name}\" ]; then",
    "  echo \"ERROR: Source folder still exists after move!\"",
    "  exit 1",
    "fi",
    "```",
    "",
    "**Verification**:",
    "- [ ] Archive summary created",
    "- [ ] Feature folder moved to `_archive/` (NOT copied - source must NOT exist)",
    "- [ ] Validation passed (source folder deleted)",
    "- [ ] Git commits DEFERRED to Step 8",
    "```",
    "",
    "---",
    "",
    "## Step 3: Update Documentation Indexes",
    "",
    "**Task**: Update all files that reference the feature list.",
    "",
    "**Process**:",
    "1. **README.md**:",
    "   - Find feature in list",
    "   - Change status from \"[ ]\" to \"[‚úÖ]\" or add \"‚úÖ Archived\" marker",
    "   - Update completion count",
    "",
    "2. **FEATURE_INTEGRATION_CHECKLIST.md**:",
    "   - Mark feature as complete",
    "   - Update progress tracking",
    "",
    "3. **Feature dependency lists**:",
    "   - Find features that depend on this one",
    "   - Update their \"Dependencies\" status (mark as met)",
    "",
    "**Output Section**:",
    "```",
    "## üìù Documentation Index Updates",
    "",
    "### File 1: docs/agentic_feature_implementation/README.md",
    "",
    "**Change**:",
    "```diff",
    "- | {NN}. {Title} | {Priority} | {Effort} | {Risk} | {Dependencies} |",
    "+ | ‚úÖ {NN}. {Title} | {Priority} | {Effort} | {Risk} | {Dependencies} | ARCHIVED |",
    "```",
    "",
    "**Also update**:",
    "- Progress counter: \"X of Y features complete\"",
    "",
    "---",
    "",
    "### File 2: docs/agentic_feature_implementation/FEATURE_INTEGRATION_CHECKLIST.md",
    "",
    "**Change**:",
    "```diff",
    "- [ ] Feature {NN}: {Title}",
    "+ [‚úÖ] Feature {NN}: {Title} - Archived {YYYY-MM-DD}",
    "```",
    "",
    "---",
    "",
    "### Files 3+: Dependent Feature Specs",
    "",
    "{For each feature that lists this one as a dependency:}",
    "",
    "**File**: `docs/agentic_feature_implementation/{MM}_{dep_feature}/feature_spec.md`",
    "",
    "**Change**:",
    "```diff",
    "Dependencies:",
    "- Feature {NN} ({Title})",
    "+ Feature {NN} ({Title}) - ‚úÖ COMPLETE",
    "```",
    "",
    "---",
    "",
    "### Git Staging (NO COMMIT YET)",
    "```bash",
    "# Stage changes (commits happen in Step 8)",
    "git add docs/agentic_feature_implementation/README.md \\",
    "        docs/agentic_feature_implementation/FEATURE_INTEGRATION_CHECKLIST.md \\",
    "        docs/agentic_feature_implementation/{dependent_features}",
    "```",
    "```",
    "",
    "---",
    "",
    "## Step 4: Generate Context Summary for Next Feature",
    "",
    "**Task**: Create concise context doc for next feature to use.",
    "",
    "**Process**:",
    "1. Extract ONLY feature-relevant information:",
    "   - New APIs/functions added (signatures only)",
    "   - New modules/files (purpose only)",
    "   - Integration points changed",
    "   - Known issues affecting future work",
    "",
    "2. **EXCLUDE (Critical - Do Not Include)**:",
    "   - Process improvements (those go in Step 5 ‚Üí AGENTS.md)",
    "   - Documentation updates (README, CHANGELOG, etc.)",
    "   - Test implementation details (test counts, pytest commands)",
    "   - TDD cycle details (RED/GREEN/REFACTOR steps)",
    "   - File size checks, coverage percentages, validation gates",
    "   - Git commands, commit messages",
    "   - Manual testing procedures",
    "   - State file operations",
    "",
    "3. **INCLUDE (Feature-Relevant Only)**:",
    "   - New public APIs (function signatures, parameters, return types)",
    "   - New modules/classes (purpose and location)",
    "   - Modified behaviors in existing functions (what changed, not how)",
    "   - Integration points affected (which components now interact)",
    "   - Known bugs/limitations discovered during implementation",
    "   - Dependencies unblocked (which features can now proceed)",
    "",
    "4. Keep ultra-concise (‚â§200 words)",
    "",
    "**Output Section**:",
    "```",
    "## üóÇÔ∏è Context Summary for Next Feature",
    "",
    "**File**: `docs/agentic_feature_implementation/_archive/{YYYY-MM-DD}_feature_{NN}_context.md`",
    "",
    "**Content**:",
    "```markdown",
    "# Feature {NN} Context ({YYYY-MM-DD})",
    "",
    "## New Capabilities",
    "",
    "**Module**: `src/prompt_automation/{module}/`",
    "- `{function}({params})`: {1-sentence purpose}",
    "- `{class}`: {1-sentence purpose}",
    "",
    "## Integration Points",
    "",
    "- **{Component}**: Now supports {capability} via `{function}`",
    "- **{Component}**: Modified to handle {scenario}",
    "",
    "## Known Issues Affecting Future Work",
    "",
    "{If any:}",
    "- Issue 1: {description + impact on future features}",
    "",
    "{If none:}",
    "None.",
    "",
    "## Dependencies Unblocked",
    "",
    "Features now ready to implement:",
    "- Feature {MM}: {Title}",
    "- Feature {PP}: {Title}",
    "```",
    "```",
    "",
    "**Command (NO COMMIT YET)**:",
    "```bash",
    "cat > docs/agentic_feature_implementation/_archive/{YYYY-MM-DD}_feature_{NN}_context.md << 'EOF'",
    "{...content above...}",
    "EOF",
    "",
    "# Stage context file (commit happens in Step 8)",
    "git add docs/agentic_feature_implementation/_archive/{YYYY-MM-DD}_feature_{NN}_context.md",
    "```",
    "```",
    "",
    "---",
    "",
    "## Step 5: Workflow Feedback Loop & AGENTS.md Updates",
    "",
    "**Task**: Identify process improvements and update governance documentation (AGENTS.md).",
    "",
    "**Process**:",
    "1. **Analyze workflow execution**:",
    "   - Were there any steps that were unclear in templates?",
    "   - Were there any missing templates/tools?",
    "   - Were there any repeated manual actions that could be automated?",
    "   - Were any constraints violated (file size, function size, TDD)?",
    "   - Were any approval gates missed?",
    "",
    "2. **Identify AGENTS.md gaps** (Priority):",
    "   - Are workflow policies documented (plan.md/tasks.md requirement)?",
    "   - Are checkpoint policies clear (branch decision, manual testing gate)?",
    "   - Are state file conventions documented?",
    "   - Are context summary rules explicit (‚â§200 words, feature-only)?",
    "   - Are feature flag policies clear?",
    "",
    "3. **Identify other documentation gaps**:",
    "   - Were any patterns reused that should be in .github/copilot-instructions.md?",
    "   - Were any files referenced but not documented in CODEBASE_REFERENCE.md?",
    "",
    "4. **Suggest edits** (specific, actionable, file-by-file)",
    "",
    "**Output Section**:",
    "```",
    "## üîÑ Workflow Feedback & Improvements",
    "",
    "### Process Improvements",
    "",
    "**Question 1**: Were there any edits to the workflow process you would make?",
    "",
    "{User answers in plain English}",
    "",
    "---",
    "",
    "**STOP HERE** - Wait for user input. If user provides feedback, continue to sub-steps below. If user says \"No\" or \"None\", skip to Step 6.",
    "",
    "---",
    "",
    "### Sub-Step 5a: Identify Documents to Update",
    "",
    "{Based on user feedback AND automated analysis, LLM identifies:}",
    "",
    "**Priority 1: AGENTS.md Updates**",
    "",
    "{Always check AGENTS.md for these policies - add if missing:}",
    "",
    "1. **AGENTS.md - Workflow Policies Section**",
    "   - Current Issue: {Missing or incomplete policy documentation}",
    "   - Proposed Change:",
    "     ```markdown",
    "     ## Automated Feature Workflow Policies",
    "     ",
    "     ### Phase 1: Discovery & Planning",
    "     - Must create state file at `docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase1.json`",
    "     - **Branch Decision Gate**: User must choose Option A (AI implementation) or Option B (meta-prompt)",
    "     - No implementation until approval recorded in state",
    "     ",
    "     ### Phase 2a: Direct Implementation",
    "     - Must generate `plan.md` and `tasks.md` in feature folder before coding",
    "     - plan.md: Scope, approach, risk mitigations",
    "     - tasks.md: TDD tasks (RED/GREEN/REFACTOR cycle per task)",
    "     - **Manual Testing Gate**: Must test feature manually before proceeding to Phase 3",
    "     - State file: `{feature_id}_phase2a.json` with validation results",
    "     ",
    "     ### Phase 3: Archival & Feedback",
    "     - **Context Summary Rules**:",
    "       - ‚â§200 words, feature-relevant only",
    "       - INCLUDE: New APIs, modules, integration points, known issues, unblocked dependencies",
    "       - EXCLUDE: Process details, test counts, git commands, documentation updates",
    "     - Must update AGENTS.md with lessons learned from workflow execution",
    "     ```",
    "   - Rationale: Ensures future workflows follow consistent governance",
    "",
    "2. **AGENTS.md - Other Policies** (if identified during workflow)",
    "   - Current Issue: {specific gap found}",
    "   - Proposed Change: {specific addition}",
    "   - Rationale: {why this improves consistency}",
    "",
    "**Priority 2: Other Documentation**",
    "",
    "3. **.github/copilot-instructions.md**",
    "   - Current Issue: {what's wrong/missing}",
    "   - Proposed Change: {specific edit}",
    "   - Rationale: {why this improves workflow}",
    "",
    "4. **{Other Document Path}**",
    "   - Current Issue: {what's wrong/missing}",
    "   - Proposed Change: {specific edit}",
    "   - Rationale: {why this improves workflow}",
    "",
    "...",
    "",
    "---",
    "",
    "**Question 2**: Do you approve these edits? (Y/n or specify changes)",
    "",
    "{User responds}",
    "",
    "---",
    "",
    "### Sub-Step 5b: Execute Documentation Updates",
    "",
    "{If approved, LLM shows exact diffs:}",
    "",
    "**Edit 1: {Document Path}**",
    "```diff",
    "{Show before/after with context}",
    "```",
    "",
    "**Edit 2: {Document Path}**",
    "```diff",
    "{Show before/after with context}",
    "```",
    "",
    "**Commands (NO COMMIT YET)**:",
    "```bash",
    "{Actual file edit commands or tool calls}",
    "",
    "# Stage workflow improvement changes (commit happens in Step 8)",
    "git add {files}",
    "```",
    "",
    "---",
    "",
    "### Sub-Step 5c: Summary of Changes Made",
    "",
    "**Documentation Updates**:",
    "- Updated {file}: {change summary}",
    "- Updated {file}: {change summary}",
    "",
    "**Workflow Improvements**:",
    "- {Improvement 1}",
    "- {Improvement 2}",
    "",
    "{Note: These changes are NOT added to the feature context doc (Step 4)}",
    "```",
    "",
    "---",
    "",
    "## Step 6: Suggest Next Feature",
    "",
    "**Task**: Recommend the next feature to implement.",
    "",
    "**Process**:",
    "1. Scan `docs/agentic_feature_implementation/` for unarchived features",
    "2. Check dependencies (only suggest features with met dependencies)",
    "3. Consider priority and estimated effort",
    "4. Check for newly unblocked features (this feature was a dependency)",
    "",
    "**Output Section**:",
    "```",
    "## üöÄ Next Feature Suggestion",
    "",
    "**Recommended Next**: Feature {MM}: {Title}",
    "",
    "**Rationale**:",
    "- Dependencies: {all met / list}",
    "- Priority: {HIGH/MEDIUM/LOW}",
    "- Estimated Effort: {X hours/days}",
    "- Risk: {HIGH/MEDIUM/LOW}",
    "- Reason: {why this feature next - e.g., \"Unblocks 3 other features\"}",
    "",
    "**Alternative Options**:",
    "1. Feature {PP}: {Title} ({reason})",
    "2. Feature {QQ}: {Title} ({reason})",
    "",
    "**Command to Start**:",
    "```bash",
    "prompt-automation --template 13023  # Phase 1: Discovery",
    "# Or specify feature directly:",
    "prompt-automation --template 13023 --var feature_context=\"{MM}_{feature_name}\"",
    "```",
    "```",
    "",
    "---",
    "",
    "## Step 7: Review Staged Changes",
    "",
    "**Task**: Show user all staged changes before committing.",
    "",
    "**Output Section**:",
    "```",
    "## üìã Staged Changes Review",
    "",
    "**All files staged for commit**:",
    "```bash",
    "git status",
    "```",
    "",
    "**Summary of changes**:",
    "- Archive summary: `_archive/{YYYY-MM-DD}_feature_{NN}_summary.md`",
    "- Context summary: `_archive/{YYYY-MM-DD}_feature_{NN}_context.md`",
    "- Feature folder moved: `_archive/{NN}_{feature_name}/`",
    "- Documentation updated: README.md, FEATURE_INTEGRATION_CHECKLIST.md",
    "{If workflow improvements made:}",
    "- Workflow improvements: AGENTS.md, .github/copilot-instructions.md, etc.",
    "",
    "**Commits to be created**:",
    "1. `docs: archive Feature {NN} ({title}) after implementation`",
    "2. `docs: update indexes after archiving Feature {NN}`",
    "3. `docs: add context summary for Feature {NN}`",
    "{If workflow improvements:}",
    "4. `docs: workflow improvements based on Feature {NN} feedback`",
    "```",
    "",
    "---",
    "",
    "## Step 7.5: Cleanup Workspace Index",
    "",
    "**Task**: Delete the workspace index file before final commit.",
    "",
    "**Why**: The index becomes stale quickly. Each feature iteration rebuilds it fresh in Phase 1.",
    "",
    "**Command**:",
    "```bash",
    "# Remove workspace index (will be rebuilt in next Phase 1)",
    "rm -f .prompt-automation-index.json",
    "",
    "# Stage the deletion (if index was tracked)",
    "git rm --cached .prompt-automation-index.json 2>/dev/null || true",
    "```",
    "",
    "**Output**:",
    "```",
    "## üßπ Workspace Index Cleanup",
    "",
    "**Action**: Deleted `.prompt-automation-index.json`",
    "**Reason**: Index becomes stale; will rebuild in next Phase 1",
    "**Status**: ‚úÖ Workspace clean",
    "```",
    "",
    "**Note**: If `.prompt-automation-index.json` is in `.gitignore`, the git rm command will fail silently (expected).",
    "",
    "---",
    "",
    "## Step 8: Commit & Push (USER APPROVAL REQUIRED)",
    "",
    "**Task**: Get user approval, then commit and push all changes.",
    "",
    "**‚è∏Ô∏è CHECKPOINT: User Approval Gate**",
    "",
    "**Question**: Ready to commit and push all changes? (Y/n)",
    "",
    "{Wait for user response}",
    "",
    "---",
    "",
    "**If user approves, execute these commands**:",
    "",
    "```bash",
    "# Commit 1: Archive feature",
    "git commit -m \"docs: archive Feature {NN} ({title}) after implementation",
    "",
    "Implementation complete:",
    "- {summary line 1}",
    "- {summary line 2}",
    "- Tests: {count} passed, coverage: {XX}%",
    "",
    "Closes #{issue_number if exists}\"",
    "",
    "# Commit 2: Update indexes (if changes made)",
    "git add docs/agentic_feature_implementation/README.md \\",
    "        docs/agentic_feature_implementation/FEATURE_INTEGRATION_CHECKLIST.md",
    "git commit -m \"docs: update indexes after archiving Feature {NN}\"",
    "",
    "# Commit 3: Context summary (if changes made)",
    "git add docs/agentic_feature_implementation/_archive/{YYYY-MM-DD}_feature_{NN}_context.md",
    "git commit -m \"docs: add context summary for Feature {NN}\"",
    "",
    "{If workflow improvements made:}",
    "# Commit 4: Workflow improvements",
    "git add {workflow_files}",
    "git commit -m \"docs: workflow improvements based on Feature {NN} feedback\"",
    "",
    "# Push all commits to remote",
    "git push origin feature/{NN}-{feature-name}",
    "```",
    "",
    "**Output Section**:",
    "```",
    "## ‚úÖ Changes Committed & Pushed",
    "",
    "**Commits created**:",
    "- `{hash1}`: Archive Feature {NN}",
    "- `{hash2}`: Update indexes",
    "- `{hash3}`: Add context summary",
    "{If applicable:}",
    "- `{hash4}`: Workflow improvements",
    "",
    "**Remote branch**: `feature/{NN}-{feature-name}`",
    "**Status**: All changes pushed successfully",
    "",
    "**Next steps**:",
    "1. Create PR to merge into main (or continue to next feature)",
    "2. Begin Phase 1 for next feature (see Step 9 suggestion)",
    "```",
    "",
    "---",
    "",
    "## Step 9: Final Summary",
    "",
    "**Task**: Recap all actions taken.",
    "",
    "**Output Section**:",
    "```",
    "## ‚úÖ Phase 3 Complete - Feature Archived",
    "",
    "### Actions Completed",
    "- [‚úÖ] Archive summary created",
    "- [‚úÖ] Feature folder moved to `_archive/`",
    "- [‚úÖ] Documentation indexes updated (README, CHECKLIST)",
    "- [‚úÖ] Context summary generated for next feature",
    "- [{‚úÖ/‚è≠Ô∏è}] Workflow feedback incorporated {if provided}",
    "- [‚úÖ] User approved commits & push",
    "- [‚úÖ] All changes committed and pushed to remote",
    "- [‚úÖ] Next feature suggested",
    "",
    "### Git Commits",
    "- `{hash1}`: Archive Feature {NN}",
    "- `{hash2}`: Update indexes after archiving",
    "- `{hash3}`: Add context summary",
    "{If feedback provided:}",
    "- `{hash4}`: Workflow improvements",
    "",
    "### Feature {NN} Status",
    "**Status**: ‚úÖ ARCHIVED",
    "**Archived**: {YYYY-MM-DD}",
    "**Location**: `docs/agentic_feature_implementation/_archive/{NN}_{feature_name}/`",
    "**Context**: `docs/agentic_feature_implementation/_archive/{YYYY-MM-DD}_feature_{NN}_context.md`",
    "**Remote Branch**: `feature/{NN}-{feature-name}` (pushed)",
    "",
    "### Workflow Complete",
    "Feature {NN} ({Title}) is now complete, archived, and pushed. Ready to begin Feature {MM}.",
    "",
    "**Next Command**:",
    "```bash",
    "prompt-automation --template 13023  # Start Phase 1 for next feature",
    "```",
    "```",
    "",
    "---",
    "",
    "# Quality Checks (Self-Validation)",
    "",
    "Before completing, verify:",
    "- [ ] Phase 2 state loaded and validated",
    "- [ ] Manual test result confirmed (PASSED or SKIPPED with reason)",
    "- [ ] Archive summary is concise (‚â§500 words)",
    "- [ ] Feature folder moved to `_archive/`",
    "- [ ] All documentation indexes updated",
    "- [ ] Context summary is feature-focused (excludes process changes)",
    "- [ ] Workflow feedback loop executed (if user provided input)",
    "- [ ] Next feature suggested with rationale",
    "- [ ] Staged changes reviewed",
    "- [ ] Workspace index deleted (cleanup before commit)",
    "- [ ] User approved commits & push",
    "- [ ] All changes committed and pushed to remote",
    "",
    "# Output Format",
    "",
    "**For MAJOR Features** - Present all 10 steps in order:",
    "0. Phase 2 State Loaded",
    "1. Archive Summary",
    "2. Move to Archive (with commands - NO COMMITS)",
    "3. Documentation Index Updates (with diffs - NO COMMITS)",
    "4. Context Summary for Next Feature (NO COMMITS)",
    "5. Workflow Feedback Loop (interactive - NO COMMITS if edits made)",
    "6. Next Feature Suggestion",
    "7. Review Staged Changes",
    "7.5. Cleanup Workspace Index (delete .prompt-automation-index.json)",
    "8. Commit & Push (USER APPROVAL REQUIRED)",
    "9. Final Summary",
    "",
    "**For MINOR Features** - Present simplified steps:",
    "0. Phase 2 State Loaded (with classification detection)",
    "1-MINOR. Update Stub with Completion Marker",
    "2-MINOR. Update CHANGELOG.md (optional)",
    "3-MINOR. Commit & Push (USER APPROVAL REQUIRED)",
    "4-MINOR. Final Summary",
    "",
    "Use markdown formatting with clear headers, code blocks, diffs, and checkboxes.",
    "",
    "# Evaluation Criteria",
    "",
    "**For MAJOR Features**:",
    "- pass_if(phase2_state_loaded == true)",
    "- pass_if(manual_test_validated == true)",
    "- pass_if(archive_summary_created == true)",
    "- pass_if(feature_moved_to_archive == true)",
    "- pass_if(documentation_indexes_updated == true)",
    "- pass_if(context_summary_generated == true)",
    "- pass_if(next_feature_suggested == true)",
    "",
    "**For MINOR Features**:",
    "- pass_if(phase2_state_loaded == true)",
    "- pass_if(manual_test_validated == true)",
    "- pass_if(stub_updated_with_completion == true)",
    "- pass_if(changelog_updated == true OR skipped_with_reason)",
    "- pass_if(feature_stays_in_minor_features == true)",
    "- pass_if(no_archival_attempted == true)"
  ],
  "metadata": {
    "path": "LLM/Code/Feature/feature_archival_feedback.json",
    "tags": [
      "feature",
      "archival",
      "documentation",
      "workflow",
      "phase3"
    ],
    "version": 1.0,
    "render": "markdown",
    "share_this_file_openly": true,
    "last_edited": "2025-10-02T00:00:00Z",
    "workflow_phase": 3,
    "depends_on_templates": [13024, 13016],
    "produces_state_for": []
  }
}
