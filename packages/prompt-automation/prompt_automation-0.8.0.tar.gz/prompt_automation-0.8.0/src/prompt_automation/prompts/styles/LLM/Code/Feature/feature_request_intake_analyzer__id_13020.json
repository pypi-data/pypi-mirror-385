{
  "schema": 1,
  "id": 13020,
  "title": "Feature Request Intake & Analysis",
  "style": "LLM",
  "placeholders": [
    {
      "name": "feature_requests",
      "label": "Feature request(s) - one or multiple. Describe what you want to add (can be rough notes, bullet points, or detailed specs).",
      "multiline": true,
      "required": true,
      "default": ""
    },
    {
      "name": "project_context",
      "label": "Optional: Project-specific context (technology stack, constraints, goals). Leave empty for prompt-automation defaults.",
      "multiline": true,
      "required": false,
      "default": ""
    }
  ],
  "template": [
    "# Feature Request Intake & Analysis System",
    "",
    "# ⚠️ CONTEXT INSTRUCTIONS FOR AI AGENT",
    "",
    "**CRITICAL**: This is a STANDALONE template for feature request analysis. Do NOT search @workspace until Step 2.",
    "",
    "You are a **Feature Architect** analyzing incoming feature requests and preparing them for implementation. Your job is to:",
    "1. Parse and understand feature requests (1 or many)",
    "2. Analyze existing roadmap for conflicts/dependencies/duplicates",
    "3. Suggest optimal placement in feature hierarchy",
    "4. Generate complete feature specs ready for Phase 1 workflow",
    "5. Prioritize and sequence features intelligently",
    "",
    "**Philosophy**: Features should be **small, focused, composable**. One feature = one capability. Break large requests into multiple features if needed.",
    "",
    "---",
    "",
    "# Input: Feature Requests",
    "",
    "{{feature_requests}}",
    "",
    "# Project Context",
    "",
    "{{project_context}}",
    "",
    "---",
    "",
    "# Step 0: Rebuild Workspace Index",
    "",
    "**ALWAYS rebuild the workspace index first for accurate analysis.**",
    "",
    "```bash",
    "prompt-automation --index-workspace",
    "```",
    "",
    "This ensures you have up-to-date file locations, function signatures, and codebase structure.",
    "",
    "---",
    "",
    "# Step 1: Parse Feature Requests",
    "",
    "**Task**: Break down the input into individual, atomic feature requests.",
    "",
    "**Process**:",
    "1. Read `{{feature_requests}}`",
    "2. Identify distinct features (look for separators, numbering, clear boundaries)",
    "3. For each feature, extract:",
    "   - **Core capability** (what does it do?)",
    "   - **User benefit** (why is it needed?)",
    "   - **Rough scope** (files/modules affected)",
    "   - **Dependencies** (what must exist first?)",
    "",
    "**Output Section**:",
    "```markdown",
    "## 📋 Parsed Feature Requests",
    "",
    "Found {N} feature request(s):",
    "",
    "### Request 1: {Short Title}",
    "- **Capability**: {What it does}",
    "- **Benefit**: {Why it's needed}",
    "- **Rough Scope**: {Estimated complexity - Small/Medium/Large}",
    "- **Apparent Dependencies**: {List features that must exist first, or 'None'}",
    "",
    "### Request 2: {Short Title}",
    "...",
    "```",
    "",
    "**⏸️ CHECKPOINT**: Show parsed requests and ask: \"Did I understand correctly? (Y/n)\"",
    "",
    "---",
    "",
    "# Step 2: Analyze Existing Roadmap",
    "",
    "**Task**: Search for existing features, detect conflicts, find dependencies.",
    "",
    "**NOW search @workspace**:",
    "1. List all feature folders in `docs/agentic_feature_implementation/`",
    "2. Exclude `_archive/` and `deferred_features/`",
    "3. For each existing feature:",
    "   - Read `feature_spec.md`",
    "   - Extract: title, purpose, dependencies, files affected",
    "4. Read `FEATURE_INTEGRATION_CHECKLIST.md` for current feature list",
    "",
    "**Use Workspace Context Gatherer** for deep analysis:",
    "```python",
    "from prompt_automation.workspace.context_gatherer import ContextGatherer",
    "from pathlib import Path",
    "",
    "gatherer = ContextGatherer(Path.cwd())",
    "for request in parsed_requests:",
    "    context = gatherer.gather_for_feature(request.title)",
    "    # Analyze: existing code, tests, integration points",
    "```",
    "",
    "**Conflict Detection**:",
    "- **Duplicate**: Does an existing feature already do this?",
    "- **Overlap**: Would this feature compete/conflict with planned features?",
    "- **Dependency**: Does this require features not yet implemented?",
    "- **Supersede**: Does this replace/deprecate existing features?",
    "",
    "**Output Section**:",
    "```markdown",
    "## 🔍 Roadmap Analysis",
    "",
    "**Existing Features** ({N} active, {M} archived):",
    "- 05: Validation Runner (LOW priority, no deps) - Active",
    "- 06: Feature Pipeline Orchestrator (HIGH priority, depends on 05) - Active",
    "- ...",
    "",
    "**Conflict Analysis**:",
    "",
    "### Request 1: {Title}",
    "- ✅ **No conflicts** - Novel capability",
    "- ⚠️ **Overlap with Feature 07** - Both handle code generation (suggest merge or split)",
    "- ❌ **Duplicate of Feature 12** - Already implements this (suggest skip or enhance)",
    "- 🔗 **Depends on Feature 03** - Requires Knowledge Base",
    "",
    "### Request 2: {Title}",
    "...",
    "```",
    "",
    "---",
    "",
    "# Step 3: Suggest Placement & Numbering",
    "",
    "**Task**: Determine optimal location in feature hierarchy.",
    "",
    "**Placement Rules**:",
    "1. **Foundational infrastructure** (config, caching, performance) → Lower numbers (00-04)",
    "2. **Core workflow** (validation, orchestration, agents) → Mid numbers (05-12)",
    "3. **Advanced features** (GUI, analytics, integrations) → Higher numbers (13-22)",
    "4. **Deferred** (uncertain value, low priority, blocked) → `deferred_features/`",
    "",
    "**Numbering Logic**:",
    "- If feature has no deps: suggest next available number in its category",
    "- If feature has deps: place AFTER highest dependency number",
    "- If feature unlocks many others: suggest renumbering to move earlier",
    "",
    "**Folder Naming**:",
    "- Format: `{NN}_{snake_case_name}/`",
    "- Example: `23_api_rate_limiter/`",
    "",
    "**Renumbering Analysis**:",
    "- Check if new foundational features should move existing features higher",
    "- Example: New caching system (03) means current Feature 05+ should shift to 06+",
    "",
    "**Output Section**:",
    "```markdown",
    "## 📍 Placement Analysis",
    "",
    "### Request 1: {Title}",
    "- **Suggested Number**: 23",
    "- **Category**: Advanced Feature",
    "- **Rationale**: Depends on Feature 20 (Performance Manager), no blockers",
    "- **Folder**: `23_{snake_case_name}/`",
    "- **Renumbering Needed**: No",
    "",
    "### Request 2: {Title}",
    "- **Suggested Number**: 03",
    "- **Category**: Foundational Infrastructure",
    "- **Rationale**: No dependencies, enables Features 05-22",
    "- **Folder**: `03_cache_manager/`",
    "- **Renumbering Needed**: ⚠️ YES - Shifts current 03-22 → 04-23",
    "",
    "**Renumbering Plan** (if needed):",
    "```bash",
    "# Current 03 becomes 04",
    "git mv docs/agentic_feature_implementation/03_knowledge_base/ \\",
    "        docs/agentic_feature_implementation/04_knowledge_base/",
    "# Update all references in:",
    "# - FEATURE_INTEGRATION_CHECKLIST.md",
    "# - README.md",
    "# - Dependency lists in other feature_spec.md files",
    "```",
    "```",
    "",
    "---",
    "",
    "# Step 4: Generate Feature Specs",
    "",
    "**Task**: Create complete `feature_spec.md` for each request.",
    "",
    "**Spec Template** (use existing features as reference):",
    "",
    "```markdown",
    "# Feature: {Title}",
    "",
    "**Feature ID**: `{kebab-case-id}`",
    "**Priority**: {HIGH / MEDIUM / LOW}",
    "**Estimated Effort**: {X} days",
    "**Risk Level**: {LOW / MEDIUM / HIGH}",
    "**Dependencies**: {List feature IDs or 'None'}",
    "",
    "---",
    "",
    "## Overview",
    "",
    "{2-3 paragraph description of what this feature does, why it's needed, and how it fits into the project}",
    "",
    "---",
    "",
    "## Critical Questions & Risks",
    "",
    "### ❓ Open Questions",
    "",
    "**Q1: {Question}**",
    "- **Answer**: {Proposed answer or 'TBD'}",
    "- **Reasoning**: {Why this answer}",
    "",
    "### ⚠️ Implementation Risks",
    "",
    "| Risk | Severity | Mitigation |",
    "|------|----------|------------|",
    "| {Risk description} | {LOW/MEDIUM/HIGH} | {How to address} |",
    "",
    "---",
    "",
    "## Requirements",
    "",
    "### Functional Requirements",
    "",
    "1. **{Requirement Name}**",
    "   - Description",
    "   - Acceptance criteria",
    "",
    "### Non-Functional Requirements",
    "",
    "- **Performance**: {Targets}",
    "- **Reliability**: {Targets}",
    "- **Observability**: {What to log/metric}",
    "",
    "---",
    "",
    "## Architecture",
    "",
    "### File Structure",
    "",
    "```",
    "src/{module}/",
    "├── __init__.py",
    "├── {main_module}.py  (~XXX LOC)",
    "├── {helper1}.py      (~XXX LOC)",
    "└── {helper2}.py      (~XXX LOC)",
    "```",
    "",
    "### Class Design",
    "",
    "```python",
    "class {MainClass}:",
    "    \"\"\"Purpose.\"\"\"",
    "    ",
    "    def main_method(self) -> ReturnType:",
    "        \"\"\"Description.\"\"\"",
    "```",
    "",
    "---",
    "",
    "## Implementation Plan",
    "",
    "### Phase 1: {Phase Name}",
    "",
    "**Code**: {Pseudocode or key snippets}",
    "",
    "**Tests**: {Test strategy}",
    "",
    "---",
    "",
    "## Acceptance Criteria",
    "",
    "- [ ] {Criterion 1}",
    "- [ ] {Criterion 2}",
    "- [ ] All tests pass",
    "- [ ] Coverage ≥85%",
    "",
    "---",
    "",
    "## Future Enhancements (Out of Scope)",
    "",
    "1. {Enhancement}",
    "",
    "---",
    "",
    "## Migration Notes",
    "",
    "{How to migrate from old system, or 'N/A - new component'}",
    "",
    "---",
    "",
    "## Rollback Plan",
    "",
    "{How to disable/remove if it causes issues}",
    "```",
    "",
    "**Gather Details**:",
    "- Use workspace context to find similar features (copy their structure)",
    "- Check AGENTS.md for constraints (≤400 LOC/file, ≤75 LOC/function)",
    "- Review project patterns (config system, feature flags, testing approach)",
    "",
    "**Output Section**:",
    "```markdown",
    "## 📄 Generated Feature Specs",
    "",
    "### Feature {NN}: {Title}",
    "",
    "**File**: `docs/agentic_feature_implementation/{NN}_{name}/feature_spec.md`",
    "",
    "```markdown",
    "{...Complete spec content...}",
    "```",
    "",
    "---",
    "",
    "{Repeat for each feature}",
    "```",
    "",
    "---",
    "",
    "# Step 5: Prioritization & Sequencing",
    "",
    "**Task**: Generate a prioritized implementation order.",
    "",
    "**Prioritization Factors**:",
    "1. **Dependency chain**: Foundational features first",
    "2. **Business value**: High-impact features prioritized",
    "3. **Risk**: Low-risk features can be done early for momentum",
    "4. **Effort**: Mix quick wins with larger features",
    "5. **Blocking**: Features that unblock many others go first",
    "",
    "**Sequencing Algorithm**:",
    "```",
    "1. Build dependency graph",
    "2. Topological sort (dependencies first)",
    "3. Within each \"tier\" (features with same dependency depth):",
    "   - Sort by priority (HIGH > MEDIUM > LOW)",
    "   - Then by effort (Small > Medium > Large for momentum)",
    "4. Identify critical path (longest chain)",
    "```",
    "",
    "**Output Section**:",
    "```markdown",
    "## 🎯 Prioritization & Sequencing",
    "",
    "### Priority Matrix",
    "",
    "| Feature | Number | Priority | Effort | Risk | Dependencies | Blocks | Sequence |",
    "|---------|--------|----------|--------|------|--------------|--------|----------|",
    "| Cache Manager | 03 | HIGH | 2d | LOW | None | 05,06,19,20 | **1st** |",
    "| API Rate Limiter | 23 | MEDIUM | 1d | LOW | 03,20 | None | 5th |",
    "| {Feature} | {N} | {H/M/L} | {Xd} | {L/M/H} | {IDs} | {IDs} | {Order} |",
    "",
    "### Recommended Implementation Order",
    "",
    "**Sprint 1** (Foundational):",
    "1. Feature 03: Cache Manager - Unblocks performance features",
    "2. Feature 04: Config Validator - Reduces risk for all features",
    "",
    "**Sprint 2** (Core Workflow):",
    "3. Feature 05: Validation Runner - Already approved, no deps",
    "4. Feature 06: Pipeline Orchestrator - Depends on 05",
    "",
    "**Sprint 3** (Advanced):",
    "5. Feature 23: API Rate Limiter - Depends on 03, 20",
    "6. Feature 24: {New Feature} - Depends on 23",
    "",
    "**Deferred** (Low priority or blocked):",
    "- Feature Request X: {Title} - Reason: Unclear ROI, needs refinement",
    "",
    "### Critical Path",
    "",
    "**Longest Chain**: 03 → 20 → 23 → 24 (4 features, ~8 days)",
    "",
    "**Parallel Tracks**:",
    "- Track A: 03 → 19 → 21 (Caching → Performance → Analytics)",
    "- Track B: 05 → 06 → 10 (Validation → Pipeline → PR Automation)",
    "- Track C: 04 → 07 → 08 (Config → Agent → Test Gen)",
    "",
    "**Recommendation**: Start Track B (already approved) while preparing Track A (higher value).",
    "```",
    "",
    "---",
    "",
    "# Step 6: Detect Deferrals",
    "",
    "**Task**: Identify features that should be deferred.",
    "",
    "**Deferral Criteria**:",
    "- **Unclear scope**: Needs more research/design",
    "- **Low priority**: Nice-to-have, not critical",
    "- **Blocked**: Depends on external factors (API availability, design decision)",
    "- **Risky**: High complexity, uncertain approach",
    "- **Out of scope**: Doesn't fit project goals",
    "",
    "**Deferred Location**: `docs/agentic_feature_implementation/deferred_features/{name}/`",
    "",
    "**Deferred Spec Format**:",
    "```markdown",
    "# Deferred Feature: {Title}",
    "",
    "**Deferred Date**: {ISO date}",
    "**Reason**: {Why deferred}",
    "**Reconsider When**: {Trigger - e.g., 'After Feature 20 complete', 'When API v2 releases'}",
    "",
    "## Original Request",
    "",
    "{Copy of original request}",
    "",
    "## Why Deferred",
    "",
    "{Detailed reasoning}",
    "",
    "## Prerequisites for Activation",
    "",
    "- [ ] {Condition 1}",
    "- [ ] {Condition 2}",
    "```",
    "",
    "**Output Section**:",
    "```markdown",
    "## 🚫 Deferral Analysis",
    "",
    "**Features to Defer** ({N}):",
    "",
    "### 1. {Title}",
    "- **Reason**: Unclear scope - needs design workshop",
    "- **Reconsider When**: After Feature 15 (Template Management) complete",
    "- **Location**: `deferred_features/advanced_template_inheritance/`",
    "",
    "### 2. {Title}",
    "- **Reason**: Low priority - minimal user impact",
    "- **Reconsider When**: Q2 2026 roadmap planning",
    "- **Location**: `deferred_features/custom_theme_editor/`",
    "```",
    "",
    "---",
    "",
    "# Step 7: Generate Approval Report",
    "",
    "**Task**: Summarize everything for stakeholder approval.",
    "",
    "**Output Section**:",
    "```markdown",
    "## ✅ Approval Report",
    "",
    "### Summary",
    "",
    "**Total Requests**: {N}",
    "**Accepted**: {M} features",
    "**Deferred**: {K} features",
    "**Merged**: {X} requests combined into {Y} features",
    "",
    "### Accepted Features",
    "",
    "| # | Feature | Priority | Effort | Sequence | Dependencies |",
    "|---|---------|----------|--------|----------|--------------|",
    "| 03 | Cache Manager | HIGH | 2d | 1st | None |",
    "| 23 | API Rate Limiter | MEDIUM | 1d | 5th | 03, 20 |",
    "| ... | ... | ... | ... | ... | ... |",
    "",
    "### Deferred Features",
    "",
    "| Feature | Reason | Reconsider When |",
    "|---------|--------|-----------------|",
    "| Advanced Template Inheritance | Unclear scope | After Feature 15 |",
    "| Custom Theme Editor | Low priority | Q2 2026 planning |",
    "",
    "### Renumbering Required",
    "",
    "{If yes, show git mv commands}",
    "{If no, state 'No renumbering needed'}",
    "",
    "### Implementation Estimate",
    "",
    "- **Total Effort**: {X} days ({Y} weeks at 1 feature/day)",
    "- **Earliest Start**: Feature {lowest number}",
    "- **Critical Path**: {X} days",
    "- **Parallel Capacity**: {Y} independent tracks",
    "",
    "### Risks & Mitigations",
    "",
    "| Risk | Features Affected | Mitigation |",
    "|------|-------------------|------------|",
    "| {Risk} | {IDs} | {How to address} |",
    "",
    "---",
    "",
    "**Approval Options**:",
    "",
    "1. **Approve All** - Create all feature folders and specs",
    "2. **Approve Subset** - Select specific features (e.g., 'Approve 03, 23 only')",
    "3. **Request Changes** - Modify specs or priorities",
    "4. **Defer All** - Move to deferred_features/ for later review",
    "",
    "**Your decision**: {1, 2, 3, or 4}",
    "```",
    "",
    "**⏸️ STOP HERE**: Wait for approval before Step 8.",
    "",
    "---",
    "",
    "# Step 8: Create Feature Folders & Specs",
    "",
    "**Task**: Write approved features to disk.",
    "",
    "**Process** (for each approved feature):",
    "",
    "1. **Create folder**:",
    "```bash",
    "mkdir -p docs/agentic_feature_implementation/{NN}_{name}",
    "```",
    "",
    "2. **Write feature_spec.md**:",
    "```bash",
    "cat > docs/agentic_feature_implementation/{NN}_{name}/feature_spec.md << 'EOF'",
    "{...generated spec from Step 4...}",
    "EOF",
    "```",
    "",
    "3. **Create deferred specs** (if any):",
    "```bash",
    "mkdir -p docs/agentic_feature_implementation/deferred_features/{name}",
    "cat > docs/agentic_feature_implementation/deferred_features/{name}/deferred_spec.md << 'EOF'",
    "{...deferred spec from Step 6...}",
    "EOF",
    "```",
    "",
    "4. **Update FEATURE_INTEGRATION_CHECKLIST.md**:",
    "- Add new features to the list",
    "- Update numbering if needed",
    "- Mark dependencies",
    "",
    "5. **Update README.md** (if major roadmap change)",
    "",
    "6. **Perform renumbering** (if needed):",
    "```bash",
    "# Execute git mv commands from Step 3",
    "# Update all cross-references",
    "```",
    "",
    "**Output Section**:",
    "```markdown",
    "## 💾 Feature Specs Created",
    "",
    "**Created {N} feature folders:**",
    "",
    "✅ `docs/agentic_feature_implementation/03_cache_manager/feature_spec.md`",
    "✅ `docs/agentic_feature_implementation/23_api_rate_limiter/feature_spec.md`",
    "...",
    "",
    "**Deferred {M} features:**",
    "",
    "📁 `docs/agentic_feature_implementation/deferred_features/advanced_template_inheritance/`",
    "📁 `docs/agentic_feature_implementation/deferred_features/custom_theme_editor/`",
    "",
    "**Updated documentation:**",
    "",
    "✅ `FEATURE_INTEGRATION_CHECKLIST.md` - Added {N} features",
    "✅ `README.md` - Updated roadmap section",
    "{If renumbered: ✅ Renumbered Features 03-22 → 04-23}",
    "",
    "---",
    "",
    "## 🚀 Next Steps",
    "",
    "Your features are ready! To start implementation:",
    "",
    "**For the first feature (Feature {NN}):**",
    "```bash",
    "prompt-automation --template 13023 --var 'feature_context={NN}_{name}'",
    "```",
    "",
    "Or in Copilot Chat:",
    "\"Let's kick off the next feature: {NN}\"",
    "",
    "**Implementation Order**:",
    "1. Feature {NN1}: {Title} - {Effort}",
    "2. Feature {NN2}: {Title} - {Effort}",
    "3. ...",
    "",
    "**Total Timeline**: ~{X} weeks (sequential) or ~{Y} weeks (with parallelization)",
    "```",
    "",
    "---",
    "",
    "# Quality Checklist",
    "",
    "Before finalizing, verify:",
    "- [ ] All feature requests parsed correctly",
    "- [ ] No duplicate features (checked against existing roadmap)",
    "- [ ] Dependencies are valid (no circular deps)",
    "- [ ] Numbering follows logical sequence (deps before dependents)",
    "- [ ] Each spec has measurable acceptance criteria",
    "- [ ] Deferred features have clear reactivation triggers",
    "- [ ] Documentation updated (checklist, README)",
    "- [ ] User approved the plan before writing files",
    "",
    "---",
    "",
    "# Project Agnosticism Notes",
    "",
    "**For use in other projects**:",
    "",
    "1. **Replace paths**:",
    "   - `docs/agentic_feature_implementation/` → your feature folder",
    "   - `FEATURE_INTEGRATION_CHECKLIST.md` → your roadmap doc",
    "",
    "2. **Adapt constraints**:",
    "   - Read project's AGENTS.md or CONTRIBUTING.md for size limits, TDD rules",
    "   - Check for feature flag conventions",
    "",
    "3. **Customize spec template**:",
    "   - Match your project's feature spec format",
    "   - Include project-specific sections (security, compliance, etc.)",
    "",
    "4. **Adjust indexer usage**:",
    "   - If no indexer: use `grep`, `find`, or manual search",
    "   - If different indexer: adapt workspace context gathering",
    "",
    "5. **Prioritization weights**:",
    "   - Adjust factors for your team (security > speed, or cost > features)",
    "",
    "6. **Numbering scheme**:",
    "   - Some projects use YYYYMMDD format, semantic versioning, etc.",
    "   - Adapt to your convention"
  ],
  "metadata": {
    "path": "LLM/Code/Feature/feature_request_intake_analyzer.json",
    "tags": ["feature", "intake", "analysis", "scoping", "roadmap", "planning", "batch"],
    "version": 1.0,
    "render": "markdown",
    "share_this_file_openly": true,
    "last_edited": "2025-10-03T00:00:00Z",
    "workflow_phase": 0,
    "depends_on_templates": [],
    "produces_state_for": [13023],
    "project_agnostic": true
  }
}
