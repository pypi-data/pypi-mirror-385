{
  "schema": 1,
  "id": 12002,
  "title": "Refactorization Meta-Prompt Builder",
  "style": "LLM/Code/Refactor",
  "placeholders": [
    {
      "name": "focus",
      "label": "Optional Focus Areas (e.g., security, compliance, testing, performance, languages to update, modules to restructure, documentation, test coverage, etc.)",
      "multiline": true,
      "default": ""
    }
  ],
  "template": [
    "Objective",
    "Produce a single, comprehensive “refactorization meta-prompt” that a modern LLM can execute to analyze and optimize a codebase without assuming a specific runtime environment or executing untrusted code.",
    "",
    "Context",
    "MUST INCLUDE (verbatim intent from SPEC):",
    "I oftentimes use an LLM to code. I want a model to identify optimizations, security flaws, and ways the code could improve. It should be agnostic of environment, only suggest optimizations, and read the entire codebase and analyze everything in the code for increased speed, security, test coverage, and outdated or inefficient code (i.e. dead code, or code that can be modified and/or optimized). It should identify opportunities for file splits, moving files into relevant directories, and also determining documentation updates relevant to what the code does now.",
    "",
    "Inputs",
    "- Focus Areas (optional): {{focus}}",
    "",
    "Assumptions",
    "- Implementer model has full workspace read-only access, no untrusted code execution.",
    "- If follow-ups go unanswered, proceed with conservative defaults recorded under ASSUMPTIONS and CONSTRAINTS.",
    "- All proposals must be environment-agnostic: suggest changes, diffs, tests, and commands without local setup assumptions.",
    "- Refactoring should favor minimal, safe diffs first; larger extractions must include migration/rollback steps.",
    "- Risk evaluation: perform YOLO-first discovery to surface all possible changes, then default recommendations to SAFE unless user explicitly opts for YOLO or approves risky items.",
    "",
    "Constraints",
    "- Maintain backward compatibility unless explicitly approved.",
    "- File size targets: ≤ 300–400 LOC per file; ≤ 75 LOC per function unless justified.",
    "- Reuse existing logic; prefer extraction (function/module) over appending to large files.",
    "- No secret logging; do not hard-code credentials.",
    "- Do not upgrade/downgrade dependencies unless explicitly requested.",
    "- Treat {{focus}} as authoritative when provided.",
    "",
    "Instructions",
    "Act as a prompt engineer orchestrator. Perform three phases, then output one final meta-prompt:",
    "",
    "- Phase 0 — Codebase Ingestion (silent): Read {{focus}}. Do not emit artifacts.",
    "",
    "- Phase 1 — Questioning Loop (15 total):",
    "  • Exactly 3 rounds of 5 questions each.",
    "  • Questions must progressively refine risk, discovery, and scope.",
    "  • Draw on the **Clarity Checklist** (see below).",
    "  • If the user says “proceed” without answering, continue with conservative defaults.",
    "",
    "Clarity Checklist",
    "- Scope & NON_GOALS; user-visible behavior",
    "- Interfaces (API/CLI/GUI), inputs/outputs, error handling",
    "- Data models/storage & migrations",
    "- Performance/SLOs; hot paths",
    "- Security/Privacy/Compliance (no secrets, least privilege)",
    "- Observability (logs/metrics/traces, alerts)",
    "- Rollout strategy (feature flags, staged rollout)",
    "- Dependencies & compatibility",
    "- Test expectations (coverage, runtime, flakiness)",
    "- Delivery constraints (LoC/file, style, binary size)",
    "- Documentation/change log expectations",
    "- Core functionality guard (public APIs, invariants)",
    "",
    "- Phase 2 — Summarize Risks & Confirm Risk Mode:",
    "  • Summarize proposed changes and breakages.",
    "  • Call out which recommendations may negatively affect stability.",
    "  • Ask the user to confirm risk appetite:",
    "    - “YOLO” = accept risky changes, or",
    "    - “SAFE: <exclusions>” = exclude listed risky changes.",
    "",
    "- Phase 3 — Final Output:",
    "  • Produce a single refactorization meta-prompt (see Output Format).",
    "",
    "Output Format",
    "Emit the following, in order:",
    "",
    "1) QUESTIONS_ROUND_1 (Q1–Q5)",
    "2) QUESTIONS_ROUND_2 (Q6–Q10)",
    "3) QUESTIONS_ROUND_3 (Q11–Q15)",
    "4) SUMMARY_OF_CHANGES_AND_BREAKAGES",
    "   - High-level proposed changes",
    "   - Potential breakages/impacts",
    "   - Risky areas needing explicit approval",
    "5) RISK_CONFIRMATION_PROMPT",
    "   - “YOLO” or “SAFE: <exclusions>”",
    "6) FINAL_META_PROMPT",
    "",
    "BEGIN REFACTORIZATION META-PROMPT",
    "# ROLE & OBJECTIVE",
    "You are the Implementer LLM. Analyze the entire codebase to identify optimizations, security flaws, and improvements. Stay environment-agnostic; propose actionable, minimal-diff refactors to improve speed, security, test coverage, and code health (including dead code removal, file splits, folder reorganization, and documentation updates).",
    "",
    "# INPUTS",
    "- Focus Areas: {{focus}}",
    "- RISK_MODE: <YOLO | SAFE with exclusions>",
    "",
    "# ASSUMPTIONS",
    "- Defaults taken due to unknowns.",
    "- Inferred budgets/policies.",
    "",
    "# NON_GOALS",
    "- Explicit out-of-scope areas.",
    "",
    "# CONSTRAINTS",
    "- Backward compatibility unless approved.",
    "- No secret logging; no credential changes.",
    "- No dependency upgrades/downgrades unless requested.",
    "- File/function size limits (≤400 LOC/file, ≤75 LOC/function).",
    "- Reuse-first; prefer extraction to large new modules.",
    "- Single-purpose modules with capability-based naming.",
    "",
    "# DESIGN_OVERVIEW",
    "- 4–7 bullets: key components, data flow, major constraints.",
    "",
    "# IMPLEMENTATION_PLAN",
    "- Workspace discovery of functions/classes/utilities with file paths/signatures.",
    "- Reuse analysis: existing logic first.",
    "- Size impact assessment (extract if > limits).",
    "- Incremental refactoring steps.",
    "- Ordered plan with flags, migrations, shims.",
    "- Dependency impact map (callers/callees).",
    "- Core change guard: halt & escalate if APIs/invariants shift.",
    "",
    "# DIFFS (PLANNED)",
    "- Per file/module: summary of changes, risk rating.",
    "",
    "# TEST_PLAN",
    "- Acceptance criteria mapped to tests.",
    "- Unit/integration/e2e; security and negative cases.",
    "- Coverage target and max runtime.",
    "- Preconditions: existing tests pass unchanged.",
    "",
    "# VALIDATION",
    "- Exact commands to lint, typecheck, test.",
    "- Smoke checks for critical flows.",
    "",
    "# SECURITY_PRIVACY_REVIEW",
    "- Threat model, secrets handling, authn/z, PII/retention.",
    "",
    "# PERFORMANCE_IMPACT",
    "- Budgets, measurement plan, rollback if P95 worsens.",
    "",
    "# OBSERVABILITY_PLAN",
    "- Logging strategy, metrics, error handling, alerts.",
    "",
    "# ROLLBACK_PLAN",
    "- Feature flags, idempotent rollback, data compatibility.",
    "",
    "# REGRESSION_PREVENTION",
    "- Tests, CI gates, ownership of follow-ups.",
    "",
    "# DIFFSTAT",
    "- Estimated files/LoC changes, risk rating, variances vs constraints.",
    "",
    "# IMPLEMENTER_OUTPUT_PROTOCOL",
    "- WORKSPACE_SEARCH_RESULTS",
    "- EXTRACTION_PLAN",
    "- SUMMARY (plain English)",
    "- DELIVERABLES (files, tests, docs)",
    "- IMPROVEMENT SUGGESTIONS",
    "- CHANGE LOG / RISKS",
    "- TEST RUN INSTRUCTIONS",
    "- LEGACY TESTS PASS PROOF",
    "- REFACTOR_SUMMARY (moved symbols, affected files)",
    "- DEPENDENCY IMPACT REPORT",
    "- STRUCTURE PLAN EVIDENCE",
    "",
    "# DOCUMENTATION UPDATES",
    "- README/CHANGELOG/API docs aligned to new state.",
    "END REFACTORIZATION META-PROMPT",
    "",
    "Quality & Self-Check",
    "- Exactly 15 questions asked in 3 rounds.",
    "- Risks summarized before confirmation.",
    "- YOLO-first discovery, SAFE by default for recommendations.",
    "- Includes DESIGN_OVERVIEW, REGRESSION_PREVENTION, DIFFSTAT.",
    "- Priorities: security > performance > reliability > maintainability.",
    "- All constraints enforced explicitly."
  ],
  "metadata": {
    "path": "LLM/Code/Refactor/refactorization-meta-prompt-builder.json",
    "tags": [
      "refactor",
      "meta-prompt",
      "llm",
      "code",
      "optimization",
      "security"
    ],
    "version": 3.1,
    "render": "markdown",
    "share_this_file_openly": true,
    "last_edited": "{{DATE}}"
  }
}
