{
  "schema": 1,
  "id": 13023,
  "title": "Feature Discovery & P    "**Do you want to implement this feature?** (Y/n)",
    "```",
    "",
    "**WAIT FOR USER CONFIRMATION** before continuing.",
    "",
    "---",g (Phase 1)",
  "style": "LLM",
  "placeholders": [
    {
      "name": "feature_context",
      "label": "Optional: Specific feature folder path or ID. Leave empty for auto-discovery of next feature.",
      "multiline": false,
      "required": false,
      "default": ""
    }
  ],
  "template": [
    "# üéØ Feature Discovery & Planning (Phase 1 of 3)",
    "",
    "**Your Role**: Execute feature discovery, analysis, and approval spec generation.",
    "**Output**: Create state file at `~/.prompt-automation/workflow-state/{feature_id}_phase1.json`",
    "",
    "## üìã Workflow Context",
    "- **Phase 1** (NOW): Discovery ‚Üí DoD ‚Üí Risks ‚Üí Approval ‚Üí **Create State File**",
    "- **Phase 2** (NEXT): Implementation using state file",
    "- **Phase 3** (FINAL): Archive + documentation",
    "",
    "## üîí Constraints (from AGENTS.md)",
    "- File size: ‚â§400 LOC per file; ‚â§75 LOC per function",
    "- Test coverage: ‚â•85%",
    "- TDD required (tests before implementation)",
    "- Feature flags: default OFF for new features",
    "",
    "## üì• Input",
    "Feature context: `{{feature_context}}`",
    "- If provided: Analyze that specific feature",
    "- If empty: Auto-discover next unimplemented feature",
    "",
    "---",
    "",
    "# üöÄ **EXECUTE THESE STEPS**",
    "",
    "## Step 1: Discover Feature",
    "",
    "**ACTION**: Search `@workspace` for the next feature to implement.",
    "",
    "1. **If feature_context provided**: Use `docs/agentic_feature_implementation/{{feature_context}}/`",
    "2. **If empty**: Search for folders in `docs/agentic_feature_implementation/` (exclude `_archive/`)",
    "   - Sort by: Lowest folder number with no blocking dependencies",
    "   - Fallback: Most recently modified",
    "",
    "3. **Read the feature_spec.md file** and extract:",
    "   - Feature ID (from metadata)",
    "   - Title",
    "   - Dependencies (check if each exists in `_archive/`)",
    "",
    "4. **Present discovery results**:",
    "",
    "```markdown",
    "## üîç Feature Discovery Results",
    "",
    "**Selected**: `{NN}_{feature_name}`  ",
    "**Title**: {title_from_spec}  ",
    "**Path**: `docs/agentic_feature_implementation/{NN}_{feature_name}/feature_spec.md`  ",
    "**Dependencies**: {list with status - ‚úÖ met or ‚ùå blocked}  ",
    "**Ready**: {YES if all dependencies met, NO otherwise}",
    "",
    "**Do you want to implement this feature?** (Y/n)",
    "```",
    "",
    "**‚è∏Ô∏è WAIT FOR USER CONFIRMATION** before continuing.
    "",
    "---",
    "",
    "## Step 2: Scope Analysis & DoD Extraction",
    "",
    "**Task**: Parse the feature spec and derive measurable success criteria.",
    "",
    "**Process**:",
    "1. Read complete feature_spec.md",
    "2. Extract key sections:",
    "   - **Overview/Purpose**: What the feature does",
    "   - **Requirements**: Functional + Non-Functional",
    "   - **Acceptance Criteria**: Testable conditions",
    "   - **Deliverables**: Files/modules/docs to create",
    "",
    "3. Derive Definition of Done (DoD):",
    "   - Map each acceptance criterion to a measurable test",
    "   - Identify files to create/modify",
    "   - List documentation to update",
    "   - Extract performance budgets (if any)",
    "",
    "**Output Section**:",
    "```",
    "## üìã Scope Summary",
    "",
    "**Feature Purpose**:",
    "{1-2 sentence summary}",
    "",
    "**Components to Build**:",
    "- {Component 1: description}",
    "- {Component 2: description}",
    "...",
    "",
    "**Files to Create**:",
    "- `{path/to/new_file.py}` - {purpose}",
    "...",
    "",
    "**Files to Modify**:",
    "- `{path/to/existing_file.py}` - {what changes}",
    "...",
    "",
    "**Documentation to Update**:",
    "- `{README.md}` - {section to update}",
    "...",
    "",
    "**Definition of Done (DoD)**:",
    "- [ ] Acceptance Criterion 1: {testable condition}",
    "  - Test: `tests/{path}/test_{name}.py::{test_function}`",
    "- [ ] Acceptance Criterion 2: {testable condition}",
    "  - Test: `tests/{path}/test_{name}.py::{test_function}`",
    "...",
    "- [ ] Coverage ‚â•85% for all new modules",
    "- [ ] All existing tests pass unchanged",
    "- [ ] Documentation updated (README, CODEBASE_REFERENCE, CHANGELOG)",
    "- [ ] Feature flag implemented (default: OFF)",
    "",
    "**Non-Goals** (Explicitly Out of Scope):",
    "- {Item 1}",
    "- {Item 2}",
    "...",
    "```",
    "",
    "---",
    "",
    "## Step 3: Risk Assessment & Unknowns",
    "",
    "**Task**: Identify high-risk items, unknowns, and mitigation strategies.",
    "",
    "**Process**:",
    "1. Review **Critical Questions & Risks** section from spec",
    "2. Analyze architectural impact:",
    "   - Does this change public APIs? (HIGH RISK)",
    "   - Does this change core flows? (HIGH RISK)",
    "   - Does this require new dependencies? (MEDIUM RISK)",
    "   - Does this require database migrations? (MEDIUM RISK)",
    "",
    "3. Identify unknowns:",
    "   - Ambiguous requirements",
    "   - Missing design decisions",
    "   - Unvalidated assumptions",
    "",
    "4. Propose mitigations for each risk",
    "",
    "**Output Section**:",
    "```",
    "## ‚ö†Ô∏è Risk Register",
    "",
    "### High-Risk Items",
    "1. **{Risk Title}**",
    "   - **Issue**: {description}",
    "   - **Impact**: {what breaks if not addressed}",
    "   - **Mitigation**: {specific action}",
    "   - **Decision Needed**: {yes/no + by whom}",
    "",
    "### Medium-Risk Items",
    "{same structure}",
    "",
    "### Low-Risk Items",
    "{same structure}",
    "",
    "### Unknowns & Assumptions",
    "- **Unknown**: {question}",
    "  - **Assumption**: {what we'll assume if not answered}",
    "  - **Validation**: {how to verify assumption}",
    "...",
    "",
    "### Dependencies & External Factors",
    "- {Dependency on Feature X: status}",
    "- {External service Y: availability}",
    "...",
    "```",
    "",
    "---",
    "",
    "## Step 4: Approval Spec Generation",
    "",
    "**Task**: Create a concise approval document for stakeholder review.",
    "",
    "**Process**:",
    "1. Summarize Steps 2-3 into executive summary",
    "2. Highlight changes requiring explicit approval:",
    "   - Public API changes",
    "   - Data model changes",
    "   - Breaking changes",
    "   - Security/privacy impacts",
    "",
    "3. Provide approval options with numbered choices",
    "",
    "**Output Section**:",
    "```",
    "## ‚úÖ Approval Spec",
    "",
    "### What Will Be Built",
    "**Feature**: {title}",
    "**Estimated Effort**: {X hours/days from spec}",
    "**Risk Level**: {HIGH/MEDIUM/LOW}",
    "",
    "**Summary**:",
    "{2-3 sentence plain-English description of what changes}",
    "",
    "**Components Affected**:",
    "- {Module 1}: {impact}",
    "- {Module 2}: {impact}",
    "...",
    "",
    "**Data/Permissions Impact**:",
    "- {Database changes: yes/no - details}",
    "- {Filesystem changes: yes/no - details}",
    "- {Network calls: yes/no - details}",
    "- {New dependencies: yes/no - list}",
    "",
    "**High-Risk Items Requiring Review**:",
    "{List from Step 3, HIGH and MEDIUM only}",
    "",
    "### Approval Options",
    "",
    "**1. Approve - Proceed to Phase 2a (Direct Implementation)**",
    "   - LLM will implement code directly using TDD",
    "   - Expected timeline: {estimate from spec}",
    "   - Manual testing guide provided after implementation",
    "",
    "**2. Approve - Proceed to Phase 2b (Generate Meta-Prompt)**",
    "   - LLM generates comprehensive meta-prompt for external implementer",
    "   - You implement manually or use external LLM (Copilot/GPT-4)",
    "   - Full control over implementation",
    "",
    "**3. Request Changes to Plan**",
    "   - Specify edits: {numbered list of changes requested}",
    "   - LLM will regenerate approval spec",
    "",
    "**4. Defer Feature**",
    "   - Move to `_archive/deferred/`",
    "   - Document reason for deferral",
    "   - Select different feature",
    "",
    "**Please respond with:** `1`, `2`, `3 [changes]`, or `4 [reason]`",
    "```",
    "",
    "---",
    "",
    "## Step 5: State Persistence",
    "",
    "**Task**: Save Phase 1 output to state file for Phase 2 handoff.",
    "",
    "**Process**:",
    "1. Determine state file path:",
    "   - Use `~/.prompt-automation/workflow-state/` (create if missing)",
    "   - Filename: `{feature_id}_phase1.json`",
    "",
    "2. Generate state JSON:",
    "```json",
    "{",
    "  \"phase\": 1,",
    "  \"feature_id\": \"{feature_id}\",",
    "  \"feature_number\": {NN},",
    "  \"feature_name\": \"{feature_name}\",",
    "  \"feature_title\": \"{title}\",",
    "  \"spec_path\": \"docs/agentic_feature_implementation/{NN}_{feature_name}/feature_spec.md\",",
    "  \"approval_decision\": \"{1, 2, 3, or 4}\",",
    "  \"timestamp\": \"{ISO 8601}\",",
    "  \"scope\": {",
    "    \"purpose\": \"{summary}\",",
    "    \"components\": [{\"name\": \"...\", \"description\": \"...\"}],",
    "    \"files_to_create\": [\"path1\", \"path2\"],",
    "    \"files_to_modify\": [{\"path\": \"...\", \"changes\": \"...\"}],",
    "    \"docs_to_update\": [\"README.md\", \"CHANGELOG.md\"]",
    "  },",
    "  \"dod\": [",
    "    {\"criterion\": \"...\", \"test\": \"...\", \"met\": false}",
    "  ],",
    "  \"risks\": {",
    "    \"high\": [{\"title\": \"...\", \"mitigation\": \"...\"}],",
    "    \"medium\": [],",
    "    \"low\": []",
    "  },",
    "  \"dependencies\": [\"feature-01\", \"feature-05\"],",
    "  \"estimate_hours\": 24",
    "}",
    "```",
    "",
    "3. Write state file (show command):",
    "```bash",
    "mkdir -p ~/.prompt-automation/workflow-state",
    "cat > ~/.prompt-automation/workflow-state/{feature_id}_phase1.json << 'EOF'",
    "{...JSON above...}",
    "EOF",
    "```",
    "",
    "**Output Section**:",
    "```",
    "## üíæ Phase 1 Complete - State Saved",
    "",
    "**State File**: `~/.prompt-automation/workflow-state/{feature_id}_phase1.json`",
    "",
    "**Next Steps**:",
    "- If approved Option 1: Run Phase 2a template",
    "- If approved Option 2: Run Phase 2b template",
    "- If Option 3: Regenerate this Phase 1 with changes",
    "- If Option 4: Archive feature as deferred",
    "",
    "**Commands**:",
    "```bash",
    "# Option 1 - Direct Implementation",
    "prompt-automation --template 13024 --load-state {feature_id}",
    "",
    "# Option 2 - Meta-Prompt Generation",
    "prompt-automation --template 13016 --load-state {feature_id}",
    "```",
    "```",
    "",
    "---",
    "",
    "# Quality Checks (Self-Validation)",
    "",
    "Before presenting output, verify:",
    "- [ ] Feature discovery logic is clear and automated",
    "- [ ] DoD criteria are measurable and testable",
    "- [ ] All HIGH risks identified with mitigations",
    "- [ ] Approval spec is concise (<500 words)",
    "- [ ] State file JSON is valid and complete",
    "- [ ] User confirmation prompt is clear (Y/n for auto-discovery)",
    "",
    "# Output Format",
    "",
    "Present all 5 steps in order:",
    "1. Discovery Results (with confirmation prompt)",
    "2. Scope Summary",
    "3. Risk Register",
    "4. Approval Spec",
    "5. State Persistence (with commands)",
    "",
    "Use markdown formatting with clear headers and checkboxes.",
    "",
    "# Evaluation Criteria",
    "",
    "- pass_if(feature_discovered == true)",
    "- pass_if(dod_derived_from_acceptance_criteria == true)",
    "- pass_if(risks_assessed_with_mitigations == true)",
    "- pass_if(approval_spec_generated == true)",
    "- pass_if(state_file_created == true)"
  ],
  "metadata": {
    "path": "LLM/Code/Feature/feature_discovery_planner.json",
    "tags": [
      "feature",
      "planning",
      "discovery",
      "workflow",
      "phase1"
    ],
    "version": 1.0,
    "render": "markdown",
    "share_this_file_openly": true,
    "last_edited": "2025-10-02T00:00:00Z",
    "workflow_phase": 1,
    "depends_on_templates": [],
    "produces_state_for": [13024, 13016]
  }
}
