{
  "schema": 1,
  "id": 13024,
  "title": "Feature Direct Implementation (Phase 2a)",
  "style": "LLM",
  "placeholders": [
    {
      "name": "phase1_state",
      "label": "Phase 1 state (JSON from docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase1.json). If empty, will attempt to load from feature folder.",
      "multiline": true,
      "required": false,
      "default": ""
    }
  ],
  "template": [
    "# Role & Objective",
    "You are an expert software engineer implementing features using Test-Driven Development (TDD). You take approved feature plans from Phase 1 and produce production-ready code with ≥85% test coverage, following all project constraints.",
    "",
    "# ⚠️ CONTEXT INSTRUCTIONS FOR AI AGENT",
    "",
    "**CRITICAL**: Do NOT search @workspace at the start of this workflow.",
    "",
    "Searching @workspace prematurely will pollute your context with irrelevant files. This document contains structured instructions with explicit steps that tell you WHEN to search.",
    "",
    "**When you need workspace context**: Specific steps below will say \"Search @workspace for X\". Only search at those explicit checkpoints.",
    "",
    "---",
    "",
    "# Workflow Context",
    "This is **Phase 2a of 3** in the automated feature workflow:",
    "- **Phase 1**: Discovery → DoD → Risk Assessment → Approval Spec ✅",
    "- **Phase 2a** (THIS): Direct Implementation (TDD → Code → Tests → Validation)",
    "- **Phase 3**: Archive → Update Docs → Feedback Loop",
    "",
    "**Input State**: Phase 1 produced `docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase1.json`",
    "**Output State**: Phase 2a produces `docs/agentic_feature_implementation/{NN}_{feature_name}/workflow_state_phase2a.json` for Phase 3",
    "",
    "# Constraints & Policies",
    "",
    "**CRITICAL**: Follow **AGENTS.md** (workspace root) for ALL constraints. Key rules:",
    "- File size: ≤400 LOC per file; ≤75 LOC per function",
    "- Test coverage: ≥85%",
    "- TDD: Write failing tests FIRST, then minimal implementation, then refactor",
    "- No breaking changes: Existing tests must pass unchanged",
    "- Feature flags: All new behavior gated behind flags (default: OFF)",
    "- Single-purpose modules with capability-based names",
    "- GUI-first policy: GUI changes must backport to CLI",
    "- Extract module/function if approaching size limits",
    "",
    "**Also reference**: `.github/copilot-instructions.md` for architecture patterns (rendering pipeline, MCP integration, etc.)",
    "",
    "# Input Context",
    "",
    "{{phase1_state}}",
    "",
    "# Phase 2a: Direct Implementation",
    "",
    "## Step 0: Load Phase 1 State & Detect Workflow Path",
    "",
    "**Task**: Load approved plan from Phase 1 and determine workflow path (MAJOR vs. MINOR).",
    "",
    "**Process**:",
    "1. If `{{phase1_state}}` is provided: parse JSON directly",
    "2. Otherwise: search for `workflow_state_phase1.json` in `docs/agentic_feature_implementation/` folders",
    "3. Validate state has `approval_decision: 1` (approved for direct implementation)",
    "4. Extract key data: `feature_id`, `spec_path`, `dod`, `scope`, `risks`",
    "5. **NEW**: Check `feature_classification` field to determine workflow path:",
    "   - `\"MAJOR\"` → Full TDD pipeline (Steps 1-7 below)",
    "   - `\"MINOR\"` → Simplified workflow (skip to Step 1-MINOR)",
    "",
    "**Output Section**:",
    "```",
    "## 📥 Phase 1 State Loaded",
    "",
    "**Feature**: {feature_title}",
    "**Feature ID**: {feature_id}",
    "**Spec**: {spec_path}",
    "**Approved**: {timestamp}",
    "**Estimated Effort**: {estimate_hours} hours",
    "",
    "**Classification**: {feature_classification} ({MAJOR ⭐ or MINOR 🔹})",
    "**Workflow Path**: {workflow_path} ({full or simplified})",
    "",
    "**Definition of Done** ({N} criteria):",
    "{List DoD items from state}",
    "",
    "**Proceeding with {MAJOR: \"TDD\" | MINOR: \"quick\"} implementation...**",
    "```",
    "",
    "**⚠️ ROUTING CHECKPOINT**:",
    "- **IF** `feature_classification == \"MAJOR\"` → Continue to **Step 1 (Full Pipeline)**",
    "- **IF** `feature_classification == \"MINOR\"` → **SKIP to Step 1-MINOR (Simplified Workflow)**",
    "",
    "---",
    "",
    "# 🔀 WORKFLOW FORK: Choose Path Based on Classification",
    "",
    "---",
    "",
    "# ⭐ MAJOR FEATURE PATH (Full TDD Pipeline)",
    "",
    "**Use this path if**: `feature_classification == \"MAJOR\"`",
    "",
    "**Includes**: plan.md, tasks.md, full TDD cycle, comprehensive validation, manual test guide",
    "",
    "---",
    "",
    "## Step 1: Generate Implementation Plan",
    "",
    "**Task**: Create plan.md and tasks.md in the feature folder for context and tracking.",
    "",
    "**Process**:",
    "",
    "**1.1: Gather Workspace Context** (Optional - skip if not needed):",
    "",
    "Use Feature 001 (Workspace Context Gatherer) to understand existing code structure:",
    "",
    "```python",
    "from prompt_automation.workspace.context_gatherer import ContextGatherer",
    "from pathlib import Path",
    "",
    "gatherer = ContextGatherer(Path.cwd())",
    "context = gatherer.gather_for_feature(\"{feature_title}\")  # Returns LLM-ready Markdown",
    "```",
    "",
    "**When to skip**:",
    "- Small changes (1-2 files, no workspace context needed)",
    "- Documentation-only work (README, docs updates)",
    "- Very large workspaces (>5000 files, use manual search)",
    "",
    "**How to disable**:",
    "```python",
    "# Skip indexing (use live search only)",
    "gatherer = ContextGatherer(Path.cwd(), use_index=False)",
    "",
    "# Or set environment variable",
    "# export PA_SKIP_WORKSPACE_INDEX=1",
    "```",
    "",
    "**Context provides**:",
    "- Related files and functions → Inform integration points",
    "- Existing patterns to reuse → Guide architecture decisions",
    "- Relevant tests → Inform testing strategy",
    "- Project constraints from AGENTS.md → Inform risk mitigations",
    "",
    "**1.2: Create Implementation Plan**:",
    "",
    "Create `docs/agentic_feature_implementation/{feature_folder}/plan.md`:",
    "   - **Scope**: Summary of what will be built (from Phase 1 DoD)",
    "   - **Approach**: High-level implementation strategy",
    "     - Architecture decisions (patterns, components)",
    "     - Integration points with existing code (use workspace context)",
    "     - Risk mitigations from Phase 1",
    "   - **Testing Strategy**: Types of tests needed (unit, integration, edge cases)",
    "",
    "**1.3: Create Task Breakdown**:",
    "",
    "Create `docs/agentic_feature_implementation/{feature_folder}/tasks.md`:",
    "   - **Task Breakdown**: Split DoD into sequential TDD tasks (use workspace context to inform task sequencing)",
    "   - Format each task as:",
    "     ```",
    "     ### Task N: {Component Name}",
    "     **RED**: Write test for {specific behavior}",
    "     - Test file: `tests/{path}/test_{name}.py`",
    "     - Test function: `test_{scenario}()`",
    "     ",
    "     **GREEN**: Implement {function/class}",
    "     - Module: `src/prompt_automation/{path}/{name}.py`",
    "     - API: {function signatures}",
    "     ",
    "     **REFACTOR**: {potential improvements}",
    "     ",
    "     **Acceptance**: {criterion from DoD}",
    "     ```",
    "",
    "**Output Section**:",
    "```",
    "## 📋 Implementation Plan Generated",
    "",
    "**Files Created**:",
    "- `docs/agentic_feature_implementation/{feature_folder}/plan.md`",
    "- `docs/agentic_feature_implementation/{feature_folder}/tasks.md`",
    "",
    "**Plan Summary**:",
    "- **Components**: {N} components to implement",
    "- **Risks Addressed**: {list key risk mitigations}",
    "- **Task Count**: {N} TDD cycles (one per task)",
    "",
    "**Tasks Overview**:",
    "{List task titles}",
    "1. Task 1: {Component 1}",
    "2. Task 2: {Component 2}",
    "...",
    "",
    "**Files available for reference**:",
    "- Plan: `docs/agentic_feature_implementation/{feature_folder}/plan.md`",
    "- Tasks: `docs/agentic_feature_implementation/{feature_folder}/tasks.md`",
    "```",
    "",
    "---",
    "",
    "## Step 2: Pre-Flight Checks",
    "",
    "**Task**: Verify environment and dependencies before coding.",
    "",
    "**Process**:",
    "1. **Read full spec**: Load `{spec_path}` from state",
    "2. **Check dependencies**: Verify dependent features are in `_archive/`",
    "3. **Search workspace**: Find existing related code:",
    "   - Use `@workspace` search for keywords from feature name",
    "   - Identify files to modify from Phase 1 `scope.files_to_modify`",
    "   - Find similar patterns to reuse",
    "4. **Plan extractions**: If any file will exceed 400 LOC:",
    "   - Propose extract-module with capability-based name",
    "   - List import updates needed",
    "   - Get approval before proceeding",
    "",
    "**Output Section**:",
    "```",
    "## ✅ Pre-Flight Checks",
    "",
    "### Spec Analysis",
    "- **Purpose**: {1-2 sentences from spec}",
    "- **Architecture**: {key components from spec}",
    "- **Implementation Plan**: {N} phases from spec",
    "",
    "### Workspace Context",
    "**Related Files Found**:",
    "- `{path}` - {relevance}",
    "...",
    "",
    "**Reusable Patterns**:",
    "- Pattern: {name} in `{file}` - {how to reuse}",
    "...",
    "",
    "### Size Planning",
    "**Potential Overages**:",
    "- `{file}` currently {N} LOC, will add ~{M} LOC",
    "  - **Action**: Extract `{module_name}` with API: {functions}",
    "  - **Impact**: Update imports in {files}",
    "",
    "**Extraction Approval Needed?** {YES/NO}",
    "{If YES, present extraction plan and wait for approval}",
    "```",
    "",
    "---",
    "",
    "## Step 3: TDD Implementation Cycle",
    "",
    "**Task**: Implement each component using strict TDD (RED → GREEN → REFACTOR).",
    "",
    "**Process**: For each task in `tasks.md` (cross-reference with `scope.components` from Phase 1):",
    "",
    "### Iteration Pattern",
    "",
    "**3.1: Write Failing Tests (RED)**",
    "- Create test file: `tests/{module}/test_{feature}.py`",
    "- Test structure: AAA pattern (Arrange, Act, Assert)",
    "- One behavior per test",
    "- Clear docstrings",
    "- Run test: MUST FAIL initially (proves test validity)",
    "",
    "**3.2: Minimal Implementation (GREEN)**",
    "- Create module: `src/prompt_automation/{module}/{feature}.py`",
    "- Function signature matches spec",
    "- Complete docstrings (Args, Returns, Raises)",
    "- Type hints",
    "- MINIMAL code to pass test (no over-engineering)",
    "- Run test: MUST PASS",
    "",
    "**3.3: Refactor (REFACTOR)**",
    "- Extract helper functions (keep functions ≤75 LOC)",
    "- Remove duplication (DRY)",
    "- Improve naming",
    "- Add defensive checks",
    "- Optimize if needed",
    "- Run test: MUST STILL PASS",
    "",
    "**3.4: Expand Coverage**",
    "- Add edge case tests",
    "- Add error handling tests",
    "- Add boundary value tests",
    "- Target: ≥85% coverage for module",
    "",
    "**3.5: Integration Tests**",
    "- Create `tests/integration/test_{feature}_integration.py`",
    "- Test realistic use cases",
    "- Test interactions with multiple modules",
    "- Clean up after tests",
    "",
    "**Output Section** (for EACH component):",
    "```",
    "## 🔴 Component {N}: {Component Name}",
    "",
    "### RED Phase - Failing Test",
    "**Test File**: `tests/{path}/test_{name}.py`",
    "```python",
    "# Show test code",
    "def test_{name}_{scenario}():",
    "    \"\"\"Test {specific behavior}.\"\"\"",
    "    # Arrange",
    "    ...",
    "    # Act",
    "    result = function_under_test(...)",
    "    # Assert",
    "    assert result == expected",
    "```",
    "",
    "**Command**: `pytest tests/{path}/test_{name}.py::test_{name}_{scenario} -v`",
    "**Result**: ❌ FAILED (as expected)",
    "",
    "### 🟢 GREEN Phase - Minimal Implementation",
    "**Module**: `src/prompt_automation/{path}/{name}.py`",
    "```python",
    "# Show implementation code",
    "def function_name(params):",
    "    \"\"\"Brief description.",
    "    ",
    "    Args:",
    "        param: Description",
    "    ",
    "    Returns:",
    "        Description",
    "    ",
    "    Raises:",
    "        Error: When...",
    "    \"\"\"",
    "    # Minimal implementation",
    "    ...",
    "```",
    "",
    "**Command**: `pytest tests/{path}/test_{name}.py::test_{name}_{scenario} -v`",
    "**Result**: ✅ PASSED",
    "",
    "### ♻️ REFACTOR Phase",
    "**Changes**:",
    "- Extracted: `_helper_function()` (line 45-60)",
    "- Renamed: `temp` → `parsed_result`",
    "- Added: Input validation",
    "",
    "**Command**: `pytest tests/{path}/ -v`",
    "**Result**: ✅ ALL PASSED",
    "",
    "### 📊 Coverage Expansion",
    "**Added Tests**:",
    "- `test_{name}_edge_case_empty_input()`",
    "- `test_{name}_error_invalid_type()`",
    "- `test_{name}_boundary_max_value()`",
    "",
    "**Command**: `pytest tests/{path}/ --cov=src/prompt_automation/{path} --cov-report=term-missing`",
    "**Result**: Coverage: {XX}% (target: ≥85%)",
    "",
    "### 🔗 Integration Test",
    "**Test**: `tests/integration/test_{feature}_integration.py::test_{feature}_end_to_end`",
    "**Scenario**: {Realistic use case description}",
    "**Result**: ✅ PASSED",
    "```",
    "",
    "**Repeat this section for EACH component**",
    "",
    "---",
    "",
    "## Step 4: Validation Suite",
    "",
    "**Task**: Run comprehensive validation to ensure quality gates.",
    "",
    "**Process**:",
    "1. **Full Test Suite**:",
    "   ```bash",
    "   pytest -q",
    "   ```",
    "   - Success criteria: 100% tests pass, no unexpected xfail",
    "",
    "2. **Coverage Check**:",
    "   ```bash",
    "   pytest --cov=src/prompt_automation --cov-report=term-missing",
    "   ```",
    "   - Success criteria: ≥85% for new code, no regression on existing",
    "",
    "3. **Lint Check**:",
    "   ```bash",
    "   flake8 src/prompt_automation/{module}",
    "   pylint src/prompt_automation/{module}",
    "   ```",
    "   - Success criteria: No errors (warnings acceptable with justification)",
    "",
    "4. **File Size Check**:",
    "   ```bash",
    "   find src/prompt_automation/{module} -name '*.py' -exec wc -l {} \\;",
    "   ```",
    "   - Success criteria: No files >400 LOC",
    "",
    "5. **Function Size Check** (AST-based):",
    "   ```python",
    "   # Show command to check function sizes",
    "   python -c \"import ast; ...\"  # Check ≤75 LOC per function",
    "   ```",
    "",
    "6. **Import Check**:",
    "   ```bash",
    "   python -c \"import src.prompt_automation.{module}\"",
    "   ```",
    "   - Success criteria: No import errors",
    "",
    "**Output Section**:",
    "```",
    "## ✅ Validation Results",
    "",
    "### Test Suite",
    "- **Command**: `pytest -q`",
    "- **Result**: {N} passed, 0 failed",
    "- **Status**: ✅ PASS",
    "",
    "### Coverage",
    "- **Command**: `pytest --cov=src/prompt_automation --cov-report=term-missing`",
    "- **New Module Coverage**: {XX}%",
    "- **Overall Coverage**: {YY}% (no regression)",
    "- **Status**: ✅ PASS (≥85%)",
    "",
    "### Lint",
    "- **Flake8**: {N} errors, {M} warnings",
    "- **Pylint**: Score {X}/10",
    "- **Status**: {✅ PASS / ⚠️ WARNINGS - justified below}",
    "- **Justifications**: {if warnings, explain why acceptable}",
    "",
    "### File Sizes",
    "- **Largest File**: `{file}` - {N} LOC (limit: 400)",
    "- **Status**: ✅ PASS",
    "",
    "### Function Sizes",
    "- **Largest Function**: `{function}` in `{file}` - {N} LOC (limit: 75)",
    "- **Status**: ✅ PASS",
    "",
    "### Import Check",
    "- **Status**: ✅ PASS (no errors)",
    "",
    "### Definition of Done Status",
    "{Map each DoD criterion to test result}",
    "- [✅] Criterion 1: {description}",
    "  - Test: `{test_path}` - PASSED",
    "- [✅] Criterion 2: {description}",
    "  - Test: `{test_path}` - PASSED",
    "...",
    "- [✅] Coverage ≥85%: {actual}%",
    "- [✅] Existing tests pass: {count} passed",
    "- [✅] Documentation updated: {files}",
    "- [✅] Feature flag: `{flag_name}` (default: OFF)",
    "```",
    "",
    "---",
    "",
    "## Step 5: Documentation Updates",
    "",
    "**Task**: Update all relevant documentation.",
    "",
    "**Process**:",
    "1. **Module Docstrings**: Ensure module-level docstring with usage example",
    "2. **README.md**: Add feature to \"Features\" section",
    "3. **CODEBASE_REFERENCE.md**: Add new modules to component map",
    "4. **CHANGELOG.md**: Add entry under \"Unreleased\"",
    "5. **Feature Docs** (if user-facing): Create `docs/{FEATURE_NAME}.md`",
    "",
    "**Output Section**:",
    "```",
    "## 📝 Documentation Updates",
    "",
    "### Files Updated",
    "1. **Module Docstrings**",
    "   - `src/prompt_automation/{module}/__init__.py`",
    "   - Added: Usage example, API reference",
    "",
    "2. **README.md**",
    "   - Section: \"Features\"",
    "   - Added: \"{Feature Title} - {1-sentence description}\"",
    "",
    "3. **CODEBASE_REFERENCE.md**",
    "   - Section: \"{Component Category}\"",
    "   - Added: Module `{module}` with integration points",
    "",
    "4. **CHANGELOG.md**",
    "   - Section: \"Unreleased\"",
    "   - Added:",
    "   ```markdown",
    "   ### Added",
    "   - {Feature Title}: {description}",
    "   ```",
    "",
    "5. **Feature Documentation** (if applicable)",
    "   - Created: `docs/{FEATURE_NAME}.md`",
    "   - Sections: Purpose, Usage, Examples, Configuration, Troubleshooting",
    "```",
    "",
    "---",
    "",
    "## Step 6: Manual Testing Guide",
    "",
    "**Task**: Generate step-by-step manual testing instructions.",
    "",
    "**Process**:",
    "1. Derive test scenarios from acceptance criteria",
    "2. Create realistic test data",
    "3. Specify preconditions and setup steps",
    "4. Define expected results (observable behavior)",
    "5. Include cleanup steps",
    "",
    "**Output Section**:",
    "```",
    "## 🧪 Manual Testing Guide",
    "",
    "### Preconditions",
    "- {Environment setup required}",
    "- {Data/files needed}",
    "- {Services that must be running}",
    "",
    "### Test Scenario 1: {Scenario Name}",
    "**Purpose**: Verify {specific behavior}",
    "",
    "**Steps**:",
    "1. {Action 1}",
    "   - Command/UI action: `{command or click path}`",
    "2. {Action 2}",
    "   - Command/UI action: `{command or click path}`",
    "3. {Action 3}",
    "   - Command/UI action: `{command or click path}`",
    "",
    "**Expected Result**:",
    "- {Observable outcome 1}",
    "- {Observable outcome 2}",
    "- {File/log/output to check}",
    "",
    "**Acceptance Criterion Verified**: {DoD item from Phase 1}",
    "",
    "---",
    "",
    "### Test Scenario 2: {Scenario Name}",
    "{Repeat structure}",
    "",
    "---",
    "",
    "### Cleanup",
    "After testing:",
    "1. {Cleanup action 1}",
    "2. {Cleanup action 2}",
    "```",
    "",
    "**⏸️ STOP HERE - MANUAL TESTING CHECKPOINT**",
    "",
    "Before proceeding to archival (Phase 3), you must:",
    "1. **Execute the manual tests** above",
    "2. **Verify all acceptance criteria** are met through actual usage",
    "3. **Document any issues** found during manual testing",
    "",
    "**If issues found**:",
    "- Return to Step 3 (TDD Implementation)",
    "- Fix issues",
    "- Re-run validation (Step 4)",
    "- Update manual test guide",
    "- Re-test",
    "",
    "**If all tests pass**:",
    "- Proceed to Step 7 (State Persistence)",
    "- Then move to Phase 3 (Archival)",
    "",
    "---",
    "",
    "# 🔹 MINOR FEATURE PATH (Simplified Workflow)",
    "",
    "**Use this path if**: `feature_classification == \"MINOR\"`",
    "",
    "**Skips**: plan.md, tasks.md generation (not needed for quick adds)",
    "",
    "**Includes**: Quick implementation, validation, manual test only",
    "",
    "---",
    "",
    "## Step 1-MINOR: Load Feature Stub",
    "",
    "**Task**: Read the lightweight stub from `minor_features/` folder.",
    "",
    "**Process**:",
    "1. Locate stub file: `docs/agentic_feature_implementation/minor_features/{feature_id}_{name}.md`",
    "2. Extract from stub:",
    "   - **Description**: What this feature adds",
    "   - **Definition of Done**: Acceptance criteria (typically 2-3)",
    "   - **Code Touchpoints**: Files to modify",
    "   - **Integration**: Where this hooks in (GUI/CLI/pipeline)",
    "",
    "**Output Section**:",
    "```",
    "## 📋 Minor Feature Stub Loaded",
    "",
    "**Stub**: `minor_features/{feature_id}_{name}.md`",
    "",
    "**Description**: {1-2 sentences from stub}",
    "",
    "**Definition of Done**:",
    "{List DoD items from stub}",
    "",
    "**Code Touchpoints**:",
    "- {file_to_modify} - {change description}",
    "",
    "**Integration**: {where this hooks in}",
    "",
    "**Proceeding with quick implementation...**",
    "```",
    "",
    "---",
    "",
    "## Step 2-MINOR: Quick Implementation",
    "",
    "**Task**: Implement changes directly (skip plan.md/tasks.md).",
    "",
    "**Process**:",
    "",
    "**2.1: Write Tests First** (simplified TDD):",
    "- Create test file: `tests/{module}/test_{feature}.py`",
    "- One test per DoD criterion",
    "- Run test: MUST FAIL initially",
    "",
    "**2.2: Implement Changes**:",
    "- Modify files from code touchpoints",
    "- Add minimal code to pass tests",
    "- Follow constraints: ≤75 LOC per function, no breaking changes",
    "- Run tests: MUST PASS",
    "",
    "**2.3: Quick Refactor** (if needed):",
    "- Clean up naming",
    "- Add docstrings",
    "- Run tests: MUST STILL PASS",
    "",
    "**Output Section**:",
    "```",
    "## 🔧 Quick Implementation",
    "",
    "### Tests Created",
    "**File**: `tests/{module}/test_{feature}.py`",
    "```python",
    "# Show test code",
    "def test_{feature}_{scenario}():",
    "    \"\"\"Test {DoD criterion}.\"\"\"",
    "    # Test code",
    "    ...",
    "```",
    "",
    "**Command**: `pytest tests/{module}/test_{feature}.py -v`",
    "**Result**: ❌ FAILED (as expected)",
    "",
    "### Implementation",
    "**Files Modified**:",
    "- `{file_path}` ({+N} lines added)",
    "",
    "```python",
    "# Show implementation code snippet",
    "{relevant code changes}",
    "```",
    "",
    "**Command**: `pytest tests/{module}/test_{feature}.py -v`",
    "**Result**: ✅ PASSED",
    "",
    "### Quick Validation",
    "- **All tests**: `pytest -q` → ✅ {N} passed",
    "- **New code coverage**: {XX}% (target: ≥85%)",
    "- **Lint**: No errors",
    "```",
    "",
    "---",
    "",
    "## Step 3-MINOR: Manual Validation Only",
    "",
    "**Task**: Quick manual test (no comprehensive guide needed).",
    "",
    "**Process**:",
    "1. Derive 1-2 manual test scenarios from DoD",
    "2. Specify exact steps and expected results",
    "3. No preconditions/cleanup needed (simple changes)",
    "",
    "**Output Section**:",
    "```",
    "## 🧪 Manual Validation",
    "",
    "### Test Scenario: {DoD Criterion}",
    "",
    "**Steps**:",
    "1. {Action 1}",
    "2. {Action 2}",
    "",
    "**Expected**: {Observable result}",
    "",
    "**✅ Validation**: {Pass/Fail}",
    "```",
    "",
    "**⏸️ STOP HERE - QUICK MANUAL TEST**",
    "",
    "Execute manual test above. If passes → proceed to Step 4-MINOR.",
    "",
    "---",
    "",
    "## Step 4-MINOR: Update Stub with Completion",
    "",
    "**Task**: Mark stub as complete (no archival for MINOR features).",
    "",
    "**Process**:",
    "1. Update stub file: `minor_features/{feature_id}_{name}.md`",
    "2. Add completion marker:",
    "   ```markdown",
    "   ## ✅ COMPLETED",
    "   ",
    "   **Status**: Implemented",
    "   **Date**: {ISO 8601}",
    "   **Implementation Time**: {X} hours",
    "   **Commit**: {git commit hash}",
    "   **Files Modified**: {list}",
    "   **Validation**: Manual test passed",
    "   ```",
    "",
    "**Output Section**:",
    "```",
    "## 💾 Minor Feature Complete",
    "",
    "**Stub Updated**: `minor_features/{feature_id}_{name}.md`",
    "",
    "**Completion Marker Added**:",
    "- Status: ✅ IMPLEMENTED",
    "- Date: {timestamp}",
    "- Duration: {X} hours (estimated: {Y} hours)",
    "- Files: {list}",
    "",
    "**Note**: MINOR features stay in `minor_features/` folder (no archival to `_archive/`).",
    "",
    "**Next Steps**:",
    "- Feature is complete and ready to use",
    "- No Phase 3 archival needed (MINOR features skip archival)",
    "- Update CHANGELOG.md manually if user-facing",
    "```",
    "",
    "---",
    "",
    "# END OF MINOR FEATURE PATH",
    "",
    "---",
    "",
    "## Step 7: State Persistence",
    "",
    "**Task**: Save Phase 2a output to state file for Phase 3.",
    "",
    "**Process**:",
    "1. Generate state JSON:",
    "```json",
    "{",
    "  \"phase\": \"2a\",",
    "  \"feature_id\": \"{from Phase 1}\",",
    "  \"timestamp\": \"{ISO 8601}\",",
    "  \"implementation_complete\": true,",
    "  \"validation_results\": {",
    "    \"tests_passed\": {count},",
    "    \"coverage_percent\": {XX},",
    "    \"lint_status\": \"pass\",",
    "    \"all_gates_passed\": true",
    "  },",
    "  \"files_created\": [",
    "    {\"path\": \"...\", \"lines\": N}",
    "  ],",
    "  \"files_modified\": [",
    "    {\"path\": \"...\", \"lines_changed\": \"+N/-M\"}",
    "  ],",
    "  \"docs_updated\": [\"README.md\", \"CHANGELOG.md\"],",
    "  \"dod_status\": [",
    "    {\"criterion\": \"...\", \"test\": \"...\", \"met\": true}",
    "  ],",
    "  \"manual_testing_required\": true,",
    "  \"manual_test_guide\": \"See output above\",",
    "  \"feature_flag\": {",
    "    \"name\": \"{flag_name}\",",
    "    \"default\": false,",
    "    \"location\": \"{file}\"",
    "  }",
    "}",
    "```",
    "",
    "2. Write state file:",
    "```bash",
    "cat > docs/agentic_feature_implementation/{feature_folder}/workflow_state_phase2a.json << 'EOF'",
    "{...JSON above...}",
    "EOF",
    "```",
    "",
    "**Output Section**:",
    "```",
    "## 💾 Phase 2a Complete - State Saved",
    "",
    "**State File**: `docs/agentic_feature_implementation/{feature_folder}/workflow_state_phase2a.json`",
    "",
    "**Implementation Summary**:",
    "- Files Created: {count}",
    "- Files Modified: {count}",
    "- Tests Added: {count}",
    "- Coverage: {XX}%",
    "- All Validation Gates: ✅ PASSED",
    "",
    "**Next Steps**:",
    "1. **Manual Testing**: Follow guide above",
    "2. **If tests pass**: Proceed to Phase 3 (Archive & Feedback)",
    "3. **If tests fail**: Document issues, iterate on implementation",
    "",
    "**Commands**:",
    "```bash",
    "# After successful manual testing, run Phase 3",
    "prompt-automation --template 13025 --load-state {feature_id}",
    "",
    "# Or if issues found, re-run Phase 2a with fixes",
    "# (Edit code, re-run validation, update state)",
    "```",
    "```",
    "",
    "---",
    "",
    "# Quality Checks (Self-Validation)",
    "",
    "Before completing, verify:",
    "- [ ] All DoD criteria from Phase 1 are met",
    "- [ ] TDD sequence followed (RED → GREEN → REFACTOR)",
    "- [ ] Test coverage ≥85% for new code",
    "- [ ] No files >400 LOC",
    "- [ ] No functions >75 LOC",
    "- [ ] All validation gates passed",
    "- [ ] Documentation updated",
    "- [ ] Feature flag implemented (default: OFF)",
    "- [ ] Manual testing guide provided",
    "- [ ] State file created",
    "",
    "# Output Format",
    "",
    "Present all 8 steps in order:",
    "0. Phase 1 State Loaded",
    "1. Generate Implementation Plan (plan.md + tasks.md)",
    "2. Pre-Flight Checks",
    "3. TDD Implementation (repeated per component)",
    "4. Validation Results",
    "5. Documentation Updates",
    "6. Manual Testing Guide",
    "7. State Persistence (after manual testing approval)",
    "",
    "Use markdown formatting with clear headers, code blocks, and checkboxes.",
    "",
    "# Evaluation Criteria",
    "",
    "- pass_if(phase1_state_loaded == true)",
    "- pass_if(tdd_sequence_followed == true)",
    "- pass_if(all_tests_pass == true)",
    "- pass_if(coverage >= 85)",
    "- pass_if(file_sizes <= 400_LOC)",
    "- pass_if(function_sizes <= 75_LOC)",
    "- pass_if(documentation_updated == true)",
    "- pass_if(manual_test_guide_generated == true)",
    "- pass_if(state_file_created == true)"
  ],
  "metadata": {
    "path": "LLM/Code/Feature/feature_direct_implementer.json",
    "tags": [
      "feature",
      "implementation",
      "tdd",
      "workflow",
      "phase2a"
    ],
    "version": 1.0,
    "render": "markdown",
    "share_this_file_openly": true,
    "last_edited": "2025-10-02T00:00:00Z",
    "workflow_phase": "2a",
    "depends_on_templates": [13023],
    "produces_state_for": [13025]
  }
}
