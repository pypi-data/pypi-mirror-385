top_findings: []
finding_candidates_exclusion:
  - "009" # Sensitive information in source code
  - "011" # Use of software with known vulnerabilities
  - "020" # Non-encrypted confidential information
  - "079" # Non-upgradable dependencies
  - "117" # Unverifiable files
  - "119" # Metadata with sensitive information
  - "142" # Sensitive information in source code - API Key
  - "140" # Insecure exceptions - Empty or no catch
  - "215" # Business information leak - Repository
  - "216" # Business information leak - Source Code
  - "222" # Business information leak - DB
  - "223" # Business information leak - JFROG
  - "224" # Business information leak - AWS
  - "226" # Business information leak - Personal Information
  - "247" # Non-encrypted confidential information - AWS
  - "248" # Non-encrypted confidential information - LDAP
  - "249" # Non-encrypted confidential information - Credentials
  - "251" # Non-encrypted confidential information - JFROG
  - "284" # Non-encrypted confidential information - Base 64
  - "316" # Improper resource allocation - Buffer overflow
  - "326" # Sensitive information in source code - Dependencies
  - "359" # Sensitive information in source code - Credentials
  - "385" # Non-encrypted confidential information - Keys
  - "393" # Use of software with known vulnerabilities in development
  - "433" # Non-encrypted confidential information - Redshift Cluster
  - "439" # Sensitive information in source code - IP
  - "441" # Non-encrypted confidential information - Azure
  - "200" # Traceability loss
  - "278" # Insecure exceptions - NullPointerException
  - "372" # Use of an insecure channel - HTTP
  - "335" # Insecure service configuration - Bucket
  - "187" # Lack of data validation - Source Code
  - "066" # Technical information leak - Console functions
  - "039" # Improper authorization control for web services
  - "037" # Technical information leak
  - "066" # Technical information leak - Console functions
  - "237" # Technical information leak - Print Functions
  - "006" # Authentication mechanism absence or evasion
  - "234" # Technical information leak - Stacktrace
  - "072" # Duplicate code
  - "079" # Unverifiable files
  - "074"
  - "379"
  - "091"
exclusion_candidates_finding_title:
  - "sensitive information"
  - "information leak"
  - "confidential information"
  # - "log"
  - "Lack of data validation"
  - "inappropriate"
prompts:
  agents:
    vuln_strict:
      system: |
        You are a security code analyst. Determine if code is VULNERABLE or SAFE based on the suspected vulnerability.
      instructions: |
        ## CONTEXT
        File: $filePath
        Function: $functionName

        ## VULNERABILITY TO CHECK
        $vulnerability_knowledge

        ## CODE TO ANALYZE
        $imports

        $code

        ## ANALYSIS
        If you see function calls that might provide security (authentication checks, validation methods), use tools to investigate what they actually do before concluding the code is vulnerable. Don't assume a function is unsafe just by its name.

        ## DECISION RULES
        - **VULNERABLE**: Shows the vulnerability pattern OR lacks required security controls
        - **SAFE**: Has visible protections OR pattern not present (including protection through called functions)
        - If security controls should be visible but aren't → VULNERABLE
        - Don't assume protections exist elsewhere EXCEPT investigate functions that might provide security

        Respond with VULNERABLE or SAFE and brief reasoning.
    # --------------------------------------------------------------------
    # LOOSE – heuristic check *only* for the listed vulnerability types
    vuln_loose:
      system: |
        You are a security‑minded code reviewer performing a **quick sweep
        for the specific vulnerability classes supplied**.
      instructions: |
        ## ANALYSIS CONTEXT
        File: $filePath
        Focus function: $functionName

        ### Target vulnerabilities
        $vulnerability_knowledge

        ### Code under review
        ```
        $imports

        $code
        ```

        ## MISSION

        Determine if the code contains any of the target vulnerabilities using a two-step approach.

        ## PROCESS

        ### STEP 1: QUICK RELEVANCE CHECK
        For each vulnerability, assess if investigation is warranted:
        * Could the code contain patterns that might lead to this vulnerability?
        * Are there any functions, imports, or data flows that could be related?
        * When in doubt about relevance, err on the side of investigation

        If OBVIOUSLY UNRELATED (e.g., pure math for web vulnerabilities) → mark as UNLIKELY immediately
        If ANY POSSIBLE RELEVANCE or UNCERTAINTY → proceed to Step 2 (be inclusive)

        ### STEP 2: DETAILED ANALYSIS (only for relevant vulnerabilities)
        * Use available tools to investigate suspicious patterns
        * Verify if the vulnerability is actually present
        * Mark as LIKELY or UNLIKELY based on evidence
    classify:
      system: You are an expert Cyber Security agent focused on the classification of code portions that could contain some vulnerability, your task is to define if a more rigorous analysis is required
      instructions: |
          ### Decide whether the target code needs manual security review.

          Target code (X):
          ```$code```

          Hypothesis title (The type of vulnerability): $Possible vulnerabilities

          Confirmed vulnerable example:
          ```$vulnerability_example```

          If there is the minimum suspicion that the analysis object of the analysis could contain a vulnerable pattern similar to that of the example code, it would be a valid object for a deeper analysis
