[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ai_code_review", "src/context_generator"]

[project]
name = "ai-code-review-cli"
version = "1.14.1"
description = "AI-powered code review tool with local Git, remote MR/PR analysis, and CI integration (GitLab or GitHub)"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [
    {name = "Juanje Ojeda", email = "juanje@redhat.com"},
]
keywords = [
    "static code analysis",
    "code review",
    "code quality",
    "ai",
    "coding",
    "assistant",
    "llm",
    "github",
    "gitlab",
    "automation",
    "devops",
    "developer tools",
    "github actions",
    "gitlab-ci",
    "workflows",
    "git"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.1.0",
    "aiohttp>=3.9.0",
    "python-gitlab>=4.0.0",
    "pygithub>=2.1.0",
    "langchain>=0.2.0",
    "langchain-community>=0.2.0",
    "langchain-google-genai>=2.0.0",
    "langchain-anthropic>=0.2.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0.0",
    "structlog>=23.2.0",
    "ollama>=0.2.0",
    "langchain-ollama>=0.2.0",
    "pydantic-settings>=2.10.1",
    "httpx>=0.28.1",
    "GitPython>=3.1.40",
    "aiofiles>=23.2.0",
    "defusedxml>=0.7.1",
]

[project.scripts]
ai-code-review = "ai_code_review.cli:main"
ai-generate-context = "context_generator.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "types-requests",
    "types-PyYAML",
]

[project.urls]
Homepage = "https://gitlab.com/redhat/edge/ci-cd/ai-code-review"
Repository = "https://gitlab.com/redhat/edge/ci-cd/ai-code-review"
Issues = "https://gitlab.com/redhat/edge/ci-cd/ai-code-review/-/issues"

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
exclude = "tests/"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=75",
]

markers = [
    "allow_env_file: Allow test to use .env file loading (bypasses environment isolation)",
]

filterwarnings = [
    "ignore::RuntimeWarning",
    "ignore:coroutine.*was never awaited:RuntimeWarning",
]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "hatch>=1.15.1",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pymarkdownlnt>=0.9.32",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.12.11",
    "twine>=6.2.0",
    "types-aiofiles>=24.1.0.20250822",
    "types-defusedxml>=0.7.0.20250822",
    "types-pyyaml>=6.0.12.20250822",
    "types-requests>=2.32.4.20250809",
]

# PyMarkdown configuration
[tool.pymarkdown]
# Disable problematic rules for documentation with code examples
disable-rules = [
    "MD013",  # Line length - too restrictive for code examples and long URLs
    "MD031",  # Fenced code blocks surrounded by blank lines - too strict for specs
    "MD040",  # Fenced code blocks should have language - examples don't always need it
    "MD033",  # Inline HTML - sometimes needed for complex formatting
    "MD024",  # Multiple headings cannot contain the same content - too restrictive for the developer guide
]

# Configure specific rules
[tool.pymarkdown.plugins.md013]
# Allow longer lines in SPECS.md for technical documentation
line_length = 100
