# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .billing_frequency import BillingFrequency
from .charge_type import ChargeType
from .price_point import PricePoint
from .pricing_model_type import PricingModelType


class OrderLineAttributePricing(UniversalBaseModel):
    event_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="eventName")] = None
    charge_type: typing_extensions.Annotated[typing.Optional[ChargeType], FieldMetadata(alias="chargeType")] = None
    price_point: typing_extensions.Annotated[typing.Optional[PricePoint], FieldMetadata(alias="pricePoint")] = None
    pricing_model: typing_extensions.Annotated[
        typing.Optional[PricingModelType], FieldMetadata(alias="pricingModel")
    ] = None
    billing_frequency: typing_extensions.Annotated[
        typing.Optional[BillingFrequency], FieldMetadata(alias="billingFrequency")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
