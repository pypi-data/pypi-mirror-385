If there's one city in the world where it's hard to find a place to buy or rent, it's Sydney. And if you've tried to find a home here recently, you're familiar with the problem. Every time you walk into an open house, you get some information about what's out there and what's on the market, but every time you walk out, you're running the risk of the very best place passing you by. So how do you know when to switch from looking to being ready to make an offer?
﻿如果世界上有个城市 很难买房或者租房， 它就是悉尼。 如果你最近在找地方安家， 你一定对此深有感触。 每次你走进一个对公众开放的待售房， 就会了解到市场上 相关的信息， 但每次你从房子里走出去， 就冒着错过最好房子的风险。 那么你怎么知道何时从单纯的寻找， 转向准备出手呢？
This is such a cruel and familiar problem that it might come as a surprise that it has a simple solution. 37 percent.
这个如此残酷和熟悉的问题 却可能有个让人惊讶的简单解决方案。 37%。
(Laughter)
（笑声）
If you want to maximize the probability that you find the very best place, you should look at 37 percent of what's on the market, and then make an offer on the next place you see, which is better than anything that you've seen so far. Or if you're looking for a month, take 37 percent of that time -- 11 days, to set a standard -- and then you're ready to act.
如果你想要最大化找到最佳居所的概率， 就应该把市场上37%的房子看完， 然后在你看到的下一个地方出价， 这个地方要比你目前看过的都要更好。 或者假如你要花一个月的时间 寻找，拿出37%的时间—— 11天，来建立标准—— 然后就可以准备行动了。
We know this because trying to find a place to live is an example of an optimal stopping problem. A class of problems that has been studied extensively by mathematicians and computer scientists.
我们知道这点是因为尝试找到好的居所 是“最优停止问题”的一个案例。 这是数学家和计算机科学家 广泛研究的一类问题。
I'm a computational cognitive scientist. I spend my time trying to understand how it is that human minds work, from our amazing successes to our dismal failures. To do that, I think about the computational structure of the problems that arise in everyday life, and compare the ideal solutions to those problems to the way that we actually behave. As a side effect, I get to see how applying a little bit of computer science can make human decision-making easier.
我是个计算认知科学家。 我把时间都花在理解 人们的头脑如何工作上面， 从我们的惊人成就，到令人叹息的失败。 为此，我会考虑日常生活中 出现的问题的计算结构， 并把这些问题的理想解决方案 与我们实际会做出的行为相比较。 作为副产品， 我还发现了如何利用一点计算科学知识 让人类更轻松地做出决策。
I have a personal motivation for this. Growing up in Perth as an overly cerebral kid ...
对此，我有一个私人动机。 作为在珀斯长大的一个过度理智的孩子…
(Laughter)
（笑声）
I would always try and act in the way that I thought was rational, reasoning through every decision, trying to figure out the very best action to take. But this is an approach that doesn't scale up when you start to run into the sorts of problems that arise in adult life. At one point, I even tried to break up with my girlfriend because trying to take into account her preferences as well as my own and then find perfect solutions --
我总试着用我觉得理性的方式行事， 对每一个决定进行推理， 想要算出要采取的最佳行动。 但这种方法无法扩展到 你开始在成人生活中 遇到的各种问题。 有一次，我甚至想和我女友分手， 只因为我在考虑如何在 她的喜好和我的喜好中 寻找最佳的折中方案——
(Laughter)
（笑声）
was just leaving me exhausted.
而最后却搞得我精疲力尽。
(Laughter)
（笑声）
She pointed out that I was taking the wrong approach to solving this problem -- and she later became my wife.
她指出我解决这个问题的方法 是错误的—— 后来她成为了我的妻子。
(Laughter)
（笑声）
(Applause)
（鼓掌）
Whether it's as basic as trying to decide what restaurant to go to or as important as trying to decide who to spend the rest of your life with, human lives are filled with computational problems that are just too hard to solve by applying sheer effort. For those problems, it's worth consulting the experts: computer scientists.
不管是去哪家餐厅这样的小决策， 还是重要到需要决定与谁度过余生， 人类的生活总是面临着各种 很难靠单纯的努力来解决的计算问题。 面对这些问题， 咨询专家是个不错的选择： 我说的是计算机科学家。
(Laughter)
（笑声）
When you're looking for life advice, computer scientists probably aren't the first people you think to talk to. Living life like a computer -- stereotypically deterministic, exhaustive and exact -- doesn't sound like a lot of fun. But thinking about the computer science of human decisions reveals that in fact, we've got this backwards. When applied to the sorts of difficult problems that arise in human lives, the way that computers actually solve those problems looks a lot more like the way that people really act.
当你寻找生活中的建议时， 计算机科学家可能不是你首选的谈话对象。 像电脑一样生活—— 一成不变的确定性，详尽和准确—— 听起来挺无趣的。 但研究人类决策的计算机科学 揭示了这样一个事实，我们把它搞反了。 当处理人们生活中遇到的 各种难题时， 计算机解决这些问题的方式 跟人类真实行为非常相似。
Take the example of trying to decide what restaurant to go to. This is a problem that has a particular computational structure. You've got a set of options, you're going to choose one of those options, and you're going to face exactly the same decision tomorrow. In that situation, you run up against what computer scientists call the "explore-exploit trade-off." You have to make a decision about whether you're going to try something new -- exploring, gathering some information that you might be able to use in the future -- or whether you're going to go to a place that you already know is pretty good -- exploiting the information that you've already gathered so far. The explore/exploit trade-off shows up any time you have to choose between trying something new and going with something that you already know is pretty good, whether it's listening to music or trying to decide who you're going to spend time with. It's also the problem that technology companies face when they're trying to do something like decide what ad to show on a web page. Should they show a new ad and learn something about it, or should they show you an ad that they already know there's a good chance you're going to click on?
拿试图决定去哪个餐厅为例。 这个一个有着特定计算结构的问题。 你有一组选项， 需要在这些选项中选择一个， 并且明天你将会面对同样的决定。 在那种情况下， 你遇到了计算机科学中所谓的 “探索与利用的权衡”。 你需要在 尝试新的—— 即探索，收集 你将来能够使用的信息—— 或者去那个已知的非常好的 地方之间做出选择—— 利用你目前已经收集到的信息。 “探索与利用的权衡”出现在每一次 你需要在尝试新的 和已知的优质体验之间作出选择， 不管是听音乐 还是决定要跟谁聚会。 科技公司也会面临同样的问题， 当他们需要决定比如应该在 网页上展示什么广告时。 他们是应该展现新广告，并从中学习呢， 还是给你展现那个 他们已经知道你很可能会点击的广告呢？
Over the last 60 years, computer scientists have made a lot of progress understanding the explore/exploit trade-off, and their results offer some surprising insights. When you're trying to decide what restaurant to go to, the first question you should ask yourself is how much longer you're going to be in town. If you're just going to be there for a short time, then you should exploit. There's no point gathering information. Just go to a place you already know is good. But if you're going to be there for a longer time, explore. Try something new, because the information you get is something that can improve your choices in the future. The value of information increases the more opportunities you're going to have to use it.
在过去60年中， 计算机科学家在理解探索与利用的权衡 上面取得了很大的进展， 而且他们的研究给出了 一些让人惊讶的洞察。 当你在决定去哪家餐厅时， 你应该问自己的第一个问题是， 你还要在城里呆多久。 如果你在那里只是短暂的停留， 那么你就应该享受（“利用”）。 收集信息没有意义。 只需要直接去那家你喜欢的餐厅。 但如果你会呆很长的时间， 那就花点时间“探索”。 试试新的餐厅，因为你收集的信息 可以在未来优化你的选择。 有价值的信息增多了， 你将来使用它的机会也越多。
This principle can give us insight into the structure of a human life as well. Babies don't have a reputation for being particularly rational. They're always trying new things, and you know, trying to stick them in their mouths. But in fact, this is exactly what they should be doing. They're in the explore phase of their lives, and some of those things could turn out to be delicious. At the other end of the spectrum, the old guy who always goes to the same restaurant and always eats the same thing isn't boring -- he's optimal.
这个原则也可以帮助我们深入理解 人类生命的结构。 婴儿并不是理性的代名词。 他们总在尝试新东西， 比如，什么东西都想往嘴里塞。 事实上，这一行为非常合理。 他们正处于生命中的探索阶段， 这些东西可能正好是美味的。 相反， 老人总是去同样的餐厅， 吃同样的东西， 这跟单调的行为无关—— 只是最优选择罢了。
(Laughter)
（笑声）
He's exploiting the knowledge that he's earned through a lifetime's experience. More generally, knowing about the explore/exploit trade-off can make it a little easier for you to sort of relax and go easier on yourself when you're trying to make a decision. You don't have to go to the best restaurant every night. Take a chance, try something new, explore. You might learn something. And the information that you gain is going to be worth more than one pretty good dinner.
他正在利用一生中 所积累的知识。 更一般的情况下， 了解“探索与利用的权衡”这一原则， 可以让你在尝试做选择时 感到更轻松。 你不需要每晚都去最佳餐厅。 找个机会，试试新的，探索一番。 你可能会有新的发现。 你获取的信息 会比一顿美味的晚餐更有价值。
Computer science can also help to make it easier on us in other places at home and in the office. If you've ever had to tidy up your wardrobe, you've run into a particularly agonizing decision: you have to decide what things you're going to keep and what things you're going to give away. Martha Stewart turns out to have thought very hard about this --
计算机科学也可以帮助我们 在家和工作场所的其他地方 更轻松地做出决策。 如果你有需要整理衣橱的经历， 你就已经遇到了一个非常痛苦的决定： 你得决定哪些东西要留下来， 哪些东西要丢掉。 玛莎 · 斯图尔特曾经 非常认真地思考过这个问题——
(Laughter)
（笑声）
and she has some good advice. She says, "Ask yourself four questions: How long have I had it? Does it still function? Is it a duplicate of something that I already own? And when was the last time I wore it or used it?" But there's another group of experts who perhaps thought even harder about this problem, and they would say one of these questions is more important than the others. Those experts? The people who design the memory systems of computers. Most computers have two kinds of memory systems: a fast memory system, like a set of memory chips that has limited capacity, because those chips are expensive, and a slow memory system, which is much larger. In order for the computer to operate as efficiently as possible, you want to make sure that the pieces of information you want to access are in the fast memory system, so that you can get to them quickly. Each time you access a piece of information, it's loaded into the fast memory and the computer has to decide which item it has to remove from that memory, because it has limited capacity.
而且她有一些好建议。 她说，“问你自己4个问题： 我拥有这件东西多长时间了？ 它仍然完好吗？ 我还有其他类似的东西吗？ 我上次穿它或用它是什么时候？” 但还有另一群专家 对这个问题的思考更加深入， 他们会说，其中一个问题 比其他问题更重要。 这些专家是谁呢？ 就是设计计算机内存系统的人。 大部分电脑有两种类型的内存系统： 快速存储系统， 如一组容量有限的内存芯片， 因为这些芯片非常昂贵， 还有慢速存储系统，但容量更大。 为了让电脑工作效率尽可能高， 你想要确保 你需要获取的一段信息 在快速存储系统中， 这样就可以快速获取它们。 每次你获取一段信息， 该信息就会进入快速存储中， 而电脑需要决定哪些信息 需要从那个存储中移除， 因为它的容量有限。
Over the years, computer scientists have tried a few different strategies for deciding what to remove from the fast memory. They've tried things like choosing something at random or applying what's called the "first-in, first-out principle," which means removing the item which has been in the memory for the longest. But the strategy that's most effective focuses on the items which have been least recently used. This says if you're going to decide to remove something from memory, you should take out the thing which was last accessed the furthest in the past. And there's a certain kind of logic to this. If it's been a long time since you last accessed that piece of information, it's probably going to be a long time before you're going to need to access it again. Your wardrobe is just like the computer's memory. You have limited capacity, and you need to try and get in there the things that you're most likely to need so that you can get to them as quickly as possible. Recognizing that, maybe it's worth applying the least recently used principle to organizing your wardrobe as well. So if we go back to Martha's four questions, the computer scientists would say that of these, the last one is the most important.
多年来， 计算机科学家试了几种不同的策略 来决定应该从快速存储中移除什么。 他们试过比如随机选择， 或是应用“先进先出”原则， 意思是移除 被储存时间最长的信息。 但最有效的策略是， 聚焦那些最近最少被使用的条目。 也就是说，如果你打算从存储中删掉点什么， 就应该移除距离最近一次访问最久的内容。 这显然是合乎逻辑的做法。 假如你上次访问那段信息 是在很久以前了， 那么你也很可能在很久之后才会 再次需要访问这段信息。 你的衣柜就像计算机的内存。 衣橱的容量有限， 你需要尽量把最常用的东西放进去， 这样你就会尽可能快速地得到它。 认识到这点， 也许值得应用“最近最少使用”原则 来管理你的衣柜。 如果我们回到玛莎的四个问题， 计算机科学家会说，在这些问题中， 最后一个是最重要的。
This idea of organizing things so that the things you are most likely to need are most accessible can also be applied in your office. The Japanese economist Yukio Noguchi actually invented a filing system that has exactly this property. He started with a cardboard box, and he put his documents into the box from the left-hand side. Each time he'd add a document, he'd move what was in there along and he'd add that document to the left-hand side of the box. And each time he accessed a document, he'd take it out, consult it and put it back in on the left-hand side. As a result, the documents would be ordered from left to right by how recently they had been used. And he found he could quickly find what he was looking for by starting at the left-hand side of the box and working his way to the right.
这种管理东西的方法， 也就是让你最可能需要的东西最唾手可得， 也可以应用在你的工作中。 日本经济学家野口勇 就发明了一个拥有该属性的文件系统。 他从一个纸箱开始， 然后从左手边把文件放进盒子。 每次他增加一个文件， 他会把里面的东西依次移动， 再把那个文件放在盒子的左手边。 每次他需要看文件，就会把它取出来， 用完之后放到左手边的位置。 这样一来，文件就会根据最近使用的情况 从左到右排序。 他发现只要沿着盒子的 左边到右边搜索， 就可以快速找到他要找的文件。
Before you dash home and implement this filing system --
在你赶回家尝试搭建这个文件系统前——
(Laughter)
（笑声）
it's worth recognizing that you probably already have.
值得注意的是，你可能已经拥有它了。
(Laughter)
（笑声）
That pile of papers on your desk ... typically maligned as messy and disorganized, a pile of papers is, in fact, perfectly organized --
就是你桌上的那堆文件… 通常被认为是凌乱无序的 这堆文件，实际上 已经经过了完美的整理——
(Laughter)
（笑声）
as long as you, when you take a paper out, put it back on the top of the pile, then those papers are going to be ordered from top to bottom by how recently they were used, and you can probably quickly find what you're looking for by starting at the top of the pile.
只要你把一张纸抽出来， 用完再放回到那堆文件上面， 这些文件就会从上到下 根据最近使用的原则排序， 你就很可能在那堆文件中从上到下 快速找到你要找的东西。
Organizing your wardrobe or your desk are probably not the most pressing problems in your life. Sometimes the problems we have to solve are simply very, very hard. But even in those cases, computer science can offer some strategies and perhaps some solace. The best algorithms are about doing what makes the most sense in the least amount of time. When computers face hard problems, they deal with them by making them into simpler problems -- by making use of randomness, by removing constraints or by allowing approximations. Solving those simpler problems can give you insight into the harder problems, and sometimes produces pretty good solutions in their own right.
整理你的衣柜或书桌 可能不是你生活中最紧迫的问题。 有时候我们需要解决的问题非常非常难。 但即便在这些案例中， 计算机科学也可以提供一些策略 和些许安慰。 最好的算法是在最短的时间内 做最合理的事情。 当电脑面对难题时， 会把它分解为简单问题—— 通过利用随机性， 消除约束或允许近似。 解决这些简单问题 可以让你洞察更难的问题， 而且有时会产生很好的解决方案。
Knowing all of this has helped me to relax when I have to make decisions. You could take the 37 percent rule for finding a home as an example. There's no way that you can consider all of the options, so you have to take a chance. And even if you follow the optimal strategy, you're not guaranteed a perfect outcome. If you follow the 37 percent rule, the probability that you find the very best place is -- funnily enough ...
知道所有这些知识可以帮助 我们在做决定时倍感轻松。 拿37%的原则来找房子就是一个例子。 你根本不可能考虑到所有的选项， 所以你必须碰碰运气。 即便你遵循了最优策略， 也无法保证得到最佳结果。 如果你遵循37%原则， 找到最佳居所的概率是—— 这就相当有趣了...
(Laughter)
（笑声）
37 percent. You fail most of the time. But that's the best that you can do.
37%。 你大部分时间都未能如愿。 但是你已经尽力了。
Ultimately, computer science can help to make us more forgiving of our own limitations. You can't control outcomes, just processes. And as long as you've used the best process, you've done the best that you can. Sometimes those best processes involve taking a chance -- not considering all of your options, or being willing to settle for a pretty good solution. These aren't the concessions that we make when we can't be rational -- they're what being rational means.
最终，计算机科学可以帮我们更宽容地 面对自己的局限性。 你无法控制结果，只能调整方法。 只要你使用了最好的方法， 就已经尽了最大的努力。 有时候，最好的方法就是抓住机会—— 不去考虑你的所有选项， 或者愿意接受一个很好的解决方案。 这些不是我们在无法进行 理性思考时做的让步—— 它们就是理性的意义。
Thank you.
谢谢。
(Applause)
（鼓掌）