[project]
name = "archipy"
description = "Architecture + Python â€“ Perfect for structured design."
authors = [
    { name = "Hossein Nejati", email = "hosseinnejati14@gmail.com" },
    { name = "Mehdi Einali", email = "einali@gmail.com" },
]
readme = "README.md"
version = "3.13.10"
requires-python = ">=3.13,<4"
dependencies = [
    "pydantic>=2.12.3",
    "pydantic-settings>=2.11.0",
    "requests>=2.32.5",
    "jdatetime>=5.2.0",
]
license = { file = "LICENSE" }

[project.optional-dependencies]
# Core optional dependencies
aiosqlite = ["aiosqlite>=0.21.0"]
behave = ["behave>=1.3.3"]
cache = ["cachetools>=6.2.1", "async-lru>=2.0.5"]
dependency-injection = ["dependency-injector>=4.48.2"]
elastic-apm = ["elastic-apm>=6.24.0"]
elasticsearch = ["elasticsearch>=9.1.1"]
elasticsearch-async = ["elasticsearch[async]>=9.1.1"]
fakeredis = ["fakeredis>=2.32.0"]
fastapi = ["fastapi[all]>=0.119.0"]
grpc = ["grpcio>=1.75.1", "grpcio-health-checking>=1.75.1", "protobuf>=6.33.0"]
jwt = ["pyjwt>=2.10.1"]
kafka = ["confluent-kafka>=2.12.0"]
kavenegar = ["kavenegar>=1.1.2"]
keycloak = ["python-keycloak>=5.8.1", "cachetools>=6.2.1", "async-lru>=2.0.5"]
minio = ["minio>=7.2.18", "cachetools>=6.2.1", "async-lru>=2.0.5"]
parsian-ipg = ["zeep>=4.3.2", "requests[socks]>=2.32.5"]
postgres = ["psycopg[binary,pool]>=3.2.11"]
prometheus = ["prometheus-client>=0.23.1"]
redis = ["redis[hiredis]>=6.4.0"]
scheduler = ["apscheduler>=3.11.0"]
sentry = ["sentry-sdk>=2.42.0"]
sqlalchemy = ["sqlalchemy>=2.0.44"]
starrocks = ["starrocks>=1.2.3", "pymysql>=1.1.2"]
starrocks-async = ["starrocks>=1.2.3", "aiomysql>=0.2.0"]
temporalio = ["temporalio>=1.18.1"]
testcontainers = ["testcontainers>=4.13.2"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = 'tests'
markers = []
filterwarnings = [
    'error',
    'ignore:This is a placeholder until pydantic-settings.*:UserWarning',
    'ignore::UserWarning',
    'ignore::DeprecationWarning'
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "add-trailing-comma>=3.2.0",
    "bandit>=1.8.6",
    "black>=25.9.0",
    "codespell>=2.4.1",
    "mypy>=1.18.2",
    "pre-commit-hooks>=6.0.0",
    "pre-commit>=4.3.0",
    "ruff>=0.14.0",
    "types-cachetools>=6.2.0.20250827",
    "types-grpcio>=1.0.0.20251009",
    "types-protobuf>=6.32.1.20250918",
    "types-pymysql>=1.1.0.20250916",
    "types-regex>=2025.9.18.20250921",
    "types-requests>=2.32.4.20250913",
    "validate-pyproject>=0.24.1",
]

docs = [
    "mkdocs-autorefs>=1.4.3",
    "mkdocs-material>=9.6.21",
    "mkdocs>=1.6.1",
    "mkdocstrings-python>=1.18.2",
    "mkdocstrings>=0.30.1",
    "pymdown-extensions>=10.16.1",
]


[project.urls]
Homepage = "https://syntaxarc.github.io/ArchiPy/"
Documentation = "https://archipy.readthedocs.io/"
"Bug Tracker" = "https://github.com/SyntaxArc/ArchiPy/issues"
"Source Code" = "https://github.com/SyntaxArc/ArchiPy"
"Contributing" = "https://github.com/SyntaxArc/ArchiPy/blob/master/CONTRIBUTING.md"
"Code of Conduct" = "https://github.com/SyntaxArc/ArchiPy/blob/master/CODE_OF_CONDUCT.md"


[tool.black]
# Enable colored output
color = true

# Set the maximum line length
line-length = 120

# Target Python version
target-version = ["py313"]

# Skip string normalization (useful for projects with mixed quote styles)
skip-string-normalization = false

# Exclude specific files and directories
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations  # Exclude database migration files
  | node_modules  # Exclude Node.js dependencies
  | __pycache__  # Exclude Python cache directories
)/
'''

[tool.ruff]
# Enable automatic fixes for supported rules
fix = true

lint.select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C901", # complex-structure
    "D", # pydocstyle
    "E", # pycodestyle errors
    "ERA", # eradicate
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]

# Explicitly ignore specific rules
lint.ignore = [
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "BLE001", # Do not catch blind exception: `Exception`
    "C901", # Function is too complex (McCabe complexity)
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "E501", # Line too long (handled by Black)
    "F811", # Redefinition of unused function
    "G004", # Logging statement uses f-string
    "PLR0913", # Too many arguments in function (e.g., FastAPI Swagger)
    "PLR2004", # Magic value used in comparison
    "Q000", # Allow single quotes (conflicts with Black's double-quote preference)
    "RUF001", "RUF003", # String contains ambiguous characters
    "S101", # Ignore assert used (equivalent to bandit's B101)
    "S301", # Ignore pickle usage (equivalent to bandit's B301)
    "S403", # Ignore pickle usage (equivalent to bandit's B403)
    "TC002", # Type-checking import issues
    "TRY003", #Avoid specifying long messages outside the exception class
    "TRY301", # Abstract raise into a function
]

# Define source directories
src = ["archipy", "tests", "features"]

exclude = [
    "features/*",
    "scripts/*",
]

# Set line length to match Black's configuration
line-length = 120

# Target Python version
target-version = "py313"

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
# Ignore F811 (redefinition of function) in steps implementations
"archipy/configs/config_template.py" = ["S104"]  # Allow binding to all interfaces for containerized deployments
"archipy/models/errors/keycloak_errors.py" = ["ANN401"]  # Allow Any type for additional_data
"archipy/helpers/interceptors/grpc/base/client_interceptor.py" = ["ANN401"]  # Allow Any type for gRPC message types
"archipy/helpers/interceptors/grpc/trace/client_interceptor.py" = ["ANN401"]  # Allow Any type for gRPC message types
"archipy/helpers/decorators/sqlalchemy_atomic.py" = ["BLE001"]  # Allow complex decorator patterns
"archipy/helpers/decorators/*" = ["ANN401"]
"archipy/helpers/utils/jwt_utils.py" = ["S105"]
"archipy/helpers/utils/file_utils.py" = ["S324"]
"archipy/helpers/utils/keycloak_utils.py" = ["FBT001", "FBT002"]
"archipy/adapters/orm/sqlalchemy/ports.py" = ["ANN401"]
"archipy/adapters/orm/sqlalchemy/adapters.py" = ["ANN401"]
"archipy/adapters/keycloak/ports.py" = ["ANN401"]  # Allow Any type for **kwargs parameters
"archipy/adapters/redis/ports.py" = ["ANN401", "D102", "FBT001", "FBT002", "A002"]
"archipy/adapters/redis/adapters.py" = ["ANN401", "FBT001", "FBT002", "RET504", "PGH003"]
"archipy/adapters/redis/mocks.py" = ["ARG002", "ARG004", "ANN401"]
"archipy/models/dtos/base_protobuf_dto.py" = ["ANN401"]
"archipy//helpers/utils/keycloak_utils.py" = ["B008"]
"archipy/adapters/keycloak/adapters.py" = ["BLE001"]
"archipy/adapters/kafka/adapters.py" = ["BLE001"]
"archipy/adapters/temporal/*" = ["ANN401", "TRY300", "RUF006"]  # Allow Any types for Temporal's dynamic system, else blocks, and asyncio task handling
"features/steps/*" = ["F811"]
"scripts/*" = ["S603", "S607"]

# Configure McCabe complexity
[tool.ruff.lint.mccabe]
max-complexity = 10  # Maximum allowed McCabe complexity

# Configure Pylint rules
[tool.ruff.lint.pylint]
max-args = 5  # Maximum number of function arguments
max-branches = 16  # Maximum number of branches in a function
max-returns = 16  # Maximum number of return statements in a function
max-statements = 50  # Maximum number of statements in a function

# Configure isort (import sorting)
[tool.ruff.lint.isort]
combine-as-imports = true  # Combine `import` and `from ... import` statements
known-first-party = ["archipy"]  # Treat `archipy` as a first-party module
section-order = [
    "future", # `__future__` imports
    "standard-library", # Standard library imports
    "third-party", # Third-party imports
    "first-party", # First-party imports (e.g., `archipy`)
    "local-folder", # Local folder imports
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"  # Use double quotes for inline strings
multiline-quotes = "double"  # Use double quotes for multiline strings

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google-style docstrings

[tool.mypy]
# Enable checking of untyped function definitions
check_untyped_defs = true

# Disallow using `Any` in generic types
disallow_any_generics = false

# Disallow incomplete type definitions
disallow_incomplete_defs = true

# Disallow subclassing `Any`
disallow_subclassing_any = true

# Disallow calling untyped functions
disallow_untyped_calls = true

# Disallow untyped decorators
disallow_untyped_decorators = true

# Disallow untyped function definitions
disallow_untyped_defs = true

# Follow imports silently
follow_imports = "silent"

# Disallow implicit re-exports
no_implicit_reexport = true

# Enable pretty output
pretty = true

# Target Python version
python_version = "3.13"

# Show error codes
show_error_codes = true

# Show error context
show_error_context = true

# Enable strict optional checking
strict_optional = true

# Warn about missing return statements
warn_no_return = true

# Warn about redundant casts
warn_redundant_casts = true

# Warn about returning `Any`
warn_return_any = true

# Warn about unreachable code
warn_unreachable = true

# Warn about unused configs
warn_unused_configs = true

# Warn about unused `# type: ignore` comments
warn_unused_ignores = true

# Enable Pydantic plugin for better type checking
plugins = [
    "pydantic.mypy", # Pydantic plugin for better type checking
]

[[tool.mypy.overrides]]
module = [
    "apscheduler.*", # Apply overrides to apscheduler
    "archipy.adapters.redis.*",
    "confluent_kafka.*", # Apply overrides to Kafka
    "confluent_kafka.admin.*", # Apply overrides to Kafka
    "features.*", # Apply overrides to features files
    "jdatetime.*", # Apply overrides to jdatetime
    "jwcrypto.*", # Apply overrides to jwcrypto
    "minio.*", # Apply overrides to minio
    "redis.*", # Apply overrides to Redis
    "scripts.*", # Apply overrides to script files
    "sentry_sdk.*", # Apply overrides to sentry-sdk
    "zeep.*", # Apply overrides to zeep
]
ignore_missing_imports = true
disable_error_code = ["no-any-return", "misc", "return-value", "arg-type", "type-var", "unused-ignore", "no-untyped-call", "assignment", "call-arg"]

[[tool.mypy.overrides]]
module = "archipy.models.errors.*"
disable_error_code = ["assignment", "misc"]  # Allow flexible data dictionary assignments and type assignments for optional imports

[[tool.mypy.overrides]]
module = "archipy.models.dtos.range_dtos"
disable_error_code = ["operator"]  # Allow generic type comparisons

[[tool.mypy.overrides]]
module = "archipy.helpers.decorators.sqlalchemy_atomic"
disable_error_code = ["return", "misc", "no-any-return", "return-value"]  # Allow complex decorator patterns

[[tool.mypy.overrides]]
module = "archipy.adapters.elasticsearch.*"
disable_error_code = ["arg-type"]  # Allow kwargs in elasticsearch client calls

[[tool.mypy.overrides]]
module = "archipy.helpers.interceptors.grpc.*"
disable_error_code = ["misc", "no-any-return", "attr-defined", "no-untyped-call", "var-annotated", "override", "arg-type"]  # Allow grpc and elasticapm untyped usage

[[tool.mypy.overrides]]
module = "archipy.adapters.keycloak.*"
disable_error_code = ["return", "override", "assignment", "unreachable", "union-attr", "no-untyped-def", "arg-type", "return-value", "no-any-return"]  # Allow Keycloak adapter complex patterns

[[tool.mypy.overrides]]
module = "archipy.helpers.utils.keycloak_utils"
disable_error_code = ["arg-type"]  # Allow grpc ServicerContext type compatibility


[[tool.mypy.overrides]]
module = "archipy.models.dtos.base_protobuf_dto"
disable_error_code = ["misc", "assignment"]  # Allow protobuf type placeholders

[[tool.mypy.overrides]]
module = "archipy.adapters.minio.*"
ignore_missing_imports = true
disable_error_code = ["import-untyped", "call-arg", "return", "override", "no-any-return"]  # Allow minio adapter patterns

[[tool.mypy.overrides]]
module = "archipy.adapters.kafka.*"
disable_error_code = ["dict-item", "return", "call-arg"]  # Allow kafka configuration patterns

[[tool.mypy.overrides]]
module = "archipy.adapters.internet_payment_gateways.*"
disable_error_code = ["no-untyped-call", "call-arg"]  # Allow zeep and payment gateway integrations

[[tool.mypy.overrides]]
module = "archipy.adapters.temporal.*"
disable_error_code = ["no-any-return", "misc", "return-value", "arg-type", "var-annotated", "override", "attr-defined"]  # Allow Temporal's dynamic types and workflow patterns

[[tool.mypy.overrides]]
module = "archipy.models.errors.temporal_errors"
disable_error_code = ["attr-defined"]  # Allow BaseConfig issue until global_config() is fixed

[[tool.mypy.overrides]]
module = "archipy.adapters.redis.mocks"
disable_error_code = ["attr-defined"]  # Allow dynamic cluster method assignments to FakeRedis

[tool.config]
pyproject_root_var = "pyproject"

[tool.codespell]
ignore-words-list = "exat,convertor"
skip = ".git,__pycache__,build,dist"

[tool.bandit]
# Bandit configuration for security scanning
# https://bandit.readthedocs.io/en/latest/config.html

# Target directories to scan
targets = ["archipy"]

# Exclude directories from scanning
exclude_dirs = ["features", "docs", "scripts"]

# Skip specific test IDs
# B101: assert_used - Allow assert statements in tests
# B301: pickle - Allow pickle usage (needed for some serialization)
# B403: import_pickle - Allow pickle imports
skips = ["B101", "B301", "B403"]

[tool.behave]
# Parallel execution settings
parallel = 8
parallel_scheme = "multiprocessing"

# Output formatting
show_snippets = false
show_source = false
show_timings = true

# Logging and capture
capture = true
capture_stdout = true
capture_stderr = true
capture_log = true

# Test execution
stop = false
dry_run = false
verbose = false
