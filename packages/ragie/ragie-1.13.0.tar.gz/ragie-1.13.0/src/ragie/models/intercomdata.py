"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from ragie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class IntercomDataTypedDict(TypedDict):
    articles_help_center: NotRequired[bool]
    admins: NotRequired[bool]
    contacts: NotRequired[bool]
    conversations: NotRequired[bool]
    conversation_attachments: NotRequired[bool]
    conversation_notes: NotRequired[bool]
    tickets: NotRequired[bool]
    ticket_attachments: NotRequired[bool]
    ticket_comments: NotRequired[bool]
    ticket_notes: NotRequired[bool]
    filter_user_id: NotRequired[Nullable[str]]


class IntercomData(BaseModel):
    articles_help_center: Optional[bool] = False

    admins: Optional[bool] = False

    contacts: Optional[bool] = False

    conversations: Optional[bool] = False

    conversation_attachments: Optional[bool] = False

    conversation_notes: Optional[bool] = False

    tickets: Optional[bool] = False

    ticket_attachments: Optional[bool] = False

    ticket_comments: Optional[bool] = False

    ticket_notes: Optional[bool] = False

    filter_user_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "articles_help_center",
            "admins",
            "contacts",
            "conversations",
            "conversation_attachments",
            "conversation_notes",
            "tickets",
            "ticket_attachments",
            "ticket_comments",
            "ticket_notes",
            "filter_user_id",
        ]
        nullable_fields = ["filter_user_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
