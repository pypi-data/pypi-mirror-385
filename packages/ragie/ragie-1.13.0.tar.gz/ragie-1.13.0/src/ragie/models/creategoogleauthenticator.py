"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from ragie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from ragie.utils import validate_const
from typing import Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateGoogleAuthenticatorTypedDict(TypedDict):
    name: str
    r"""The unique name of your authenticator, used to identify it and distinguish it from others. This name must be unique. Attempting to reuse the same name will result in an error."""
    client_id: str
    client_secret: str
    provider: Literal["google"]
    domain: NotRequired[Nullable[str]]
    project_number: NotRequired[Nullable[str]]


class CreateGoogleAuthenticator(BaseModel):
    name: str
    r"""The unique name of your authenticator, used to identify it and distinguish it from others. This name must be unique. Attempting to reuse the same name will result in an error."""

    client_id: str

    client_secret: str

    PROVIDER: Annotated[
        Annotated[Literal["google"], AfterValidator(validate_const("google"))],
        pydantic.Field(alias="provider"),
    ] = "google"

    domain: OptionalNullable[str] = UNSET

    project_number: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["domain", "project_number"]
        nullable_fields = ["domain", "project_number"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
