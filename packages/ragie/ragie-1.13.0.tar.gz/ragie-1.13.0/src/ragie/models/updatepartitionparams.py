"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from ragie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Any, Dict, List, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


UpdatePartitionParamsMetadataSchemaTypedDict = TypeAliasType(
    "UpdatePartitionParamsMetadataSchemaTypedDict",
    Union[str, int, bool, List[str], Dict[str, Any]],
)


UpdatePartitionParamsMetadataSchema = TypeAliasType(
    "UpdatePartitionParamsMetadataSchema",
    Union[str, int, bool, List[str], Dict[str, Any]],
)


class UpdatePartitionParamsTypedDict(TypedDict):
    context_aware: NotRequired[Nullable[bool]]
    r"""Enable context-aware descriptions for the partition."""
    description: NotRequired[Nullable[str]]
    r"""Description of the partition."""
    metadata_schema: NotRequired[
        Nullable[Dict[str, UpdatePartitionParamsMetadataSchemaTypedDict]]
    ]
    r"""Metadata schema for the partition. This is an optional subset of the metadata of documents in the partition, defined as JSON Schema, that can be used in filter generatation. Providing detailed descriptions of the fields in the schema can be helpful for LLMs generating filters dynamically."""


class UpdatePartitionParams(BaseModel):
    context_aware: OptionalNullable[bool] = UNSET
    r"""Enable context-aware descriptions for the partition."""

    description: OptionalNullable[str] = UNSET
    r"""Description of the partition."""

    metadata_schema: OptionalNullable[
        Dict[str, UpdatePartitionParamsMetadataSchema]
    ] = UNSET
    r"""Metadata schema for the partition. This is an optional subset of the metadata of documents in the partition, defined as JSON Schema, that can be used in filter generatation. Providing detailed descriptions of the fields in the schema can be helpful for LLMs generating filters dynamically."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["context_aware", "description", "metadata_schema"]
        nullable_fields = ["context_aware", "description", "metadata_schema"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
