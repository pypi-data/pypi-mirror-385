# bazel_build default configuration

variables:

  target: ""
  
  bazel-startup-global: ""

  bazel-startup-local: ""

  bazel: bazel --output_user_root /bazel-home %{bazel-startup-global} %{bazel-startup-local}

  bazel-build-global: ""

  bazel-build-local: ""

  strip: "sometimes"

  compilation-mode: "fastbuild"

  distdir: _bst_distdir

  repo_cache: _bst_repository_cache

  registry: "no-registry-configured"

  # We specify a distdir, repository cache and a registry but some or all of
  # these will not exist (dependant on which source plugins are used). Bazel
  # will ignore (with a warning) non-existant distdirs, repository caches and
  # registries so it is safe to always specify these.
  bazel-build: >-
    %{bazel} build %{target}
    --distdir %{distdir}
    --repository_cache %{build-root}/%{repo_cache}
    --verbose_failures
    --strip %{strip}
    --compilation_mode %{compilation-mode}
    --registry file://%{build-root}/%{registry}
    %{bazel-build-global}
    %{bazel-build-local}

config:

  # Commands for configuring the software
  #
  # We leave these blank, as Bazel has no fixed way to
  # configure software
  #
  configure-commands: []


  # Commands for building the software
  #
  build-commands:
  - "%{bazel-build}"

  # Commands for installing the software into a
  # destination folder
  #
  # We leave these blank as Bazel has no fixed way to
  # install software
  #
  install-commands: []

  # We shouldn't need strip commands, as Bazel should
  # strip binaries if told
  #
  strip-commands: []
