# coding: utf-8

"""
    Kleister OpenAPI

    API definition for Kleister, manage mod packs for Minecraft

    The version of the OpenAPI document: 1.0.0-alpha1
    Contact: kleister@webhippie.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateBuildRequest(BaseModel):
    """
    CreateBuildRequest
    """ # noqa: E501
    minecraft_id: Optional[StrictStr] = None
    forge_id: Optional[StrictStr] = None
    neoforge_id: Optional[StrictStr] = None
    quilt_id: Optional[StrictStr] = None
    fabric_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    java: Optional[StrictStr] = None
    memory: Optional[StrictStr] = None
    latest: Optional[StrictBool] = None
    recommended: Optional[StrictBool] = None
    public: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["minecraft_id", "forge_id", "neoforge_id", "quilt_id", "fabric_id", "name", "java", "memory", "latest", "recommended", "public"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBuildRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if minecraft_id (nullable) is None
        # and model_fields_set contains the field
        if self.minecraft_id is None and "minecraft_id" in self.model_fields_set:
            _dict['minecraft_id'] = None

        # set to None if forge_id (nullable) is None
        # and model_fields_set contains the field
        if self.forge_id is None and "forge_id" in self.model_fields_set:
            _dict['forge_id'] = None

        # set to None if neoforge_id (nullable) is None
        # and model_fields_set contains the field
        if self.neoforge_id is None and "neoforge_id" in self.model_fields_set:
            _dict['neoforge_id'] = None

        # set to None if quilt_id (nullable) is None
        # and model_fields_set contains the field
        if self.quilt_id is None and "quilt_id" in self.model_fields_set:
            _dict['quilt_id'] = None

        # set to None if fabric_id (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_id is None and "fabric_id" in self.model_fields_set:
            _dict['fabric_id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if java (nullable) is None
        # and model_fields_set contains the field
        if self.java is None and "java" in self.model_fields_set:
            _dict['java'] = None

        # set to None if memory (nullable) is None
        # and model_fields_set contains the field
        if self.memory is None and "memory" in self.model_fields_set:
            _dict['memory'] = None

        # set to None if latest (nullable) is None
        # and model_fields_set contains the field
        if self.latest is None and "latest" in self.model_fields_set:
            _dict['latest'] = None

        # set to None if recommended (nullable) is None
        # and model_fields_set contains the field
        if self.recommended is None and "recommended" in self.model_fields_set:
            _dict['recommended'] = None

        # set to None if public (nullable) is None
        # and model_fields_set contains the field
        if self.public is None and "public" in self.model_fields_set:
            _dict['public'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBuildRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "minecraft_id": obj.get("minecraft_id"),
            "forge_id": obj.get("forge_id"),
            "neoforge_id": obj.get("neoforge_id"),
            "quilt_id": obj.get("quilt_id"),
            "fabric_id": obj.get("fabric_id"),
            "name": obj.get("name"),
            "java": obj.get("java"),
            "memory": obj.get("memory"),
            "latest": obj.get("latest"),
            "recommended": obj.get("recommended"),
            "public": obj.get("public")
        })
        return _obj


