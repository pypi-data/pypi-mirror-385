Metadata-Version: 2.4
Name: res-wind-up
Version: 0.4.4
Summary: A tool to assess yield uplift of wind turbines
Author-email: Alex Clerc <alex.clerc@res-group.com>
License: BSD 3-Clause License
        
        Copyright (c) 2024, RENEWABLE ENERGY SYSTEMS LIMITED, all rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification, are permitted
        provided that the following conditions are met:
        
        * Redistributions of source code must retain the above copyright notice, this list of conditions
        and the following disclaimer.
        
        * Redistributions in binary form must reproduce the above copyright notice, this list of
        conditions and the following disclaimer in the documentation and/or other materials provided
        with the distribution.
        
        * Neither the name of the copyright holder nor the names of its contributors may be used to
        endorse or promote products derived from this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
        IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
        OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
        OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: Homepage, https://github.com/resgroup/wind-up
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering
Requires-Python: <4.0,>=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: eval-type-backport
Requires-Dist: geographiclib
Requires-Dist: matplotlib
Requires-Dist: pandas>=2.0.0
Requires-Dist: pyarrow
Requires-Dist: pydantic>=2.0.0
Requires-Dist: python-dotenv
Requires-Dist: pyyaml
Requires-Dist: ruptures
Requires-Dist: scipy
Requires-Dist: seaborn
Requires-Dist: tabulate
Requires-Dist: toml
Requires-Dist: tqdm
Requires-Dist: utm
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: coverage; extra == "dev"
Requires-Dist: poethepoet; extra == "dev"
Requires-Dist: types-pyyaml; extra == "dev"
Requires-Dist: types-tabulate; extra == "dev"
Requires-Dist: types-toml; extra == "dev"
Requires-Dist: types-tqdm; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: requests; extra == "dev"
Requires-Dist: pytest-env; extra == "dev"
Provides-Extra: examples
Requires-Dist: jupyterlab; extra == "examples"
Requires-Dist: notebook; extra == "examples"
Requires-Dist: ipywidgets; extra == "examples"
Requires-Dist: requests; extra == "examples"
Requires-Dist: ephem; extra == "examples"
Requires-Dist: flaml[automl]; extra == "examples"
Dynamic: license-file

# wind-up
A tool to assess yield uplift of wind turbines

[![image](https://img.shields.io/pypi/v/res-wind-up.svg)](https://pypi.python.org/pypi/res-wind-up)
[![image](https://img.shields.io/pypi/l/res-wind-up.svg)](https://github.com/resgroup/wind-up/blob/main/LICENSE.txt)
[![image](https://img.shields.io/pypi/pyversions/res-wind-up.svg)](https://pypi.python.org/pypi/res-wind-up)
[![Lint & Format: Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v1.json)](https://github.com/charliermarsh/ruff)
[![Typing: mypy](https://img.shields.io/badge/typing-mypy-yellow.svg)](https://github.com/python/mypy)
[![lint-and-test](https://github.com/resgroup/wind-up/actions/workflows/lint-and-test.yaml/badge.svg)](https://github.com/resgroup/wind-up/actions/workflows/lint-and-test.yaml)

## Getting Started
See [`examples`](examples) folder for example analysis using the wind-up package. [`smarteole_example.ipynb`](examples%2Fsmarteole_example.ipynb) is a good place to start.

The wind-up package can be installed using any Python environment manager. Examples using [uv](https://docs.astral.sh/uv/) and [pip](https://pypi.org/project/pip/) are shown below:

### Using uv
```shell
# Install the wind-up package in an existing project
uv add res-wind-up

# Or create a new project and install the wind-up package
uv init my-project
cd my-project
uv add res-wind-up
```

### Using pip
```shell
# create and activate a virtual environment, if needed
python -m venv .venv
source .venv/Scripts/activate  # or .venv/bin/activate on linux or ".venv/Scripts/activate" in Windows command prompt
# install the wind-up package in the virtual environment
pip install res-wind-up # alternatively clone the repo, navigate to the wind-up folder and run "pip install ."
```
Note that the package is named `wind_up` (with an underscore) in Python code. For example to print the version of the installed package use the following code snippet:
```python
import wind_up
print(wind_up.__version__)
```

## Contributing
To start making changes fork the repository or make a new branch from `main`. Note `main` is protected; 
if a commit fails to push and you want to undo it try `git reset origin/main --hard`

The development environment should be created and managed using [uv](https://docs.astral.sh/uv/). To create the environment:
```shell
uv sync --extra dev
```
To run the formatting, linting and testing:
```shell
uv run poe all # or all-fast to skip slow tests
```
Or simply
```shell
poe all # or all-fast to skip slow tests
```
if you have activated the virtual environment.

## License
See [`LICENSE.txt`](LICENSE.txt)

## Contact
Alex.Clerc@res-group.com
