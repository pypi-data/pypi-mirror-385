Metadata-Version: 2.4
Name: GuardianUnivalle-Benito-Yucra
Version: 0.1.69
Summary: Middleware y detectores de seguridad (SQLi, XSS, CSRF, DoS) para Django/Flask
Author-email: Andres Benito Calle Yucra <benitoandrescalle035@gmail.com>
License: MIT
Project-URL: Homepage, https://pypi.org/project/guardianunivalle-benito-yucra/
Project-URL: Bug_Tracker, https://github.com/Andyyupy/guardianunivalle-benito-yucra/issues
Keywords: security,django,flask,sqli,xss,csrf,middleware
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Security
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Framework :: Django
Classifier: Framework :: Flask
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: redis>=4.0
Requires-Dist: django>=3.2
Dynamic: license-file

<!-- Informaci√≥n de la librer√≠a -->

# üõ°Ô∏è Guardian Univalle ‚Äì Benito & Junkrat

Framework de detecci√≥n y defensa de amenazas web para Django y Flask

Guardian Univalle es un sistema de seguridad modular desarrollado para fortalecer aplicaciones Django frente a ataques web comunes como XSS, CSRF, inyecci√≥n SQL, ataques DoS y scraping automatizado.
Cada m√≥dulo opera mediante middleware independientes que analizan el tr√°fico HTTP en tiempo real, aplican heur√≠sticas inteligentes y registran eventos sospechosos para auditor√≠a y bloqueo adaptativo.

‚öôÔ∏è Arquitectura general

Guardian Univalle est√° dise√±ado bajo una arquitectura modular y extensible, donde cada tipo de amenaza se gestiona mediante un middleware especializado.
Cada middleware:

- Se ejecuta en la fase inicial del request (process_request).
- Analiza cabeceras, cuerpo y metadatos de la petici√≥n.
- Eval√∫a indicadores de ataque seg√∫n patrones heur√≠sticos y reglas configurables.
- Calcula una puntuaci√≥n de riesgo (score) para cada evento.
- Anexa la informaci√≥n al objeto request (por ejemplo, request.xss_attack_info) para que otros m√≥dulos (como el de auditor√≠a) la procesen.

üß© M√≥dulos de defensa incluidos

1. üîê CSRFDefenseMiddleware

Defensa contra Cross-Site Request Forgery (CSRF).

Este m√≥dulo detecta intentos de falsificaci√≥n de peticiones mediante:

- Verificaci√≥n de cabeceras Origin y Referer contra el host real.
- Validaci√≥n de tokens CSRF en cookies, cabeceras o formularios.
- An√°lisis del tipo de contenido (Content-Type) y par√°metros sensibles.
- Detecci√≥n de peticiones JSON o formularios enviados desde dominios externos.
- Asignaci√≥n de un score de riesgo proporcional al n√∫mero y severidad de se√±ales encontradas.

Algoritmos utilizados:
Heur√≠sticas basadas en cabeceras HTTP, validaci√≥n sem√°ntica de origen, y detecci√≥n de anomal√≠as en m√©todos POST, PUT, DELETE y PATCH.

2. üß¨ XSSDefenseMiddleware

Defensa contra Cross-Site Scripting (XSS).

Analiza en profundidad los datos enviados en el cuerpo y querystring, detectando vectores de inyecci√≥n HTML/JS mediante:

- Patrones de alto riesgo (<script>, javascript:, onload=, eval()).
- Ofuscaciones con entidades (&#x3C;, %3Cscript).
- Detecci√≥n de atributos de eventos (onmouseover, onfocus, etc.).
- An√°lisis de URIs maliciosas (data:text/html, vbscript:).
- Scoring ponderado por severidad (de 0.3 a 0.95).

Algoritmos utilizados:
Detecci√≥n basada en expresiones regulares avanzadas con pesos heur√≠sticos y uso opcional de la librer√≠a Bleach para sanitizaci√≥n comparativa.

Salida:
Agrega request.xss_attack_info con los detalles de detecci√≥n, la IP de origen, descripci√≥n, payload y score total.

3. üíæ SQLIDefenseMiddleware

Defensa contra Inyecci√≥n SQL (SQLi).

Identifica intentos de inyecci√≥n SQL en los par√°metros enviados a trav√©s de:

- Palabras clave peligrosas (UNION, SELECT, DROP, INSERT, UPDATE).
- Uso de comentarios (--, #, /_ ... _/).
- Concatenaciones o subconsultas sospechosas.
- Comportamientos an√≥malos en par√°metros GET, POST o JSON.

Algoritmos utilizados:
Heur√≠sticas sint√°cticas + patrones combinados con contextos.
Eval√∫a combinaciones de operadores y palabras reservadas para minimizar falsos positivos.

Resultado:
Registra el intento en request.sql_injection_info con score calculado y par√°metros comprometidos.

4. üåê DOSDefenseMiddleware

Detecci√≥n de ataques de Denegaci√≥n de Servicio (DoS).

Monitorea la frecuencia de peticiones por IP y calcula una m√©trica adaptativa de comportamiento:

- Detecta exceso de solicitudes en intervalos cortos.
- Analiza User-Agent, patrones repetitivos y tama√±o de payloads.
- Aplica l√≠mites configurables (MAX_REQUESTS_PER_WINDOW).
- Marca IPs sospechosas para registro y bloqueo temporal.

Algoritmos utilizados:
Sliding Window con conteo adaptativo en memoria, controlado por se√±ales de frecuencia e intensidad.

5. üï∑Ô∏è ScrapingDefenseMiddleware (opcional)

Detecci√≥n de scraping y bots automatizados.

Eval√∫a caracter√≠sticas t√≠picas de scraping:

- User-Agent an√≥malo o ausente.
- Patr√≥n de navegaci√≥n repetitivo o excesivamente r√°pido.
- Ausencia de cabeceras humanas (como Accept-Language o Referer).
- Combinaci√≥n con heur√≠sticas de DoS para detectar scrapers agresivos.

Algoritmos utilizados:
An√°lisis estad√≠stico de cabeceras + patrones de comportamiento a corto plazo.

üß† Integraci√≥n y uso

Instalar la librer√≠a:

pip install guardian-univalle

En tu archivo settings.py de Django, a√±adir los middlewares:

MIDDLEWARE = [
"guardian_univalle.detectores.csrf_defense.CSRFDefenseMiddleware",
"guardian_univalle.detectores.xss_defense.XSSDefenseMiddleware",
"guardian_univalle.detectores.sql_defense.SQLIDefenseMiddleware",
"guardian_univalle.detectores.dos_defense.DOSDefenseMiddleware",
"guardian_univalle.detectores.scraping_defense.ScrapingDefenseMiddleware", # opcional
]

(Opcional) Configurar umbrales en settings.py:

XSS_DEFENSE_THRESHOLD = 0.6
CSRF_DEFENSE_MIN_SIGNALS = 1
DOS_DEFENSE_MAX_REQUESTS = 100
SQLI_DEFENSE_THRESHOLD = 0.5

üßæ Auditor√≠a y correlaci√≥n de eventos

Cada middleware genera un diccionario con detalles de detecci√≥n:

request.xss_attack_info = {
"ip": "192.168.1.10",
"tipos": ["XSS"],
"descripcion": ["Etiqueta <script> detectada"],
"payload": "{'field': 'comentario', 'snippet': '<script>alert(1)</script>'}",
"score": 0.92,
"url": "/comentarios/enviar/",
}

Estos datos pueden ser almacenados por un AuditoriaMiddleware o enviados a un sistema SIEM para correlaci√≥n y respuesta automatizada.

üß© Filosof√≠a del proyecto

Guardian Univalle ‚Äì Benito & Junkrat busca proporcionar una capa de defensa proactiva para entornos Django universitarios y empresariales, combinando:

Detecci√≥n heur√≠stica,

An√°lisis sem√°ntico de cabeceras y payloads, y

Escalamiento de score basado en se√±ales m√∫ltiples.

Su dise√±o es did√°ctico y extensible, ideal tanto para proyectos reales como para ense√±anza de ciberseguridad aplicada.

üß± Estructura del paquete
guardian_univalle/
‚îÇ
‚îú‚îÄ‚îÄ detectores/
‚îÇ ‚îú‚îÄ‚îÄ csrf_defense.py
‚îÇ ‚îú‚îÄ‚îÄ xss_defense.py
‚îÇ ‚îú‚îÄ‚îÄ sql_defense.py
‚îÇ ‚îú‚îÄ‚îÄ dos_defense.py
‚îÇ ‚îú‚îÄ‚îÄ scraping_defense.py
‚îÇ
‚îú‚îÄ‚îÄ auditoria/
‚îÇ ‚îî‚îÄ‚îÄ auditoria_middleware.py
‚îÇ
‚îî‚îÄ‚îÄ **init**.py

üßæ Licencia

Este proyecto se distribuye bajo la licencia MIT, permitiendo libre uso y modificaci√≥n con atribuci√≥n.
