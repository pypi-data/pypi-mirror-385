from typing import (
    Any,
    Dict,
    List,
    Type,
    TypeVar,
    Union,
)

import attrs

from ..types import UNSET, Unset

T = TypeVar("T", bound="UnifiedPreviewRequest")


@attrs.define
class UnifiedPreviewRequest:
    """Request to preview a datasource, either by ID (ingested) or by path (external).
    Exactly one of `datasource_uid` or `source` must be provided.

        Attributes:
            credential_kwargs (Union[Unset, str]): Credentials for accessing external sources
            data_connector_config_uid (Union[Unset, int]): Optional connector ID if using a pre-configured connection
            datasource_uid (Union[Unset, int]): UID of the already-ingested datasource
            return_snorkel_gen_uid_as_col (Union[Unset, bool]): Whether to return the autogenerated UID column Default:
                False.
            source (Union[Unset, str]): Path or query representing the external source
            source_type (Union[Unset, str]): Type of data source (e.g. 'file', 's3', 'databricks')
            truncate_texts (Union[Unset, bool]): Whether to truncate long text fields in the preview Default: True.
    """

    credential_kwargs: Union[Unset, str] = UNSET
    data_connector_config_uid: Union[Unset, int] = UNSET
    datasource_uid: Union[Unset, int] = UNSET
    return_snorkel_gen_uid_as_col: Union[Unset, bool] = False
    source: Union[Unset, str] = UNSET
    source_type: Union[Unset, str] = UNSET
    truncate_texts: Union[Unset, bool] = True
    additional_properties: Dict[str, Any] = attrs.field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        credential_kwargs = self.credential_kwargs
        data_connector_config_uid = self.data_connector_config_uid
        datasource_uid = self.datasource_uid
        return_snorkel_gen_uid_as_col = self.return_snorkel_gen_uid_as_col
        source = self.source
        source_type = self.source_type
        truncate_texts = self.truncate_texts

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if credential_kwargs is not UNSET:
            field_dict["credential_kwargs"] = credential_kwargs
        if data_connector_config_uid is not UNSET:
            field_dict["data_connector_config_uid"] = data_connector_config_uid
        if datasource_uid is not UNSET:
            field_dict["datasource_uid"] = datasource_uid
        if return_snorkel_gen_uid_as_col is not UNSET:
            field_dict["return_snorkel_gen_uid_as_col"] = return_snorkel_gen_uid_as_col
        if source is not UNSET:
            field_dict["source"] = source
        if source_type is not UNSET:
            field_dict["source_type"] = source_type
        if truncate_texts is not UNSET:
            field_dict["truncate_texts"] = truncate_texts

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        _credential_kwargs = d.pop("credential_kwargs", UNSET)
        credential_kwargs = UNSET if _credential_kwargs is None else _credential_kwargs

        _data_connector_config_uid = d.pop("data_connector_config_uid", UNSET)
        data_connector_config_uid = (
            UNSET if _data_connector_config_uid is None else _data_connector_config_uid
        )

        _datasource_uid = d.pop("datasource_uid", UNSET)
        datasource_uid = UNSET if _datasource_uid is None else _datasource_uid

        _return_snorkel_gen_uid_as_col = d.pop("return_snorkel_gen_uid_as_col", UNSET)
        return_snorkel_gen_uid_as_col = (
            UNSET
            if _return_snorkel_gen_uid_as_col is None
            else _return_snorkel_gen_uid_as_col
        )

        _source = d.pop("source", UNSET)
        source = UNSET if _source is None else _source

        _source_type = d.pop("source_type", UNSET)
        source_type = UNSET if _source_type is None else _source_type

        _truncate_texts = d.pop("truncate_texts", UNSET)
        truncate_texts = UNSET if _truncate_texts is None else _truncate_texts

        obj = cls(
            credential_kwargs=credential_kwargs,
            data_connector_config_uid=data_connector_config_uid,
            datasource_uid=datasource_uid,
            return_snorkel_gen_uid_as_col=return_snorkel_gen_uid_as_col,
            source=source,
            source_type=source_type,
            truncate_texts=truncate_texts,
        )
        obj.additional_properties = d
        return obj

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
