# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Template(BaseModel):
    """
    A image template.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The image template ID (auto-generated).")
    name: StrictStr = Field(description="The image template name.")
    description: Optional[StrictStr] = Field(default=None, description="The image template description.")
    os: Optional[StrictStr] = Field(default='linux', description="Type of operating system if OS kind (useful to determine cloud-init parameters for instance).")
    source: StrictStr = Field(description="HTTP(s) source URL of the KVM-ready OS image.")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "os", "source"]

    @field_validator('os')
    def os_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['linux', 'windows']):
            raise ValueError("must be one of enum values ('linux', 'windows')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "os": obj.get("os") if obj.get("os") is not None else 'linux',
            "source": obj.get("source")
        })
        return _obj


