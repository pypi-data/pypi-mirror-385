# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Kylo(BaseModel):
    """
    A Kylo provides an elastic NFS-like remote storage volume.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The Kylo ID (auto-generated).")
    name: StrictStr = Field(description="The Kylo name.")
    description: Optional[StrictStr] = Field(default=None, description="The Kylo description.")
    access: Optional[StrictStr] = Field(default='RW', description="The Kylo volume access type.")
    protocols: Optional[List[StrictInt]] = Field(default=None, description="The Kylo NFS protocol versions to be supported.")
    endpoint: Optional[StrictStr] = Field(default=None, description="The Kylo endpoint FQDN (read-only).")
    size: Optional[StrictInt] = Field(default=None, description="The Kylo volume bytes used (read-only).")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "access", "protocols", "endpoint", "size"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RO', 'RW']):
            raise ValueError("must be one of enum values ('RO', 'RW')")
        return value

    @field_validator('protocols')
    def protocols_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([3, 4]):
                raise ValueError("each list item must be one of (3, 4)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Kylo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Kylo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "access": obj.get("access") if obj.get("access") is not None else 'RW',
            "protocols": obj.get("protocols"),
            "endpoint": obj.get("endpoint"),
            "size": obj.get("size")
        })
        return _obj


