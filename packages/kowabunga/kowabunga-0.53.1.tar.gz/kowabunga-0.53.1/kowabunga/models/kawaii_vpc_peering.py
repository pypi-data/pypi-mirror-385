# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from kowabunga.models.kawaii_vpc_forward_rule import KawaiiVpcForwardRule
from kowabunga.models.kawaii_vpc_net_ip_zone import KawaiiVpcNetIpZone
from typing import Optional, Set
from typing_extensions import Self

class KawaiiVpcPeering(BaseModel):
    """
    A Kawaii internal VPC subnet peering.
    """ # noqa: E501
    subnet: StrictStr = Field(description="Kowabunga Subnet ID to be peered with (subnet local IP addresses will be automatically assigned to Kawaii instances)..")
    policy: Optional[StrictStr] = Field(default='drop', description="The default VPC traffic forwarding policy.")
    ingress: Optional[List[KawaiiVpcForwardRule]] = Field(default=None, description="The firewall list of forwarding ingress rules from VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).")
    egress: Optional[List[KawaiiVpcForwardRule]] = Field(default=None, description="The firewall list of forwarding egress rules to VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).")
    netip: Optional[List[KawaiiVpcNetIpZone]] = Field(default=None, description="The per-zone auto-assigned private IPs in peered subnet (read-only).")
    __properties: ClassVar[List[str]] = ["subnet", "policy", "ingress", "egress", "netip"]

    @field_validator('policy')
    def policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['accept', 'drop']):
            raise ValueError("must be one of enum values ('accept', 'drop')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KawaiiVpcPeering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ingress (list)
        _items = []
        if self.ingress:
            for _item_ingress in self.ingress:
                if _item_ingress:
                    _items.append(_item_ingress.to_dict())
            _dict['ingress'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in egress (list)
        _items = []
        if self.egress:
            for _item_egress in self.egress:
                if _item_egress:
                    _items.append(_item_egress.to_dict())
            _dict['egress'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in netip (list)
        _items = []
        if self.netip:
            for _item_netip in self.netip:
                if _item_netip:
                    _items.append(_item_netip.to_dict())
            _dict['netip'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KawaiiVpcPeering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subnet": obj.get("subnet"),
            "policy": obj.get("policy") if obj.get("policy") is not None else 'drop',
            "ingress": [KawaiiVpcForwardRule.from_dict(_item) for _item in obj["ingress"]] if obj.get("ingress") is not None else None,
            "egress": [KawaiiVpcForwardRule.from_dict(_item) for _item in obj["egress"]] if obj.get("egress") is not None else None,
            "netip": [KawaiiVpcNetIpZone.from_dict(_item) for _item in obj["netip"]] if obj.get("netip") is not None else None
        })
        return _obj


