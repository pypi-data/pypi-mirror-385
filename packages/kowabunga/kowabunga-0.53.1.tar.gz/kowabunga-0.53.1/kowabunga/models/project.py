# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kowabunga.models.metadata import Metadata
from kowabunga.models.project_resources import ProjectResources
from kowabunga.models.region_subnet import RegionSubnet
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    A Kowabunga project corresponds to a single tenant, isolated set of resources.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The project ID (auto-generated).")
    name: StrictStr = Field(description="The project name.")
    description: Optional[StrictStr] = Field(default=None, description="The project description.")
    domain: Optional[StrictStr] = Field(default=None, description="Internal domain name (e.g. myproject.acme.com).")
    root_password: Optional[StrictStr] = Field(default=None, description="Default root password, set at cloud-init instance bootstrap phase. Will be randomly auto-generated at each instance creation if unspecified.")
    bootstrap_user: Optional[StrictStr] = Field(default=None, description="Default service user name, created at cloud-init instance bootstrap phase. Will use Kowabunga's default configuration one if unspecified.")
    bootstrap_pubkey: Optional[StrictStr] = Field(default=None, description="Default public SSH key, to be associated to bootstrap user. Will use Kowabunga's default configuration one if unspecified.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="A list of tags to be associated to the project.")
    metadatas: Optional[List[Metadata]] = Field(default=None, description="A list of metadata to be associated to the project.")
    quotas: Optional[ProjectResources] = None
    private_subnets: Optional[List[RegionSubnet]] = Field(default=None, description="The assigned project VPC private subnets IDs (read-only).")
    reserved_vrrp_ids: Optional[List[StrictInt]] = Field(default=None, description="The list of VRRP IDs used by -as-a-service resources within the project virtual network (read-only). Should your application use VRRP for service redundancy, you should use different IDs to prevent issues..")
    teams: List[StrictStr] = Field(description="A list of user teams allowed to administrate the project (i.e. capable of managing internal resources).")
    regions: List[StrictStr] = Field(description="A list of Kowabunga regions the project is managing resources from.")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "domain", "root_password", "bootstrap_user", "bootstrap_pubkey", "tags", "metadatas", "quotas", "private_subnets", "reserved_vrrp_ids", "teams", "regions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadatas (list)
        _items = []
        if self.metadatas:
            for _item_metadatas in self.metadatas:
                if _item_metadatas:
                    _items.append(_item_metadatas.to_dict())
            _dict['metadatas'] = _items
        # override the default output from pydantic by calling `to_dict()` of quotas
        if self.quotas:
            _dict['quotas'] = self.quotas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in private_subnets (list)
        _items = []
        if self.private_subnets:
            for _item_private_subnets in self.private_subnets:
                if _item_private_subnets:
                    _items.append(_item_private_subnets.to_dict())
            _dict['private_subnets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "root_password": obj.get("root_password"),
            "bootstrap_user": obj.get("bootstrap_user"),
            "bootstrap_pubkey": obj.get("bootstrap_pubkey"),
            "tags": obj.get("tags"),
            "metadatas": [Metadata.from_dict(_item) for _item in obj["metadatas"]] if obj.get("metadatas") is not None else None,
            "quotas": ProjectResources.from_dict(obj["quotas"]) if obj.get("quotas") is not None else None,
            "private_subnets": [RegionSubnet.from_dict(_item) for _item in obj["private_subnets"]] if obj.get("private_subnets") is not None else None,
            "reserved_vrrp_ids": obj.get("reserved_vrrp_ids"),
            "teams": obj.get("teams"),
            "regions": obj.get("regions")
        })
        return _obj


