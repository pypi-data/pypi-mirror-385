# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from kowabunga.models.kawaii_firewall_egress_rule import KawaiiFirewallEgressRule
from kowabunga.models.kawaii_firewall_ingress_rule import KawaiiFirewallIngressRule
from typing import Optional, Set
from typing_extensions import Self

class KawaiiFirewall(BaseModel):
    """
    A Kawaii public firewall settings.
    """ # noqa: E501
    ingress: Optional[List[KawaiiFirewallIngressRule]] = Field(default=None, description="The Kawaii public firewall list of ingress rules. Kawaii default policy is to drop all incoming traffic, including ICMP. Specified ruleset will be explicitly accepted.")
    egress_policy: Optional[StrictStr] = Field(default='accept', description="The default public traffic egress policy.")
    egress: Optional[List[KawaiiFirewallEgressRule]] = Field(default=None, description="The Kawaii public firewall list of egress rules. Kawaii default policy is to accept all outgoing traffic, including ICMP. Specified ruleset will be explicitly dropped if egress_policy is set to accept, and explicitly accepted if egress policy is set to drop..")
    __properties: ClassVar[List[str]] = ["ingress", "egress_policy", "egress"]

    @field_validator('egress_policy')
    def egress_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['accept', 'drop']):
            raise ValueError("must be one of enum values ('accept', 'drop')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KawaiiFirewall from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ingress (list)
        _items = []
        if self.ingress:
            for _item_ingress in self.ingress:
                if _item_ingress:
                    _items.append(_item_ingress.to_dict())
            _dict['ingress'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in egress (list)
        _items = []
        if self.egress:
            for _item_egress in self.egress:
                if _item_egress:
                    _items.append(_item_egress.to_dict())
            _dict['egress'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KawaiiFirewall from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ingress": [KawaiiFirewallIngressRule.from_dict(_item) for _item in obj["ingress"]] if obj.get("ingress") is not None else None,
            "egress_policy": obj.get("egress_policy") if obj.get("egress_policy") is not None else 'accept',
            "egress": [KawaiiFirewallEgressRule.from_dict(_item) for _item in obj["egress"]] if obj.get("egress") is not None else None
        })
        return _obj


