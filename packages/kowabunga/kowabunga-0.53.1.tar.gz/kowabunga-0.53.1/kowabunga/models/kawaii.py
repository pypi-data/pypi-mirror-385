# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kowabunga.models.kawaii_d_nat_rule import KawaiiDNatRule
from kowabunga.models.kawaii_firewall import KawaiiFirewall
from kowabunga.models.kawaii_ip_sec import KawaiiIpSec
from kowabunga.models.kawaii_net_ip import KawaiiNetIp
from kowabunga.models.kawaii_vpc_peering import KawaiiVpcPeering
from typing import Optional, Set
from typing_extensions import Self

class Kawaii(BaseModel):
    """
    A Kawaii (Kowabunga Adapative WAn Intelligent Interface) is a network gateway used for your Internet inbound and outbound traffic.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The Kawaii ID (auto-generated).")
    name: Optional[StrictStr] = Field(default=None, description="The Kawaii name.")
    description: Optional[StrictStr] = Field(default=None, description="The Kawaii description.")
    netip: Optional[KawaiiNetIp] = None
    firewall: Optional[KawaiiFirewall] = None
    dnat: Optional[List[KawaiiDNatRule]] = Field(default=None, description="The Kawaii list of NAT forwarding entries. Kawaii will forward public Internet traffic from all public virtual IPs to requested private subnet IP addresses.")
    vpc_peerings: Optional[List[KawaiiVpcPeering]] = Field(default=None, description="The Kawaii list of Kowabunga private VPC subnet peering entries.")
    ipsec_connections: Optional[List[KawaiiIpSec]] = Field(default=None, description="The Kawaii list of Kowabunga IPsec connections.")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "netip", "firewall", "dnat", "vpc_peerings", "ipsec_connections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Kawaii from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of netip
        if self.netip:
            _dict['netip'] = self.netip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of firewall
        if self.firewall:
            _dict['firewall'] = self.firewall.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dnat (list)
        _items = []
        if self.dnat:
            for _item_dnat in self.dnat:
                if _item_dnat:
                    _items.append(_item_dnat.to_dict())
            _dict['dnat'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vpc_peerings (list)
        _items = []
        if self.vpc_peerings:
            for _item_vpc_peerings in self.vpc_peerings:
                if _item_vpc_peerings:
                    _items.append(_item_vpc_peerings.to_dict())
            _dict['vpc_peerings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ipsec_connections (list)
        _items = []
        if self.ipsec_connections:
            for _item_ipsec_connections in self.ipsec_connections:
                if _item_ipsec_connections:
                    _items.append(_item_ipsec_connections.to_dict())
            _dict['ipsec_connections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Kawaii from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "netip": KawaiiNetIp.from_dict(obj["netip"]) if obj.get("netip") is not None else None,
            "firewall": KawaiiFirewall.from_dict(obj["firewall"]) if obj.get("firewall") is not None else None,
            "dnat": [KawaiiDNatRule.from_dict(_item) for _item in obj["dnat"]] if obj.get("dnat") is not None else None,
            "vpc_peerings": [KawaiiVpcPeering.from_dict(_item) for _item in obj["vpc_peerings"]] if obj.get("vpc_peerings") is not None else None,
            "ipsec_connections": [KawaiiIpSec.from_dict(_item) for _item in obj["ipsec_connections"]] if obj.get("ipsec_connections") is not None else None
        })
        return _obj


