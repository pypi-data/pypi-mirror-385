# coding: utf-8

"""
    Kowabunga API documentation

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.52.5
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kowabunga.models.kawaii_ip_sec import KawaiiIpSec

class TestKawaiiIpSec(unittest.TestCase):
    """KawaiiIpSec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> KawaiiIpSec:
        """Test KawaiiIpSec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `KawaiiIpSec`
        """
        model = KawaiiIpSec()
        if include_optional:
            return KawaiiIpSec(
                id = '',
                name = '',
                description = '',
                ip = '',
                remote_ip = '',
                remote_subnet = '',
                pre_shared_key = '',
                dpd_timeout_action = 'restart',
                dpd_timeout = '240s',
                start_action = 'start',
                rekey_time = '2h',
                phase1_lifetime = '1h',
                phase1_dh_group_number = 2,
                phase1_integrity_algorithm = 'SHA1',
                phase1_encryption_algorithm = 'AES128',
                phase2_lifetime = '1h',
                phase2_dh_group_number = 2,
                phase2_integrity_algorithm = 'SHA1',
                phase2_encryption_algorithm = 'AES128',
                firewall = {ingress=[{protocol=tcp, source=0.0.0.0/0, ports=ports}, {protocol=tcp, source=0.0.0.0/0, ports=ports}], egress_policy=accept, egress=[{protocol=tcp, destination=0.0.0.0/0, ports=ports}, {protocol=tcp, destination=0.0.0.0/0, ports=ports}]}
            )
        else:
            return KawaiiIpSec(
                name = '',
                remote_ip = '',
                remote_subnet = '',
                pre_shared_key = '',
                phase1_dh_group_number = 2,
                phase1_integrity_algorithm = 'SHA1',
                phase1_encryption_algorithm = 'AES128',
                phase2_dh_group_number = 2,
                phase2_integrity_algorithm = 'SHA1',
                phase2_encryption_algorithm = 'AES128',
        )
        """

    def testKawaiiIpSec(self):
        """Test KawaiiIpSec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
