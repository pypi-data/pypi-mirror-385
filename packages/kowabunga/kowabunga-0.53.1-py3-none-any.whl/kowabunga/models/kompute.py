# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Kompute(BaseModel):
    """
    A Kompute is a wrapper object for bare virtual machines. It consists of an instance, one to several attached volumes and 2 network adapters (a private one, a public one). This is the prefered way for creating virtual machines. IP addresses will be automatically assigned.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The Kompute ID (auto-generated).")
    name: StrictStr = Field(description="The Kompute name.")
    description: Optional[StrictStr] = Field(default=None, description="The Kompute description.")
    memory: StrictInt = Field(description="The Kompute memory size (in bytes).")
    vcpus: StrictInt = Field(description="The Kompute number of vCPUs.")
    disk: StrictInt = Field(description="The Kompute OS disk size (in bytes).")
    data_disk: Optional[StrictInt] = Field(default=0, description="The Kompute extra data disk size (in bytes). If unspecified, no extra data disk will be assigned.")
    ip: Optional[StrictStr] = Field(default=None, description="The Kompute assigned private IPv4 address (read-only).")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "memory", "vcpus", "disk", "data_disk", "ip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Kompute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Kompute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "memory": obj.get("memory"),
            "vcpus": obj.get("vcpus"),
            "disk": obj.get("disk"),
            "data_disk": obj.get("data_disk") if obj.get("data_disk") is not None else 0,
            "ip": obj.get("ip")
        })
        return _obj


