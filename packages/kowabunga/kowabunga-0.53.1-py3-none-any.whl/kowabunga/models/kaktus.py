# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kowabunga.models.cost import Cost
from typing import Optional, Set
from typing_extensions import Self

class Kaktus(BaseModel):
    """
    A Kaktus (Kowabunga Affordable KVM and Tight Underneath Storage) is an hyper-converged infrastructure (HCI) bare-metal node offering computing and distributed storage capabilites.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The Kaktus computing node ID (auto-generated).")
    name: StrictStr = Field(description="The Kaktus computing node name.")
    description: Optional[StrictStr] = Field(default=None, description="The Kaktus computing node description.")
    cpu_cost: Optional[Cost] = None
    memory_cost: Optional[Cost] = None
    overcommit_cpu_ratio: Optional[StrictInt] = Field(default=3, description="The Kaktus node CPU resource over-commit ratio. Overcommitting CPU resources for VMs means allocating more virtual CPUs (vCPUs) to the virtual machines (VMs) than the physical cores available on the node. This can help optimize the utilization of the node CPU and increase the density of VMs per node.")
    overcommit_memory_ratio: Optional[StrictInt] = Field(default=2, description="The Kaktus node memory resource over-commit ratio. Memory overcommitment is a concept in computing that covers the assignment of more memory to virtual computing devices (or processes) than the physical machine they are hosted, or running on, actually has.")
    agents: List[StrictStr] = Field(description="a list of existing remote agents managing the Kaktus node.")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "cpu_cost", "memory_cost", "overcommit_cpu_ratio", "overcommit_memory_ratio", "agents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Kaktus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu_cost
        if self.cpu_cost:
            _dict['cpu_cost'] = self.cpu_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory_cost
        if self.memory_cost:
            _dict['memory_cost'] = self.memory_cost.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Kaktus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "cpu_cost": Cost.from_dict(obj["cpu_cost"]) if obj.get("cpu_cost") is not None else None,
            "memory_cost": Cost.from_dict(obj["memory_cost"]) if obj.get("memory_cost") is not None else None,
            "overcommit_cpu_ratio": obj.get("overcommit_cpu_ratio") if obj.get("overcommit_cpu_ratio") is not None else 3,
            "overcommit_memory_ratio": obj.get("overcommit_memory_ratio") if obj.get("overcommit_memory_ratio") is not None else 2,
            "agents": obj.get("agents")
        })
        return _obj


