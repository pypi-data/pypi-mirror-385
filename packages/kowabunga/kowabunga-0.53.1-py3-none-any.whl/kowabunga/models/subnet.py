# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from kowabunga.models.ip_range import IpRange
from typing import Optional, Set
from typing_extensions import Self

class Subnet(BaseModel):
    """
    A network subnet.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The network subnet ID (auto-generated).")
    name: StrictStr = Field(description="The network subnet name.")
    description: Optional[StrictStr] = Field(default=None, description="The network subnet description.")
    cidr: StrictStr = Field(description="The network subnet CIDR (e.g. 192.168.0.0/24).")
    gateway: StrictStr = Field(description="The network subnet router/gateway IP address (e.g. 192.168.0.254).")
    dns: Optional[StrictStr] = Field(default=None, description="The network subnet DNS server IP address (gateway value if unspecified).")
    extra_routes: Optional[List[StrictStr]] = Field(default=None, description="The list of extra routes to be access through designated gateway (format is 10.0.0.0/8).")
    reserved: Optional[List[IpRange]] = Field(default=None, description="The network subnet reserved IPv4 ranges (i.e. no IP address can be assigned from there).")
    gw_pool: Optional[List[IpRange]] = Field(default=None, description="The network subnet IPv4 ranges reserved for per-zone local network gateways (range size must be at least equal to region number of zones).")
    application: Optional[StrictStr] = Field(default='user', description="Optional application service type.")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "cidr", "gateway", "dns", "extra_routes", "reserved", "gw_pool", "application"]

    @field_validator('application')
    def application_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ceph', 'user']):
            raise ValueError("must be one of enum values ('ceph', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subnet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reserved (list)
        _items = []
        if self.reserved:
            for _item_reserved in self.reserved:
                if _item_reserved:
                    _items.append(_item_reserved.to_dict())
            _dict['reserved'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gw_pool (list)
        _items = []
        if self.gw_pool:
            for _item_gw_pool in self.gw_pool:
                if _item_gw_pool:
                    _items.append(_item_gw_pool.to_dict())
            _dict['gw_pool'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subnet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "cidr": obj.get("cidr"),
            "gateway": obj.get("gateway"),
            "dns": obj.get("dns"),
            "extra_routes": obj.get("extra_routes"),
            "reserved": [IpRange.from_dict(_item) for _item in obj["reserved"]] if obj.get("reserved") is not None else None,
            "gw_pool": [IpRange.from_dict(_item) for _item in obj["gw_pool"]] if obj.get("gw_pool") is not None else None,
            "application": obj.get("application") if obj.get("application") is not None else 'user'
        })
        return _obj


