# coding: utf-8

"""
    Kowabunga API

    Kvm Orchestrator With A BUNch of Goods Added

    The version of the OpenAPI document: 0.53.1
    Contact: maintainers@kowabunga.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kowabunga.models.cost import Cost
from typing import Optional, Set
from typing_extensions import Self

class StoragePool(BaseModel):
    """
    A storage pool.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The storage pool ID (auto-generated).")
    name: StrictStr = Field(description="The storage pool name.")
    description: Optional[StrictStr] = Field(default=None, description="The storage pool description.")
    pool: StrictStr = Field(description="Ceph pool name.")
    ceph_address: Optional[StrictStr] = Field(default='localhost', description="Ceph Monitor(s) address or FQDN.")
    ceph_port: Optional[StrictInt] = Field(default=3300, description="Ceph Monitor(s) port (default 3300).")
    ceph_secret_uuid: Optional[StrictStr] = Field(default=None, description="The libvirt secret UUID for CephX authentication.")
    cost: Optional[Cost] = None
    agents: List[StrictStr] = Field(description="a list of existing remote agents managing the storage pool.")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "pool", "ceph_address", "ceph_port", "ceph_secret_uuid", "cost", "agents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoragePool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost
        if self.cost:
            _dict['cost'] = self.cost.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoragePool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "pool": obj.get("pool"),
            "ceph_address": obj.get("ceph_address") if obj.get("ceph_address") is not None else 'localhost',
            "ceph_port": obj.get("ceph_port") if obj.get("ceph_port") is not None else 3300,
            "ceph_secret_uuid": obj.get("ceph_secret_uuid"),
            "cost": Cost.from_dict(obj["cost"]) if obj.get("cost") is not None else None,
            "agents": obj.get("agents")
        })
        return _obj


