[project]
name = "pogpn"
version = "0.0.3"
description = "Partially Observable Gaussian Process Network for multi-stage BO."
readme = "README.md"
license = {text = "MIT"}
authors = [
  {name = "Saksham Kiroriwal", email = "saksham4k@gmail.com"}
]
maintainers = [
  {name = "Saksham Kiroriwal", email = "saksham4k@gmail.com"}
]
keywords = ["bayesian-optimization", "gaussian-processes", "multi-stage", "ml"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Operating System :: OS Independent",
]
requires-python = ">=3.10,<3.13"
dependencies = [
  "setuptools",
  "matplotlib",
  "pyyaml",
  "botorch==0.14.0",
  "networkx",
  "numpy>=1.23.2,<2",
  "pytest",
  "torch",
  "torchinfo>=1.8.0",
]

[project.urls]
Homepage = "https://github.com/Sam4896/pogpn-botorch"
Repository = "https://github.com/Sam4896/pogpn-botorch"
Documentation = "https://github.com/Sam4896/pogpn-botorch#readme"

[project.optional-dependencies]
pytest = [
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "pytest-profiling",
  "check-manifest",
  "coverage",
  "typing_extensions",
  "ruff",
]


[tool.poetry]
packages = [
  { include = "pogpn", from = "." },
]

include = [
  { path = "LICENSE", format = "sdist" },
  { path = "LICENSE", format = "wheel" },
  { path = "THIRD_PARTY_LICENSES.md", format = "sdist" },
  { path = "THIRD_PARTY_LICENSES.md", format = "wheel" },
  { path = "CITATION.cff", format = "sdist" }
]

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
ipykernel = "^6.30.1"

[build-system]
requires = ["poetry-core", "cython", "setuptools"]
build-backend = "poetry.core.masonry.api"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu128"
priority = "supplemental"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

show-fixes = true
# Select rules for various checks

extend-select = [
    "B",
    "W",
    "A",  # Code quality checks
    "C",  # Cyclomatic complexity (McCabe complexity)
    "D",  # Pydocstyle (docstring checks)
    "N",  # Naming conventions (PEP8-naming)
    "RUF",  # Ruff specific checks for readability and optimizations
    "TYP",  # Type annotations,
    "C90",
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D200",  # One-line docstring should fit on one line
    "D205",  # One blank line required between summary and description
    "D400",  # First line should end with a period
    "D403",  # First word of the docstring should be capitalized
    "D417"   # Missing argument descriptions in docstring
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Maximum allowed complexity for functions (McCabe complexity)
[lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 5

[format]
skip-magic-trailing-comma = false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
