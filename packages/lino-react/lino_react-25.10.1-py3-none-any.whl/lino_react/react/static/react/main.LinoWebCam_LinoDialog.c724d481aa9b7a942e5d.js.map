{"version":3,"file":"main.LinoWebCam_LinoDialog.c724d481aa9b7a942e5d.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/i18n.js","webpack://lino_react/./lino_react/react/components/LinoWebCam.tsx"],"sourcesContent":["import { URL_PARAM_USER_LANGUAGE, PARAM_TYPE_WINDOW } from './constants';\nimport i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport HttpApi from \"i18next-http-backend\";\nimport { initReactI18next } from \"react-i18next\";\n\n\nexport const TransInit = (context, next) => {\n    const detector = new LanguageDetector();\n    detector.addDetector({\n        name: \"LinoLanguageDetector\",\n        lookup: (options) => {\n            return context.value[URL_PARAM_USER_LANGUAGE];\n        },\n        cacheUserLanguage(lng, options) {\n            context.fillPlaceHolder(PARAM_TYPE_WINDOW, URL_PARAM_USER_LANGUAGE, lng);\n            context.history.replaceByType({[URL_PARAM_USER_LANGUAGE]: lng},\n                PARAM_TYPE_WINDOW, false, true);\n        }\n    });\n\n    i18n\n    .use(HttpApi)\n    .use(detector)\n    .use(initReactI18next)\n    .init({\n        debug: false,\n        load: \"languageOnly\",\n        fallbackLng: window.Lino.i18nFallbackLng,\n        keySeparator: false,\n        interpolation: {\n          escapeValue: false // react already safes from xss\n        },\n        react: {\n            useSuspense: true\n        },\n        backend: {\n            loadPath: \"/static/react/locales/{{lng}}/{{ns}}.json\",\n            // addPath: \"/static/react/locales/{{lng}}/{{ns}}.json\"\n        },\n        detection: {\n            order: [\"queryString\", \"cookie\", \"LinoLanguageDetector\", \"localStorage\"],\n            lookupQuerystring: URL_PARAM_USER_LANGUAGE,\n            lookupCookie: URL_PARAM_USER_LANGUAGE,\n            lookupLocalStorage: URL_PARAM_USER_LANGUAGE,\n            // lookupSessionStorage: URL_PARAM_USER_LANGUAGE\n            caches: [\"LinoLanguageDetector\", \"localStorage\", \"cookie\"],\n        }\n    });\n\n    next(i18n);\n}\n\n\nexport default i18n;\n","// LinoWebCam.tsx\n/** @module LinoWebCam */\n\nexport const name: string = \"LinoWebCam\";\n\n// @ts-ignore\nimport * as React from 'react';\n// @ts-ignore\nimport PropTypes from 'prop-types';\nimport * as t from './types';\nimport { RegisterImportPool, getExReady, URLContextType } from \"./Base\";\n\n// @ts-ignore\nimport Webcam from \"react-webcam\";\n\nlet ex; const exModulePromises = ex = {\n    // @ts-ignore\n    prButton: import(/* webpackChunkName: \"prButton_LinoWebCam\" */\"primereact/button\"),\n    // @ts-ignore\n    prOverlayPanel: import(/* webpackChunkName: \"prOverlayPanel_LinoWebCam\" */\"primereact/overlaypanel\"),\n    // @ts-ignore\n    prInputNumber: import(/* webpackChunkName: \"prInputNumber_LinoWebCam\" */\"primereact/inputnumber\"),\n    // @ts-ignore\n    prInputSwitch: import(/* webpackChunkName: \"prInputSwitch_LinoWebCam\" */\"primereact/inputswitch\"),\n    // @ts-ignore\n    lcu: import(/* webpackChunkName: \"LinoComponentUtils_LinoWebCam\" */\"./LinoComponentUtils\"),\n    // @ts-ignore\n    i18n: import(/* webpackChunkName: \"i18n_LinoWebCam\" */\"./i18n\"),\n};RegisterImportPool(ex);\n\ntype WebcamState = {\n    err_msg?: null | string;\n    deviceId?: null | string;\n    devices?: string[];\n}\n\ntype WCReferences = {\n    capture?: React.MouseEventHandler<HTMLElement>;\n    props?: LinoWebCamProps;\n    self?: CamController;\n    setState?: Function;\n    state?: WebcamState;\n    switchCamera?: React.MouseEventHandler<HTMLElement>;\n    webcamRef?: React.RefObject<Webcam>;\n}\n\ninterface CamController {\n    buildMediaConstraints(): MediaTrackConstraints;\n    mediaTrackConstraints: MediaTrackConstraints;\n    store: WCReferences;\n    settings: t.WebcamSettings;\n    settingsMod: t.WebcamSettings;\n}\n\nclass CamController implements CamController {\n    static buildReferences = (store: WCReferences): WCReferences => {\n        store.webcamRef = React.useRef(null);\n        store.capture = React.useCallback(\n            (event) => {\n                store.props.captureDone(store.webcamRef.current.getScreenshot());\n            },\n        [store.webcamRef]);\n\n        const [state, setState] = React.useState<WebcamState>({\n            err_msg: null, deviceId: null, devices: []});\n\n        store.state = state;\n        store.setState = React.useCallback((st: WebcamState) =>\n            setState((old: WebcamState) => Object.assign({}, old, st)), []);\n\n        store.switchCamera = React.useCallback(\n            event => {\n                let i = (state.devices.indexOf(state.deviceId) + 1) % state.devices.length;\n                store.setState({deviceId: state.devices[i]});\n            },\n        []);\n        return store;\n    }\n\n    constructor(store: WCReferences) {\n        this.store = store;\n        this.buildMediaConstraints();\n    }\n\n    buildMediaConstraints(): MediaTrackConstraints {\n        const constraints: MediaTrackConstraints = {};\n        this.settings = window.App.getSettings().webcam;\n        if (this.settings !== undefined) {\n            constraints.height = this.settings.height;\n            constraints.width = this.settings.width;\n        } else {\n            constraints.height = this.store.props.height * devicePixelRatio;\n            constraints.width = this.store.props.width * devicePixelRatio;\n            this.settings = Object.assign({}, constraints as t.WebcamSettings, {pixelRatio: devicePixelRatio, mirrored: true});\n            window.App.setSettings({webcam: this.settings});\n        }\n        this.settingsMod = {...this.settings};\n        if (this.store.state.deviceId) constraints.deviceId = this.store.state.deviceId\n        else constraints.facingMode = \"environment\";\n        this.mediaTrackConstraints = constraints;\n        return constraints;\n    }\n}\n\ntype LinoWebCamProps = {\n    captureDone: (data: string) => void;\n    height: number;\n    width: number;\n}\n\ntype CamSettingsProps = {CC: CamController};\n\nconst CamSettings: React.FC<CamSettingsProps> = (props) => {\n    const {settings, settingsMod} = props.CC;\n    const [mirrored, setMirrored] = React.useState<boolean>(settings.mirrored);\n    const localEx = getExReady(ex, [\"prInputNumber\", \"prInputSwitch\", \"lcu\", \"i18n\"]);\n    const getInput = React.useCallback(\n        ({label, max = null, min, onValueChange, suffix, value}) => (<div>\n            <localEx.lcu.Labeled elem={{label: label}}>\n                <localEx.prInputNumber.InputNumber buttonLayout=\"horizontal\"\n                    max={max} min={min} onValueChange={onValueChange}\n                    showButtons={true} suffix={suffix} value={value}/>\n            </localEx.lcu.Labeled></div>), [localEx]);\n    return !localEx.ready ? null : <>\n        {// TODO: interpolation translate\n            getInput({label: 'Height (# > 512)', max: props.CC.store.props.height,\n            min: 512, onValueChange: (e) => Object.assign(settingsMod,\n                {height: e.value * settingsMod.pixelRatio}),\n            suffix: 'px', value: settings.height / settings.pixelRatio})}\n        <br/>\n        {getInput({label: 'Width (# > 512)', max: props.CC.store.props.width,\n            min: 512, onValueChange: (e) => Object.assign(settingsMod,\n                {width: e.value * settingsMod.pixelRatio}),\n            suffix: 'px', value: settings.width / settings.pixelRatio})}\n        <br/>\n        {getInput({label: 'Pixel ratio (# > 1)', min: 1, onValueChange: (e) => {\n                Object.assign(settingsMod, {\n                    height: (settingsMod.height / settingsMod.pixelRatio) * e.value,\n                    width: (settingsMod.width / settingsMod.pixelRatio) * e.value,\n                    pixelRatio: e.value});\n            }, suffix: 'dpr', value: settings.pixelRatio})}\n        <br/>\n        <div>\n            <localEx.lcu.Labeled elem={{label: localEx.i18n.t(\"Mirrored\")}}>\n                <localEx.prInputSwitch.InputSwitch\n                    checked={mirrored}\n                    onChange={e => {\n                        setMirrored(e.value);\n                        Object.assign(settingsMod, {mirrored: e.value});\n                    }}/>\n            </localEx.lcu.Labeled>\n        </div>\n    </>\n};CamSettings.propTypes = {CC: PropTypes.instanceOf(CamController).isRequired};\n\ntype CamActionsProps = {CC: CamController};\n\nconst CamActions: React.FC<CamActionsProps> = (props) => {\n    const opRef = React.useRef(null);\n    const buttonStyle = {background: \"white\", color: \"black\",\n        borderRadius: \"50%\", width: \"5ch\", height: \"5ch\", margin: \"5px\"};\n    const localEx = getExReady(ex, [\"prButton\", \"prOverlayPanel\"]);\n    return !localEx.ready ? null : <><localEx.prButton.Button\n        icon=\"pi pi-camera\"\n        onClick={props.CC.store.capture}\n        style={buttonStyle}/>\n    {props.CC.store.state.devices.length > 1 &&\n        <localEx.prButton.Button\n            icon=\"pi pi-undo\"\n            onClick={props.CC.store.switchCamera}\n            style={buttonStyle}/>}\n    <localEx.prButton.Button\n        icon=\"pi pi-cog\"\n        onClick={e => opRef.current.toggle(e)}\n        style={buttonStyle}/>\n    <div onKeyDown={e => e.stopPropagation()}>\n        <localEx.prOverlayPanel.OverlayPanel\n            onHide={e => {\n                // @ts-ignore\n                document.activeElement.blur();\n                window.App.setSettings({webcam: props.CC.settingsMod});\n                props.CC.buildMediaConstraints();\n                props.CC.store.setState({});\n            }}\n            onShow={e => opRef.current.align()}\n            ref={opRef}\n            showCloseIcon={true}>\n            <CamSettings CC={props.CC}/>\n        </localEx.prOverlayPanel.OverlayPanel>\n    </div></>\n};CamActions.propTypes = {CC: PropTypes.instanceOf(CamController).isRequired};\n\nexport const LinoWebCam: React.FC = (props: LinoWebCamProps) => {\n    const store: React.RefObject<WCReferences> = React.useRef({props: props});\n    CamController.buildReferences(store.current);\n\n    const { state, setState } = store.current;\n\n    React.useEffect(() => {\n        // @ts-ignore\n        document.activeElement.blur();\n        store.current.self = new CamController(store.current);\n        navigator.mediaDevices.enumerateDevices().then(devs => setState(\n            {devices: devs.filter(\n                ({kind}) => kind === \"videoinput\").map(d => d.deviceId)}));\n    }, []);\n\n    const { self } = store.current;\n\n    return !state.devices.length ? null : <>\n        <div style={{position: 'absolute'}}>{state.err_msg}</div>\n        <Webcam\n            audio={false}\n            forceScreenshotSourceSize={true}\n            height={self.settings.height / self.settings.pixelRatio}\n            mirrored={self.settings.mirrored}\n            onUserMedia={uM => {\n                if (state.deviceId === null)\n                    setState({deviceId: uM.getVideoTracks()[0].getSettings().deviceId})}}\n            onUserMediaError={exempt => {\n                if (state.err_msg === null) setState({err_msg:\n                    \"Please allow camera access to take a photo.\"})}}\n            ref={store.current.webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            videoConstraints={self.mediaTrackConstraints}\n            width={self.settings.width / self.settings.pixelRatio}\n            />\n        <div\n            style={{position: \"absolute\", bottom: \"40px\", left: \"50%\",\n                transform: \"translate(-50%, 0)\"}}>\n            <CamActions CC={self}/>\n        </div>\n    </>\n}\n\n\nLinoWebCam.propTypes = {\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    captureDone: PropTypes.func.isRequired,\n}\n"],"names":["TransInit","context","next","detector","LanguageDetector","addDetector","name","lookup","options","value","URL_PARAM_USER_LANGUAGE","cacheUserLanguage","lng","fillPlaceHolder","PARAM_TYPE_WINDOW","history","replaceByType","_defineProperty","i18n","HttpApi","use","initReactI18next","init","debug","load","fallbackLng","window","Lino","i18nFallbackLng","keySeparator","interpolation","escapeValue","react","useSuspense","backend","loadPath","detection","order","lookupQuerystring","lookupCookie","lookupLocalStorage","caches","ex","prButton","prOverlayPanel","prInputNumber","prInputSwitch","lcu","RegisterImportPool","CamController","constructor","store","this","buildMediaConstraints","constraints","settings","App","getSettings","webcam","undefined","height","width","props","devicePixelRatio","Object","assign","pixelRatio","mirrored","setSettings","settingsMod","state","deviceId","facingMode","mediaTrackConstraints","buildReferences","webcamRef","React","useRef","capture","useCallback","event","captureDone","current","getScreenshot","setState","useState","err_msg","devices","st","old","switchCamera","i","indexOf","length","CamSettings","CC","setMirrored","localEx","getExReady","getInput","label","max","min","onValueChange","suffix","Labeled","elem","InputNumber","buttonLayout","showButtons","ready","e","t","InputSwitch","checked","onChange","propTypes","instanceOf","isRequired","CamActions","opRef","buttonStyle","background","color","borderRadius","margin","Button","icon","onClick","style","toggle","onKeyDown","stopPropagation","OverlayPanel","onHide","document","activeElement","blur","onShow","align","ref","showCloseIcon","LinoWebCam","useEffect","self","navigator","mediaDevices","enumerateDevices","then","devs","filter","kind","map","d","position","audio","forceScreenshotSourceSize","onUserMedia","uM","getVideoTracks","onUserMediaError","exempt","screenshotFormat","videoConstraints","bottom","left","transform","number","func"],"sourceRoot":""}