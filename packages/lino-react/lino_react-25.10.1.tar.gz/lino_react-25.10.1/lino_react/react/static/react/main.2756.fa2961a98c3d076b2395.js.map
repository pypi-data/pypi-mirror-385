{"version":3,"file":"main.2756.fa2961a98c3d076b2395.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/LinoComponentUtils.jsx"],"sourcesContent":["export const name = \"LinoComponentUtils\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { RegisterImportPool, getExReady, Component, DataContextType } from \"./Base\";\n\nimport * as constants from \"./constants\";\n\n\nlet ex; const exModulePromises = ex = {\n    classNames: import(/* webpackChunkName: \"classNames_LinoComponentUtils\" */\"classnames\"),\n    prDropdown: import(/* webpackChunkName: \"prDropdown_LinoComponentUtils\" */\"primereact/dropdown\"),\n    prInputText: import(/* webpackChunkName: \"prInputText_LinoComponentUtils\" */\"primereact/inputtext\"),\n    queryString: import(/* webpackChunkName: \"queryString_LinoComponentUtils\" */\"query-string\"),\n    sc: import(/* webpackChunkName: \"SiteContext_LinoComponentUtils\" */\"./SiteContext\"),\n    u: import(/* webpackChunkName: \"LinoUtils_LinoComponentUtils\" */\"./LinoUtils\"),\n};RegisterImportPool(ex);\n\n\nexport function maintainTableWidth(elem, count) {\n    let ctx;\n    if (elem !== undefined) ctx = elem\n    else ctx = this;\n    let keys = Object.keys(ctx.flexs),\n        fo_conditional = count !== undefined ? keys.length === count : keys.length > 1;\n    if (fo_conditional) {\n        keys.forEach(key => {\n            var tbl = document.getElementById(key)\n                .getElementsByClassName('p-datatable');\n            if (tbl.length === 1) {\n                tbl = tbl[0]\n                let width = tbl.getBoundingClientRect().width / document\n                    .getElementsByClassName('layout-topbar')[0]\n                    .getBoundingClientRect().width;\n                if (width > ctx.flexs[key]) {\n                    Array.from(tbl.querySelectorAll(\n                        '.p-datatable table')).forEach(el => {\n                            if (Array.from(el.classList).join(' ')\n                                .includes('p-datatable')) el.style\n                                    .setProperty('table-layout', 'auto');\n                        });\n                }\n            }\n        });\n    }\n}\n\n\nexport const Labeled = ({\n    actions = [], label, elem, children,\n    hide_label = false, isFilled = false,\n}) => {\n    const localEx = getExReady(ex, ['classNames']);\n    label = label || elem.label;\n    return !localEx.ready ? null : <React.Fragment>\n        {!hide_label && label && <React.Fragment>\n            <label\n                className={localEx.classNames.default(\n                    \"l-label\", \"l-span-clickable\",\n                    {\"l-label--unfilled\": !isFilled},\n                )}\n                title={Object.assign({}, elem.value || {}).quicktip\n                    || elem.help_text}>\n                    {label}\n                    {actions.map((action, i) => <React.Fragment key={i}>\n                        &nbsp;|&nbsp;\n                        {\n                            // <span\n                            //     className=\"l-span-clickable\"\n                            //     onClick={e => action.run(e)}>\n                            //     {action.label}</span>\n                        }\n                        <span dangerouslySetInnerHTML={{__html: action}} />\n                    </React.Fragment>)}:</label>\n            <br/>\n        </React.Fragment>}\n        {children}\n    </React.Fragment>\n}\n\n\nLabeled.propTypes = {\n    actions: PropTypes.array,\n    label: PropTypes.string,\n    elem: PropTypes.object.isRequired,\n    hide_label: PropTypes.bool,\n    isFilled: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n}\n\n\nexport class ABCComponent {\n    static getValueByName({name, props, context}) {\n        if (props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return context.param_values[name];\n        return props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? context.rows[props.column.rowIndex][name]\n            : props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS\n                ? context[name] : context.data[name];\n    }\n}\n\n\nexport class LeafComponentBase extends Component {\n    static requiredModules = [\"classNames\"];\n    static iPool = ex;\n    static contextType = DataContextType;\n    static propTypesFromLinoLayout = {\n        column: PropTypes.object,\n        editing_mode: PropTypes.bool,\n        hide_label: PropTypes.bool,\n        [constants.URL_PARAM_WINDOW_TYPE]: PropTypes.oneOf([\n            constants.WINDOW_TYPE_TABLE,\n            constants.WINDOW_TYPE_DETAIL,\n            constants.WINDOW_TYPE_CARDS,\n            constants.WINDOW_TYPE_GALLERIA,\n            constants.WINDOW_TYPE_INSERT,\n            constants.WINDOW_TYPE_PARAMS,\n            constants.WINDOW_TYPE_UNKNOWN,\n        ]),\n        tabIndex: PropTypes.number.isRequired,\n    }\n\n    static propTypes = {\n        ...LeafComponentBase.propTypesFromLinoLayout,\n        elem: PropTypes.object.isRequired,\n        urlParams: PropTypes.object.isRequired,\n        // leafIndex used in onLeafMount handler\n        leafIndex: PropTypes.number.isRequired,\n    }\n\n    static defaultProps = {\n        editing_mode: false,\n        hide_label: false,\n        [constants.URL_PARAM_WINDOW_TYPE]: constants.WINDOW_TYPE_UNKNOWN,\n    }\n\n    constructor(props, context) {\n        super(props, context);\n        this.wrapperClasses = []\n        this.dataKey = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index : props.elem.name;\n        this.upController = props.urlParams.controller;\n        this.c = props.urlParams.controller;\n\n        this.filled = this.filled.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.getValueByName = this.getValueByName.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n        this.setLeafRef = this.setLeafRef.bind(this);\n    }\n\n    filled = () => (![\"\", null, undefined].includes(this.getValue()));\n\n    getValueByName(name) {\n        return ABCComponent.getValueByName({\n            name: name, props: this.props, context: this.context});\n    }\n\n    getValue() {\n        return this.getValueByName(this.dataKey);\n    }\n\n    formatValue(v) {\n        return v;\n    }\n\n    innerHTML(dangerous, style={}) {\n        let v = this.formatValue(this.getValue());\n        if (!this.c.filled(v)) v = \"\\u00a0\";\n        if (v instanceof Object) v = JSON.stringify(v);\n        if (dangerous) {\n            return <div style={style} dangerouslySetInnerHTML={{__html: v}}/>\n        } else {\n            return <div style={style}>{v}</div>\n        }\n    }\n\n    setLeafRef({input=false, type=\"\"} = {}) {\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL ||\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_INSERT\n        ) {\n            this.upController.dataContext.setLeafRef({\n                name: type === 'slave' ? this.actorID\n                    : this.props.elem.name, ref: this, input: input, type: type});\n            const {controller} = this.props.urlParams;\n            controller.onLeafMount();\n        }\n    }\n}\n\n\nexport class LeafComponentDelayedValue extends LeafComponentBase {\n    static requiredModules = [\"queryString\", \"sc\"].concat(LeafComponentBase.requiredModules);\n    static propTypes = {\n        ...LeafComponentBase.propTypes,\n        hasOwnContext: PropTypes.bool.isRequired\n    }\n    static defaultProps = {\n        ...LeafComponentBase.defaultProps,\n        hasOwnContext: false\n    }\n\n    constructor(props, context, notSlave=false) {\n        super(props, context);\n        this.delayed = !!props.elem.delayed_value;\n        const masterRelate = {}\n        if (!props.hasOwnContext) Object.assign(masterRelate,\n            this.upController.actionHandler.masterRelateForSlave());\n        this.state = {\n            ...this.state, value: null, data_url: null, ...masterRelate,\n            key: this.upController.newSlug(),\n            haveCTX: this.delayed && !notSlave,\n        }\n        this.state.UCMount = !this.state.haveCTX || !this.delayed;\n        this.actorID = props.elem.actor_id || (props.elem.name.includes('.')\n            ? props.elem.name : `${props.urlParams.packId}.${props.elem.name}`);\n\n        this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    onReady() {\n        let val = super.getValue();\n        if (!this.delayed) {\n            this.setState({value: val});\n            return;\n        }\n        if (!this.props.hasOwnContext) this.setLeafRef({type: 'slave'});\n        this.upController.globals.panels[this.actorID] = this;\n        if (val !== null) this.getData(val.delayed_value_url)\n        else this.setState({value: \"\\u00a0\", data_url: undefined});\n    }\n\n    shouldComponentUpdate(nextProps, nextState, context) {\n        const val = super.getValue();\n        let update = (\n            this.state.value !== nextState.value ||\n            this.state.UCMount !== nextState.UCMount ||\n            this.state.ready !== nextState.ready\n        );\n        if (this.delayed) update = update || (this.state.value !== null &&\n            (val || {}).delayed_value_url !== this.state.data_url);\n        return update;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const val = super.getValue();\n        if (this.delayed) {\n            if (this.state.data_url !== (val || {}).delayed_value_url) {\n                this.setState({value: null});\n                if (val !== null) this.update()\n                else this.setState({value: \"\\u00a0\", data_url: undefined});\n            }\n        } else this.setState({value: val});\n    }\n\n    componentWillUnmount() {\n        delete this.upController.globals.panels[this.actorID];\n    }\n\n    getValue() {\n        return this.state.value;\n    }\n\n    getData(data_url) {\n        if (!this.state.UCMount) return;\n        // const params = this.upController.actionHandler.getParams();\n        const params = this.props.urlParams.controller.actionHandler.getParams();\n        // this.props.urlParams.controller.actionHandler.defaultStaticParams(params);\n        params[constants.URL_PARAM_REQUESTING_PANEL\n        ] = this.upController.actionHandler.refName;\n\n        this.upController.actionHandler.silentFetch({\n            // path: `${data_url}?${this.ex.queryString.default.stringify(this.upController.actionHandler.commonParams())}`\n            path: `${data_url}?${this.ex.queryString.default.stringify(params)}`\n        }).then((data) => {\n            this.setState({value: data.data, buttons: data.buttons,\n                           data_url: data_url});\n            this.upController.root.setState({});\n        });\n    }\n\n    liveUpdate = (params) => {\n        if (params.mk === null ||\n            (params.mk === this.state.mk && params.mt === this.state.mt)\n        ) this.update();\n    }\n\n    update() {\n        this.getData(super.getValue().delayed_value_url);\n    }\n\n    getChildren() {\n        throw \"NotImplemented\";\n    }\n\n    render() {\n        if (!this.state.ready) return null;\n        const up = this.props.urlParams, c = up.controller;\n        return this.state.haveCTX ? <this.ex.sc.URLContext\n            getChildren={(context) => {\n                const elem = this.getChildren();\n                return elem;\n            }}\n            params={c.actionHandler.masterRelateForSlave()}\n            parentContext={c}\n            path={`/api/${this.actorID.split(\".\").join(\"/\")}`}\n            onContextReady={(context) => {\n                this.upController = context.controller;\n                this.setState({UCMount: true});\n            }}\n            simple={false}\n            summary={this}/> : this.getChildren();\n    }\n}\n\n\nexport class LeafComponentInput extends LeafComponentBase {\n    static requiredModules = [\"prInputText\", \"u\"].concat(LeafComponentBase.requiredModules);\n    constructor(props, context) {\n        super(props, context);\n\n        this.wrapperClasses.push(\"lino-input-leaf\");\n\n        this.state = {\n            ...this.state,\n            textSelected: false\n        }\n\n        this.styleClasses = [\n            \"disabled-input\",\n            \"l-card\",\n            \"unsaved-modification\",\n        ]\n\n        this.disabled = this.disabled.bind(this);\n        this.filled = this.filled.bind(this);\n        this.focus = this.focus.bind(this);\n        this.getCellStyleClasses = this.getCellStyleClasses.bind(this);\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.onChangeUpdate = this.onChangeUpdate.bind(this);\n        this.onInputRef = this.onInputRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onRef = this.onRef.bind(this);\n        this.setCellStyle = this.setCellStyle.bind(this);\n        this.submit = this.submit.bind(this);\n        this.leafIndexMatch = this.leafIndexMatch.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    async prepare() {\n        this.inputState = {\n            inputComponent: this.ex.prInputText.InputText,\n            inputOnly: false,\n            inputProps: {},\n            onChangeUpdateAssert: (event) => (true),\n            postOnChange: (event) => (null),\n            getValueFromEvent: (event) => event.target.value,\n        }\n        this.setLeafRef({input: true});\n    }\n\n    disabled() {\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS)\n            return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return false;\n        if (!this.props.elem.editable) return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            let row = this.context.rows[this.props.column.rowIndex],\n                last_item = row[row.length - 1];\n\n            // No meta, assume not disabled;\n            if (!last_item || !last_item.meta || last_item.phantom) return false;\n            // disable_editing set to true;\n            if (row[row.length - 2]) return true;\n            // check name in the disabled_fields meta;\n            return row[row.length - 3][this.props.elem.name] || false;\n        } else {\n            if (this.context.data.disable_editing) return true;\n            return this.context.data.disabled_fields[this.props.elem.name] || false;\n        }\n    }\n\n    /**\n     * Find HTML input element\n     */\n    findHTMLInputElement(ref) {\n        if (!ref) return ref;\n        if (ref.focusInput) ref = ref.focusInput\n        else if (ref.inputRef) ref = ref.inputRef.current\n        else if (ref.hasOwnProperty('getInput')) ref = ref.getInput();\n        return ref;\n    }\n\n    select(input) {\n        const _select = (_input) => {\n            this.state.textSelected = true;\n            _input.select();\n        }\n        if (input.select) {_select(input); return}\n        if (this.container) input = this.container.getElementsByTagName('input')[0];\n        if (input && input.select) _select(input);\n    }\n\n    focus() {\n        let ref = this.findHTMLInputElement(this.inputEl), input;\n        if (ref && !this.focusSet) {\n            if (ref.focus) {\n                ref.focus()\n            } else if (ref.click) {\n                ref.click();\n            }\n            this.focusSet = true\n            this.select(ref);\n        }\n    }\n\n    getCellStyleClasses(disabled) {\n        let styleClasses = [];\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            if (this.context.modifiedRows[this.props.column.rowIndex].includes(\n                this.props.elem.fields_index\n            )) {\n                styleClasses.push(\"unsaved-modification\");\n            }\n        } else {\n            styleClasses.push('l-card');\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] !== constants.WINDOW_TYPE_CARDS) {\n                if (disabled) styleClasses.push(\"disabled-input\")\n                else if (this.context.modified.includes(this.props.elem.name))\n                    styleClasses.push(\"unsaved-modification\");\n            }\n        }\n        return styleClasses;\n    }\n\n    getValue() {\n        let v = super.getValue();\n        if (!this.c.filled(v)) v = \"\";\n        return v;\n    }\n\n    getLinoInput() {\n        return <this.inputState.inputComponent\n            // autoFocus={this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE ? true : undefined}\n            onChange={(e) => {\n                if (!this.inputState.onChangeUpdateAssert(e)) return;\n                this.onChangeUpdate(e);\n                this.inputState.postOnChange(e);\n            }}\n            ref={this.onInputRef}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue()}\n            {...this.inputState.inputProps}/>;\n    }\n\n    onChangeUpdate(e) {\n        this.update({[this.dataKey]: this.inputState.getValueFromEvent(e)});\n        this.setState({});\n    }\n\n    onInputRef(ref) {\n        if (ref) {\n            if (ref != this.inputEl) this.focusDone = false;\n            this.inputEl = ref;\n            if (!this.focusDone) {\n                let htmlInput = this.findHTMLInputElement(ref);\n                if (document.activeElement === htmlInput) return;\n                if (this.leafIndexMatch()) this.focus();\n                this.focusDone = true\n            }\n        }\n    }\n\n    onKeyDown(event) {\n        if (event.code === \"Escape\" &&\n        this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL &&\n        this.props.editing_mode) {\n            this.ex.u.toggleEditingMode(this.props.urlParams);\n        }\n    }\n\n    onRef(ref) {\n        const disabled = this.disabled();\n        const onClick = () => {\n            this.container.onclick = (event) => {\n                if (!disabled) {\n                    Object.assign(this.upController.globals, {\n                        currentInputRowIndex: Object.assign({rowIndex: 0}, this.props.column).rowIndex,\n                        currentInputIndex: this.props.leafIndex,\n                        currentInputWindowType: this.props[constants.URL_PARAM_WINDOW_TYPE],\n                        currentInputAHRefName: this.upController.actionHandler.refName,\n                    });\n                    if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL) {\n                        if (!this.props.editing_mode)\n                            this.upController.history.replaceState({editing_mode: true})\n                        else {\n                            if (this.state.textSelected) this.setState({textSelected: false})\n                            else this.select(this.findHTMLInputElement(this.inputEl));\n                        }\n                    }\n                }\n            }\n        }\n        if (ref) {\n            this.container = ref;\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n                this.container = ref.closest(\"td\");\n                onClick();\n            }\n            else if (\n                this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL ||\n                this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_INSERT\n            ) onClick();\n        }\n        this.setCellStyle(this.container, disabled);\n    }\n\n    setCellStyle(ref, disabled) {\n        if (ref) {\n            let classes = this.getCellStyleClasses(disabled);\n            this.styleClasses.forEach(item => {ref.classList.remove(item)});\n            classes.forEach(item => {ref.classList.add(item)});\n        }\n    }\n\n    submit() {\n        this.upController.actionHandler.submit({\n            cellInfo: {rowIndex: this.props.column.rowIndex}});\n    }\n\n    leafIndexMatch() {\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE &&\n            this.props.column.rowIndex !== this.upController.globals.currentInputRowIndex\n        ) return false;\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === this.upController.globals.currentInputWindowType &&\n            this.upController.actionHandler.refName === this.upController.globals.currentInputAHRefName &&\n            this.props.leafIndex === this.upController.globals.currentInputIndex\n        ) return true;\n        return false;\n    }\n\n    update(values) {\n        this.upController.actionHandler.update({\n            values: values, elem: this.props.elem, col: this.props.column,\n            windowType: this.props[constants.URL_PARAM_WINDOW_TYPE]});\n    }\n\n    render(hide_label=this.props.hide_label) {\n        if (!this.state.ready) return null;\n        const disabled = this.disabled();\n        if (this.container) this.setCellStyle(this.container, disabled);\n        return <Labeled {...this.props}\n            actions={(this.context.field_actions || {})[this.props.elem.name] || []}\n            hide_label={hide_label}\n            elem={this.props.elem} isFilled={this.filled()}>\n            <div\n                className={this.ex.classNames.default(\n                    this.wrapperClasses,\n                    {\"lino-disabled-leaf\": disabled},\n                )}\n                onKeyDown={this.onKeyDown}\n                ref={this.onRef}>\n                    {this.inputState.inputOnly ? this.getLinoInput() :\n                        this.props.editing_mode && !disabled ?\n                            this.getLinoInput() : this.innerHTML()}\n            </div>\n        </Labeled>\n    }\n}\n\n\nexport class LeafComponentInputChoices extends LeafComponentInput {\n    static requiredModules = [\"prDropdown\"].concat(LeafComponentInput.requiredModules);\n    constructor(props, context) {\n        super(props, context);\n        this.wrapperClasses.push(\"l-ChoiceListFieldElement\");\n        this.state = {\n            ...this.state,\n            hidden_value: null\n        }\n\n        this.dataKeyHidden = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index_hidden\n            : props.elem.name + \"Hidden\";\n\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n    }\n\n    onKeyDown = (e) => {\n        super.onKeyDown(e);\n        if (e.key === \"Enter\" && this.inputEl.getOverlay()) e.stopPropagation();\n    }\n\n    getValue() {\n        return {\n            text: super.getValue(),\n            value: this.getValueByName(this.dataKeyHidden)};\n    }\n\n    getLinoInput() {\n        return <this.ex.prDropdown.Dropdown\n            // appendTo={this.inputEl ? this.findHTMLInputElement(this.inputEl) : window.App.topDiv}\n            autoFocus={true}\n            itemTemplate={(item) => {\n                return <div dangerouslySetInnerHTML={{__html: item.text}}/>\n            }}\n            onChange={(e) => {\n                if (e.originalEvent.ctrlKey || e.originalEvent.altKey) return;\n                this.update({[this.dataKey]: e.value || null,  // have null instead of undefined\n                    [this.dataKeyHidden]: e.value || null});\n                this.setState({});\n            }}\n            optionLabel=\"text\"\n            options={this.options}\n            // panelStyle={{zIndex: \"99999\"}}\n            // ref={this.onInputRef}\n            showClear={this.props.elem.field_options.allowBlank}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue().value}\n            valueTemplate={(item, options) => {\n                if (item) return <div dangerouslySetInnerHTML={{__html: item.text}}/>\n                return <div>&nbsp;</div>;\n            }}/>\n    }\n\n    innerHTML() {\n        let v = super.getValue();\n        if (!this.c.filled(v)) v = \"\\u00a0\";\n        // return <div style={{whiteSpace: \"nowrap\"}}>{v}</div>\n        return <div /* style={{whiteSpace: \"nowrap\"}} */ dangerouslySetInnerHTML={{__html: v}}/>\n    }\n}\n"],"names":["ex","name","classNames","prDropdown","prInputText","queryString","sc","u","maintainTableWidth","elem","count","ctx","undefined","this","keys","Object","flexs","length","forEach","key","tbl","document","getElementById","getElementsByClassName","getBoundingClientRect","width","Array","from","querySelectorAll","el","classList","join","includes","style","setProperty","RegisterImportPool","Labeled","_ref","_ref$actions","actions","label","children","_ref$hide_label","hide_label","_ref$isFilled","isFilled","localEx","getExReady","ready","React","className","title","assign","value","quicktip","help_text","map","action","i","dangerouslySetInnerHTML","__html","propTypes","PropTypes","isRequired","ABCComponent","_createClass","_classCallCheck","_ref2","props","context","constants","param_values","rows","column","rowIndex","data","LeafComponentBase","_Component","_this","_callSuper","filled","getValue","wrapperClasses","dataKey","fields_index","upController","urlParams","controller","c","bind","getValueByName","innerHTML","setLeafRef","_inherits","v","dangerous","arguments","formatValue","JSON","stringify","_ref3","_ref3$input","input","_ref3$type","type","dataContext","actorID","ref","onLeafMount","Component","requiredModules","iPool","contextType","DataContextType","propTypesFromLinoLayout","_defineProperty","editing_mode","_objectSpread","leafIndex","defaultProps","LeafComponentDelayedValue","_LeafComponentBase","_this2","notSlave","liveUpdate","params","mk","state","mt","update","delayed","delayed_value","masterRelate","hasOwnContext","actionHandler","masterRelateForSlave","data_url","newSlug","haveCTX","UCMount","actor_id","concat","packId","shouldComponentUpdate","getData","val","_superPropGet","globals","panels","delayed_value_url","setState","nextProps","nextState","prevProps","prevState","_this3","getParams","refName","silentFetch","path","then","buttons","root","_this4","URLContext","getChildren","parentContext","split","onContextReady","simple","summary","LeafComponentInput","_LeafComponentBase2","_this5","push","textSelected","styleClasses","disabled","focus","getCellStyleClasses","getLinoInput","onChangeUpdate","onInputRef","onKeyDown","onRef","setCellStyle","submit","leafIndexMatch","_prepare","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","inputState","inputComponent","InputText","inputOnly","inputProps","onChangeUpdateAssert","event","postOnChange","getValueFromEvent","target","stop","apply","editable","row","last_item","meta","phantom","disable_editing","disabled_fields","focusInput","inputRef","current","hasOwnProperty","getInput","_this6","_select","_input","select","container","getElementsByTagName","findHTMLInputElement","inputEl","focusSet","click","modifiedRows","modified","_this7","_extends","onChange","e","tabIndex","focusDone","htmlInput","activeElement","code","toggleEditingMode","_this8","onClick","onclick","currentInputRowIndex","currentInputIndex","currentInputWindowType","currentInputAHRefName","history","replaceState","closest","classes","item","remove","add","cellInfo","values","col","windowType","field_actions","LeafComponentInputChoices","_LeafComponentInput","_this9","getOverlay","stopPropagation","hidden_value","dataKeyHidden","fields_index_hidden","text","_this0","Dropdown","autoFocus","itemTemplate","originalEvent","ctrlKey","altKey","optionLabel","options","showClear","field_options","allowBlank","valueTemplate"],"sourceRoot":""}