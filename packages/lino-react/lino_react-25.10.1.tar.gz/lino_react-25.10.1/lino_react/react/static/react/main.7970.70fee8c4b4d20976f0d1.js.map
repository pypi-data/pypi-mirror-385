{"version":3,"file":"main.7970.70fee8c4b4d20976f0d1.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/quillmodules.jsx"],"sourcesContent":["export const name = \"quillmodules\";\n\n// import 'quill-mention/autoregister';\nimport { Mention, MentionBlot } from 'quill-mention';\nimport Quill from 'quill-next';\nimport QuillNextEditor from \"quill-next-react\";\nexport { QuillNextEditor };\nimport QuillImageDropAndPaste from 'quill-image-drop-and-paste';\nimport BlotFormatter from '@enzedonline/quill-blot-formatter2';\nimport htmlEditButton from \"quill-html-edit-button\";\n// import QuillBetterTable from \"quill-better-table\";\nimport React from 'react';\nimport { RegisterImportPool } from \"./Base\";\n\nimport \"@enzedonline/quill-blot-formatter2/dist/css/quill-blot-formatter2.css\"; // align styles\n\nconst TableNext = Quill.import(\"modules/table\");\n\n\nclass TableMenu {\n    constructor(params, quill, options) {\n        const tableModule = quill.getModule(\"table\");\n        this.params = params;\n        this.menuItems = params.menuItems;\n        this.quill = quill;\n        this.options = options;\n\n        this.showMenu()\n\n        this.destroyHandler = this.destroy.bind(this);\n\n        document.addEventListener(\"click\", this.destroyHandler);\n    }\n\n    showMenu() {\n        const dn = this.domNode = document.createElement(\"div\");\n        dn.style.position = \"absolute\";\n        dn.style.left = `${this.params.left}px`;\n        dn.style.top = `${this.params.top}px`;\n\n        const createItem = (desc) => {\n            const node = document.createElement(\"div\");\n            node.classList.add(\"l-span-clickable\");\n\n            const iconSpan = document.createElement(\"span\");\n            if (desc.iconClass) {\n                const i = document.createElement(\"i\");\n                i.classList.add(\"pi\");\n                i.classList.add(desc.iconClass);\n                iconSpan.appendChild(i)\n            } else iconSpan.innerText = desc.icon;\n            iconSpan.style.width = \"3ch\";\n            iconSpan.style.display = \"inline-block\";\n            iconSpan.style[\"text-align\"] = \"center\";\n\n            const textSpan = document.createElement(\"span\");\n            textSpan.innerText = desc.text;\n\n            node.appendChild(iconSpan);\n            node.appendChild(textSpan);\n\n            node.addEventListener(\"click\", desc.handler);\n            return node;\n        }\n\n        Object.values(this.menuItems).forEach((desc) => {\n            dn.appendChild(createItem(desc));\n        });\n\n        document.body.appendChild(dn);\n    }\n\n    destroy() {\n        this.domNode.remove();\n        document.removeEventListener(\"click\", this.destroyHandler);\n        return null;\n    }\n}\n\n\nclass Table extends TableNext {\n    constructor(quill, options) {\n        super(quill, options);\n\n        quill.root.addEventListener(\"contextmenu\", (event) => {\n            const [table] = this.getTable();\n            if (table === null) return;\n\n            event.preventDefault();\n            if (this.tableMenu)\n                this.tableMenu = this.tableMenu.destroy();\n\n            this.tableMenu = new TableMenu({\n                menuItems: this.getMenuItems(options.i18n),\n                left: event.pageX,\n                top: event.pageY,\n            }, quill, options)\n        });\n    }\n\n    getMenuItems(i18n) {\n        return {\n            insertColumnLeft: {\n                text: i18n.t(\"Insert column left\"),\n                icon: \"⭰\",\n                handler: () => {\n                    this.quill.focus();\n                    this.insertColumnLeft();\n                },\n            },\n            insertColumnRight: {\n                text: i18n.t(\"Insert column right\"),\n                icon: \"⭲\",\n                handler: () => {\n                    this.quill.focus();\n                    this.insertColumnRight();\n                },\n            },\n            insertRowAbove: {\n                text: i18n.t(\"Insert row above\"),\n                icon: \"⭱\",\n                handler: () => {\n                    this.quill.focus();\n                    this.insertRowAbove();\n                },\n            },\n            insertRowBelow: {\n                text: i18n.t(\"Insert row below\"),\n                icon: \"⭳\",\n                handler: () => {\n                    this.quill.focus();\n                    this.insertRowBelow();\n                },\n            },\n            deleteColumn: {\n                text: i18n.t(\"Delete column\"),\n                iconClass: \"pi-delete-left\",\n                handler: () => {\n                    this.quill.focus();\n                    this.deleteColumn();\n                },\n            },\n            deleteRow: {\n                text: i18n.t(\"Delete row\"),\n                iconClass: \"pi-eraser\",\n                handler: () => {\n                    this.quill.focus();\n                    this.deleteRow();\n                },\n            },\n            deleteTable: {\n                text: i18n.t(\"Delete table\"),\n                iconClass: \"pi-trash\",\n                handler: () => {\n                    this.quill.focus();\n                    this.deleteTable();\n                },\n            },\n        }\n    }\n}\n\nQuill.register('modules/table', Table);\nQuill.register('modules/imageDropAndPaste', QuillImageDropAndPaste);\nQuill.register('modules/blotFormatter2', BlotFormatter);\nQuill.register({\"blots/mention\": MentionBlot, \"modules/mention\": Mention});\nQuill.register('modules/htmlEditButton', htmlEditButton);\n// Quill.register('modules/better-table', QuillBetterTable);\n// Quill.register(SoftLineBreakBlot);\n\nconst QuillImageData = QuillImageDropAndPaste.ImageData;\n\nlet ex; const exModulePromises = ex = {\n    queryString:  import(/* webpackChunkName: \"queryString_quillmodules\" */\"query-string\"),\n};RegisterImportPool(ex);\n\n\nexport const quillLoad = (elem, quill) => {\n    const value = elem.getValue();\n    if (elem.state.plain) {\n        quill.setText(value || \"\");\n    } else {\n        quill.clipboard.dangerouslyPasteHTML(value);\n    }\n}\n\n\nexport const onTextChange = (elem, e) => {\n    // console.log(\"onTextChange\", e);\n    // cleans up the trailing new line (\\n)\n    const plainValue = e.textValue.slice(0, -1);\n    let value = (elem.state.plain ? plainValue : e.htmlValue ) || \"\";\n\n    // When an image is seleted and on CTRL+S, before deselecting\n    // the image blotFormatter2 resets the --resize-width property;\n    // some transitional state. Clean it out.\n    // value = value.replace(/--resize-width:\\s*0px;?/g, \"\");\n    // better yet instead of cleaning it out, replace the value with img.width\n    // if (!elem.state.plain && e.source !== \"user\") {\n    //     const el = document.createElement(\"div\");\n    //     el.innerHTML = value;\n    //     el.querySelectorAll(\"img[width]\").forEach(img => {\n    //         const widthAttr = img.getAttribute(\"width\").split(\"px\")[0];\n    //         if (!widthAttr) return;\n    //\n    //         const parent = img.closest(\"[style]\");\n    //         if (parent) {\n    //             const cssWidth = parent.style.getPropertyValue(\"--resize-width\");\n    //             if (cssWidth === \"0px\" || cssWidth === \"\") {\n    //                 parent.style.setProperty(\"--resize-width\", widthAttr + \"px\");\n    //             }\n    //         }\n    //     })\n    //     value = el.innerHTML;\n    // }\n    //\n    // console.log(e.source, value);\n    // if (!elem.state.plain) {\n    //     const el = document.createElement(\"div\");\n    //     el.innerHTML = value;\n    //     el.querySelectorAll(\"img\").forEach(img => {\n    //       // Prefer style.width, fallback to attribute\n    //       let w = img.style.width || img.getAttribute(\"width\");\n    //       if (w) {\n    //         w = w.replace(\"px\", \"\");\n    //         img.setAttribute(\"width\", w);\n    //         img.style.width = w + \"px\"; // keep inline for display\n    //       }\n    //     });\n    //     value = el.innerHTML;\n    // }\n\n    // if (e.source === \"user\") elem.update({[elem.dataKey]: value});\n    elem.update({[elem.dataKey]: value});\n    // elem.setState({})\n    // elem.setState({});\n    // elem.updateValue(value);\n}\n\n\nexport const getQuillModules = (\n    APP, silentFetch, signal, mentionValues, i18n, elem, hasToolbar = true\n) => {\n    const toolbarID = `l-ql-toolbar-${elem.props.elem.name}`;\n    const modules = {\n        toolbar: `#${toolbarID}`,\n        mention: quillMention({\n            silentFetch: silentFetch,\n            signal: signal,\n            mentionValues: mentionValues,\n        }),\n        blotFormatter2: {\n            debug: true,\n            resize: {\n                useRelativeSize: true,\n            },\n        },\n        table: {i18n},\n        // \"better-table\": {\n        //     operationMenu: {\n        //         // items: {\n        //         //     mergeCells: {\n        //         //         text: i18n.t(\"Merge cells\"),\n        //         //     }\n        //         // },\n        //     }\n        // }\n    }\n    if (hasToolbar) {\n        modules.htmlEditButton = {\n            msg: i18n.t('Edit HTML here, when you click \"OK\" the quill editor\\'s contents will be replaced'),\n            prependSelector: \"div#raw-editor-container\",\n            okText: i18n.t(\"Ok\"),\n            cancelText: i18n.t(\"Cancel\"),\n            buttonTitle: i18n.t(\"Show HTML source\"),\n            // editorModules: {\n            //     clipboard: {\n            //         matchers: [\n            //             [\"BR\", brMatcher],\n            //         ]\n            //     }\n            // }\n        }\n    }\n    if (APP.state.site_data.installed_plugins.includes('uploads'))\n        modules.imageDropAndPaste = {handler: imageHandler(elem)};\n    modules.keyboard = {\n        bindings: {\n            // ...QuillBetterTable.keyboardBindings,\n            home: {\n                key: \"Home\",\n                handler: function (range, context) {\n                    const { quill } = elem;\n                    let [line, offset] = quill.getLine(range.index);\n                    if (line && line.domNode.tagName === \"LI\") {\n                      // Move to the start of text inside the list item\n                      quill.setSelection(line.offset(quill.scroll), 0, \"user\");\n                      return false; // stop default browser behavior\n                    }\n                    return true;\n                },\n            },\n            // shiftReturn: {\n            //     key: \"Enter\",\n            //     shiftKey: true,\n            //     handler: function (range, context) {\n            //         const { quill } = elem;\n            //         // const currentLeaf = quill.getLeaf(range.index)[0];\n            //         // const nextLeaf = quill.getLeaf(range.index + 1)[0];\n            //         // quill.insertEmbed(range.index, \"softbreak\", true, Quill.sources.USER);\n            //         // // Insert a second break if:\n            //         // // At the end of the editor, OR next leaf has a different parent (<p>)\n            //         // if (nextLeaf === null || currentLeaf.parent !== nextLeaf.parent) {\n            //         //   quill.insertEmbed(range.index, \"softbreak\", true, Quill.sources.USER);\n            //         // }\n            //         // // Now that we've inserted a line break, move the cursor forward\n            //         // quill.setSelection(range.index + 4, Quill.sources.SILENT);\n            //         // return false;\n            //         var nextChar = quill.getText(range.index + 1, 1)\n            //         var ee = quill.insertEmbed(range.index, 'break', true, 'user');\n            //         if (nextChar.length == 0) {\n            //           // second line break inserts only at the end of parent element\n            //           var ee = quill.insertEmbed(range.index, 'break', true, 'user');\n            //         }\n            //         quill.setSelection(range.index + 1, Quill.sources.SILENT);\n            //         return false;\n            //     },\n            // }\n        }\n    }\n    // modules.clipboard = {\n    //     matchers: [\n    //         [\"BR\", brMatcher],\n    //     ],\n    // }\n\n    if (!hasToolbar) delete modules.toolbar;\n\n    const meta = {toolbarID};\n\n    return {modules, meta};\n}\n\n\nexport const changeDelta = (elem) => {\n    return (delta, oldContents, source) => {\n        // copied from primereact/components/lib/editor/Editor.js\n        const quill = elem.quill;\n        let firstChild = quill.container.children[0];\n        let html = firstChild ? firstChild.innerHTML : null;\n        let text = quill.getText();\n\n        if (html === '<p><br></p>') {\n            html = null;\n        }\n\n        // GitHub primereact #2271 prevent infinite loop on clipboard paste of HTML\n        if (source === 'api') {\n            const htmlValue = quill.container.children[0];\n            const editorValue = document.createElement('div');\n\n            editorValue.innerHTML = elem.getValue() || '';\n\n            // this is necessary because Quill rearranged style elements\n            if (elem.ex.prUtils.DomHandler.isEqualElement(htmlValue, editorValue)) {\n                return;\n            }\n        }\n\n        onTextChange(elem, {\n            htmlValue: html,\n            textValue: text,\n            delta: delta,\n            source: source\n        });\n    }\n}\n\n\nexport const overrideImageButtonHandler = (quill) => {\n    quill.getModule('toolbar').addHandler('image', (clicked) => {\n        if (clicked) {\n            let fileInput;\n            // fileInput = quill.container.querySelector('input.ql-image[type=file]');\n            // if (fileInput == null) {\n                fileInput = document.createElement('input');\n                fileInput.setAttribute('type', 'file');\n                fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');\n                fileInput.classList.add('ql-image');\n                fileInput.addEventListener('change', (e) => {\n                    const files = e.target.files;\n                    let file;\n                    if (files.length > 0) {\n                        file = files[0];\n                        const type = file.type;\n                        const reader = new FileReader();\n                        reader.onload = (e) => {\n                            const dataURL = e.target.result;\n                            imageHandler({quill})(\n                                dataURL,\n                                type,\n                                new QuillImageData(dataURL, type, file.name)\n                            );\n                            fileInput.value = '';\n                        }\n                        reader.readAsDataURL(file);\n                    }\n                })\n            // }\n            fileInput.click();\n        }\n    })\n}\n\nexport const imageHandler = (elem) => {\n    return (imageDataURL, type, imageData) => {\n        const quill = elem.quill;\n        let index = (quill.getSelection() || {}).index;\n        if (index === undefined || index < 0) index = quill.getLength();\n        quill.insertEmbed(index, 'image', imageDataURL);\n    }\n\n    // const imageEl = quill.root.querySelector(`img[src=\"${imageDataURL}\"]`);\n    // Set default height\n    // imageEl.setAttribute(\"height\", window.App.URLContext.root.chInPx.offsetHeight * 20);\n}\n\nexport const quillMention = ({silentFetch, signal, mentionValues}) => {\n    function mentionSource(searchTerm, renderList, mentionChar) {\n        if (searchTerm.length === 0) {\n            let values = mentionValues[mentionChar];\n            renderList(values, searchTerm);\n        } else {\n            ex.resolve(['queryString']).then(({queryString}) => {\n                silentFetch({path: `suggestions?${queryString.default.stringify({\n                    query: searchTerm, trigger: mentionChar})}`, signal: signal})\n                .then(data => renderList(data.suggestions, searchTerm));\n            });\n        }\n    }\n\n    return {\n        allowedChars: /^[A-Za-z0-9\\s]*$/,\n        mentionDenotationChars: window.App.state.site_data.suggestors,\n        source: mentionSource,\n        listItemClass: \"ql-mention-list-item\",\n        mentionContainerClass: \"ql-mention-list-container\",\n        mentionListClass: \"ql-mention-list\",\n        dataAttributes: [\"value\", \"link\", \"title\", \"denotationChar\"],\n    }\n}\n\nconst quillToolbarHeaderTemplate = <React.Fragment>\n    <span className=\"ql-formats\">\n        <select className='ql-header' defaultValue='0'>\n            <option value='1'>Header 1</option>\n            <option value='2'>Header 2</option>\n            <option value='3'>Header 3</option>\n            <option value='4'>Header 4</option>\n            <option value='0'>Normal</option>\n        </select>\n        <select className='ql-font'>\n            <option defaultValue={true}></option>\n            <option value='serif'></option>\n            <option value='monospace'></option>\n        </select>\n    </span>\n    <span className=\"ql-formats\">\n        <select className=\"ql-size\">\n            <option value=\"small\"></option>\n            <option defaultValue={true}></option>\n            <option value=\"large\"></option>\n            <option value=\"huge\"></option>\n        </select>\n    </span>\n    <span className=\"ql-formats\">\n        <button className=\"ql-script\" value=\"sub\"></button>\n        <button className=\"ql-script\" value=\"super\"></button>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-bold' aria-label='Bold'></button>\n        <button type='button' className='ql-italic' aria-label='Italic'></button>\n        <button type='button' className='ql-underline' aria-label='Underline'></button>\n    </span>\n    <span className=\"ql-formats\">\n        <select className='ql-color'></select>\n        <select className='ql-background'></select>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-list' value='ordered' aria-label='Ordered List'></button>\n        <button type='button' className='ql-list' value='bullet' aria-label='Unordered List'></button>\n        <select className='ql-align'>\n            <option defaultValue={true}></option>\n            <option value='center'></option>\n            <option value='right'></option>\n            <option value='justify'></option>\n        </select>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-link' aria-label='Insert Link'></button>\n        <button type='button' className='ql-image' aria-label='Insert Image'></button>\n        <button type='button' className='ql-code-block' aria-label='Insert Code Block'></button>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-clean' aria-label='Remove Styles'></button>\n    </span>\n</React.Fragment>\n\nexport const invokeRefInsert = (elem) => {\n    const { APP } = elem.props.urlParams.controller;\n    const { URLContext } = APP;\n    let index = (elem.quill.getSelection() || {}).index;\n    if (index === undefined || index < 0)\n        index = elem.quill.getLength();\n    URLContext.actionHandler.runAction({\n        action_full_name: URLContext.actionHandler.findUniqueAction(\"insert_reference\").full_name,\n        actorId: \"about.About\",\n        response_callback: (data) => {\n            if (data.success)\n                elem.quill.insertText(index, data.message);\n        }\n    });\n}\n\nexport const refInsert = (elem) => {\n    if (!elem.c.APP.state.site_data.installed_plugins.includes('memo'))\n        return null;\n    return <span className=\"ql-formats\">\n        <button type='button'\n            onClick={(e) => invokeRefInsert(elem)}\n            aria-label='Open link dialog'>\n            <i className=\"pi pi-link\"></i></button>\n    </span>\n}\n\nconst commonHeader = (elem) => {\n    return <>\n        {quillToolbarHeaderTemplate}\n        {refInsert(elem)}\n        {\n        <span className=\"ql-formats\">\n            <button type=\"button\"\n                onClick={e => {\n                    const title = elem.ex.i18n.t(\"rows x columns\");\n                    const rows_text = elem.ex.i18n.t(\"Rows\");\n                    const columns_text = elem.ex.i18n.t(\"Columns\");\n                    const ok = (holder) => {\n                        const rows = parseInt(holder.context.data[rows_text]);\n                        const cols = parseInt(holder.context.data[columns_text]);\n                        const t = elem.quill.getModule(\"table\");\n                        elem.quill.focus();\n                        t.insertTable(rows, cols);\n\n                        const { factory, id } = holder.current.root.props;\n                        factory.remove(id);\n                    }\n                    const ctx = elem.props.urlParams.controller;\n                    ctx.APP.dialogFactory.createParamDialog(ctx, {\n                        [rows_text]: \"IntegerFieldElement\",\n                        [columns_text]: \"IntegerFieldElement\",\n                    }, title, ok);\n                }}>\n                <i className=\"pi pi-table\"></i></button>\n        </span>\n        }\n    </>\n}\n\nexport const quillToolbar = {\n    header: quillToolbarHeaderTemplate,\n    commonHeader: commonHeader,\n}\n"],"names":["TableNext","Quill","TableMenu","_createClass","params","quill","options","_classCallCheck","getModule","this","menuItems","showMenu","destroyHandler","destroy","bind","document","addEventListener","key","value","dn","domNode","createElement","style","position","left","concat","top","Object","values","forEach","desc","appendChild","node","classList","add","iconSpan","iconClass","i","innerText","icon","width","display","textSpan","text","handler","createItem","body","remove","removeEventListener","Table","_TableNext","_this","root","event","_this$getTable","getTable","_slicedToArray","preventDefault","tableMenu","getMenuItems","i18n","pageX","pageY","_inherits","_this2","insertColumnLeft","t","focus","insertColumnRight","insertRowAbove","insertRowBelow","deleteColumn","deleteRow","deleteTable","register","QuillImageDropAndPaste","BlotFormatter","MentionBlot","Mention","htmlEditButton","ex","QuillImageData","queryString","RegisterImportPool","quillLoad","elem","getValue","state","plain","setText","clipboard","dangerouslyPasteHTML","getQuillModules","APP","silentFetch","signal","mentionValues","hasToolbar","arguments","length","undefined","toolbarID","props","name","modules","toolbar","mention","quillMention","blotFormatter2","debug","resize","useRelativeSize","table","msg","prependSelector","okText","cancelText","buttonTitle","site_data","installed_plugins","includes","imageDropAndPaste","imageHandler","keyboard","bindings","home","range","context","_quill$getLine","getLine","index","_quill$getLine2","line","tagName","setSelection","offset","scroll","meta","changeDelta","delta","oldContents","source","firstChild","container","children","html","innerHTML","getText","htmlValue","editorValue","prUtils","DomHandler","isEqualElement","e","plainValue","textValue","slice","update","_defineProperty","dataKey","onTextChange","overrideImageButtonHandler","addHandler","clicked","fileInput","setAttribute","file","files","target","type","reader","FileReader","onload","dataURL","result","readAsDataURL","click","imageDataURL","imageData","getSelection","getLength","insertEmbed","_ref","allowedChars","mentionDenotationChars","window","App","suggestors","searchTerm","renderList","mentionChar","resolve","then","_ref2","path","stringify","query","trigger","data","suggestions","listItemClass","mentionContainerClass","mentionListClass","dataAttributes","quillToolbarHeaderTemplate","React","className","defaultValue","invokeRefInsert","URLContext","urlParams","controller","actionHandler","runAction","action_full_name","findUniqueAction","full_name","actorId","response_callback","success","insertText","message","refInsert","c","onClick","quillToolbar","header","commonHeader","title","rows_text","columns_text","ctx","dialogFactory","createParamDialog","holder","rows","parseInt","cols","insertTable","_holder$current$root$","current","factory","id"],"sourceRoot":""}