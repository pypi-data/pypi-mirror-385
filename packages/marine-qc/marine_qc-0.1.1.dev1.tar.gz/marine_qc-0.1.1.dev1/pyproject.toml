[build-system]
requires = ["flit_core >=3.11.0,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "marine_qc"
authors = [
  {name = "Ludwig Lierhammer", email = "ludwig.lierhammer@dwd.de"},
  {name = "John Kennedy", email = "jjk8932@googlemail.com"},
  {name = "Tina Leiding", email = "tina.leiding@dwd.de"},
  {name = "Kate Willett", email = "kate.willett@metoffice.gov.uk"},
  {name = "Chris Atkinson", email = "chris.atkinson@metoffice.gov.uk"},
  {name = "Richard Cornes", email = "richard.cornes@noc.ac.uk"},
  {name = "Elizabeth Kent", email = "eck@noc.ac.uk"},
  {name = "Trevor James Smith", email = "smith.trevorj@ouranos.ca"},
  {name = "Axel Andersson", email = "axel.andersson@dwd.de"}
]
maintainers = [
  {name = "Ludwig Lierhammer", email = "ludwig.lierhammer@dwd.de"},
  {name = "John Kennedy", email = "jjk8932@googlemail.com"}
]
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.10.0"
license = "Apache-2.0"
license-files = ["LICENSE"]
keywords = ["marine_qc"]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13"
]
dynamic = ["description", "version"]
dependencies = [
  "cdm_reader_mapper",
  "cf_xarray",
  "matplotlib",
  "pyproj",
  "xclim"
]

[project.optional-dependencies]
dev = [
  # Dev tools and testing
  "bump-my-version >=1.2.3",
  "codespell ==2.4.1",
  "coverage >=7.5.0",
  "deptry >=0.23.1",
  "flake8 >=7.3.0",
  "flake8-rst-docstrings >=0.3.1",
  "flit >=3.11.0,<4.0",
  "mypy >=1.18.2",
  "notebook",
  "numpydoc >=1.9.0",
  "pip >=25.2",
  "pre-commit >=3.7.0",
  "pylint >=3.3.1",
  "pytest >=8.3.4",
  "pytest-cov >=6.0.0",
  "pytest-env >=1.1.5",
  "ruff >=0.13.3",
  "tox >=4.30.3",
  "vulture >=2.14",
  "watchdog >=4.0.0"
]
docs = [
  "ipykernel",
  "ipython >=8.5.0",
  "jupyter_client",
  "myst-nb >=1.2.0",
  "nbconvert >=7.16.4",
  "numpydoc >=1.9.0",
  "sphinx >=7.1.0,<8.2",
  "sphinx-autodoc-typehints",
  "sphinx-copybutton",
  "sphinx-book-theme >=1.0"
]
all = ["marine_qc[dev]", "marine_qc[docs]"]

[project.urls]
"Homepage" = "https://marine-qc.readthedocs.io"
"Source" = "https://github.com/glamod/marine_qc"
"Changelog" = "https://marine_qc.readthedocs.io/en/stable/changelog.html"
"Issue tracker" = "https://github.com/glamod/marine_qc"

[tool]

[tool.bumpversion]
current_version = "0.1.1-dev.1"
commit = true
commit_args = "--no-verify --signoff"
tag = false
tag_name = "v{new_version}"
allow_dirty = false
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\-(?P<release>[a-z]+)(\\.(?P<build>\\d+)))?"
serialize = [
  "{major}.{minor}.{patch}-{release}.{build}",
  "{major}.{minor}.{patch}"
]

[[tool.bumpversion.files]]
filename = "src/marine_qc/__init__.py"
search = "__version__ = \"{current_version}\""
replace = "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]
filename = ".cruft.json"
search = "\"version\": \"{current_version}\""
replace = "\"version\": \"{new_version}\""

[tool.bumpversion.parts.build]
independent = false

[tool.bumpversion.parts.release]
optional_value = "release"
values = ["dev", "release"]

[tool.codespell]
skip = "src/marine_qc/*.json"
ignore-words-list = "astroid"

[tool.coverage.paths]
source = ["src/marine_qc/", "*/site-packages/marine_qc/"]

[tool.coverage.run]
relative_files = true
omit = ["tests/*.py"]
source = ["marine_qc"]

[tool.deptry]
extend_exclude = ["docs"]
ignore_notebooks = true
pep621_dev_dependency_groups = ["all", "dev", "docs"]

[tool.flit.sdist]
include = [
  ".zenodo.json",
  "AUTHORS.rst",
  "CHANGELOG.rst",
  "CONTRIBUTING.rst",
  "LICENSE",
  "Makefile",
  "README.rst",
  "environemnt-docs.yml",
  "docs/**/*.png",
  "docs/**/*.rst",
  "docs/**/*.txt",
  "docs/Makefile",
  "docs/conf.py",
  "docs/make.bat",
  "src/marine_qc/**/*.json",
  "src/marine_qc/**/*.py",
  "src/marine_qc/**/*.txt",
  "src/marine_qc/**/*.yml",
  "tests/**/*.py",
  "tox.ini"
]
exclude = [
  "*.py[co]",
  "__pycache__",
  ".*",
  "docs/_*",
  "docs/modules.rst",
  "pylintrc"
]

[tool.mypy]
files = "."
python_version = 3.12
show_error_codes = true
strict = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
plugins = ["numpy.typing.mypy_plugin"]

[[tool.mypy.overrides]]
module = [
  "boltons.*",
  "cftime.*",
  "jsonpickle.*",
  "numba.*",
  "pytest_socket.*",
  "SBCK.*",
  "scipy.*",
  "sklearn.*",
  "statsmodels.*",
  "yamale.*",
  "yaml.*"
]
allow_untyped_defs = true
disable_error_code = "attr-defined"
ignore_missing_imports = true

[tool.numpydoc_validation]
checks = [
  "all", # report on all checks, except the below
  "EX01",
  "SA01",
  "ES01"
]
# remember to use single quotes for regex in TOML
exclude = [
  # don't report on objects that match any of these regex
  '\.undocumented_method$',
  '\.__repr__$'
]
override_SS05 = [
  # override SS05 to allow docstrings starting with these words
  '^Process ',
  '^Assess ',
  '^Access '
]

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "--color=yes",
  "--verbose"
]
filterwarnings = ["ignore::UserWarning"]
testpaths = [
  "tests"
]

[tool.ruff]
src = ["marine_qc"]
line-length = 150
exclude = [".git", "build", ".eggs"]
extend-include = [
  "*.ipynb" # Include notebooks
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
quote-style = "double"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
extend-select = [
  "D213", # multi-line-summary-second-line
  "RUF022" # unsorted-dunder-all
]
ignore = [
  "COM", # commas
  "D103", # missing-docstring-in-public-function
  "D205", # blank-line-after-summary
  "D400", # ends-in-period
  "D401" # non-imperative-mood
]
preview = true
select = [
  "B", # bugbear
  "BLE", # blind-except
  "C90", # mccabe-complexity
  "D", # docstrings
  "E", # pycodestyle errors
  "F", # pyflakes
  "FLY002", # static-join-to-fstring
  "G", # logging-format
  "I", # imports
  "N", # naming conventions
  "PERF", # iterator performance
  "PTH", # pathlib
  "RUF010", # explicit-f-string-type-conversion
  "RUF013", # implicit-optional
  "S", # bandit
  "UP", # python version conventions
  "W" # pycodestyle warnings
]

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-import-conventions.aliases]
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
scipy = "sp"
xarray = "xr"

[tool.ruff.lint.isort]
known-first-party = ["marine_qc"]
case-sensitive = true
detect-same-package = false
lines-after-imports = 2
no-lines-before = ["future", "standard-library"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
"docs/*.py" = ["D100", "D101", "D102", "D103"]
"tests/**/*test*.py" = ["D100", "D101", "D102", "D103", "N802", "S101"]
"src/marine_qc/**/__init__.py" = ["F401", "F403"]
"src/marine_qc/Climatology.py" = ["N999"] # naming a module with a capital letter is against PEP8, but changing it would be a breaking change

[tool.ruff.lint.pycodestyle]
max-doc-length = 180

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.vulture]
exclude = []
ignore_decorators = ["@pytest.fixture"]
ignore_names = []
min_confidence = 90
paths = ["src/marine_qc", "tests"]
sort_by_size = true
