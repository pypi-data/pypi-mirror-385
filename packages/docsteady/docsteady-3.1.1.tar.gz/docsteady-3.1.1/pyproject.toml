[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "docsteady"
description = "Generate test relted documentation from Zephyrscale Jira Test"
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
]
requires-python = ">=3.11"
dependencies = [
    "idna>=3.7",
    "certifi>2024.2.0",
    "pillow>=10.3.0",
    "ecdsa>=0.18",
    "BeautifulSoup4",
    "click",
    "jinja2>=3.1.5",
    "marshmallow<4.0",
    "pandoc",
    "pypandoc",
    "pydantic",
    "requests>2.32.0",
    "arrow",
    "urllib3 >=2.2.2",
    "tlslite-ng",
    "oauth2",
    "zephyr-python-api"
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pre-commit>=4.0.1",
    "pytest",
    "pytest-cov",
    "mypy",
    "types-requests",
    "documenteer>1.0.0",
    "documenteer[guide]",
    "sphinx-rtd-theme",
    "sphinx-prompt"

]

[project.scripts]
docsteady = "docsteady:cli"

[project.urls]
Homepage = "https://docsteady.lsst.io"
Source = "https://github.com/lsst-dm/docsteady"

[build-system]
requires = ["setuptools>=70", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.setuptools]
package-dir = {"" = "src"}
py-modules = ["docsteady"]

[tool.setuptools.packages.find]
where = ["src"]
include = ["docsteady"]

[tool.coverage.run]
parallel = true
branch = true
source = ["src","docsteady"]


[tool.coverage.paths]
source = ["src","docsteady", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 79
target-version = ["py311"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
# Use single-quoted strings so TOML treats the string like a Python r-string
# Multi-line strings are implicitly treated by black as regular expressions

[tool.isort]
profile = "black"
line_length = 79
known_first_party = ["src", "docsteady", "tests"]
skip = ["docs/conf.py"]

[tool.pytest.ini_options]
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
filterwarnings = [
    "ignore::DeprecationWarning:marshmallow*",
    "ignore::DeprecationWarning:dataclasses_json*" ]
python_files = ["docsteady/*py", "docsteady/*/*py", "tests/*.py", "tests/*/*.py"]
# there are a lot of classes with the word Test in them in the codebase - this
# is a way to exclude them from being considered tests
python_classes = "TestCase"
asyncio_default_fixture_loop_scope = "function"
addopts = ["--ignore=dsdebug.py"]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
plugins = ["pydantic.mypy"]
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"
