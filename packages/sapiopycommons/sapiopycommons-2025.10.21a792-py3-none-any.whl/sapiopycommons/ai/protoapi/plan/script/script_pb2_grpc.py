# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from sapiopycommons.ai.protoapi.plan.script import script_pb2 as sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sapiopycommons/ai/protoapi/plan/script/script_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ScriptServiceStub(object):
    """
    This is the generic service interface that all tools must implement. We will use hostname routing to route the request to the correct tool.
    The other option is for us to use gRPC metadata to route the request to the correct tool. We don't want to expose a bunch of ports and that's
    a pain to manage. So we will use hostname routing for now.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateScriptJob = channel.unary_unary(
                '/ScriptService/CreateScriptJob',
                request_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.CreateScriptJobRequestPbo.SerializeToString,
                response_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.CreateScriptJobResponsePbo.FromString,
                _registered_method=True)
        self.GetJob = channel.unary_unary(
                '/ScriptService/GetJob',
                request_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.GetJobRequestPbo.SerializeToString,
                response_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.GetJobResponsePbo.FromString,
                _registered_method=True)


class ScriptServiceServicer(object):
    """
    This is the generic service interface that all tools must implement. We will use hostname routing to route the request to the correct tool.
    The other option is for us to use gRPC metadata to route the request to the correct tool. We don't want to expose a bunch of ports and that's
    a pain to manage. So we will use hostname routing for now.
    """

    def CreateScriptJob(self, request, context):
        """The main entry point for script
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScriptServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateScriptJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateScriptJob,
                    request_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.CreateScriptJobRequestPbo.FromString,
                    response_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.CreateScriptJobResponsePbo.SerializeToString,
            ),
            'GetJob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJob,
                    request_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.GetJobRequestPbo.FromString,
                    response_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.GetJobResponsePbo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ScriptService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ScriptService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ScriptService(object):
    """
    This is the generic service interface that all tools must implement. We will use hostname routing to route the request to the correct tool.
    The other option is for us to use gRPC metadata to route the request to the correct tool. We don't want to expose a bunch of ports and that's
    a pain to manage. So we will use hostname routing for now.
    """

    @staticmethod
    def CreateScriptJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ScriptService/CreateScriptJob',
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.CreateScriptJobRequestPbo.SerializeToString,
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.CreateScriptJobResponsePbo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ScriptService/GetJob',
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.GetJobRequestPbo.SerializeToString,
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_script_dot_script__pb2.GetJobResponsePbo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
