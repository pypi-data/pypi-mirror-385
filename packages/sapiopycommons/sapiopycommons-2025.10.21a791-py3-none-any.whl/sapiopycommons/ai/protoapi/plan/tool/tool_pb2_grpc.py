# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from sapiopycommons.ai.protoapi.plan.tool import tool_pb2 as sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sapiopycommons/ai/protoapi/plan/tool/tool_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ToolServiceStub(object):
    """
    This is the generic service interface that all tools must implement. We will use hostname routing to route the request to the correct tool.
    The other option is for us to use gRPC metadata to route the request to the correct tool. We don't want to expose a bunch of ports and that's
    a pain to manage. So we will use hostname routing for now.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetToolDetails = channel.unary_unary(
                '/ToolService/GetToolDetails',
                request_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ToolDetailsRequestPbo.SerializeToString,
                response_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ToolDetailsResponsePbo.FromString,
                _registered_method=True)
        self.ProcessData = channel.unary_unary(
                '/ToolService/ProcessData',
                request_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ProcessStepRequestPbo.SerializeToString,
                response_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ProcessStepResponsePbo.FromString,
                _registered_method=True)


class ToolServiceServicer(object):
    """
    This is the generic service interface that all tools must implement. We will use hostname routing to route the request to the correct tool.
    The other option is for us to use gRPC metadata to route the request to the correct tool. We don't want to expose a bunch of ports and that's
    a pain to manage. So we will use hostname routing for now.
    """

    def GetToolDetails(self, request, context):
        """This allows for a tool to self-describe itself, which allows for the UI to be automatically populated with this information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessData(self, request, context):
        """This is the main entry point for a tool to be called
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToolServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetToolDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetToolDetails,
                    request_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ToolDetailsRequestPbo.FromString,
                    response_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ToolDetailsResponsePbo.SerializeToString,
            ),
            'ProcessData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessData,
                    request_deserializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ProcessStepRequestPbo.FromString,
                    response_serializer=sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ProcessStepResponsePbo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ToolService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ToolService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ToolService(object):
    """
    This is the generic service interface that all tools must implement. We will use hostname routing to route the request to the correct tool.
    The other option is for us to use gRPC metadata to route the request to the correct tool. We don't want to expose a bunch of ports and that's
    a pain to manage. So we will use hostname routing for now.
    """

    @staticmethod
    def GetToolDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ToolService/GetToolDetails',
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ToolDetailsRequestPbo.SerializeToString,
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ToolDetailsResponsePbo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ToolService/ProcessData',
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ProcessStepRequestPbo.SerializeToString,
            sapiopycommons_dot_ai_dot_protoapi_dot_plan_dot_tool_dot_tool__pb2.ProcessStepResponsePbo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
