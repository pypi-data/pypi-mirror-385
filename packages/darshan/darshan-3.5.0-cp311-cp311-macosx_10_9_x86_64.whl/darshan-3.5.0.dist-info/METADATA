Metadata-Version: 2.4
Name: darshan
Version: 3.5.0
Summary: Python tools to interact with Darshan log records of HPC applications.
Project-URL: homepage, https://www.mcs.anl.gov/research/projects/darshan/
Project-URL: repository, https://github.com/darshan-hpc/darshan
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.7
Description-Content-Type: text/x-rst
Requires-Dist: cffi
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: matplotlib
Requires-Dist: seaborn
Requires-Dist: mako
Requires-Dist: humanize
Requires-Dist: rich
Provides-Extra: test
Requires-Dist: packaging; extra == "test"
Requires-Dist: pytest; extra == "test"
Requires-Dist: lxml; extra == "test"
Requires-Dist: importlib_resources; python_version < "3.9" and extra == "test"
Provides-Extra: dev
Requires-Dist: sphinx; extra == "dev"
Requires-Dist: sphinx_rtd_theme; extra == "dev"
Requires-Dist: pipx; extra == "dev"

=======================
PyDarshan Documentation
=======================

Python utilities to interact with `Darshan <https://www.mcs.anl.gov/research/projects/darshan/>`__
log records of HPC applications.

Features
--------

* Job summary tool for generating HTML reports of I/O activity in a Darshan log
* Darshan Report interface for common interactive analysis tasks
* Low-level CFFI bindings for efficient access to Darshan log files
* Generic plotting capabilities (matplotlib) for Darshan log data


Usage
-----

For examples and Jupyter notebooks to get started with PyDarshan make sure
to check out the `examples` subdirectory.


Installation
------------

To install in most cases the following will work::

    pip install darshan


Testing
-------

Targets for various tests are included in the makefile. To run the normal 
test suite use::

    make test

Or to test against a different version of Python using Tox::

    make test-all

Coverage tests can be performed using::

    make coverage

Conformance to PEPs can be tested using flake8 via::

    make lint


Documentation
-------------

Documentation for the Python bindings is generated separately from the
darshan-util C library in the interest of using Sphinx. After installing the
development requirements the documentation can be built using make as follows::

    pip install -r requirements_dev.txt
    make docs

File List
---------

* darshan::
    core darshan python module code
* devel::
    scripts for building Python wheel
* docs::
    markdown documentation used by sphinx to auto-generate HTML RTD style doc
* examples::
    Jupyter notebooks showing PyDarshan usage with log files
* tests::
    PyDarshan-specific test cases
* requirements.txt::
    pip requirement file for minimum set of dependencies
* requirements_dev.txt::
    pip requirement file for dependencies needed to run development tools
* setup.py::
    python file for building/generating PyDarshan package
* setup.cfg::
    input for setup.py
* MANIFEST.in::
    input files for setup.py package
* tox.ini::
    input for tox which runs the automated testing
