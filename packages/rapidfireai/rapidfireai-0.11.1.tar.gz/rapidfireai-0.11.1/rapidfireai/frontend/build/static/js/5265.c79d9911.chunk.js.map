{"version":3,"file":"static/js/5265.c79d9911.chunk.js","mappings":"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","sources":["experiment-tracking/components/runs-charts/components/RunsChartsGlobalChartSettingsDropdown.tsx","common/hooks/useIsTabActive.tsx","experiment-tracking/components/modals/RenameForm.tsx","experiment-tracking/components/modals/RenameRunModal.tsx","experiment-tracking/components/modals/DeleteRunModal.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFilterInput.tsx","common/components/JsonFormatting.tsx","experiment-tracking/components/experiment-page/hooks/usePopulateImagesByRunUuid.tsx","experiment-tracking/hooks/logged-models/useGetLoggedModelsQuery.tsx","experiment-tracking/components/modals/ConfirmModal.tsx"],"sourcesContent":["import { Button, CheckIcon, DropdownMenu, GearIcon, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isUndefined } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useCallback } from 'react';\nimport { LineSmoothSlider } from '../../LineSmoothSlider';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RunsChartsUIConfigurationSetter } from '../hooks/useRunsChartsUIConfiguration';\n\nexport const RunsChartsGlobalChartSettingsDropdown = ({\n  globalLineChartConfig,\n  metricKeyList,\n  updateUIState,\n}: {\n  metricKeyList: string[];\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  updateUIState: (stateSetter: RunsChartsUIConfigurationSetter) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const { lineSmoothness, selectedXAxisMetricKey, xAxisKey } = globalLineChartConfig || {};\n\n  const updateGlobalLineChartSettings = useCallback(\n    (newSettings: Partial<RunsChartsGlobalLineChartConfig>) =>\n      updateUIState((state) => ({\n        ...state,\n        globalLineChartConfig: {\n          ...state.globalLineChartConfig,\n          ...newSettings,\n        },\n      })),\n    [updateUIState],\n  );\n\n  const isUsingGlobalMetricXaxis = xAxisKey === RunsChartsLineChartXAxisType.METRIC;\n\n  const label = intl.formatMessage({\n    defaultMessage: 'Configure charts',\n    description: 'Experiment page > view controls > global settings for line chart view > dropdown button label',\n  });\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <Tooltip\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_44\"\n        content={label}\n      >\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"mlflow.charts.controls.global_chart_setup_dropdown\"\n            icon={<GearIcon />}\n            aria-label={label}\n          />\n        </DropdownMenu.Trigger>\n      </Tooltip>\n      <DropdownMenu.Content align=\"end\" css={{ minWidth: 300 }}>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'X-axis',\n            description:\n              'Experiment page > view controls > global settings for line chart view > settings for x-axis section label',\n          })}\n        >\n          <DropdownMenu.Label css={{ display: 'flex', gap: 8 }}>\n            <FormattedMessage\n              defaultMessage=\"X-axis\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis section label\"\n            />\n          </DropdownMenu.Label>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_68\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.STEP}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.STEP })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Step\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use step axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_78\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (wall)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use wall time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_88\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME_RELATIVE })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (relative)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use relative time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.Sub>\n            <DropdownMenu.SubTrigger\n              css={{\n                paddingLeft: theme.spacing.xs + theme.spacing.sm,\n              }}\n            >\n              <DropdownMenu.IconWrapper>\n                <CheckIcon\n                  css={{\n                    visibility: isUsingGlobalMetricXaxis ? 'visible' : 'hidden',\n                  }}\n                />\n              </DropdownMenu.IconWrapper>\n              <FormattedMessage\n                defaultMessage=\"Metric\"\n                description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use metric axis in all charts\"\n              />\n            </DropdownMenu.SubTrigger>\n            <DropdownMenu.SubContent css={{ maxHeight: 300, overflow: 'auto' }}>\n              {metricKeyList.map((metricKey) => (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_118\"\n                  key={metricKey}\n                  checked={selectedXAxisMetricKey === metricKey && isUsingGlobalMetricXaxis}\n                  onClick={() =>\n                    updateGlobalLineChartSettings({\n                      xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n                      selectedXAxisMetricKey: metricKey,\n                    })\n                  }\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {metricKey}\n                </DropdownMenu.CheckboxItem>\n              ))}\n            </DropdownMenu.SubContent>\n          </DropdownMenu.Sub>\n        </DropdownMenu.Group>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Line smoothing',\n            description:\n              'Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.',\n          })}\n        >\n          <DropdownMenu.Label>\n            <FormattedMessage\n              defaultMessage=\"Line smoothing\"\n              description=\"Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.\"\n            />\n          </DropdownMenu.Label>\n\n          <div css={{ padding: theme.spacing.sm }}>\n            <LineSmoothSlider\n              min={0}\n              max={100}\n              onChange={(lineSmoothness) => updateGlobalLineChartSettings({ lineSmoothness })}\n              value={lineSmoothness ? lineSmoothness : 0}\n            />\n          </div>\n        </DropdownMenu.Group>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns whether the browser tab is active or not.\n * @returns true if the tab is active, false otherwise\n */\nexport const useIsTabActive = () => {\n  const [isTabActive, setIsTabActive] = useState(document.visibilityState === 'visible');\n  useEffect(() => {\n    document.addEventListener('visibilitychange', (x) => {\n      setIsTabActive(document.visibilityState === 'visible');\n    });\n  }, []);\n  return isTabActive;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\n\nimport { LegacyForm, Input } from '@databricks/design-system';\n\nexport const NEW_NAME_FIELD = 'newName';\n\ntype Props = {\n  type: string;\n  name: string;\n  visible: boolean;\n  validator?: (...args: any[]) => any;\n  innerRef: any;\n};\n\n/**\n * Component that renders a form for updating a run's or experiment's name.\n */\nclass RenameFormComponent extends Component<Props> {\n  inputToAutoFocus: any;\n\n  componentDidUpdate(prevProps: Props) {\n    this.autoFocus(prevProps);\n    this.resetFields(prevProps);\n  }\n\n  autoFocusInputRef = (inputToAutoFocus: any) => {\n    this.inputToAutoFocus = inputToAutoFocus;\n    inputToAutoFocus && inputToAutoFocus.focus();\n    inputToAutoFocus && inputToAutoFocus.select();\n  };\n\n  autoFocus = (prevProps: any) => {\n    if (prevProps.visible === false && this.props.visible === true) {\n      // focus on input field\n      this.inputToAutoFocus && this.inputToAutoFocus.focus();\n      // select text\n      this.inputToAutoFocus && this.inputToAutoFocus.select();\n    }\n  };\n\n  resetFields = (prevProps: any) => {\n    const formRef = this.props.innerRef;\n    if (prevProps.name !== this.props.name) {\n      // reset input field to reset displayed initialValue\n      formRef.current.resetFields([NEW_NAME_FIELD]);\n    }\n  };\n\n  render() {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: Element; ref: any; layout: \"vert... Remove this comment to see the full error message\n      <LegacyForm ref={this.props.innerRef} layout=\"vertical\">\n        <LegacyForm.Item\n          name={NEW_NAME_FIELD}\n          initialValue={this.props.name}\n          rules={[\n            { required: true, message: `Please input a new name for the ${this.props.type}.` },\n            { validator: this.props.validator },\n          ]}\n          label={`New ${this.props.type} name`}\n        >\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_modals_renameform.tsx_69\"\n            placeholder={`Input a ${this.props.type} name`}\n            ref={this.autoFocusInputRef}\n            data-testid=\"rename-modal-input\"\n          />\n        </LegacyForm.Item>\n      </LegacyForm>\n    );\n  }\n}\n\nexport const RenameForm = RenameFormComponent;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { IntlShape, injectIntl } from 'react-intl';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\n\nimport { updateRunApi } from '../../actions';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\ntype Props = {\n  isOpen?: boolean;\n  runUuid: string;\n  runName: string;\n  onClose: () => void;\n  updateRunApi: (runId: string, newName: string, id: string) => any;\n  intl: IntlShape;\n  onSuccess?: () => void;\n};\n\nclass RenameRunModalImpl extends Component<Props> {\n  formRef = React.createRef();\n\n  handleRenameRun = (values: Record<string, string>) => {\n    // get value of input field\n    const newRunName = values[NEW_NAME_FIELD];\n\n    const updateRunRequestId = getUUID();\n\n    return this.props\n      .updateRunApi(this.props.runUuid, newRunName, updateRunRequestId)\n      .then(() => this.props.onSuccess?.());\n  };\n\n  render() {\n    const { isOpen = false, runName } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Rename Run',\n          description: 'Modal title to rename the experiment run name',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Save',\n          description: 'Modal button text to save the changes to rename the experiment run name',\n        })}\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameRun}\n        onClose={this.props.onClose}\n      >\n        <RenameForm\n          type=\"run\"\n          name={runName}\n          innerRef={this.formRef}\n          visible={isOpen}\n          validator={async (_, value) => {\n            if (typeof value === 'string' && value.length && !value.trim()) {\n              throw new Error(\n                this.props.intl.formatMessage({\n                  defaultMessage: 'Run name cannot consist only of whitespace!',\n                  description: \"An error shown when user sets the run's name to whitespace characters only\",\n                }),\n              );\n            }\n            return true;\n          }}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateRunApi,\n};\n\nexport const RenameRunModalWithIntl = injectIntl(RenameRunModalImpl);\nexport const RenameRunModal = connect(undefined, mapDispatchToProps)(RenameRunModalWithIntl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport { IntlShape, injectIntl } from 'react-intl';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  deleteRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n  intl: IntlShape;\n};\n\nexport class DeleteRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const deletePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises)\n      .catch(() => {\n        const errorModalContent = `${this.props.intl.formatMessage({\n          defaultMessage: 'While deleting an experiment run, an error occurred.',\n          description: 'Experiment tracking > delete run modal > error message',\n        })}`;\n        this.props.openErrorModal(errorModalContent);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with associated metrics,\n                params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(injectIntl(DeleteRunModalImpl));\n","import { useCallback, useState } from 'react';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { useIntl } from 'react-intl';\nimport { Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const RunsChartsFilterInput = ({ chartsSearchFilter }: { chartsSearchFilter?: string }) => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  const { theme } = useDesignSystemTheme();\n\n  const [inputValue, setInputValue] = useState(() => chartsSearchFilter ?? '');\n  const [searching, setSearching] = useState(false);\n\n  const { formatMessage } = useIntl();\n\n  const updateChartFilter = useCallback(\n    (value: string) => {\n      updateChartsUIState((current) => ({\n        ...current,\n        chartsSearchFilter: value,\n      }));\n      setSearching(false);\n    },\n    [updateChartsUIState],\n  );\n\n  const updateChartFilterDebounced = useDebouncedCallback(updateChartFilter, 150);\n\n  return (\n    <Input\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfilterinput.tsx_30\"\n      role=\"searchbox\"\n      prefix={\n        <div css={{ width: theme.general.iconFontSize, lineHeight: 0 }}>\n          {searching ? <Spinner size=\"small\" /> : <SearchIcon />}\n        </div>\n      }\n      value={inputValue}\n      allowClear\n      onChange={(e) => {\n        setInputValue(e.target.value);\n        setSearching(true);\n        updateChartFilterDebounced(e.target.value);\n      }}\n      placeholder={formatMessage({\n        defaultMessage: 'Search metric charts',\n        description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n      })}\n    />\n  );\n};\n","import React from 'react';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { isObject } from 'lodash';\n\ninterface JsonPreviewProps {\n  json: string;\n  wrapperStyle?: React.CSSProperties;\n  overlayStyle?: React.CSSProperties;\n  codeSnippetStyle?: React.CSSProperties;\n}\n\nexport const JsonPreview: React.FC<JsonPreviewProps> = ({ json, wrapperStyle, overlayStyle, codeSnippetStyle }) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  const defaultWrapperStyle: React.CSSProperties = {\n    position: 'relative',\n    maxHeight: 'calc(1.5em * 9)',\n    overflow: 'hidden',\n  };\n\n  const defaultOverlayStyle: React.CSSProperties = {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    left: 6,\n    height: '2em',\n    background: 'linear-gradient(transparent, white)',\n  };\n\n  const defaultCodeSnippetStyle: React.CSSProperties = {\n    padding: '5px',\n    overflowX: 'hidden',\n  };\n\n  return (\n    <div style={{ ...defaultWrapperStyle, ...wrapperStyle }}>\n      {isJsonContent ? (\n        <>\n          <CodeSnippet language=\"json\" style={{ ...defaultCodeSnippetStyle, ...codeSnippetStyle }}>\n            {formattedJson}\n          </CodeSnippet>\n          <div css={{ ...defaultOverlayStyle, ...overlayStyle }} />\n        </>\n      ) : (\n        <>{json}</>\n      )}\n    </div>\n  );\n};\n\nfunction useFormattedJson(json: string) {\n  return React.useMemo(() => {\n    try {\n      const parsed = JSON.parse(json);\n      const isJson = isObject(parsed) && typeof parsed !== 'function' && !(parsed instanceof Date);\n      return {\n        formattedJson: isJson ? JSON.stringify(parsed, null, 2) : json,\n        isJsonContent: isJson,\n      };\n    } catch (e) {\n      return {\n        formattedJson: json,\n        isJsonContent: false,\n      };\n    }\n  }, [json]);\n}\n\nexport const FormattedJsonDisplay: React.FC<{ json: string }> = ({ json }) => {\n  const { formattedJson, isJsonContent } = useFormattedJson(json);\n\n  return (\n    <div css={{ whiteSpace: 'pre-wrap' }}>\n      {isJsonContent ? (\n        <CodeSnippet language=\"json\" wrapLongLines>\n          {formattedJson}\n        </CodeSnippet>\n      ) : (\n        <span>{json}</span>\n      )}\n    </div>\n  );\n};\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { listImagesApi } from '@mlflow/mlflow/src/experiment-tracking/actions';\nimport { EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE } from '@mlflow/mlflow/src/experiment-tracking/constants';\n\nexport const usePopulateImagesByRunUuid = ({\n  runUuids,\n  runUuidsIsActive,\n  autoRefreshEnabled,\n  enabled,\n}: {\n  runUuids: string[];\n  runUuidsIsActive: boolean[];\n  autoRefreshEnabled?: boolean;\n  enabled?: boolean;\n}) => {\n  // Retrieve image keys for each run. This should only re-render when the runUuids change.\n  // This populates the imagesByRunUuid with imageKeys, which will be used elsewhere to fetch metadata.\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * The criteria to populate images for a run is\n   * 1. The run is not hidden\n   * 2. The run includes the mlflow.loggedImage tag\n   * 3. The run's image is not already populated\n   */\n  // We need to use a serialized version of runUuids to avoid re-triggering the effect when using an array.\n  const runUuidsSerialized = runUuids.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  useEffect(() => {\n    // Regular single fetch event with no auto-refresh capabilities. Used if auto-refresh is disabled.\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    runUuidsSerialized.split(',').forEach((runUuid) => {\n      if (runUuid) {\n        dispatch(listImagesApi(runUuid));\n      }\n    });\n  }, [runUuidsSerialized, dispatch, autoRefreshEnabled, enabled]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled;\n\n  const runUuidsIsActiveSerialized = runUuidsIsActive.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    const fetchImagesFn = async (autoRefresh: boolean) => {\n      const runUuids = runUuidsSerialized.split(',');\n\n      const activeRunUuids = runUuidsIsActiveSerialized.split(',');\n      // If auto-refresh is enabled, only fetch images for runs that are currently active\n      const filteredRunUuids = autoRefresh ? runUuids.filter((_, index) => activeRunUuids[index] === 'true') : runUuids;\n\n      filteredRunUuids.forEach((runUuid) => {\n        if (runUuid) {\n          dispatch(listImagesApi(runUuid, autoRefresh));\n        }\n      });\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchImagesFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchImagesFn(false).then(scheduleRefresh);\n\n    return () => {\n      fetchImagesFn(true);\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, runUuidsSerialized, runUuidsIsActiveSerialized, autoRefreshEnabled, enabled]);\n};\n","import {\n  type QueryFunctionContext,\n  useQuery,\n  type UseQueryOptions,\n} from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { LoggedModelProto } from '../../types';\nimport { loggedModelsDataRequest } from './request.utils';\nimport { chunk } from 'lodash';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nconst LOGGED_MODEL_BY_ID_BATCH_LIMIT = 100; // API supports batch size of 100\n\ntype QueryResult = {\n  models?: LoggedModelProto[];\n};\n\ntype QueryKey = ['GET_LOGGED_MODELS', string[]];\n\nconst getQueryKey = (loggedModelIds: string[]): QueryKey => ['GET_LOGGED_MODELS', loggedModelIds] as const;\n\nconst queryFn = async ({ queryKey: [, loggedModelIds] }: QueryFunctionContext<QueryKey>): Promise<QueryResult[]> => {\n  const modelIdChunks = chunk(loggedModelIds, LOGGED_MODEL_BY_ID_BATCH_LIMIT);\n  return Promise.all<QueryResult>(\n    modelIdChunks.map((chunkedIds) => {\n      const queryParams = new URLSearchParams();\n      for (const id of chunkedIds) {\n        queryParams.append('model_ids', id);\n      }\n      return loggedModelsDataRequest(\n        getAjaxUrl(`ajax-api/2.0/mlflow/logged-models:batchGet?${queryParams.toString()}`),\n        'GET',\n      );\n    }),\n  );\n};\n\n/**\n * Retrieve many logged model from API based on IDs\n */\nexport const useGetLoggedModelsQuery = (\n  {\n    modelIds,\n  }: {\n    modelIds?: string[];\n  },\n  options: UseQueryOptions<QueryResult[], Error, LoggedModelProto[], QueryKey>,\n) => {\n  const { data, isLoading, isFetching, refetch, error } = useQuery<QueryResult[], Error, LoggedModelProto[], QueryKey>({\n    queryKey: getQueryKey(modelIds ?? []),\n    queryFn,\n    select: (results) => results?.flatMap((result) => result?.models || []),\n    retry: false,\n    ...options,\n  });\n\n  return {\n    isLoading,\n    isFetching,\n    data,\n    refetch,\n    error,\n  } as const;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal, ModalProps } from '@databricks/design-system';\n\ntype Props = {\n  isOpen: boolean;\n  handleSubmit: (...args: any[]) => any;\n  onClose: (...args: any[]) => any;\n  title: React.ReactNode;\n  helpText: React.ReactNode;\n  confirmButtonText: React.ReactNode;\n  confirmButtonProps?: ModalProps['okButtonProps'];\n};\n\ntype State = any;\n\nexport class ConfirmModal extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onRequestCloseHandler = this.onRequestCloseHandler.bind(this);\n    this.handleSubmitWrapper = this.handleSubmitWrapper.bind(this);\n  }\n\n  state = {\n    isSubmitting: false,\n  };\n\n  onRequestCloseHandler() {\n    if (!this.state.isSubmitting) {\n      this.props.onClose();\n    }\n  }\n\n  handleSubmitWrapper() {\n    this.setState({ isSubmitting: true });\n    return this.props.handleSubmit().finally(() => {\n      this.props.onClose();\n      this.setState({ isSubmitting: false });\n    });\n  }\n\n  render() {\n    return (\n      <Modal\n        data-testid=\"confirm-modal\"\n        title={this.props.title}\n        visible={this.props.isOpen}\n        onOk={this.handleSubmitWrapper}\n        okText={this.props.confirmButtonText}\n        okButtonProps={this.props.confirmButtonProps}\n        confirmLoading={this.state.isSubmitting}\n        onCancel={this.onRequestCloseHandler}\n        // @ts-expect-error TS(2322): Type '{ children: Element; \"data-testid\": string; ... Remove this comment to see the full error message\n        centered\n      >\n        <div className=\"modal-explanatory-text\">{this.props.helpText}</div>\n      </Modal>\n    );\n  }\n}\n"],"names":["_ref","name","styles","_ref2","_ref3","RunsChartsGlobalChartSettingsDropdown","globalLineChartConfig","metricKeyList","updateUIState","theme","useDesignSystemTheme","intl","useIntl","lineSmoothness","selectedXAxisMetricKey","xAxisKey","updateGlobalLineChartSettings","useCallback","newSettings","state","isUsingGlobalMetricXaxis","RunsChartsLineChartXAxisType","METRIC","label","formatMessage","id","defaultMessage","_jsxs","DropdownMenu","Root","modal","children","_jsx","Tooltip","componentId","content","Trigger","asChild","Button","icon","GearIcon","Content","align","css","Group","role","Label","FormattedMessage","CheckboxItem","checked","STEP","onClick","ItemIndicator","TIME","TIME_RELATIVE","Sub","SubTrigger","_css","paddingLeft","spacing","xs","sm","IconWrapper","CheckIcon","visibility","SubContent","map","metricKey","padding","LineSmoothSlider","min","max","onChange","value","useIsTabActive","isTabActive","setIsTabActive","useState","document","visibilityState","useEffect","addEventListener","x","NEW_NAME_FIELD","RenameFormComponent","Component","constructor","args","inputToAutoFocus","autoFocusInputRef","this","focus","select","autoFocus","prevProps","visible","props","resetFields","formRef","innerRef","current","componentDidUpdate","render","LegacyForm","ref","layout","Item","initialValue","rules","required","message","type","validator","Input","placeholder","RenameForm","RenameRunModalImpl","React","handleRenameRun","values","newRunName","updateRunRequestId","getUUID","updateRunApi","runUuid","then","_this$props$onSuccess","_this$props","onSuccess","call","isOpen","runName","GenericInputModal","title","okText","handleSubmit","onClose","async","_","length","trim","Error","mapDispatchToProps","RenameRunModalWithIntl","injectIntl","RenameRunModal","connect","undefined","DeleteRunModalImpl","super","bind","deletePromises","selectedRunIds","forEach","runId","push","deleteRunApi","Promise","all","catch","errorModalContent","openErrorModal","number","ConfirmModal","Utils","pluralize","helpText","confirmButtonText","RunsChartsFilterInput","chartsSearchFilter","updateChartsUIState","useUpdateRunsChartsUIConfiguration","inputValue","setInputValue","searching","setSearching","updateChartFilter","updateChartFilterDebounced","useDebouncedCallback","prefix","width","general","iconFontSize","lineHeight","Spinner","size","SearchIcon","allowClear","e","target","JsonPreview","json","wrapperStyle","overlayStyle","codeSnippetStyle","formattedJson","isJsonContent","useFormattedJson","style","position","maxHeight","overflow","_Fragment","CodeSnippet","language","overflowX","bottom","right","left","height","background","parsed","JSON","parse","isJson","isObject","Date","stringify","FormattedJsonDisplay","wrapLongLines","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","autoRefreshEnabled","enabled","dispatch","useDispatch","runUuidsSerialized","slice","NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE","join","split","listImagesApi","refreshTimeoutRef","useRef","autoRefreshEnabledRef","runUuidsIsActiveSerialized","hookUnmounted","fetchImagesFn","activeRunUuids","autoRefresh","filter","index","scheduleRefresh","logErrorAndNotifyUser","clearTimeout","window","setTimeout","EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL","queryFn","queryKey","loggedModelIds","modelIdChunks","chunk","chunkedIds","queryParams","URLSearchParams","append","loggedModelsDataRequest","getAjaxUrl","toString","useGetLoggedModelsQuery","modelIds","options","data","isLoading","isFetching","refetch","error","useQuery","results","flatMap","result","models","retry","isSubmitting","onRequestCloseHandler","handleSubmitWrapper","setState","finally","Modal","onOk","okButtonProps","confirmButtonProps","confirmLoading","onCancel","centered","className"],"sourceRoot":""}