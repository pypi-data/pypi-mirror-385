from __future__ import annotations

from collections import OrderedDict
from typing import Any

from clearskies import Model
from clearskies.columns import BelongsToId, BelongsToModel, Boolean, Datetime, Integer, Json, Select, String

from clearskies_gitlab.models import gitlab_group, gitlab_namespace


class GitlabProject(Model):
    """Base model for projects."""

    id_column_name = "id"

    id = String()
    group_id = BelongsToId(gitlab_group.GitlabGroup)
    group = BelongsToModel("group_id")
    user_id = String()
    namespace_id = BelongsToId(gitlab_namespace.GitlabNamespace)
    namespace = BelongsToModel("namespace_id")
    description = String()
    description_html = String()
    default_branch = String()
    visibility = String()
    ssh_url_to_repo = String()
    http_url_to_repo = String()
    web_url = String()
    readme_url = String()
    topics = Json()
    owner = Json()
    name = String()
    name_with_namespace = String()
    path = String()
    path_with_namespace = String()
    issues_enabled = Boolean()
    open_issues_count = Integer()
    merge_requests_enabled = Boolean()
    jobs_enabled = Boolean()
    wiki_enabled = Boolean()
    snippets_enabled = Boolean()
    can_create_merge_request_in = Boolean()
    resolve_outdated_diff_discussions = Boolean()
    container_registry_access_level = Select(allowed_values=["disabled", "private", "enabled"])
    container_security_and_compliance_access_level = Select(allowed_values=["disabled", "private", "enabled"])
    container_expiration_policy = Json()
    created_at = Datetime()
    updated_at = Datetime()
    last_activity_at = Datetime()
    creator_id = Integer()
    import_url = String()
    import_type = String()
    import_status = String()
    import_error = String()
    permissions = Json()
    archived = Boolean()
    avatar_url = String()
    license_url = String()
    license = Json()
    shared_runners_enabled = Boolean()
    group_runners_enabled = Boolean()
    forks_count = Integer()
    star_count = Integer()
    runners_token = String()
    ci_default_git_depth = Integer()
    ci_forward_deployment_enabled = Boolean()
    ci_forward_deployment_rollback_allowed = Boolean()
    ci_allow_fork_pipelines_to_run_in_parent_project = Boolean()
    ci_separated_caches = Boolean()
    ci_restrict_pipeline_cancellation_role = Select(allowed_values=["maintainer", "developer", "no_one"])
    ci_pipeline_variables_minimum_override_role = Select(
        allowed_values=["owner", "developer", "maintainer", "no_one_allowed"]
    )
    ci_push_repository_for_job_token_allowed = Boolean()
    public_jobs = Boolean()
    shared_with_groups = Json()
    repository_storage = String()
    only_allow_merge_if_pipeline_succeeds = Boolean()
    allow_merge_on_skipped_pipeline = Boolean()
    allow_pipeline_trigger_approve_deployment = Boolean()
    restrict_user_defined_variables = Boolean()
    only_allow_merge_if_all_discussions_are_resolved = Boolean()
    remove_source_branch_after_merge = Boolean()
    printing_merge_requests_link_enabled = Boolean()
    request_access_enabled = Boolean()
    only_allow_merge_if_pipeline_succeeds = Boolean()
    merge_method = Select(allowed_values=["merge", "rebase_merge", "ff"])
    squash_option = Select(allowed_values=["never", "always", "default_on", "default_off"])
    auto_devops_enabled = Boolean()
    auto_devops_deploy_strategy = Select(allowed_values=["continuous", "manual", "timed_incremental"])
    mirror = Boolean()
    mirror_user_id = Integer()
    mirror_trigger_builds = Boolean()
    only_mirror_protected_branches = Boolean()
    mirror_overwrites_diverged_branches = Boolean()
    external_authorization_classification_label = String()
    packages_enabled = Boolean()
    service_desk_enabled = Boolean()
    service_desk_address = String()
    autoclose_referenced_issues = Boolean()
    suggestion_commit_message = String()
    enforce_auth_checks_on_uploads = Boolean()
    merge_commit_template = String()
    squash_commit_template = String()
    issue_branch_template = String()
    marked_for_deletion_on = Datetime()
    compliance_frameworks = Json()
    statistics = Json()
    container_registry_image_prefix = String()
