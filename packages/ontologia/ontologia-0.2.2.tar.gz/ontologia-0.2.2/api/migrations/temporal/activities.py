"""Temporal activities for executing schema migration tasks.

Current implementation is a placeholder that prepares and applies migration
plans generated by the control plane. The heavy lifting (pausing sync,
executing SQL) will be implemented in follow-up iterations.
"""

from __future__ import annotations

import logging
from typing import Any

from temporalio import activity

logger = logging.getLogger(__name__)


@activity.defn(name="prepare_migration_plan")
async def prepare_migration_plan(task_payload: dict[str, Any]) -> dict[str, Any]:
    """Validate and enrich the migration plan before execution."""

    operations = list((task_payload.get("plan") or {}).get("operations", []))
    logger.info(
        "prepare_migration_plan task_rid=%s operations=%d",
        task_payload.get("rid"),
        len(operations),
    )
    return {
        "taskRid": task_payload.get("rid"),
        "objectType": task_payload.get("object_type_api_name"),
        "operations": operations,
    }


@activity.defn(name="apply_migration_plan")
async def apply_migration_plan(
    task_payload: dict[str, Any], plan: dict[str, Any]
) -> dict[str, Any]:
    """Placeholder activity that will execute the schema migration plan."""

    logger.info(
        "apply_migration_plan task_rid=%s operations=%d",
        task_payload.get("rid"),
        len(plan.get("operations", [])),
    )
    # Placeholder response; future iterations will perform actual schema evolution.
    return {
        "taskRid": task_payload.get("rid"),
        "status": "SKIPPED",
        "operationsApplied": [],
    }
