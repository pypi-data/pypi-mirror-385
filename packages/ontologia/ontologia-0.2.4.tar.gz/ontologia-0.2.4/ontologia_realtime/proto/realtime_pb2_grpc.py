# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

try:
    from . import realtime_pb2 as realtime__pb2
except ImportError:  # pragma: no cover - fallback for direct module execution
    import realtime_pb2 as realtime__pb2

GRPC_GENERATED_VERSION = "1.75.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in realtime_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RealTimeEntityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpsertEntity = channel.unary_unary(
            "/ontologia.realtime.RealTimeEntityService/UpsertEntity",
            request_serializer=realtime__pb2.UpsertEntityRequest.SerializeToString,
            response_deserializer=realtime__pb2.EntityAck.FromString,
            _registered_method=True,
        )
        self.RemoveEntity = channel.unary_unary(
            "/ontologia.realtime.RealTimeEntityService/RemoveEntity",
            request_serializer=realtime__pb2.RemoveEntityRequest.SerializeToString,
            response_deserializer=realtime__pb2.EntityAck.FromString,
            _registered_method=True,
        )
        self.StreamEntities = channel.unary_stream(
            "/ontologia.realtime.RealTimeEntityService/StreamEntities",
            request_serializer=realtime__pb2.StreamEntitiesRequest.SerializeToString,
            response_deserializer=realtime__pb2.EntityUpdate.FromString,
            _registered_method=True,
        )
        self.ListEntities = channel.unary_unary(
            "/ontologia.realtime.RealTimeEntityService/ListEntities",
            request_serializer=realtime__pb2.ListEntitiesRequest.SerializeToString,
            response_deserializer=realtime__pb2.ListEntitiesResponse.FromString,
            _registered_method=True,
        )


class RealTimeEntityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpsertEntity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveEntity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamEntities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListEntities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RealTimeEntityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UpsertEntity": grpc.unary_unary_rpc_method_handler(
            servicer.UpsertEntity,
            request_deserializer=realtime__pb2.UpsertEntityRequest.FromString,
            response_serializer=realtime__pb2.EntityAck.SerializeToString,
        ),
        "RemoveEntity": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveEntity,
            request_deserializer=realtime__pb2.RemoveEntityRequest.FromString,
            response_serializer=realtime__pb2.EntityAck.SerializeToString,
        ),
        "StreamEntities": grpc.unary_stream_rpc_method_handler(
            servicer.StreamEntities,
            request_deserializer=realtime__pb2.StreamEntitiesRequest.FromString,
            response_serializer=realtime__pb2.EntityUpdate.SerializeToString,
        ),
        "ListEntities": grpc.unary_unary_rpc_method_handler(
            servicer.ListEntities,
            request_deserializer=realtime__pb2.ListEntitiesRequest.FromString,
            response_serializer=realtime__pb2.ListEntitiesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ontologia.realtime.RealTimeEntityService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "ontologia.realtime.RealTimeEntityService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class RealTimeEntityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpsertEntity(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ontologia.realtime.RealTimeEntityService/UpsertEntity",
            realtime__pb2.UpsertEntityRequest.SerializeToString,
            realtime__pb2.EntityAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RemoveEntity(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ontologia.realtime.RealTimeEntityService/RemoveEntity",
            realtime__pb2.RemoveEntityRequest.SerializeToString,
            realtime__pb2.EntityAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StreamEntities(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/ontologia.realtime.RealTimeEntityService/StreamEntities",
            realtime__pb2.StreamEntitiesRequest.SerializeToString,
            realtime__pb2.EntityUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListEntities(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ontologia.realtime.RealTimeEntityService/ListEntities",
            realtime__pb2.ListEntitiesRequest.SerializeToString,
            realtime__pb2.ListEntitiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
