[build-system]
requires = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[project]
name = "faststream"
description = "FastStream: the simplest way to work with a messaging queues"
readme = "README.md"
authors = [
    { name = "AG2AI", email = "support@ag2.ai" },
    { name = "Nikita Pastukhov", email = "nikita@pastukhov-dev.com" },
]
license = "Apache-2.0"
license-files = ["LICENSE"]

keywords = [
    "rabbitmq",
    "kafka",
    "framework",
    "nats",
    "redis",
    "message brokers",
]

requires-python = ">=3.10"

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Networking",
    "Topic :: System :: Distributed Computing",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Framework :: Pydantic :: 2",
]

version = "0.6.2"

dependencies = [
    "fast-depends[pydantic]>=3.0.0",
    "typing-extensions>=4.12.0",
    "anyio>=4.0,<5",
]

[project.optional-dependencies]
rabbit = ["aio-pika>=9,<10"]

kafka = ["aiokafka>=0.9,<0.13"]

confluent = [
    "confluent-kafka>=2,!=2.8.1,<3; python_version < '3.13'",
    "confluent-kafka>=2.6,!=2.8.1,<3; python_version >= '3.13'",
]

nats = ["nats-py>=2.7.0,<=3.0.0"]

redis = ["redis>=5.0.0,<7.0.0"]

otel = ["opentelemetry-sdk>=1.24.0,<2.0.0"]

cli = [
    "typer>=0.9,!=0.12,<=0.19.2",
    "watchfiles>=0.15.0,<1.2.0"
]

prometheus = ["prometheus-client>=0.20.0,<0.30.0"]

[dependency-groups]
optionals = ["faststream[rabbit,kafka,confluent,nats,redis,otel,cli,prometheus]"]

docs = [
    "mkdocs-material==9.6.22",
    "mkdocs-static-i18n==1.3.0",
    "mdx-include==1.4.2",
    "mkdocstrings[python]==0.30.1",
    "mkdocs-literate-nav==0.6.2",
    "mkdocs-git-revision-date-localized-plugin==1.4.7",
    "mike==2.1.3",                                      # versioning
    "mkdocs-minify-plugin==0.8.0",
    "mkdocs-macros-plugin==1.4.0",                      # includes with variables
    "mkdocs-glightbox==0.5.1",                          # img zoom
    "pillow",                                           # required for mkdocs-glightbox
    "cairosvg",                                         # required for mkdocs-glightbox
    "httpx==0.28.1",                                    # using in CI
]

lint = [
    "ruff==0.14.1",
    "bandit==1.8.6",
    "semgrep==1.140.0",
    "codespell==2.4.1",
    "zizmor==1.15.2",
    "mypy==1.18.2",
    # mypy extensions
    "types-Deprecated",
    "types-PyYAML",
    "types-setuptools",
    "types-ujson",
    "types-redis",
    "types-Pygments",
    "types-docutils",
    "types-aiofiles",
]

test-core = [
    "dirty-equals==0.10.0",
    "httpx==0.28.1",
    "pytest==8.4.2",
    "pytest-asyncio==1.2.0",
    "pytest-rerunfailures>=15.1",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.8.0",
    "pytest-cov>=6.2.1",
    "covdefaults>=2.3.0",
]

testing = [
    {include-group = "test-core"},
    "fastapi==0.119.1",
    "pydantic-settings>=2.0.0,<3.0.0",
    "PyYAML==6.0.3",
    "email-validator==2.3.0",
    "msgspec",
    "uvicorn>=0.34.3; python_version >= '3.9'",
    "uvicorn==0.33.0; python_version < '3.9'",
    "uvloop>=0.15.1; sys_platform != 'win32' and (sys_platform != 'cygwin' and platform_python_implementation != 'PyPy')",
    "psutil==7.1.1",
    "prometheus-client>=0.20.0,<0.30.0",
    "opentelemetry-sdk>=1.24.0,<2.0.0",
]

dev = [
    {include-group = "optionals"},
    {include-group = "lint"},
    {include-group = "testing"},
    {include-group = "docs"},
    "pre-commit==4.3.0",
    "detect-secrets==1.5.0",
]

[project.urls]
Homepage = "https://faststream.ag2.ai/latest/"
Documentation = "https://faststream.ag2.ai/latest/getting-started/"
Tracker = "https://github.com/ag2ai/FastStream/issues"
Source = "https://github.com/ag2ai/FastStream"
Discord = "https://discord.gg/qFm6aSqq59"

[project.scripts]
faststream = "faststream.__main__:cli"

[tool.uv.build-backend]
module-root = "."
module-name = "faststream"

[tool.mypy]
files = ["faststream", "tests/mypy"]
strict = true
python_version = "3.10"
strict_bytes = true
local_partial_types = true
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.pytest.ini_options]
minversion = "7.0"
timeout = 30
addopts = "--strict-markers --strict-config -q -m 'not slow'"
testpaths = ["tests"]
markers = [
    "rabbit",
    "kafka",
    "confluent",
    "nats",
    "redis",
    "slow",
    "connected",
    "all",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
parallel = true
branch = true
concurrency = ["multiprocessing", "thread"]
source = ["docs/docs_src", "examples", "faststream", "tests"]
plugins = ["covdefaults"]
omit = ["**/__init__.py", "tests/mypy/*"]

[tool.coverage.paths]
source = [
    ".",
    "/home/runner/work/faststream/faststream/",
    "/Users/runner/work/faststream/faststream/",
    "D:\\a\\faststream\\faststream\\",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
    '*/annotations.py',
    'docs/docs_src/getting_started/serialization/avro.py',
    'docs/docs_src/getting_started/serialization/msgpack_ex.py',
    'docs/docs_src/getting_started/serialization/protobuf.py',
    'docs/docs_src/integrations/http_frameworks_integrations/aiohttp.py',
    'docs/docs_src/integrations/http_frameworks_integrations/blacksheep.py',
    'docs/docs_src/integrations/http_frameworks_integrations/falcon.py',
    'docs/docs_src/integrations/http_frameworks_integrations/litestar.py',
    'docs/docs_src/integrations/http_frameworks_integrations/quart.py',
    'docs/docs_src/integrations/http_frameworks_integrations/sanic.py',
    'docs/docs_src/integrations/http_frameworks_integrations/tornado.py',
    'examples/howto/structlogs.py',
    'examples/serialization/avro/avro.py',
    'examples/serialization/msgpack/pack.py',
    'examples/serialization/protobuf/protobuf.py',
]
fail_under = 20

[tool.bandit]
skips = ["B101"]
