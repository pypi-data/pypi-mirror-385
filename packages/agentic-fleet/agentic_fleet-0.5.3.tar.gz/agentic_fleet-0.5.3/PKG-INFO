Metadata-Version: 2.4
Name: agentic-fleet
Version: 0.5.3
Summary: A multi-agent orchestration system built with Microsoft Agent Framework
Project-URL: Homepage, https://github.com/Qredence/agentic-fleet
Project-URL: Documentation, https://github.com/Qredence/agentic-fleet/docs
Project-URL: Repository, https://github.com/Qredence/agentic-fleet
Project-URL: Issues, https://github.com/Qredence/agentic-fleet/issues
Author-email: Qredence <contact@qredence.ai>
License: MIT License
        
        Copyright (c) 2025 Qredence
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Keywords: agents,ai,microsoft-agent-framework,multi-agent,orchestration
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: <4,>=3.12
Requires-Dist: agent-framework
Requires-Dist: agent-framework-a2a
Requires-Dist: agent-framework-azure-ai
Requires-Dist: agent-framework-core
Requires-Dist: agent-framework-devui
Requires-Dist: agent-framework-mem0
Requires-Dist: agent-framework-redis
Requires-Dist: azure-ai-agents>=1.2.0b5
Requires-Dist: azure-ai-evaluation>=1.12.0
Requires-Dist: azure-identity>=1.25.1
Requires-Dist: ipykernel>=7.0.1
Requires-Dist: mem0ai==1.0.0
Requires-Dist: openai==2.5.0
Requires-Dist: prompt-toolkit>=3.0.47
Requires-Dist: pydantic>=2.12.0
Requires-Dist: python-dotenv>=1.1.1
Requires-Dist: pyyaml>=6.0.3
Requires-Dist: requests>=2.32.5
Requires-Dist: rich>=13.7.0
Requires-Dist: tiktoken>=0.12.0
Provides-Extra: azure
Requires-Dist: azure-ai-agents>=1.2.0b5; extra == 'azure'
Description-Content-Type: text/markdown

![AgenticFleet Architecture](docs/afleet-preview.png)

# AgenticFleet

<style>
  .button-row {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    margin-bottom: 16px;
  }

  .blend-pill {
    --pill-sheen: rgba(0, 0, 0, 0.9);
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 10px;
    padding: 11px 28px;
    border-radius: 9999px;
    text-decoration: none;
    text-color: #000000;
    font-size: 15px;
    font-weight: 600;
    letter-spacing: 0.02em;
    text-transform: uppercase;
    overflow: hidden;
    isolation: isolate;
    color: #ffffff;
    mix-blend-mode: difference;
    transition: transform 0.25s ease, box-shadow 0.25s ease;
    box-shadow: 0 14px 32px rgba(0, 0, 0, 0.18);
    z-index: 1;
  }

  .blend-pill::before {
    content: "";
    position: absolute;
    inset: -2px;
    border-radius: inherit;
    background: var(--pill-sheen);
    mix-blend-mode: difference;
    border: 1px solid rgba(255, 255, 255, 0.22);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.06);
    transition: transform 0.35s ease, opacity 0.35s ease;
  }

  .blend-pill[data-variant="primary"] {
    --pill-sheen: rgba(255, 255, 255, 0.95);
  }

  .blend-pill[data-variant="discord"] {
    --pill-sheen: rgba(255, 255, 255, 0.88);
  }

  .blend-pill[data-variant="light"] {
    --pill-sheen: rgba(255, 255, 255, 0.78);
  }

  .blend-pill:hover {
    transform: translateY(-2px);
    box-shadow: 0 22px 44px rgba(0, 0, 0, 0.24);
  }

  .blend-pill:hover::before {
    transform: scale(1.06);
  }

  .blend-pill__value {
    position: relative;
    z-index: 1;
    color: #00000;
    mix-blend-mode: none;
    font-size: 15px;
    font-weight: 700;
  }
</style>
<div class="button-row">
  <a class="blend-pill" data-variant="primary" href="https://agenticfleet.com" target="_blank" rel="noopener noreferrer">
    <span class="blend-pill__label">Join Cloud beta</span>
  </a>
  <a class="blend-pill" data-variant="discord" href="https://discord.gg/agenticfleet" target="_blank" rel="noopener noreferrer">
    <span class="blend-pill__label">Discord</span>
  </a>
  <a class="blend-pill" data-variant="light" href="https://pepy.tech/projects/agentic-fleet" target="_blank" rel="noopener noreferrer" aria-label="PyPI downloads for agentic-fleet">
    PyPI downloads
    <span class="blend-pill__value" id="pypi-downloads">‚Äî</span>
  </a>
</div>

<script>
(async function(){
  function compactFR(n){
    const fmt=(x,d)=>x.toFixed(d).replace('.', ',');
    if(n>=1_000_000){const d=(n%1_000_000)>=100_000?1:0;return fmt(n/1_000_000,d)+'m';}
    if(n>=1_000){const d=(n%1_000)>=100?1:0;return fmt(n/1_000,d)+'k';}
    return String(n);
  }
  const el=document.getElementById('pypi-downloads');
  async function tryProxy(){
    try{
      const res = await fetch('/api/pepy?project=agentic-fleet',{cache:'no-store'});
      if(!res.ok) throw new Error('proxy not ok');
      const { total } = await res.json();
      if(typeof total==='number'){ el.textContent = compactFR(total); return true; }
    }catch(e){}
    return false;
  }
  async function tryPepyDirect(){
    try{
      const res = await fetch('https://api.pepy.tech/api/v2/projects/agentic-fleet',{
        headers:{'Accept':'application/json'}, cache:'no-store', mode:'cors'
      });
      if(!res.ok) throw new Error('pepy v2 not ok');
      const data = await res.json();
      const total = data.total_downloads || data.total || (data.downloads && (data.downloads.all_time||data.downloads.total));
      if(typeof total==='number'){ el.textContent = compactFR(total); return true; }
    }catch(e){}
    return false;
  }
  async function tryBadgeParse(){
    try{
      const url='https://static.pepy.tech/personalized-badge/agentic-fleet?period=total&units=INTERNATIONAL_SYSTEM&left_color=BLACK&right_color=GREEN&left_text=downloads';
      const res=await fetch(url,{cache:'no-store',mode:'cors'});
      if(!res.ok) throw new Error('badge not ok');
      const svg=await res.text();
      const matches=[...svg.matchAll(/>([\d.,]+)\s*([kKmM]?)/g)];
      if(!matches.length) throw new Error('no number');
      const [,numStr,suffix]=matches[matches.length-1];
      let n=parseFloat(numStr.replace(',','.'));
      if(/k/i.test(suffix)) n*=1_000; else if(/m/i.test(suffix)) n*=1_000_000;
      el.textContent=compactFR(Math.round(n));
      return true;
    }catch(e){}
    return false;
  }
  if(!(await tryProxy()) && !(await tryPepyDirect()) && !(await tryBadgeParse())){
    el.textContent='N/A';
  }
})();
</script>

[![Python 3.12+](https://img.shields.io/badge/python-3.12+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](./LICENSE)
[![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)

> **‚ö†Ô∏è Active Development Notice**  
> This project is under active development. Features, APIs, and workflows may change. We recommend pinning to specific versions for production use.

---

## AgenticFleet Overview

- üñ•Ô∏è **Interactive CLI** ‚Äì Rich terminal interface for direct agent interaction
- üåê **Web Frontend** ‚Äì Modern React UI wired to agent-as-workflow pattern (default)
- üìì **Jupyter Notebooks** ‚Äì Exploration and prototyping environments in `notebooks/`

---

## üöÄ Quick Start

### Prerequisites

- **Python 3.12+**
- **[uv](https://docs.astral.sh/uv/)** package manager
- **OpenAI API key** (set as `OPENAI_API_KEY`)

### Installation

```bash
# 1. Clone the repository
git clone https://github.com/Qredence/agentic-fleet.git
cd agentic-fleet

# 2. Configure environment
cp .env.example .env
# Edit .env to add your OPENAI_API_KEY

# 3. Install dependencies
make install

# 4. Launch the fleet (runs frontend + backend)
make dev
# Alternative (backend only): uv run fleet
```

## ‚ú® Key Features

- **üéØ Magentic-Native Architecture** ‚Äì Built on Microsoft Agent Framework's `MagenticBuilder` with intelligent planning and progress evaluation
- **ü§ñ Specialized Agent Fleet** ‚Äì Pre-configured researcher, coder, and analyst agents with domain-specific tools
- **üåê Modern Web Frontend** ‚Äì React-based UI with agent-as-workflow pattern for seamless agent interaction
- **üìì Interactive Notebooks** ‚Äì Jupyter notebooks for experimentation, prototyping, and learning
- **üíæ State Persistence** ‚Äì Checkpoint system saves 50-80% on retry costs by avoiding redundant LLM calls
- **üõ°Ô∏è Human-in-the-Loop (HITL)** ‚Äì Configurable approval gates for code execution, file operations, and sensitive actions
- **üìä Full Observability** ‚Äì Event-driven callbacks for streaming responses, plan tracking, and tool monitoring
- **üß† Long-term Memory** ‚Äì Optional Mem0 integration with Azure AI Search for persistent context
- **üîß Declarative Configuration** ‚Äì YAML-based agent configuration for non-engineers to tune prompts and tools
- **üé® Multiple Interfaces** ‚Äì CLI, web frontend, and notebooks for different workflows

---

## üöÄ Quick Start

### Prerequisites

- **Python 3.12+**
- **[uv](https://docs.astral.sh/uv/)** package manager
- **OpenAI API key** (set as `OPENAI_API_KEY`)

### Installation

```bash
# 1. Clone the repository
git clone https://github.com/Qredence/agentic-fleet.git
cd agentic-fleet

# 2. Configure environment
cp .env.example .env
# Edit .env to add your OPENAI_API_KEY

# 3. Install dependencies
make install

# 4. Launch the fleet (runs frontend + backend)
make dev
# Alternative (backend only): uv run fleet
```

### First Run

**Web Frontend (Default):**  
The `make dev` command launches both frontend and backend. Access the web UI at `http://localhost:3000` to interact with agents through a modern React interface using the agent-as-workflow pattern.

**CLI Interface:**  
For command-line interaction, run `uv run fleet`:

```text
AgenticFleet v0.5.3
________________________________________________________________________
Task                ‚û§ Analyze Python code quality in my repository
Plan ¬∑ Iteration 1  Facts: User needs code analysis | Plan: Use coder agent...
Progress            Status: In progress | Next speaker: coder
Agent ¬∑ coder       Analyzing repository structure...
Result              Found 12 files, 3 quality issues...
```

**Built-in CLI commands:**

- History navigation: `‚Üë` / `‚Üì` or `Ctrl+R`
- Checkpoints: `checkpoints`, `resume <id>`
- Exit: `quit` or `Ctrl+D`

**Jupyter Notebooks:**  
Explore example workflows in `notebooks/` including:

- `magentic.ipynb` ‚Äì Magentic One pattern examples
- `agent_as_workflow.ipynb` ‚Äì Agent-as-workflow demonstrations
- `mem0_basic.ipynb` ‚Äì Memory integration tutorial
- `azure_responses_client.ipynb` ‚Äì Azure AI responses client usage

---

## üèóÔ∏è Architecture

AgenticFleet implements the **Magentic One** workflow pattern with a manager-executor architecture:

### Workflow Cycle

1. **PLAN** ‚Äì Manager analyzes task, gathers facts, creates structured action plan
2. **EVALUATE** ‚Äì Progress ledger checks: request satisfied? in a loop? who acts next?
3. **ACT** ‚Äì Selected specialist executes with domain-specific tools, returns findings
4. **OBSERVE** ‚Äì Manager reviews response, updates context, decides next action
5. **REPEAT** ‚Äì Continues until completion or limits reached (configurable in `workflow.yaml`)

### Agent Specialists

| Agent            | Model Default | Tools                                                 | Purpose                           |
| ---------------- | ------------- | ----------------------------------------------------- | --------------------------------- |
| **Orchestrator** | `gpt-5`       | (none)                                                | Task planning & result synthesis  |
| **Researcher**   | `gpt-5`       | `web_search_tool`                                     | Information gathering & citations |
| **Coder**        | `gpt-5-codex` | `code_interpreter_tool` (Microsoft hosted sandbox)    | Code generation & analysis        |
| **Analyst**      | `gpt-5`       | `data_analysis_tool`, `visualization_suggestion_tool` | Data exploration & insights       |

All agents use **OpenAI Response API** format via `OpenAIResponsesClient` and return structured Pydantic models for reliable downstream parsing.

See **[Architecture Documentation](docs/architecture/magentic-fleet.md)** for detailed design patterns.

---

## ‚öôÔ∏è Configuration

AgenticFleet uses a **declarative YAML-first** approach:

### Workflow Configuration (`config/workflow.yaml`)

```yaml
fleet:
  manager:
    model: "gpt-5"
    instructions: |
      You coordinate researcher, coder, and analyst agents.
      Delegate based on task requirements...

  orchestrator:
    max_round_count: 30 # Maximum workflow iterations
    max_stall_count: 3 # Triggers replan
    max_reset_count: 2 # Complete restart limit

  callbacks:
    streaming_enabled: true
    log_progress_ledger: true
```

### Per-Agent Configuration (`agents/<role>/config.yaml`)

```yaml
name: researcher
model: gpt-5
temperature: 0.3
max_tokens: 4000

system_prompt: |
  You are a research specialist. Use web_search_tool to find information...

tools:
  - name: web_search_tool
    enabled: true
```

### Environment Variables (`.env`)

```bash
# Required
OPENAI_API_KEY=sk-...

# Optional: Memory (Mem0)
MEM0_HISTORY_DB_PATH=./var/mem0
OPENAI_EMBEDDING_MODEL=text-embedding-3-small

# Optional: Observability
ENABLE_OTEL=true
OTLP_ENDPOINT=http://localhost:4317
```

---

## üõ†Ô∏è Development

### Setup Development Environment

```bash
# Install with dev dependencies
make install

# Run configuration validation
make test-config

# Run all quality checks (lint, format, type-check)
make check

# Run test suite
make test
```

### Development Commands

All commands use `uv run` prefix (managed by Makefile):

| Command            | Purpose                                 |
| ------------------ | --------------------------------------- |
| `make dev`         | Launch frontend + backend (full stack)  |
| `make test`        | Run full test suite                     |
| `make test-config` | Validate YAML configs & agent factories |
| `make lint`        | Check code with Ruff                    |
| `make format`      | Auto-format with Black + Ruff           |
| `make type-check`  | Run mypy strict type checking           |
| `make check`       | Chain lint + format + type checks       |

### Testing Patterns

- **Configuration Tests**: `tests/test_config.py` validates env vars, YAML structure, tool imports
- **Fleet Tests**: `tests/test_magentic_fleet.py` covers 14 orchestration scenarios
- **Memory Tests**: `tests/test_mem0_context_provider.py` validates Mem0 integration
- **Mock LLM Calls**: Always patch `OpenAIResponsesClient` to avoid API costs in tests

### Code Quality Standards

- **Python 3.12+** with strict typing (`Type | None` instead of `Optional[Type]`)
- **100-character line limit** (Black formatter)
- **Ruff linting** with `pyupgrade` and `isort` rules
- **MyPy strict checks** (except for test files)
- **Pydantic models** for all tool return types

See **[Contributing Guide](CONTRIBUTING.md)** for detailed conventions.

---

## üìñ Documentation

Comprehensive documentation organized by audience:

### For Users

- **[Getting Started](docs/getting-started/)** ‚Äì Installation, configuration, first steps
- **[User Guides](docs/guides/)** ‚Äì Task-oriented tutorials
- **[Agent Catalog](docs/AGENTS.md)** ‚Äì Detailed agent capabilities & tools
- **[Troubleshooting](docs/troubleshooting/)** ‚Äì FAQ & common issues

### For Developers

- **[Architecture](docs/architecture/)** ‚Äì System design & patterns
- **[Features](docs/features/)** ‚Äì Implementation deep-dives
- **[Contributing](CONTRIBUTING.md)** ‚Äì Development workflow & standards
- **[API Reference](docs/api/)** ‚Äì REST API & Python SDK

**[üìö Documentation Index](docs/README.md)** ‚Äì Complete navigation guide

---

## üÜï Release Notes

### v0.5.3 (2024-06-15)

- Added analyst agent with data analysis tools
- Improved checkpointing to reduce redundant LLM calls
- Enhanced web frontend with task templates
- Observability improvements: detailed progress ledger logging
- Bug fixes and performance optimizations

---

## üîß Adding Custom Agents

Extend the fleet with domain-specific agents:

### 1. Scaffold Agent Structure

```bash
mkdir -p src/agenticfleet/agents/planner/{tools,}
touch src/agenticfleet/agents/planner/{__init__.py,agent.py,config.yaml}
```

### 2. Create Agent Factory

```python
# src/agenticfleet/agents/planner/agent.py
from agenticfleet.config.settings import settings
from agent_framework import ChatAgent
from agent_framework.azure_ai import OpenAIResponsesClient

def create_planner_agent() -> ChatAgent:
    config = settings.load_agent_config("planner")

    return ChatAgent(
        name=config["name"],
        model=config["model"],
        system_prompt=config["system_prompt"],
        client=OpenAIResponsesClient(model_id=config["model"]),
        tools=[],  # Add tools here
    )
```

#

## ü§ù Contributing

We welcome contributions! Please follow these steps:

### Before You Start

1. Read **[Contributing Guidelines](CONTRIBUTING.md)**
2. Review **[Code of Conduct](CODE_OF_CONDUCT.md)**
3. Check existing **[Issues](https://github.com/Qredence/agentic-fleet/issues)**

### Development Process

```bash
# 1. Fork & clone
git clone https://github.com/YOUR_USERNAME/agentic-fleet.git
cd agentic-fleet

# 2. Create feature branch
git checkout -b feat/your-feature

# 3. Make changes
# Edit code, update docs, add tests

# 4. Run quality checks
make check          # Lint, format, type-check
make test-config    # Validate configurations
make test           # Full test suite

# 5. Commit with conventional format
git commit -m "feat(agents): add planner agent with breakdown tool"

# 6. Push & open PR
git push origin feat/your-feature
```

### Pull Request Checklist

- ‚úÖ Tests pass (`make test`)
- ‚úÖ Code formatted (`make check`)
- ‚úÖ Documentation updated
- ‚úÖ YAML configs validated (`make test-config`)
- ‚úÖ Commit messages follow `feat:`, `fix:`, `docs:` convention

---

## üîê Security

### Reporting Vulnerabilities

**Do NOT open public issues for security vulnerabilities.**

Please follow the process outlined in **[SECURITY.md](SECURITY.md)**.

### Security Best Practices

- Store API keys in `.env` (never commit)
- Use HITL approval for code execution
- Enable audit logging for sensitive operations
- Review tool permissions in agent configs
- Keep dependencies updated (`uv sync`)

---

## üìÑ License

AgenticFleet is released under the **[MIT License](LICENSE)**.

```
Copyright (c) 2025 Qredence

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction...
```

See **[LICENSE](LICENSE)** for full terms.

---

## üôè Acknowledgments

Built with:

- **[Microsoft Agent Framework](https://github.com/microsoft/agent-framework)** ‚Äì Core orchestration
- **[Mem0](https://mem0.ai/)** ‚Äì Long-term memory layer
- **[uv](https://docs.astral.sh/uv/)** ‚Äì Fast Python package manager
- **[Rich](https://rich.readthedocs.io/)** ‚Äì Beautiful terminal UI
- **[Pydantic](https://docs.pydantic.dev/)** ‚Äì Data validation

Special thanks to the Microsoft Agent Framework team for the Magentic One pattern.

---

## üìû Support & Community

- **Documentation**: [docs/](docs/)
- **Issues**: [GitHub Issues](https://github.com/Qredence/agentic-fleet/issues)
- **Discussions**: [GitHub Discussions](https://github.com/Qredence/agentic-fleet/discussions)
- **Website**: [qredence.ai](https://qredence.ai)

---

<div align="center">

**[‚¨Ü Back to Top](#agenticfleet)**

Made with ‚ù§Ô∏è by [Qredence](https://github.com/Qredence)

</div>
