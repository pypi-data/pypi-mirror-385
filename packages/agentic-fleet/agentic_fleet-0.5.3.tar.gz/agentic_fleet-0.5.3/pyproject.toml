[project]
name = "agentic-fleet"
version = "0.5.3"
description = "A multi-agent orchestration system built with Microsoft Agent Framework"
authors = [{ name = "Qredence", email = "contact@qredence.ai" }]
readme = "README.md"
license = { file = "LICENSE" }
keywords = [
    "agents",
    "ai",
    "microsoft-agent-framework",
    "multi-agent",
    "orchestration",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "azure-ai-agents>=1.2.0b5",
    "azure-identity>=1.25.1",
    "python-dotenv>=1.1.1",
    "pyyaml>=6.0.3",
    "requests>=2.32.5",
    "pydantic>=2.12.0",
    "tiktoken>=0.12.0",
    "agent-framework",
    "agent-framework-core",
    "agent-framework-a2a",
    "agent-framework-azure-ai",
    "agent-framework-mem0",
    "agent-framework-redis",
    "agent-framework-devui",
    "mem0ai==1.0.0",
    "rich>=13.7.0",
    "prompt-toolkit>=3.0.47",
    "ipykernel>=7.0.1",
    "openai==2.5.0",
    "azure-ai-evaluation>=1.12.0",
]
requires-python = ">=3.12,<4"

[project.optional-dependencies]
azure = ["azure-ai-agents>=1.2.0b5"]

[project.scripts]
agentic-fleet = "agenticfleet.cli.repl:main"
fleet = "agenticfleet.cli.repl:main"
dynamic-fleet = "agenticfleet.workflows.dynamic.cli:main"

[project.urls]
Homepage = "https://github.com/Qredence/agentic-fleet"
Documentation = "https://github.com/Qredence/agentic-fleet/docs"
Repository = "https://github.com/Qredence/agentic-fleet"
Issues = "https://github.com/Qredence/agentic-fleet/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/agenticfleet"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/LICENSE", "/README.md"]

[tool.uv.sources]

# Development dependencies (uv's preferred format)
[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=6.0.0",
    "black>=25.9.0",
    "ruff>=0.14.0",
    "mypy>=1.18.2",
    "debugpy>=1.8.17",
    "pre-commit>=3.5.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]

[tool.black]
target-version = ['py312']
line-length = 100
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | node_modules
  | dist
  | build
)/
'''

[tool.ruff]
src = ["src"]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "W",  # pycodestyle warnings
    "I",  # isort (import sorting)
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
mypy_path = "src"
strict = false
warn_unused_configs = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
show_error_codes = true
pretty = true
ignore_missing_imports = true
exclude = [
    "tests/.*", # tests can be looser
]
