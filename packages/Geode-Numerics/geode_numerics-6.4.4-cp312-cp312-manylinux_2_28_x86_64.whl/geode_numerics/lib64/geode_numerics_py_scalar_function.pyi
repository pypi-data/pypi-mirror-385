"""
Geode-Numerics Python binding for scalar_function
"""
from __future__ import annotations
import opengeode.lib64.opengeode_py_geometry
import opengeode.lib64.opengeode_py_mesh
import pybind11_stubgen.typing_ext
import typing
__all__: list[str] = ['ComputationGrid2D', 'ComputationGrid3D', 'DataConstraintsManager2D', 'DataConstraintsManager3D', 'DataPointsManager2D', 'DataPointsManager3D', 'FDMCurvatureMinimization2D', 'FDMCurvatureMinimization3D', 'NumericsScalarFunctionLibrary']
class ComputationGrid2D(opengeode.lib64.opengeode_py_mesh.LightRegularGrid2D):
    def __init__(self, arg0: opengeode.lib64.opengeode_py_geometry.Point2D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)], arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]) -> None:
        ...
class ComputationGrid3D(opengeode.lib64.opengeode_py_mesh.LightRegularGrid3D):
    def __init__(self, arg0: opengeode.lib64.opengeode_py_geometry.Point3D, arg1: typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(3)], arg2: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(3)]) -> None:
        ...
class DataConstraintsManager2D:
    def data_point_position(self, arg0: int) -> opengeode.lib64.opengeode_py_geometry.Point2D:
        ...
    def data_point_value(self, arg0: int) -> float:
        ...
    def data_point_weight(self, arg0: int) -> float:
        ...
    def data_points_mean_value(self) -> float:
        ...
    def nb_data_points(self) -> int:
        ...
class DataConstraintsManager3D:
    def data_point_position(self, arg0: int) -> opengeode.lib64.opengeode_py_geometry.Point3D:
        ...
    def data_point_value(self, arg0: int) -> float:
        ...
    def data_point_weight(self, arg0: int) -> float:
        ...
    def data_points_mean_value(self) -> float:
        ...
    def nb_data_points(self) -> int:
        ...
class DataPointsManager2D(DataConstraintsManager2D):
    def __init__(self) -> None:
        ...
    def add_data_point(self, arg0: opengeode.lib64.opengeode_py_geometry.Point2D, arg1: float, arg2: float) -> int:
        ...
    def change_data_point_value(self, arg0: int, arg1: float) -> None:
        ...
    def change_data_point_weight(self, arg0: int, arg1: float) -> None:
        ...
    def data_point_position(self, arg0: int) -> opengeode.lib64.opengeode_py_geometry.Point2D:
        ...
    def data_point_value(self, arg0: int) -> float:
        ...
    def data_point_weight(self, arg0: int) -> float:
        ...
    def data_points(self) -> opengeode.lib64.opengeode_py_mesh.PointSet2D:
        ...
    def data_points_mean_value(self) -> float:
        ...
    def load_data_points(self, arg0: str) -> None:
        ...
    def nb_data_points(self) -> int:
        ...
    def remove_data_point(self, arg0: int) -> None:
        ...
class DataPointsManager3D(DataConstraintsManager3D):
    def __init__(self) -> None:
        ...
    def add_data_point(self, arg0: opengeode.lib64.opengeode_py_geometry.Point3D, arg1: float, arg2: float) -> int:
        ...
    def change_data_point_value(self, arg0: int, arg1: float) -> None:
        ...
    def change_data_point_weight(self, arg0: int, arg1: float) -> None:
        ...
    def data_point_position(self, arg0: int) -> opengeode.lib64.opengeode_py_geometry.Point3D:
        ...
    def data_point_value(self, arg0: int) -> float:
        ...
    def data_point_weight(self, arg0: int) -> float:
        ...
    def data_points(self) -> opengeode.lib64.opengeode_py_mesh.PointSet3D:
        ...
    def data_points_mean_value(self) -> float:
        ...
    def load_data_points(self, arg0: str) -> None:
        ...
    def nb_data_points(self) -> int:
        ...
    def remove_data_point(self, arg0: int) -> None:
        ...
class FDMCurvatureMinimization2D:
    def __init__(self, arg0: ComputationGrid2D, arg1: DataConstraintsManager2D) -> None:
        ...
    def compute_scalar_function(self, arg0: str) -> None:
        ...
    def use_scalar_function_preconditioning(self, arg0: str) -> None:
        ...
class FDMCurvatureMinimization3D:
    def __init__(self, arg0: ComputationGrid3D, arg1: DataConstraintsManager3D) -> None:
        ...
    def compute_scalar_function(self, arg0: str) -> None:
        ...
    def use_scalar_function_preconditioning(self, arg0: str) -> None:
        ...
class NumericsScalarFunctionLibrary:
    @staticmethod
    def initialize() -> None:
        ...
