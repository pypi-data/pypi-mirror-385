[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcplaywright"
version = "0.2.1"
description = "Python Playwright MCP Server with FastMCP 2.0 - Advanced browser automation with video recording, request monitoring, and UI customization"
authors = [
    {name = "Ryan Malloy", email = "ryan@supported.systems"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.11"
keywords = ["mcp", "playwright", "browser", "automation", "fastmcp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    # Core MCP and browser automation
    "fastmcp>=2.12.2",
    "playwright>=1.55.0",
    "pydantic>=2.11.7",

    # Optional features (moved to optional-dependencies)
    "requests>=2.31.0",    # Chrome extension downloads
    "redis>=6.4.0",        # Pagination storage backend
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "pytest-html>=4.1.0", 
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "watchfiles>=0.21.0",
    "uvicorn>=0.24.0",
    "httpx>=0.25.0",
    "hatchling>=1.18.0",
]

performance = [
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "py-spy>=0.3.14",
]

cli = [
    # Command-line interface dependencies
    "click>=8.1.0",
    "rich>=13.7.0",
]

system-control = [
    # System automation capabilities
    "pyautogui>=0.9.54",
]

image-processing = [
    # Image manipulation and analysis
    "pillow>=10.4.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/mcplaywright/mcplaywright"
Documentation = "https://mcplaywright.github.io/docs"
Repository = "https://github.com/mcplaywright/mcplaywright"
"Bug Tracker" = "https://github.com/mcplaywright/mcplaywright/issues"

[project.scripts]
mcplaywright = "mcplaywright.server:main"
mcplaywright-server = "mcplaywright.server:main"

[project.entry-points."fastmcp.servers"]
mcplaywright = "mcplaywright.server:app"

# Hatch configuration for src-layout
[tool.hatch.build.targets.wheel]
packages = ["src/mcplaywright"]

# Testing configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-v", 
    "--tb=short",
    "--html=reports/test_report.html", 
    "--self-contained-html",
    "--cov=src", 
    "--cov-report=html:reports/coverage_html",
    "--cov-report=term-missing",
    "--capture=no", 
    "--log-cli-level=INFO",
    "--log-cli-format=%(asctime)s [%(levelname)8s] %(name)s: %(message)s",
    "--log-cli-date-format=%Y-%m-%d %H:%M:%S",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for workflows", 
    "performance: Performance and benchmarking tests",
    "browser: Tests requiring browser instances",
    "video: Video recording functionality tests",
    "requests: HTTP request monitoring tests",
    "ui: Browser UI customization tests",
    "session: Session management tests",
    "slow: Tests that take longer to run",
    "headed: Tests requiring headed browser (no headless)",
]

# Code formatting and linting
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert
    "T201",  # print statements (OK for CLI tools)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "T201", "B008"]
"scripts/*" = ["T201"]

[tool.ruff.isort]
known-first-party = []

# Type checking
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "fastmcp.*", 
    "PIL.*",
]
ignore_missing_imports = true

# Black code formatting
[tool.black]
line-length = 88
target-version = ["py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
)/
'''

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "reports/coverage_html"

[dependency-groups]
dev = [
    "pytest-asyncio>=1.1.0",
]
