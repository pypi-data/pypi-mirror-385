name: Release

# Dynamic run name that appears in the GitHub UI
run-name: Release version ${{ github.ref_name }} of the SDK

on:
  # no explicit inputs for tag_name; rely on the selected reference from the UI
  workflow_dispatch:

# ensures only a single instance of this release workflow is running at any one time
concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: "msgflux"
  TEST_PYPI_URL: "https://test.pypi.org/pypi"
  PYPI_URL: "https://pypi.org/pypi"

jobs:
  get_tag_details:
    name: Get Tag Details
    runs-on: msgflux-python-runner
    outputs:
      tag_name: ${{ steps.release.outputs.tag_name }}
      new_version: ${{ steps.release.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history

      - name: Check if a tag is selected
        run: |
          if [ "${{ github.ref_type }}" != "tag" ]; then
            echo "Error: Workflow must be triggered with a tag selected. Current ref_type is ${{ github.ref_type }}."
            exit 1
          fi
          TAG_NAME=${{ github.ref_name }}
          echo "Selected tag is $TAG_NAME"

      - name: Extract version from tag
        id: release
        run: |
          TAG_NAME=${{ github.ref_name }}
          # Validate tag format
          if [[ ! $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+(a[0-9]+|b[0-9]+|rc[0-9]+)?$ ]]; then
            echo "Invalid tag format. Tag must be in the format vX.Y.Z, vX.Y.ZaN, vX.Y.ZbN, or vX.Y.ZrcN."
            exit 1
          fi
          NEW_VERSION=${TAG_NAME#v}
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "Tag name is $TAG_NAME"
          echo "Version is $NEW_VERSION"

  setup_build_and_publish:
    name: Build Package and Publish to PyPI
    needs: [get_tag_details]
    runs-on: msgflux-python-runner
    permissions:
      contents: read
      id-token: write # Required for trusted publishing to PyPI
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@c7f87aa956e4c323abf06d5dec078e358f6b4d04 # v6
        with:
          version: "0.7.3"

      - name: Install dependencies
        run: uv sync --locked

      - name: Build source and wheel distribution
        run: |
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: error

      - name: Publish to PyPI
        run: uv publish

  github_release:
    name: Create GitHub Release
    needs: [get_tag_details, setup_build_and_publish]
    runs-on: msgflux-python-runner
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.get_tag_details.outputs.tag_name }} dist/* --title ${{ needs.get_tag_details.outputs.tag_name }} --generate-notes