Metadata-Version: 2.4
Name: zc.buildout.languageserver
Version: 0.16.1
Summary: A language server for zc.buildout
License: Permission is hereby granted, free of charge, to any person obtaining a
        copy of this software and associated documentation files (the "Software"),
        to deal in the Software without restriction, including without limitation
        the rights to use, copy, modify, merge, publish, distribute, sublicense,
        and/or sell copies of the Software, and to permit persons to whom the
        Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included
        in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
        THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
        OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
        ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
        OTHER DEALINGS IN THE SOFTWARE.
        
        ===============================================================================
        
        The module, buildout, is a modified version of the zc.buildout package,
        which uses the ZPL license:
        
        Zope Public License (ZPL) Version 2.1
        
        A copyright notice accompanies this license document that identifies the
        copyright holders.
        
        This license has been certified as open source. It has also been designated as
        GPL compatible by the Free Software Foundation (FSF).
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions in source code must retain the accompanying copyright
        notice, this list of conditions, and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the accompanying copyright
        notice, this list of conditions, and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
        
        3. Names of the copyright holders must not be used to endorse or promote
        products derived from this software without prior written permission from the
        copyright holders.
        
        4. The right to distribute this software or to use it for any purpose does not
        give you the right to use Servicemarks (sm) or Trademarks (tm) of the
        copyright
        holders. Use of them is covered by separate agreement with the copyright
        holders.
        
        5. If any files are modified, you must cause the modified files to carry
        prominent notices stating that you changed the files and the date of any
        change.
        
        Disclaimer
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY EXPRESSED
        OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
        OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
        EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT, INDIRECT,
        INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
        PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
        LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
        NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
        EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: Source code, https://github.com/perrinjerome/vscode-zc-buildout/
Project-URL: Changelog, https://github.com/perrinjerome/vscode-zc-buildout/tree/main/server/CHANGELOG.md
Keywords: buildout,language-server,lsp
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development
Classifier: Framework :: Buildout
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENCE.txt
Requires-Dist: aiohttp
Requires-Dist: cachetools
Requires-Dist: packaging
Requires-Dist: pygls>=2.0.0
Requires-Dist: pygments
Requires-Dist: typing-extensions
Requires-Dist: zc.buildout
Provides-Extra: test
Requires-Dist: aioresponses; extra == "test"
Requires-Dist: coverage; extra == "test"
Requires-Dist: mypy; extra == "test"
Requires-Dist: pylint; extra == "test"
Requires-Dist: pytest-asyncio; extra == "test"
Requires-Dist: pytest-benchmark; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Requires-Dist: pytest; extra == "test"
Requires-Dist: types-cachetools; extra == "test"
Requires-Dist: types-pygments; extra == "test"
Requires-Dist: types-setuptools; extra == "test"
Requires-Dist: types-toml; extra == "test"
Requires-Dist: ruff; extra == "test"
Dynamic: license-file

A [Language Server](https://microsoft.github.io/language-server-protocol/) for [zc.buildout](http://www.buildout.org/).

This language server is implemented using [pygls](https://github.com/openlawlibrary/pygls).

# Installation

## Standalone

Needs a python >= 3.8.

```bash
python -m pip install zc.buildout.languageserver
```

Then configure your editor to run `buildoutls` ( or `python3 -m buildoutls` ).

## From vscode extension

On activation, the extension automatically installs the extension on the python configured in the extension preferences.

The automatic installation does not seem to work with theia and the python egg has to be installed beforehand.

# Features

## Completions

- `${` or `[` complete sections.
- `${section:` complete `section`'s options. If `section` uses a known recipe, dynamic options from the recipe are also completed.
- `${buildout:extends}` completes filenames.
- `${buildout:parts}` and `<=` option completes parts.

## Diagnostics

- non existant section and options in `${section:option}` references.
- required options not defined for a a few "known recipes".
- python package listed in `[versions]` with known vulnerabilities

## Symbols

- Sections and options are shown are displayed in outline as symbols.

## Links

- `${buildout:extends}` are links.

## Go to definitions

- from `${section:options}` we can go to the location where `option` is defined in `section`, or to `section` header if it's not defined.
- from `<= section` we can go to `section`.
- from `${buildout:extends}` we can go to the extended profile.

## Hover

- Hover on an option show the option value.
- Hover on a recipe shows the recipe documentation

## Find references

- Find references of the current symbol. A bit simple, it only look for references and does not check if profiles really `extends` each other. It does not look in templates either.

## Code actions

- update a python package from `[versions]` to its latest version on pypi
- compute the `md5sum` of an url

## Semantic tokens

- python code in options is highlighted.

## Template support

- "current" buildout profile is guessed, then completions and diagnostics should work on any files.

## Jinja2 support

- Jinja syntax is syntax highlighted and jinja syntax markers are ignored when parsing buildout.

## SlapOS support

- SlapOS instance buildout (ie. buildout generated by buildout) is understood, `${` and `$${` are treated separatly for completions and diagnostics.
