import amsdal_glue as glue
from _typeshed import Incomplete
from amsdal_glue_core.common.expressions.expression import Expression as Expression
from amsdal_models.classes.relationships.constants import FOREIGN_KEYS as FOREIGN_KEYS, PRIMARY_KEY as PRIMARY_KEY
from amsdal_models.classes.relationships.meta.primary_key import build_metadata_primary_key as build_metadata_primary_key
from amsdal_models.querysets.query_builders.common import AsyncQueryBuilder as AsyncQueryBuilder, ModelType as ModelType
from amsdal_models.querysets.query_builders.historical_builder.base import BaseHistoricalQueryBuilder as BaseHistoricalQueryBuilder, _field_shortcut as _field_shortcut
from amsdal_utils.query.utils import Q
from typing import Any

logger: Incomplete

class AsyncHistoricalQueryBuilder(BaseHistoricalQueryBuilder, AsyncQueryBuilder):
    async def transform(self) -> glue.QueryStatement: ...
    async def transform_count(self, total_alias: str = 'total_count', count_field: str = '*') -> glue.QueryStatement: ...
    async def build_only(self, model: type['ModelType'], only: list[str] | None = None, select_related: dict[tuple[str, type['ModelType'], str], Any] | None = None) -> list[glue.FieldReference | glue.FieldReferenceAliased] | None: ...
    @classmethod
    async def build_query_statement_with_metadata(cls, table: glue.SchemaReference, select_related: dict[tuple[str, type['ModelType'], str], Any] | None = None, only: list[glue.FieldReference | glue.FieldReferenceAliased] | None = None, annotations: list[glue.AnnotationQuery] | None = None, aggregations: list[glue.AggregationQuery] | None = None, joins: list[glue.JoinQuery] | None = None, where: glue.Conditions | None = None, group_by: list[glue.GroupByQuery] | None = None, order_by: list[glue.OrderByQuery] | None = None, limit: glue.LimitQuery | None = None) -> glue.QueryStatement: ...
    async def build_where(self, model: type['ModelType'], conditions: Q | None, select_related: dict[tuple[str, type['ModelType'], str], Any] | None = None) -> glue.Conditions | None: ...
    @classmethod
    async def _build_nested_only(cls, select_related: dict[tuple[str, type['ModelType'], str], Any]) -> list[glue.FieldReferenceAliased]: ...
    @classmethod
    async def _build_select_related_joins(cls, parent_alias: str, select_related: dict[tuple[str, type['ModelType'], str], Any], parent_properties: list[str] | None = None) -> list[glue.JoinQuery]: ...
    async def _process_nested_lakehouse_rest(self, rest: str, select_related: dict[tuple[str, type['ModelType'], str], Any] | None = None) -> list[str]: ...
