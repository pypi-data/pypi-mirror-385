from amsdal_models.classes.decorators.private_property import PrivateProperty as PrivateProperty
from amsdal_models.classes.model import Model as Model
from amsdal_models.classes.relationships.constants import ANNOTATIONS as ANNOTATIONS, DEFERRED_FOREIGN_KEYS as DEFERRED_FOREIGN_KEYS, DEFERRED_PRIMARY_KEYS as DEFERRED_PRIMARY_KEYS, FOREIGN_KEYS as FOREIGN_KEYS, PRIMARY_KEY_FIELDS as PRIMARY_KEY_FIELDS
from amsdal_models.classes.relationships.helpers.deferred_primary_keys import complete_deferred_primary_keys as complete_deferred_primary_keys
from amsdal_models.classes.relationships.meta.common import is_forward_ref_or_model as is_forward_ref_or_model, is_model_subclass as is_model_subclass, resolve_model_type as resolve_model_type
from amsdal_models.classes.relationships.reference_field import ReferenceFieldInfo as ReferenceFieldInfo
from typing import Any, ForwardRef

def extract_references(base_field_names: set[str], bases: tuple[type[Any], ...], namespace: dict[str, Any]) -> tuple[dict[str, Any], dict[str, Any]]: ...
def generate_fk_properties(fk: str, annotation: Any, namespace: dict[str, Any]) -> None: ...
def build_fk_db_fields(fk: str, annotation: Any) -> tuple[type['Model'] | ForwardRef, dict[str, type[Any]], bool]: ...
def generate_dynamic_reference(fk: str, fk_type: type['Model'], db_fields: dict[str, type], namespace: dict[str, Any], *, is_required: bool = True) -> None: ...
def build_metadata_foreign_keys(obj: Model) -> dict[str, Any]: ...
def has_m2m_in_bases(field_name: str, bases: tuple[type[Any], ...]) -> bool: ...
