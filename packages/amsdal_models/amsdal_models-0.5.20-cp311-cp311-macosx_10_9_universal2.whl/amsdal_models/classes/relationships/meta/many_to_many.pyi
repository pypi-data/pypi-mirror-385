from _typeshed import Incomplete
from amsdal_models.classes.decorators.private_property import PrivateProperty as PrivateProperty
from amsdal_models.classes.model import AmsdalModelMetaclass as AmsdalModelMetaclass, Model as Model
from amsdal_models.classes.relationships.constants import ANNOTATIONS as ANNOTATIONS, DEFERRED_M2M_FIELDS as DEFERRED_M2M_FIELDS, MANY_TO_MANY_FIELDS as MANY_TO_MANY_FIELDS
from amsdal_models.classes.relationships.many_reference_field import ManyList as ManyList, ManyReferenceFieldInfo as ManyReferenceFieldInfo
from amsdal_models.classes.relationships.meta.common import is_forward_ref as is_forward_ref, resolve_model_type as resolve_model_type
from amsdal_models.errors import AmsdalModelError as AmsdalModelError
from amsdal_models.managers.base_manager import BaseManager as BaseManager
from amsdal_models.querysets.executor import DEFAULT_DB_ALIAS as DEFAULT_DB_ALIAS, LAKEHOUSE_DB_ALIAS as LAKEHOUSE_DB_ALIAS
from amsdal_utils.models.data_models.reference import Reference
from collections.abc import Callable as Callable, Coroutine
from pydantic.fields import FieldInfo
from typing import Any, ForwardRef, TypeVar

ClassTypeT = TypeVar('ClassTypeT', bound=type['Model'])

def generate_m2m_properties(m2m: str, annotation: Any, namespace: dict[str, Any]) -> None: ...

class DeferredModel:
    _build_model: Incomplete
    def __init__(self, m2m_ref: ClassTypeT) -> None: ...
    def __call__(self, cls: ClassTypeT) -> ClassTypeT: ...

def generate_dynamic_m2m_fields(m2m: str, m2m_ref: type['Model'], m2m_model: DeferredModel | type['Model'], through_fields: tuple[str, str] | None, namespace: dict[str, Any] | type['Model']) -> None: ...
def generate_m2m_getter(m2m: str, m2m_ref: type['Model'], through_fields: tuple[str, str] | None) -> Callable[[Any], list[ManyList] | Coroutine[None, None, list[ManyList]]]: ...
def generate_m2m_setter(m2m: str, m2m_ref: type['Model']) -> Callable[[Any, list[type['Model']]], None]: ...
def generate_m2m_through_getter(m2m_model: type['Model'] | DeferredModel) -> Callable[[Any], type['Model']]: ...
def generate_m2m_manager_getter(m2m: str) -> Callable[[Any], BaseManager[Any]]: ...
def generate_m2m_references_getter(m2m: str, m2m_ref: type['Model'], through_fields: tuple[str, str] | None) -> Callable[[Any], list[Reference] | Coroutine[None, None, list[Reference]]]: ...
def build_m2m_value_property(m2m: str) -> str: ...
def resolve_m2m_ref(annotation: Any) -> tuple[type['Model'] | ForwardRef, type['Model'] | ForwardRef | None, tuple[str, str] | None, ManyReferenceFieldInfo | FieldInfo | None]: ...
def build_m2m_model(cls, to_model: type['Model']) -> type['Model']: ...
