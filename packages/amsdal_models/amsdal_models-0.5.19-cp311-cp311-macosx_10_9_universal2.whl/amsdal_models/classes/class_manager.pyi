from amsdal_models.classes.class_loader import ModelClassLoader as ModelClassLoader
from amsdal_models.classes.model import Model as Model
from amsdal_models.classes.relationships.constants import MANY_TO_MANY_FIELDS as MANY_TO_MANY_FIELDS
from amsdal_utils.models.enums import ModuleType
from amsdal_utils.utils.singleton import Singleton
from typing import TypeAlias

ModulePathType: TypeAlias = str
ClassNameType: TypeAlias = str
LoadedClassesType: TypeAlias = dict[ModuleType, dict[ClassNameType, tuple[type[Model], ModulePathType]]]

class ClassManager(metaclass=Singleton):
    _models_modules: list[tuple[ModulePathType, ModuleType]]
    _loaded_classes: LoadedClassesType
    def __init__(self) -> None: ...
    @property
    def has_models_modules(self) -> bool: ...
    @property
    def user_models_count(self) -> int: ...
    def register_models_modules(self, modules: list[tuple[ModulePathType, ModuleType]], *, clear_previously_registered: bool = False) -> None: ...
    def import_class(self, class_name: ClassNameType, module_type: ModuleType = ...) -> type[Model]: ...
    def teardown(self) -> None: ...
    def unload_classes(self, class_name: ClassNameType, module_type: ModuleType = ...) -> None: ...
    def unload_all_classes(self) -> None: ...
    def _split_models_modules_by(self, module_type: ModuleType) -> tuple[list[tuple[ModulePathType, ModuleType]], list[tuple[ModulePathType, ModuleType]]]: ...
