"""
Best Valera Bot - –ü—Ä–∏–º–µ—Ä —É–º–Ω–æ–≥–æ Telegram –±–æ—Ç–∞ –Ω–∞ Smart Bot Factory

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –û–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π (event_handler)
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á (schedule_task)
- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (global_handler)
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ Telegram –∫–æ–º–∞–Ω–¥—ã (aiogram.Router)
- –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏–π (event_type=—Ñ—É–Ω–∫—Ü–∏—è)
"""

import asyncio
import logging
from datetime import datetime, timedelta

# Smart Bot Factory
from smart_bot_factory.router import EventRouter
from smart_bot_factory.message import send_message_by_human, send_message_to_users_by_stage
from smart_bot_factory.supabase import SupabaseClient
from smart_bot_factory.creation import BotBuilder
from smart_bot_factory.dashboard import prepare_dashboard_info

# Aiogram –¥–ª—è Telegram –∫–æ–º–∞–Ω–¥
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =============================================================================

# –†–æ—É—Ç–µ—Ä—ã
event_router = EventRouter("best-valera")  # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (—Å–æ–±—ã—Ç–∏—è, –∑–∞–¥–∞—á–∏)
telegram_router = Router(name="commands")  # Telegram –∫–æ–º–∞–Ω–¥—ã

# –ö–ª–∏–µ–Ω—Ç—ã
supabase_client = SupabaseClient("best-valera")

# Bot Builder
bot_builder = BotBuilder("best-valera")

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
# =============================================================================

@event_router.event_handler("collect_phone", notify=True, once_only=True)
async def handle_phone_collection(user_id: int, phone_number: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "collect_phone", "–∏–Ω—Ñ–æ": "+79001234567"}
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    once_only=True: —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {phone_number}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    session = await supabase_client.get_active_session(user_id)
    if session:
        metadata = session.get('metadata', {})
        metadata['phone'] = phone_number
        await supabase_client.update_session_metadata(session['id'], metadata)
    
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    )
    
    # üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –° –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    return {
        "status": "success",
        "phone": phone_number,
        "info": await prepare_dashboard_info(
            description_template="{username} –æ—Å—Ç–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            title="–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
            user_id=user_id
        )
    }

@event_router.event_handler("collect_name", send_ai_response=False, once_only=False)
async def handle_name_collection(user_id: int, client_name: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "collect_name", "–∏–Ω—Ñ–æ": "–ú–∏—Ö–∞–∏–ª"}
    """
    logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {client_name}")
    
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {client_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    )
    
    info = await prepare_dashboard_info(
        description_template="{username} —Å–∫–∞–∑–∞–ª —Å–≤–æ–µ –∏–º—è",
        title="–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞",
        user_id=user_id
    )
    
    return {
        'info': info
    }
    

# =============================================================================
# –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–î–ê–ß–ò (–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è)
# =============================================================================

@event_router.schedule_task("follow_up", delay="24s", smart_check=False, once_only=False, send_ai_response=False)
async def send_follow_up(user_id: int, reminder_text: str):
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "follow_up", "–∏–Ω—Ñ–æ": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –∑–∞–ø–∏—Å—å"}
    smart_check=True: –æ—Ç–º–µ–Ω–∏—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    """
    await send_message_by_human(
        user_id=user_id,
        message_text=f"üëã {reminder_text or '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–ø–∏—Å—å—é?'}"
    )
    
    # üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –° –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –∑–∞–¥–∞—á!)
    return {
        "status": "sent",
        "type": "follow_up",
        "info": await prepare_dashboard_info(
            description_template="{username} –ø–æ–ª—É—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏",
            title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            user_id=user_id
        )
    }

# =============================================================================
# –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –° –ö–ê–°–¢–û–ú–ù–´–ú –ü–û–õ–£–ß–ï–ù–ò–ï–ú –í–†–ï–ú–ï–ù–ò
# =============================================================================

async def get_booking_datetime(user_id: int, user_data: str) -> datetime:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API (–Ω–∞–ø—Ä–∏–º–µ—Ä YClients)
    
    –≠—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ª—é–±–æ–º—É API
    
    Returns:
        datetime: –ö–æ–≥–¥–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–ø–∏—Å—å
    """
    # –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä:
    # from yclients_api import get_user_next_booking
    # booking = await get_user_next_booking(user_id)
    # return booking['datetime']
    
    # –î–µ–º–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–∑–∞–≤—Ç—Ä–∞ –≤ 19:00"
    tomorrow = datetime.now() + timedelta(days=1)
    appointment_time = tomorrow.replace(hour=19, minute=0, second=0, microsecond=0)
    
    logger.info(f"üìÖ –ó–∞–ø–∏—Å—å –¥–ª—è user {user_id}: {appointment_time.strftime('%d.%m.%Y %H:%M')}")
    return appointment_time

@event_router.schedule_task(
    "appointment_reminder",
    delay="1h",  # –ó–∞ 1 —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏
    event_type=get_booking_datetime,  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    smart_check=False  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
)
async def send_appointment_reminder(user_id: int, user_data: str):
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏
    
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫:
    1. –ò–ò: {"—Ç–∏–ø": "appointment_reminder", "–∏–Ω—Ñ–æ": ""}
    2. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è get_booking_datetime(user_id, "") ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime
    3. –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è: reminder_time = booking_datetime - 1h
    4. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    await send_message_by_human(
        user_id=user_id,
        message_text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —á–∞—Å!"
    )
    
    return {"status": "sent", "type": "appointment_reminder"}

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
# =============================================================================

@event_router.global_handler("promo_announcement", delay="2h", notify=True)
async def send_promo_to_all(announcement_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
    
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "promo_announcement", "–∏–Ω—Ñ–æ": "–°–∫–∏–¥–∫–∞ 20% –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏!"}
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
    notify=True: –∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {announcement_text}")
    
    await send_message_to_users_by_stage(
        stage="all",
        message_text=f"üéâ {announcement_text}",
        bot_id="best-valera"
    )
    
    return {"status": "sent", "recipients": "all"}

# =============================================================================
# –ö–ê–°–¢–û–ú–ù–´–ï TELEGRAM –ö–û–ú–ê–ù–î–´ (aiogram.Router - –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏)
# =============================================================================

@telegram_router.message(Command("price", "—Ü–µ–Ω–∞"))
async def price_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /price - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"""
    await message.answer(
        "üí∞ **–ù–∞—à–∏ —Ü–µ–Ω—ã:**\n\n"
        "‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è ‚Äî 1500‚ÇΩ\n"
        "‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è ‚Äî 2000‚ÇΩ\n"
        "‚Ä¢ –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ ‚Äî –æ—Ç 3000‚ÇΩ\n"
        "‚Ä¢ –£–∫–ª–∞–¥–∫–∞ ‚Äî 1000‚ÇΩ\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É!",
        parse_mode="Markdown"
    )

@telegram_router.message(Command("catalog", "–∫–∞—Ç–∞–ª–æ–≥"))
async def catalog_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /catalog - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ê–∫—Ü–∏–∏", callback_data="promo")],
        [InlineKeyboardButton(text="üíá –°—Ç—Ä–∏–∂–∫–∏", callback_data="haircut")],
        [InlineKeyboardButton(text="üíÖ –ú–∞–Ω–∏–∫—é—Ä", callback_data="manicure")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")]
    ])
    
    await message.answer(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

@telegram_router.callback_query(F.data == "book")
async def handle_booking_button(callback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" """
    await callback.answer("–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏...")
    await callback.message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏"
    )

@telegram_router.message(F.text.lower().contains("–ø–æ–º–æ—â—å"))
async def help_message(message: Message):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª–æ–≤–æ "–ø–æ–º–æ—â—å" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    await message.answer(
        "üíÅ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—å—é –Ω–∞ —É—Å–ª—É–≥–∏\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!"
    )

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        bot_builder.register_routers(event_router)  # –°–æ–±—ã—Ç–∏—è –∏ –∑–∞–¥–∞—á–∏
        bot_builder.register_telegram_router(telegram_router)  # Telegram –∫–æ–º–∞–Ω–¥—ã
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        await bot_builder.build()
        await bot_builder.start()
        
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        raise

if __name__ == "__main__":
    asyncio.run(main())
