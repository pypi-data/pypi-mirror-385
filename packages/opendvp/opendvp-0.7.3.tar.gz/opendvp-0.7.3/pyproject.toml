[project]
name = "openDVP"
version = "0.7.3"
description = "open-sourced Deep Visual Proteomics toolkit"
readme = "README.md"
requires-python = ">=3.11, <3.14"
license = {file = "LICENSE"}
authors = [{name = "Jose Nimo", email = "jose.nimo@mdc-berlin.de"}]
maintainers = [{ name = "Jose Nimo", email = "jose.nimo@mdc-berlin.de" }]

dependencies = [
    "numpy >= 2.0.0",
    "spatialdata >= 0.4.0",
    "napari-spatialdata == 0.5.5",
    "spatialdata-plot ~= 0.2.9 ",
    "ipykernel ~= 6.25",
    "scanpy >=1.11, <1.14",
    "loguru ~= 0.7.3",
    "scipy ~= 1.13",
    "statsmodels >=0.14.5",
    "adjusttext",
    "pingouin >=0.5.5, <0.6",
    "esda >=2.7, <2.8",
    "upsetplot",
    "perseuspy >=0.3.9,<0.4",
    "gensim ~=4.4.0",
    "pyqt6",
    "tifffile     >= 2025.9.30",
    "scikit-image >= 0.25.2",
    "scikit-learn >= 1.7.2",
    "xarray       >= 2024.11.0",
    "pyogrio      >= 0.11.1"
    ]

[dependency-groups]
dev = [
  "ruff",
  "pytest",
  "hatchling",
  "pre-commit",
  "coverage",
  "pytest-cov",
  "twine"
]
docs = [
  "sphinx",
  "sphinx_copybutton",
  "sphinxcontrib-bibtex", 
  "sphinx_tabs", 
  "sphinxext-opengraph", 
  "sphinx-book-theme",
  "twine",
  "myst-parser",
  "myst_nb",
  "nbsphinx",
  "sphinx_autodoc_typehints"
]

[project.urls]
"Documentation" = "https://coscialab.github.io/openDVP/"
"Homepage" = "https://github.com/CosciaLab/openDVP"
"Source" = "https://github.com/CosciaLab/openDVP"

[build-system]
requires = ["uv_build>=0.8.13,<0.9.0"]
build-backend = "uv_build"

## FORMATTING AND LINTING ##

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
per-file-ignores."*/__init__.py" = [ "F401" ]
per-file-ignores."docs/*" = [ "I" ]
per-file-ignores."tests/*" = [ "D" ]

exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "env",
    "docs",
    "notebooks",
    "tests/data",
    "src/opendvp/tl/scimap_*.py",
    "src/opendvp/pp/scimap_*.py",
    "src/opendvp/experimental/*",
]

select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]

ignore = [
  "B008", # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
  "D107", # Missing docstring in __init__
  # Disable one in each pair of mutually incompatible rules
  "D203", # We don’t want a blank line before a class docstring
  "D213", # <> We want docstrings to start immediately after the opening triple quote
  "D400", # first line should end with a period [Bug: doesn’t work with single-line docstrings]
  "D401", # First line should be in imperative mood; try rephrasing
  "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E741", # allow I, O, l as variable names -> I is the identity matrix
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
