# Generated from PCREParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,90,833,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,1,0,3,0,112,8,0,1,0,1,0,1,1,1,1,1,1,3,1,119,
        8,1,5,1,121,8,1,10,1,12,1,124,9,1,1,2,4,2,127,8,2,11,2,12,2,128,
        1,3,1,3,3,3,133,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,155,8,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        4,5,177,8,5,11,5,12,5,178,1,5,1,5,4,5,183,8,5,11,5,12,5,184,3,5,
        187,8,5,3,5,189,8,5,1,5,1,5,1,5,1,5,3,5,195,8,5,3,5,197,8,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
        215,8,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,226,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,251,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
        260,8,8,1,9,1,9,1,9,1,9,3,9,266,8,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
        274,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
        289,8,9,1,9,1,9,1,9,1,9,1,9,3,9,296,8,9,1,9,1,9,1,9,3,9,301,8,9,
        3,9,303,8,9,1,10,1,10,1,10,1,10,3,10,309,8,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,322,8,10,1,10,1,10,1,10,
        1,10,3,10,328,8,10,1,10,1,10,1,10,3,10,333,8,10,1,10,1,10,1,10,3,
        10,338,8,10,1,10,1,10,1,11,1,11,1,11,1,11,4,11,346,8,11,11,11,12,
        11,347,1,11,1,11,1,12,1,12,1,12,3,12,355,8,12,1,12,1,12,1,12,1,12,
        3,12,361,8,12,3,12,363,8,12,1,12,1,12,1,12,3,12,368,8,12,3,12,370,
        8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,380,8,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,396,8,13,1,13,1,13,4,13,400,8,13,11,13,12,13,401,1,13,1,13,
        4,13,406,8,13,11,13,12,13,407,3,13,410,8,13,1,13,1,13,4,13,414,8,
        13,11,13,12,13,415,3,13,418,8,13,3,13,420,8,13,1,13,1,13,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,3,15,431,8,15,1,15,1,15,1,15,1,15,1,
        15,1,15,3,15,439,8,15,1,15,1,15,1,15,3,15,444,8,15,1,15,1,15,1,15,
        3,15,449,8,15,3,15,451,8,15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,459,
        8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,468,8,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,482,8,18,
        3,18,484,8,18,1,18,1,18,1,18,1,18,1,18,4,18,491,8,18,11,18,12,18,
        492,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,4,18,
        506,8,18,11,18,12,18,507,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,522,8,18,3,18,524,8,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,537,8,19,1,19,1,19,3,
        19,541,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,549,8,19,1,19,1,19,
        1,19,1,19,1,19,3,19,556,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,566,8,19,3,19,568,8,19,1,20,1,20,3,20,572,8,20,1,20,1,
        20,5,20,576,8,20,10,20,12,20,579,9,20,1,20,1,20,1,20,3,20,584,8,
        20,1,20,4,20,587,8,20,11,20,12,20,588,1,20,1,20,3,20,593,8,20,1,
        21,1,21,1,21,1,21,1,21,1,21,3,21,601,8,21,1,22,1,22,1,22,1,22,1,
        23,1,23,3,23,609,8,23,1,24,1,24,3,24,613,8,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,3,25,622,8,25,1,26,1,26,1,26,1,27,1,27,1,27,5,27,
        630,8,27,10,27,12,27,633,9,27,1,27,1,27,1,27,1,27,3,27,639,8,27,
        1,28,4,28,642,8,28,11,28,12,28,643,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,661,8,30,1,31,
        4,31,664,8,31,11,31,12,31,665,1,32,1,32,1,33,1,33,1,33,5,33,673,
        8,33,10,33,12,33,676,9,33,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,
        1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,
        3,49,803,8,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,
        1,54,1,54,1,54,1,54,1,54,1,54,1,631,0,55,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,0,10,2,0,9,9,18,18,1,0,13,13,1,0,7,9,6,0,37,37,48,48,62,
        62,66,66,72,72,77,77,2,0,1,1,14,14,1,0,14,14,5,0,28,29,34,34,53,
        53,55,55,79,79,1,0,80,89,2,0,19,19,28,79,4,0,11,11,14,14,17,27,90,
        90,950,0,111,1,0,0,0,2,115,1,0,0,0,4,126,1,0,0,0,6,130,1,0,0,0,8,
        154,1,0,0,0,10,156,1,0,0,0,12,200,1,0,0,0,14,206,1,0,0,0,16,259,
        1,0,0,0,18,302,1,0,0,0,20,304,1,0,0,0,22,341,1,0,0,0,24,369,1,0,
        0,0,26,371,1,0,0,0,28,423,1,0,0,0,30,425,1,0,0,0,32,454,1,0,0,0,
        34,467,1,0,0,0,36,469,1,0,0,0,38,567,1,0,0,0,40,592,1,0,0,0,42,600,
        1,0,0,0,44,602,1,0,0,0,46,608,1,0,0,0,48,610,1,0,0,0,50,621,1,0,
        0,0,52,623,1,0,0,0,54,638,1,0,0,0,56,641,1,0,0,0,58,645,1,0,0,0,
        60,660,1,0,0,0,62,663,1,0,0,0,64,667,1,0,0,0,66,669,1,0,0,0,68,677,
        1,0,0,0,70,679,1,0,0,0,72,683,1,0,0,0,74,687,1,0,0,0,76,703,1,0,
        0,0,78,716,1,0,0,0,80,719,1,0,0,0,82,722,1,0,0,0,84,727,1,0,0,0,
        86,735,1,0,0,0,88,739,1,0,0,0,90,751,1,0,0,0,92,767,1,0,0,0,94,779,
        1,0,0,0,96,791,1,0,0,0,98,798,1,0,0,0,100,804,1,0,0,0,102,809,1,
        0,0,0,104,816,1,0,0,0,106,822,1,0,0,0,108,827,1,0,0,0,110,112,3,
        2,1,0,111,110,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,114,5,
        0,0,1,114,1,1,0,0,0,115,122,3,4,2,0,116,118,5,6,0,0,117,119,3,4,
        2,0,118,117,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,116,1,0,
        0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,3,1,0,0,
        0,124,122,1,0,0,0,125,127,3,6,3,0,126,125,1,0,0,0,127,128,1,0,0,
        0,128,126,1,0,0,0,128,129,1,0,0,0,129,5,1,0,0,0,130,132,3,8,4,0,
        131,133,3,24,12,0,132,131,1,0,0,0,132,133,1,0,0,0,133,7,1,0,0,0,
        134,155,3,26,13,0,135,155,3,30,15,0,136,155,3,32,16,0,137,155,3,
        10,5,0,138,155,3,12,6,0,139,155,3,14,7,0,140,155,3,16,8,0,141,155,
        3,18,9,0,142,155,3,20,10,0,143,155,3,22,11,0,144,155,3,36,18,0,145,
        155,3,38,19,0,146,155,3,40,20,0,147,155,3,48,24,0,148,155,3,64,32,
        0,149,155,3,58,29,0,150,155,3,50,25,0,151,155,3,52,26,0,152,155,
        3,54,27,0,153,155,3,68,34,0,154,134,1,0,0,0,154,135,1,0,0,0,154,
        136,1,0,0,0,154,137,1,0,0,0,154,138,1,0,0,0,154,139,1,0,0,0,154,
        140,1,0,0,0,154,141,1,0,0,0,154,142,1,0,0,0,154,143,1,0,0,0,154,
        144,1,0,0,0,154,145,1,0,0,0,154,146,1,0,0,0,154,147,1,0,0,0,154,
        148,1,0,0,0,154,149,1,0,0,0,154,150,1,0,0,0,154,151,1,0,0,0,154,
        152,1,0,0,0,154,153,1,0,0,0,155,9,1,0,0,0,156,196,5,12,0,0,157,197,
        3,2,1,0,158,194,5,7,0,0,159,160,5,22,0,0,160,161,3,66,33,0,161,162,
        5,23,0,0,162,163,3,2,1,0,163,195,1,0,0,0,164,165,5,24,0,0,165,166,
        3,66,33,0,166,167,5,24,0,0,167,168,3,2,1,0,168,195,1,0,0,0,169,170,
        5,43,0,0,170,171,5,22,0,0,171,172,3,66,33,0,172,173,5,23,0,0,173,
        174,3,2,1,0,174,195,1,0,0,0,175,177,3,28,14,0,176,175,1,0,0,0,177,
        178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,186,1,0,0,0,180,
        182,5,18,0,0,181,183,3,28,14,0,182,181,1,0,0,0,183,184,1,0,0,0,184,
        182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,180,1,0,0,0,186,
        187,1,0,0,0,187,189,1,0,0,0,188,176,1,0,0,0,188,189,1,0,0,0,189,
        190,1,0,0,0,190,191,5,25,0,0,191,195,3,2,1,0,192,193,5,6,0,0,193,
        195,3,2,1,0,194,159,1,0,0,0,194,164,1,0,0,0,194,169,1,0,0,0,194,
        188,1,0,0,0,194,192,1,0,0,0,195,197,1,0,0,0,196,157,1,0,0,0,196,
        158,1,0,0,0,197,198,1,0,0,0,198,199,5,13,0,0,199,11,1,0,0,0,200,
        201,5,12,0,0,201,202,5,7,0,0,202,203,5,23,0,0,203,204,3,2,1,0,204,
        205,5,13,0,0,205,13,1,0,0,0,206,207,5,12,0,0,207,214,5,7,0,0,208,
        215,5,20,0,0,209,215,5,27,0,0,210,211,5,22,0,0,211,215,5,20,0,0,
        212,213,5,22,0,0,213,215,5,27,0,0,214,208,1,0,0,0,214,209,1,0,0,
        0,214,210,1,0,0,0,214,212,1,0,0,0,215,216,1,0,0,0,216,217,3,2,1,
        0,217,218,5,13,0,0,218,15,1,0,0,0,219,250,5,1,0,0,220,221,5,60,0,
        0,221,251,3,56,28,0,222,223,5,60,0,0,223,225,5,10,0,0,224,226,5,
        18,0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,3,
        56,28,0,228,229,5,11,0,0,229,251,1,0,0,0,230,231,5,60,0,0,231,232,
        5,10,0,0,232,233,3,66,33,0,233,234,5,11,0,0,234,251,1,0,0,0,235,
        236,5,64,0,0,236,237,5,22,0,0,237,238,3,66,33,0,238,239,5,23,0,0,
        239,251,1,0,0,0,240,241,5,64,0,0,241,242,5,24,0,0,242,243,3,66,33,
        0,243,244,5,24,0,0,244,251,1,0,0,0,245,246,5,64,0,0,246,247,5,10,
        0,0,247,248,3,66,33,0,248,249,5,11,0,0,249,251,1,0,0,0,250,220,1,
        0,0,0,250,222,1,0,0,0,250,230,1,0,0,0,250,235,1,0,0,0,250,240,1,
        0,0,0,250,245,1,0,0,0,251,260,1,0,0,0,252,253,5,12,0,0,253,254,5,
        7,0,0,254,255,5,43,0,0,255,256,5,20,0,0,256,257,3,66,33,0,257,258,
        5,13,0,0,258,260,1,0,0,0,259,219,1,0,0,0,259,252,1,0,0,0,260,17,
        1,0,0,0,261,262,5,12,0,0,262,273,5,7,0,0,263,274,5,45,0,0,264,266,
        7,0,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,274,
        3,56,28,0,268,269,5,21,0,0,269,274,3,66,33,0,270,271,5,43,0,0,271,
        272,5,23,0,0,272,274,3,66,33,0,273,263,1,0,0,0,273,265,1,0,0,0,273,
        268,1,0,0,0,273,270,1,0,0,0,274,275,1,0,0,0,275,303,5,13,0,0,276,
        277,5,1,0,0,277,300,5,60,0,0,278,279,5,22,0,0,279,280,3,66,33,0,
        280,281,5,23,0,0,281,301,1,0,0,0,282,283,5,24,0,0,283,284,3,66,33,
        0,284,285,5,24,0,0,285,301,1,0,0,0,286,288,5,22,0,0,287,289,7,0,
        0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,3,56,
        28,0,291,292,5,23,0,0,292,301,1,0,0,0,293,295,5,24,0,0,294,296,7,
        0,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,3,
        56,28,0,298,299,5,24,0,0,299,301,1,0,0,0,300,278,1,0,0,0,300,282,
        1,0,0,0,300,286,1,0,0,0,300,293,1,0,0,0,301,303,1,0,0,0,302,261,
        1,0,0,0,302,276,1,0,0,0,303,19,1,0,0,0,304,305,5,12,0,0,305,332,
        5,7,0,0,306,327,5,12,0,0,307,309,7,0,0,0,308,307,1,0,0,0,308,309,
        1,0,0,0,309,310,1,0,0,0,310,328,3,56,28,0,311,312,5,22,0,0,312,313,
        3,66,33,0,313,314,5,23,0,0,314,328,1,0,0,0,315,316,5,24,0,0,316,
        317,3,66,33,0,317,318,5,24,0,0,318,328,1,0,0,0,319,321,5,45,0,0,
        320,322,3,56,28,0,321,320,1,0,0,0,321,322,1,0,0,0,322,328,1,0,0,
        0,323,324,5,45,0,0,324,325,5,21,0,0,325,328,3,66,33,0,326,328,3,
        66,33,0,327,308,1,0,0,0,327,311,1,0,0,0,327,315,1,0,0,0,327,319,
        1,0,0,0,327,323,1,0,0,0,327,326,1,0,0,0,328,329,1,0,0,0,329,333,
        5,13,0,0,330,333,3,32,16,0,331,333,3,14,7,0,332,306,1,0,0,0,332,
        330,1,0,0,0,332,331,1,0,0,0,333,334,1,0,0,0,334,337,3,4,2,0,335,
        336,5,6,0,0,336,338,3,4,2,0,337,335,1,0,0,0,337,338,1,0,0,0,338,
        339,1,0,0,0,339,340,5,13,0,0,340,21,1,0,0,0,341,342,5,12,0,0,342,
        343,5,7,0,0,343,345,5,26,0,0,344,346,8,1,0,0,345,344,1,0,0,0,346,
        347,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,
        350,5,13,0,0,350,23,1,0,0,0,351,354,7,2,0,0,352,355,5,9,0,0,353,
        355,5,7,0,0,354,352,1,0,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,
        370,1,0,0,0,356,357,5,10,0,0,357,362,3,56,28,0,358,360,5,17,0,0,
        359,361,3,56,28,0,360,359,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,
        0,362,358,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,367,5,11,0,
        0,365,368,5,9,0,0,366,368,5,7,0,0,367,365,1,0,0,0,367,366,1,0,0,
        0,367,368,1,0,0,0,368,370,1,0,0,0,369,351,1,0,0,0,369,356,1,0,0,
        0,370,25,1,0,0,0,371,419,5,12,0,0,372,395,5,8,0,0,373,379,3,70,35,
        0,374,380,5,88,0,0,375,376,5,81,0,0,376,380,5,86,0,0,377,378,5,83,
        0,0,378,380,5,82,0,0,379,374,1,0,0,0,379,375,1,0,0,0,379,377,1,0,
        0,0,379,380,1,0,0,0,380,396,1,0,0,0,381,396,3,72,36,0,382,396,3,
        74,37,0,383,396,3,76,38,0,384,396,3,34,17,0,385,386,3,88,44,0,386,
        387,5,20,0,0,387,388,3,56,28,0,388,396,1,0,0,0,389,390,3,90,45,0,
        390,391,5,20,0,0,391,392,3,56,28,0,392,396,1,0,0,0,393,396,3,92,
        46,0,394,396,3,94,47,0,395,373,1,0,0,0,395,381,1,0,0,0,395,382,1,
        0,0,0,395,383,1,0,0,0,395,384,1,0,0,0,395,385,1,0,0,0,395,389,1,
        0,0,0,395,393,1,0,0,0,395,394,1,0,0,0,396,420,1,0,0,0,397,417,5,
        7,0,0,398,400,3,28,14,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,
        1,0,0,0,401,402,1,0,0,0,402,409,1,0,0,0,403,405,5,18,0,0,404,406,
        3,28,14,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,
        1,0,0,0,408,410,1,0,0,0,409,403,1,0,0,0,409,410,1,0,0,0,410,418,
        1,0,0,0,411,413,5,18,0,0,412,414,3,28,14,0,413,412,1,0,0,0,414,415,
        1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,399,
        1,0,0,0,417,411,1,0,0,0,418,420,1,0,0,0,419,372,1,0,0,0,419,397,
        1,0,0,0,420,421,1,0,0,0,421,422,5,13,0,0,422,27,1,0,0,0,423,424,
        7,3,0,0,424,29,1,0,0,0,425,426,5,12,0,0,426,450,5,8,0,0,427,451,
        3,96,48,0,428,451,3,98,49,0,429,431,3,100,50,0,430,429,1,0,0,0,430,
        431,1,0,0,0,431,432,1,0,0,0,432,433,5,25,0,0,433,451,3,66,33,0,434,
        451,3,102,51,0,435,438,3,104,52,0,436,437,5,25,0,0,437,439,3,66,
        33,0,438,436,1,0,0,0,438,439,1,0,0,0,439,451,1,0,0,0,440,443,3,106,
        53,0,441,442,5,25,0,0,442,444,3,66,33,0,443,441,1,0,0,0,443,444,
        1,0,0,0,444,451,1,0,0,0,445,448,3,108,54,0,446,447,5,25,0,0,447,
        449,3,66,33,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,
        427,1,0,0,0,450,428,1,0,0,0,450,430,1,0,0,0,450,434,1,0,0,0,450,
        435,1,0,0,0,450,440,1,0,0,0,450,445,1,0,0,0,451,452,1,0,0,0,452,
        453,5,13,0,0,453,31,1,0,0,0,454,455,5,12,0,0,455,456,5,7,0,0,456,
        458,5,30,0,0,457,459,3,56,28,0,458,457,1,0,0,0,458,459,1,0,0,0,459,
        460,1,0,0,0,460,461,5,13,0,0,461,33,1,0,0,0,462,468,3,78,39,0,463,
        468,3,80,40,0,464,468,3,82,41,0,465,468,3,84,42,0,466,468,3,86,43,
        0,467,462,1,0,0,0,467,463,1,0,0,0,467,464,1,0,0,0,467,465,1,0,0,
        0,467,466,1,0,0,0,468,35,1,0,0,0,469,523,5,1,0,0,470,524,5,54,0,
        0,471,472,5,56,0,0,472,524,9,0,0,0,473,524,5,58,0,0,474,524,5,59,
        0,0,475,524,5,67,0,0,476,524,5,71,0,0,477,524,5,73,0,0,478,483,3,
        58,29,0,479,481,3,58,29,0,480,482,3,58,29,0,481,480,1,0,0,0,481,
        482,1,0,0,0,482,484,1,0,0,0,483,479,1,0,0,0,483,484,1,0,0,0,484,
        524,1,0,0,0,485,486,5,68,0,0,486,487,5,10,0,0,487,488,3,58,29,0,
        488,490,3,58,29,0,489,491,3,58,29,0,490,489,1,0,0,0,491,492,1,0,
        0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,495,5,11,
        0,0,495,524,1,0,0,0,496,497,5,77,0,0,497,498,3,60,30,0,498,499,3,
        60,30,0,499,524,1,0,0,0,500,501,5,77,0,0,501,502,5,10,0,0,502,503,
        3,60,30,0,503,505,3,60,30,0,504,506,3,60,30,0,505,504,1,0,0,0,506,
        507,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,
        510,5,11,0,0,510,524,1,0,0,0,511,512,5,74,0,0,512,513,3,60,30,0,
        513,514,3,60,30,0,514,515,3,60,30,0,515,521,3,60,30,0,516,517,3,
        60,30,0,517,518,3,60,30,0,518,519,3,60,30,0,519,520,3,60,30,0,520,
        522,1,0,0,0,521,516,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,
        470,1,0,0,0,523,471,1,0,0,0,523,473,1,0,0,0,523,474,1,0,0,0,523,
        475,1,0,0,0,523,476,1,0,0,0,523,477,1,0,0,0,523,478,1,0,0,0,523,
        485,1,0,0,0,523,496,1,0,0,0,523,500,1,0,0,0,523,511,1,0,0,0,524,
        37,1,0,0,0,525,568,5,3,0,0,526,565,5,1,0,0,527,566,5,30,0,0,528,
        566,5,57,0,0,529,566,5,31,0,0,530,566,5,61,0,0,531,566,5,35,0,0,
        532,566,5,41,0,0,533,534,5,69,0,0,534,536,5,10,0,0,535,537,5,5,0,
        0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,540,3,66,33,
        0,539,541,5,21,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,
        0,542,543,5,11,0,0,543,566,1,0,0,0,544,545,5,43,0,0,545,546,5,10,
        0,0,546,548,3,66,33,0,547,549,5,21,0,0,548,547,1,0,0,0,548,549,1,
        0,0,0,549,550,1,0,0,0,550,551,5,11,0,0,551,566,1,0,0,0,552,553,5,
        69,0,0,553,555,3,64,32,0,554,556,3,64,32,0,555,554,1,0,0,0,555,556,
        1,0,0,0,556,566,1,0,0,0,557,566,5,45,0,0,558,566,5,72,0,0,559,566,
        5,46,0,0,560,566,5,75,0,0,561,566,5,49,0,0,562,566,5,76,0,0,563,
        566,5,50,0,0,564,566,5,51,0,0,565,527,1,0,0,0,565,528,1,0,0,0,565,
        529,1,0,0,0,565,530,1,0,0,0,565,531,1,0,0,0,565,532,1,0,0,0,565,
        533,1,0,0,0,565,544,1,0,0,0,565,552,1,0,0,0,565,557,1,0,0,0,565,
        558,1,0,0,0,565,559,1,0,0,0,565,560,1,0,0,0,565,561,1,0,0,0,565,
        562,1,0,0,0,565,563,1,0,0,0,565,564,1,0,0,0,566,568,1,0,0,0,567,
        525,1,0,0,0,567,526,1,0,0,0,568,39,1,0,0,0,569,571,5,4,0,0,570,572,
        5,5,0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,577,
        5,14,0,0,574,576,3,42,21,0,575,574,1,0,0,0,576,579,1,0,0,0,577,575,
        1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,577,1,0,0,0,580,593,
        5,14,0,0,581,583,5,4,0,0,582,584,5,5,0,0,583,582,1,0,0,0,583,584,
        1,0,0,0,584,586,1,0,0,0,585,587,3,42,21,0,586,585,1,0,0,0,587,588,
        1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,591,
        5,14,0,0,591,593,1,0,0,0,592,569,1,0,0,0,592,581,1,0,0,0,593,41,
        1,0,0,0,594,601,3,54,27,0,595,601,3,44,22,0,596,601,3,48,24,0,597,
        601,3,36,18,0,598,601,3,38,19,0,599,601,8,4,0,0,600,594,1,0,0,0,
        600,595,1,0,0,0,600,596,1,0,0,0,600,597,1,0,0,0,600,598,1,0,0,0,
        600,599,1,0,0,0,601,43,1,0,0,0,602,603,3,46,23,0,603,604,5,18,0,
        0,604,605,3,46,23,0,605,45,1,0,0,0,606,609,3,36,18,0,607,609,8,5,
        0,0,608,606,1,0,0,0,608,607,1,0,0,0,609,47,1,0,0,0,610,612,5,15,
        0,0,611,613,5,5,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,
        0,0,614,615,3,62,31,0,615,616,5,16,0,0,616,49,1,0,0,0,617,618,5,
        1,0,0,618,622,7,6,0,0,619,622,5,5,0,0,620,622,5,2,0,0,621,617,1,
        0,0,0,621,619,1,0,0,0,621,620,1,0,0,0,622,51,1,0,0,0,623,624,5,1,
        0,0,624,625,5,38,0,0,625,53,1,0,0,0,626,627,5,1,0,0,627,631,5,44,
        0,0,628,630,9,0,0,0,629,628,1,0,0,0,630,633,1,0,0,0,631,632,1,0,
        0,0,631,629,1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,635,5,1,
        0,0,635,639,5,32,0,0,636,637,5,1,0,0,637,639,9,0,0,0,638,626,1,0,
        0,0,638,636,1,0,0,0,639,55,1,0,0,0,640,642,3,58,29,0,641,640,1,0,
        0,0,642,643,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,57,1,0,0,
        0,645,646,7,7,0,0,646,59,1,0,0,0,647,661,3,58,29,0,648,661,5,54,
        0,0,649,661,5,55,0,0,650,661,5,56,0,0,651,661,5,57,0,0,652,661,5,
        58,0,0,653,661,5,59,0,0,654,661,5,28,0,0,655,661,5,29,0,0,656,661,
        5,30,0,0,657,661,5,31,0,0,658,661,5,32,0,0,659,661,5,33,0,0,660,
        647,1,0,0,0,660,648,1,0,0,0,660,649,1,0,0,0,660,650,1,0,0,0,660,
        651,1,0,0,0,660,652,1,0,0,0,660,653,1,0,0,0,660,654,1,0,0,0,660,
        655,1,0,0,0,660,656,1,0,0,0,660,657,1,0,0,0,660,658,1,0,0,0,660,
        659,1,0,0,0,661,61,1,0,0,0,662,664,3,64,32,0,663,662,1,0,0,0,664,
        665,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,63,1,0,0,0,667,668,
        7,8,0,0,668,65,1,0,0,0,669,674,3,64,32,0,670,673,3,64,32,0,671,673,
        3,58,29,0,672,670,1,0,0,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,
        1,0,0,0,674,675,1,0,0,0,675,67,1,0,0,0,676,674,1,0,0,0,677,678,7,
        9,0,0,678,69,1,0,0,0,679,680,5,48,0,0,680,681,5,47,0,0,681,682,5,
        33,0,0,682,71,1,0,0,0,683,684,5,48,0,0,684,685,5,30,0,0,685,686,
        5,43,0,0,686,73,1,0,0,0,687,688,5,41,0,0,688,689,5,42,0,0,689,690,
        5,19,0,0,690,691,5,28,0,0,691,692,5,48,0,0,692,693,5,47,0,0,693,
        694,5,42,0,0,694,695,5,19,0,0,695,696,5,43,0,0,696,697,5,42,0,0,
        697,698,5,46,0,0,698,699,5,46,0,0,699,700,5,32,0,0,700,701,5,46,
        0,0,701,702,5,46,0,0,702,75,1,0,0,0,703,704,5,41,0,0,704,705,5,42,
        0,0,705,706,5,19,0,0,706,707,5,46,0,0,707,708,5,47,0,0,708,709,5,
        28,0,0,709,710,5,45,0,0,710,711,5,47,0,0,711,712,5,19,0,0,712,713,
        5,42,0,0,713,714,5,43,0,0,714,715,5,47,0,0,715,77,1,0,0,0,716,717,
        5,30,0,0,717,718,5,45,0,0,718,79,1,0,0,0,719,720,5,39,0,0,720,721,
        5,33,0,0,721,81,1,0,0,0,722,723,5,30,0,0,723,724,5,45,0,0,724,725,
        5,39,0,0,725,726,5,33,0,0,726,83,1,0,0,0,727,728,5,28,0,0,728,729,
        5,41,0,0,729,730,5,52,0,0,730,731,5,30,0,0,731,732,5,45,0,0,732,
        733,5,39,0,0,733,734,5,33,0,0,734,85,1,0,0,0,735,736,5,28,0,0,736,
        737,5,41,0,0,737,738,5,52,0,0,738,87,1,0,0,0,739,740,5,39,0,0,740,
        741,5,36,0,0,741,742,5,40,0,0,742,743,5,36,0,0,743,744,5,47,0,0,
        744,745,5,19,0,0,745,746,5,40,0,0,746,747,5,28,0,0,747,748,5,47,
        0,0,748,749,5,30,0,0,749,750,5,35,0,0,750,89,1,0,0,0,751,752,5,39,
        0,0,752,753,5,36,0,0,753,754,5,40,0,0,754,755,5,36,0,0,755,756,5,
        47,0,0,756,757,5,19,0,0,757,758,5,45,0,0,758,759,5,32,0,0,759,760,
        5,30,0,0,760,761,5,48,0,0,761,762,5,45,0,0,762,763,5,46,0,0,763,
        764,5,36,0,0,764,765,5,42,0,0,765,766,5,41,0,0,766,91,1,0,0,0,767,
        768,5,29,0,0,768,769,5,46,0,0,769,770,5,45,0,0,770,771,5,19,0,0,
        771,772,5,28,0,0,772,773,5,41,0,0,773,774,5,52,0,0,774,775,5,30,
        0,0,775,776,5,45,0,0,776,777,5,39,0,0,777,778,5,33,0,0,778,93,1,
        0,0,0,779,780,5,29,0,0,780,781,5,46,0,0,781,782,5,45,0,0,782,783,
        5,19,0,0,783,784,5,48,0,0,784,785,5,41,0,0,785,786,5,36,0,0,786,
        787,5,30,0,0,787,788,5,42,0,0,788,789,5,31,0,0,789,790,5,32,0,0,
        790,95,1,0,0,0,791,792,5,28,0,0,792,793,5,30,0,0,793,794,5,30,0,
        0,794,795,5,32,0,0,795,796,5,43,0,0,796,797,5,47,0,0,797,97,1,0,
        0,0,798,802,5,33,0,0,799,800,5,28,0,0,800,801,5,36,0,0,801,803,5,
        39,0,0,802,799,1,0,0,0,802,803,1,0,0,0,803,99,1,0,0,0,804,805,5,
        40,0,0,805,806,5,28,0,0,806,807,5,45,0,0,807,808,5,38,0,0,808,101,
        1,0,0,0,809,810,5,30,0,0,810,811,5,42,0,0,811,812,5,40,0,0,812,813,
        5,40,0,0,813,814,5,36,0,0,814,815,5,47,0,0,815,103,1,0,0,0,816,817,
        5,43,0,0,817,818,5,45,0,0,818,819,5,48,0,0,819,820,5,41,0,0,820,
        821,5,32,0,0,821,105,1,0,0,0,822,823,5,46,0,0,823,824,5,38,0,0,824,
        825,5,36,0,0,825,826,5,43,0,0,826,107,1,0,0,0,827,828,5,47,0,0,828,
        829,5,35,0,0,829,830,5,32,0,0,830,831,5,41,0,0,831,109,1,0,0,0,77,
        111,118,122,128,132,154,178,184,186,188,194,196,214,225,250,259,
        265,273,288,295,300,302,308,321,327,332,337,347,354,360,362,367,
        369,379,395,401,407,409,415,417,419,430,438,443,448,450,458,467,
        481,483,492,507,521,523,536,540,548,555,565,567,571,577,583,588,
        592,600,608,612,621,631,638,643,660,665,672,674,802
    ]

class PCREParser ( Parser ):

    grammarFileName = "PCREParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\\'", "'$'", "'.'", "'['", "'^'", "'|'", 
                     "'?'", "'*'", "'+'", "'{'", "'}'", "'('", "')'", "']'", 
                     "'[:'", "':]'", "','", "'-'", "'_'", "'='", "'&'", 
                     "'<'", "'>'", "'''", "':'", "'#'", "'!'", "'A'", "'B'", 
                     "'C'", "'D'", "'E'", "'F'", "'G'", "'H'", "'I'", "'J'", 
                     "'K'", "'L'", "'M'", "'N'", "'O'", "'P'", "'Q'", "'R'", 
                     "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", "'Y'", "'Z'", 
                     "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", 
                     "'i'", "'j'", "'k'", "'l'", "'m'", "'n'", "'o'", "'p'", 
                     "'q'", "'r'", "'s'", "'t'", "'u'", "'v'", "'w'", "'x'", 
                     "'y'", "'z'", "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", 
                     "'6'", "'7'", "'8'", "'9'" ]

    symbolicNames = [ "<INVALID>", "BSlash", "Dollar", "Dot", "OBrack", 
                      "Caret", "Pipe", "QMark", "Star", "Plus", "OBrace", 
                      "CBrace", "OPar", "CPar", "CBrack", "OPosixBrack", 
                      "CPosixBrack", "Comma", "Dash", "UScore", "Eq", "Amp", 
                      "Lt", "Gt", "Quote", "Col", "Hash", "Excl", "Au", 
                      "Bu", "Cu", "Du", "Eu", "Fu", "Gu", "Hu", "Iu", "Ju", 
                      "Ku", "Lu", "Mu", "Nu", "Ou", "Pu", "Qu", "Ru", "Su", 
                      "Tu", "Uu", "Vu", "Wu", "Xu", "Yu", "Zu", "Al", "Bl", 
                      "Cl", "Dl", "El", "Fl", "Gl", "Hl", "Il", "Jl", "Kl", 
                      "Ll", "Ml", "Nl", "Ol", "Pl", "Ql", "Rl", "Sl", "Tl", 
                      "Ul", "Vl", "Wl", "Xl", "Yl", "Zl", "D0", "D1", "D2", 
                      "D3", "D4", "D5", "D6", "D7", "D8", "D9", "OTHER" ]

    RULE_pcre = 0
    RULE_alternation = 1
    RULE_expr = 2
    RULE_element = 3
    RULE_atom = 4
    RULE_capture = 5
    RULE_atomic_group = 6
    RULE_lookaround = 7
    RULE_backreference = 8
    RULE_subroutine_reference = 9
    RULE_conditional_pattern = 10
    RULE_comment = 11
    RULE_quantifier = 12
    RULE_option_setting = 13
    RULE_option_setting_flag = 14
    RULE_backtracking_control = 15
    RULE_callout = 16
    RULE_newline_conventions = 17
    RULE_character = 18
    RULE_character_type = 19
    RULE_character_class = 20
    RULE_character_class_atom = 21
    RULE_character_class_range = 22
    RULE_character_class_range_atom = 23
    RULE_posix_character_class = 24
    RULE_anchor = 25
    RULE_match_point_reset = 26
    RULE_quoting = 27
    RULE_digits = 28
    RULE_digit = 29
    RULE_hex = 30
    RULE_letters = 31
    RULE_letter = 32
    RULE_name = 33
    RULE_other = 34
    RULE_utf = 35
    RULE_ucp = 36
    RULE_no_auto_possess = 37
    RULE_no_start_opt = 38
    RULE_cr = 39
    RULE_lf = 40
    RULE_crlf = 41
    RULE_anycrlf = 42
    RULE_any = 43
    RULE_limit_match = 44
    RULE_limit_recursion = 45
    RULE_bsr_anycrlf = 46
    RULE_bsr_unicode = 47
    RULE_accept = 48
    RULE_fail = 49
    RULE_mark = 50
    RULE_commit = 51
    RULE_prune = 52
    RULE_skip = 53
    RULE_then = 54

    ruleNames =  [ "pcre", "alternation", "expr", "element", "atom", "capture", 
                   "atomic_group", "lookaround", "backreference", "subroutine_reference", 
                   "conditional_pattern", "comment", "quantifier", "option_setting", 
                   "option_setting_flag", "backtracking_control", "callout", 
                   "newline_conventions", "character", "character_type", 
                   "character_class", "character_class_atom", "character_class_range", 
                   "character_class_range_atom", "posix_character_class", 
                   "anchor", "match_point_reset", "quoting", "digits", "digit", 
                   "hex", "letters", "letter", "name", "other", "utf", "ucp", 
                   "no_auto_possess", "no_start_opt", "cr", "lf", "crlf", 
                   "anycrlf", "any", "limit_match", "limit_recursion", "bsr_anycrlf", 
                   "bsr_unicode", "accept", "fail", "mark", "commit", "prune", 
                   "skip", "then" ]

    EOF = Token.EOF
    BSlash=1
    Dollar=2
    Dot=3
    OBrack=4
    Caret=5
    Pipe=6
    QMark=7
    Star=8
    Plus=9
    OBrace=10
    CBrace=11
    OPar=12
    CPar=13
    CBrack=14
    OPosixBrack=15
    CPosixBrack=16
    Comma=17
    Dash=18
    UScore=19
    Eq=20
    Amp=21
    Lt=22
    Gt=23
    Quote=24
    Col=25
    Hash=26
    Excl=27
    Au=28
    Bu=29
    Cu=30
    Du=31
    Eu=32
    Fu=33
    Gu=34
    Hu=35
    Iu=36
    Ju=37
    Ku=38
    Lu=39
    Mu=40
    Nu=41
    Ou=42
    Pu=43
    Qu=44
    Ru=45
    Su=46
    Tu=47
    Uu=48
    Vu=49
    Wu=50
    Xu=51
    Yu=52
    Zu=53
    Al=54
    Bl=55
    Cl=56
    Dl=57
    El=58
    Fl=59
    Gl=60
    Hl=61
    Il=62
    Jl=63
    Kl=64
    Ll=65
    Ml=66
    Nl=67
    Ol=68
    Pl=69
    Ql=70
    Rl=71
    Sl=72
    Tl=73
    Ul=74
    Vl=75
    Wl=76
    Xl=77
    Yl=78
    Zl=79
    D0=80
    D1=81
    D2=82
    D3=83
    D4=84
    D5=85
    D6=86
    D7=87
    D8=88
    D9=89
    OTHER=90

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PcreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PCREParser.EOF, 0)

        def alternation(self):
            return self.getTypedRuleContext(PCREParser.AlternationContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_pcre

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcre" ):
                listener.enterPcre(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcre" ):
                listener.exitPcre(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPcre" ):
                return visitor.visitPcre(self)
            else:
                return visitor.visitChildren(self)




    def pcre(self):

        localctx = PCREParser.PcreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_pcre)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -75714) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134217727) != 0):
                self.state = 110
                self.alternation()


            self.state = 113
            self.match(PCREParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.ExprContext)
            else:
                return self.getTypedRuleContext(PCREParser.ExprContext,i)


        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Pipe)
            else:
                return self.getToken(PCREParser.Pipe, i)

        def getRuleIndex(self):
            return PCREParser.RULE_alternation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternation" ):
                listener.enterAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternation" ):
                listener.exitAlternation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlternation" ):
                return visitor.visitAlternation(self)
            else:
                return visitor.visitChildren(self)




    def alternation(self):

        localctx = PCREParser.AlternationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_alternation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 115
            self.expr()
            self.state = 122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 116
                self.match(PCREParser.Pipe)
                self.state = 118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -75714) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134217727) != 0):
                    self.state = 117
                    self.expr()


                self.state = 124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.ElementContext)
            else:
                return self.getTypedRuleContext(PCREParser.ElementContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = PCREParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 126 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 125
                self.element()
                self.state = 128 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -75714) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134217727) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PCREParser.AtomContext,0)


        def quantifier(self):
            return self.getTypedRuleContext(PCREParser.QuantifierContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = PCREParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            self.atom()
            self.state = 132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1920) != 0):
                self.state = 131
                self.quantifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def option_setting(self):
            return self.getTypedRuleContext(PCREParser.Option_settingContext,0)


        def backtracking_control(self):
            return self.getTypedRuleContext(PCREParser.Backtracking_controlContext,0)


        def callout(self):
            return self.getTypedRuleContext(PCREParser.CalloutContext,0)


        def capture(self):
            return self.getTypedRuleContext(PCREParser.CaptureContext,0)


        def atomic_group(self):
            return self.getTypedRuleContext(PCREParser.Atomic_groupContext,0)


        def lookaround(self):
            return self.getTypedRuleContext(PCREParser.LookaroundContext,0)


        def backreference(self):
            return self.getTypedRuleContext(PCREParser.BackreferenceContext,0)


        def subroutine_reference(self):
            return self.getTypedRuleContext(PCREParser.Subroutine_referenceContext,0)


        def conditional_pattern(self):
            return self.getTypedRuleContext(PCREParser.Conditional_patternContext,0)


        def comment(self):
            return self.getTypedRuleContext(PCREParser.CommentContext,0)


        def character(self):
            return self.getTypedRuleContext(PCREParser.CharacterContext,0)


        def character_type(self):
            return self.getTypedRuleContext(PCREParser.Character_typeContext,0)


        def character_class(self):
            return self.getTypedRuleContext(PCREParser.Character_classContext,0)


        def posix_character_class(self):
            return self.getTypedRuleContext(PCREParser.Posix_character_classContext,0)


        def letter(self):
            return self.getTypedRuleContext(PCREParser.LetterContext,0)


        def digit(self):
            return self.getTypedRuleContext(PCREParser.DigitContext,0)


        def anchor(self):
            return self.getTypedRuleContext(PCREParser.AnchorContext,0)


        def match_point_reset(self):
            return self.getTypedRuleContext(PCREParser.Match_point_resetContext,0)


        def quoting(self):
            return self.getTypedRuleContext(PCREParser.QuotingContext,0)


        def other(self):
            return self.getTypedRuleContext(PCREParser.OtherContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PCREParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_atom)
        try:
            self.state = 154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 134
                self.option_setting()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 135
                self.backtracking_control()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 136
                self.callout()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 137
                self.capture()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 138
                self.atomic_group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 139
                self.lookaround()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 140
                self.backreference()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 141
                self.subroutine_reference()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 142
                self.conditional_pattern()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 143
                self.comment()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 144
                self.character()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 145
                self.character_type()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 146
                self.character_class()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 147
                self.posix_character_class()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 148
                self.letter()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 149
                self.digit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 150
                self.anchor()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 151
                self.match_point_reset()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 152
                self.quoting()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 153
                self.other()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def alternation(self):
            return self.getTypedRuleContext(PCREParser.AlternationContext,0)


        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def Lt(self):
            return self.getToken(PCREParser.Lt, 0)

        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def Gt(self):
            return self.getToken(PCREParser.Gt, 0)

        def Quote(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Quote)
            else:
                return self.getToken(PCREParser.Quote, i)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def Col(self):
            return self.getToken(PCREParser.Col, 0)

        def Pipe(self):
            return self.getToken(PCREParser.Pipe, 0)

        def option_setting_flag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Option_setting_flagContext)
            else:
                return self.getTypedRuleContext(PCREParser.Option_setting_flagContext,i)


        def Dash(self):
            return self.getToken(PCREParser.Dash, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture" ):
                return visitor.visitCapture(self)
            else:
                return visitor.visitChildren(self)




    def capture(self):

        localctx = PCREParser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_capture)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.match(PCREParser.OPar)
            self.state = 196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]:
                self.state = 157
                self.alternation()
                pass
            elif token in [7]:
                self.state = 158
                self.match(PCREParser.QMark)
                self.state = 194
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 159
                    self.match(PCREParser.Lt)
                    self.state = 160
                    self.name()
                    self.state = 161
                    self.match(PCREParser.Gt)
                    self.state = 162
                    self.alternation()
                    pass
                elif token in [24]:
                    self.state = 164
                    self.match(PCREParser.Quote)
                    self.state = 165
                    self.name()
                    self.state = 166
                    self.match(PCREParser.Quote)
                    self.state = 167
                    self.alternation()
                    pass
                elif token in [43]:
                    self.state = 169
                    self.match(PCREParser.Pu)
                    self.state = 170
                    self.match(PCREParser.Lt)
                    self.state = 171
                    self.name()
                    self.state = 172
                    self.match(PCREParser.Gt)
                    self.state = 173
                    self.alternation()
                    pass
                elif token in [25, 37, 48, 62, 66, 72, 77]:
                    self.state = 188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 1134441793537) != 0):
                        self.state = 176 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 175
                            self.option_setting_flag()
                            self.state = 178 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 1134441793537) != 0)):
                                break

                        self.state = 186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==18:
                            self.state = 180
                            self.match(PCREParser.Dash)
                            self.state = 182 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 181
                                self.option_setting_flag()
                                self.state = 184 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 1134441793537) != 0)):
                                    break





                    self.state = 190
                    self.match(PCREParser.Col)
                    self.state = 191
                    self.alternation()
                    pass
                elif token in [6]:
                    self.state = 192
                    self.match(PCREParser.Pipe)
                    self.state = 193
                    self.alternation()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 198
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def Gt(self):
            return self.getToken(PCREParser.Gt, 0)

        def alternation(self):
            return self.getTypedRuleContext(PCREParser.AlternationContext,0)


        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_atomic_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic_group" ):
                listener.enterAtomic_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic_group" ):
                listener.exitAtomic_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_group" ):
                return visitor.visitAtomic_group(self)
            else:
                return visitor.visitChildren(self)




    def atomic_group(self):

        localctx = PCREParser.Atomic_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_atomic_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(PCREParser.OPar)
            self.state = 201
            self.match(PCREParser.QMark)
            self.state = 202
            self.match(PCREParser.Gt)
            self.state = 203
            self.alternation()
            self.state = 204
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookaroundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def alternation(self):
            return self.getTypedRuleContext(PCREParser.AlternationContext,0)


        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def Eq(self):
            return self.getToken(PCREParser.Eq, 0)

        def Excl(self):
            return self.getToken(PCREParser.Excl, 0)

        def Lt(self):
            return self.getToken(PCREParser.Lt, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_lookaround

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookaround" ):
                listener.enterLookaround(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookaround" ):
                listener.exitLookaround(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookaround" ):
                return visitor.visitLookaround(self)
            else:
                return visitor.visitChildren(self)




    def lookaround(self):

        localctx = PCREParser.LookaroundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lookaround)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(PCREParser.OPar)
            self.state = 207
            self.match(PCREParser.QMark)
            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 208
                self.match(PCREParser.Eq)
                pass

            elif la_ == 2:
                self.state = 209
                self.match(PCREParser.Excl)
                pass

            elif la_ == 3:
                self.state = 210
                self.match(PCREParser.Lt)
                self.state = 211
                self.match(PCREParser.Eq)
                pass

            elif la_ == 4:
                self.state = 212
                self.match(PCREParser.Lt)
                self.state = 213
                self.match(PCREParser.Excl)
                pass


            self.state = 216
            self.alternation()
            self.state = 217
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BackreferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSlash(self):
            return self.getToken(PCREParser.BSlash, 0)

        def Gl(self):
            return self.getToken(PCREParser.Gl, 0)

        def digits(self):
            return self.getTypedRuleContext(PCREParser.DigitsContext,0)


        def OBrace(self):
            return self.getToken(PCREParser.OBrace, 0)

        def CBrace(self):
            return self.getToken(PCREParser.CBrace, 0)

        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def Kl(self):
            return self.getToken(PCREParser.Kl, 0)

        def Lt(self):
            return self.getToken(PCREParser.Lt, 0)

        def Gt(self):
            return self.getToken(PCREParser.Gt, 0)

        def Quote(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Quote)
            else:
                return self.getToken(PCREParser.Quote, i)

        def Dash(self):
            return self.getToken(PCREParser.Dash, 0)

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def Eq(self):
            return self.getToken(PCREParser.Eq, 0)

        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_backreference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackreference" ):
                listener.enterBackreference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackreference" ):
                listener.exitBackreference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackreference" ):
                return visitor.visitBackreference(self)
            else:
                return visitor.visitChildren(self)




    def backreference(self):

        localctx = PCREParser.BackreferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_backreference)
        self._la = 0 # Token type
        try:
            self.state = 259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 219
                self.match(PCREParser.BSlash)
                self.state = 250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 220
                    self.match(PCREParser.Gl)
                    self.state = 221
                    self.digits()
                    pass

                elif la_ == 2:
                    self.state = 222
                    self.match(PCREParser.Gl)
                    self.state = 223
                    self.match(PCREParser.OBrace)
                    self.state = 225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==18:
                        self.state = 224
                        self.match(PCREParser.Dash)


                    self.state = 227
                    self.digits()
                    self.state = 228
                    self.match(PCREParser.CBrace)
                    pass

                elif la_ == 3:
                    self.state = 230
                    self.match(PCREParser.Gl)
                    self.state = 231
                    self.match(PCREParser.OBrace)
                    self.state = 232
                    self.name()
                    self.state = 233
                    self.match(PCREParser.CBrace)
                    pass

                elif la_ == 4:
                    self.state = 235
                    self.match(PCREParser.Kl)
                    self.state = 236
                    self.match(PCREParser.Lt)
                    self.state = 237
                    self.name()
                    self.state = 238
                    self.match(PCREParser.Gt)
                    pass

                elif la_ == 5:
                    self.state = 240
                    self.match(PCREParser.Kl)
                    self.state = 241
                    self.match(PCREParser.Quote)
                    self.state = 242
                    self.name()
                    self.state = 243
                    self.match(PCREParser.Quote)
                    pass

                elif la_ == 6:
                    self.state = 245
                    self.match(PCREParser.Kl)
                    self.state = 246
                    self.match(PCREParser.OBrace)
                    self.state = 247
                    self.name()
                    self.state = 248
                    self.match(PCREParser.CBrace)
                    pass


                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.match(PCREParser.OPar)
                self.state = 253
                self.match(PCREParser.QMark)
                self.state = 254
                self.match(PCREParser.Pu)
                self.state = 255
                self.match(PCREParser.Eq)
                self.state = 256
                self.name()
                self.state = 257
                self.match(PCREParser.CPar)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subroutine_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def digits(self):
            return self.getTypedRuleContext(PCREParser.DigitsContext,0)


        def Amp(self):
            return self.getToken(PCREParser.Amp, 0)

        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def Gt(self):
            return self.getToken(PCREParser.Gt, 0)

        def Plus(self):
            return self.getToken(PCREParser.Plus, 0)

        def Dash(self):
            return self.getToken(PCREParser.Dash, 0)

        def BSlash(self):
            return self.getToken(PCREParser.BSlash, 0)

        def Gl(self):
            return self.getToken(PCREParser.Gl, 0)

        def Lt(self):
            return self.getToken(PCREParser.Lt, 0)

        def Quote(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Quote)
            else:
                return self.getToken(PCREParser.Quote, i)

        def getRuleIndex(self):
            return PCREParser.RULE_subroutine_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutine_reference" ):
                listener.enterSubroutine_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutine_reference" ):
                listener.exitSubroutine_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutine_reference" ):
                return visitor.visitSubroutine_reference(self)
            else:
                return visitor.visitChildren(self)




    def subroutine_reference(self):

        localctx = PCREParser.Subroutine_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_subroutine_reference)
        self._la = 0 # Token type
        try:
            self.state = 302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.match(PCREParser.OPar)
                self.state = 262
                self.match(PCREParser.QMark)
                self.state = 273
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 263
                    self.match(PCREParser.Ru)
                    pass
                elif token in [9, 18, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89]:
                    self.state = 265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==9 or _la==18:
                        self.state = 264
                        _la = self._input.LA(1)
                        if not(_la==9 or _la==18):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 267
                    self.digits()
                    pass
                elif token in [21]:
                    self.state = 268
                    self.match(PCREParser.Amp)
                    self.state = 269
                    self.name()
                    pass
                elif token in [43]:
                    self.state = 270
                    self.match(PCREParser.Pu)
                    self.state = 271
                    self.match(PCREParser.Gt)
                    self.state = 272
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 275
                self.match(PCREParser.CPar)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.match(PCREParser.BSlash)
                self.state = 277
                self.match(PCREParser.Gl)
                self.state = 300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 278
                    self.match(PCREParser.Lt)
                    self.state = 279
                    self.name()
                    self.state = 280
                    self.match(PCREParser.Gt)
                    pass

                elif la_ == 2:
                    self.state = 282
                    self.match(PCREParser.Quote)
                    self.state = 283
                    self.name()
                    self.state = 284
                    self.match(PCREParser.Quote)
                    pass

                elif la_ == 3:
                    self.state = 286
                    self.match(PCREParser.Lt)
                    self.state = 288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==9 or _la==18:
                        self.state = 287
                        _la = self._input.LA(1)
                        if not(_la==9 or _la==18):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 290
                    self.digits()
                    self.state = 291
                    self.match(PCREParser.Gt)
                    pass

                elif la_ == 4:
                    self.state = 293
                    self.match(PCREParser.Quote)
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==9 or _la==18:
                        self.state = 294
                        _la = self._input.LA(1)
                        if not(_la==9 or _la==18):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 297
                    self.digits()
                    self.state = 298
                    self.match(PCREParser.Quote)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.no_pattern = None # ExprContext

        def OPar(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.OPar)
            else:
                return self.getToken(PCREParser.OPar, i)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.ExprContext)
            else:
                return self.getTypedRuleContext(PCREParser.ExprContext,i)


        def CPar(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.CPar)
            else:
                return self.getToken(PCREParser.CPar, i)

        def callout(self):
            return self.getTypedRuleContext(PCREParser.CalloutContext,0)


        def lookaround(self):
            return self.getTypedRuleContext(PCREParser.LookaroundContext,0)


        def Pipe(self):
            return self.getToken(PCREParser.Pipe, 0)

        def digits(self):
            return self.getTypedRuleContext(PCREParser.DigitsContext,0)


        def Lt(self):
            return self.getToken(PCREParser.Lt, 0)

        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def Gt(self):
            return self.getToken(PCREParser.Gt, 0)

        def Quote(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Quote)
            else:
                return self.getToken(PCREParser.Quote, i)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Amp(self):
            return self.getToken(PCREParser.Amp, 0)

        def Plus(self):
            return self.getToken(PCREParser.Plus, 0)

        def Dash(self):
            return self.getToken(PCREParser.Dash, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_conditional_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_pattern" ):
                listener.enterConditional_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_pattern" ):
                listener.exitConditional_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_pattern" ):
                return visitor.visitConditional_pattern(self)
            else:
                return visitor.visitChildren(self)




    def conditional_pattern(self):

        localctx = PCREParser.Conditional_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_conditional_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.match(PCREParser.OPar)
            self.state = 305
            self.match(PCREParser.QMark)
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 306
                self.match(PCREParser.OPar)
                self.state = 327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==9 or _la==18:
                        self.state = 307
                        _la = self._input.LA(1)
                        if not(_la==9 or _la==18):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 310
                    self.digits()
                    pass

                elif la_ == 2:
                    self.state = 311
                    self.match(PCREParser.Lt)
                    self.state = 312
                    self.name()
                    self.state = 313
                    self.match(PCREParser.Gt)
                    pass

                elif la_ == 3:
                    self.state = 315
                    self.match(PCREParser.Quote)
                    self.state = 316
                    self.name()
                    self.state = 317
                    self.match(PCREParser.Quote)
                    pass

                elif la_ == 4:
                    self.state = 319
                    self.match(PCREParser.Ru)
                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 1023) != 0):
                        self.state = 320
                        self.digits()


                    pass

                elif la_ == 5:
                    self.state = 323
                    self.match(PCREParser.Ru)
                    self.state = 324
                    self.match(PCREParser.Amp)
                    self.state = 325
                    self.name()
                    pass

                elif la_ == 6:
                    self.state = 326
                    self.name()
                    pass


                self.state = 329
                self.match(PCREParser.CPar)
                pass

            elif la_ == 2:
                self.state = 330
                self.callout()
                pass

            elif la_ == 3:
                self.state = 331
                self.lookaround()
                pass


            self.state = 334
            self.expr()
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 335
                self.match(PCREParser.Pipe)
                self.state = 336
                localctx.no_pattern = self.expr()


            self.state = 339
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def Hash(self):
            return self.getToken(PCREParser.Hash, 0)

        def CPar(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.CPar)
            else:
                return self.getToken(PCREParser.CPar, i)

        def getRuleIndex(self):
            return PCREParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = PCREParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(PCREParser.OPar)
            self.state = 342
            self.match(PCREParser.QMark)
            self.state = 343
            self.match(PCREParser.Hash)
            self.state = 345 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 344
                _la = self._input.LA(1)
                if _la <= 0 or _la==13:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 347 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8194) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134217727) != 0)):
                    break

            self.state = 349
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.possessive = None # Token
            self.lazy = None # Token
            self.from_ = None # DigitsContext
            self.to = None # DigitsContext

        def QMark(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.QMark)
            else:
                return self.getToken(PCREParser.QMark, i)

        def Star(self):
            return self.getToken(PCREParser.Star, 0)

        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Plus)
            else:
                return self.getToken(PCREParser.Plus, i)

        def OBrace(self):
            return self.getToken(PCREParser.OBrace, 0)

        def CBrace(self):
            return self.getToken(PCREParser.CBrace, 0)

        def digits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.DigitsContext)
            else:
                return self.getTypedRuleContext(PCREParser.DigitsContext,i)


        def Comma(self):
            return self.getToken(PCREParser.Comma, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifier" ):
                return visitor.visitQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def quantifier(self):

        localctx = PCREParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 896) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 354
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9]:
                    self.state = 352
                    localctx.possessive = self.match(PCREParser.Plus)
                    pass
                elif token in [7]:
                    self.state = 353
                    localctx.lazy = self.match(PCREParser.QMark)
                    pass
                elif token in [-1, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]:
                    pass
                else:
                    pass
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 356
                self.match(PCREParser.OBrace)
                self.state = 357
                localctx.from_ = self.digits()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 358
                    self.match(PCREParser.Comma)
                    self.state = 360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 1023) != 0):
                        self.state = 359
                        localctx.to = self.digits()




                self.state = 364
                self.match(PCREParser.CBrace)
                self.state = 367
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9]:
                    self.state = 365
                    localctx.possessive = self.match(PCREParser.Plus)
                    pass
                elif token in [7]:
                    self.state = 366
                    localctx.lazy = self.match(PCREParser.QMark)
                    pass
                elif token in [-1, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]:
                    pass
                else:
                    pass
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def Star(self):
            return self.getToken(PCREParser.Star, 0)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def utf(self):
            return self.getTypedRuleContext(PCREParser.UtfContext,0)


        def ucp(self):
            return self.getTypedRuleContext(PCREParser.UcpContext,0)


        def no_auto_possess(self):
            return self.getTypedRuleContext(PCREParser.No_auto_possessContext,0)


        def no_start_opt(self):
            return self.getTypedRuleContext(PCREParser.No_start_optContext,0)


        def newline_conventions(self):
            return self.getTypedRuleContext(PCREParser.Newline_conventionsContext,0)


        def limit_match(self):
            return self.getTypedRuleContext(PCREParser.Limit_matchContext,0)


        def Eq(self):
            return self.getToken(PCREParser.Eq, 0)

        def digits(self):
            return self.getTypedRuleContext(PCREParser.DigitsContext,0)


        def limit_recursion(self):
            return self.getTypedRuleContext(PCREParser.Limit_recursionContext,0)


        def bsr_anycrlf(self):
            return self.getTypedRuleContext(PCREParser.Bsr_anycrlfContext,0)


        def bsr_unicode(self):
            return self.getTypedRuleContext(PCREParser.Bsr_unicodeContext,0)


        def Dash(self):
            return self.getToken(PCREParser.Dash, 0)

        def D8(self):
            return self.getToken(PCREParser.D8, 0)

        def D1(self):
            return self.getToken(PCREParser.D1, 0)

        def D6(self):
            return self.getToken(PCREParser.D6, 0)

        def D3(self):
            return self.getToken(PCREParser.D3, 0)

        def D2(self):
            return self.getToken(PCREParser.D2, 0)

        def option_setting_flag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Option_setting_flagContext)
            else:
                return self.getTypedRuleContext(PCREParser.Option_setting_flagContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_option_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_setting" ):
                listener.enterOption_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_setting" ):
                listener.exitOption_setting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_setting" ):
                return visitor.visitOption_setting(self)
            else:
                return visitor.visitChildren(self)




    def option_setting(self):

        localctx = PCREParser.Option_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_option_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(PCREParser.OPar)
            self.state = 419
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.state = 372
                self.match(PCREParser.Star)
                self.state = 395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 373
                    self.utf()
                    self.state = 379
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [88]:
                        self.state = 374
                        self.match(PCREParser.D8)
                        pass
                    elif token in [81]:
                        self.state = 375
                        self.match(PCREParser.D1)
                        self.state = 376
                        self.match(PCREParser.D6)
                        pass
                    elif token in [83]:
                        self.state = 377
                        self.match(PCREParser.D3)
                        self.state = 378
                        self.match(PCREParser.D2)
                        pass
                    elif token in [13]:
                        pass
                    else:
                        pass
                    pass

                elif la_ == 2:
                    self.state = 381
                    self.ucp()
                    pass

                elif la_ == 3:
                    self.state = 382
                    self.no_auto_possess()
                    pass

                elif la_ == 4:
                    self.state = 383
                    self.no_start_opt()
                    pass

                elif la_ == 5:
                    self.state = 384
                    self.newline_conventions()
                    pass

                elif la_ == 6:
                    self.state = 385
                    self.limit_match()
                    self.state = 386
                    self.match(PCREParser.Eq)
                    self.state = 387
                    self.digits()
                    pass

                elif la_ == 7:
                    self.state = 389
                    self.limit_recursion()
                    self.state = 390
                    self.match(PCREParser.Eq)
                    self.state = 391
                    self.digits()
                    pass

                elif la_ == 8:
                    self.state = 393
                    self.bsr_anycrlf()
                    pass

                elif la_ == 9:
                    self.state = 394
                    self.bsr_unicode()
                    pass


                pass
            elif token in [7]:
                self.state = 397
                self.match(PCREParser.QMark)
                self.state = 417
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37, 48, 62, 66, 72, 77]:
                    self.state = 399 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 398
                        self.option_setting_flag()
                        self.state = 401 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 1134441793537) != 0)):
                            break

                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==18:
                        self.state = 403
                        self.match(PCREParser.Dash)
                        self.state = 405 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 404
                            self.option_setting_flag()
                            self.state = 407 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 1134441793537) != 0)):
                                break



                    pass
                elif token in [18]:
                    self.state = 411
                    self.match(PCREParser.Dash)
                    self.state = 413 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 412
                        self.option_setting_flag()
                        self.state = 415 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 1134441793537) != 0)):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 421
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_setting_flagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Il(self):
            return self.getToken(PCREParser.Il, 0)

        def Ju(self):
            return self.getToken(PCREParser.Ju, 0)

        def Ml(self):
            return self.getToken(PCREParser.Ml, 0)

        def Sl(self):
            return self.getToken(PCREParser.Sl, 0)

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Xl(self):
            return self.getToken(PCREParser.Xl, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_option_setting_flag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_setting_flag" ):
                listener.enterOption_setting_flag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_setting_flag" ):
                listener.exitOption_setting_flag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_setting_flag" ):
                return visitor.visitOption_setting_flag(self)
            else:
                return visitor.visitChildren(self)




    def option_setting_flag(self):

        localctx = PCREParser.Option_setting_flagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_option_setting_flag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & 1134441793537) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backtracking_controlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def Star(self):
            return self.getToken(PCREParser.Star, 0)

        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def accept(self):
            return self.getTypedRuleContext(PCREParser.AcceptContext,0)


        def fail(self):
            return self.getTypedRuleContext(PCREParser.FailContext,0)


        def Col(self):
            return self.getToken(PCREParser.Col, 0)

        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def commit(self):
            return self.getTypedRuleContext(PCREParser.CommitContext,0)


        def prune(self):
            return self.getTypedRuleContext(PCREParser.PruneContext,0)


        def skip(self):
            return self.getTypedRuleContext(PCREParser.SkipContext,0)


        def then(self):
            return self.getTypedRuleContext(PCREParser.ThenContext,0)


        def mark(self):
            return self.getTypedRuleContext(PCREParser.MarkContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_backtracking_control

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBacktracking_control" ):
                listener.enterBacktracking_control(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBacktracking_control" ):
                listener.exitBacktracking_control(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBacktracking_control" ):
                return visitor.visitBacktracking_control(self)
            else:
                return visitor.visitChildren(self)




    def backtracking_control(self):

        localctx = PCREParser.Backtracking_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_backtracking_control)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(PCREParser.OPar)
            self.state = 426
            self.match(PCREParser.Star)
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.state = 427
                self.accept()
                pass
            elif token in [33]:
                self.state = 428
                self.fail()
                pass
            elif token in [25, 40]:
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 429
                    self.mark()


                self.state = 432
                self.match(PCREParser.Col)
                self.state = 433
                self.name()
                pass
            elif token in [30]:
                self.state = 434
                self.commit()
                pass
            elif token in [43]:
                self.state = 435
                self.prune()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 436
                    self.match(PCREParser.Col)
                    self.state = 437
                    self.name()


                pass
            elif token in [46]:
                self.state = 440
                self.skip()
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 441
                    self.match(PCREParser.Col)
                    self.state = 442
                    self.name()


                pass
            elif token in [47]:
                self.state = 445
                self.then()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 446
                    self.match(PCREParser.Col)
                    self.state = 447
                    self.name()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 452
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalloutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPar(self):
            return self.getToken(PCREParser.OPar, 0)

        def QMark(self):
            return self.getToken(PCREParser.QMark, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def CPar(self):
            return self.getToken(PCREParser.CPar, 0)

        def digits(self):
            return self.getTypedRuleContext(PCREParser.DigitsContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_callout

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallout" ):
                listener.enterCallout(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallout" ):
                listener.exitCallout(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallout" ):
                return visitor.visitCallout(self)
            else:
                return visitor.visitChildren(self)




    def callout(self):

        localctx = PCREParser.CalloutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_callout)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(PCREParser.OPar)
            self.state = 455
            self.match(PCREParser.QMark)
            self.state = 456
            self.match(PCREParser.Cu)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 1023) != 0):
                self.state = 457
                self.digits()


            self.state = 460
            self.match(PCREParser.CPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Newline_conventionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cr(self):
            return self.getTypedRuleContext(PCREParser.CrContext,0)


        def lf(self):
            return self.getTypedRuleContext(PCREParser.LfContext,0)


        def crlf(self):
            return self.getTypedRuleContext(PCREParser.CrlfContext,0)


        def anycrlf(self):
            return self.getTypedRuleContext(PCREParser.AnycrlfContext,0)


        def any_(self):
            return self.getTypedRuleContext(PCREParser.AnyContext,0)


        def getRuleIndex(self):
            return PCREParser.RULE_newline_conventions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewline_conventions" ):
                listener.enterNewline_conventions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewline_conventions" ):
                listener.exitNewline_conventions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewline_conventions" ):
                return visitor.visitNewline_conventions(self)
            else:
                return visitor.visitChildren(self)




    def newline_conventions(self):

        localctx = PCREParser.Newline_conventionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_newline_conventions)
        try:
            self.state = 467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.cr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.lf()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 464
                self.crlf()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 465
                self.anycrlf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 466
                self.any_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSlash(self):
            return self.getToken(PCREParser.BSlash, 0)

        def Al(self):
            return self.getToken(PCREParser.Al, 0)

        def Cl(self):
            return self.getToken(PCREParser.Cl, 0)

        def El(self):
            return self.getToken(PCREParser.El, 0)

        def Fl(self):
            return self.getToken(PCREParser.Fl, 0)

        def Nl(self):
            return self.getToken(PCREParser.Nl, 0)

        def Rl(self):
            return self.getToken(PCREParser.Rl, 0)

        def Tl(self):
            return self.getToken(PCREParser.Tl, 0)

        def digit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.DigitContext)
            else:
                return self.getTypedRuleContext(PCREParser.DigitContext,i)


        def Ol(self):
            return self.getToken(PCREParser.Ol, 0)

        def OBrace(self):
            return self.getToken(PCREParser.OBrace, 0)

        def CBrace(self):
            return self.getToken(PCREParser.CBrace, 0)

        def Xl(self):
            return self.getToken(PCREParser.Xl, 0)

        def hex_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.HexContext)
            else:
                return self.getTypedRuleContext(PCREParser.HexContext,i)


        def Ul(self):
            return self.getToken(PCREParser.Ul, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter" ):
                listener.enterCharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter" ):
                listener.exitCharacter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter" ):
                return visitor.visitCharacter(self)
            else:
                return visitor.visitChildren(self)




    def character(self):

        localctx = PCREParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_character)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(PCREParser.BSlash)
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 470
                self.match(PCREParser.Al)
                pass

            elif la_ == 2:
                self.state = 471
                self.match(PCREParser.Cl)
                self.state = 472
                self.matchWildcard()
                pass

            elif la_ == 3:
                self.state = 473
                self.match(PCREParser.El)
                pass

            elif la_ == 4:
                self.state = 474
                self.match(PCREParser.Fl)
                pass

            elif la_ == 5:
                self.state = 475
                self.match(PCREParser.Nl)
                pass

            elif la_ == 6:
                self.state = 476
                self.match(PCREParser.Rl)
                pass

            elif la_ == 7:
                self.state = 477
                self.match(PCREParser.Tl)
                pass

            elif la_ == 8:
                self.state = 478
                self.digit()
                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self.digit()
                    self.state = 481
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 480
                        self.digit()




                pass

            elif la_ == 9:
                self.state = 485
                self.match(PCREParser.Ol)
                self.state = 486
                self.match(PCREParser.OBrace)
                self.state = 487
                self.digit()
                self.state = 488
                self.digit()
                self.state = 490 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 489
                    self.digit()
                    self.state = 492 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 1023) != 0)):
                        break

                self.state = 494
                self.match(PCREParser.CBrace)
                pass

            elif la_ == 10:
                self.state = 496
                self.match(PCREParser.Xl)
                self.state = 497
                self.hex_()
                self.state = 498
                self.hex_()
                pass

            elif la_ == 11:
                self.state = 500
                self.match(PCREParser.Xl)
                self.state = 501
                self.match(PCREParser.OBrace)
                self.state = 502
                self.hex_()
                self.state = 503
                self.hex_()
                self.state = 505 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 504
                    self.hex_()
                    self.state = 507 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & 4607182423027875903) != 0)):
                        break

                self.state = 509
                self.match(PCREParser.CBrace)
                pass

            elif la_ == 12:
                self.state = 511
                self.match(PCREParser.Ul)
                self.state = 512
                self.hex_()
                self.state = 513
                self.hex_()
                self.state = 514
                self.hex_()
                self.state = 515
                self.hex_()
                self.state = 521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 516
                    self.hex_()
                    self.state = 517
                    self.hex_()
                    self.state = 518
                    self.hex_()
                    self.state = 519
                    self.hex_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dot(self):
            return self.getToken(PCREParser.Dot, 0)

        def BSlash(self):
            return self.getToken(PCREParser.BSlash, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Dl(self):
            return self.getToken(PCREParser.Dl, 0)

        def Du(self):
            return self.getToken(PCREParser.Du, 0)

        def Hl(self):
            return self.getToken(PCREParser.Hl, 0)

        def Hu(self):
            return self.getToken(PCREParser.Hu, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Pl(self):
            return self.getToken(PCREParser.Pl, 0)

        def OBrace(self):
            return self.getToken(PCREParser.OBrace, 0)

        def name(self):
            return self.getTypedRuleContext(PCREParser.NameContext,0)


        def CBrace(self):
            return self.getToken(PCREParser.CBrace, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def letter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.LetterContext)
            else:
                return self.getTypedRuleContext(PCREParser.LetterContext,i)


        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Sl(self):
            return self.getToken(PCREParser.Sl, 0)

        def Su(self):
            return self.getToken(PCREParser.Su, 0)

        def Vl(self):
            return self.getToken(PCREParser.Vl, 0)

        def Vu(self):
            return self.getToken(PCREParser.Vu, 0)

        def Wl(self):
            return self.getToken(PCREParser.Wl, 0)

        def Wu(self):
            return self.getToken(PCREParser.Wu, 0)

        def Xu(self):
            return self.getToken(PCREParser.Xu, 0)

        def Caret(self):
            return self.getToken(PCREParser.Caret, 0)

        def Amp(self):
            return self.getToken(PCREParser.Amp, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_character_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_type" ):
                listener.enterCharacter_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_type" ):
                listener.exitCharacter_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_type" ):
                return visitor.visitCharacter_type(self)
            else:
                return visitor.visitChildren(self)




    def character_type(self):

        localctx = PCREParser.Character_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_character_type)
        self._la = 0 # Token type
        try:
            self.state = 567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.match(PCREParser.Dot)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.match(PCREParser.BSlash)
                self.state = 565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 527
                    self.match(PCREParser.Cu)
                    pass

                elif la_ == 2:
                    self.state = 528
                    self.match(PCREParser.Dl)
                    pass

                elif la_ == 3:
                    self.state = 529
                    self.match(PCREParser.Du)
                    pass

                elif la_ == 4:
                    self.state = 530
                    self.match(PCREParser.Hl)
                    pass

                elif la_ == 5:
                    self.state = 531
                    self.match(PCREParser.Hu)
                    pass

                elif la_ == 6:
                    self.state = 532
                    self.match(PCREParser.Nu)
                    pass

                elif la_ == 7:
                    self.state = 533
                    self.match(PCREParser.Pl)
                    self.state = 534
                    self.match(PCREParser.OBrace)
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5:
                        self.state = 535
                        self.match(PCREParser.Caret)


                    self.state = 538
                    self.name()
                    self.state = 540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 539
                        self.match(PCREParser.Amp)


                    self.state = 542
                    self.match(PCREParser.CBrace)
                    pass

                elif la_ == 8:
                    self.state = 544
                    self.match(PCREParser.Pu)
                    self.state = 545
                    self.match(PCREParser.OBrace)
                    self.state = 546
                    self.name()
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 547
                        self.match(PCREParser.Amp)


                    self.state = 550
                    self.match(PCREParser.CBrace)
                    pass

                elif la_ == 9:
                    self.state = 552
                    self.match(PCREParser.Pl)
                    self.state = 553
                    self.letter()
                    self.state = 555
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        self.state = 554
                        self.letter()


                    pass

                elif la_ == 10:
                    self.state = 557
                    self.match(PCREParser.Ru)
                    pass

                elif la_ == 11:
                    self.state = 558
                    self.match(PCREParser.Sl)
                    pass

                elif la_ == 12:
                    self.state = 559
                    self.match(PCREParser.Su)
                    pass

                elif la_ == 13:
                    self.state = 560
                    self.match(PCREParser.Vl)
                    pass

                elif la_ == 14:
                    self.state = 561
                    self.match(PCREParser.Vu)
                    pass

                elif la_ == 15:
                    self.state = 562
                    self.match(PCREParser.Wl)
                    pass

                elif la_ == 16:
                    self.state = 563
                    self.match(PCREParser.Wu)
                    pass

                elif la_ == 17:
                    self.state = 564
                    self.match(PCREParser.Xu)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_classContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.negate = None # Token

        def OBrack(self):
            return self.getToken(PCREParser.OBrack, 0)

        def CBrack(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.CBrack)
            else:
                return self.getToken(PCREParser.CBrack, i)

        def character_class_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Character_class_atomContext)
            else:
                return self.getTypedRuleContext(PCREParser.Character_class_atomContext,i)


        def Caret(self):
            return self.getToken(PCREParser.Caret, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_character_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_class" ):
                listener.enterCharacter_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_class" ):
                listener.exitCharacter_class(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_class" ):
                return visitor.visitCharacter_class(self)
            else:
                return visitor.visitChildren(self)




    def character_class(self):

        localctx = PCREParser.Character_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_character_class)
        self._la = 0 # Token type
        try:
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.match(PCREParser.OBrack)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 570
                    localctx.negate = self.match(PCREParser.Caret)


                self.state = 573
                self.match(PCREParser.CBrack)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -16386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134217727) != 0):
                    self.state = 574
                    self.character_class_atom()
                    self.state = 579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 580
                self.match(PCREParser.CBrack)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 581
                self.match(PCREParser.OBrack)
                self.state = 583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 582
                    localctx.negate = self.match(PCREParser.Caret)


                self.state = 586 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 585
                    self.character_class_atom()
                    self.state = 588 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -16386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134217727) != 0)):
                        break

                self.state = 590
                self.match(PCREParser.CBrack)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_class_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quoting(self):
            return self.getTypedRuleContext(PCREParser.QuotingContext,0)


        def character_class_range(self):
            return self.getTypedRuleContext(PCREParser.Character_class_rangeContext,0)


        def posix_character_class(self):
            return self.getTypedRuleContext(PCREParser.Posix_character_classContext,0)


        def character(self):
            return self.getTypedRuleContext(PCREParser.CharacterContext,0)


        def character_type(self):
            return self.getTypedRuleContext(PCREParser.Character_typeContext,0)


        def BSlash(self):
            return self.getToken(PCREParser.BSlash, 0)

        def CBrack(self):
            return self.getToken(PCREParser.CBrack, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_character_class_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_class_atom" ):
                listener.enterCharacter_class_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_class_atom" ):
                listener.exitCharacter_class_atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_class_atom" ):
                return visitor.visitCharacter_class_atom(self)
            else:
                return visitor.visitChildren(self)




    def character_class_atom(self):

        localctx = PCREParser.Character_class_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_character_class_atom)
        self._la = 0 # Token type
        try:
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.quoting()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.character_class_range()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 596
                self.posix_character_class()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 597
                self.character()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 598
                self.character_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 599
                _la = self._input.LA(1)
                if _la <= 0 or _la==1 or _la==14:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_class_rangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_class_range_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.Character_class_range_atomContext)
            else:
                return self.getTypedRuleContext(PCREParser.Character_class_range_atomContext,i)


        def Dash(self):
            return self.getToken(PCREParser.Dash, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_character_class_range

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_class_range" ):
                listener.enterCharacter_class_range(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_class_range" ):
                listener.exitCharacter_class_range(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_class_range" ):
                return visitor.visitCharacter_class_range(self)
            else:
                return visitor.visitChildren(self)




    def character_class_range(self):

        localctx = PCREParser.Character_class_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_character_class_range)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.character_class_range_atom()
            self.state = 603
            self.match(PCREParser.Dash)
            self.state = 604
            self.character_class_range_atom()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_class_range_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character(self):
            return self.getTypedRuleContext(PCREParser.CharacterContext,0)


        def CBrack(self):
            return self.getToken(PCREParser.CBrack, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_character_class_range_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_class_range_atom" ):
                listener.enterCharacter_class_range_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_class_range_atom" ):
                listener.exitCharacter_class_range_atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_class_range_atom" ):
                return visitor.visitCharacter_class_range_atom(self)
            else:
                return visitor.visitChildren(self)




    def character_class_range_atom(self):

        localctx = PCREParser.Character_class_range_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_character_class_range_atom)
        self._la = 0 # Token type
        try:
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.character()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                _la = self._input.LA(1)
                if _la <= 0 or _la==14:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Posix_character_classContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.negate = None # Token

        def OPosixBrack(self):
            return self.getToken(PCREParser.OPosixBrack, 0)

        def letters(self):
            return self.getTypedRuleContext(PCREParser.LettersContext,0)


        def CPosixBrack(self):
            return self.getToken(PCREParser.CPosixBrack, 0)

        def Caret(self):
            return self.getToken(PCREParser.Caret, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_posix_character_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosix_character_class" ):
                listener.enterPosix_character_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosix_character_class" ):
                listener.exitPosix_character_class(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosix_character_class" ):
                return visitor.visitPosix_character_class(self)
            else:
                return visitor.visitChildren(self)




    def posix_character_class(self):

        localctx = PCREParser.Posix_character_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_posix_character_class)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(PCREParser.OPosixBrack)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 611
                localctx.negate = self.match(PCREParser.Caret)


            self.state = 614
            self.letters()
            self.state = 615
            self.match(PCREParser.CPosixBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnchorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSlash(self):
            return self.getToken(PCREParser.BSlash, 0)

        def Bl(self):
            return self.getToken(PCREParser.Bl, 0)

        def Bu(self):
            return self.getToken(PCREParser.Bu, 0)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Zl(self):
            return self.getToken(PCREParser.Zl, 0)

        def Zu(self):
            return self.getToken(PCREParser.Zu, 0)

        def Gu(self):
            return self.getToken(PCREParser.Gu, 0)

        def Caret(self):
            return self.getToken(PCREParser.Caret, 0)

        def Dollar(self):
            return self.getToken(PCREParser.Dollar, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_anchor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnchor" ):
                listener.enterAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnchor" ):
                listener.exitAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnchor" ):
                return visitor.visitAnchor(self)
            else:
                return visitor.visitChildren(self)




    def anchor(self):

        localctx = PCREParser.AnchorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_anchor)
        self._la = 0 # Token type
        try:
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(PCREParser.BSlash)
                self.state = 618
                _la = self._input.LA(1)
                if not(((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & 2251799981457475) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(PCREParser.Caret)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 620
                self.match(PCREParser.Dollar)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_point_resetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSlash(self):
            return self.getToken(PCREParser.BSlash, 0)

        def Ku(self):
            return self.getToken(PCREParser.Ku, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_match_point_reset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_point_reset" ):
                listener.enterMatch_point_reset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_point_reset" ):
                listener.exitMatch_point_reset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_point_reset" ):
                return visitor.visitMatch_point_reset(self)
            else:
                return visitor.visitChildren(self)




    def match_point_reset(self):

        localctx = PCREParser.Match_point_resetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_match_point_reset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(PCREParser.BSlash)
            self.state = 624
            self.match(PCREParser.Ku)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSlash(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.BSlash)
            else:
                return self.getToken(PCREParser.BSlash, i)

        def Qu(self):
            return self.getToken(PCREParser.Qu, 0)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_quoting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuoting" ):
                listener.enterQuoting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuoting" ):
                listener.exitQuoting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuoting" ):
                return visitor.visitQuoting(self)
            else:
                return visitor.visitChildren(self)




    def quoting(self):

        localctx = PCREParser.QuotingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_quoting)
        try:
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.match(PCREParser.BSlash)
                self.state = 627
                self.match(PCREParser.Qu)
                self.state = 631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 628
                        self.matchWildcard() 
                    self.state = 633
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                self.state = 634
                self.match(PCREParser.BSlash)
                self.state = 635
                self.match(PCREParser.Eu)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 636
                self.match(PCREParser.BSlash)
                self.state = 637
                self.matchWildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DigitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def digit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.DigitContext)
            else:
                return self.getTypedRuleContext(PCREParser.DigitContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_digits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigits" ):
                listener.enterDigits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigits" ):
                listener.exitDigits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigits" ):
                return visitor.visitDigits(self)
            else:
                return visitor.visitChildren(self)




    def digits(self):

        localctx = PCREParser.DigitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_digits)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 640
                    self.digit()

                else:
                    raise NoViableAltException(self)
                self.state = 643 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DigitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def D0(self):
            return self.getToken(PCREParser.D0, 0)

        def D1(self):
            return self.getToken(PCREParser.D1, 0)

        def D2(self):
            return self.getToken(PCREParser.D2, 0)

        def D3(self):
            return self.getToken(PCREParser.D3, 0)

        def D4(self):
            return self.getToken(PCREParser.D4, 0)

        def D5(self):
            return self.getToken(PCREParser.D5, 0)

        def D6(self):
            return self.getToken(PCREParser.D6, 0)

        def D7(self):
            return self.getToken(PCREParser.D7, 0)

        def D8(self):
            return self.getToken(PCREParser.D8, 0)

        def D9(self):
            return self.getToken(PCREParser.D9, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_digit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigit" ):
                listener.enterDigit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigit" ):
                listener.exitDigit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigit" ):
                return visitor.visitDigit(self)
            else:
                return visitor.visitChildren(self)




    def digit(self):

        localctx = PCREParser.DigitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_digit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def digit(self):
            return self.getTypedRuleContext(PCREParser.DigitContext,0)


        def Al(self):
            return self.getToken(PCREParser.Al, 0)

        def Bl(self):
            return self.getToken(PCREParser.Bl, 0)

        def Cl(self):
            return self.getToken(PCREParser.Cl, 0)

        def Dl(self):
            return self.getToken(PCREParser.Dl, 0)

        def El(self):
            return self.getToken(PCREParser.El, 0)

        def Fl(self):
            return self.getToken(PCREParser.Fl, 0)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Bu(self):
            return self.getToken(PCREParser.Bu, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Du(self):
            return self.getToken(PCREParser.Du, 0)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_hex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex" ):
                listener.enterHex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex" ):
                listener.exitHex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHex" ):
                return visitor.visitHex(self)
            else:
                return visitor.visitChildren(self)




    def hex_(self):

        localctx = PCREParser.HexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_hex)
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80, 81, 82, 83, 84, 85, 86, 87, 88, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.digit()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 648
                self.match(PCREParser.Al)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 649
                self.match(PCREParser.Bl)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 4)
                self.state = 650
                self.match(PCREParser.Cl)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 5)
                self.state = 651
                self.match(PCREParser.Dl)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 6)
                self.state = 652
                self.match(PCREParser.El)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 7)
                self.state = 653
                self.match(PCREParser.Fl)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 8)
                self.state = 654
                self.match(PCREParser.Au)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 9)
                self.state = 655
                self.match(PCREParser.Bu)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 10)
                self.state = 656
                self.match(PCREParser.Cu)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 11)
                self.state = 657
                self.match(PCREParser.Du)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 12)
                self.state = 658
                self.match(PCREParser.Eu)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 13)
                self.state = 659
                self.match(PCREParser.Fu)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LettersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.LetterContext)
            else:
                return self.getTypedRuleContext(PCREParser.LetterContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_letters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetters" ):
                listener.enterLetters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetters" ):
                listener.exitLetters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetters" ):
                return visitor.visitLetters(self)
            else:
                return visitor.visitChildren(self)




    def letters(self):

        localctx = PCREParser.LettersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_letters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 662
                self.letter()
                self.state = 665 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & 2305843009213693441) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Al(self):
            return self.getToken(PCREParser.Al, 0)

        def Bl(self):
            return self.getToken(PCREParser.Bl, 0)

        def Cl(self):
            return self.getToken(PCREParser.Cl, 0)

        def Dl(self):
            return self.getToken(PCREParser.Dl, 0)

        def El(self):
            return self.getToken(PCREParser.El, 0)

        def Fl(self):
            return self.getToken(PCREParser.Fl, 0)

        def Gl(self):
            return self.getToken(PCREParser.Gl, 0)

        def Hl(self):
            return self.getToken(PCREParser.Hl, 0)

        def Il(self):
            return self.getToken(PCREParser.Il, 0)

        def Jl(self):
            return self.getToken(PCREParser.Jl, 0)

        def Kl(self):
            return self.getToken(PCREParser.Kl, 0)

        def Ll(self):
            return self.getToken(PCREParser.Ll, 0)

        def Ml(self):
            return self.getToken(PCREParser.Ml, 0)

        def Nl(self):
            return self.getToken(PCREParser.Nl, 0)

        def Ol(self):
            return self.getToken(PCREParser.Ol, 0)

        def Pl(self):
            return self.getToken(PCREParser.Pl, 0)

        def Ql(self):
            return self.getToken(PCREParser.Ql, 0)

        def Rl(self):
            return self.getToken(PCREParser.Rl, 0)

        def Sl(self):
            return self.getToken(PCREParser.Sl, 0)

        def Tl(self):
            return self.getToken(PCREParser.Tl, 0)

        def Ul(self):
            return self.getToken(PCREParser.Ul, 0)

        def Vl(self):
            return self.getToken(PCREParser.Vl, 0)

        def Wl(self):
            return self.getToken(PCREParser.Wl, 0)

        def Xl(self):
            return self.getToken(PCREParser.Xl, 0)

        def Yl(self):
            return self.getToken(PCREParser.Yl, 0)

        def Zl(self):
            return self.getToken(PCREParser.Zl, 0)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Bu(self):
            return self.getToken(PCREParser.Bu, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Du(self):
            return self.getToken(PCREParser.Du, 0)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def Gu(self):
            return self.getToken(PCREParser.Gu, 0)

        def Hu(self):
            return self.getToken(PCREParser.Hu, 0)

        def Iu(self):
            return self.getToken(PCREParser.Iu, 0)

        def Ju(self):
            return self.getToken(PCREParser.Ju, 0)

        def Ku(self):
            return self.getToken(PCREParser.Ku, 0)

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def Mu(self):
            return self.getToken(PCREParser.Mu, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Ou(self):
            return self.getToken(PCREParser.Ou, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def Qu(self):
            return self.getToken(PCREParser.Qu, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Su(self):
            return self.getToken(PCREParser.Su, 0)

        def Tu(self):
            return self.getToken(PCREParser.Tu, 0)

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Vu(self):
            return self.getToken(PCREParser.Vu, 0)

        def Wu(self):
            return self.getToken(PCREParser.Wu, 0)

        def Xu(self):
            return self.getToken(PCREParser.Xu, 0)

        def Yu(self):
            return self.getToken(PCREParser.Yu, 0)

        def Zu(self):
            return self.getToken(PCREParser.Zu, 0)

        def UScore(self):
            return self.getToken(PCREParser.UScore, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_letter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetter" ):
                listener.enterLetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetter" ):
                listener.exitLetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetter" ):
                return visitor.visitLetter(self)
            else:
                return visitor.visitChildren(self)




    def letter(self):

        localctx = PCREParser.LetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_letter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            _la = self._input.LA(1)
            if not(((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & 2305843009213693441) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.LetterContext)
            else:
                return self.getTypedRuleContext(PCREParser.LetterContext,i)


        def digit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PCREParser.DigitContext)
            else:
                return self.getTypedRuleContext(PCREParser.DigitContext,i)


        def getRuleIndex(self):
            return PCREParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = PCREParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.letter()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -267911168) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 67108863) != 0):
                self.state = 672
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]:
                    self.state = 670
                    self.letter()
                    pass
                elif token in [80, 81, 82, 83, 84, 85, 86, 87, 88, 89]:
                    self.state = 671
                    self.digit()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CBrace(self):
            return self.getToken(PCREParser.CBrace, 0)

        def CBrack(self):
            return self.getToken(PCREParser.CBrack, 0)

        def Comma(self):
            return self.getToken(PCREParser.Comma, 0)

        def Dash(self):
            return self.getToken(PCREParser.Dash, 0)

        def UScore(self):
            return self.getToken(PCREParser.UScore, 0)

        def Eq(self):
            return self.getToken(PCREParser.Eq, 0)

        def Amp(self):
            return self.getToken(PCREParser.Amp, 0)

        def Lt(self):
            return self.getToken(PCREParser.Lt, 0)

        def Gt(self):
            return self.getToken(PCREParser.Gt, 0)

        def Quote(self):
            return self.getToken(PCREParser.Quote, 0)

        def Col(self):
            return self.getToken(PCREParser.Col, 0)

        def Hash(self):
            return self.getToken(PCREParser.Hash, 0)

        def Excl(self):
            return self.getToken(PCREParser.Excl, 0)

        def OTHER(self):
            return self.getToken(PCREParser.OTHER, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_other

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther" ):
                listener.enterOther(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther" ):
                listener.exitOther(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOther" ):
                return visitor.visitOther(self)
            else:
                return visitor.visitChildren(self)




    def other(self):

        localctx = PCREParser.OtherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_other)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 268322816) != 0) or _la==90):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Tu(self):
            return self.getToken(PCREParser.Tu, 0)

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_utf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtf" ):
                listener.enterUtf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtf" ):
                listener.exitUtf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtf" ):
                return visitor.visitUtf(self)
            else:
                return visitor.visitChildren(self)




    def utf(self):

        localctx = PCREParser.UtfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_utf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(PCREParser.Uu)
            self.state = 680
            self.match(PCREParser.Tu)
            self.state = 681
            self.match(PCREParser.Fu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UcpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_ucp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUcp" ):
                listener.enterUcp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUcp" ):
                listener.exitUcp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUcp" ):
                return visitor.visitUcp(self)
            else:
                return visitor.visitChildren(self)




    def ucp(self):

        localctx = PCREParser.UcpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ucp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(PCREParser.Uu)
            self.state = 684
            self.match(PCREParser.Cu)
            self.state = 685
            self.match(PCREParser.Pu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_auto_possessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Ou(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Ou)
            else:
                return self.getToken(PCREParser.Ou, i)

        def UScore(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.UScore)
            else:
                return self.getToken(PCREParser.UScore, i)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Tu(self):
            return self.getToken(PCREParser.Tu, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def Su(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Su)
            else:
                return self.getToken(PCREParser.Su, i)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_no_auto_possess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_auto_possess" ):
                listener.enterNo_auto_possess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_auto_possess" ):
                listener.exitNo_auto_possess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_auto_possess" ):
                return visitor.visitNo_auto_possess(self)
            else:
                return visitor.visitChildren(self)




    def no_auto_possess(self):

        localctx = PCREParser.No_auto_possessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_no_auto_possess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(PCREParser.Nu)
            self.state = 688
            self.match(PCREParser.Ou)
            self.state = 689
            self.match(PCREParser.UScore)
            self.state = 690
            self.match(PCREParser.Au)
            self.state = 691
            self.match(PCREParser.Uu)
            self.state = 692
            self.match(PCREParser.Tu)
            self.state = 693
            self.match(PCREParser.Ou)
            self.state = 694
            self.match(PCREParser.UScore)
            self.state = 695
            self.match(PCREParser.Pu)
            self.state = 696
            self.match(PCREParser.Ou)
            self.state = 697
            self.match(PCREParser.Su)
            self.state = 698
            self.match(PCREParser.Su)
            self.state = 699
            self.match(PCREParser.Eu)
            self.state = 700
            self.match(PCREParser.Su)
            self.state = 701
            self.match(PCREParser.Su)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_start_optContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Ou(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Ou)
            else:
                return self.getToken(PCREParser.Ou, i)

        def UScore(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.UScore)
            else:
                return self.getToken(PCREParser.UScore, i)

        def Su(self):
            return self.getToken(PCREParser.Su, 0)

        def Tu(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Tu)
            else:
                return self.getToken(PCREParser.Tu, i)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_no_start_opt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_start_opt" ):
                listener.enterNo_start_opt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_start_opt" ):
                listener.exitNo_start_opt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNo_start_opt" ):
                return visitor.visitNo_start_opt(self)
            else:
                return visitor.visitChildren(self)




    def no_start_opt(self):

        localctx = PCREParser.No_start_optContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_no_start_opt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(PCREParser.Nu)
            self.state = 704
            self.match(PCREParser.Ou)
            self.state = 705
            self.match(PCREParser.UScore)
            self.state = 706
            self.match(PCREParser.Su)
            self.state = 707
            self.match(PCREParser.Tu)
            self.state = 708
            self.match(PCREParser.Au)
            self.state = 709
            self.match(PCREParser.Ru)
            self.state = 710
            self.match(PCREParser.Tu)
            self.state = 711
            self.match(PCREParser.UScore)
            self.state = 712
            self.match(PCREParser.Ou)
            self.state = 713
            self.match(PCREParser.Pu)
            self.state = 714
            self.match(PCREParser.Tu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_cr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCr" ):
                listener.enterCr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCr" ):
                listener.exitCr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCr" ):
                return visitor.visitCr(self)
            else:
                return visitor.visitChildren(self)




    def cr(self):

        localctx = PCREParser.CrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_cr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(PCREParser.Cu)
            self.state = 717
            self.match(PCREParser.Ru)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_lf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLf" ):
                listener.enterLf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLf" ):
                listener.exitLf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLf" ):
                return visitor.visitLf(self)
            else:
                return visitor.visitChildren(self)




    def lf(self):

        localctx = PCREParser.LfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_lf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(PCREParser.Lu)
            self.state = 720
            self.match(PCREParser.Fu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrlfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_crlf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrlf" ):
                listener.enterCrlf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrlf" ):
                listener.exitCrlf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCrlf" ):
                return visitor.visitCrlf(self)
            else:
                return visitor.visitChildren(self)




    def crlf(self):

        localctx = PCREParser.CrlfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_crlf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(PCREParser.Cu)
            self.state = 723
            self.match(PCREParser.Ru)
            self.state = 724
            self.match(PCREParser.Lu)
            self.state = 725
            self.match(PCREParser.Fu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnycrlfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Yu(self):
            return self.getToken(PCREParser.Yu, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_anycrlf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnycrlf" ):
                listener.enterAnycrlf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnycrlf" ):
                listener.exitAnycrlf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnycrlf" ):
                return visitor.visitAnycrlf(self)
            else:
                return visitor.visitChildren(self)




    def anycrlf(self):

        localctx = PCREParser.AnycrlfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_anycrlf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(PCREParser.Au)
            self.state = 728
            self.match(PCREParser.Nu)
            self.state = 729
            self.match(PCREParser.Yu)
            self.state = 730
            self.match(PCREParser.Cu)
            self.state = 731
            self.match(PCREParser.Ru)
            self.state = 732
            self.match(PCREParser.Lu)
            self.state = 733
            self.match(PCREParser.Fu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Yu(self):
            return self.getToken(PCREParser.Yu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_any

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny" ):
                listener.enterAny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny" ):
                listener.exitAny(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny" ):
                return visitor.visitAny(self)
            else:
                return visitor.visitChildren(self)




    def any_(self):

        localctx = PCREParser.AnyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_any)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(PCREParser.Au)
            self.state = 736
            self.match(PCREParser.Nu)
            self.state = 737
            self.match(PCREParser.Yu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def Iu(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Iu)
            else:
                return self.getToken(PCREParser.Iu, i)

        def Mu(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Mu)
            else:
                return self.getToken(PCREParser.Mu, i)

        def Tu(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Tu)
            else:
                return self.getToken(PCREParser.Tu, i)

        def UScore(self):
            return self.getToken(PCREParser.UScore, 0)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Hu(self):
            return self.getToken(PCREParser.Hu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_limit_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_match" ):
                listener.enterLimit_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_match" ):
                listener.exitLimit_match(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_match" ):
                return visitor.visitLimit_match(self)
            else:
                return visitor.visitChildren(self)




    def limit_match(self):

        localctx = PCREParser.Limit_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_limit_match)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(PCREParser.Lu)
            self.state = 740
            self.match(PCREParser.Iu)
            self.state = 741
            self.match(PCREParser.Mu)
            self.state = 742
            self.match(PCREParser.Iu)
            self.state = 743
            self.match(PCREParser.Tu)
            self.state = 744
            self.match(PCREParser.UScore)
            self.state = 745
            self.match(PCREParser.Mu)
            self.state = 746
            self.match(PCREParser.Au)
            self.state = 747
            self.match(PCREParser.Tu)
            self.state = 748
            self.match(PCREParser.Cu)
            self.state = 749
            self.match(PCREParser.Hu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_recursionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def Iu(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Iu)
            else:
                return self.getToken(PCREParser.Iu, i)

        def Mu(self):
            return self.getToken(PCREParser.Mu, 0)

        def Tu(self):
            return self.getToken(PCREParser.Tu, 0)

        def UScore(self):
            return self.getToken(PCREParser.UScore, 0)

        def Ru(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Ru)
            else:
                return self.getToken(PCREParser.Ru, i)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Su(self):
            return self.getToken(PCREParser.Su, 0)

        def Ou(self):
            return self.getToken(PCREParser.Ou, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_limit_recursion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_recursion" ):
                listener.enterLimit_recursion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_recursion" ):
                listener.exitLimit_recursion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_recursion" ):
                return visitor.visitLimit_recursion(self)
            else:
                return visitor.visitChildren(self)




    def limit_recursion(self):

        localctx = PCREParser.Limit_recursionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_limit_recursion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(PCREParser.Lu)
            self.state = 752
            self.match(PCREParser.Iu)
            self.state = 753
            self.match(PCREParser.Mu)
            self.state = 754
            self.match(PCREParser.Iu)
            self.state = 755
            self.match(PCREParser.Tu)
            self.state = 756
            self.match(PCREParser.UScore)
            self.state = 757
            self.match(PCREParser.Ru)
            self.state = 758
            self.match(PCREParser.Eu)
            self.state = 759
            self.match(PCREParser.Cu)
            self.state = 760
            self.match(PCREParser.Uu)
            self.state = 761
            self.match(PCREParser.Ru)
            self.state = 762
            self.match(PCREParser.Su)
            self.state = 763
            self.match(PCREParser.Iu)
            self.state = 764
            self.match(PCREParser.Ou)
            self.state = 765
            self.match(PCREParser.Nu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bsr_anycrlfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Bu(self):
            return self.getToken(PCREParser.Bu, 0)

        def Su(self):
            return self.getToken(PCREParser.Su, 0)

        def Ru(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Ru)
            else:
                return self.getToken(PCREParser.Ru, i)

        def UScore(self):
            return self.getToken(PCREParser.UScore, 0)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Yu(self):
            return self.getToken(PCREParser.Yu, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_bsr_anycrlf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBsr_anycrlf" ):
                listener.enterBsr_anycrlf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBsr_anycrlf" ):
                listener.exitBsr_anycrlf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBsr_anycrlf" ):
                return visitor.visitBsr_anycrlf(self)
            else:
                return visitor.visitChildren(self)




    def bsr_anycrlf(self):

        localctx = PCREParser.Bsr_anycrlfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_bsr_anycrlf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(PCREParser.Bu)
            self.state = 768
            self.match(PCREParser.Su)
            self.state = 769
            self.match(PCREParser.Ru)
            self.state = 770
            self.match(PCREParser.UScore)
            self.state = 771
            self.match(PCREParser.Au)
            self.state = 772
            self.match(PCREParser.Nu)
            self.state = 773
            self.match(PCREParser.Yu)
            self.state = 774
            self.match(PCREParser.Cu)
            self.state = 775
            self.match(PCREParser.Ru)
            self.state = 776
            self.match(PCREParser.Lu)
            self.state = 777
            self.match(PCREParser.Fu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bsr_unicodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Bu(self):
            return self.getToken(PCREParser.Bu, 0)

        def Su(self):
            return self.getToken(PCREParser.Su, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def UScore(self):
            return self.getToken(PCREParser.UScore, 0)

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Iu(self):
            return self.getToken(PCREParser.Iu, 0)

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Ou(self):
            return self.getToken(PCREParser.Ou, 0)

        def Du(self):
            return self.getToken(PCREParser.Du, 0)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_bsr_unicode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBsr_unicode" ):
                listener.enterBsr_unicode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBsr_unicode" ):
                listener.exitBsr_unicode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBsr_unicode" ):
                return visitor.visitBsr_unicode(self)
            else:
                return visitor.visitChildren(self)




    def bsr_unicode(self):

        localctx = PCREParser.Bsr_unicodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_bsr_unicode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(PCREParser.Bu)
            self.state = 780
            self.match(PCREParser.Su)
            self.state = 781
            self.match(PCREParser.Ru)
            self.state = 782
            self.match(PCREParser.UScore)
            self.state = 783
            self.match(PCREParser.Uu)
            self.state = 784
            self.match(PCREParser.Nu)
            self.state = 785
            self.match(PCREParser.Iu)
            self.state = 786
            self.match(PCREParser.Cu)
            self.state = 787
            self.match(PCREParser.Ou)
            self.state = 788
            self.match(PCREParser.Du)
            self.state = 789
            self.match(PCREParser.Eu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Cu(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Cu)
            else:
                return self.getToken(PCREParser.Cu, i)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def Tu(self):
            return self.getToken(PCREParser.Tu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_accept

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccept" ):
                listener.enterAccept(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccept" ):
                listener.exitAccept(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccept" ):
                return visitor.visitAccept(self)
            else:
                return visitor.visitChildren(self)




    def accept(self):

        localctx = PCREParser.AcceptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_accept)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(PCREParser.Au)
            self.state = 792
            self.match(PCREParser.Cu)
            self.state = 793
            self.match(PCREParser.Cu)
            self.state = 794
            self.match(PCREParser.Eu)
            self.state = 795
            self.match(PCREParser.Pu)
            self.state = 796
            self.match(PCREParser.Tu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Fu(self):
            return self.getToken(PCREParser.Fu, 0)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Iu(self):
            return self.getToken(PCREParser.Iu, 0)

        def Lu(self):
            return self.getToken(PCREParser.Lu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_fail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFail" ):
                listener.enterFail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFail" ):
                listener.exitFail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFail" ):
                return visitor.visitFail(self)
            else:
                return visitor.visitChildren(self)




    def fail(self):

        localctx = PCREParser.FailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(PCREParser.Fu)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 799
                self.match(PCREParser.Au)
                self.state = 800
                self.match(PCREParser.Iu)
                self.state = 801
                self.match(PCREParser.Lu)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Mu(self):
            return self.getToken(PCREParser.Mu, 0)

        def Au(self):
            return self.getToken(PCREParser.Au, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Ku(self):
            return self.getToken(PCREParser.Ku, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_mark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMark" ):
                listener.enterMark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMark" ):
                listener.exitMark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMark" ):
                return visitor.visitMark(self)
            else:
                return visitor.visitChildren(self)




    def mark(self):

        localctx = PCREParser.MarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_mark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(PCREParser.Mu)
            self.state = 805
            self.match(PCREParser.Au)
            self.state = 806
            self.match(PCREParser.Ru)
            self.state = 807
            self.match(PCREParser.Ku)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cu(self):
            return self.getToken(PCREParser.Cu, 0)

        def Ou(self):
            return self.getToken(PCREParser.Ou, 0)

        def Mu(self, i:int=None):
            if i is None:
                return self.getTokens(PCREParser.Mu)
            else:
                return self.getToken(PCREParser.Mu, i)

        def Iu(self):
            return self.getToken(PCREParser.Iu, 0)

        def Tu(self):
            return self.getToken(PCREParser.Tu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_commit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit" ):
                return visitor.visitCommit(self)
            else:
                return visitor.visitChildren(self)




    def commit(self):

        localctx = PCREParser.CommitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_commit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(PCREParser.Cu)
            self.state = 810
            self.match(PCREParser.Ou)
            self.state = 811
            self.match(PCREParser.Mu)
            self.state = 812
            self.match(PCREParser.Mu)
            self.state = 813
            self.match(PCREParser.Iu)
            self.state = 814
            self.match(PCREParser.Tu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PruneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def Ru(self):
            return self.getToken(PCREParser.Ru, 0)

        def Uu(self):
            return self.getToken(PCREParser.Uu, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_prune

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrune" ):
                listener.enterPrune(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrune" ):
                listener.exitPrune(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrune" ):
                return visitor.visitPrune(self)
            else:
                return visitor.visitChildren(self)




    def prune(self):

        localctx = PCREParser.PruneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_prune)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(PCREParser.Pu)
            self.state = 817
            self.match(PCREParser.Ru)
            self.state = 818
            self.match(PCREParser.Uu)
            self.state = 819
            self.match(PCREParser.Nu)
            self.state = 820
            self.match(PCREParser.Eu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Su(self):
            return self.getToken(PCREParser.Su, 0)

        def Ku(self):
            return self.getToken(PCREParser.Ku, 0)

        def Iu(self):
            return self.getToken(PCREParser.Iu, 0)

        def Pu(self):
            return self.getToken(PCREParser.Pu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkip" ):
                listener.enterSkip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkip" ):
                listener.exitSkip(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkip" ):
                return visitor.visitSkip(self)
            else:
                return visitor.visitChildren(self)




    def skip(self):

        localctx = PCREParser.SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(PCREParser.Su)
            self.state = 823
            self.match(PCREParser.Ku)
            self.state = 824
            self.match(PCREParser.Iu)
            self.state = 825
            self.match(PCREParser.Pu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Tu(self):
            return self.getToken(PCREParser.Tu, 0)

        def Hu(self):
            return self.getToken(PCREParser.Hu, 0)

        def Eu(self):
            return self.getToken(PCREParser.Eu, 0)

        def Nu(self):
            return self.getToken(PCREParser.Nu, 0)

        def getRuleIndex(self):
            return PCREParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThen" ):
                return visitor.visitThen(self)
            else:
                return visitor.visitChildren(self)




    def then(self):

        localctx = PCREParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_then)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(PCREParser.Tu)
            self.state = 828
            self.match(PCREParser.Hu)
            self.state = 829
            self.match(PCREParser.Eu)
            self.state = 830
            self.match(PCREParser.Nu)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





