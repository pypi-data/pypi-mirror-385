"""Test scilayout figure using SVG data."""

from pathlib import Path

import matplotlib.pyplot as plt
import pytest
from defusedxml.ElementTree import parse

import scilayout


@pytest.fixture
def fig():
    output_folder = Path("test_outputs")

    if not output_folder.exists():
        output_folder.mkdir(parents=True)

    scifig = scilayout.classes.SciFigure()

    yield scifig

    plt.close(scifig)
    for file in output_folder.iterdir():
        file.unlink()


class TestSVGExport:
    """Test scilayout figure using SVG data.

    The axes generated by scilayout in cm will have px values in the SVG file.
    """

    def test_svg_export(self, fig):
        # Generate the SVG file using your module's functionality
        fig.set_size_cm(10, 10)
        _ = fig.add_panel((2, 2, 7, 6))

        # Save the figure as an SVG
        output_path = "test_outputs/test_output.svg"
        fig.savefig(output_path)
        plt.close(fig)

        # Parse the SVG and check the coordinates
        tree = parse(output_path)
        root = tree.getroot()

        # Find the specific <g> element with id="axes_1"
        namespace = {"svg": "http://www.w3.org/2000/svg"}
        axes_group = root.find('.//svg:g[@id="axes_1"]', namespaces=namespace)
        assert axes_group is not None, "Group with id='axes_1' not found in SVG."

        # Find the first <path> within this group
        path = axes_group.find(".//svg:path", namespaces=namespace)
        assert path is not None, "Path not found in the axes group."

        # Extract and parse the 'd' attribute from the path
        path_data = path.attrib["d"]
        # For example, M 28.346457 85.03937 L 141.732283 85.03937
        # #            L 141.732283 56.692913 L 28.346457 56.692913 z
        coords = path_data.split()
        x0 = float(coords[1])
        y0 = float(coords[2])
        x1 = float(coords[4])
        y1 = float(coords[7])

        # Expected coordinates (convert from cm to px or use your expected values)
        expected_x0 = 56.692913  # Example
        expected_y0 = 170.07874  # Example
        expected_x1 = 198.425197  # Example
        expected_y1 = 198.425197  # Example

        # Assert coordinates are as expected (with some tolerance if needed)
        assert x0 == pytest.approx(expected_x0)
        assert y0 == pytest.approx(expected_y0)
        assert x1 == pytest.approx(expected_x1)
        assert y1 == pytest.approx(expected_y1)
