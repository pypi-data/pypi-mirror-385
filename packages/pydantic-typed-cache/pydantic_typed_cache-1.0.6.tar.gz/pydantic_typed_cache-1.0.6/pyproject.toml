[project]
name = "pydantic-typed-cache"
version = "1.0.6"
description = "Async cache library for Pydantic models without FastAPI dependencies"
authors = [{name = "Wonderweeks Company", email = "dev@mom-mom.net"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.13,<4.0"
keywords = ["cache", "pydantic", "async", "redis", "asyncio", "decorator"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: Pydantic",
    "Framework :: AsyncIO",
]
dependencies = [
    "pydantic>=2.11.7",
    "redis>=5.0.0",
    "pendulum>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/mom-mom/pydantic-cache"
Documentation = "https://github.com/mom-mom/pydantic-cache#readme"
Repository = "https://github.com/mom-mom/pydantic-cache.git"
Issues = "https://github.com/mom-mom/pydantic-cache/issues"
Inspiration = "https://github.com/long2ice/fastapi-cache"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.12.8",
    "pre-commit>=3.0.0",
]
orjson = [
    "orjson>=3.9.0",
]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 120
target-version = "py313"
fix = true
output-format = "grouped"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # Pylint
]
ignore = [
    "PLR0913",  # Too many arguments
    "PLR0911",  # Too many return statements
    "PLR2004",  # Magic value used in comparison
    "SIM108",   # Use ternary operator
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["pydantic_cache"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # Allow assert in tests
    "S324",   # Allow hashlib.md5 in tests
    "DTZ001", # Allow datetime without timezone in tests
    "DTZ005", # Allow datetime.now() without tz in tests
    "F841",   # Allow unused variables in tests (for testing side effects)
    "SIM116", # Allow consecutive if statements in tests
    "UP038",  # Allow legacy isinstance in tests
    "PLC0415", # Allow imports at function level in tests
]
"example.py" = [
    "ERA001", # Allow commented code in examples
    "PLC0415", # Allow import at module level in examples
]
"pydantic_cache/decorator.py" = [
    "PLC0415", # Allow late import to avoid circular dependencies
    "PLR0915", # Allow many statements in decorator functions
]
"pydantic_cache/coder.py" = [
    "PLC0415", # Allow late import for optional dependencies (orjson)
]
