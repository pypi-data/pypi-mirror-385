{"version":3,"file":"3386.f66a6e2066ce48d7.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-items-display-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-areas-display-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-areas-display.ts","webpack://knx-frontend/./node_modules/@lit-labs/observers/src/resize-controller.ts","webpack://knx-frontend/./node_modules/lit-html/src/directives/private-async-helpers.ts","webpack://knx-frontend/./node_modules/lit-html/src/directives/until.ts"],"sourcesContent":["import { ResizeController } from \"@lit-labs/observers/resize-controller\";\nimport { mdiDrag, mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { until } from \"lit/directives/until\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { orderCompare } from \"../common/string/compare\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-icon-button\";\nimport \"./ha-icon-next\";\nimport \"./ha-md-list\";\nimport \"./ha-md-list-item\";\nimport \"./ha-sortable\";\nimport \"./ha-svg-icon\";\n\nexport interface DisplayItem {\n  icon?: string | Promise<string | undefined>;\n  iconPath?: string;\n  value: string;\n  label: string;\n  description?: string;\n  disableSorting?: boolean;\n}\n\nexport interface DisplayValue {\n  order: string[];\n  hidden: string[];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-items-display-editor\": HaItemDisplayEditor;\n  }\n  interface HASSDomEvents {\n    \"item-display-navigate-clicked\": { value: string };\n  }\n}\n\n@customElement(\"ha-items-display-editor\")\nexport class HaItemDisplayEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public items: DisplayItem[] = [];\n\n  @property({ type: Boolean, attribute: \"show-navigation-button\" })\n  public showNavigationButton = false;\n\n  @property({ type: Boolean, attribute: \"dont-sort-visible\" })\n  public dontSortVisible = false;\n\n  @property({ attribute: false })\n  public value: DisplayValue = {\n    order: [],\n    hidden: [],\n  };\n\n  @property({ attribute: false }) public actionsRenderer?: (\n    item: DisplayItem\n  ) => TemplateResult<1> | typeof nothing;\n\n  /**\n   * Used to sort items by keyboard navigation.\n   */\n  @state() private _dragIndex: number | null = null;\n\n  private _showIcon = new ResizeController(this, {\n    callback: (entries) => entries[0]?.contentRect.width > 450,\n  });\n\n  protected render() {\n    const allItems = this._allItems(\n      this.items,\n      this.value.hidden,\n      this.value.order\n    );\n\n    const showIcon = this._showIcon.value;\n    return html`\n      <ha-sortable\n        draggable-selector=\".draggable\"\n        handle-selector=\".handle\"\n        @item-moved=${this._itemMoved}\n      >\n        <ha-md-list>\n          ${repeat(\n            allItems,\n            (item) => item.value,\n            (item: DisplayItem, idx) => {\n              const isVisible = !this.value.hidden.includes(item.value);\n              const {\n                label,\n                value,\n                description,\n                icon,\n                iconPath,\n                disableSorting,\n              } = item;\n              return html`\n                <ha-md-list-item\n                  type=\"button\"\n                  @click=${this.showNavigationButton\n                    ? this._navigate\n                    : undefined}\n                  .value=${value}\n                  class=${classMap({\n                    hidden: !isVisible,\n                    draggable: isVisible && !disableSorting,\n                    \"drag-selected\": this._dragIndex === idx,\n                  })}\n                  @keydown=${isVisible && !disableSorting\n                    ? this._listElementKeydown\n                    : undefined}\n                  .idx=${idx}\n                >\n                  <span slot=\"headline\">${label}</span>\n                  ${description\n                    ? html`<span slot=\"supporting-text\">${description}</span>`\n                    : nothing}\n                  ${!showIcon\n                    ? nothing\n                    : icon\n                      ? html`\n                          <ha-icon\n                            class=\"icon\"\n                            .icon=${until(icon, \"\")}\n                            slot=\"start\"\n                          ></ha-icon>\n                        `\n                      : iconPath\n                        ? html`\n                            <ha-svg-icon\n                              class=\"icon\"\n                              .path=${iconPath}\n                              slot=\"start\"\n                            ></ha-svg-icon>\n                          `\n                        : nothing}\n                  ${this.showNavigationButton\n                    ? html`\n                        <ha-icon-next slot=\"end\"></ha-icon-next>\n                        <div slot=\"end\" class=\"separator\"></div>\n                      `\n                    : nothing}\n                  ${this.actionsRenderer\n                    ? html`\n                        <div slot=\"end\" @click=${stopPropagation}>\n                          ${this.actionsRenderer(item)}\n                        </div>\n                      `\n                    : nothing}\n                  <ha-icon-button\n                    .path=${isVisible ? mdiEye : mdiEyeOff}\n                    slot=\"end\"\n                    .label=${this.hass.localize(\n                      `ui.components.items-display-editor.${isVisible ? \"hide\" : \"show\"}`,\n                      {\n                        label: label,\n                      }\n                    )}\n                    .value=${value}\n                    @click=${this._toggle}\n                  ></ha-icon-button>\n                  ${isVisible && !disableSorting\n                    ? html`\n                        <ha-svg-icon\n                          tabindex=${ifDefined(\n                            this.showNavigationButton ? \"0\" : undefined\n                          )}\n                          .idx=${idx}\n                          @keydown=${this.showNavigationButton\n                            ? this._dragHandleKeydown\n                            : undefined}\n                          class=\"handle\"\n                          .path=${mdiDrag}\n                          slot=\"end\"\n                        ></ha-svg-icon>\n                      `\n                    : html`<ha-svg-icon slot=\"end\"></ha-svg-icon>`}\n                </ha-md-list-item>\n              `;\n            }\n          )}\n        </ha-md-list>\n      </ha-sortable>\n    `;\n  }\n\n  private _toggle(ev) {\n    ev.stopPropagation();\n    this._dragIndex = null;\n    const value = ev.currentTarget.value;\n\n    const hiddenItems = this._hiddenItems(this.items, this.value.hidden);\n\n    const newHidden = hiddenItems.map((item) => item.value);\n\n    if (newHidden.includes(value)) {\n      newHidden.splice(newHidden.indexOf(value), 1);\n    } else {\n      newHidden.push(value);\n    }\n\n    const newVisibleItems = this._visibleItems(\n      this.items,\n      newHidden,\n      this.value.order\n    );\n    const newOrder = newVisibleItems.map((a) => a.value);\n\n    this.value = {\n      hidden: newHidden,\n      order: newOrder,\n    };\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n\n  private _itemMoved(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const { oldIndex, newIndex } = ev.detail;\n\n    this._moveItem(oldIndex, newIndex);\n  }\n\n  private _moveItem(oldIndex, newIndex) {\n    if (oldIndex === newIndex) {\n      return;\n    }\n\n    const visibleItems = this._visibleItems(\n      this.items,\n      this.value.hidden,\n      this.value.order\n    );\n    const newOrder = visibleItems.map((item) => item.value);\n\n    const movedItem = newOrder.splice(oldIndex, 1)[0];\n    newOrder.splice(newIndex, 0, movedItem);\n\n    this.value = {\n      ...this.value,\n      order: newOrder,\n    };\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n\n  private _navigate(ev) {\n    const value = ev.currentTarget.value;\n    fireEvent(this, \"item-display-navigate-clicked\", { value });\n    ev.stopPropagation();\n  }\n\n  private _visibleItems = memoizeOne(\n    (items: DisplayItem[], hidden: string[], order: string[]) => {\n      const compare = orderCompare(order);\n\n      const visibleItems = items.filter((item) => !hidden.includes(item.value));\n      if (this.dontSortVisible) {\n        return [\n          ...visibleItems.filter((item) => !item.disableSorting),\n          ...visibleItems.filter((item) => item.disableSorting),\n        ];\n      }\n\n      return visibleItems.sort((a, b) =>\n        a.disableSorting && !b.disableSorting ? -1 : compare(a.value, b.value)\n      );\n    }\n  );\n\n  private _allItems = memoizeOne(\n    (items: DisplayItem[], hidden: string[], order: string[]) => {\n      const visibleItems = this._visibleItems(items, hidden, order);\n      const hiddenItems = this._hiddenItems(items, hidden);\n      return [...visibleItems, ...hiddenItems];\n    }\n  );\n\n  private _hiddenItems = memoizeOne((items: DisplayItem[], hidden: string[]) =>\n    items.filter((item) => hidden.includes(item.value))\n  );\n\n  private _maxSortableIndex = memoizeOne(\n    (items: DisplayItem[], hidden: string[]) =>\n      items.filter(\n        (item) => !item.disableSorting && !hidden.includes(item.value)\n      ).length - 1\n  );\n\n  private _keyActivatedMove = (ev: KeyboardEvent, clearDragIndex = false) => {\n    const oldIndex = this._dragIndex;\n\n    if (ev.key === \"ArrowUp\") {\n      this._dragIndex = Math.max(0, this._dragIndex! - 1);\n    } else {\n      this._dragIndex = Math.min(\n        this._maxSortableIndex(this.items, this.value.hidden),\n        this._dragIndex! + 1\n      );\n    }\n    this._moveItem(oldIndex, this._dragIndex);\n\n    // refocus the item after the sort\n    setTimeout(async () => {\n      await this.updateComplete;\n      const selectedElement = this.shadowRoot?.querySelector(\n        `ha-md-list-item:nth-child(${this._dragIndex! + 1})`\n      ) as HTMLElement | null;\n      selectedElement?.focus();\n      if (clearDragIndex) {\n        this._dragIndex = null;\n      }\n    });\n  };\n\n  private _sortKeydown = (ev: KeyboardEvent) => {\n    if (\n      this._dragIndex !== null &&\n      (ev.key === \"ArrowUp\" || ev.key === \"ArrowDown\")\n    ) {\n      ev.preventDefault();\n      this._keyActivatedMove(ev);\n    } else if (this._dragIndex !== null && ev.key === \"Escape\") {\n      ev.preventDefault();\n      ev.stopPropagation();\n      this._dragIndex = null;\n      this.removeEventListener(\"keydown\", this._sortKeydown);\n    }\n  };\n\n  private _listElementKeydown = (ev: KeyboardEvent) => {\n    if (ev.altKey && (ev.key === \"ArrowUp\" || ev.key === \"ArrowDown\")) {\n      ev.preventDefault();\n      this._dragIndex = (ev.target as any).idx;\n      this._keyActivatedMove(ev, true);\n    } else if (\n      (!this.showNavigationButton && ev.key === \"Enter\") ||\n      ev.key === \" \"\n    ) {\n      this._dragHandleKeydown(ev);\n    }\n  };\n\n  private _dragHandleKeydown(ev: KeyboardEvent): void {\n    if (ev.key === \"Enter\" || ev.key === \" \") {\n      ev.preventDefault();\n      ev.stopPropagation();\n      if (this._dragIndex === null) {\n        this._dragIndex = (ev.target as any).idx;\n        this.addEventListener(\"keydown\", this._sortKeydown);\n      } else {\n        this.removeEventListener(\"keydown\", this._sortKeydown);\n        this._dragIndex = null;\n      }\n    }\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.removeEventListener(\"keydown\", this._sortKeydown);\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n    }\n    .handle {\n      cursor: move;\n      padding: 8px;\n      margin: -8px;\n    }\n    .separator {\n      width: 1px;\n      background-color: var(--divider-color);\n      height: 21px;\n      margin: 0 -4px;\n    }\n    ha-md-list {\n      padding: 0;\n    }\n    ha-md-list-item {\n      --md-list-item-top-space: 0;\n      --md-list-item-bottom-space: 0;\n      --md-list-item-leading-space: 8px;\n      --md-list-item-trailing-space: 8px;\n      --md-list-item-two-line-container-height: 48px;\n      --md-list-item-one-line-container-height: 48px;\n    }\n    ha-md-list-item.drag-selected {\n      --md-focus-ring-color: rgba(var(--rgb-accent-color), 0.6);\n      border-radius: 8px;\n      outline: solid;\n      outline-color: rgba(var(--rgb-accent-color), 0.6);\n      outline-offset: -2px;\n      outline-width: 2px;\n      background-color: rgba(var(--rgb-accent-color), 0.08);\n    }\n    ha-md-list-item ha-icon-button {\n      margin-left: -12px;\n      margin-right: -12px;\n    }\n    ha-md-list-item.hidden {\n      --md-list-item-label-text-color: var(--disabled-text-color);\n      --md-list-item-supporting-text-color: var(--disabled-text-color);\n    }\n    ha-md-list-item.hidden .icon {\n      color: var(--disabled-text-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-items-display-editor\": HaItemDisplayEditor;\n  }\n}\n","import { mdiTextureBox } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { getAreaContext } from \"../common/entity/context/get_area_context\";\nimport { areaCompare } from \"../data/area_registry\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-expansion-panel\";\nimport \"./ha-items-display-editor\";\nimport type { DisplayItem, DisplayValue } from \"./ha-items-display-editor\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\n\nexport interface AreasDisplayValue {\n  hidden?: string[];\n  order?: string[];\n}\n\n@customElement(\"ha-areas-display-editor\")\nexport class HaAreasDisplayEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public value?: AreasDisplayValue;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public expanded = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"show-navigation-button\" })\n  public showNavigationButton = false;\n\n  protected render(): TemplateResult {\n    const compare = areaCompare(this.hass.areas);\n\n    const areas = Object.values(this.hass.areas).sort((areaA, areaB) =>\n      compare(areaA.area_id, areaB.area_id)\n    );\n\n    const items: DisplayItem[] = areas.map((area) => {\n      const { floor } = getAreaContext(area, this.hass!);\n      return {\n        value: area.area_id,\n        label: area.name,\n        icon: area.icon ?? undefined,\n        iconPath: mdiTextureBox,\n        description: floor?.name,\n      };\n    });\n\n    const value: DisplayValue = {\n      order: this.value?.order ?? [],\n      hidden: this.value?.hidden ?? [],\n    };\n\n    return html`\n      <ha-expansion-panel\n        outlined\n        .header=${this.label}\n        .expanded=${this.expanded}\n      >\n        <ha-svg-icon slot=\"leading-icon\" .path=${mdiTextureBox}></ha-svg-icon>\n        <ha-items-display-editor\n          .hass=${this.hass}\n          .items=${items}\n          .value=${value}\n          @value-changed=${this._areaDisplayChanged}\n          .showNavigationButton=${this.showNavigationButton}\n        ></ha-items-display-editor>\n      </ha-expansion-panel>\n    `;\n  }\n\n  private async _areaDisplayChanged(ev) {\n    ev.stopPropagation();\n    const value = ev.detail.value as DisplayValue;\n    const newValue: AreasDisplayValue = {\n      ...this.value,\n      ...value,\n    };\n    if (newValue.hidden?.length === 0) {\n      delete newValue.hidden;\n    }\n    if (newValue.order?.length === 0) {\n      delete newValue.order;\n    }\n\n    fireEvent(this, \"value-changed\", { value: newValue });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-areas-display-editor\": HaAreasDisplayEditor;\n  }\n}\n","import { LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { AreasDisplaySelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-areas-display-editor\";\n\n@customElement(\"ha-selector-areas_display\")\nexport class HaAreasDisplaySelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: AreasDisplaySelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-areas-display-editor\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-areas-display-editor>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-areas_display\": HaAreasDisplaySelector;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {isServer} from 'lit-html/is-server.js';\nimport {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element/reactive-controller.js';\n\n/**\n * The callback function for a ResizeController.\n */\nexport type ResizeValueCallback<T = unknown> = (\n  ...args: Parameters<ResizeObserverCallback>\n) => T;\n\n/**\n * The config options for a ResizeController.\n */\nexport interface ResizeControllerConfig<T = unknown> {\n  /**\n   * Configuration object for the ResizeController.\n   */\n  config?: ResizeObserverOptions;\n  /**\n   * The element to observe. In addition to configuring the target here,\n   * the `observe` method can be called to observe additional targets. When not\n   * specified, the target defaults to the `host`. If set to `null`, no target\n   * is automatically observed. Only the configured target will be re-observed\n   * if the host connects again after unobserving via disconnection.\n   */\n  target?: Element | null;\n  /**\n   * The callback used to process detected changes into a value stored\n   * in the controller's `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  /**\n   * By default the `callback` is called without changes when a target is\n   * observed. This is done to help manage initial state, but this\n   * setup step can be skipped by setting this to true.\n   */\n  skipInitial?: boolean;\n}\n\n/**\n * ResizeController is a ReactiveController that integrates a ResizeObserver\n * with a ReactiveControllerHost's reactive update lifecycle. This is typically\n * a ReactiveElement or LitElement. ResizeObservers can be used to detect\n * size changes to DOM elements.\n *\n * The controller can specify a `target` element to observe and the\n * configuration options to pass to the ResizeObserver. The `observe`\n * method can be called to observe additional elements.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class ResizeController<T = unknown> implements ReactiveController {\n  private _host: ReactiveControllerHost;\n  private _targets = new Set<Element>();\n  private _config?: ResizeObserverOptions;\n  private _observer!: ResizeObserver;\n  private _skipInitial = false;\n  /**\n   * Flag used to help manage calling the `callback` when observe is called\n   * in addition to when a mutation occurs. This is done to help setup initial\n   * state and is performed async by requesting a host update and calling\n   * `handleChanges` once by checking and then resetting this flag.\n   */\n  private _unobservedUpdate = false;\n  /**\n   * The result of processing the observer's changes via the `callback`\n   * function.\n   */\n  value?: T;\n  /**\n   * Function that returns a value processed from the observer's changes.\n   * The result is stored in the `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  constructor(\n    host: ReactiveControllerHost & Element,\n    {target, config, callback, skipInitial}: ResizeControllerConfig<T>\n  ) {\n    this._host = host;\n    // Target defaults to `host` unless explicitly `null`.\n    if (target !== null) {\n      this._targets.add(target ?? host);\n    }\n    this._config = config;\n    this._skipInitial = skipInitial ?? this._skipInitial;\n    this.callback = callback;\n    if (isServer) {\n      return;\n    }\n    // Check browser support.\n    if (!window.ResizeObserver) {\n      console.warn(\n        `ResizeController error: browser does not support ResizeObserver.`\n      );\n      return;\n    }\n    this._observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      this.handleChanges(entries);\n      this._host.requestUpdate();\n    });\n    host.addController(this);\n  }\n\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  protected handleChanges(entries: ResizeObserverEntry[]) {\n    this.value = this.callback?.(entries, this._observer);\n  }\n\n  hostConnected() {\n    for (const target of this._targets) {\n      this.observe(target);\n    }\n  }\n\n  hostDisconnected() {\n    this.disconnect();\n  }\n\n  async hostUpdated() {\n    // Handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    if (!this._skipInitial && this._unobservedUpdate) {\n      this.handleChanges([]);\n    }\n    this._unobservedUpdate = false;\n  }\n\n  /**\n   * Observe the target element. The controller's `target` is automatically\n   * observed when the host connects.\n   * @param target Element to observe\n   */\n  observe(target: Element) {\n    this._targets.add(target);\n    this._observer.observe(target, this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n\n  /**\n   * Unobserve the target element.\n   * @param target Element to unobserve\n   */\n  unobserve(target: Element) {\n    this._targets.delete(target);\n    this._observer.unobserve(target);\n  }\n\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  protected disconnect() {\n    this._observer.disconnect();\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>): unknown {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"names":["HaItemDisplayEditor","LitElement","render","allItems","_allItems","items","value","hidden","order","showIcon","_showIcon","html","_itemMoved","repeat","item","idx","isVisible","includes","label","description","icon","iconPath","disableSorting","showNavigationButton","_navigate","undefined","classMap","draggable","this","_dragIndex","_listElementKeydown","nothing","until","actionsRenderer","stopPropagation","hass","localize","_toggle","ifDefined","_dragHandleKeydown","ev","currentTarget","newHidden","_hiddenItems","map","splice","indexOf","push","newOrder","_visibleItems","a","fireEvent","oldIndex","newIndex","detail","_moveItem","movedItem","key","preventDefault","target","addEventListener","_sortKeydown","removeEventListener","disconnectedCallback","super","args","dontSortVisible","ResizeController","callback","entries","contentRect","width","memoizeOne","compare","orderCompare","visibleItems","filter","sort","b","_maxSortableIndex","length","_keyActivatedMove","clearDragIndex","Math","max","min","setTimeout","updateComplete","selectedElement","shadowRoot","querySelector","focus","altKey","styles","css","attribute","type","Boolean","HaAreasDisplayEditor","areaCompare","areas","Object","values","areaA","areaB","area_id","area","floor","getAreaContext","name","mdiTextureBox","expanded","_areaDisplayChanged","newValue","disabled","required","HaAreasDisplaySelector","helper","t","handleChanges","s","u","hostConnected","observe","hostDisconnected","disconnect","hostUpdated","o","i","add","l","h","requestUpdate","unobserve","delete","constructor","config","e","skipInitial","Set","window","ResizeObserver","addController","console","warn","G","reconnect","deref","get","Y","pause","Promise","Z","resume","n","then","c","find","update","_$Cbt","r","_$CK","_$CX","isConnected","disconnected","_$Cwt","resolve","setValue","reconnected","arguments","m"],"mappings":"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"}