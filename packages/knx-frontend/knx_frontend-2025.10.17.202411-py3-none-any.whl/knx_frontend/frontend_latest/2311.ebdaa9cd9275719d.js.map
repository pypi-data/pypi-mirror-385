{"version":3,"file":"2311.ebdaa9cd9275719d.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/data/ws-templates.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/config-flow/previews/flow-preview-template.ts"],"sourcesContent":["import type { Connection, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport type { HomeAssistant } from \"../types\";\n\nexport interface RenderTemplateResult {\n  result: string;\n  listeners: TemplateListeners;\n}\n\nexport interface RenderTemplateError {\n  error: string;\n  level: \"ERROR\" | \"WARNING\";\n}\n\nexport interface TemplateListeners {\n  all: boolean;\n  domains: string[];\n  entities: string[];\n  time: boolean;\n}\n\nexport type TemplatePreview = TemplatePreviewState | TemplatePreviewError;\n\ninterface TemplatePreviewState {\n  state: string;\n  attributes: Record<string, any>;\n  listeners: TemplateListeners;\n}\n\ninterface TemplatePreviewError {\n  error: string;\n}\n\nexport const subscribeRenderTemplate = (\n  conn: Connection,\n  onChange: (result: RenderTemplateResult | RenderTemplateError) => void,\n  params: {\n    template: string;\n    entity_ids?: string | string[];\n    variables?: Record<string, unknown>;\n    timeout?: number;\n    strict?: boolean;\n    report_errors?: boolean;\n  }\n): Promise<UnsubscribeFunc> =>\n  conn.subscribeMessage(\n    (msg: RenderTemplateResult | RenderTemplateError) => onChange(msg),\n    {\n      type: \"render_template\",\n      ...params,\n    }\n  );\n\nexport const subscribePreviewTemplate = (\n  hass: HomeAssistant,\n  flow_id: string,\n  flow_type: \"config_flow\" | \"options_flow\",\n  user_input: Record<string, any>,\n  callback: (preview: TemplatePreview) => void\n): Promise<UnsubscribeFunc> =>\n  hass.connection.subscribeMessage(callback, {\n    type: \"template/start_preview\",\n    flow_id,\n    flow_type,\n    user_input,\n  });\n","import type { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { LitElement, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport type { FlowType } from \"../../../data/data_entry_flow\";\nimport type {\n  TemplateListeners,\n  TemplatePreview,\n} from \"../../../data/ws-templates\";\nimport { subscribePreviewTemplate } from \"../../../data/ws-templates\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./entity-preview-row\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\n\n@customElement(\"flow-preview-template\")\nclass FlowPreviewTemplate extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public flowType!: FlowType;\n\n  public handler!: string;\n\n  @property({ attribute: false }) public stepId!: string;\n\n  @property({ attribute: false }) public flowId!: string;\n\n  @property({ attribute: false }) public stepData!: Record<string, any>;\n\n  @state() private _preview?: HassEntity;\n\n  @state() private _listeners?: TemplateListeners;\n\n  @state() private _error?: string;\n\n  private _unsub?: Promise<UnsubscribeFunc>;\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub.then((unsub) => unsub());\n      this._unsub = undefined;\n    }\n  }\n\n  willUpdate(changedProps) {\n    if (changedProps.has(\"stepData\")) {\n      this._debouncedSubscribePreview();\n    }\n  }\n\n  protected render() {\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`;\n    }\n    return html`<entity-preview-row\n        .hass=${this.hass}\n        .stateObj=${this._preview}\n      ></entity-preview-row>\n      ${this._listeners?.time\n        ? html`\n            <p>\n              ${this.hass.localize(\"ui.dialogs.helper_settings.template.time\")}\n            </p>\n          `\n        : nothing}\n      ${!this._listeners\n        ? nothing\n        : this._listeners.all\n          ? html`\n              <p class=\"all_listeners\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.template.all_listeners\"\n                )}\n              </p>\n            `\n          : this._listeners.domains.length || this._listeners.entities.length\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.dialogs.helper_settings.template.listeners\"\n                  )}\n                </p>\n                <ul>\n                  ${this._listeners.domains\n                    .sort()\n                    .map(\n                      (domain) => html`\n                        <li>\n                          <b\n                            >${this.hass.localize(\n                              \"ui.dialogs.helper_settings.template.domain\"\n                            )}</b\n                          >: ${domain}\n                        </li>\n                      `\n                    )}\n                  ${this._listeners.entities\n                    .sort()\n                    .map(\n                      (entity_id) => html`\n                        <li>\n                          <b\n                            >${this.hass.localize(\n                              \"ui.dialogs.helper_settings.template.entity\"\n                            )}</b\n                          >: ${entity_id}\n                        </li>\n                      `\n                    )}\n                </ul>\n              `\n            : !this._listeners.time\n              ? html`<p class=\"all_listeners\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.helper_settings.template.no_listeners\"\n                  )}\n                </p>`\n              : nothing} `;\n  }\n\n  private _setPreview = (preview: TemplatePreview) => {\n    if (\"error\" in preview) {\n      this._error = preview.error;\n      this._preview = undefined;\n      return;\n    }\n    this._error = undefined;\n    this._listeners = preview.listeners;\n    const now = new Date().toISOString();\n    this._preview = {\n      entity_id: `${this.stepId}.___flow_preview___`,\n      last_changed: now,\n      last_updated: now,\n      context: { id: \"\", parent_id: null, user_id: null },\n      attributes: preview.attributes,\n      state: preview.state,\n    };\n  };\n\n  private _debouncedSubscribePreview = debounce(() => {\n    this._subscribePreview();\n  }, 250);\n\n  private async _subscribePreview() {\n    if (this._unsub) {\n      (await this._unsub)();\n      this._unsub = undefined;\n    }\n    if (this.flowType !== \"config_flow\" && this.flowType !== \"options_flow\") {\n      return;\n    }\n    try {\n      this._unsub = subscribePreviewTemplate(\n        this.hass,\n        this.flowId,\n        this.flowType,\n        this.stepData,\n        this._setPreview\n      );\n      await this._unsub;\n      fireEvent(this, \"set-flow-errors\", { errors: {} });\n    } catch (err: any) {\n      if (typeof err.message === \"string\") {\n        this._error = err.message;\n      } else {\n        this._error = undefined;\n        fireEvent(this, \"set-flow-errors\", err.message);\n      }\n      this._unsub = undefined;\n      this._preview = undefined;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"flow-preview-template\": FlowPreviewTemplate;\n  }\n}\n"],"names":["subscribePreviewTemplate","hass","flow_id","flow_type","user_input","callback","connection","subscribeMessage","type","FlowPreviewTemplate","LitElement","disconnectedCallback","super","this","_unsub","then","unsub","undefined","willUpdate","changedProps","has","_debouncedSubscribePreview","render","_error","html","_preview","_listeners","time","localize","nothing","all","domains","length","entities","sort","map","domain","entity_id","_subscribePreview","flowType","flowId","stepData","_setPreview","fireEvent","errors","err","message","args","preview","error","listeners","now","Date","toISOString","stepId","last_changed","last_updated","context","id","parent_id","user_id","attributes","state","debounce","attribute"],"mappings":"kJAgCO,MAoBPA,EAAAA,CAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IAAAJ,EAAAK,WAAAC,iBAAAF,EAAA,CAQIG,KAAA,yBACAN,UACAC,YACAC,c,+LChDJ,MAAAK,UAAAC,EAAAA,GAsBEC,oBAAAA,GACEC,MAAAD,uBACIE,KAAJC,SACED,KAAAC,OAAAC,MAAAC,GAAAA,MACAH,KAAAC,YAAAG,EAEJ,CAEAC,UAAAA,CAAAC,GACEA,EAAAC,IAAA,aACEP,KAAAQ,4BAEJ,CAEUC,MAAAA,GACR,OAAIT,KAAJU,OACEC,EAAAA,EAAA,qCAAAD,oBAEFC,EAAAA,EAAA;gBACU,KAAAvB;oBACI,KAAAwB;;QAEZ,KAAAC,YAAAC,KAAAH,EAAAA,EAAA;;gBAGQ,KAAAvB,KAAA2B,SAAA;;YAEJC,EAAAA;QAEJ,KAAAH,WAAA,KAAAA,WAAAI,IAAAN,EAAAA,EAAA;;kBAKU,KAAAvB,KAAA2B,SAAA;;cAIJ,KAAAF,WAAAK,QAAAC,QAAA,KAAAN,WAAAO,SAAAD,OAAAR,EAAAA,EAAA;;oBAIM,KAAAvB,KAAA2B,SAAA;;;oBAKA,KAAAF,WAAAK,QAAAG,OAAAC,KAAAC,GAAAZ,EAAAA,EAAA;;;+BAMW,KAAAvB,KAAA2B,SAAA;+BAGAQ;;;oBAIX,KAAAV,WAAAO,SAAAC,OAAAC,KAAAE,GAAAb,EAAAA,EAAA;;;+BAMW,KAAAvB,KAAA2B,SAAA;+BAGAS;;;;gBAKf,KAAAX,WAAAC,KAMME,EAAAA,GANNL,EAAAA,EAAA;oBAGI,KAAAvB,KAAA2B,SAAA;sBAhDZC,EAAAA,KAqDJ,CAyBA,uBAAAS,GAKE,GAJIzB,KAAJC,gBACG,KAAAA,UACDD,KAAAC,YAAAG,GAEF,gBAAIJ,KAAJ0B,UAAA,sBAAAA,SAGA,IACE1B,KAAAC,QAAAd,EAAAA,EAAAA,GAAAa,KAAAZ,KAAAY,KAAA2B,OAAA3B,KAAA0B,SAAA1B,KAAA4B,SAAA5B,KAAA6B,mBAOM7B,KAANC,QACA6B,EAAAA,EAAAA,GAAA,wBAAqCC,OAAA,IACvC,CAAE,MAAFC,GACE,iBAAAA,EAAAC,QACEjC,KAAAU,OAAAsB,EAAAC,SAEAjC,KAAAU,YAAAN,GACA0B,EAAAA,EAAAA,GAAA,uBAAAE,EAAAC,UAEFjC,KAAAC,YAAAG,EACAJ,KAAAY,cAAAR,CACF,CACF,C,kBA7JF,SAAA8B,GAAA,KAAAL,YAAAM,IA2GI,GAAI,UAAJA,EAGE,OAFAnC,KAAAU,OAAAyB,EAAAC,WACApC,KAAAY,cAAAR,GAGFJ,KAAAU,YAAAN,EACAJ,KAAAa,WAAAsB,EAAAE,UACA,MAAAC,GAAA,IAAAC,MAAAC,cACAxC,KAAAY,SAAA,CACEY,UAAA,QAAAiB,4BACAC,aAAAJ,EACAK,aAAAL,EACAM,QAAA,CAAWC,GAAA,GAAQC,UAAA,KAAiBC,QAAA,MACpCC,WAAAb,EAAAa,WACAC,MAAAd,EAAAc,MACD,EACH,KAAAzC,4BAAA0C,EAAAA,EAAAA,IAAA,KAGElD,KAAAyB,mBAAA,GACC,I,8BA7HS0B,WAAA,K,uDAEAA,WAAA,K,2DAIAA,WAAA,K,yDAEAA,WAAA,K,yDAEAA,WAAA,K"}