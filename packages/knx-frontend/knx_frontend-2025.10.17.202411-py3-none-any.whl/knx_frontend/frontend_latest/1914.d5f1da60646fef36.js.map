{"version":3,"file":"1914.d5f1da60646fef36.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/string/title-case.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-navigation-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/lovelace/config/types.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-navigation.ts"],"sourcesContent":["export const titleCase = (s) =>\n  s.replace(/^_*(.)|_+(.)/g, (_s, c, d) =>\n    c ? c.toUpperCase() : \" \" + d.toUpperCase()\n  );\n","import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { titleCase } from \"../common/string/title-case\";\nimport { fetchConfig } from \"../data/lovelace/config/types\";\nimport type { LovelaceViewRawConfig } from \"../data/lovelace/config/view\";\nimport type { HomeAssistant, PanelInfo, ValueChangedEvent } from \"../types\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-combo-box-item\";\nimport \"./ha-icon\";\n\ninterface NavigationItem {\n  path: string;\n  icon: string;\n  title: string;\n}\n\nconst DEFAULT_ITEMS: NavigationItem[] = [];\n\nconst rowRenderer: ComboBoxLitRenderer<NavigationItem> = (item) => html`\n  <ha-combo-box-item type=\"button\">\n    <ha-icon .icon=${item.icon} slot=\"start\"></ha-icon>\n    <span slot=\"headline\">${item.title || item.path}</span>\n    ${item.title\n      ? html`<span slot=\"supporting-text\">${item.path}</span>`\n      : nothing}\n  </ha-combo-box-item>\n`;\n\nconst createViewNavigationItem = (\n  prefix: string,\n  view: LovelaceViewRawConfig,\n  index: number\n) => ({\n  path: `/${prefix}/${view.path ?? index}`,\n  icon: view.icon ?? \"mdi:view-compact\",\n  title: view.title ?? (view.path ? titleCase(view.path) : `${index}`),\n});\n\nconst createPanelNavigationItem = (hass: HomeAssistant, panel: PanelInfo) => ({\n  path: `/${panel.url_path}`,\n  icon: panel.icon ?? \"mdi:view-dashboard\",\n  title:\n    panel.url_path === hass.defaultPanel\n      ? hass.localize(\"panel.states\")\n      : hass.localize(`panel.${panel.title}`) ||\n        panel.title ||\n        (panel.url_path ? titleCase(panel.url_path) : \"\"),\n});\n\n@customElement(\"ha-navigation-picker\")\nexport class HaNavigationPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _opened = false;\n\n  private navigationItemsLoaded = false;\n\n  private navigationItems: NavigationItem[] = DEFAULT_ITEMS;\n\n  @query(\"ha-combo-box\", true) private comboBox!: HaComboBox;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"path\"\n        item-label-path=\"path\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${this.navigationItems}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private async _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !this.navigationItemsLoaded) {\n      this._loadNavigationItems();\n    }\n  }\n\n  private async _loadNavigationItems() {\n    this.navigationItemsLoaded = true;\n\n    const panels = Object.entries(this.hass!.panels).map(([id, panel]) => ({\n      id,\n      ...panel,\n    }));\n    const lovelacePanels = panels.filter(\n      (panel) => panel.component_name === \"lovelace\"\n    );\n\n    const viewConfigs = await Promise.all(\n      lovelacePanels.map((panel) =>\n        fetchConfig(\n          this.hass!.connection,\n          // path should be null to fetch default lovelace panel\n          panel.url_path === \"lovelace\" ? null : panel.url_path,\n          true\n        )\n          .then((config) => [panel.id, config] as [string, typeof config])\n          .catch((_) => [panel.id, undefined] as [string, undefined])\n      )\n    );\n\n    const panelViewConfig = new Map(viewConfigs);\n\n    this.navigationItems = [];\n\n    for (const panel of panels) {\n      this.navigationItems.push(createPanelNavigationItem(this.hass!, panel));\n\n      const config = panelViewConfig.get(panel.id);\n\n      if (!config || !(\"views\" in config)) continue;\n\n      config.views.forEach((view, index) =>\n        this.navigationItems.push(\n          createViewNavigationItem(panel.url_path, view, index)\n        )\n      );\n    }\n\n    this.comboBox.filteredItems = this.navigationItems;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !this._opened || changedProps.has(\"_opened\");\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: NavigationItem[] = [];\n\n      this.navigationItems.forEach((item) => {\n        if (\n          item.path.toLowerCase().includes(filterString) ||\n          item.title.toLowerCase().includes(filterString)\n        ) {\n          filteredItems.push(item);\n        }\n      });\n\n      if (filteredItems.length > 0) {\n        this.comboBox.filteredItems = filteredItems;\n      } else {\n        this.comboBox.filteredItems = [];\n      }\n    } else {\n      this.comboBox.filteredItems = this.navigationItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static styles = css`\n    ha-icon,\n    ha-svg-icon {\n      color: var(--primary-text-color);\n      position: relative;\n      bottom: 0px;\n    }\n    *[slot=\"prefix\"] {\n      margin-right: 8px;\n      margin-inline-end: 8px;\n      margin-inline-start: initial;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-navigation-picker\": HaNavigationPicker;\n  }\n}\n","import type { Connection } from \"home-assistant-js-websocket\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { LovelaceResource } from \"../resource\";\nimport type { LovelaceStrategyConfig } from \"./strategy\";\nimport type { LovelaceViewRawConfig } from \"./view\";\n\nexport interface LovelaceDashboardBaseConfig {}\n\nexport interface LovelaceConfig extends LovelaceDashboardBaseConfig {\n  background?: string;\n  views: LovelaceViewRawConfig[];\n}\n\nexport interface LovelaceDashboardStrategyConfig\n  extends LovelaceDashboardBaseConfig {\n  strategy: LovelaceStrategyConfig;\n}\n\nexport interface LegacyLovelaceConfig extends LovelaceConfig {\n  resources?: LovelaceResource[];\n}\n\nexport type LovelaceRawConfig =\n  | LovelaceConfig\n  | LovelaceDashboardStrategyConfig;\n\nexport function isStrategyDashboard(\n  config: LovelaceRawConfig\n): config is LovelaceDashboardStrategyConfig {\n  return \"strategy\" in config;\n}\n\nexport const fetchConfig = (\n  conn: Connection,\n  urlPath: string | null,\n  force: boolean\n): Promise<LovelaceRawConfig> =>\n  conn.sendMessagePromise({\n    type: \"lovelace/config\",\n    url_path: urlPath,\n    force,\n  });\n\nexport const saveConfig = (\n  hass: HomeAssistant,\n  urlPath: string | null,\n  config: LovelaceRawConfig\n): Promise<void> =>\n  hass.callWS({\n    type: \"lovelace/config/save\",\n    url_path: urlPath,\n    config,\n  });\n\nexport const deleteConfig = (\n  hass: HomeAssistant,\n  urlPath: string | null\n): Promise<void> =>\n  hass.callWS({\n    type: \"lovelace/config/delete\",\n    url_path: urlPath,\n  });\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { NavigationSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-navigation-picker\";\n\n@customElement(\"ha-selector-navigation\")\nexport class HaNavigationSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: NavigationSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-navigation-picker\n        .hass=${this.hass}\n        .label=${this.label}\n        .value=${this.value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        @value-changed=${this._valueChanged}\n      ></ha-navigation-picker>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-navigation\": HaNavigationSelector;\n  }\n}\n"],"names":["titleCase","s","replace","_s","c","d","toUpperCase","DEFAULT_ITEMS","rowRenderer","item","html","icon","title","path","nothing","createViewNavigationItem","prefix","view","index","createPanelNavigationItem","hass","panel","url_path","defaultPanel","localize","HaNavigationPicker","LitElement","render","_value","navigationItems","label","helper","disabled","required","_openedChanged","_valueChanged","_filterChanged","ev","this","_opened","detail","value","navigationItemsLoaded","_loadNavigationItems","panels","Object","entries","map","id","lovelacePanels","filter","component_name","viewConfigs","Promise","all","fetchConfig","conn","connection","urlPath","force","sendMessagePromise","type","then","config","catch","_","undefined","panelViewConfig","Map","push","get","views","forEach","comboBox","filteredItems","shouldUpdate","changedProps","has","stopPropagation","_setValue","fireEvent","bubbles","composed","filterString","toLowerCase","length","includes","args","styles","css","attribute","Boolean","HaNavigationSelector","reflect"],"mappings":"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"}