{"version":3,"file":"2566.f854004b15e80b38.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-tts-voice.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-tts-voice-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/tts.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { TTSVoiceSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-tts-voice-picker\";\n\n@customElement(\"ha-selector-tts_voice\")\nexport class HaTTSVoiceSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: TTSVoiceSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    language?: string;\n    engineId?: string;\n  };\n\n  protected render() {\n    return html`<ha-tts-voice-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .language=${this.selector.tts_voice?.language || this.context?.language}\n      .engineId=${this.selector.tts_voice?.engineId || this.context?.engineId}\n      .disabled=${this.disabled}\n      .required=${this.required}\n    ></ha-tts-voice-picker>`;\n  }\n\n  static styles = css`\n    ha-tts-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-tts_voice\": HaTTSVoiceSelector;\n  }\n}\n","import type { PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { TTSVoice } from \"../data/tts\";\nimport { listTTSVoices } from \"../data/tts\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nconst NONE = \"__NONE_OPTION__\";\n\n@customElement(\"ha-tts-voice-picker\")\nexport class HaTTSVoicePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public engineId?: string;\n\n  @property() public language?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() _voices?: TTSVoice[] | null;\n\n  @query(\"ha-select\") private _select?: HaSelect;\n\n  protected render() {\n    if (!this._voices) {\n      return nothing;\n    }\n    const value =\n      this.value ?? (this.required ? this._voices[0]?.voice_id : NONE);\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\"ui.components.tts-voice-picker.voice\")}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${!this.required\n          ? html`<ha-list-item .value=${NONE}>\n              ${this.hass!.localize(\"ui.components.tts-voice-picker.none\")}\n            </ha-list-item>`\n          : nothing}\n        ${this._voices.map(\n          (voice) =>\n            html`<ha-list-item .value=${voice.voice_id}>\n              ${voice.name}\n            </ha-list-item>`\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected willUpdate(changedProperties: PropertyValues<this>): void {\n    super.willUpdate(changedProperties);\n    if (!this.hasUpdated) {\n      this._updateVoices();\n    } else if (\n      changedProperties.has(\"language\") ||\n      changedProperties.has(\"engineId\")\n    ) {\n      this._debouncedUpdateVoices();\n    }\n  }\n\n  private _debouncedUpdateVoices = debounce(() => this._updateVoices(), 500);\n\n  private async _updateVoices() {\n    if (!this.engineId || !this.language) {\n      this._voices = undefined;\n      return;\n    }\n    this._voices = (\n      await listTTSVoices(this.hass, this.engineId, this.language)\n    ).voices;\n\n    if (!this.value) {\n      return;\n    }\n\n    if (\n      !this._voices ||\n      !this._voices.find((voice) => voice.voice_id === this.value)\n    ) {\n      this.value = undefined;\n      fireEvent(this, \"value-changed\", { value: this.value });\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues<this>) {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"_voices\") &&\n      this._select?.value !== this.value\n    ) {\n      this._select?.layoutOptions();\n      fireEvent(this, \"value-changed\", { value: this._select?.value });\n    }\n  }\n\n  static styles = css`\n    ha-select {\n      width: 100%;\n    }\n  `;\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === NONE)\n    ) {\n      return;\n    }\n    this.value = target.value === NONE ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tts-voice-picker\": HaTTSVoicePicker;\n  }\n}\n","import type { HomeAssistant } from \"../types\";\n\nexport interface TTSEngine {\n  engine_id: string;\n  supported_languages?: string[];\n  name?: string;\n  deprecated: boolean;\n}\n\nexport interface TTSVoice {\n  voice_id: string;\n  name: string;\n}\n\nexport const convertTextToSpeech = (\n  hass: HomeAssistant,\n  data: {\n    platform: string;\n    message: string;\n    cache?: boolean;\n    language?: string;\n    options?: Record<string, unknown>;\n  }\n) => hass.callApi<{ url: string; path: string }>(\"POST\", \"tts_get_url\", data);\n\nconst TTS_MEDIA_SOURCE_PREFIX = \"media-source://tts/\";\n\nexport const isTTSMediaSource = (mediaContentId: string) =>\n  mediaContentId.startsWith(TTS_MEDIA_SOURCE_PREFIX);\n\nexport const getProviderFromTTSMediaSource = (mediaContentId: string) =>\n  mediaContentId.substring(TTS_MEDIA_SOURCE_PREFIX.length);\n\nexport const listTTSEngines = (\n  hass: HomeAssistant,\n  language?: string,\n  country?: string\n): Promise<{ providers: TTSEngine[] }> =>\n  hass.callWS({\n    type: \"tts/engine/list\",\n    language,\n    country,\n  });\n\nexport const getTTSEngine = (\n  hass: HomeAssistant,\n  engine_id: string\n): Promise<{ provider: TTSEngine }> =>\n  hass.callWS({\n    type: \"tts/engine/get\",\n    engine_id,\n  });\n\nexport const listTTSVoices = (\n  hass: HomeAssistant,\n  engine_id: string,\n  language: string\n): Promise<{ voices: TTSVoice[] | null }> =>\n  hass.callWS({\n    type: \"tts/engine/voices\",\n    engine_id,\n    language,\n  });\n"],"names":["HaTTSVoiceSelector","LitElement","render","html","hass","value","label","helper","selector","tts_voice","language","context","engineId","disabled","required","args","styles","css","attribute","type","Boolean","NONE","HaTTSVoicePicker","this","_voices","nothing","voice_id","localize","_changed","stopPropagation","map","voice","name","willUpdate","changedProperties","super","hasUpdated","has","_debouncedUpdateVoices","_updateVoices","listTTSVoices","voices","find","undefined","fireEvent","updated","_select","layoutOptions","ev","target","debounce","reflect","convertTextToSpeech","data","callApi","TTS_MEDIA_SOURCE_PREFIX","isTTSMediaSource","mediaContentId","startsWith","getProviderFromTTSMediaSource","substring","listTTSEngines","country","callWS","getTTSEngine","engine_id"],"mappings":"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"}