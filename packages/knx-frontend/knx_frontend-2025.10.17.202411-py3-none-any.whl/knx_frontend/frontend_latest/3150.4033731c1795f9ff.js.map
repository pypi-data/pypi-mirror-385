{"version":3,"file":"3150.4033731c1795f9ff.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-alert.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-icon-button-arrow-prev.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-icon-button.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/persistent_notification.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-menu-button.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-svg-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/layouts/hass-error-screen.ts","webpack://knx-frontend/./node_modules/lit-html/src/directive-helpers.ts","webpack://knx-frontend/./node_modules/lit-html/src/static.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  // eslint-disable-next-line lit/no-native-attributes\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=${classMap({ content: true, narrow: this.narrow })}>\n          <div class=\"main-content\">\n            ${this.title\n              ? html`<div class=\"title\">${this.title}</div>`\n              : nothing}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismissClicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : nothing}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismissClicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n    }\n    .icon {\n      height: var(--ha-alert-icon-size, 24px);\n      width: var(--ha-alert-icon-size, 24px);\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n      text-align: var(--float-start);\n    }\n    .content.narrow {\n      flex-direction: column;\n      align-items: flex-end;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      line-height: normal;\n      margin-left: 8px;\n      margin-right: 0;\n      margin-inline-start: 8px;\n      margin-inline-end: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: var(--ha-font-weight-bold);\n    }\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n    :host ::slotted(ul) {\n      margin: 0;\n      padding-inline-start: 20px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import Button from \"@home-assistant/webawesome/dist/components/button/button\";\nimport { css, type CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\nexport type Appearance = \"accent\" | \"filled\" | \"outlined\" | \"plain\";\n\n/**\n * Home Assistant button component\n *\n * @element ha-button\n * @extends {Button}\n *\n * @summary\n * A stylable button component supporting Home Assistant theming, variants, and appearances based on webawesome button.\n *\n * @slot - Label of the button\n * @slot start - The prefix container (usually for icons).\n * @slot end - The suffix container (usually for icons).\n *\n * @csspart base - The component's base wrapper.\n * @csspart start - The container that wraps the prefix.\n * @csspart label - The button's label.\n * @csspart end - The container that wraps the suffix.\n * @csspart caret - The button's caret icon, an `<sl-icon>` element.\n * @csspart spinner - The spinner that shows when the button is in the loading state.\n *\n * @cssprop --ha-button-height - The height of the button.\n * @cssprop --ha-button-border-radius - The border radius of the button. defaults to `var(--ha-border-radius-pill)`.\n *\n * @attr {(\"small\"|\"medium\")} size - Sets the button size.\n * @attr {(\"brand\"|\"neutral\"|\"danger\"|\"warning\"|\"success\")} variant - Sets the button color variant. \"primary\" is default.\n * @attr {(\"accent\"|\"filled\"|\"plain\")} appearance - Sets the button appearance.\n * @attr {boolean} loading - shows a loading indicator instead of the buttons label and disable buttons click.\n * @attr {boolean} disabled - Disables the button and prevents user interaction.\n */\n@customElement(\"ha-button\")\nexport class HaButton extends Button {\n  variant: \"brand\" | \"neutral\" | \"success\" | \"warning\" | \"danger\" = \"brand\";\n\n  static get styles(): CSSResultGroup {\n    return [\n      Button.styles,\n      css`\n        .button {\n          /* set theme vars */\n          --wa-form-control-padding-inline: 16px;\n          --wa-font-weight-action: var(--ha-font-weight-medium);\n          --wa-form-control-border-radius: var(\n            --ha-button-border-radius,\n            var(--ha-border-radius-pill)\n          );\n\n          --wa-form-control-height: var(\n            --ha-button-height,\n            var(--button-height, 40px)\n          );\n\n          font-size: var(--ha-font-size-m);\n          line-height: 1;\n\n          transition: background-color 0.15s ease-in-out;\n        }\n\n        :host([size=\"small\"]) .button {\n          --wa-form-control-height: var(\n            --ha-button-height,\n            var(--button-height, 32px)\n          );\n          font-size: var(--wa-font-size-s, var(--ha-font-size-m));\n          --wa-form-control-padding-inline: 12px;\n        }\n\n        :host([variant=\"brand\"]) {\n          --button-color-fill-normal-active: var(\n            --ha-color-fill-primary-normal-active\n          );\n          --button-color-fill-normal-hover: var(\n            --ha-color-fill-primary-normal-hover\n          );\n          --button-color-fill-loud-active: var(\n            --ha-color-fill-primary-loud-active\n          );\n          --button-color-fill-loud-hover: var(\n            --ha-color-fill-primary-loud-hover\n          );\n        }\n\n        :host([variant=\"neutral\"]) {\n          --button-color-fill-normal-active: var(\n            --ha-color-fill-neutral-normal-active\n          );\n          --button-color-fill-normal-hover: var(\n            --ha-color-fill-neutral-normal-hover\n          );\n          --button-color-fill-loud-active: var(\n            --ha-color-fill-neutral-loud-active\n          );\n          --button-color-fill-loud-hover: var(\n            --ha-color-fill-neutral-loud-hover\n          );\n        }\n\n        :host([variant=\"success\"]) {\n          --button-color-fill-normal-active: var(\n            --ha-color-fill-success-normal-active\n          );\n          --button-color-fill-normal-hover: var(\n            --ha-color-fill-success-normal-hover\n          );\n          --button-color-fill-loud-active: var(\n            --ha-color-fill-success-loud-active\n          );\n          --button-color-fill-loud-hover: var(\n            --ha-color-fill-success-loud-hover\n          );\n        }\n\n        :host([variant=\"warning\"]) {\n          --button-color-fill-normal-active: var(\n            --ha-color-fill-warning-normal-active\n          );\n          --button-color-fill-normal-hover: var(\n            --ha-color-fill-warning-normal-hover\n          );\n          --button-color-fill-loud-active: var(\n            --ha-color-fill-warning-loud-active\n          );\n          --button-color-fill-loud-hover: var(\n            --ha-color-fill-warning-loud-hover\n          );\n        }\n\n        :host([variant=\"danger\"]) {\n          --button-color-fill-normal-active: var(\n            --ha-color-fill-danger-normal-active\n          );\n          --button-color-fill-normal-hover: var(\n            --ha-color-fill-danger-normal-hover\n          );\n          --button-color-fill-loud-active: var(\n            --ha-color-fill-danger-loud-active\n          );\n          --button-color-fill-loud-hover: var(\n            --ha-color-fill-danger-loud-hover\n          );\n        }\n\n        :host([appearance~=\"plain\"]) .button {\n          color: var(--wa-color-on-normal);\n          background-color: transparent;\n        }\n        :host([appearance~=\"plain\"]) .button.disabled {\n          background-color: transparent;\n          color: var(--ha-color-on-disabled-quiet);\n        }\n\n        :host([appearance~=\"outlined\"]) .button.disabled {\n          background-color: transparent;\n          color: var(--ha-color-on-disabled-quiet);\n        }\n\n        @media (hover: hover) {\n          :host([appearance~=\"filled\"])\n            .button:not(.disabled):not(.loading):hover {\n            background-color: var(--button-color-fill-normal-hover);\n          }\n          :host([appearance~=\"accent\"])\n            .button:not(.disabled):not(.loading):hover {\n            background-color: var(--button-color-fill-loud-hover);\n          }\n          :host([appearance~=\"plain\"])\n            .button:not(.disabled):not(.loading):hover {\n            color: var(--wa-color-on-normal);\n          }\n        }\n        :host([appearance~=\"filled\"]) .button {\n          color: var(--wa-color-on-normal);\n          background-color: var(--wa-color-fill-normal);\n          border-color: transparent;\n        }\n        :host([appearance~=\"filled\"])\n          .button:not(.disabled):not(.loading):active {\n          background-color: var(--button-color-fill-normal-active);\n        }\n        :host([appearance~=\"filled\"]) .button.disabled {\n          background-color: var(--ha-color-fill-disabled-normal-resting);\n          color: var(--ha-color-on-disabled-normal);\n        }\n\n        :host([appearance~=\"accent\"]) .button {\n          background-color: var(\n            --wa-color-fill-loud,\n            var(--wa-color-neutral-fill-loud)\n          );\n        }\n        :host([appearance~=\"accent\"])\n          .button:not(.disabled):not(.loading):active {\n          background-color: var(--button-color-fill-loud-active);\n        }\n        :host([appearance~=\"accent\"]) .button.disabled {\n          background-color: var(--ha-color-fill-disabled-loud-resting);\n          color: var(--ha-color-on-disabled-loud);\n        }\n\n        :host([loading]) {\n          pointer-events: none;\n        }\n\n        .button.disabled {\n          opacity: 1;\n        }\n\n        slot[name=\"start\"]::slotted(*) {\n          margin-inline-end: 4px;\n        }\n        slot[name=\"end\"]::slotted(*) {\n          margin-inline-start: 4px;\n        }\n\n        .button.has-start {\n          padding-inline-start: 8px;\n        }\n        .button.has-end {\n          padding-inline-end: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button\": HaButton;\n  }\n}\n","import { mdiArrowLeft, mdiArrowRight } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-icon-button-arrow-prev\")\nexport class HaIconButtonArrowPrev extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @state() private _icon =\n    mainWindow.document.dir === \"rtl\" ? mdiArrowRight : mdiArrowLeft;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        .disabled=${this.disabled}\n        .label=${this.label || this.hass?.localize(\"ui.common.back\") || \"Back\"}\n        .path=${this._icon}\n      ></ha-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button-arrow-prev\": HaIconButtonArrowPrev;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport type { IconButton } from \"@material/mwc-icon-button\";\nimport type { TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided slot to pass an <ha-icon> in)\n  @property({ type: String }) path?: string;\n\n  // Label that is used for ARIA support and as tooltip\n  @property({ type: String }) label?: string;\n\n  // These should always be set as properties, not attributes,\n  // so that only the <button> element gets the attribute\n  @property({ type: String, attribute: \"aria-haspopup\" })\n  override ariaHasPopup!: IconButton[\"ariaHasPopup\"];\n\n  @property({ attribute: \"hide-title\", type: Boolean }) hideTitle = false;\n\n  @query(\"mwc-icon-button\", true) private _button?: IconButton;\n\n  public override focus() {\n    this._button?.focus();\n  }\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button\n        aria-label=${ifDefined(this.label)}\n        title=${ifDefined(this.hideTitle ? undefined : this.label)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        .disabled=${this.disabled}\n      >\n        ${this.path\n          ? html`<ha-svg-icon .path=${this.path}></ha-svg-icon>`\n          : html`<slot></slot>`}\n      </mwc-icon-button>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      display: inline-block;\n      outline: none;\n    }\n    :host([disabled]) {\n      pointer-events: none;\n    }\n    mwc-icon-button {\n      --mdc-theme-on-primary: currentColor;\n      --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import type {\n  Connection,\n  HassEntity,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\n\nexport interface PersitentNotificationEntity extends HassEntity {\n  notification_id?: string;\n  created_at?: string;\n  title?: string;\n  message?: string;\n}\n\nexport interface PersistentNotification {\n  created_at: string;\n  message: string;\n  notification_id: string;\n  title: string;\n  status: \"read\" | \"unread\";\n}\n\nexport type PersistentNotifications = Record<string, PersistentNotification>;\n\nexport interface PersistentNotificationMessage {\n  type: \"added\" | \"removed\" | \"current\" | \"updated\";\n  notifications: PersistentNotifications;\n}\n\nexport const subscribeNotifications = (\n  conn: Connection,\n  onChange: (notifications: PersistentNotification[]) => void\n): UnsubscribeFunc => {\n  const params = {\n    type: \"persistent_notification/subscribe\",\n  };\n  const stream = new NotificationStream();\n  const subscription = conn.subscribeMessage<PersistentNotificationMessage>(\n    (message) => onChange(stream.processMessage(message)),\n    params\n  );\n  return () => {\n    subscription.then((unsub) => unsub?.());\n  };\n};\n\nclass NotificationStream {\n  notifications: PersistentNotifications;\n\n  constructor() {\n    this.notifications = {};\n  }\n\n  processMessage(\n    streamMessage: PersistentNotificationMessage\n  ): PersistentNotification[] {\n    if (streamMessage.type === \"removed\") {\n      for (const notificationId of Object.keys(streamMessage.notifications)) {\n        delete this.notifications[notificationId];\n      }\n    } else {\n      this.notifications = {\n        ...this.notifications,\n        ...streamMessage.notifications,\n      };\n    }\n    return Object.values(this.notifications);\n  }\n}\n","import { mdiMenu } from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { subscribeNotifications } from \"../data/persistent_notification\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-menu-button\")\nclass HaMenuButton extends LitElement {\n  @property({ type: Boolean }) public hassio = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _hasNotifications = false;\n\n  @state() private _show = false;\n\n  private _alwaysVisible = false;\n\n  private _attachNotifOnConnect = false;\n\n  private _unsubNotifications?: UnsubscribeFunc;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._attachNotifOnConnect) {\n      this._attachNotifOnConnect = false;\n      this._subscribeNotifications();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubNotifications) {\n      this._attachNotifOnConnect = true;\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n  }\n\n  protected render() {\n    if (!this._show) {\n      return nothing;\n    }\n    const hasNotifications =\n      this._hasNotifications &&\n      (this.narrow || this.hass.dockedSidebar === \"always_hidden\");\n    return html`\n      <ha-icon-button\n        .label=${this.hass.localize(\"ui.sidebar.sidebar_toggle\")}\n        .path=${mdiMenu}\n        @click=${this._toggleMenu}\n      ></ha-icon-button>\n      ${hasNotifications ? html`<div class=\"dot\"></div>` : \"\"}\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (!this.hassio) {\n      return;\n    }\n    // This component is used on Hass.io too, but Hass.io might run the UI\n    // on older frontends too, that don't have an always visible menu button\n    // in the sidebar.\n    this._alwaysVisible =\n      (Number((window.parent as any).frontendVersion) || 0) < 20190710;\n  }\n\n  protected willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n\n    if (!changedProps.has(\"narrow\") && !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.has(\"hass\")\n      ? (changedProps.get(\"hass\") as HomeAssistant | undefined)\n      : this.hass;\n    const oldNarrow = changedProps.has(\"narrow\")\n      ? (changedProps.get(\"narrow\") as boolean | undefined)\n      : this.narrow;\n\n    const oldShowButton =\n      oldNarrow || oldHass?.dockedSidebar === \"always_hidden\";\n    const showButton =\n      this.narrow || this.hass.dockedSidebar === \"always_hidden\";\n\n    if (this.hasUpdated && oldShowButton === showButton) {\n      return;\n    }\n\n    this._show = showButton || this._alwaysVisible;\n\n    if (!showButton) {\n      if (this._unsubNotifications) {\n        this._unsubNotifications();\n        this._unsubNotifications = undefined;\n      }\n      return;\n    }\n\n    this._subscribeNotifications();\n  }\n\n  private _subscribeNotifications() {\n    if (this._unsubNotifications) {\n      throw new Error(\"Already subscribed\");\n    }\n    this._unsubNotifications = subscribeNotifications(\n      this.hass.connection,\n      (notifications) => {\n        this._hasNotifications = notifications.length > 0;\n      }\n    );\n  }\n\n  private _toggleMenu(): void {\n    fireEvent(this, \"hass-toggle-menu\");\n  }\n\n  static styles = css`\n    :host {\n      position: relative;\n    }\n    .dot {\n      pointer-events: none;\n      position: absolute;\n      background-color: var(--accent-color);\n      width: 12px;\n      height: 12px;\n      top: 9px;\n      right: 7px;\n      inset-inline-end: 7px;\n      inset-inline-start: initial;\n      border-radius: 50%;\n      border: 2px solid var(--app-header-background-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-menu-button\": HaMenuButton;\n  }\n}\n","import type { SVGTemplateResult } from \"lit\";\nimport { css, LitElement, nothing, svg } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-svg-icon\")\nexport class HaSvgIcon extends LitElement {\n  @property() public path?: string;\n\n  @property({ attribute: false }) public secondaryPath?: string;\n\n  @property({ attribute: false }) public viewBox?: string;\n\n  protected render(): SVGTemplateResult {\n    return svg`\n    <svg\n      viewBox=${this.viewBox || \"0 0 24 24\"}\n      preserveAspectRatio=\"xMidYMid meet\"\n      focusable=\"false\"\n      role=\"img\"\n      aria-hidden=\"true\"\n    >\n      <g>\n        ${\n          this.path\n            ? svg`<path class=\"primary-path\" d=${this.path}></path>`\n            : nothing\n        }\n        ${\n          this.secondaryPath\n            ? svg`<path class=\"secondary-path\" d=${this.secondaryPath}></path>`\n            : nothing\n        }\n      </g>\n    </svg>`;\n  }\n\n  static styles = css`\n    :host {\n      display: var(--ha-icon-display, inline-flex);\n      align-items: center;\n      justify-content: center;\n      position: relative;\n      vertical-align: middle;\n      fill: var(--icon-primary-color, currentcolor);\n      width: var(--mdc-icon-size, 24px);\n      height: var(--mdc-icon-size, 24px);\n    }\n    svg {\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      display: block;\n    }\n    path.primary-path {\n      opacity: var(--icon-primary-opactity, 1);\n    }\n    path.secondary-path {\n      fill: var(--icon-secondary-color, currentcolor);\n      opacity: var(--icon-secondary-opactity, 0.5);\n    }\n  `;\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-svg-icon\": HaSvgIcon;\n  }\n}\n","import type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { goBack } from \"../common/navigate\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-button\";\nimport \"../components/ha-menu-button\";\nimport type { HomeAssistant } from \"../types\";\nimport \"../components/ha-alert\";\n\n@customElement(\"hass-error-screen\")\nclass HassErrorScreen extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public toolbar = true;\n\n  @property({ type: Boolean }) public rootnav = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public error?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.toolbar\n        ? html`<div class=\"toolbar\">\n            ${this.rootnav || history.state?.root\n              ? html`\n                  <ha-menu-button\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                  ></ha-menu-button>\n                `\n              : html`\n                  <ha-icon-button-arrow-prev\n                    .hass=${this.hass}\n                    @click=${this._handleBack}\n                  ></ha-icon-button-arrow-prev>\n                `}\n          </div>`\n        : \"\"}\n      <div class=\"content\">\n        <ha-alert alert-type=\"error\">${this.error}</ha-alert>\n        <slot>\n          <ha-button appearance=\"plain\" size=\"small\" @click=${this._handleBack}>\n            ${this.hass?.localize(\"ui.common.back\")}\n          </ha-button>\n        </slot>\n      </div>\n    `;\n  }\n\n  private _handleBack(): void {\n    goBack();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        :host {\n          display: block;\n          height: 100%;\n          background-color: var(--primary-background-color);\n        }\n        .toolbar {\n          display: flex;\n          align-items: center;\n          font-size: var(--ha-font-size-xl);\n          height: var(--header-height);\n          padding: 8px 12px;\n          pointer-events: none;\n          background-color: var(--app-header-background-color);\n          font-weight: var(--ha-font-weight-normal);\n          color: var(--app-header-text-color, white);\n          border-bottom: var(--app-header-border-bottom, none);\n          box-sizing: border-box;\n        }\n        @media (max-width: 599px) {\n          .toolbar {\n            padding: 4px;\n          }\n        }\n        ha-icon-button-arrow-prev {\n          pointer-events: auto;\n        }\n        .content {\n          color: var(--primary-text-color);\n          height: calc(100% - var(--header-height));\n          display: flex;\n          padding: 16px;\n          align-items: center;\n          justify-content: center;\n          flex-direction: column;\n          box-sizing: border-box;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        ha-alert {\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-error-screen\": HassErrorScreen;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content and markers.\n *\n * Note: The only difference between this and clearPart() is that this also\n * removes the part's start node. This means that the ChildPart must own its\n * start node, ie it must be a marker node specifically for this part and not an\n * anchor from surrounding content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$clear();\n  part._$startNode.remove();\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {\n  html as coreHtml,\n  svg as coreSvg,\n  mathml as coreMathml,\n  TemplateResult,\n} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * an attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg | typeof coreMathml) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const mathml = withStatic(coreMathml);\n"],"names":["ALERT_ICONS","info","warning","error","success","HaAlert","LitElement","render","html","classMap","this","alertType","title","content","narrow","nothing","dismissable","_dismissClicked","fireEvent","args","styles","css","attribute","type","Boolean","HaButton","Button","variant","HaIconButtonArrowPrev","disabled","label","hass","localize","_icon","mainWindow","HaIconButton","focus","_button","ifDefined","hideTitle","undefined","ariaHasPopup","path","shadowRootOptions","mode","delegatesFocus","reflect","String","NotificationStream","processMessage","streamMessage","notificationId","Object","keys","notifications","values","constructor","HaMenuButton","connectedCallback","super","_attachNotifOnConnect","_subscribeNotifications","disconnectedCallback","_unsubNotifications","_show","hasNotifications","_hasNotifications","dockedSidebar","_toggleMenu","firstUpdated","changedProps","hassio","_alwaysVisible","Number","window","parent","frontendVersion","willUpdate","has","oldHass","get","oldShowButton","showButton","hasUpdated","Error","subscribeNotifications","conn","onChange","stream","subscription","subscribeMessage","message","then","unsub","connection","length","HaSvgIcon","svg","viewBox","secondaryPath","HassErrorScreen","toolbar","rootnav","history","state","root","_handleBack","goBack","I","t","o","i","e","_$litType$","l","h","f","strings","r","document","createComment","s","n","_$AA","parentNode","_$AB","insertBefore","d","options","nextSibling","_$AM","_$AQ","_$AP","_$AU","v","_$AI","u","m","_$AH","p","M","_$AR","remove","a","_$litStatic$","reduce","Map","c","$","push","join","raw","set"],"mappings":"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"}