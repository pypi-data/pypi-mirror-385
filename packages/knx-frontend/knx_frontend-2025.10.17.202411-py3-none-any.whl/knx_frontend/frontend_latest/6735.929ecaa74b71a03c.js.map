{"version":3,"file":"6735.929ecaa74b71a03c.js","sources":["webpack://knx-frontend/./node_modules/home-assistant-js-websocket/dist/store.js","webpack://knx-frontend/./node_modules/home-assistant-js-websocket/dist/collection.js","webpack://knx-frontend/./node_modules/lit-html/src/directives/private-async-helpers.ts","webpack://knx-frontend/./node_modules/lit-html/src/directives/until.ts"],"sourcesContent":["export const createStore = (state) => {\n    let listeners = [];\n    function unsubscribe(listener) {\n        let out = [];\n        for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i] === listener) {\n                listener = null;\n            }\n            else {\n                out.push(listeners[i]);\n            }\n        }\n        listeners = out;\n    }\n    function setState(update, overwrite) {\n        state = overwrite ? update : Object.assign(Object.assign({}, state), update);\n        let currentListeners = listeners;\n        for (let i = 0; i < currentListeners.length; i++) {\n            currentListeners[i](state);\n        }\n    }\n    /**\n     * An observable state container, returned from {@link createStore}\n     * @name store\n     */\n    return {\n        get state() {\n            return state;\n        },\n        /**\n         * Create a bound copy of the given action function.\n         * The bound returned function invokes action() and persists the result back to the store.\n         * If the return value of `action` is a Promise, the resolved value will be used as state.\n         * @param {Function} action\tAn action of the form `action(state, ...args) -> stateUpdate`\n         * @returns {Function} boundAction()\n         */\n        action(action) {\n            function apply(result) {\n                setState(result, false);\n            }\n            // Note: perf tests verifying this implementation: https://esbench.com/bench/5a295e6299634800a0349500\n            return function () {\n                let args = [state];\n                for (let i = 0; i < arguments.length; i++)\n                    args.push(arguments[i]);\n                // @ts-ignore\n                let ret = action.apply(this, args);\n                if (ret != null) {\n                    return ret instanceof Promise ? ret.then(apply) : apply(ret);\n                }\n            };\n        },\n        /**\n         * Apply a partial state object to the current state, invoking registered listeners.\n         * @param {Object} update\t\t\t\tAn object with properties to be merged into state\n         * @param {Boolean} [overwrite=false]\tIf `true`, update will replace state instead of being merged into it\n         */\n        setState,\n        clearState() {\n            state = undefined;\n        },\n        /**\n         * Register a listener function to be called whenever state is changed. Returns an `unsubscribe()` function.\n         * @param {Function} listener\tA function to call when state changes. Gets passed the new state.\n         * @returns {Function} unsubscribe()\n         */\n        subscribe(listener) {\n            listeners.push(listener);\n            return () => {\n                unsubscribe(listener);\n            };\n        },\n        // /**\n        //  * Remove a previously-registered listener function.\n        //  * @param {Function} listener\tThe callback previously passed to `subscribe()` that should be removed.\n        //  * @function\n        //  */\n        // unsubscribe,\n    };\n};\n","import { createStore } from \"./store.js\";\n// Time to wait to unsubscribe from updates after last subscriber unsubscribes\nconst UNSUB_GRACE_PERIOD = 5000; // 5 seconds\nconst DEBUG = false;\n/**\n *\n * @param conn connection\n * @param key the key to store it on the connection. Must be unique for each collection.\n * @param fetchCollection fetch the current state. If undefined assumes subscribeUpdates receives current state\n * @param subscribeUpdates subscribe to updates on the current state\n * @returns\n */\nexport const getCollection = (conn, key, fetchCollection, subscribeUpdates, options = { unsubGrace: true }) => {\n    // @ts-ignore\n    if (conn[key]) {\n        // @ts-ignore\n        return conn[key];\n    }\n    let active = 0;\n    let unsubProm;\n    let unsubTimer;\n    let store = createStore();\n    const refresh = () => {\n        if (!fetchCollection) {\n            throw new Error(\"Collection does not support refresh\");\n        }\n        return fetchCollection(conn).then((state) => store.setState(state, true));\n    };\n    const refreshSwallow = () => refresh().catch((err) => {\n        // Swallow errors if socket is connecting, closing or closed.\n        // We will automatically call refresh again when we re-establish the connection.\n        if (conn.connected) {\n            throw err;\n        }\n    });\n    const setupUpdateSubscription = () => {\n        if (unsubTimer !== undefined) {\n            if (DEBUG) {\n                console.log(`Prevented unsubscribe for ${key}`);\n            }\n            clearTimeout(unsubTimer);\n            unsubTimer = undefined;\n            return;\n        }\n        if (DEBUG) {\n            console.log(`Subscribing to ${key}`);\n        }\n        if (subscribeUpdates) {\n            unsubProm = subscribeUpdates(conn, store);\n        }\n        if (fetchCollection) {\n            // Fetch when connection re-established.\n            conn.addEventListener(\"ready\", refreshSwallow);\n            refreshSwallow();\n        }\n        conn.addEventListener(\"disconnected\", handleDisconnect);\n    };\n    const teardownUpdateSubscription = () => {\n        if (DEBUG) {\n            console.log(`Unsubscribing from ${key}`);\n        }\n        unsubTimer = undefined;\n        // Unsubscribe from changes\n        if (unsubProm)\n            unsubProm.then((unsub) => {\n                unsub();\n            });\n        store.clearState();\n        conn.removeEventListener(\"ready\", refresh);\n        conn.removeEventListener(\"disconnected\", handleDisconnect);\n    };\n    const scheduleTeardownUpdateSubscription = () => {\n        if (DEBUG) {\n            console.log(`Scheduling unsubscribing from ${key}`);\n        }\n        unsubTimer = setTimeout(teardownUpdateSubscription, UNSUB_GRACE_PERIOD);\n    };\n    const handleDisconnect = () => {\n        // If we're going to unsubscribe and then lose connection,\n        // just unsubscribe immediately.\n        if (unsubTimer) {\n            clearTimeout(unsubTimer);\n            teardownUpdateSubscription();\n        }\n    };\n    // @ts-ignore\n    conn[key] = {\n        get state() {\n            return store.state;\n        },\n        refresh,\n        subscribe(subscriber) {\n            active++;\n            if (DEBUG) {\n                console.log(`New subscriber for ${key}. Active subscribers: ${active}`);\n            }\n            // If this was the first subscriber, attach collection\n            if (active === 1) {\n                setupUpdateSubscription();\n            }\n            const unsub = store.subscribe(subscriber);\n            if (store.state !== undefined) {\n                // Don't call it right away so that caller has time\n                // to initialize all the things.\n                setTimeout(() => subscriber(store.state), 0);\n            }\n            return () => {\n                unsub();\n                active--;\n                if (DEBUG) {\n                    console.log(`Unsubscribe for ${key}. Active subscribers: ${active}`);\n                }\n                if (!active) {\n                    options.unsubGrace\n                        ? scheduleTeardownUpdateSubscription()\n                        : teardownUpdateSubscription();\n                }\n            };\n        },\n    };\n    // @ts-ignore\n    return conn[key];\n};\n// Legacy name. It gets a collection and subscribes.\nexport const createCollection = (key, fetchCollection, subscribeUpdates, conn, onChange) => getCollection(conn, key, fetchCollection, subscribeUpdates).subscribe(onChange);\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>): unknown {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"names":["createStore","state","listeners","setState","update","overwrite","Object","assign","currentListeners","i","length","action","apply","result","args","arguments","push","ret","Promise","then","clearState","undefined","subscribe","listener","out","unsubscribe","getCollection","conn","key","fetchCollection","subscribeUpdates","options","unsubGrace","unsubProm","unsubTimer","active","store","refresh","Error","refreshSwallow","catch","err","connected","teardownUpdateSubscription","unsub","removeEventListener","handleDisconnect","clearTimeout","subscriber","setupUpdateSubscription","addEventListener","setTimeout","createCollection","onChange","s","disconnect","this","G","reconnect","t","deref","constructor","get","Y","pause","Z","resume","n","h","c","render","find","e","_$Cbt","r","o","_$CK","_$CX","isConnected","disconnected","_$Cwt","resolve","indexOf","setValue","reconnected","m"],"mappings":"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"}