{"version":3,"file":"7328.a8665f210ae2e78d.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/dialogs/image-cropper-dialog/image-cropper-dialog.ts"],"sourcesContent":["import Cropper from \"cropperjs\";\n// @ts-ignore\nimport cropperCss from \"cropperjs/dist/cropper.css\";\nimport type { CSSResultGroup, PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, nothing, LitElement, unsafeCSS } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-button\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { HaImageCropperDialogParams } from \"./show-image-cropper-dialog\";\n\n@customElement(\"image-cropper-dialog\")\nexport class HaImagecropperDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: HaImageCropperDialogParams;\n\n  @state() private _open = false;\n\n  @query(\"img\", true) private _image!: HTMLImageElement;\n\n  private _cropper?: Cropper;\n\n  @state() private _isTargetAspectRatio?: boolean;\n\n  public showDialog(params: HaImageCropperDialogParams): void {\n    this._params = params;\n    this._open = true;\n  }\n\n  public closeDialog() {\n    this._open = false;\n    this._params = undefined;\n    this._cropper?.destroy();\n    this._cropper = undefined;\n    this._isTargetAspectRatio = false;\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"_params\") || !this._params) {\n      return;\n    }\n    if (!this._cropper) {\n      this._image.src = URL.createObjectURL(this._params.file);\n      this._cropper = new Cropper(this._image, {\n        aspectRatio: this._params.options.aspectRatio,\n        viewMode: 1,\n        dragMode: \"move\",\n        minCropBoxWidth: 50,\n        ready: () => {\n          this._isTargetAspectRatio = this._checkMatchAspectRatio();\n          URL.revokeObjectURL(this._image!.src);\n        },\n      });\n    } else {\n      this._cropper.replace(URL.createObjectURL(this._params.file));\n    }\n  }\n\n  private _checkMatchAspectRatio(): boolean {\n    const targetRatio = this._params?.options.aspectRatio;\n    if (!targetRatio) {\n      return true;\n    }\n    const imageData = this._cropper!.getImageData();\n    if (imageData.aspectRatio === targetRatio) {\n      return true;\n    }\n\n    // If the image is not exactly the aspect ratio see if it is within a pixel.\n    if (imageData.naturalWidth > imageData.naturalHeight) {\n      const targetHeight = imageData.naturalWidth / targetRatio;\n      return Math.abs(targetHeight - imageData.naturalHeight) <= 1;\n    }\n    const targetWidth = imageData.naturalHeight * targetRatio;\n    return Math.abs(targetWidth - imageData.naturalWidth) <= 1;\n  }\n\n  protected render(): TemplateResult {\n    return html`<ha-dialog\n      @closed=${this.closeDialog}\n      scrimClickAction\n      escapeKeyAction\n      .open=${this._open}\n    >\n      <div\n        class=\"container ${classMap({\n          round: Boolean(this._params?.options.round),\n        })}\"\n      >\n        <img alt=${this.hass.localize(\"ui.dialogs.image_cropper.crop_image\")} />\n      </div>\n      <ha-button\n        appearance=\"plain\"\n        slot=\"primaryAction\"\n        @click=${this.closeDialog}\n      >\n        ${this.hass.localize(\"ui.common.cancel\")}\n      </ha-button>\n      ${this._isTargetAspectRatio\n        ? html`<ha-button\n            appearance=\"plain\"\n            slot=\"primaryAction\"\n            @click=${this._useOriginal}\n          >\n            ${this.hass.localize(\"ui.dialogs.image_cropper.use_original\")}\n          </ha-button>`\n        : nothing}\n\n      <ha-button slot=\"primaryAction\" @click=${this._cropImage}>\n        ${this.hass.localize(\"ui.dialogs.image_cropper.crop\")}\n      </ha-button>\n    </ha-dialog>`;\n  }\n\n  private _cropImage() {\n    this._cropper!.getCroppedCanvas().toBlob(\n      (blob) => {\n        if (!blob) {\n          return;\n        }\n        const file = new File([blob], this._params!.file.name, {\n          type: this._params!.options.type || this._params!.file.type,\n        });\n        this._params!.croppedCallback(file);\n        this.closeDialog();\n      },\n      this._params!.options.type || this._params!.file.type,\n      this._params!.options.quality\n    );\n  }\n\n  private _useOriginal() {\n    this._params!.croppedCallback(this._params!.file);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ${unsafeCSS(cropperCss)}\n        .container {\n          max-width: 640px;\n        }\n        img {\n          max-width: 100%;\n        }\n        .container.round .cropper-view-box,\n        .container.round .cropper-face {\n          border-radius: 50%;\n        }\n        .cropper-line,\n        .cropper-point,\n        .cropper-point.point-se::before {\n          background-color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"image-cropper-dialog\": HaImagecropperDialog;\n  }\n}\n"],"names":["HaImagecropperDialog","LitElement","showDialog","params","this","_params","_open","closeDialog","undefined","_cropper","destroy","_isTargetAspectRatio","updated","changedProperties","has","replace","URL","createObjectURL","file","_image","src","Cropper","aspectRatio","options","viewMode","dragMode","minCropBoxWidth","ready","_checkMatchAspectRatio","revokeObjectURL","targetRatio","imageData","getImageData","naturalWidth","naturalHeight","targetHeight","Math","abs","targetWidth","render","html","classMap","round","Boolean","hass","localize","_useOriginal","nothing","_cropImage","getCroppedCanvas","toBlob","blob","File","name","type","croppedCallback","quality","styles","haStyleDialog","css","unsafeCSS","cropperCss","args","attribute"],"mappings":"8VAcO,MAAPA,UAAAC,EAAAA,GAaSC,UAAAA,CAAAC,GACLC,KAAAC,QAAAF,EACAC,KAAAE,OAAA,CACF,CAEOC,WAAAA,GACLH,KAAAE,OAAA,EACAF,KAAAC,aAAAG,EACAJ,KAAAK,UAAAC,UACAN,KAAAK,cAAAD,EACAJ,KAAAO,sBAAA,CACF,CAEUC,OAAAA,CAAAC,GACRA,EAAAC,IAAA,iBAAAT,UAGKD,KAALK,SAaEL,KAAAK,SAAAM,QAAAC,IAAAC,gBAAAb,KAAAC,QAAAa,QAZAd,KAAAe,OAAAC,IAAAJ,IAAAC,gBAAAb,KAAAC,QAAAa,MACAd,KAAAK,SAAA,IAAAY,IAAA,CAAAjB,KAAAe,OAAA,CACEG,YAAA,KAAAjB,QAAAkB,QAAAD,YACAE,SAAA,EACAC,SAAA,OACAC,gBAAA,GACAC,MAAAA,KACEvB,KAAAO,qBAAAP,KAAAwB,yBACAZ,IAAAa,gBAAA,KAAAV,OAAAC,IAAA,KAMR,CAEQQ,sBAAAA,GACN,MAAAE,EAAA,KAAAzB,SAAAkB,QAAAD,YACA,IAAAQ,EACE,OAAO,EAET,MAAAC,EAAA,KAAAtB,SAAAuB,eACA,GAAAD,EAAAT,cAAAQ,EACE,OAAO,EAIT,GAAAC,EAAAE,aAAAF,EAAAG,cAAA,CACE,MAAAC,EAAAJ,EAAAE,aAAAH,EACA,OAAAM,KAAAC,IAAAF,EAAAJ,EAAAG,gBAAA,CACF,CACA,MAAAI,EAAAP,EAAAG,cAAAJ,EACA,OAAAM,KAAAC,IAAAC,EAAAP,EAAAE,eAAA,CACF,CAEUM,MAAAA,GACR,OAAAC,EAAAA,EAAA;gBACU,KAAAjC;;;cAGF,KAAAD;;;4BAGamC,EAAAA,EAAAA,GAAA,CACfC,MAAAC,QAAA,KAAAtC,SAAAkB,QAAAmB;;mBAGO,KAAAE,KAAAC,SAAA;;;;;iBAKF,KAAAtC;;UAEP,KAAAqC,KAAAC,SAAA;;QAEF,KAAAlC,qBAAA6B,EAAAA,EAAA;;;qBAIa,KAAAM;;cAEP,KAAAF,KAAAC,SAAA;wBACUE,EAAAA;;+CAGuB,KAAAC;UACrC,KAAAJ,KAAAC,SAAA;;iBAGN,CAEQG,UAAAA,GACN5C,KAAAK,SAAAwC,mBAAAC,QAAAC,IAEI,IAAAA,EACE,OAEF,MAAAjC,EAAA,IAAAkC,KAAA,CAAuBD,GAAO/C,KAAFC,QAAAa,KAAAmC,KAAE,CAC5BC,KAAA,KAAAjD,QAAAkB,QAAA+B,MAAA,KAAAjD,QAAAa,KAAAoC,OAEFlD,KAAAC,QAAAkD,gBAAArC,GACAd,KAAAG,aAAA,GACF,KAAAF,QAAAkB,QAAA+B,MAAA,KAAAjD,QAAAa,KAAAoC,KAAA,KAAAjD,QAAAkB,QAAAiC,QAIJ,CAEQV,YAAAA,GACN1C,KAAAC,QAAAkD,gBAAAnD,KAAAC,QAAAa,MACAd,KAAAG,aACF,CAEA,iBAAAkD,GACE,MAAO,CACLC,EAAAA,GACAC,EAAAA,EAAA;WACEC,EAAAA,EAAAA,IAAAC;;;;;;;;;;;;;;;;QAkBN,C,kBAnJK,SAAAC,GAAA,KAAAxD,OAAA,C,8BACOyD,WAAA,K"}