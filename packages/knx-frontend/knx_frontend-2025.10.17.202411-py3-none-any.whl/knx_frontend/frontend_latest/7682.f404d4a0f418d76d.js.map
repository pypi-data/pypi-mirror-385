{"version":3,"file":"7682.f404d4a0f418d76d.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/language/format_language.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-language-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-language.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\n\nexport const formatLanguageCode = (\n  languageCode: string,\n  locale: FrontendLocaleData\n) => {\n  try {\n    return formatLanguageCodeMem(locale)?.of(languageCode) ?? languageCode;\n  } catch {\n    return languageCode;\n  }\n};\n\nconst formatLanguageCodeMem = memoizeOne(\n  (locale: FrontendLocaleData) =>\n    new Intl.DisplayNames(locale.language, {\n      type: \"language\",\n      fallback: \"code\",\n    })\n);\n","import type { PropertyValues } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { formatLanguageCode } from \"../common/language/format_language\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport type { FrontendLocaleData } from \"../data/translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nexport const getLanguageOptions = (\n  languages: string[],\n  nativeName: boolean,\n  noSort: boolean,\n  locale?: FrontendLocaleData\n) => {\n  let options: { label: string; value: string }[] = [];\n\n  if (nativeName) {\n    const translations = translationMetadata.translations;\n    options = languages.map((lang) => {\n      let label = translations[lang]?.nativeName;\n      if (!label) {\n        try {\n          // this will not work if Intl.DisplayNames is polyfilled, it will return in the language of the user\n          label = new Intl.DisplayNames(lang, {\n            type: \"language\",\n            fallback: \"code\",\n          }).of(lang)!;\n        } catch (_err) {\n          label = lang;\n        }\n      }\n      return {\n        value: lang,\n        label,\n      };\n    });\n  } else if (locale) {\n    options = languages.map((lang) => ({\n      value: lang,\n      label: formatLanguageCode(lang, locale),\n    }));\n  }\n\n  if (!noSort && locale) {\n    options.sort((a, b) =>\n      caseInsensitiveStringCompare(a.label, b.label, locale.language)\n    );\n  }\n  return options;\n};\n\n@customElement(\"ha-language-picker\")\nexport class HaLanguagePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ type: Array }) public languages?: string[];\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ attribute: \"native-name\", type: Boolean })\n  public nativeName = false;\n\n  @property({ attribute: \"no-sort\", type: Boolean }) public noSort = false;\n\n  @property({ attribute: \"inline-arrow\", type: Boolean })\n  public inlineArrow = false;\n\n  @state() _defaultLanguages: string[] = [];\n\n  @query(\"ha-select\") private _select!: HaSelect;\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._computeDefaultLanguageOptions();\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n\n    const localeChanged =\n      changedProperties.has(\"hass\") &&\n      this.hass &&\n      changedProperties.get(\"hass\") &&\n      changedProperties.get(\"hass\").locale.language !==\n        this.hass.locale.language;\n    if (\n      changedProperties.has(\"languages\") ||\n      changedProperties.has(\"value\") ||\n      localeChanged\n    ) {\n      this._select.layoutOptions();\n      if (!this.disabled && this._select.value !== this.value) {\n        fireEvent(this, \"value-changed\", { value: this._select.value });\n      }\n      if (!this.value) {\n        return;\n      }\n      const languageOptions = this._getLanguagesOptions(\n        this.languages ?? this._defaultLanguages,\n        this.nativeName,\n        this.noSort,\n        this.hass?.locale\n      );\n      const selectedItemIndex = languageOptions.findIndex(\n        (option) => option.value === this.value\n      );\n      if (selectedItemIndex === -1) {\n        this.value = undefined;\n      }\n      if (localeChanged) {\n        this._select.select(selectedItemIndex);\n      }\n    }\n  }\n\n  private _getLanguagesOptions = memoizeOne(getLanguageOptions);\n\n  private _computeDefaultLanguageOptions() {\n    this._defaultLanguages = Object.keys(translationMetadata.translations);\n  }\n\n  protected render() {\n    const languageOptions = this._getLanguagesOptions(\n      this.languages ?? this._defaultLanguages,\n      this.nativeName,\n      this.noSort,\n      this.hass?.locale\n    );\n\n    const value =\n      this.value ??\n      (this.required && !this.disabled\n        ? languageOptions[0]?.value\n        : this.value);\n\n    return html`\n      <ha-select\n        .label=${this.label ??\n        (this.hass?.localize(\"ui.components.language-picker.language\") ||\n          \"Language\")}\n        .value=${value || \"\"}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n        .inlineArrow=${this.inlineArrow}\n      >\n        ${languageOptions.length === 0\n          ? html`<ha-list-item value=\"\"\n              >${this.hass?.localize(\n                \"ui.components.language-picker.no_languages\"\n              ) || \"No languages\"}</ha-list-item\n            >`\n          : languageOptions.map(\n              (option) => html`\n                <ha-list-item .value=${option.value}\n                  >${option.label}</ha-list-item\n                >\n              `\n            )}\n      </ha-select>\n    `;\n  }\n\n  static styles = css`\n    ha-select {\n      width: 100%;\n    }\n  `;\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (this.disabled || target.value === \"\" || target.value === this.value) {\n      return;\n    }\n    this.value = target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-language-picker\": HaLanguagePicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { LanguageSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-language-picker\";\n\n@customElement(\"ha-selector-language\")\nexport class HaLanguageSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: LanguageSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-language-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .languages=${this.selector.language?.languages}\n        .nativeName=${Boolean(this.selector?.language?.native_name)}\n        .noSort=${Boolean(this.selector?.language?.no_sort)}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-language-picker>\n    `;\n  }\n\n  static styles = css`\n    ha-language-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-language\": HaLanguageSelector;\n  }\n}\n"],"names":["formatLanguageCode","languageCode","locale","formatLanguageCodeMem","of","memoizeOne","Intl","DisplayNames","language","type","fallback","getLanguageOptions","languages","nativeName","noSort","options","translations","translationMetadata","map","lang","label","_err","value","sort","a","b","caseInsensitiveStringCompare","HaLanguagePicker","LitElement","firstUpdated","changedProps","super","this","_computeDefaultLanguageOptions","updated","changedProperties","localeChanged","has","hass","get","_select","layoutOptions","disabled","fireEvent","selectedItemIndex","_getLanguagesOptions","_defaultLanguages","findIndex","option","undefined","select","Object","keys","render","languageOptions","required","html","localize","_changed","stopPropagation","inlineArrow","length","ev","target","args","styles","css","Array","attribute","Boolean","reflect","HaLanguageSelector","helper","selector","native_name","no_sort"],"mappings":"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"}