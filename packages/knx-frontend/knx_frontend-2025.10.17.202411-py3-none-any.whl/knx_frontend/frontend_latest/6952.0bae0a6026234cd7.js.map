{"version":3,"file":"6952.0bae0a6026234cd7.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/color/compute-color.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-color-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-md-divider.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-ui-color.ts","webpack://knx-frontend/./node_modules/@material/web/divider/internal/divider-styles.ts","webpack://knx-frontend/./node_modules/@material/web/divider/internal/divider.ts"],"sourcesContent":["export const THEME_COLORS = new Set([\n  \"primary\",\n  \"accent\",\n  \"disabled\",\n  \"red\",\n  \"pink\",\n  \"purple\",\n  \"deep-purple\",\n  \"indigo\",\n  \"blue\",\n  \"light-blue\",\n  \"cyan\",\n  \"teal\",\n  \"green\",\n  \"light-green\",\n  \"lime\",\n  \"yellow\",\n  \"amber\",\n  \"orange\",\n  \"deep-orange\",\n  \"brown\",\n  \"light-grey\",\n  \"grey\",\n  \"dark-grey\",\n  \"blue-grey\",\n  \"black\",\n  \"white\",\n]);\n\nexport function computeCssColor(color: string): string {\n  if (THEME_COLORS.has(color)) {\n    return `var(--${color}-color)`;\n  }\n  return color;\n}\n","import { mdiInvertColorsOff, mdiPalette } from \"@mdi/js\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeCssColor, THEME_COLORS } from \"../common/color/compute-color\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport type { LocalizeKeys } from \"../common/translations/localize\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-md-divider\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\n@customElement(\"ha-color-picker\")\nexport class HaColorPicker extends LitElement {\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property({ type: String, attribute: \"default_color\" })\n  public defaultColor?: string;\n\n  @property({ type: Boolean, attribute: \"include_state\" })\n  public includeState = false;\n\n  @property({ type: Boolean, attribute: \"include_none\" })\n  public includeNone = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @query(\"ha-select\") private _select?: HaSelect;\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    // Refresh layout options when the field is connected to the DOM to ensure current value displayed\n    this._select?.layoutOptions();\n  }\n\n  private _valueSelected(ev) {\n    ev.stopPropagation();\n    if (!this.isConnected) return;\n    const value = ev.target.value;\n    this.value = value === this.defaultColor ? undefined : value;\n    fireEvent(this, \"value-changed\", {\n      value: this.value,\n    });\n  }\n\n  render() {\n    const value = this.value || this.defaultColor || \"\";\n\n    const isCustom = !(\n      THEME_COLORS.has(value) ||\n      value === \"none\" ||\n      value === \"state\"\n    );\n\n    return html`\n      <ha-select\n        .icon=${Boolean(value)}\n        .label=${this.label}\n        .value=${value}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        @closed=${stopPropagation}\n        @selected=${this._valueSelected}\n        fixedMenuPosition\n        naturalMenuWidth\n        .clearable=${!this.defaultColor}\n      >\n        ${value\n          ? html`\n              <span slot=\"icon\">\n                ${value === \"none\"\n                  ? html`\n                      <ha-svg-icon path=${mdiInvertColorsOff}></ha-svg-icon>\n                    `\n                  : value === \"state\"\n                    ? html`<ha-svg-icon path=${mdiPalette}></ha-svg-icon>`\n                    : this._renderColorCircle(value || \"grey\")}\n              </span>\n            `\n          : nothing}\n        ${this.includeNone\n          ? html`\n              <ha-list-item value=\"none\" graphic=\"icon\">\n                ${this.hass.localize(\"ui.components.color-picker.none\")}\n                ${this.defaultColor === \"none\"\n                  ? ` (${this.hass.localize(\"ui.components.color-picker.default\")})`\n                  : nothing}\n                <ha-svg-icon\n                  slot=\"graphic\"\n                  path=${mdiInvertColorsOff}\n                ></ha-svg-icon>\n              </ha-list-item>\n            `\n          : nothing}\n        ${this.includeState\n          ? html`\n              <ha-list-item value=\"state\" graphic=\"icon\">\n                ${this.hass.localize(\"ui.components.color-picker.state\")}\n                ${this.defaultColor === \"state\"\n                  ? ` (${this.hass.localize(\"ui.components.color-picker.default\")})`\n                  : nothing}\n                <ha-svg-icon slot=\"graphic\" path=${mdiPalette}></ha-svg-icon>\n              </ha-list-item>\n            `\n          : nothing}\n        ${this.includeState || this.includeNone\n          ? html`<ha-md-divider role=\"separator\" tabindex=\"-1\"></ha-md-divider>`\n          : nothing}\n        ${Array.from(THEME_COLORS).map(\n          (color) => html`\n            <ha-list-item .value=${color} graphic=\"icon\">\n              ${this.hass.localize(\n                `ui.components.color-picker.colors.${color}` as LocalizeKeys\n              ) || color}\n              ${this.defaultColor === color\n                ? ` (${this.hass.localize(\"ui.components.color-picker.default\")})`\n                : nothing}\n              <span slot=\"graphic\">${this._renderColorCircle(color)}</span>\n            </ha-list-item>\n          `\n        )}\n        ${isCustom\n          ? html`\n              <ha-list-item .value=${value} graphic=\"icon\">\n                ${value}\n                <span slot=\"graphic\">${this._renderColorCircle(value)}</span>\n              </ha-list-item>\n            `\n          : nothing}\n      </ha-select>\n    `;\n  }\n\n  private _renderColorCircle(color: string) {\n    return html`\n      <span\n        class=\"circle-color\"\n        style=${styleMap({\n          \"--circle-color\": computeCssColor(color),\n        })}\n      ></span>\n    `;\n  }\n\n  static styles = css`\n    .circle-color {\n      display: block;\n      background-color: var(--circle-color, var(--divider-color));\n      border: 1px solid var(--outline-color);\n      border-radius: 10px;\n      width: 20px;\n      height: 20px;\n      box-sizing: border-box;\n    }\n    ha-select {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-color-picker\": HaColorPicker;\n  }\n}\n","import { Divider } from \"@material/web/divider/internal/divider\";\nimport { styles } from \"@material/web/divider/internal/divider-styles\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-md-divider\")\nexport class HaMdDivider extends Divider {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --md-divider-color: var(--divider-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-divider\": HaMdDivider;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { UiColorSelector } from \"../../data/selector\";\nimport \"../ha-color-picker\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-ui_color\")\nexport class HaSelectorUiColor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: UiColorSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  protected render() {\n    return html`\n      <ha-color-picker\n        .label=${this.label}\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .includeNone=${this.selector.ui_color?.include_none}\n        .includeState=${this.selector.ui_color?.include_state}\n        .defaultColor=${this.selector.ui_color?.default_color}\n        @value-changed=${this._valueChanged}\n      ></ha-color-picker>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-ui_color\": HaSelectorUiColor;\n  }\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./divider/internal/divider-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{box-sizing:border-box;color:var(--md-divider-color, var(--md-sys-color-outline-variant, #cac4d0));display:flex;height:var(--md-divider-thickness, 1px);width:100%}:host([inset]),:host([inset-start]){padding-inline-start:16px}:host([inset]),:host([inset-end]){padding-inline-end:16px}:host::before{background:currentColor;content:\"\";height:100%;width:100%}@media(forced-colors: active){:host::before{background:CanvasText}}\n`;\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement} from 'lit';\nimport {property} from 'lit/decorators.js';\n\n/**\n * A divider component.\n */\nexport class Divider extends LitElement {\n  /**\n   * Indents the divider with equal padding on both sides.\n   */\n  @property({type: Boolean, reflect: true}) inset = false;\n\n  /**\n   * Indents the divider with padding on the leading side.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'inset-start'})\n  insetStart = false;\n\n  /**\n   * Indents the divider with padding on the trailing side.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'inset-end'})\n  insetEnd = false;\n}\n"],"names":["THEME_COLORS","Set","computeCssColor","color","has","HaColorPicker","LitElement","connectedCallback","super","this","_select","layoutOptions","_valueSelected","ev","stopPropagation","isConnected","value","target","defaultColor","undefined","fireEvent","render","isCustom","html","Boolean","label","helper","disabled","mdiInvertColorsOff","mdiPalette","_renderColorCircle","nothing","includeNone","hass","localize","includeState","Array","from","map","styleMap","args","styles","css","attribute","type","String","HaMdDivider","Divider","HaSelectorUiColor","selector","ui_color","include_none","include_state","default_color","_valueChanged","detail","constructor","inset","insetStart","insetEnd","__decorate","property","reflect"],"mappings":"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"}