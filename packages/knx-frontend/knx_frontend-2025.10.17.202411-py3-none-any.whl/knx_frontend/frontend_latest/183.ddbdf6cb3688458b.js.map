{"version":3,"file":"183.ddbdf6cb3688458b.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/show-dialog-floor-registry-detail.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floors-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-floor.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/util/time-cache-function-promise.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/entity_sources.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/floor_registry.ts","webpack://knx-frontend/./homeassistant-frontend/src/mixins/subscribe-mixin.ts"],"sourcesContent":["import {\n  mdiHome,\n  mdiHomeFloor0,\n  mdiHomeFloor1,\n  mdiHomeFloor2,\n  mdiHomeFloor3,\n  mdiHomeFloorNegative1,\n} from \"@mdi/js\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { FloorRegistryEntry } from \"../data/floor_registry\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\nexport const floorDefaultIconPath = (\n  floor: Pick<FloorRegistryEntry, \"level\">\n) => {\n  switch (floor.level) {\n    case 0:\n      return mdiHomeFloor0;\n    case 1:\n      return mdiHomeFloor1;\n    case 2:\n      return mdiHomeFloor2;\n    case 3:\n      return mdiHomeFloor3;\n    case -1:\n      return mdiHomeFloorNegative1;\n  }\n  return mdiHome;\n};\n\nexport const floorDefaultIcon = (floor: Pick<FloorRegistryEntry, \"level\">) => {\n  switch (floor.level) {\n    case 0:\n      return \"mdi:home-floor-0\";\n    case 1:\n      return \"mdi:home-floor-1\";\n    case 2:\n      return \"mdi:home-floor-2\";\n    case 3:\n      return \"mdi:home-floor-3\";\n    case -1:\n      return \"mdi:home-floor-negative-1\";\n  }\n  return \"mdi:home\";\n};\n\n@customElement(\"ha-floor-icon\")\nexport class HaFloorIcon extends LitElement {\n  @property({ attribute: false }) public floor!: Pick<\n    FloorRegistryEntry,\n    \"icon\" | \"level\"\n  >;\n\n  @property() public icon?: string;\n\n  protected render() {\n    if (this.floor.icon) {\n      return html`<ha-icon .icon=${this.floor.icon}></ha-icon>`;\n    }\n    const defaultPath = floorDefaultIconPath(this.floor);\n\n    return html`<ha-svg-icon .path=${defaultPath}></ha-svg-icon>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-icon\": HaFloorIcon;\n  }\n}\n","import { fireEvent } from \"../../../common/dom/fire_event\";\nimport type {\n  FloorRegistryEntry,\n  FloorRegistryEntryMutableParams,\n} from \"../../../data/floor_registry\";\n\nexport interface FloorRegistryDetailDialogParams {\n  entry?: FloorRegistryEntry;\n  suggestedName?: string;\n  createEntry?: (\n    values: FloorRegistryEntryMutableParams,\n    addedAreas: Set<string>\n  ) => Promise<unknown>;\n  updateEntry?: (\n    updates: Partial<FloorRegistryEntryMutableParams>,\n    addedAreas: Set<string>,\n    removedAreas: Set<string>\n  ) => Promise<unknown>;\n}\n\nexport const loadFloorRegistryDetailDialog = () =>\n  import(\"./dialog-floor-registry-detail\");\n\nexport const showFloorRegistryDetailDialog = (\n  element: HTMLElement,\n  systemLogDetailParams: FloorRegistryDetailDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-floor-registry-detail\",\n    dialogImport: loadFloorRegistryDetailDialog,\n    dialogParams: systemLogDetailParams,\n  });\n};\n","import { mdiPlus, mdiTextureBox } from \"@mdi/js\";\nimport type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeFloorName } from \"../common/entity/compute_floor_name\";\nimport { updateAreaRegistryEntry } from \"../data/area_registry\";\nimport type {\n  DeviceEntityDisplayLookup,\n  DeviceRegistryEntry,\n} from \"../data/device_registry\";\nimport { getDeviceEntityDisplayLookup } from \"../data/device_registry\";\nimport type { EntityRegistryDisplayEntry } from \"../data/entity_registry\";\nimport {\n  createFloorRegistryEntry,\n  getFloorAreaLookup,\n  type FloorRegistryEntry,\n} from \"../data/floor_registry\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { showFloorRegistryDetailDialog } from \"../panels/config/areas/show-dialog-floor-registry-detail\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-combo-box-item\";\nimport \"./ha-floor-icon\";\nimport \"./ha-generic-picker\";\nimport type { HaGenericPicker } from \"./ha-generic-picker\";\nimport \"./ha-icon-button\";\nimport type { PickerComboBoxItem } from \"./ha-picker-combo-box\";\nimport type { PickerValueRenderer } from \"./ha-picker-field\";\nimport \"./ha-svg-icon\";\n\nconst ADD_NEW_ID = \"___ADD_NEW___\";\n\ninterface FloorComboBoxItem extends PickerComboBoxItem {\n  floor?: FloorRegistryEntry;\n}\n\n@customElement(\"ha-floor-picker\")\nexport class HaFloorPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of floors to be excluded.\n   * @type {Array}\n   * @attr exclude-floors\n   */\n  @property({ type: Array, attribute: \"exclude-floors\" })\n  public excludeFloors?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @query(\"ha-generic-picker\") private _picker?: HaGenericPicker;\n\n  public async open() {\n    await this.updateComplete;\n    await this._picker?.open();\n  }\n\n  // Recompute value renderer when the areas change\n  private _computeValueRenderer = memoizeOne(\n    (_haAreas: HomeAssistant[\"floors\"]): PickerValueRenderer =>\n      (value) => {\n        const floor = this.hass.floors[value];\n\n        if (!floor) {\n          return html`\n            <ha-svg-icon slot=\"start\" .path=${mdiTextureBox}></ha-svg-icon>\n            <span slot=\"headline\">${floor}</span>\n          `;\n        }\n\n        const floorName = floor ? computeFloorName(floor) : undefined;\n\n        return html`\n          <ha-floor-icon slot=\"start\" .floor=${floor}></ha-floor-icon>\n          <span slot=\"headline\">${floorName}</span>\n        `;\n      }\n  );\n\n  private _getFloors = memoizeOne(\n    (\n      haFloors: HomeAssistant[\"floors\"],\n      haAreas: HomeAssistant[\"areas\"],\n      haDevices: HomeAssistant[\"devices\"],\n      haEntities: HomeAssistant[\"entities\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      excludeFloors: this[\"excludeFloors\"]\n    ): FloorComboBoxItem[] => {\n      const floors = Object.values(haFloors);\n      const areas = Object.values(haAreas);\n      const devices = Object.values(haDevices);\n      const entities = Object.values(haEntities);\n\n      let deviceEntityLookup: DeviceEntityDisplayLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryDisplayEntry[] | undefined;\n\n      if (\n        includeDomains ||\n        excludeDomains ||\n        includeDeviceClasses ||\n        deviceFilter ||\n        entityFilter\n      ) {\n        deviceEntityLookup = getDeviceEntityDisplayLookup(entities);\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.area_id);\n\n        if (includeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) =>\n              includeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (excludeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return true;\n            }\n            return entities.every(\n              (entity) =>\n                !excludeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (includeDeviceClasses) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return (\n                stateObj.attributes.device_class &&\n                includeDeviceClasses.includes(stateObj.attributes.device_class)\n              );\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        }\n\n        if (deviceFilter) {\n          inputDevices = inputDevices!.filter((device) =>\n            deviceFilter!(device)\n          );\n        }\n\n        if (entityFilter) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return entityFilter(stateObj);\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return entityFilter!(stateObj);\n          });\n        }\n      }\n\n      let outputFloors = floors;\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n      }\n\n      if (areaIds) {\n        const floorAreaLookup = getFloorAreaLookup(areas);\n        outputFloors = outputFloors.filter((floor) =>\n          floorAreaLookup[floor.floor_id]?.some((area) =>\n            areaIds!.includes(area.area_id)\n          )\n        );\n      }\n\n      if (excludeFloors) {\n        outputFloors = outputFloors.filter(\n          (floor) => !excludeFloors!.includes(floor.floor_id)\n        );\n      }\n\n      const items = outputFloors.map<FloorComboBoxItem>((floor) => {\n        const floorName = computeFloorName(floor);\n        return {\n          id: floor.floor_id,\n          primary: floorName,\n          floor: floor,\n          sorting_label: floor.level?.toString() || \"zzzzz\",\n          search_labels: [floorName, floor.floor_id, ...floor.aliases].filter(\n            (v): v is string => Boolean(v)\n          ),\n        };\n      });\n\n      return items;\n    }\n  );\n\n  private _rowRenderer: ComboBoxLitRenderer<FloorComboBoxItem> = (item) => html`\n    <ha-combo-box-item type=\"button\" compact>\n      ${item.icon_path\n        ? html`\n            <ha-svg-icon\n              slot=\"start\"\n              style=\"margin: 0 4px\"\n              .path=${item.icon_path}\n            ></ha-svg-icon>\n          `\n        : html`\n            <ha-floor-icon\n              slot=\"start\"\n              .floor=${item.floor}\n              style=\"margin: 0 4px\"\n            ></ha-floor-icon>\n          `}\n      <span slot=\"headline\">${item.primary}</span>\n    </ha-combo-box-item>\n  `;\n\n  private _getItems = () =>\n    this._getFloors(\n      this.hass.floors,\n      this.hass.areas,\n      this.hass.devices,\n      this.hass.entities,\n      this.includeDomains,\n      this.excludeDomains,\n      this.includeDeviceClasses,\n      this.deviceFilter,\n      this.entityFilter,\n      this.excludeFloors\n    );\n\n  private _allFloorNames = memoizeOne(\n    (floors: HomeAssistant[\"floors\"]) =>\n      Object.values(floors)\n        .map((floor) => computeFloorName(floor)?.toLowerCase())\n        .filter(Boolean) as string[]\n  );\n\n  private _getAdditionalItems = (\n    searchString?: string\n  ): PickerComboBoxItem[] => {\n    if (this.noAdd) {\n      return [];\n    }\n\n    const allFloors = this._allFloorNames(this.hass.floors);\n\n    if (searchString && !allFloors.includes(searchString.toLowerCase())) {\n      return [\n        {\n          id: ADD_NEW_ID + searchString,\n          primary: this.hass.localize(\n            \"ui.components.floor-picker.add_new_sugestion\",\n            {\n              name: searchString,\n            }\n          ),\n          icon_path: mdiPlus,\n        },\n      ];\n    }\n\n    return [\n      {\n        id: ADD_NEW_ID,\n        primary: this.hass.localize(\"ui.components.floor-picker.add_new\"),\n        icon_path: mdiPlus,\n      },\n    ];\n  };\n\n  protected render(): TemplateResult {\n    const placeholder =\n      this.placeholder ??\n      this.hass.localize(\"ui.components.floor-picker.floor\");\n\n    const valueRenderer = this._computeValueRenderer(this.hass.floors);\n\n    return html`\n      <ha-generic-picker\n        .hass=${this.hass}\n        .autofocus=${this.autofocus}\n        .label=${this.label}\n        .notFoundLabel=${this.hass.localize(\n          \"ui.components.floor-picker.no_match\"\n        )}\n        .placeholder=${placeholder}\n        .value=${this.value}\n        .getItems=${this._getItems}\n        .getAdditionalItems=${this._getAdditionalItems}\n        .valueRenderer=${valueRenderer}\n        .rowRenderer=${this._rowRenderer}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-generic-picker>\n    `;\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n\n    if (!value) {\n      this._setValue(undefined);\n      return;\n    }\n\n    if (value.startsWith(ADD_NEW_ID)) {\n      this.hass.loadFragmentTranslation(\"config\");\n\n      const suggestedName = value.substring(ADD_NEW_ID.length);\n\n      showFloorRegistryDetailDialog(this, {\n        suggestedName: suggestedName,\n        createEntry: async (values, addedAreas) => {\n          try {\n            const floor = await createFloorRegistryEntry(this.hass, values);\n            addedAreas.forEach((areaId) => {\n              updateAreaRegistryEntry(this.hass, areaId, {\n                floor_id: floor.floor_id,\n              });\n            });\n            this._setValue(floor.floor_id);\n          } catch (err: any) {\n            showAlertDialog(this, {\n              title: this.hass.localize(\n                \"ui.components.floor-picker.failed_create_floor\"\n              ),\n              text: err.message,\n            });\n          }\n        },\n      });\n      return;\n    }\n\n    this._setValue(value);\n  }\n\n  private _setValue(value?: string) {\n    this.value = value;\n    fireEvent(this, \"value-changed\", { value });\n    fireEvent(this, \"change\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-picker\": HaFloorPicker;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-floor-picker\";\n\n@customElement(\"ha-floors-picker\")\nexport class HaFloorsPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ attribute: \"picked-floor-label\" })\n  public pickedFloorLabel?: string;\n\n  @property({ attribute: \"pick-floor-label\" })\n  public pickFloorLabel?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const currentFloors = this._currentFloors;\n    return html`\n      ${currentFloors.map(\n        (floor) => html`\n          <div>\n            <ha-floor-picker\n              .curValue=${floor}\n              .noAdd=${this.noAdd}\n              .hass=${this.hass}\n              .value=${floor}\n              .label=${this.pickedFloorLabel}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .deviceFilter=${this.deviceFilter}\n              .entityFilter=${this.entityFilter}\n              .disabled=${this.disabled}\n              @value-changed=${this._floorChanged}\n            ></ha-floor-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-floor-picker\n          .noAdd=${this.noAdd}\n          .hass=${this.hass}\n          .label=${this.pickFloorLabel}\n          .helper=${this.helper}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityFilter}\n          .disabled=${this.disabled}\n          .placeholder=${this.placeholder}\n          .required=${this.required && !currentFloors.length}\n          @value-changed=${this._addFloor}\n          .excludeFloors=${currentFloors}\n        ></ha-floor-picker>\n      </div>\n    `;\n  }\n\n  private get _currentFloors(): string[] {\n    return this.value || [];\n  }\n\n  private async _updateFloors(floors) {\n    this.value = floors;\n\n    fireEvent(this, \"value-changed\", {\n      value: floors,\n    });\n  }\n\n  private _floorChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const curValue = (ev.currentTarget as any).curValue;\n    const newValue = ev.detail.value;\n    if (newValue === curValue) {\n      return;\n    }\n    const currentFloors = this._currentFloors;\n    if (!newValue || currentFloors.includes(newValue)) {\n      this._updateFloors(currentFloors.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateFloors(\n      currentFloors.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private _addFloor(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    const toAdd = ev.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (ev.currentTarget as any).value = \"\";\n    const currentFloors = this._currentFloors;\n    if (currentFloors.includes(toAdd)) {\n      return;\n    }\n\n    this._updateFloors([...currentFloors, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floors-picker\": HaFloorsPicker;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { getDeviceIntegrationLookup } from \"../../data/device_registry\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { EntitySources } from \"../../data/entity_sources\";\nimport { fetchEntitySourcesWithCache } from \"../../data/entity_sources\";\nimport type { FloorSelector } from \"../../data/selector\";\nimport type { ConfigEntry } from \"../../data/config_entries\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport {\n  filterSelectorDevices,\n  filterSelectorEntities,\n} from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-floor-picker\";\nimport \"../ha-floors-picker\";\n\n@customElement(\"ha-selector-floor\")\nexport class HaFloorSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: FloorSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _entitySources?: EntitySources;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  private _deviceIntegrationLookup = memoizeOne(getDeviceIntegrationLookup);\n\n  private _hasIntegration(selector: FloorSelector) {\n    return (\n      (selector.floor?.entity &&\n        ensureArray(selector.floor.entity).some(\n          (filter) => filter.integration\n        )) ||\n      (selector.floor?.device &&\n        ensureArray(selector.floor.device).some((device) => device.integration))\n    );\n  }\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    if (changedProperties.get(\"selector\") && this.value !== undefined) {\n      if (this.selector.floor?.multiple && !Array.isArray(this.value)) {\n        this.value = [this.value];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      } else if (!this.selector.floor?.multiple && Array.isArray(this.value)) {\n        this.value = this.value[0];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      }\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (\n      changedProperties.has(\"selector\") &&\n      this._hasIntegration(this.selector) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n    if (!this._configEntries && this._hasIntegration(this.selector)) {\n      this._configEntries = [];\n      getConfigEntries(this.hass).then((entries) => {\n        this._configEntries = entries;\n      });\n    }\n  }\n\n  protected render() {\n    if (this._hasIntegration(this.selector) && !this._entitySources) {\n      return nothing;\n    }\n\n    if (!this.selector.floor?.multiple) {\n      return html`\n        <ha-floor-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          no-add\n          .deviceFilter=${this.selector.floor?.device\n            ? this._filterDevices\n            : undefined}\n          .entityFilter=${this.selector.floor?.entity\n            ? this._filterEntities\n            : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n        ></ha-floor-picker>\n      `;\n    }\n\n    return html`\n      <ha-floors-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .pickFloorLabel=${this.label}\n        no-add\n        .deviceFilter=${this.selector.floor?.device\n          ? this._filterDevices\n          : undefined}\n        .entityFilter=${this.selector.floor?.entity\n          ? this._filterEntities\n          : undefined}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-floors-picker>\n    `;\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (!this.selector.floor?.entity) {\n      return true;\n    }\n\n    return ensureArray(this.selector.floor.entity).some((filter) =>\n      filterSelectorEntities(filter, entity, this._entitySources)\n    );\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (!this.selector.floor?.device) {\n      return true;\n    }\n\n    const deviceIntegrations = this._entitySources\n      ? this._deviceIntegrationLookup(\n          this._entitySources,\n          Object.values(this.hass.entities),\n          Object.values(this.hass.devices),\n          this._configEntries\n        )\n      : undefined;\n\n    return ensureArray(this.selector.floor.device).some((filter) =>\n      filterSelectorDevices(filter, device, deviceIntegrations)\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-floor\": HaFloorSelector;\n  }\n}\n","import type { HomeAssistant } from \"../../types\";\n\ninterface CacheResult<T> {\n  result: T;\n  cacheKey: any;\n}\n\n/**\n * Caches a result of a promise for X time. Allows optional extra validation\n * check to invalidate the cache.\n * @param cacheKey the key to store the cache\n * @param cacheTime the time to cache the result\n * @param func the function to fetch the data\n * @param generateCacheKey optional function to generate a cache key based on current hass + cached result. Cache is invalid if generates a different cache key.\n * @param hass Home Assistant object\n * @param args extra arguments to pass to the function to fetch the data\n * @returns\n */\nexport const timeCachePromiseFunc = async <T>(\n  cacheKey: string,\n  cacheTime: number,\n  func: (hass: HomeAssistant, ...args: any[]) => Promise<T>,\n  generateCacheKey:\n    | ((hass: HomeAssistant, lastResult: T) => unknown)\n    | undefined,\n  hass: HomeAssistant,\n  ...args: any[]\n): Promise<T> => {\n  const anyHass = hass as any;\n  const lastResult: Promise<CacheResult<T>> | CacheResult<T> | undefined =\n    anyHass[cacheKey];\n\n  const checkCachedResult = (result: CacheResult<T>): T | Promise<T> => {\n    if (\n      !generateCacheKey ||\n      generateCacheKey(hass, result.result) === result.cacheKey\n    ) {\n      return result.result;\n    }\n\n    anyHass[cacheKey] = undefined;\n    return timeCachePromiseFunc(\n      cacheKey,\n      cacheTime,\n      func,\n      generateCacheKey,\n      hass,\n      ...args\n    );\n  };\n\n  // If we have a cached result, return it if it's still valid\n  if (lastResult) {\n    return lastResult instanceof Promise\n      ? lastResult.then(checkCachedResult)\n      : checkCachedResult(lastResult);\n  }\n\n  const resultPromise = func(hass, ...args);\n  anyHass[cacheKey] = resultPromise;\n\n  resultPromise.then(\n    // When successful, set timer to clear cache\n    (result) => {\n      anyHass[cacheKey] = {\n        result,\n        cacheKey: generateCacheKey?.(hass, result),\n      };\n      setTimeout(() => {\n        anyHass[cacheKey] = undefined;\n      }, cacheTime);\n    },\n    // On failure, clear cache right away\n    () => {\n      anyHass[cacheKey] = undefined;\n    }\n  );\n\n  return resultPromise;\n};\n","import { timeCachePromiseFunc } from \"../common/util/time-cache-function-promise\";\nimport type { HomeAssistant } from \"../types\";\n\ninterface EntitySource {\n  domain: string;\n}\n\nexport type EntitySources = Record<string, EntitySource>;\n\nconst fetchEntitySources = (hass: HomeAssistant): Promise<EntitySources> =>\n  hass.callWS({ type: \"entity/source\" });\n\nexport const fetchEntitySourcesWithCache = (\n  hass: HomeAssistant\n): Promise<EntitySources> =>\n  timeCachePromiseFunc(\n    \"_entitySources\",\n    // cache for 30 seconds\n    30000,\n    fetchEntitySources,\n    // We base the cache on number of states. If number of states\n    // changes we force a refresh\n    (hass2) => Object.keys(hass2.states).length,\n    hass\n  );\n","import { stringCompare } from \"../common/string/compare\";\nimport type { HomeAssistant } from \"../types\";\nimport type { AreaRegistryEntry } from \"./area_registry\";\nimport type { RegistryEntry } from \"./registry\";\n\nexport { subscribeAreaRegistry } from \"./ws-area_registry\";\n\nexport interface FloorRegistryEntry extends RegistryEntry {\n  floor_id: string;\n  name: string;\n  level: number | null;\n  icon: string | null;\n  aliases: string[];\n}\n\nexport type FloorAreaLookup = Record<string, AreaRegistryEntry[]>;\n\nexport interface FloorRegistryEntryMutableParams {\n  name: string;\n  level?: number | null;\n  icon?: string | null;\n  aliases?: string[];\n}\n\nexport const createFloorRegistryEntry = (\n  hass: HomeAssistant,\n  values: FloorRegistryEntryMutableParams\n) =>\n  hass.callWS<FloorRegistryEntry>({\n    type: \"config/floor_registry/create\",\n    ...values,\n  });\n\nexport const updateFloorRegistryEntry = (\n  hass: HomeAssistant,\n  floorId: string,\n  updates: Partial<FloorRegistryEntryMutableParams>\n) =>\n  hass.callWS<AreaRegistryEntry>({\n    type: \"config/floor_registry/update\",\n    floor_id: floorId,\n    ...updates,\n  });\n\nexport const deleteFloorRegistryEntry = (\n  hass: HomeAssistant,\n  floorId: string\n) =>\n  hass.callWS({\n    type: \"config/floor_registry/delete\",\n    floor_id: floorId,\n  });\n\nexport const getFloorAreaLookup = (\n  areas: AreaRegistryEntry[]\n): FloorAreaLookup => {\n  const floorAreaLookup: FloorAreaLookup = {};\n  for (const area of areas) {\n    if (!area.floor_id) {\n      continue;\n    }\n    if (!(area.floor_id in floorAreaLookup)) {\n      floorAreaLookup[area.floor_id] = [];\n    }\n    floorAreaLookup[area.floor_id].push(area);\n  }\n  return floorAreaLookup;\n};\n\nexport const floorCompare =\n  (entries?: FloorRegistryEntry[], order?: string[]) =>\n  (a: string, b: string) => {\n    const indexA = order ? order.indexOf(a) : -1;\n    const indexB = order ? order.indexOf(b) : -1;\n    if (indexA === -1 && indexB === -1) {\n      const nameA = entries?.[a]?.name ?? a;\n      const nameB = entries?.[b]?.name ?? b;\n      return stringCompare(nameA, nameB);\n    }\n    if (indexA === -1) {\n      return 1;\n    }\n    if (indexB === -1) {\n      return -1;\n    }\n    return indexA - indexB;\n  };\n","import type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport type { PropertyValues, ReactiveElement } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport type { Constructor, HomeAssistant } from \"../types\";\n\nexport interface HassSubscribeElement {\n  hassSubscribe(): UnsubscribeFunc[];\n}\n\nexport const SubscribeMixin = <T extends Constructor<ReactiveElement>>(\n  superClass: T\n) => {\n  class SubscribeClass extends superClass {\n    @property({ attribute: false }) public hass?: HomeAssistant;\n\n    // we wait with subscribing till these properties are set on the host element\n    protected hassSubscribeRequiredHostProps?: string[];\n\n    private __unsubs?: (UnsubscribeFunc | Promise<UnsubscribeFunc>)[];\n\n    public connectedCallback() {\n      super.connectedCallback();\n      this._checkSubscribed();\n    }\n\n    public disconnectedCallback() {\n      super.disconnectedCallback();\n      if (this.__unsubs) {\n        while (this.__unsubs.length) {\n          const unsub = this.__unsubs.pop()!;\n          if (unsub instanceof Promise) {\n            unsub.then((unsubFunc) => unsubFunc());\n          } else {\n            unsub();\n          }\n        }\n        this.__unsubs = undefined;\n      }\n    }\n\n    protected updated(changedProps: PropertyValues) {\n      super.updated(changedProps);\n      if (changedProps.has(\"hass\")) {\n        this._checkSubscribed();\n        return;\n      }\n      if (!this.hassSubscribeRequiredHostProps) {\n        return;\n      }\n      for (const key of changedProps.keys()) {\n        if (this.hassSubscribeRequiredHostProps.includes(key as string)) {\n          this._checkSubscribed();\n          return;\n        }\n      }\n    }\n\n    protected hassSubscribe(): (UnsubscribeFunc | Promise<UnsubscribeFunc>)[] {\n      return [];\n    }\n\n    private _checkSubscribed(): void {\n      if (\n        this.__unsubs !== undefined ||\n        !(this as unknown as Element).isConnected ||\n        this.hass === undefined ||\n        this.hassSubscribeRequiredHostProps?.some(\n          (prop) => this[prop] === undefined\n        )\n      ) {\n        return;\n      }\n      this.__unsubs = this.hassSubscribe();\n    }\n  }\n  return SubscribeClass;\n};\n"],"names":["floorDefaultIconPath","floor","level","HaFloorIcon","LitElement","render","this","icon","html","defaultPath","attribute","loadFloorRegistryDetailDialog","e","ADD_NEW_ID","HaFloorPicker","open","updateComplete","_picker","placeholder","hass","localize","valueRenderer","_computeValueRenderer","floors","autofocus","label","value","_getItems","_getAdditionalItems","_rowRenderer","_valueChanged","ev","stopPropagation","detail","startsWith","loadFragmentTranslation","suggestedName","substring","element","systemLogDetailParams","createEntry","values","addedAreas","createFloorRegistryEntry","forEach","areaId","updateAreaRegistryEntry","floor_id","_setValue","err","showAlertDialog","title","text","message","fireEvent","dialogTag","dialogImport","dialogParams","showFloorRegistryDetailDialog","undefined","args","noAdd","disabled","required","memoizeOne","_haAreas","floorName","computeFloorName","_getFloors","haFloors","haAreas","haDevices","haEntities","includeDomains","excludeDomains","includeDeviceClasses","deviceFilter","entityFilter","excludeFloors","Object","areas","devices","entities","inputDevices","inputEntities","deviceEntityLookup","getDeviceEntityDisplayLookup","filter","entity","area_id","device","devEntities","id","length","some","includes","computeDomain","entity_id","every","stateObj","states","attributes","device_class","areaIds","outputFloors","map","concat","floorAreaLookup","getFloorAreaLookup","area","primary","sorting_label","toString","search_labels","aliases","v","Boolean","item","icon_path","_allFloorNames","toLowerCase","searchString","allFloors","name","mdiPlus","type","Array","HaFloorsPicker","SubscribeMixin","nothing","currentFloors","_currentFloors","pickedFloorLabel","_floorChanged","pickFloorLabel","helper","_addFloor","_updateFloors","curValue","currentTarget","newValue","ent","toAdd","styles","css","HaFloorSelector","_hasIntegration","selector","ensureArray","integration","willUpdate","changedProperties","get","multiple","isArray","updated","has","_entitySources","fetchEntitySourcesWithCache","then","sources","_configEntries","getConfigEntries","entries","_filterDevices","_filterEntities","_deviceIntegrationLookup","getDeviceIntegrationLookup","filterSelectorEntities","deviceIntegrations","filterSelectorDevices","timeCachePromiseFunc","cacheKey","cacheTime","func","generateCacheKey","anyHass","lastResult","checkCachedResult","result","Promise","resultPromise","setTimeout","fetchEntitySources","callWS","hass2","keys","push","superClass","SubscribeClass","connectedCallback","super","_checkSubscribed","disconnectedCallback","__unsubs","unsub","pop","unsubFunc","changedProps","hassSubscribeRequiredHostProps","key","hassSubscribe","isConnected","prop"],"mappings":"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"}