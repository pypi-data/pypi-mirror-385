{"version":3,"file":"6999.d0ce02cf96bc8058.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-stt-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-stt.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/stt.ts"],"sourcesContent":["import type { PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { STTEngine } from \"../data/stt\";\nimport { listSTTEngines } from \"../data/stt\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\n\nconst NONE = \"__NONE_OPTION__\";\n\n@customElement(\"ha-stt-picker\")\nexport class HaSTTPicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public language?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() _engines?: STTEngine[];\n\n  protected render() {\n    if (!this._engines) {\n      return nothing;\n    }\n\n    let value = this.value;\n    if (!value && this.required) {\n      for (const entity of Object.values(this.hass.entities)) {\n        if (\n          entity.platform === \"cloud\" &&\n          computeDomain(entity.entity_id) === \"stt\"\n        ) {\n          value = entity.entity_id;\n          break;\n        }\n      }\n\n      if (!value) {\n        for (const sttEngine of this._engines) {\n          if (sttEngine?.supported_languages?.length !== 0) {\n            value = sttEngine.engine_id;\n            break;\n          }\n        }\n      }\n    }\n    if (!value) {\n      value = NONE;\n    }\n\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\"ui.components.stt-picker.stt\")}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${!this.required\n          ? html`<ha-list-item .value=${NONE}>\n              ${this.hass!.localize(\"ui.components.stt-picker.none\")}\n            </ha-list-item>`\n          : nothing}\n        ${this._engines.map((engine) => {\n          if (engine.deprecated && engine.engine_id !== value) {\n            return nothing;\n          }\n          let label: string;\n          if (engine.engine_id.includes(\".\")) {\n            const stateObj = this.hass!.states[engine.engine_id];\n            label = stateObj ? computeStateName(stateObj) : engine.engine_id;\n          } else {\n            label = engine.name || engine.engine_id;\n          }\n          return html`<ha-list-item\n            .value=${engine.engine_id}\n            .disabled=${engine.supported_languages?.length === 0}\n          >\n            ${label}\n          </ha-list-item>`;\n        })}\n      </ha-select>\n    `;\n  }\n\n  protected willUpdate(changedProperties: PropertyValues<this>): void {\n    super.willUpdate(changedProperties);\n    if (!this.hasUpdated) {\n      this._updateEngines();\n    } else if (changedProperties.has(\"language\")) {\n      this._debouncedUpdateEngines();\n    }\n  }\n\n  private _debouncedUpdateEngines = debounce(() => this._updateEngines(), 500);\n\n  private async _updateEngines() {\n    this._engines = (\n      await listSTTEngines(\n        this.hass,\n        this.language,\n        this.hass.config.country || undefined\n      )\n    ).providers;\n\n    if (!this.value) {\n      return;\n    }\n\n    const selectedEngine = this._engines.find(\n      (engine) => engine.engine_id === this.value\n    );\n\n    fireEvent(this, \"supported-languages-changed\", {\n      value: selectedEngine?.supported_languages,\n    });\n\n    if (!selectedEngine || selectedEngine.supported_languages?.length === 0) {\n      this.value = undefined;\n      fireEvent(this, \"value-changed\", { value: this.value });\n    }\n  }\n\n  static styles = css`\n    ha-select {\n      width: 100%;\n    }\n  `;\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === NONE)\n    ) {\n      return;\n    }\n    this.value = target.value === NONE ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n    fireEvent(this, \"supported-languages-changed\", {\n      value: this._engines!.find((engine) => engine.engine_id === this.value)\n        ?.supported_languages,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-stt-picker\": HaSTTPicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { STTSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-stt-picker\";\n\n@customElement(\"ha-selector-stt\")\nexport class HaSTTSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: STTSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    language?: string;\n  };\n\n  protected render() {\n    return html`<ha-stt-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .language=${this.selector.stt?.language || this.context?.language}\n      .disabled=${this.disabled}\n      .required=${this.required}\n    ></ha-stt-picker>`;\n  }\n\n  static styles = css`\n    ha-stt-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-stt\": HaSTTSelector;\n  }\n}\n","import type { HomeAssistant } from \"../types\";\n\nexport interface SpeechMetadata {\n  language: string;\n  format: \"wav\" | \"ogg\";\n  codec: \"pcm\" | \"opus\";\n  bit_rate: 8 | 16 | 24 | 32;\n  sample_rate:\n    | 8000\n    | 11000\n    | 16000\n    | 18900\n    | 22000\n    | 32000\n    | 37800\n    | 44100\n    | 48000;\n  channel: 1 | 2;\n}\n\nexport interface STTEngine {\n  engine_id: string;\n  supported_languages?: string[];\n  name?: string;\n  deprecated: boolean;\n}\n\nexport const listSTTEngines = (\n  hass: HomeAssistant,\n  language?: string,\n  country?: string\n): Promise<{ providers: STTEngine[] }> =>\n  hass.callWS({\n    type: \"stt/engine/list\",\n    language,\n    country,\n  });\n"],"names":["NONE","HaSTTPicker","LitElement","render","this","_engines","nothing","value","required","entity","Object","values","hass","entities","platform","computeDomain","entity_id","sttEngine","_sttEngine$supported_","supported_languages","length","engine_id","html","_t","_","label","localize","disabled","_changed","stopPropagation","_t2","map","engine","_engine$supported_lan","deprecated","includes","stateObj","states","computeStateName","name","_t3","willUpdate","changedProperties","super","hasUpdated","has","_debouncedUpdateEngines","_updateEngines","_selectedEngine$suppo","listSTTEngines","language","config","country","undefined","providers","selectedEngine","find","fireEvent","ev","_this$_engines$find","target","args","debounce","styles","css","_t4","attribute","type","Boolean","reflect","HaSTTSelector","_this$selector$stt","_this$context","helper","selector","stt","context","callWS"],"mappings":"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"}