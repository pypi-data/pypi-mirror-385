{"version":3,"file":"4560.a860edf8b6868168.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/data/supervisor/mounts.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-mount-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-backup-location.ts"],"sourcesContent":["import type { HomeAssistant } from \"../../types\";\n\nexport enum SupervisorMountType {\n  BIND = \"bind\",\n  CIFS = \"cifs\",\n  NFS = \"nfs\",\n}\n\nexport enum SupervisorMountUsage {\n  BACKUP = \"backup\",\n  MEDIA = \"media\",\n  SHARE = \"share\",\n}\n\nexport enum SupervisorMountState {\n  ACTIVE = \"active\",\n  FAILED = \"failed\",\n  UNKNOWN = \"unknown\",\n}\n\ninterface MountOptions {\n  default_backup_mount?: string | null;\n}\n\nexport type CIFSVersion = \"auto\" | \"1.0\" | \"2.0\";\n\ninterface SupervisorMountBase {\n  name: string;\n  usage: SupervisorMountUsage;\n  type: SupervisorMountType;\n  server: string;\n  port: number;\n}\n\nexport interface SupervisorMountResponse extends SupervisorMountBase {\n  state: SupervisorMountState | null;\n}\n\nexport interface SupervisorNFSMount extends SupervisorMountResponse {\n  type: SupervisorMountType.NFS;\n  path: string;\n}\n\nexport interface SupervisorCIFSMount extends SupervisorMountResponse {\n  type: SupervisorMountType.CIFS;\n  share: string;\n  version?: CIFSVersion;\n}\n\nexport type SupervisorMount = SupervisorNFSMount | SupervisorCIFSMount;\n\nexport type SupervisorNFSMountRequestParams = SupervisorNFSMount;\n\nexport interface SupervisorCIFSMountRequestParams extends SupervisorCIFSMount {\n  username?: string;\n  password?: string;\n  version?: CIFSVersion;\n}\n\nexport type SupervisorMountRequestParams =\n  | SupervisorNFSMountRequestParams\n  | SupervisorCIFSMountRequestParams;\n\nexport interface SupervisorMounts {\n  default_backup_mount: string | null;\n  mounts: SupervisorMount[];\n}\n\nexport const fetchSupervisorMounts = async (\n  hass: HomeAssistant\n): Promise<SupervisorMounts> =>\n  hass.callWS({\n    type: \"supervisor/api\",\n    endpoint: `/mounts`,\n    method: \"get\",\n    timeout: null,\n  });\n\nexport const createSupervisorMount = async (\n  hass: HomeAssistant,\n  data: SupervisorMountRequestParams\n): Promise<void> =>\n  hass.callWS({\n    type: \"supervisor/api\",\n    endpoint: `/mounts`,\n    method: \"post\",\n    timeout: null,\n    data,\n  });\n\nexport const updateSupervisorMount = async (\n  hass: HomeAssistant,\n  data: Partial<SupervisorMountRequestParams>\n): Promise<void> =>\n  hass.callWS({\n    type: \"supervisor/api\",\n    endpoint: `/mounts/${data.name}`,\n    method: \"put\",\n    timeout: null,\n    data,\n  });\n\nexport const removeSupervisorMount = async (\n  hass: HomeAssistant,\n  name: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"supervisor/api\",\n    endpoint: `/mounts/${name}`,\n    method: \"delete\",\n    timeout: null,\n  });\n\nexport const reloadSupervisorMount = async (\n  hass: HomeAssistant,\n  data: SupervisorMount\n): Promise<void> =>\n  hass.callWS({\n    type: \"supervisor/api\",\n    endpoint: `/mounts/${data.name}/reload`,\n    method: \"post\",\n    timeout: null,\n  });\n\nexport const changeMountOptions = async (\n  hass: HomeAssistant,\n  data: MountOptions\n): Promise<void> =>\n  hass.callWS({\n    type: \"supervisor/api\",\n    endpoint: `/mounts/options`,\n    method: \"post\",\n    timeout: null,\n    data,\n  });\n","import { mdiBackupRestore, mdiFolder, mdiHarddisk, mdiPlayBox } from \"@mdi/js\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport type { SupervisorMounts } from \"../data/supervisor/mounts\";\nimport {\n  fetchSupervisorMounts,\n  SupervisorMountType,\n  SupervisorMountUsage,\n} from \"../data/supervisor/mounts\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-alert\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nconst _BACKUP_DATA_DISK_ = \"/backup\";\n\n@customElement(\"ha-mount-picker\")\nclass HaMountPicker extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public usage?: SupervisorMountUsage;\n\n  @state() private _mounts?: SupervisorMounts;\n\n  @state() private _error?: string;\n\n  protected firstUpdated() {\n    this._getMounts();\n  }\n\n  protected render() {\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`;\n    }\n    if (!this._mounts) {\n      return nothing;\n    }\n    const dataDiskOption = html`<ha-list-item\n      graphic=\"icon\"\n      .value=${_BACKUP_DATA_DISK_}\n    >\n      <span>\n        ${this.hass.localize(\"ui.components.mount-picker.use_datadisk\") ||\n        \"Use data disk for backup\"}\n      </span>\n      <ha-svg-icon slot=\"graphic\" .path=${mdiHarddisk}></ha-svg-icon>\n    </ha-list-item>`;\n    return html`\n      <ha-select\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.mount-picker.mount\")\n          : this.label}\n        .value=${this._value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        @selected=${this._mountChanged}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${this.usage === SupervisorMountUsage.BACKUP &&\n        (!this._mounts.default_backup_mount ||\n          this._mounts.default_backup_mount === _BACKUP_DATA_DISK_)\n          ? dataDiskOption\n          : nothing}\n        ${this._filterMounts(this._mounts, this.usage).map(\n          (mount) =>\n            html`<ha-list-item twoline graphic=\"icon\" .value=${mount.name}>\n              <span>${mount.name}</span>\n              <span slot=\"secondary\"\n                >${mount.server}${mount.port\n                  ? `:${mount.port}`\n                  : nothing}${mount.type === SupervisorMountType.NFS\n                  ? mount.path\n                  : `:${mount.share}`}</span\n              >\n              <ha-svg-icon\n                slot=\"graphic\"\n                .path=${mount.usage === SupervisorMountUsage.MEDIA\n                  ? mdiPlayBox\n                  : mount.usage === SupervisorMountUsage.SHARE\n                    ? mdiFolder\n                    : mdiBackupRestore}\n              ></ha-svg-icon>\n            </ha-list-item>`\n        )}\n        ${this.usage === SupervisorMountUsage.BACKUP &&\n        this._mounts.default_backup_mount\n          ? dataDiskOption\n          : nothing}\n      </ha-select>\n    `;\n  }\n\n  private _filterMounts = memoizeOne(\n    (mounts: SupervisorMounts, usage: this[\"usage\"]) => {\n      let filteredMounts = mounts.mounts.filter((mount) =>\n        [SupervisorMountType.CIFS, SupervisorMountType.NFS].includes(mount.type)\n      );\n      if (usage) {\n        filteredMounts = mounts.mounts.filter((mount) => mount.usage === usage);\n      }\n      return filteredMounts.sort((mountA, mountB) => {\n        if (mountA.name === mounts.default_backup_mount) {\n          return -1;\n        }\n        if (mountB.name === mounts.default_backup_mount) {\n          return 1;\n        }\n        return caseInsensitiveStringCompare(\n          mountA.name,\n          mountB.name,\n          this.hass.locale.language\n        );\n      });\n    }\n  );\n\n  private async _getMounts() {\n    try {\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        this._mounts = await fetchSupervisorMounts(this.hass);\n        if (this.usage === SupervisorMountUsage.BACKUP && !this.value) {\n          this.value = this._mounts.default_backup_mount || _BACKUP_DATA_DISK_;\n        }\n      } else {\n        this._error = this.hass.localize(\n          \"ui.components.mount-picker.error.no_supervisor\"\n        );\n      }\n    } catch (_err: any) {\n      this._error = this.hass.localize(\n        \"ui.components.mount-picker.error.fetch_mounts\"\n      );\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _mountChanged(ev: Event) {\n    ev.stopPropagation();\n    const target = ev.target as HaSelect;\n    const newValue = target.value;\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-select {\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-mount-picker\": HaMountPicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { BackupLocationSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-mount-picker\";\n\n@customElement(\"ha-selector-backup_location\")\nexport class HaBackupLocationSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: BackupLocationSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`<ha-mount-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      .required=${this.required}\n      usage=\"backup\"\n    ></ha-mount-picker>`;\n  }\n\n  static styles = css`\n    ha-mount-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-backup_location\": HaBackupLocationSelector;\n  }\n}\n"],"names":["SupervisorMountType","SupervisorMountUsage","_BACKUP_DATA_DISK_","HaMountPicker","LitElement","firstUpdated","this","_getMounts","render","_error","html","_t","_","_mounts","nothing","dataDiskOption","_t2","hass","localize","_t3","undefined","label","_value","required","disabled","helper","_mountChanged","stopPropagation","usage","default_backup_mount","_filterMounts","map","mount","_t4","name","server","port","type","path","share","isComponentLoaded","callWS","endpoint","method","timeout","fetchSupervisorMounts","value","_err","ev","newValue","target","_setValue","setTimeout","fireEvent","styles","css","_t5","args","memoizeOne","mounts","filteredMounts","filter","includes","sort","mountA","mountB","caseInsensitiveStringCompare","locale","language","Boolean","HaBackupLocationSelector","attribute"],"mappings":"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"}