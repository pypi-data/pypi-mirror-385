{"version":3,"file":"7691.5b69bc8b628fdbc6.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-form/ha-form.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-icon-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/helpers/forms/ha-input_text-form.ts"],"sourcesContent":["import type { PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, ReactiveElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-alert\";\nimport \"../ha-selector/ha-selector\";\nimport type { HaFormDataContainer, HaFormElement, HaFormSchema } from \"./types\";\n\nconst LOAD_ELEMENTS = {\n  boolean: () => import(\"./ha-form-boolean\"),\n  constant: () => import(\"./ha-form-constant\"),\n  float: () => import(\"./ha-form-float\"),\n  grid: () => import(\"./ha-form-grid\"),\n  expandable: () => import(\"./ha-form-expandable\"),\n  integer: () => import(\"./ha-form-integer\"),\n  multi_select: () => import(\"./ha-form-multi_select\"),\n  positive_time_period_dict: () =>\n    import(\"./ha-form-positive_time_period_dict\"),\n  select: () => import(\"./ha-form-select\"),\n  string: () => import(\"./ha-form-string\"),\n  optional_actions: () => import(\"./ha-form-optional_actions\"),\n};\n\nconst getValue = (obj, item) =>\n  obj ? (!item.name || item.flatten ? obj : obj[item.name]) : null;\n\nconst getError = (obj, item) => (obj && item.name ? obj[item.name] : null);\n\nconst getWarning = (obj, item) => (obj && item.name ? obj[item.name] : null);\n\n@customElement(\"ha-form\")\nexport class HaForm extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public data!: HaFormDataContainer;\n\n  @property({ attribute: false }) public schema!: readonly HaFormSchema[];\n\n  @property({ attribute: false }) public error?: Record<\n    string,\n    string | string[]\n  >;\n\n  @property({ attribute: false }) public warning?: Record<string, string>;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public computeError?: (\n    schema: any,\n    error\n  ) => string;\n\n  @property({ attribute: false }) public computeWarning?: (\n    schema: any,\n    warning\n  ) => string;\n\n  @property({ attribute: false }) public computeLabel?: (\n    schema: any,\n    data: HaFormDataContainer\n  ) => string;\n\n  @property({ attribute: false }) public computeHelper?: (\n    schema: any\n  ) => string | undefined;\n\n  @property({ attribute: false }) public localizeValue?: (\n    key: string\n  ) => string;\n\n  protected getFormProperties(): Record<string, any> {\n    return {};\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    const root = this.renderRoot.querySelector(\".root\");\n    if (!root) {\n      return;\n    }\n    for (const child of root.children) {\n      if (child.tagName !== \"HA-ALERT\") {\n        if (child instanceof ReactiveElement) {\n          // eslint-disable-next-line no-await-in-loop\n          await child.updateComplete;\n        }\n        (child as HTMLElement).focus();\n        break;\n      }\n    }\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"schema\") && this.schema) {\n      this.schema.forEach((item) => {\n        if (\"selector\" in item) {\n          return;\n        }\n        LOAD_ELEMENTS[item.type]?.();\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"root\" part=\"root\">\n        ${this.error && this.error.base\n          ? html`\n              <ha-alert alert-type=\"error\">\n                ${this._computeError(this.error.base, this.schema)}\n              </ha-alert>\n            `\n          : \"\"}\n        ${this.schema.map((item) => {\n          const error = getError(this.error, item);\n          const warning = getWarning(this.warning, item);\n\n          return html`\n            ${error\n              ? html`\n                  <ha-alert own-margin alert-type=\"error\">\n                    ${this._computeError(error, item)}\n                  </ha-alert>\n                `\n              : warning\n                ? html`\n                    <ha-alert own-margin alert-type=\"warning\">\n                      ${this._computeWarning(warning, item)}\n                    </ha-alert>\n                  `\n                : \"\"}\n            ${\"selector\" in item\n              ? html`<ha-selector\n                  .schema=${item}\n                  .hass=${this.hass}\n                  .narrow=${this.narrow}\n                  .name=${item.name}\n                  .selector=${item.selector}\n                  .value=${getValue(this.data, item)}\n                  .label=${this._computeLabel(item, this.data)}\n                  .disabled=${item.disabled || this.disabled || false}\n                  .placeholder=${item.required ? \"\" : item.default}\n                  .helper=${this._computeHelper(item)}\n                  .localizeValue=${this.localizeValue}\n                  .required=${item.required || false}\n                  .context=${this._generateContext(item)}\n                ></ha-selector>`\n              : dynamicElement(this.fieldElementName(item.type), {\n                  schema: item,\n                  data: getValue(this.data, item),\n                  label: this._computeLabel(item, this.data),\n                  helper: this._computeHelper(item),\n                  disabled: this.disabled || item.disabled || false,\n                  hass: this.hass,\n                  localize: this.hass?.localize,\n                  computeLabel: this.computeLabel,\n                  computeHelper: this.computeHelper,\n                  localizeValue: this.localizeValue,\n                  context: this._generateContext(item),\n                  ...this.getFormProperties(),\n                })}\n          `;\n        })}\n      </div>\n    `;\n  }\n\n  protected fieldElementName(type: string): string {\n    return `ha-form-${type}`;\n  }\n\n  private _generateContext(\n    schema: HaFormSchema\n  ): Record<string, any> | undefined {\n    if (!schema.context) {\n      return undefined;\n    }\n\n    const context = {};\n    for (const [context_key, data_key] of Object.entries(schema.context)) {\n      context[context_key] = this.data[data_key];\n    }\n    return context;\n  }\n\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const root = super.createRenderRoot() as ShadowRoot;\n    // attach it as soon as possible to make sure we fetch all events.\n    this.addValueChangedListener(root);\n    return root;\n  }\n\n  protected addValueChangedListener(element: Element | ShadowRoot) {\n    element.addEventListener(\"value-changed\", (ev) => {\n      ev.stopPropagation();\n      const schema = (ev.target as HaFormElement).schema as HaFormSchema;\n\n      if (ev.target === this) return;\n\n      const newValue =\n        !schema.name || (\"flatten\" in schema && schema.flatten)\n          ? ev.detail.value\n          : { [schema.name]: ev.detail.value };\n\n      this.data = {\n        ...this.data,\n        ...newValue,\n      };\n\n      fireEvent(this, \"value-changed\", {\n        value: this.data,\n      });\n    });\n  }\n\n  private _computeLabel(schema: HaFormSchema, data: HaFormDataContainer) {\n    return this.computeLabel\n      ? this.computeLabel(schema, data)\n      : schema\n        ? schema.name\n        : \"\";\n  }\n\n  private _computeHelper(schema: HaFormSchema) {\n    return this.computeHelper ? this.computeHelper(schema) : \"\";\n  }\n\n  private _computeError(\n    error: string | string[],\n    schema: HaFormSchema | readonly HaFormSchema[]\n  ): string | TemplateResult {\n    if (Array.isArray(error)) {\n      return html`<ul>\n        ${error.map(\n          (err) =>\n            html`<li>\n              ${this.computeError ? this.computeError(err, schema) : err}\n            </li>`\n        )}\n      </ul>`;\n    }\n    return this.computeError ? this.computeError(error, schema) : error;\n  }\n\n  private _computeWarning(\n    warning,\n    schema: HaFormSchema | readonly HaFormSchema[]\n  ) {\n    return this.computeWarning ? this.computeWarning(warning, schema) : warning;\n  }\n\n  static styles = css`\n    .root > * {\n      display: block;\n    }\n    .root > *:not([own-margin]):not(:last-child) {\n      margin-bottom: 24px;\n    }\n    ha-alert[own-margin] {\n      margin-bottom: 4px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form\": HaForm;\n  }\n}\n","import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type {\n  ComboBoxDataProviderCallback,\n  ComboBoxDataProviderParams,\n} from \"@vaadin/combo-box/vaadin-combo-box-light\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport \"./ha-combo-box\";\nimport \"./ha-icon\";\nimport \"./ha-combo-box-item\";\n\ninterface IconItem {\n  icon: string;\n  parts: Set<string>;\n  keywords: string[];\n}\n\ninterface RankedIcon {\n  icon: string;\n  rank: number;\n}\n\nlet ICONS: IconItem[] = [];\nlet ICONS_LOADED = false;\n\nconst loadIcons = async () => {\n  ICONS_LOADED = true;\n\n  const iconList = await import(\"../../build/mdi/iconList.json\");\n  ICONS = iconList.default.map((icon) => ({\n    icon: `mdi:${icon.name}`,\n    parts: new Set(icon.name.split(\"-\")),\n    keywords: icon.keywords,\n  }));\n\n  const customIconLoads: Promise<IconItem[]>[] = [];\n  Object.keys(customIcons).forEach((iconSet) => {\n    customIconLoads.push(loadCustomIconItems(iconSet));\n  });\n  (await Promise.all(customIconLoads)).forEach((customIconItems) => {\n    ICONS.push(...customIconItems);\n  });\n};\n\nconst loadCustomIconItems = async (iconsetPrefix: string) => {\n  try {\n    const getIconList = customIcons[iconsetPrefix].getIconList;\n    if (typeof getIconList !== \"function\") {\n      return [];\n    }\n    const iconList = await getIconList();\n    const customIconItems = iconList.map((icon) => ({\n      icon: `${iconsetPrefix}:${icon.name}`,\n      parts: new Set(icon.name.split(\"-\")),\n      keywords: icon.keywords ?? [],\n    }));\n    return customIconItems;\n  } catch (_err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    return [];\n  }\n};\n\nconst rowRenderer: ComboBoxLitRenderer<IconItem | RankedIcon> = (item) => html`\n  <ha-combo-box-item type=\"button\">\n    <ha-icon .icon=${item.icon} slot=\"start\"></ha-icon>\n    ${item.icon}\n  </ha-combo-box-item>\n`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .dataProvider=${ICONS_LOADED ? this._iconProvider : undefined}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .placeholder=${this.placeholder}\n        .errorMessage=${this.errorMessage}\n        .invalid=${this.invalid}\n        .renderer=${rowRenderer}\n        icon\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        ${this._value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this._value || this.placeholder} slot=\"icon\">\n              </ha-icon>\n            `\n          : html`<slot slot=\"icon\" name=\"fallback\"></slot>`}\n      </ha-combo-box>\n    `;\n  }\n\n  // Filter can take a significant chunk of frame (up to 3-5 ms)\n  private _filterIcons = memoizeOne(\n    (filter: string, iconItems: IconItem[] = ICONS) => {\n      if (!filter) {\n        return iconItems;\n      }\n\n      const filteredItems: RankedIcon[] = [];\n      const addIcon = (icon: string, rank: number) =>\n        filteredItems.push({ icon, rank });\n\n      // Filter and rank such that exact matches rank higher, and prefer icon name matches over keywords\n      for (const item of iconItems) {\n        if (item.parts.has(filter)) {\n          addIcon(item.icon, 1);\n        } else if (item.keywords.includes(filter)) {\n          addIcon(item.icon, 2);\n        } else if (item.icon.includes(filter)) {\n          addIcon(item.icon, 3);\n        } else if (item.keywords.some((word) => word.includes(filter))) {\n          addIcon(item.icon, 4);\n        }\n      }\n\n      // Allow preview for custom icon not in list\n      if (filteredItems.length === 0) {\n        addIcon(filter, 0);\n      }\n\n      return filteredItems.sort((itemA, itemB) => itemA.rank - itemB.rank);\n    }\n  );\n\n  private _iconProvider = (\n    params: ComboBoxDataProviderParams,\n    callback: ComboBoxDataProviderCallback<IconItem | RankedIcon>\n  ) => {\n    const filteredItems = this._filterIcons(params.filter.toLowerCase(), ICONS);\n    const iStart = params.page * params.pageSize;\n    const iEnd = iStart + params.pageSize;\n    callback(filteredItems.slice(iStart, iEnd), filteredItems.length);\n  };\n\n  private async _openedChanged(ev: ValueChangedEvent<boolean>) {\n    const opened = ev.detail.value;\n    if (opened && !ICONS_LOADED) {\n      await loadIcons();\n      this.requestUpdate();\n    }\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static styles = css`\n    *[slot=\"icon\"] {\n      color: var(--primary-text-color);\n      position: relative;\n      bottom: 2px;\n    }\n    *[slot=\"prefix\"] {\n      margin-right: 8px;\n      margin-inline-end: 8px;\n      margin-inline-start: initial;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-expansion-panel\";\nimport \"../../../../components/ha-form/ha-form\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-textfield\";\nimport type { InputText } from \"../../../../data/input_text\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_text-form\")\nclass HaInputTextForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public new = false;\n\n  private _item?: InputText;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _max?: number;\n\n  @state() private _min?: number;\n\n  @state() private _mode?: string;\n\n  @state() private _pattern?: string;\n\n  set item(item: InputText) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max || 100;\n      this._min = item.min || 0;\n      this._mode = item.mode || \"text\";\n      this._pattern = item.pattern;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"text\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          autoValidate\n          required\n          .validationMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .hass=${this.hass}\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <ha-expansion-panel\n          header=${this.hass.localize(\n            \"ui.dialogs.helper_settings.generic.advanced_settings\"\n          )}\n          outlined\n        >\n          <ha-textfield\n            .value=${this._min}\n            .configValue=${\"min\"}\n            type=\"number\"\n            min=\"0\"\n            max=\"255\"\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.min\"\n            )}\n          ></ha-textfield>\n          <ha-textfield\n            .value=${this._max}\n            .configValue=${\"max\"}\n            min=\"0\"\n            max=\"255\"\n            type=\"number\"\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.max\"\n            )}\n          ></ha-textfield>\n          <div class=\"layout horizontal center justified\">\n            ${this.hass.localize(\"ui.dialogs.helper_settings.input_text.mode\")}\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.helper_settings.input_text.text\"\n              )}\n            >\n              <ha-radio\n                name=\"mode\"\n                value=\"text\"\n                .checked=${this._mode === \"text\"}\n                @change=${this._modeChanged}\n              ></ha-radio>\n            </ha-formfield>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.helper_settings.input_text.password\"\n              )}\n            >\n              <ha-radio\n                name=\"mode\"\n                value=\"password\"\n                .checked=${this._mode === \"password\"}\n                @change=${this._modeChanged}\n              ></ha-radio>\n            </ha-formfield>\n          </div>\n          <ha-textfield\n            .value=${this._pattern || \"\"}\n            .configValue=${\"pattern\"}\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.pattern_label\"\n            )}\n            .helper=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.pattern_helper\"\n            )}\n          ></ha-textfield>\n        </ha-expansion-panel>\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: (ev.target as HaRadio).value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-textfield,\n        ha-icon-picker {\n          display: block;\n          margin: 8px 0;\n        }\n        ha-expansion-panel {\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_text-form\": HaInputTextForm;\n  }\n}\n"],"names":["LOAD_ELEMENTS","boolean","constant","float","grid","expandable","e","integer","multi_select","positive_time_period_dict","select","string","optional_actions","getValue","obj","item","name","flatten","HaForm","LitElement","getFormProperties","focus","this","updateComplete","root","renderRoot","querySelector","child","children","tagName","ReactiveElement","willUpdate","changedProps","has","schema","forEach","_LOAD_ELEMENTS$item$t","type","call","render","html","_t","_","error","base","_t2","_computeError","map","_this$hass","getError","warning","getWarning","_t3","_t4","_t5","_computeWarning","_t6","hass","narrow","selector","data","_computeLabel","disabled","required","default","_computeHelper","localizeValue","_generateContext","dynamicElement","fieldElementName","Object","assign","label","helper","localize","computeLabel","computeHelper","context","context_key","data_key","entries","createRenderRoot","addValueChangedListener","element","addEventListener","ev","stopPropagation","target","newValue","detail","value","fireEvent","Array","isArray","_t7","err","_t8","computeError","computeWarning","args","styles","css","_t9","attribute","Boolean","ICONS","ICONS_LOADED","loadIcons","iconList","icon","parts","Set","split","keywords","customIconLoads","keys","customIcons","iconSet","push","loadCustomIconItems","Promise","all","customIconItems","getIconList","iconsetPrefix","_icon$keywords","_err","console","warn","rowRenderer","HaIconPicker","_value","_iconProvider","undefined","placeholder","errorMessage","invalid","_openedChanged","_valueChanged","requestUpdate","_setValue","bubbles","composed","_filterIcons","memoizeOne","filter","iconItems","filteredItems","addIcon","rank","includes","some","word","length","sort","itemA","itemB","params","callback","toLowerCase","iStart","page","pageSize","iEnd","slice","HaInputTextForm","_item","_name","_icon","_max","max","_min","min","_mode","mode","_pattern","pattern","then","_this$shadowRoot","shadowRoot","_modeChanged","nothing","_ev$detail","new","configValue","haStyle"],"mappings":"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"}