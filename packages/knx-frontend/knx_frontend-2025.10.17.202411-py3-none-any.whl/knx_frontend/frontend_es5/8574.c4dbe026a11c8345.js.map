{"version":3,"file":"8574.c4dbe026a11c8345.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/entity/compute_device_name.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/string/get_duplicates.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/entity/context/get_device_context.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/device/ha-device-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/device/ha-devices-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-device.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/util/time-cache-function-promise.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/entity_sources.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/integration.ts","webpack://knx-frontend/./homeassistant-frontend/src/util/brands-url.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport type {\n  EntityRegistryDisplayEntry,\n  EntityRegistryEntry,\n} from \"../../data/entity_registry\";\nimport type { HomeAssistant } from \"../../types\";\nimport { computeStateName } from \"./compute_state_name\";\nimport { getDuplicates } from \"../string/get_duplicates\";\n\nexport const computeDeviceName = (\n  device: DeviceRegistryEntry\n): string | undefined => (device.name_by_user || device.name)?.trim();\n\nexport const computeDeviceNameDisplay = (\n  device: DeviceRegistryEntry,\n  hass: HomeAssistant,\n  entities?: EntityRegistryEntry[] | EntityRegistryDisplayEntry[] | string[]\n) =>\n  computeDeviceName(device) ||\n  (entities && fallbackDeviceName(hass, entities)) ||\n  hass.localize(\"ui.panel.config.devices.unnamed_device\", {\n    type: hass.localize(\n      `ui.panel.config.devices.type.${device.entry_type || \"device\"}`\n    ),\n  });\n\nexport const fallbackDeviceName = (\n  hass: HomeAssistant,\n  entities: EntityRegistryEntry[] | EntityRegistryDisplayEntry[] | string[]\n) => {\n  for (const entity of entities || []) {\n    const entityId = typeof entity === \"string\" ? entity : entity.entity_id;\n    const stateObj = hass.states[entityId];\n    if (stateObj) {\n      return computeStateName(stateObj);\n    }\n  }\n  return undefined;\n};\n\nexport const getDuplicatedDeviceNames = memoizeOne(\n  (devices: HomeAssistant[\"devices\"]): Set<string> => {\n    const names = Object.values(devices)\n      .map((device) => computeDeviceName(device))\n      .filter((name): name is string => name !== undefined);\n\n    return getDuplicates(names);\n  }\n);\n","export function getDuplicates(array: string[]): Set<string> {\n  const duplicates = new Set<string>();\n  const seen = new Set<string>();\n\n  for (const item of array) {\n    if (seen.has(item)) {\n      duplicates.add(item);\n    } else {\n      seen.add(item);\n    }\n  }\n\n  return duplicates;\n}\n","import type { AreaRegistryEntry } from \"../../../data/area_registry\";\nimport type { DeviceRegistryEntry } from \"../../../data/device_registry\";\nimport type { FloorRegistryEntry } from \"../../../data/floor_registry\";\nimport type { HomeAssistant } from \"../../../types\";\n\ninterface DeviceContext {\n  device: DeviceRegistryEntry;\n  area: AreaRegistryEntry | null;\n  floor: FloorRegistryEntry | null;\n}\n\nexport const getDeviceContext = (\n  device: DeviceRegistryEntry,\n  hass: HomeAssistant\n): DeviceContext => {\n  const areaId = device.area_id;\n  const area = areaId ? hass.areas[areaId] : undefined;\n  const floorId = area?.floor_id;\n  const floor = floorId ? hass.floors[floorId] : undefined;\n\n  return {\n    device: device,\n    area: area || null,\n    floor: floor || null,\n  };\n};\n","import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing, type PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeAreaName } from \"../../common/entity/compute_area_name\";\nimport {\n  computeDeviceName,\n  computeDeviceNameDisplay,\n} from \"../../common/entity/compute_device_name\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { getDeviceContext } from \"../../common/entity/context/get_device_context\";\nimport { getConfigEntries, type ConfigEntry } from \"../../data/config_entries\";\nimport {\n  getDeviceEntityDisplayLookup,\n  type DeviceEntityDisplayLookup,\n  type DeviceRegistryEntry,\n} from \"../../data/device_registry\";\nimport { domainToName } from \"../../data/integration\";\nimport type { HomeAssistant } from \"../../types\";\nimport { brandsUrl } from \"../../util/brands-url\";\nimport \"../ha-generic-picker\";\nimport type { HaGenericPicker } from \"../ha-generic-picker\";\nimport type { PickerComboBoxItem } from \"../ha-picker-combo-box\";\n\nexport type HaDevicePickerDeviceFilterFunc = (\n  device: DeviceRegistryEntry\n) => boolean;\n\nexport type HaDevicePickerEntityFilterFunc = (entity: HassEntity) => boolean;\n\ninterface DevicePickerItem extends PickerComboBoxItem {\n  domain?: string;\n  domain_name?: string;\n}\n\n@customElement(\"ha-device-picker\")\nexport class HaDevicePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  // eslint-disable-next-line lit/no-native-attributes\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: String, attribute: \"search-label\" })\n  public searchLabel?: string;\n\n  @property({ attribute: false, type: Array }) public createDomains?: string[];\n\n  /**\n   * Show only devices with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no devices with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only devices with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of devices to be excluded.\n   * @type {Array}\n   * @attr exclude-devices\n   */\n  @property({ type: Array, attribute: \"exclude-devices\" })\n  public excludeDevices?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: HaDevicePickerEntityFilterFunc;\n\n  @property({ attribute: \"hide-clear-icon\", type: Boolean })\n  public hideClearIcon = false;\n\n  @query(\"ha-generic-picker\") private _picker?: HaGenericPicker;\n\n  @state() private _configEntryLookup: Record<string, ConfigEntry> = {};\n\n  protected firstUpdated(_changedProperties: PropertyValues): void {\n    super.firstUpdated(_changedProperties);\n    this._loadConfigEntries();\n  }\n\n  private async _loadConfigEntries() {\n    const configEntries = await getConfigEntries(this.hass);\n    this._configEntryLookup = Object.fromEntries(\n      configEntries.map((entry) => [entry.entry_id, entry])\n    );\n  }\n\n  private _getItems = () =>\n    this._getDevices(\n      this.hass.devices,\n      this.hass.entities,\n      this._configEntryLookup,\n      this.includeDomains,\n      this.excludeDomains,\n      this.includeDeviceClasses,\n      this.deviceFilter,\n      this.entityFilter,\n      this.excludeDevices\n    );\n\n  private _getDevices = memoizeOne(\n    (\n      haDevices: HomeAssistant[\"devices\"],\n      haEntities: HomeAssistant[\"entities\"],\n      configEntryLookup: Record<string, ConfigEntry>,\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      excludeDevices: this[\"excludeDevices\"]\n    ): DevicePickerItem[] => {\n      const devices = Object.values(haDevices);\n      const entities = Object.values(haEntities);\n\n      let deviceEntityLookup: DeviceEntityDisplayLookup = {};\n\n      if (\n        includeDomains ||\n        excludeDomains ||\n        includeDeviceClasses ||\n        entityFilter\n      ) {\n        deviceEntityLookup = getDeviceEntityDisplayLookup(entities);\n      }\n\n      let inputDevices = devices.filter(\n        (device) => device.id === this.value || !device.disabled_by\n      );\n\n      if (includeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (excludeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return true;\n          }\n          return entities.every(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (excludeDevices) {\n        inputDevices = inputDevices.filter(\n          (device) => !excludeDevices!.includes(device.id)\n        );\n      }\n\n      if (includeDeviceClasses) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        });\n      }\n\n      if (entityFilter) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return devEntities.some((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return entityFilter(stateObj);\n          });\n        });\n      }\n\n      if (deviceFilter) {\n        inputDevices = inputDevices.filter(\n          (device) =>\n            // We always want to include the device of the current value\n            device.id === this.value || deviceFilter!(device)\n        );\n      }\n\n      const outputDevices = inputDevices.map<DevicePickerItem>((device) => {\n        const deviceName = computeDeviceNameDisplay(\n          device,\n          this.hass,\n          deviceEntityLookup[device.id]\n        );\n\n        const { area } = getDeviceContext(device, this.hass);\n\n        const areaName = area ? computeAreaName(area) : undefined;\n\n        const configEntry = device.primary_config_entry\n          ? configEntryLookup?.[device.primary_config_entry]\n          : undefined;\n\n        const domain = configEntry?.domain;\n        const domainName = domain\n          ? domainToName(this.hass.localize, domain)\n          : undefined;\n\n        return {\n          id: device.id,\n          label: \"\",\n          primary:\n            deviceName ||\n            this.hass.localize(\"ui.components.device-picker.unnamed_device\"),\n          secondary: areaName,\n          domain: configEntry?.domain,\n          domain_name: domainName,\n          search_labels: [deviceName, areaName, domain, domainName].filter(\n            Boolean\n          ) as string[],\n          sorting_label: deviceName || \"zzz\",\n        };\n      });\n\n      return outputDevices;\n    }\n  );\n\n  private _valueRenderer = memoizeOne(\n    (configEntriesLookup: Record<string, ConfigEntry>) => (value: string) => {\n      const deviceId = value;\n      const device = this.hass.devices[deviceId];\n\n      if (!device) {\n        return html`<span slot=\"headline\">${deviceId}</span>`;\n      }\n\n      const { area } = getDeviceContext(device, this.hass);\n\n      const deviceName = device ? computeDeviceName(device) : undefined;\n      const areaName = area ? computeAreaName(area) : undefined;\n\n      const primary = deviceName;\n      const secondary = areaName;\n\n      const configEntry = device.primary_config_entry\n        ? configEntriesLookup[device.primary_config_entry]\n        : undefined;\n\n      return html`\n        ${configEntry\n          ? html`<img\n              slot=\"start\"\n              alt=\"\"\n              crossorigin=\"anonymous\"\n              referrerpolicy=\"no-referrer\"\n              src=${brandsUrl({\n                domain: configEntry.domain,\n                type: \"icon\",\n                darkOptimized: this.hass.themes?.darkMode,\n              })}\n            />`\n          : nothing}\n        <span slot=\"headline\">${primary}</span>\n        <span slot=\"supporting-text\">${secondary}</span>\n      `;\n    }\n  );\n\n  private _rowRenderer: ComboBoxLitRenderer<DevicePickerItem> = (item) => html`\n    <ha-combo-box-item type=\"button\">\n      ${item.domain\n        ? html`\n            <img\n              slot=\"start\"\n              alt=\"\"\n              crossorigin=\"anonymous\"\n              referrerpolicy=\"no-referrer\"\n              src=${brandsUrl({\n                domain: item.domain,\n                type: \"icon\",\n                darkOptimized: this.hass.themes.darkMode,\n              })}\n            />\n          `\n        : nothing}\n\n      <span slot=\"headline\">${item.primary}</span>\n      ${item.secondary\n        ? html`<span slot=\"supporting-text\">${item.secondary}</span>`\n        : nothing}\n      ${item.domain_name\n        ? html`\n            <div slot=\"trailing-supporting-text\" class=\"domain\">\n              ${item.domain_name}\n            </div>\n          `\n        : nothing}\n    </ha-combo-box-item>\n  `;\n\n  protected render() {\n    const placeholder =\n      this.placeholder ??\n      this.hass.localize(\"ui.components.device-picker.placeholder\");\n    const notFoundLabel = this.hass.localize(\n      \"ui.components.device-picker.no_match\"\n    );\n\n    const valueRenderer = this._valueRenderer(this._configEntryLookup);\n\n    return html`\n      <ha-generic-picker\n        .hass=${this.hass}\n        .autofocus=${this.autofocus}\n        .label=${this.label}\n        .searchLabel=${this.searchLabel}\n        .notFoundLabel=${notFoundLabel}\n        .placeholder=${placeholder}\n        .value=${this.value}\n        .rowRenderer=${this._rowRenderer}\n        .getItems=${this._getItems}\n        .hideClearIcon=${this.hideClearIcon}\n        .valueRenderer=${valueRenderer}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-generic-picker>\n    `;\n  }\n\n  public async open() {\n    await this.updateComplete;\n    await this._picker?.open();\n  }\n\n  private _valueChanged(ev) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n    this.value = value;\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-picker\": HaDevicePicker;\n  }\n}\n","import { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../../types\";\nimport \"./ha-device-picker\";\nimport type {\n  HaDevicePickerDeviceFilterFunc,\n  HaDevicePickerEntityFilterFunc,\n} from \"./ha-device-picker\";\n\n@customElement(\"ha-devices-picker\")\nclass HaDevicesPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property({ attribute: \"picked-device-label\" })\n  public pickedDeviceLabel?: string;\n\n  @property({ attribute: \"pick-device-label\" }) public pickDeviceLabel?: string;\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: HaDevicePickerEntityFilterFunc;\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const currentDevices = this._currentDevices;\n    return html`\n      ${currentDevices.map(\n        (entityId) => html`\n          <div>\n            <ha-device-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .deviceFilter=${this.deviceFilter}\n              .entityFilter=${this.entityFilter}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .value=${entityId}\n              .label=${this.pickedDeviceLabel}\n              .disabled=${this.disabled}\n              @value-changed=${this._deviceChanged}\n            ></ha-device-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-device-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .helper=${this.helper}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityFilter}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .excludeDevices=${currentDevices}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .label=${this.pickDeviceLabel}\n          .disabled=${this.disabled}\n          .required=${this.required && !currentDevices.length}\n          @value-changed=${this._addDevice}\n        ></ha-device-picker>\n      </div>\n    `;\n  }\n\n  private get _currentDevices() {\n    return this.value || [];\n  }\n\n  private async _updateDevices(devices) {\n    fireEvent(this, \"value-changed\", {\n      value: devices,\n    });\n\n    this.value = devices;\n  }\n\n  private _deviceChanged(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === curValue) {\n      return;\n    }\n    if (newValue === undefined) {\n      this._updateDevices(\n        this._currentDevices.filter((dev) => dev !== curValue)\n      );\n    } else {\n      this._updateDevices(\n        this._currentDevices.map((dev) => (dev === curValue ? newValue : dev))\n      );\n    }\n  }\n\n  private async _addDevice(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentDevices = this._currentDevices;\n    if (currentDevices.includes(toAdd)) {\n      return;\n    }\n\n    this._updateDevices([...currentDevices, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-devices-picker\": HaDevicesPicker;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { getDeviceIntegrationLookup } from \"../../data/device_registry\";\nimport type { EntitySources } from \"../../data/entity_sources\";\nimport { fetchEntitySourcesWithCache } from \"../../data/entity_sources\";\nimport type { DeviceSelector } from \"../../data/selector\";\nimport type { ConfigEntry } from \"../../data/config_entries\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport {\n  filterSelectorDevices,\n  filterSelectorEntities,\n} from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../device/ha-device-picker\";\nimport \"../device/ha-devices-picker\";\n\n@customElement(\"ha-selector-device\")\nexport class HaDeviceSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: DeviceSelector;\n\n  @state() private _entitySources?: EntitySources;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  private _deviceIntegrationLookup = memoizeOne(getDeviceIntegrationLookup);\n\n  private _hasIntegration(selector: DeviceSelector) {\n    return (\n      (selector.device?.filter &&\n        ensureArray(selector.device.filter).some(\n          (filter) => filter.integration\n        )) ||\n      (selector.device?.entity &&\n        ensureArray(selector.device.entity).some(\n          (device) => device.integration\n        ))\n    );\n  }\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    if (changedProperties.get(\"selector\") && this.value !== undefined) {\n      if (this.selector.device?.multiple && !Array.isArray(this.value)) {\n        this.value = [this.value];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      } else if (!this.selector.device?.multiple && Array.isArray(this.value)) {\n        this.value = this.value[0];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      }\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"selector\") &&\n      this._hasIntegration(this.selector) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n    if (!this._configEntries && this._hasIntegration(this.selector)) {\n      this._configEntries = [];\n      getConfigEntries(this.hass).then((entries) => {\n        this._configEntries = entries;\n      });\n    }\n  }\n\n  protected render() {\n    if (this._hasIntegration(this.selector) && !this._entitySources) {\n      return nothing;\n    }\n\n    if (!this.selector.device?.multiple) {\n      return html`\n        <ha-device-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          .deviceFilter=${this._filterDevices}\n          .entityFilter=${this.selector.device?.entity\n            ? this._filterEntities\n            : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          allow-custom-entity\n        ></ha-device-picker>\n      `;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-devices-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .deviceFilter=${this._filterDevices}\n        .entityFilter=${this.selector.device?.entity\n          ? this._filterEntities\n          : undefined}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-devices-picker>\n    `;\n  }\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (!this.selector.device?.filter) {\n      return true;\n    }\n    const deviceIntegrations = this._entitySources\n      ? this._deviceIntegrationLookup(\n          this._entitySources,\n          Object.values(this.hass.entities),\n          Object.values(this.hass.devices),\n          this._configEntries\n        )\n      : undefined;\n\n    return ensureArray(this.selector.device.filter).some((filter) =>\n      filterSelectorDevices(filter, device, deviceIntegrations)\n    );\n  };\n\n  private _filterEntities = (entity: HassEntity): boolean =>\n    ensureArray(this.selector.device!.entity).some((filter) =>\n      filterSelectorEntities(filter, entity, this._entitySources)\n    );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-device\": HaDeviceSelector;\n  }\n}\n","import type { HomeAssistant } from \"../../types\";\n\ninterface CacheResult<T> {\n  result: T;\n  cacheKey: any;\n}\n\n/**\n * Caches a result of a promise for X time. Allows optional extra validation\n * check to invalidate the cache.\n * @param cacheKey the key to store the cache\n * @param cacheTime the time to cache the result\n * @param func the function to fetch the data\n * @param generateCacheKey optional function to generate a cache key based on current hass + cached result. Cache is invalid if generates a different cache key.\n * @param hass Home Assistant object\n * @param args extra arguments to pass to the function to fetch the data\n * @returns\n */\nexport const timeCachePromiseFunc = async <T>(\n  cacheKey: string,\n  cacheTime: number,\n  func: (hass: HomeAssistant, ...args: any[]) => Promise<T>,\n  generateCacheKey:\n    | ((hass: HomeAssistant, lastResult: T) => unknown)\n    | undefined,\n  hass: HomeAssistant,\n  ...args: any[]\n): Promise<T> => {\n  const anyHass = hass as any;\n  const lastResult: Promise<CacheResult<T>> | CacheResult<T> | undefined =\n    anyHass[cacheKey];\n\n  const checkCachedResult = (result: CacheResult<T>): T | Promise<T> => {\n    if (\n      !generateCacheKey ||\n      generateCacheKey(hass, result.result) === result.cacheKey\n    ) {\n      return result.result;\n    }\n\n    anyHass[cacheKey] = undefined;\n    return timeCachePromiseFunc(\n      cacheKey,\n      cacheTime,\n      func,\n      generateCacheKey,\n      hass,\n      ...args\n    );\n  };\n\n  // If we have a cached result, return it if it's still valid\n  if (lastResult) {\n    return lastResult instanceof Promise\n      ? lastResult.then(checkCachedResult)\n      : checkCachedResult(lastResult);\n  }\n\n  const resultPromise = func(hass, ...args);\n  anyHass[cacheKey] = resultPromise;\n\n  resultPromise.then(\n    // When successful, set timer to clear cache\n    (result) => {\n      anyHass[cacheKey] = {\n        result,\n        cacheKey: generateCacheKey?.(hass, result),\n      };\n      setTimeout(() => {\n        anyHass[cacheKey] = undefined;\n      }, cacheTime);\n    },\n    // On failure, clear cache right away\n    () => {\n      anyHass[cacheKey] = undefined;\n    }\n  );\n\n  return resultPromise;\n};\n","import { timeCachePromiseFunc } from \"../common/util/time-cache-function-promise\";\nimport type { HomeAssistant } from \"../types\";\n\ninterface EntitySource {\n  domain: string;\n}\n\nexport type EntitySources = Record<string, EntitySource>;\n\nconst fetchEntitySources = (hass: HomeAssistant): Promise<EntitySources> =>\n  hass.callWS({ type: \"entity/source\" });\n\nexport const fetchEntitySourcesWithCache = (\n  hass: HomeAssistant\n): Promise<EntitySources> =>\n  timeCachePromiseFunc(\n    \"_entitySources\",\n    // cache for 30 seconds\n    30000,\n    fetchEntitySources,\n    // We base the cache on number of states. If number of states\n    // changes we force a refresh\n    (hass2) => Object.keys(hass2.states).length,\n    hass\n  );\n","import type { Connection } from \"home-assistant-js-websocket\";\nimport { createCollection } from \"home-assistant-js-websocket\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport type { HomeAssistant } from \"../types\";\nimport { debounce } from \"../common/util/debounce\";\n\nexport const integrationsWithPanel = {\n  bluetooth: \"config/bluetooth\",\n  dhcp: \"config/dhcp\",\n  matter: \"config/matter\",\n  mqtt: \"config/mqtt\",\n  ssdp: \"config/ssdp\",\n  thread: \"config/thread\",\n  zeroconf: \"config/zeroconf\",\n  zha: \"config/zha/dashboard\",\n  zwave_js: \"config/zwave_js/dashboard\",\n};\n\nexport type IntegrationType =\n  | \"device\"\n  | \"helper\"\n  | \"hub\"\n  | \"service\"\n  | \"hardware\"\n  | \"entity\"\n  | \"system\";\n\nexport interface IntegrationManifest {\n  is_built_in: boolean;\n  overwrites_built_in?: boolean;\n  domain: string;\n  name: string;\n  config_flow: boolean;\n  documentation: string;\n  issue_tracker?: string;\n  dependencies?: string[];\n  after_dependencies?: string[];\n  codeowners?: string[];\n  requirements?: string[];\n  ssdp?: { manufacturer?: string; modelName?: string; st?: string }[];\n  zeroconf?: string[];\n  homekit?: { models: string[] };\n  integration_type?: IntegrationType;\n  loggers?: string[];\n  quality_scale?:\n    | \"bronze\"\n    | \"silver\"\n    | \"gold\"\n    | \"platinum\"\n    | \"no_score\"\n    | \"internal\"\n    | \"legacy\"\n    | \"custom\";\n  iot_class:\n    | \"assumed_state\"\n    | \"cloud_polling\"\n    | \"cloud_push\"\n    | \"local_polling\"\n    | \"local_push\";\n  single_config_entry?: boolean;\n  version?: string;\n}\nexport interface IntegrationSetup {\n  domain: string;\n  seconds?: number;\n}\n\nexport interface IntegrationLogInfo {\n  domain: string;\n  level?: number;\n}\n\nexport enum LogSeverity {\n  CRITICAL = 50,\n  ERROR = 40,\n  WARNING = 30,\n  INFO = 20,\n  DEBUG = 10,\n  NOTSET = 0,\n}\n\nexport type IntegrationLogPersistance = \"none\" | \"once\" | \"permanent\";\n\nexport const integrationIssuesUrl = (\n  domain: string,\n  manifest: IntegrationManifest\n) =>\n  manifest.issue_tracker ||\n  `https://github.com/home-assistant/core/issues?q=is%3Aissue+is%3Aopen+label%3A%22integration%3A+${domain}%22`;\n\nexport const domainToName = (\n  localize: LocalizeFunc,\n  domain: string,\n  manifest?: IntegrationManifest\n) => localize(`component.${domain}.title`) || manifest?.name || domain;\n\nexport const fetchIntegrationManifests = (\n  hass: HomeAssistant,\n  integrations?: string[]\n) => {\n  const params: any = {\n    type: \"manifest/list\",\n  };\n  if (integrations) {\n    params.integrations = integrations;\n  }\n  return hass.callWS<IntegrationManifest[]>(params);\n};\n\nexport const fetchIntegrationManifest = (\n  hass: HomeAssistant,\n  integration: string\n) => hass.callWS<IntegrationManifest>({ type: \"manifest/get\", integration });\n\nexport const fetchIntegrationSetups = (hass: HomeAssistant) =>\n  hass.callWS<IntegrationSetup[]>({ type: \"integration/setup_info\" });\n\nexport const fetchIntegrationLogInfo = (conn) =>\n  conn.sendMessagePromise({\n    type: \"logger/log_info\",\n  });\n\nexport const setIntegrationLogLevel = (\n  hass: HomeAssistant,\n  integration: string,\n  level: string,\n  persistence: IntegrationLogPersistance\n) =>\n  hass.callWS({\n    type: \"logger/integration_log_level\",\n    integration,\n    level,\n    persistence,\n  });\n\nconst subscribeLogInfoUpdates = (conn, store) =>\n  conn.subscribeEvents(\n    debounce(\n      () =>\n        fetchIntegrationLogInfo(conn).then((log_infos) =>\n          store.setState(log_infos, true)\n        ),\n      200,\n      true\n    ),\n    \"logging_changed\"\n  );\n\nexport const subscribeLogInfo = (\n  conn: Connection,\n  onChange: (devices: IntegrationLogInfo[]) => void\n) =>\n  createCollection<IntegrationLogInfo[]>(\n    \"_integration_log_info\",\n    fetchIntegrationLogInfo,\n    subscribeLogInfoUpdates,\n    conn,\n    onChange\n  );\n\nexport const waitForIntegrationSetup = (hass: HomeAssistant, domain: string) =>\n  hass.callWS<{ integration_loaded: boolean }>({\n    type: \"integration/wait\",\n    domain,\n  });\n","export interface BrandsOptions {\n  domain: string;\n  type: \"icon\" | \"logo\" | \"icon@2x\" | \"logo@2x\";\n  useFallback?: boolean;\n  darkOptimized?: boolean;\n  brand?: boolean;\n}\n\nexport interface HardwareBrandsOptions {\n  category: string;\n  model?: string;\n  manufacturer: string;\n  darkOptimized?: boolean;\n}\n\nexport const brandsUrl = (options: BrandsOptions): string =>\n  `https://brands.home-assistant.io/${options.brand ? \"brands/\" : \"\"}${\n    options.useFallback ? \"_/\" : \"\"\n  }${options.domain}/${options.darkOptimized ? \"dark_\" : \"\"}${\n    options.type\n  }.png`;\n\nexport const hardwareBrandsUrl = (options: HardwareBrandsOptions): string =>\n  `https://brands.home-assistant.io/hardware/${options.category}/${\n    options.darkOptimized ? \"dark_\" : \"\"\n  }${options.manufacturer}${options.model ? `_${options.model}` : \"\"}.png`;\n\nexport const extractDomainFromBrandUrl = (url: string) => url.split(\"/\")[4];\n\nexport const isBrandUrl = (thumbnail: string | \"\"): boolean =>\n  thumbnail.startsWith(\"https://brands.home-assistant.io/\");\n"],"names":["computeDeviceName","device","_ref","name_by_user","name","trim","computeDeviceNameDisplay","hass","entities","fallbackDeviceName","localize","type","entry_type","entity","entityId","entity_id","stateObj","states","computeStateName","memoizeOne","devices","array","duplicates","Set","seen","item","has","add","getDuplicates","Object","values","map","filter","undefined","getDeviceContext","areaId","area_id","area","areas","floorId","floor_id","floor","floors","HaDevicePicker","LitElement","firstUpdated","_changedProperties","super","this","_loadConfigEntries","configEntries","getConfigEntries","_configEntryLookup","fromEntries","entry","entry_id","render","_this$placeholder","placeholder","notFoundLabel","valueRenderer","_valueRenderer","html","_t","_","autofocus","label","searchLabel","value","_rowRenderer","_getItems","hideClearIcon","_valueChanged","open","_this$_picker","updateComplete","_picker","ev","stopPropagation","detail","fireEvent","args","disabled","required","_getDevices","includeDomains","excludeDomains","includeDeviceClasses","deviceFilter","entityFilter","excludeDevices","haDevices","haEntities","configEntryLookup","deviceEntityLookup","getDeviceEntityDisplayLookup","inputDevices","id","disabled_by","devEntities","length","some","includes","computeDomain","every","attributes","device_class","deviceName","areaName","computeAreaName","configEntry","primary_config_entry","domain","domainName","domainToName","primary","secondary","domain_name","search_labels","Boolean","sorting_label","configEntriesLookup","_this$hass$themes","deviceId","_t2","_t3","_t4","brandsUrl","darkOptimized","themes","darkMode","nothing","_t5","_t6","_t7","_t8","attribute","String","Array","HaDevicesPicker","currentDevices","_currentDevices","pickedDeviceLabel","_deviceChanged","helper","pickDeviceLabel","_addDevice","_updateDevices","event","curValue","currentTarget","newValue","dev","toAdd","styles","css","HaDeviceSelector","_hasIntegration","selector","_selector$device","_selector$device2","ensureArray","integration","willUpdate","changedProperties","_this$selector$device","_this$selector$device2","get","multiple","isArray","updated","_entitySources","fetchEntitySourcesWithCache","then","sources","_configEntries","entries","_this$selector$device3","_this$selector$device5","_this$selector$device4","_filterDevices","_filterEntities","_deviceIntegrationLookup","getDeviceIntegrationLookup","_this$selector$device6","deviceIntegrations","filterSelectorDevices","filterSelectorEntities","timeCachePromiseFunc","cacheKey","cacheTime","func","generateCacheKey","anyHass","lastResult","checkCachedResult","result","Promise","resultPromise","setTimeout","fetchEntitySources","callWS","hass2","keys","manifest","fetchIntegrationManifests","integrations","params","fetchIntegrationManifest","options","brand","useFallback","extractDomainFromBrandUrl","url","split","isBrandUrl","thumbnail","startsWith"],"mappings":"0TAUO,MAAPA,EAAAC,IAAA,IAAAC,EAAA,eAAAA,EAAAD,EAAAE,cAAAF,EAAAG,YAAA,IAAAF,OAAA,EAAAA,EAAAG,MAAA,EAIAC,EAAAA,CAAAL,EAAAM,EAAAC,IAAAR,EAAAC,IAAAO,GAAAC,EAAAF,EAAAC,IAAAD,EAAAG,SAAA,0CAQIC,KAAAJ,EAAAG,SAAA,gCAAAT,EAAAW,YAAA,cAKJH,EAAAA,CAAAF,EAAAC,KAIE,IAAK,MAALK,KAAAL,GAAA,IACE,MAAAM,EAAA,iBAAAD,EAAAA,EAAAA,EAAAE,UACAC,EAAAT,EAAAU,OAAAH,GACA,GAAAE,EACE,OAAAE,EAAAA,EAAAA,GAAAF,EAEJ,CACA,GAGFG,EAAAA,EAAAA,IAAAC,GCzCO,SAAPC,GACE,MAAAC,EAAA,IAAAC,IACAC,EAAA,IAAAD,IAEA,IAAK,MAALE,KAAAJ,EACEG,EAAAE,IAAAD,GACEH,EAAAK,IAAAF,GAEAD,EAAAG,IAAAF,GAIJ,OAAAH,CACF,CDkCIM,CAJAC,OAAAC,OAAAV,GAAAW,KAAA9B,GAAAD,EAAAC,KAAA+B,QAAA5B,QAAA6B,IAAA7B,M,wDEhCG,MAAP8B,EAAAA,CAAAjC,EAAAM,KAIE,MAAA4B,EAAAlC,EAAAmC,QACAC,EAAAF,EAAA5B,EAAA+B,MAAAH,QAAAF,EACAM,EAAAF,aAAA,EAAAA,EAAAG,SAGA,MAAO,CACLvC,OAAAA,EACAoC,KAAAA,GAAA,KACAI,OALFF,EAAAhC,EAAAmC,OAAAH,QAAAN,IAKE,KACD,C,qXCcI,MAAPU,UAAAC,EAAAA,GAoEYC,YAAAA,CAAAC,GACRC,MAAAF,aAAAC,GACAE,KAAAC,oBACF,CAEA,wBAAAA,GACE,MAAAC,QAAAC,EAAAA,EAAAA,IAAA,KAAA5C,MACAyC,KAAAI,mBAAAvB,OAAAwB,YAAAH,EAAAnB,KAAAuB,GAAA,CACgCA,EAAAC,SAAgBD,KAElD,CAwOUE,MAAAA,GAAA,IAAAC,EACR,MAAAC,EAAA,QAAAD,EAAA,KAAAC,mBAAA,IAAAD,EAAAA,EAAA,KAAAlD,KAAAG,SAAA,2CAGAiD,EAAA,KAAApD,KAAAG,SAAA,wCAIAkD,EAAA,KAAAC,eAAA,KAAAT,oBAEA,OAAAU,EAAAA,EAAAA,IAAAC,IAAAA,EAAAC,CAAA;;gBAAA;qBAAA;iBAAA;uBAAA;yBAAA;uBAAA;iBAAA;uBAAA;oBAAA;yBAAA;yBAAA;yBAAA;;;OAEU,KAAAzD,KACK,KAAA0D,UACJ,KAAAC,MACM,KAAAC,YACER,EACFD,EACN,KAAAU,MACM,KAAAC,aACH,KAAAC,UACK,KAAAC,cACAX,EACA,KAAAY,cAIrB,CAEA,UAAAC,GAAA,IAAAC,QACQ1B,KAAN2B,qBACA,QAAAD,EAAA,KAAAE,eAAA,IAAAF,OAAA,EAAAA,EAAAD,OACF,CAEQD,aAAAA,CAAAK,GACNA,EAAAC,kBACA,MAAAV,EAAAS,EAAAE,OAAAX,MACApB,KAAAoB,MAAAA,GACAY,EAAAA,EAAAA,GAAA,sBAAmCZ,SACrC,C,kBA7VK,SAAAa,G,KAI+BhB,WAAA,OAAAiB,UAAA,OAAAC,UAAA,OAAAZ,eAAA,OAAAnB,mBAAA,QAAAkB,UAAA,SAAAc,YAAA,KAAA7E,KAAAa,QAAA,KAAAb,KAAAC,SAAA,KAAA4C,mBAAA,KAAAiC,eAAA,KAAAC,eAAA,KAAAC,qBAAA,KAAAC,aAAA,KAAAC,aAAA,KAAAC,gBAAA,KAAAN,aAAAjE,EAAAA,EAAAA,IAAA,CAAAwE,EAAAC,EAAAC,EAAAR,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,KAqGhC,MAAAtE,EAAAS,OAAAC,OAAA6D,GACAnF,EAAAqB,OAAAC,OAAA8D,GAEA,IAAAE,EAAA,IAEAT,GAAAC,GAAAC,GAAAE,KAMEK,GAAAC,EAAAA,EAAAA,IAAAvF,IAGF,IAAAwF,EAAA5E,EAAAY,QAAA/B,GAAAA,EAAAgG,KAAA,KAAA7B,QAAAnE,EAAAiG,cAIAb,IACEW,EAAAA,EAAAhE,QAAA/B,IACE,MAAAkG,EAAAL,EAAA7F,EAAAgG,IACA,SAAAE,IAAAA,EAAAC,SAGAN,EAAA7F,EAAAgG,IAAAI,MAAAxF,GAAAwE,EAAAiB,UAAAC,EAAAA,EAAAA,GAAA1F,EAAAE,aAAA,KAMJuE,IACEU,EAAAA,EAAAhE,QAAA/B,IACE,MAAAkG,EAAAL,EAAA7F,EAAAgG,IACA,OAAAE,IAAAA,EAAAC,QAGA5F,EAAAgG,OAAA3F,IAAAyE,EAAAgB,UAAAC,EAAAA,EAAAA,GAAA1F,EAAAE,aAAA,KAOJ2E,IACEM,EAAAA,EAAAhE,QAAA/B,IAAAyF,EAAAY,SAAArG,EAAAgG,OAKFV,IACES,EAAAA,EAAAhE,QAAA/B,IACE,MAAAkG,EAAAL,EAAA7F,EAAAgG,IACA,SAAAE,IAAAA,EAAAC,SAGAN,EAAA7F,EAAAgG,IAAAI,MAAAxF,IACE,MAAAG,EAAA,KAAAT,KAAAU,OAAAJ,EAAAE,WACA,QAAAC,IAGAA,EAAAyF,WAAAC,cAAAnB,EAAAe,SAAAtF,EAAAyF,WAAAC,cAAA,GAIA,KAINjB,IACEO,EAAAA,EAAAhE,QAAA/B,IACE,MAAAkG,EAAAL,EAAA7F,EAAAgG,IACA,SAAAE,IAAAA,EAAAC,SAGAD,EAAAE,MAAAxF,IACE,MAAAG,EAAA,KAAAT,KAAAU,OAAAJ,EAAAE,WACA,QAAAC,GAGAyE,EAAAzE,EAAA,GACA,KAINwE,IACEQ,EAAAA,EAAAhE,QAAA/B,GAGIA,EAAAgG,KAAA,KAAA7B,OAAAoB,EAAAvF,MAwCN,OApCA+F,EAAAjE,KAAA9B,IACE,MAAA0G,GAAArG,EAAAA,EAAAA,GAAAL,EAAA,KAAAM,KAAAuF,EAAA7F,EAAAgG,MAMM,KAAN5D,IAAAH,EAAAA,EAAAA,GAAAjC,EAAA,KAAAM,MAEAqG,EAAAvE,GAAAwE,EAAAA,EAAAA,GAAAxE,QAAAJ,EAEA6E,EAAA7G,EAAA8G,qBAAAlB,aAAA,EAAAA,EAAA5F,EAAA8G,2BAAA9E,EAIA+E,EAAAF,aAAA,EAAAA,EAAAE,OACAC,EAAAD,GAAAE,EAAAA,EAAAA,IAAA,KAAA3G,KAAAG,SAAAsG,QAAA/E,EAIA,MAAO,CACLgE,GAAAhG,EAAAgG,GACA/B,MAAA,GACAiD,QAAAR,GAAA,KAAApG,KAAAG,SAAA,8CAGA0G,UAAAR,EACAI,OAAAF,aAAA,EAAAA,EAAAE,OACAK,YAAAJ,EACAK,cAAA,CAAgBX,EAAYC,EAAUI,EAAQC,GAAWjF,OAAAuF,SAGzDC,cAAAb,GAAA,MACD,GAGH,IACF,KAAA9C,gBAAA1C,EAAAA,EAAAA,IAAAsG,GAAArD,IAAA,IAAAsD,EAKE,MAAAC,EAAAvD,EACAnE,EAAA,KAAAM,KAAAa,QAAAuG,GAEA,IAAA1H,EACE,OAAA6D,EAAAA,EAAAA,IAAA8D,IAAAA,EAAA5D,CAAA,qCAAA2D,GAGF,MAAM,KAANtF,IAAAH,EAAAA,EAAAA,GAAAjC,EAAA,KAAAM,MAKA4G,EAHAlH,GAAAD,EAAAA,EAAAA,IAAAC,QAAAgC,EAIAmF,EAHA/E,GAAAwE,EAAAA,EAAAA,GAAAxE,QAAAJ,EAKA6E,EAAA7G,EAAA8G,qBAAAU,EAAAxH,EAAA8G,2BAAA9E,EAIA,OAAA6B,EAAAA,EAAAA,IAAA+D,IAAAA,EAAA7D,CAAA;UAAA;gCAAA;uCAAA;SACE8C,GAAAhD,EAAAA,EAAAA,IAAAgE,IAAAA,EAAA9D,CAAA;;;;;oBAAA;kBAMU+D,EAAAA,EAAAA,IAAA,CACFf,OAAAF,EAAAE,OACArG,KAAA,OACAqH,cAAA,QAAAN,EAAA,KAAAnH,KAAA0H,cAAA,IAAAP,OAAA,EAAAA,EAAAQ,YAEFC,EAAAA,GAEgBhB,EACOC,EAAA,IAEjC,KAAA/C,aAAA5C,IAAAqC,EAAAA,EAAAA,IAAAsE,IAAAA,EAAApE,CAAA;;QAAA;;8BAAA;QAAA;QAAA;;KAKEvC,EAAAuF,QAAAlD,EAAAA,EAAAA,IAAAuE,IAAAA,EAAArE,CAAA;;;;;;oBAAA;;cAOY+D,EAAAA,EAAAA,IAAA,CACFf,OAAAvF,EAAAuF,OACArG,KAAA,OACAqH,cAAA,KAAAzH,KAAA0H,OAAAC,YAGNC,EAAAA,GAGkB1G,EAAA0F,QACtB1F,EAAA2F,WAAAtD,EAAAA,EAAAA,IAAAwE,IAAAA,EAAAtE,CAAA,4CAAAvC,EAAA2F,WAAAe,EAAAA,GAGA1G,EAAA4F,aAAAvD,EAAAA,EAAAA,IAAAyE,IAAAA,EAAAvE,CAAA;;gBAAA;;aAGQvC,EAAA4F,aAEJc,EAAAA,G,8BAhTIK,WAAA,K,uDAGA7H,KAAA4G,W,4DAEA5G,KAAA4G,W,2DAEA5G,KAAA4G,W,0SAUA5G,KAAA8H,OAAcD,UAAA,kB,8DAGdA,WAAA,EAAkB7H,KAAA+H,S,gEAOlB/H,KAAA+H,MAAaF,UAAA,qB,iEAQb7H,KAAA+H,MAAaF,UAAA,qB,iEAQb7H,KAAA+H,MAAaF,UAAA,4B,uEAQb7H,KAAA+H,MAAaF,UAAA,qB,iEAGbA,WAAA,K,+DAGAA,WAAA,K,+DAGAA,UAAA,kBAA8B7H,KAAA4G,W,gfCzF5C,MAAAoB,UAAA/F,EAAAA,GA0CYY,MAAAA,GACR,IAAKR,KAALzC,KACE,OAAA4H,EAAAA,GAGF,MAAAS,EAAA,KAAAC,gBACA,OAAA/E,EAAAA,EAAAA,IAAAC,IAAAA,EAAAC,CAAA;QAAA;;;;kBAAA;oBAAA;0BAAA;0BAAA;4BAAA;4BAAA;4BAAA;kCAAA;mBAAA;sBAAA;sBAAA;2BAAA;;;OACE4E,EAAA7G,KAAAjB,IAAAgD,EAAAA,EAAAA,IAAA8D,IAAAA,EAAA5D,CAAA;;;;0BAAA;sBAAA;8BAAA;8BAAA;gCAAA;gCAAA;sCAAA;uBAAA;uBAAA;0BAAA;+BAAA;;;WAKkBlD,EACJ,KAAAP,KACQ,KAAAiF,aACA,KAAAC,aACE,KAAAJ,eACA,KAAAC,eACM,KAAAC,qBACfzE,EACA,KAAAgI,kBACG,KAAA5D,SACK,KAAA6D,kBAQb,KAAAxI,KACE,KAAAyI,OACM,KAAAxD,aACA,KAAAC,aACE,KAAAJ,eACA,KAAAC,eACAsD,EACM,KAAArD,qBACf,KAAA0D,gBACG,KAAA/D,SACA,KAAAC,WAAAyD,EAAAxC,OACK,KAAA8C,WAIvB,CAEA,mBAAAL,GACE,OAAO7F,KAAPoB,OAAA,EACF,CAEA,oBAAA+E,CAAA/H,IACE4D,EAAAA,EAAAA,GAAA,sBACEZ,MAAAhD,IAGF4B,KAAAoB,MAAAhD,CACF,CAEQ2H,cAAAA,CAAAK,GACNA,EAAAtE,kBACA,MAAAuE,EAAAD,EAAAE,cAAAD,SACAE,EAAAH,EAAArE,OAAAX,MACAmF,IAAAF,SAGApH,IAAAsH,EACEvG,KAAAmG,eAAAnG,KAAA6F,gBAAA7G,QAAAwH,GAAAA,IAAAH,KAIArG,KAAAmG,eAAAnG,KAAA6F,gBAAA9G,KAAAyH,GAAAA,IAAAH,EAAAE,EAAAC,KAIJ,CAEA,gBAAAN,CAAAE,GACEA,EAAAtE,kBACA,MAAA2E,EAAAL,EAAArE,OAAAX,MAEA,GADCgF,EAAAE,cAAAlF,MAAA,IACDqF,EACE,OAEF,MAAAb,EAAA,KAAAC,gBACAD,EAAAtC,SAAAmD,IAIAzG,KAAAmG,eAAA,IAAwBP,EAAgBa,GAC1C,C,kBApIF,SAAAxE,GAAA,KAAAC,UAAA,OAAAC,UAAA,C,EACMwD,EAAAe,QAAAC,EAAAA,EAAAA,IAAA9B,IAAAA,EAAA7D,CAAA;;;;kCACQwE,WAAA,K,uDAEA7H,KAAA+H,S,mHAIA/H,KAAA4G,W,2DAEA5G,KAAA4G,W,2DAOA5G,KAAA+H,MAAaF,UAAA,qB,iEAQb7H,KAAA+H,MAAaF,UAAA,qB,iEAGb7H,KAAA+H,MAAaF,UAAA,4B,uEAGbA,UAAA,yB,oEAGAA,UAAA,uB,kEAEAA,WAAA,K,+DAGAA,WAAA,K,qcC1BP,MAAPoB,UAAAhH,EAAAA,GAqBUiH,eAAAA,CAAAC,GAAA,IAAAC,EAAAC,EACN,eAAAD,EAAAD,EAAA7J,cAAA,IAAA8J,OAAA,EAAAA,EAAA/H,UAAAiI,EAAAA,EAAAA,GAAAH,EAAA7J,OAAA+B,QAAAqE,MAAArE,GAAAA,EAAAkI,gBAAA,QAAAF,EAAAF,EAAA7J,cAAA,IAAA+J,OAAA,EAAAA,EAAAnJ,UAAAoJ,EAAAA,EAAAA,GAAAH,EAAA7J,OAAAY,QAAAwF,MAAApG,GAAAA,EAAAiK,aAUF,CAEUC,UAAAA,CAAAC,GACR,IAAAC,EAAAC,EAAAF,EAAAG,IAAA,kBAAAtI,IAAA,KAAAmC,QACE,QAAAiG,EAAA,KAAAP,SAAA7J,cAAA,IAAAoK,GAAAA,EAAAG,WAAA9B,MAAA+B,QAAA,KAAArG,QACEpB,KAAAoB,MAAA,CAAcpB,KAAAoB,QACdY,EAAAA,EAAAA,GAAA,sBAAmCZ,MAAA,KAAAA,SACrC,QAAAkG,EAAA,KAAAR,SAAA7J,cAAA,IAAAqK,GAAAA,EAAAE,WAAA9B,MAAA+B,QAAA,KAAArG,SACEpB,KAAAoB,MAAApB,KAAAoB,MAAA,IACAY,EAAAA,EAAAA,GAAA,sBAAmCZ,MAAA,KAAAA,SAGzC,CAEUsG,OAAAA,CAAAN,GACRrH,MAAA2H,QAAAN,GACAA,EAAA1I,IAAA,kBAAAmI,gBAAA,KAAAC,YAAA,KAAAa,iBAKEC,EAAAA,EAAAA,GAAA,KAAArK,MAAAsK,MAAAC,IACE9H,KAAA2H,eAAAG,CAAA,KAGC9H,KAAL+H,gBAAA,KAAAlB,gBAAA,KAAAC,YACE9G,KAAA+H,eAAA,IACA5H,EAAAA,EAAAA,IAAA,KAAA5C,MAAAsK,MAAAG,IACEhI,KAAA+H,eAAAC,CAAA,IAGN,CAEUxH,MAAAA,GAAA,IAAAyH,EAAAC,EAKRC,EAJA,OAAInI,KAAJ6G,gBAAA,KAAAC,YAAA,KAAAa,eACExC,EAAAA,GAGF,QAAA8C,EAAA,KAAAnB,SAAA7J,cAAA,IAAAgL,GAAAA,EAAAT,UAkBA1G,EAAAA,EAAAA,IAAA8D,IAAAA,EAAA5D,CAAA;QAAA;;gBAAA;iBAAA;kBAAA;wBAAA;wBAAA;oBAAA;oBAAA;;OACE,KAAAE,OAAAJ,EAAAA,EAAAA,IAAA+D,IAAAA,EAAA7D,CAAA,4BAAAE,OAAA,GAEQ,KAAA3D,KACC,KAAA6D,MACC,KAAA4E,OACM,KAAAoC,eACA,QAAAF,EAAA,KAAApB,SAAA7J,cAAA,IAAAiL,GAAAA,EAAArK,OAAA,KAAAwK,qBAAApJ,EAGJ,KAAAiD,SACA,KAAAC,WA5BZrB,EAAAA,EAAAA,IAAAC,IAAAA,EAAAC,CAAA;;kBAAA;mBAAA;mBAAA;oBAAA;0BAAA;0BAAA;sBAAA;sBAAA;;;SAEU,KAAAzD,KACC,KAAA6D,MACA,KAAAF,MACC,KAAA8E,OACM,KAAAoC,eACA,QAAAD,EAAA,KAAArB,SAAA7J,cAAA,IAAAkL,GAAAA,EAAAtK,OAAA,KAAAwK,qBAAApJ,EAGJ,KAAAiD,SACA,KAAAC,SAoBlB,C,kBAtGK,SAAAF,GAAA,KAAAC,UAAA,OAAAC,UAAA,OAAAmG,0BAAAnK,EAAAA,EAAAA,GAAAoK,EAAAA,IAAA,KAAAH,eAAAnL,IAAA,IAAAuL,EAyGH,WAAAA,EAAA,KAAA1B,SAAA7J,cAAA,IAAAuL,IAAAA,EAAAxJ,OACE,OAAO,EAET,MAAAyJ,EAAA,KAAAd,eAAA,KAAAW,yBAAA,KAAAX,eAAA9I,OAAAC,OAAA,KAAAvB,KAAAC,UAAAqB,OAAAC,OAAA,KAAAvB,KAAAa,SAAA,KAAA2J,qBAAA9I,EASA,OAAAgI,EAAAA,EAAAA,GAAA,KAAAH,SAAA7J,OAAA+B,QAAAqE,MAAArE,IAAA0J,EAAAA,EAAAA,IAAA1J,EAAA/B,EAAAwL,IAAA,EAGF,KAAAJ,gBAAAxK,IAAAoJ,EAAAA,EAAAA,GAAA,KAAAH,SAAA7J,OAAAY,QAAAwF,MAAArE,IAAA2J,EAAAA,EAAAA,IAAA3J,EAAAnB,EAAA,KAAA8J,iB,8BAvHYnC,WAAA,K,uDAEAA,WAAA,K,gXAYA7H,KAAA4G,W,2DAEA5G,KAAA4G,W,6LCvBb,MAAAqE,EAAA,MAAAC,EAAAC,EAAAC,EAAAC,EAAAzL,KAAA0E,KAWC,MAAAgH,EAAA1L,EACA2L,EAAAD,EAAAJ,GAGAM,EAAAC,GACEJ,GAAAA,EAAAzL,EAAA6L,EAAAA,UAAAA,EAAAP,UAOAI,EAAAJ,QAAA5J,EACA2J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzL,KAAA0E,IAJEmH,EAAAA,OAeJ,GAAAF,EACE,OAAAA,aAAAG,QAAAH,EAAArB,KAAAsB,GAAAA,EAAAD,GAKF,MAAAI,EAAAP,EAAAxL,KAAA0E,GAoBA,OAnBAgH,EAAAJ,GAAAS,EAEAA,EAAAzB,MAEEuB,IACEH,EAAAJ,GAAA,CACEO,SACAP,SAAAG,aAAA,EAAAA,EAAAzL,EAAA6L,IAEFG,YAAA,KACEN,EAAAJ,QAAA5J,CAAA,GACF6J,EAAA,IAGF,KACEG,EAAAJ,QAAA5J,CAAA,IAIJqK,CAAA,ECrEFE,EAAAjM,GAAAA,EAAAkM,OAAA,CACgB9L,KAAA,kBAEhBiK,EAAArK,GAAAqL,EAAA,iBAMI,IAAAY,GAIAE,GAAA7K,OAAA8K,KAAAD,EAAAzL,QAAAmF,QAAA7F,E,kHC6DG,MAOP2G,EAAAA,CAAAxG,EAAAsG,EAAA4F,IAAAlM,EAAA,aAAAsG,aAAA4F,aAAA,EAAAA,EAAAxM,OAAA4G,EAMA6F,EAAAA,CAAAtM,EAAAuM,KAIE,MAAAC,EAAA,CACEpM,KAAA,iBAKF,OAHAmM,IACEC,EAAAD,aAAAA,GAEFvM,EAAAkM,OAAAM,EAAA,EAGFC,EAAAA,CAAAzM,EAAA2J,IAAA3J,EAAAkM,OAAA,CAGwC9L,KAAA,eAAsBuJ,e,kHCjGvD,MAAPnC,EAAAkF,GAAA,oCAAAA,EAAAC,MAAA,eAAAD,EAAAE,YAAA,UAAAF,EAAAjG,UAAAiG,EAAAjF,cAAA,aAAAiF,EAAAtM,WAYAyM,EAAAC,GAAAA,EAAAC,MAAA,QAEAC,EAAAC,GAAAA,EAAAC,WAAA,oC"}