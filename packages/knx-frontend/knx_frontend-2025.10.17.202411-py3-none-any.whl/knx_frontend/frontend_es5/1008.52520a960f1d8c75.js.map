{"version":3,"file":"1008.52520a960f1d8c75.js","sources":["webpack://knx-frontend/./node_modules/@lit-labs/virtualizer/src/layouts/shared/SizeCache.ts","webpack://knx-frontend/./node_modules/@lit-labs/virtualizer/src/layouts/flow.ts","webpack://knx-frontend/./node_modules/@lit-labs/virtualizer/src/layouts/shared/BaseLayout.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport interface SizeCacheConfig {\n  roundAverageSize?: boolean;\n}\n\nexport class SizeCache {\n  private _map = new Map<number | string, number>();\n  private _roundAverageSize = false;\n  totalSize = 0;\n\n  constructor(config?: SizeCacheConfig) {\n    if (config?.roundAverageSize === true) {\n      this._roundAverageSize = true;\n    }\n  }\n\n  set(index: number | string, value: number): void {\n    const prev = this._map.get(index) || 0;\n    this._map.set(index, value);\n    this.totalSize += value - prev;\n  }\n\n  get averageSize(): number {\n    if (this._map.size > 0) {\n      const average = this.totalSize / this._map.size;\n      return this._roundAverageSize ? Math.round(average) : average;\n    }\n    return 0;\n  }\n\n  getSize(index: number | string) {\n    return this._map.get(index);\n  }\n\n  clear() {\n    this._map.clear();\n    this.totalSize = 0;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {SizeCache} from './shared/SizeCache.js';\nimport {BaseLayout, dim1} from './shared/BaseLayout.js';\nimport {\n  Positions,\n  Size,\n  Margins,\n  margin,\n  ScrollDirection,\n  offsetAxis,\n  ChildMeasurements,\n  BaseLayoutConfig,\n  LayoutHostSink,\n} from './shared/Layout.js';\n\ntype ItemBounds = {\n  pos: number;\n  size: number;\n};\n\ntype FlowLayoutConstructor = {\n  prototype: FlowLayout;\n  new (hostSink: LayoutHostSink, config?: BaseLayoutConfig): FlowLayout;\n};\n\ntype FlowLayoutSpecifier = BaseLayoutConfig & {\n  type: FlowLayoutConstructor;\n};\n\ntype FlowLayoutSpecifierFactory = (\n  config?: BaseLayoutConfig\n) => FlowLayoutSpecifier;\n\nexport const flow: FlowLayoutSpecifierFactory = (config?: BaseLayoutConfig) =>\n  Object.assign(\n    {\n      type: FlowLayout,\n    },\n    config\n  );\n\nfunction leadingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\n\nfunction trailingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\n\nfunction offset(direction: ScrollDirection): offsetAxis {\n  return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\n\nfunction collapseMargins(a: number, b: number): number {\n  const m = [a, b].sort();\n  return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\n\nclass MetricsCache {\n  private _childSizeCache = new SizeCache();\n  private _marginSizeCache = new SizeCache();\n  private _metricsCache = new Map<number, Size & Margins>();\n\n  update(metrics: {[key: number]: Size & Margins}, direction: ScrollDirection) {\n    const marginsToUpdate = new Set<number>();\n    Object.keys(metrics).forEach((key) => {\n      const k = Number(key);\n      this._metricsCache.set(k, metrics[k]);\n      this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n      marginsToUpdate.add(k);\n      marginsToUpdate.add(k + 1);\n    });\n    for (const k of marginsToUpdate) {\n      const a = this._metricsCache.get(k)?.[leadingMargin(direction)] || 0;\n      const b = this._metricsCache.get(k - 1)?.[trailingMargin(direction)] || 0;\n      this._marginSizeCache.set(k, collapseMargins(a, b));\n    }\n  }\n\n  get averageChildSize(): number {\n    return this._childSizeCache.averageSize;\n  }\n\n  get totalChildSize(): number {\n    return this._childSizeCache.totalSize;\n  }\n\n  get averageMarginSize(): number {\n    return this._marginSizeCache.averageSize;\n  }\n\n  get totalMarginSize(): number {\n    return this._marginSizeCache.totalSize;\n  }\n\n  getLeadingMarginValue(index: number, direction: ScrollDirection) {\n    return this._metricsCache.get(index)?.[leadingMargin(direction)] || 0;\n  }\n\n  getChildSize(index: number) {\n    return this._childSizeCache.getSize(index);\n  }\n\n  getMarginSize(index: number) {\n    return this._marginSizeCache.getSize(index);\n  }\n\n  clear() {\n    this._childSizeCache.clear();\n    this._marginSizeCache.clear();\n    this._metricsCache.clear();\n  }\n}\n\nexport class FlowLayout extends BaseLayout<BaseLayoutConfig> {\n  /**\n   * Initial estimate of item size\n   */\n  _itemSize: Size = {width: 100, height: 100};\n\n  /**\n   * Indices of children mapped to their (position and length) in the scrolling\n   * direction. Used to keep track of children that are in range.\n   */\n  _physicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Used in tandem with _physicalItems to track children in range across\n   * reflows.\n   */\n  _newPhysicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Width and height of children by their index.\n   */\n  _metricsCache = new MetricsCache();\n\n  /**\n   * anchorIdx is the anchor around which we reflow. It is designed to allow\n   * jumping to any point of the scroll size. We choose it once and stick with\n   * it until stable. _first and _last are deduced around it.\n   */\n  _anchorIdx: number | null = null;\n\n  /**\n   * Position in the scrolling direction of the anchor child.\n   */\n  _anchorPos: number | null = null;\n\n  /**\n   * Whether all children in range were in range during the previous reflow.\n   */\n  _stable = true;\n\n  private _measureChildren = true;\n\n  _estimate = true;\n\n  // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n\n  // })\n\n  // constructor(config: Layout1dConfig) {\n  //   super(config);\n  // }\n\n  get measureChildren() {\n    return this._measureChildren;\n  }\n\n  /**\n   * Determine the average size of all children represented in the sizes\n   * argument.\n   */\n  updateItemSizes(sizes: ChildMeasurements) {\n    this._metricsCache.update(sizes as Size & Margins, this.direction);\n    // if (this._nMeasured) {\n    // this._updateItemSize();\n    this._scheduleReflow();\n    // }\n  }\n\n  /**\n   * Set the average item size based on the total length and number of children\n   * in range.\n   */\n  // _updateItemSize() {\n  //   // Keep integer values.\n  //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n  // }\n\n  _getPhysicalItem(idx: number): ItemBounds | undefined {\n    return this._newPhysicalItems.get(idx) ?? this._physicalItems.get(idx);\n  }\n\n  _getSize(idx: number): number | undefined {\n    const item = this._getPhysicalItem(idx);\n    return item && this._metricsCache.getChildSize(idx);\n  }\n\n  _getAverageSize(): number {\n    return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n  }\n\n  _estimatePosition(idx: number): number {\n    const c = this._metricsCache;\n    if (this._first === -1 || this._last === -1) {\n      return (\n        c.averageMarginSize +\n        idx * (c.averageMarginSize + this._getAverageSize())\n      );\n    } else {\n      if (idx < this._first) {\n        const delta = this._first - idx;\n        const refItem = this._getPhysicalItem(this._first);\n        return (\n          refItem!.pos -\n          (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n          (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize)\n        );\n      } else {\n        const delta = idx - this._last;\n        const refItem = this._getPhysicalItem(this._last);\n        return (\n          refItem!.pos +\n          (c.getChildSize(this._last) || c.averageChildSize) +\n          (c.getMarginSize(this._last) || c.averageMarginSize) +\n          delta * (c.averageChildSize + c.averageMarginSize)\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns the position in the scrolling direction of the item at idx.\n   * Estimates it if the item at idx is not in the DOM.\n   */\n  _getPosition(idx: number): number {\n    const item = this._getPhysicalItem(idx);\n    const {averageMarginSize} = this._metricsCache;\n    return idx === 0\n      ? this._metricsCache.getMarginSize(0) ?? averageMarginSize\n      : item\n        ? item.pos\n        : this._estimatePosition(idx);\n  }\n\n  _calculateAnchor(lower: number, upper: number): number {\n    if (lower <= 0) {\n      return 0;\n    }\n    if (upper > this._scrollSize - this._viewDim1) {\n      return this.items.length - 1;\n    }\n    return Math.max(\n      0,\n      Math.min(\n        this.items.length - 1,\n        Math.floor((lower + upper) / 2 / this._delta)\n      )\n    );\n  }\n\n  _getAnchor(lower: number, upper: number): number {\n    if (this._physicalItems.size === 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._first < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._last < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n\n    const firstItem = this._getPhysicalItem(this._first),\n      lastItem = this._getPhysicalItem(this._last),\n      firstMin = firstItem!.pos,\n      lastMin = lastItem!.pos,\n      lastMax = lastMin + this._metricsCache.getChildSize(this._last)!;\n\n    if (lastMax < lower) {\n      // Window is entirely past physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    if (firstMin > upper) {\n      // Window is entirely before physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    // Window contains a physical item\n    // Find one, starting with the one that was previously first visible\n    let candidateIdx = this._firstVisible - 1;\n    let cMax = -Infinity;\n    while (cMax < lower) {\n      const candidate = this._getPhysicalItem(++candidateIdx);\n      cMax = candidate!.pos + this._metricsCache.getChildSize(candidateIdx)!;\n    }\n    return candidateIdx;\n  }\n\n  /**\n   * Updates _first and _last based on items that should be in the current\n   * viewed range.\n   */\n  _getActiveItems() {\n    if (this._viewDim1 === 0 || this.items.length === 0) {\n      this._clearItems();\n    } else {\n      this._getItems();\n    }\n  }\n\n  /**\n   * Sets the range to empty.\n   */\n  _clearItems() {\n    this._first = -1;\n    this._last = -1;\n    this._physicalMin = 0;\n    this._physicalMax = 0;\n    const items = this._newPhysicalItems;\n    this._newPhysicalItems = this._physicalItems;\n    this._newPhysicalItems.clear();\n    this._physicalItems = items;\n    this._stable = true;\n  }\n\n  /*\n   * Updates _first and _last based on items that should be in the given range.\n   */\n  _getItems() {\n    const items = this._newPhysicalItems;\n    this._stable = true;\n    let lower, upper;\n\n    // The anchorIdx is the anchor around which we reflow. It is designed to\n    // allow jumping to any point of the scroll size. We choose it once and\n    // stick with it until stable. first and last are deduced around it.\n\n    // If we have a pinned item, we anchor on it\n    if (this.pin !== null) {\n      const {index} = this.pin;\n      this._anchorIdx = index;\n      this._anchorPos = this._getPosition(index);\n    }\n\n    // Determine the lower and upper bounds of the region to be\n    // rendered, relative to the viewport\n    lower = this._scrollPosition - this._overhang; //leadingOverhang;\n    upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n\n    if (upper < 0 || lower > this._scrollSize) {\n      this._clearItems();\n      return;\n    }\n\n    // If we are scrolling to a specific index or if we are doing another\n    // pass to stabilize a previously started reflow, we will already\n    // have an anchor. If not, establish an anchor now.\n    if (this._anchorIdx === null || this._anchorPos === null) {\n      this._anchorIdx = this._getAnchor(lower, upper);\n      this._anchorPos = this._getPosition(this._anchorIdx);\n    }\n\n    let anchorSize = this._getSize(this._anchorIdx);\n    if (anchorSize === undefined) {\n      this._stable = false;\n      anchorSize = this._getAverageSize();\n    }\n\n    const anchorLeadingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx) ??\n      this._metricsCache.averageMarginSize;\n    const anchorTrailingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx + 1) ??\n      this._metricsCache.averageMarginSize;\n\n    if (this._anchorIdx === 0) {\n      this._anchorPos = anchorLeadingMargin;\n    }\n\n    if (this._anchorIdx === this.items.length - 1) {\n      this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n    }\n\n    // Anchor might be outside bounds, so prefer correcting the error and keep\n    // that anchorIdx.\n    let anchorErr = 0;\n\n    if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n      anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n    }\n\n    if (this._anchorPos - anchorLeadingMargin > upper) {\n      anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n    }\n\n    if (anchorErr) {\n      this._scrollPosition -= anchorErr;\n      lower -= anchorErr;\n      upper -= anchorErr;\n      this._scrollError += anchorErr;\n    }\n\n    items.set(this._anchorIdx, {pos: this._anchorPos, size: anchorSize});\n\n    this._first = this._last = this._anchorIdx;\n    this._physicalMin = this._anchorPos - anchorLeadingMargin;\n    this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n\n    while (this._physicalMin > lower && this._first > 0) {\n      let size = this._getSize(--this._first);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._first);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      this._physicalMin -= size;\n      const pos = this._physicalMin;\n      items.set(this._first, {pos, size});\n      this._physicalMin -= margin;\n      if (this._stable === false && this._estimate === false) {\n        break;\n      }\n    }\n\n    while (this._physicalMax < upper && this._last < this.items.length - 1) {\n      let size = this._getSize(++this._last);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._last);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      const pos = this._physicalMax;\n      items.set(this._last, {pos, size});\n      this._physicalMax += size + margin;\n      if (!this._stable && !this._estimate) {\n        break;\n      }\n    }\n\n    // This handles the cases where we were relying on estimated sizes.\n    const extentErr = this._calculateError();\n    if (extentErr) {\n      this._physicalMin -= extentErr;\n      this._physicalMax -= extentErr;\n      this._anchorPos -= extentErr;\n      this._scrollPosition -= extentErr;\n      items.forEach((item) => (item.pos -= extentErr));\n      this._scrollError += extentErr;\n    }\n\n    if (this._stable) {\n      this._newPhysicalItems = this._physicalItems;\n      this._newPhysicalItems.clear();\n      this._physicalItems = items;\n    }\n  }\n\n  _calculateError(): number {\n    if (this._first === 0) {\n      return this._physicalMin;\n    } else if (this._physicalMin <= 0) {\n      return this._physicalMin - this._first * this._delta;\n    } else if (this._last === this.items.length - 1) {\n      return this._physicalMax - this._scrollSize;\n    } else if (this._physicalMax >= this._scrollSize) {\n      return (\n        this._physicalMax -\n        this._scrollSize +\n        (this.items.length - 1 - this._last) * this._delta\n      );\n    }\n    return 0;\n  }\n\n  override _reflow() {\n    const {_first, _last} = this;\n    super._reflow();\n    if (\n      (this._first === -1 && this._last == -1) ||\n      (this._first === _first && this._last === _last)\n    ) {\n      this._resetReflowState();\n    }\n  }\n\n  _resetReflowState() {\n    this._anchorIdx = null;\n    this._anchorPos = null;\n    this._stable = true;\n  }\n\n  _updateScrollSize() {\n    const {averageMarginSize} = this._metricsCache;\n    this._scrollSize = Math.max(\n      1,\n      this.items.length * (averageMarginSize + this._getAverageSize()) +\n        averageMarginSize\n    );\n  }\n\n  /**\n   * Returns the average size (precise or estimated) of an item in the scrolling direction,\n   * including any surrounding space.\n   */\n  protected get _delta(): number {\n    const {averageMarginSize} = this._metricsCache;\n    return this._getAverageSize() + averageMarginSize;\n  }\n\n  /**\n   * Returns the top and left positioning of the item at idx.\n   */\n  _getItemPosition(idx: number): Positions {\n    return {\n      [this._positionDim]: this._getPosition(idx),\n      [this._secondaryPositionDim]: 0,\n      [offset(this.direction)]: -(\n        this._metricsCache.getLeadingMarginValue(idx, this.direction) ??\n        this._metricsCache.averageMarginSize\n      ),\n    } as Positions;\n  }\n\n  /**\n   * Returns the height and width of the item at idx.\n   */\n  _getItemSize(idx: number): Size {\n    return {\n      [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n      [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n    } as Size;\n  }\n\n  _viewDim2Changed() {\n    this._metricsCache.clear();\n    this._scheduleReflow();\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  Layout,\n  ChildPositions,\n  Positions,\n  ScrollDirection,\n  Size,\n  dimension,\n  position,\n  PinOptions,\n  ScrollToCoordinates,\n  BaseLayoutConfig,\n  StateChangedMessage,\n  LayoutHostSink,\n} from './Layout.js';\n\ntype UpdateVisibleIndicesOptions = {\n  emit?: boolean;\n};\n\nexport function dim1(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'width' : 'height';\n}\n\nexport function dim2(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'height' : 'width';\n}\n\nexport function pos1(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'left' : 'top';\n}\n\nexport function pos2(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'top' : 'left';\n}\n\nexport abstract class BaseLayout<C extends BaseLayoutConfig> implements Layout {\n  /**\n   * The last set viewport scroll position.\n   */\n  private _latestCoords: Positions = {left: 0, top: 0};\n\n  /**\n   * Scrolling direction.\n   */\n  private _direction: ScrollDirection | null = null;\n\n  /**\n   * Dimensions of the viewport.\n   */\n  private _viewportSize: Size = {width: 0, height: 0};\n\n  public totalScrollSize: Size = {width: 0, height: 0};\n\n  public offsetWithinScroller: Positions = {left: 0, top: 0};\n\n  /**\n   * Flag for debouncing asynchronous reflow requests.\n   */\n  private _pendingReflow = false;\n\n  private _pendingLayoutUpdate = false;\n\n  protected _pin: PinOptions | null = null;\n\n  /**\n   * The index of the first item intersecting the viewport.\n   */\n  protected _firstVisible = 0;\n\n  /**\n   * The index of the last item intersecting the viewport.\n   */\n  protected _lastVisible = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the first child.\n   */\n  protected _physicalMin = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the last child.\n   */\n  protected _physicalMax = 0;\n\n  /**\n   * Index of the first child.\n   */\n  protected _first = -1;\n\n  /**\n   * Index of the last child.\n   */\n  protected _last = -1;\n\n  /**\n   * Length in the scrolling direction.\n   */\n  protected _sizeDim: dimension = 'height';\n\n  /**\n   * Length in the non-scrolling direction.\n   */\n  protected _secondarySizeDim: dimension = 'width';\n\n  /**\n   * Position in the scrolling direction.\n   */\n  protected _positionDim: position = 'top';\n\n  /**\n   * Position in the non-scrolling direction.\n   */\n  protected _secondaryPositionDim: position = 'left';\n\n  /**\n   * Current scroll offset in pixels.\n   */\n  protected _scrollPosition = 0;\n\n  /**\n   * Difference between current scroll offset and scroll offset calculated due\n   * to a reflow.\n   */\n  protected _scrollError = 0;\n\n  /**\n   * Total number of items that could possibly be displayed. Used to help\n   * calculate the scroll size.\n   */\n  protected _items: unknown[] = [];\n\n  /**\n   * The total (estimated) length of all items in the scrolling direction.\n   */\n  protected _scrollSize = 1;\n\n  /**\n   * Number of pixels beyond the viewport to still include\n   * in the active range of items.\n   */\n  // TODO (graynorton): Probably want to make this something we calculate based\n  // on viewport size, item size, other factors, possibly still with a dial of some kind\n  protected _overhang = 1000;\n\n  /**\n   * Call this to deliver messages (e.g. stateChanged, unpinned) to host\n   */\n  private _hostSink: LayoutHostSink;\n\n  protected _getDefaultConfig(): C {\n    return {\n      direction: 'vertical',\n    } as C;\n  }\n\n  constructor(hostSink: LayoutHostSink, config?: C) {\n    this._hostSink = hostSink;\n    // Delay setting config so that subclasses do setup work first\n    Promise.resolve().then(\n      () => (this.config = config || this._getDefaultConfig())\n    );\n  }\n\n  set config(config: C) {\n    Object.assign(this, Object.assign({}, this._getDefaultConfig(), config));\n  }\n\n  get config(): C {\n    return {\n      direction: this.direction,\n    } as C;\n  }\n\n  /**\n   * Maximum index of children + 1, to help estimate total height of the scroll\n   * space.\n   */\n  get items(): unknown[] {\n    return this._items;\n  }\n\n  set items(items: unknown[]) {\n    this._setItems(items);\n  }\n\n  protected _setItems(items: unknown[]) {\n    if (items !== this._items) {\n      this._items = items;\n      this._scheduleReflow();\n    }\n  }\n\n  /**\n   * Primary scrolling direction.\n   */\n  get direction(): ScrollDirection {\n    return this._direction!;\n  }\n  set direction(dir) {\n    // Force it to be either horizontal or vertical.\n    dir = dir === 'horizontal' ? dir : 'vertical';\n    if (dir !== this._direction) {\n      this._direction = dir;\n      this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n      this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n      this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n      this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n      this._triggerReflow();\n    }\n  }\n\n  /**\n   * Height and width of the viewport.\n   */\n  get viewportSize(): Size {\n    return this._viewportSize;\n  }\n  set viewportSize(dims) {\n    const {_viewDim1, _viewDim2} = this;\n    Object.assign(this._viewportSize, dims);\n    if (_viewDim2 !== this._viewDim2) {\n      // this._viewDim2Changed();\n      this._scheduleLayoutUpdate();\n    } else if (_viewDim1 !== this._viewDim1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Scroll offset of the viewport.\n   */\n  get viewportScroll(): Positions {\n    return this._latestCoords;\n  }\n  set viewportScroll(coords) {\n    Object.assign(this._latestCoords, coords);\n    const oldPos = this._scrollPosition;\n    this._scrollPosition = this._latestCoords[this._positionDim];\n    const change = Math.abs(oldPos - this._scrollPosition);\n    if (change >= 1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Perform a reflow if one has been scheduled.\n   */\n  reflowIfNeeded(force = false) {\n    if (force || this._pendingReflow) {\n      this._pendingReflow = false;\n      this._reflow();\n    }\n  }\n\n  set pin(options: PinOptions | null) {\n    this._pin = options;\n    this._triggerReflow();\n  }\n\n  get pin() {\n    if (this._pin !== null) {\n      const {index, block} = this._pin;\n      return {\n        index: Math.max(0, Math.min(index, this.items.length - 1)),\n        block,\n      };\n    }\n    return null;\n  }\n\n  _clampScrollPosition(val: number) {\n    return Math.max(\n      -this.offsetWithinScroller[this._positionDim],\n      Math.min(val, this.totalScrollSize[dim1(this.direction)] - this._viewDim1)\n    );\n  }\n\n  unpin() {\n    if (this._pin !== null) {\n      this._sendUnpinnedMessage();\n      this._pin = null;\n    }\n  }\n\n  /**\n   * Get the top and left positioning of the item at idx.\n   */\n  protected abstract _getItemPosition(idx: number): Positions;\n\n  /**\n   * Update _first and _last based on items that should be in the current\n   * range.\n   */\n  protected abstract _getActiveItems(): void;\n\n  protected abstract _getItemSize(_idx: number): Size;\n\n  /**\n   * Calculates (precisely or by estimating, if needed) the total length of all items in\n   * the scrolling direction, including spacing, caching the value in the `_scrollSize` field.\n   *\n   * Should return a minimum value of 1 to ensure at least one item is rendered.\n   * TODO (graynorton): Possibly no longer required, but leaving here until it can be verified.\n   */\n  protected abstract _updateScrollSize(): void;\n\n  protected _updateLayout(): void {\n    // Override\n  }\n\n  // protected _viewDim2Changed(): void {\n  //   this._scheduleLayoutUpdate();\n  // }\n\n  /**\n   * The height or width of the viewport, whichever corresponds to the scrolling direction.\n   */\n  protected get _viewDim1(): number {\n    return this._viewportSize[this._sizeDim];\n  }\n\n  /**\n   * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n   */\n  protected get _viewDim2(): number {\n    return this._viewportSize[this._secondarySizeDim];\n  }\n\n  protected _scheduleReflow() {\n    this._pendingReflow = true;\n  }\n\n  protected _scheduleLayoutUpdate() {\n    this._pendingLayoutUpdate = true;\n    this._scheduleReflow();\n  }\n\n  // For triggering a reflow based on incoming changes to\n  // the layout config.\n  protected _triggerReflow() {\n    this._scheduleLayoutUpdate();\n    // TODO graynorton@: reflowIfNeeded() isn't really supposed\n    // to be called internally. Address in larger cleanup\n    // of virtualizer / layout interaction pattern.\n    // this.reflowIfNeeded(true);\n    Promise.resolve().then(() => this.reflowIfNeeded());\n  }\n\n  protected _reflow() {\n    if (this._pendingLayoutUpdate) {\n      this._updateLayout();\n      this._pendingLayoutUpdate = false;\n    }\n    this._updateScrollSize();\n    this._setPositionFromPin();\n    this._getActiveItems();\n    this._updateVisibleIndices();\n    this._sendStateChangedMessage();\n  }\n\n  /**\n   * If we are supposed to be pinned to a particular\n   * item or set of coordinates, we set `_scrollPosition`\n   * accordingly and adjust `_scrollError` as needed\n   * so that the virtualizer can keep the scroll\n   * position in the DOM in sync\n   */\n  protected _setPositionFromPin() {\n    if (this.pin !== null) {\n      const lastScrollPosition = this._scrollPosition;\n      const {index, block} = this.pin;\n      this._scrollPosition =\n        this._calculateScrollIntoViewPosition({\n          index,\n          block: block || 'start',\n        }) - this.offsetWithinScroller[this._positionDim];\n      this._scrollError = lastScrollPosition - this._scrollPosition;\n    }\n  }\n  /**\n   * Calculate the coordinates to scroll to, given\n   * a request to scroll to the element at a specific\n   * index.\n   *\n   * Supports the same positioning options (`start`,\n   * `center`, `end`, `nearest`) as the standard\n   * `Element.scrollIntoView()` method, but currently\n   * only considers the provided value in the `block`\n   * dimension, since we don't yet have any layouts\n   * that support virtualization in two dimensions.\n   */\n  protected _calculateScrollIntoViewPosition(options: PinOptions) {\n    const {block} = options;\n    const index = Math.min(this.items.length, Math.max(0, options.index));\n    const itemStartPosition = this._getItemPosition(index)[this._positionDim];\n    let scrollPosition = itemStartPosition;\n    if (block !== 'start') {\n      const itemSize = this._getItemSize(index)[this._sizeDim];\n      if (block === 'center') {\n        scrollPosition =\n          itemStartPosition - 0.5 * this._viewDim1 + 0.5 * itemSize;\n      } else {\n        const itemEndPosition = itemStartPosition - this._viewDim1 + itemSize;\n        if (block === 'end') {\n          scrollPosition = itemEndPosition;\n        } else {\n          // block === 'nearest'\n          const currentScrollPosition = this._scrollPosition;\n          scrollPosition =\n            Math.abs(currentScrollPosition - itemStartPosition) <\n            Math.abs(currentScrollPosition - itemEndPosition)\n              ? itemStartPosition\n              : itemEndPosition;\n        }\n      }\n    }\n    scrollPosition += this.offsetWithinScroller[this._positionDim];\n    return this._clampScrollPosition(scrollPosition);\n  }\n\n  public getScrollIntoViewCoordinates(\n    options: PinOptions\n  ): ScrollToCoordinates {\n    return {\n      [this._positionDim as position]:\n        this._calculateScrollIntoViewPosition(options),\n    } as ScrollToOptions;\n  }\n\n  private _sendUnpinnedMessage() {\n    this._hostSink({\n      type: 'unpinned',\n    });\n  }\n\n  private _sendVisibilityChangedMessage() {\n    this._hostSink({\n      type: 'visibilityChanged',\n      firstVisible: this._firstVisible,\n      lastVisible: this._lastVisible,\n    });\n  }\n\n  protected _sendStateChangedMessage() {\n    const childPositions: ChildPositions = new Map();\n    if (this._first !== -1 && this._last !== -1) {\n      for (let idx = this._first; idx <= this._last; idx++) {\n        childPositions.set(idx, this._getItemPosition(idx));\n      }\n    }\n    const message: StateChangedMessage = {\n      type: 'stateChanged',\n      scrollSize: {\n        [this._sizeDim]: this._scrollSize,\n        [this._secondarySizeDim]: null,\n      } as Size,\n      range: {\n        first: this._first,\n        last: this._last,\n        firstVisible: this._firstVisible,\n        lastVisible: this._lastVisible,\n      },\n      childPositions,\n    };\n    if (this._scrollError) {\n      message.scrollError = {\n        [this._positionDim]: this._scrollError,\n        [this._secondaryPositionDim]: 0,\n      } as Positions;\n      this._scrollError = 0;\n    }\n    this._hostSink(message);\n  }\n\n  /**\n   * Number of items to display.\n   */\n  private get _num(): number {\n    if (this._first === -1 || this._last === -1) {\n      return 0;\n    }\n    return this._last - this._first + 1;\n  }\n\n  private _checkThresholds() {\n    if ((this._viewDim1 === 0 && this._num > 0) || this._pin !== null) {\n      this._scheduleReflow();\n    } else {\n      const min = Math.max(0, this._scrollPosition - this._overhang);\n      const max = Math.min(\n        this._scrollSize,\n        this._scrollPosition + this._viewDim1 + this._overhang\n      );\n      if (this._physicalMin > min || this._physicalMax < max) {\n        this._scheduleReflow();\n      } else {\n        this._updateVisibleIndices({emit: true});\n      }\n    }\n  }\n\n  /**\n   * Find the indices of the first and last items to intersect the viewport.\n   * Emit a visibleindiceschange event when either index changes.\n   */\n  protected _updateVisibleIndices(options?: UpdateVisibleIndicesOptions) {\n    if (this._first === -1 || this._last === -1) return;\n\n    let firstVisible = this._first;\n    while (\n      firstVisible < this._last &&\n      Math.round(\n        this._getItemPosition(firstVisible)[this._positionDim] +\n          this._getItemSize(firstVisible)[this._sizeDim]\n      ) <= Math.round(this._scrollPosition)\n    ) {\n      firstVisible++;\n    }\n\n    let lastVisible = this._last;\n    while (\n      lastVisible > this._first &&\n      Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n        Math.round(this._scrollPosition + this._viewDim1)\n    ) {\n      lastVisible--;\n    }\n\n    if (\n      firstVisible !== this._firstVisible ||\n      lastVisible !== this._lastVisible\n    ) {\n      this._firstVisible = firstVisible;\n      this._lastVisible = lastVisible;\n      if (options && options.emit) {\n        this._sendVisibilityChangedMessage();\n      }\n    }\n  }\n}\n"],"names":["SizeCache","set","index","value","prev","this","_map","get","totalSize","averageSize","size","average","_roundAverageSize","Math","round","getSize","clear","constructor","config","Map","roundAverageSize","flow","Object","assign","type","FlowLayout","leadingMargin","direction","trailingMargin","offset","collapseMargins","a","b","m","sort","min","max","MetricsCache","update","metrics","marginsToUpdate","Set","keys","forEach","key","k","Number","_metricsCache","_childSizeCache","dim1","add","_this$_metricsCache$g","_this$_metricsCache$g2","_marginSizeCache","averageChildSize","totalChildSize","averageMarginSize","totalMarginSize","getLeadingMarginValue","_this$_metricsCache$g3","getChildSize","getMarginSize","BaseLayout","measureChildren","_measureChildren","updateItemSizes","sizes","_scheduleReflow","_getPhysicalItem","idx","_this$_newPhysicalIte","_newPhysicalItems","_physicalItems","_getSize","_getAverageSize","_itemSize","_sizeDim","_estimatePosition","c","_first","_last","delta","pos","_getPosition","_this$_metricsCache$g4","item","_calculateAnchor","lower","upper","_scrollSize","_viewDim1","items","length","floor","_delta","_getAnchor","firstItem","lastItem","firstMin","candidateIdx","_firstVisible","cMax","Infinity","_getActiveItems","_clearItems","_getItems","_physicalMin","_physicalMax","_stable","_this$_metricsCache$g5","_this$_metricsCache$g6","pin","_anchorIdx","_anchorPos","_scrollPosition","_overhang","anchorSize","undefined","anchorLeadingMargin","anchorTrailingMargin","anchorErr","_scrollError","margin","_estimate","extentErr","_calculateError","_reflow","super","_resetReflowState","_updateScrollSize","_getItemPosition","_this$_metricsCache$g7","_positionDim","_secondaryPositionDim","_getItemSize","_secondarySizeDim","_viewDim2Changed","width","height","dim2","_getDefaultConfig","_items","_setItems","_direction","dir","_triggerReflow","viewportSize","_viewportSize","dims","_viewDim2","_scheduleLayoutUpdate","_checkThresholds","viewportScroll","_latestCoords","coords","oldPos","abs","reflowIfNeeded","force","_pendingReflow","options","_pin","block","_clampScrollPosition","val","offsetWithinScroller","totalScrollSize","unpin","_sendUnpinnedMessage","_updateLayout","_pendingLayoutUpdate","Promise","resolve","then","_setPositionFromPin","_updateVisibleIndices","_sendStateChangedMessage","lastScrollPosition","_calculateScrollIntoViewPosition","itemStartPosition","scrollPosition","itemSize","itemEndPosition","currentScrollPosition","getScrollIntoViewCoordinates","_hostSink","_sendVisibilityChangedMessage","firstVisible","lastVisible","_lastVisible","childPositions","message","scrollSize","range","first","last","scrollError","_num","emit","hostSink","left","top"],"mappings":"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"}