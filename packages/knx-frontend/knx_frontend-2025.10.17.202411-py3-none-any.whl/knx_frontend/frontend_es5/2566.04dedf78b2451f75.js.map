{"version":3,"file":"2566.04dedf78b2451f75.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-tts-voice.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-tts-voice-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/tts.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { TTSVoiceSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-tts-voice-picker\";\n\n@customElement(\"ha-selector-tts_voice\")\nexport class HaTTSVoiceSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: TTSVoiceSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    language?: string;\n    engineId?: string;\n  };\n\n  protected render() {\n    return html`<ha-tts-voice-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .language=${this.selector.tts_voice?.language || this.context?.language}\n      .engineId=${this.selector.tts_voice?.engineId || this.context?.engineId}\n      .disabled=${this.disabled}\n      .required=${this.required}\n    ></ha-tts-voice-picker>`;\n  }\n\n  static styles = css`\n    ha-tts-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-tts_voice\": HaTTSVoiceSelector;\n  }\n}\n","import type { PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { TTSVoice } from \"../data/tts\";\nimport { listTTSVoices } from \"../data/tts\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nconst NONE = \"__NONE_OPTION__\";\n\n@customElement(\"ha-tts-voice-picker\")\nexport class HaTTSVoicePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public engineId?: string;\n\n  @property() public language?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() _voices?: TTSVoice[] | null;\n\n  @query(\"ha-select\") private _select?: HaSelect;\n\n  protected render() {\n    if (!this._voices) {\n      return nothing;\n    }\n    const value =\n      this.value ?? (this.required ? this._voices[0]?.voice_id : NONE);\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\"ui.components.tts-voice-picker.voice\")}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${!this.required\n          ? html`<ha-list-item .value=${NONE}>\n              ${this.hass!.localize(\"ui.components.tts-voice-picker.none\")}\n            </ha-list-item>`\n          : nothing}\n        ${this._voices.map(\n          (voice) =>\n            html`<ha-list-item .value=${voice.voice_id}>\n              ${voice.name}\n            </ha-list-item>`\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected willUpdate(changedProperties: PropertyValues<this>): void {\n    super.willUpdate(changedProperties);\n    if (!this.hasUpdated) {\n      this._updateVoices();\n    } else if (\n      changedProperties.has(\"language\") ||\n      changedProperties.has(\"engineId\")\n    ) {\n      this._debouncedUpdateVoices();\n    }\n  }\n\n  private _debouncedUpdateVoices = debounce(() => this._updateVoices(), 500);\n\n  private async _updateVoices() {\n    if (!this.engineId || !this.language) {\n      this._voices = undefined;\n      return;\n    }\n    this._voices = (\n      await listTTSVoices(this.hass, this.engineId, this.language)\n    ).voices;\n\n    if (!this.value) {\n      return;\n    }\n\n    if (\n      !this._voices ||\n      !this._voices.find((voice) => voice.voice_id === this.value)\n    ) {\n      this.value = undefined;\n      fireEvent(this, \"value-changed\", { value: this.value });\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues<this>) {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"_voices\") &&\n      this._select?.value !== this.value\n    ) {\n      this._select?.layoutOptions();\n      fireEvent(this, \"value-changed\", { value: this._select?.value });\n    }\n  }\n\n  static styles = css`\n    ha-select {\n      width: 100%;\n    }\n  `;\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === NONE)\n    ) {\n      return;\n    }\n    this.value = target.value === NONE ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tts-voice-picker\": HaTTSVoicePicker;\n  }\n}\n","import type { HomeAssistant } from \"../types\";\n\nexport interface TTSEngine {\n  engine_id: string;\n  supported_languages?: string[];\n  name?: string;\n  deprecated: boolean;\n}\n\nexport interface TTSVoice {\n  voice_id: string;\n  name: string;\n}\n\nexport const convertTextToSpeech = (\n  hass: HomeAssistant,\n  data: {\n    platform: string;\n    message: string;\n    cache?: boolean;\n    language?: string;\n    options?: Record<string, unknown>;\n  }\n) => hass.callApi<{ url: string; path: string }>(\"POST\", \"tts_get_url\", data);\n\nconst TTS_MEDIA_SOURCE_PREFIX = \"media-source://tts/\";\n\nexport const isTTSMediaSource = (mediaContentId: string) =>\n  mediaContentId.startsWith(TTS_MEDIA_SOURCE_PREFIX);\n\nexport const getProviderFromTTSMediaSource = (mediaContentId: string) =>\n  mediaContentId.substring(TTS_MEDIA_SOURCE_PREFIX.length);\n\nexport const listTTSEngines = (\n  hass: HomeAssistant,\n  language?: string,\n  country?: string\n): Promise<{ providers: TTSEngine[] }> =>\n  hass.callWS({\n    type: \"tts/engine/list\",\n    language,\n    country,\n  });\n\nexport const getTTSEngine = (\n  hass: HomeAssistant,\n  engine_id: string\n): Promise<{ provider: TTSEngine }> =>\n  hass.callWS({\n    type: \"tts/engine/get\",\n    engine_id,\n  });\n\nexport const listTTSVoices = (\n  hass: HomeAssistant,\n  engine_id: string,\n  language: string\n): Promise<{ voices: TTSVoice[] | null }> =>\n  hass.callWS({\n    type: \"tts/engine/voices\",\n    engine_id,\n    language,\n  });\n"],"names":["HaTTSVoiceSelector","LitElement","render","_this$selector$tts_vo","_this$context","_this$selector$tts_vo2","_this$context2","html","_t","_","hass","value","label","helper","selector","tts_voice","language","context","engineId","disabled","required","args","styles","css","_t2","attribute","type","Boolean","NONE","HaTTSVoicePicker","_this$value","_this$_voices$","this","_voices","nothing","voice_id","localize","_changed","stopPropagation","map","voice","_t3","name","willUpdate","changedProperties","super","hasUpdated","has","_debouncedUpdateVoices","_updateVoices","listTTSVoices","voices","find","undefined","fireEvent","updated","_this$_select","_this$_select2","_this$_select3","_select","layoutOptions","ev","target","debounce","_t4","reflect","convertTextToSpeech","data","callApi","TTS_MEDIA_SOURCE_PREFIX","isTTSMediaSource","mediaContentId","startsWith","getProviderFromTTSMediaSource","substring","listTTSEngines","country","callWS","getTTSEngine","engine_id"],"mappings":"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"}