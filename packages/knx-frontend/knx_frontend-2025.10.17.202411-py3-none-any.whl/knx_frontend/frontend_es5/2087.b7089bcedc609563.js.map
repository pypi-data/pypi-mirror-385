{"version":3,"file":"2087.b7089bcedc609563.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/entity/valid_entity_id.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-entity-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/auth.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/entity.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/integration.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/helpers/show-dialog-helper-detail.ts"],"sourcesContent":["const validEntityId = /^(\\w+)\\.(\\w+)$/;\n\nexport const isValidEntityId = (entityId: string) =>\n  validEntityId.test(entityId);\n","import { mdiPlus, mdiShape } from \"@mdi/js\";\nimport type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing, type PropertyValues } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { isValidEntityId } from \"../../common/entity/valid_entity_id\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  isHelperDomain,\n  type HelperDomain,\n} from \"../../panels/config/helpers/const\";\nimport { showHelperDetailDialog } from \"../../panels/config/helpers/show-dialog-helper-detail\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box-item\";\nimport \"../ha-generic-picker\";\nimport type { HaGenericPicker } from \"../ha-generic-picker\";\nimport type {\n  PickerComboBoxItem,\n  PickerComboBoxSearchFn,\n} from \"../ha-picker-combo-box\";\nimport type { PickerValueRenderer } from \"../ha-picker-field\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\n\ninterface EntityComboBoxItem extends PickerComboBoxItem {\n  domain_name?: string;\n  stateObj?: HassEntity;\n}\n\nexport type HaEntityPickerEntityFilterFunc = (entity: HassEntity) => boolean;\n\nconst CREATE_ID = \"___create-new-entity___\";\n\n@customElement(\"ha-entity-picker\")\nexport class HaEntityPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  // eslint-disable-next-line lit/no-native-attributes\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property({ type: Boolean, attribute: \"show-entity-id\" })\n  public showEntityId = false;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: String, attribute: \"search-label\" })\n  public searchLabel?: string;\n\n  @property({ attribute: false, type: Array }) public createDomains?: string[];\n\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: false })\n  public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ attribute: \"hide-clear-icon\", type: Boolean })\n  public hideClearIcon = false;\n\n  @query(\"ha-generic-picker\") private _picker?: HaGenericPicker;\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    // Load title translations so it is available when the combo-box opens\n    this.hass.loadBackendTranslation(\"title\");\n  }\n\n  private _valueRenderer: PickerValueRenderer = (value) => {\n    const entityId = value || \"\";\n\n    const stateObj = this.hass.states[entityId];\n\n    if (!stateObj) {\n      return html`\n        <ha-svg-icon\n          slot=\"start\"\n          .path=${mdiShape}\n          style=\"margin: 0 4px\"\n        ></ha-svg-icon>\n        <span slot=\"headline\">${entityId}</span>\n      `;\n    }\n\n    const entityName = this.hass.formatEntityName(stateObj, \"entity\");\n    const deviceName = this.hass.formatEntityName(stateObj, \"device\");\n    const areaName = this.hass.formatEntityName(stateObj, \"area\");\n\n    const isRTL = computeRTL(this.hass);\n\n    const primary = entityName || deviceName || entityId;\n    const secondary = [areaName, entityName ? deviceName : undefined]\n      .filter(Boolean)\n      .join(isRTL ? \" ◂ \" : \" ▸ \");\n\n    return html`\n      <state-badge\n        .hass=${this.hass}\n        .stateObj=${stateObj}\n        slot=\"start\"\n      ></state-badge>\n      <span slot=\"headline\">${primary}</span>\n      <span slot=\"supporting-text\">${secondary}</span>\n    `;\n  };\n\n  private get _showEntityId() {\n    return this.showEntityId || this.hass.userData?.showEntityIdPicker;\n  }\n\n  private _rowRenderer: ComboBoxLitRenderer<EntityComboBoxItem> = (\n    item,\n    { index }\n  ) => {\n    const showEntityId = this._showEntityId;\n\n    return html`\n      <ha-combo-box-item type=\"button\" compact .borderTop=${index !== 0}>\n        ${item.icon_path\n          ? html`\n              <ha-svg-icon\n                slot=\"start\"\n                style=\"margin: 0 4px\"\n                .path=${item.icon_path}\n              ></ha-svg-icon>\n            `\n          : html`\n              <state-badge\n                slot=\"start\"\n                .stateObj=${item.stateObj}\n                .hass=${this.hass}\n              ></state-badge>\n            `}\n        <span slot=\"headline\">${item.primary}</span>\n        ${item.secondary\n          ? html`<span slot=\"supporting-text\">${item.secondary}</span>`\n          : nothing}\n        ${item.stateObj && showEntityId\n          ? html`\n              <span slot=\"supporting-text\" class=\"code\">\n                ${item.stateObj.entity_id}\n              </span>\n            `\n          : nothing}\n        ${item.domain_name && !showEntityId\n          ? html`\n              <div slot=\"trailing-supporting-text\" class=\"domain\">\n                ${item.domain_name}\n              </div>\n            `\n          : nothing}\n      </ha-combo-box-item>\n    `;\n  };\n\n  private _getAdditionalItems = () =>\n    this._getCreateItems(this.hass.localize, this.createDomains);\n\n  private _getCreateItems = memoizeOne(\n    (\n      localize: this[\"hass\"][\"localize\"],\n      createDomains: this[\"createDomains\"]\n    ) => {\n      if (!createDomains?.length) {\n        return [];\n      }\n\n      return createDomains.map((domain) => {\n        const primary = localize(\n          \"ui.components.entity.entity-picker.create_helper\",\n          {\n            domain: isHelperDomain(domain)\n              ? localize(\n                  `ui.panel.config.helpers.types.${domain as HelperDomain}`\n                )\n              : domainToName(localize, domain),\n          }\n        );\n\n        return {\n          id: CREATE_ID + domain,\n          primary: primary,\n          secondary: localize(\"ui.components.entity.entity-picker.new_entity\"),\n          icon_path: mdiPlus,\n        } satisfies EntityComboBoxItem;\n      });\n    }\n  );\n\n  private _getItems = () =>\n    this._getEntities(\n      this.hass,\n      this.includeDomains,\n      this.excludeDomains,\n      this.entityFilter,\n      this.includeDeviceClasses,\n      this.includeUnitOfMeasurement,\n      this.includeEntities,\n      this.excludeEntities\n    );\n\n  private _getEntities = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      includeUnitOfMeasurement: this[\"includeUnitOfMeasurement\"],\n      includeEntities: this[\"includeEntities\"],\n      excludeEntities: this[\"excludeEntities\"]\n    ): EntityComboBoxItem[] => {\n      let items: EntityComboBoxItem[] = [];\n\n      let entityIds = Object.keys(hass.states);\n\n      if (includeEntities) {\n        entityIds = entityIds.filter((entityId) =>\n          includeEntities.includes(entityId)\n        );\n      }\n\n      if (excludeEntities) {\n        entityIds = entityIds.filter(\n          (entityId) => !excludeEntities.includes(entityId)\n        );\n      }\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      const isRTL = computeRTL(this.hass);\n\n      items = entityIds.map<EntityComboBoxItem>((entityId) => {\n        const stateObj = hass!.states[entityId];\n\n        const friendlyName = computeStateName(stateObj); // Keep this for search\n        const entityName = this.hass.formatEntityName(stateObj, \"entity\");\n        const deviceName = this.hass.formatEntityName(stateObj, \"device\");\n        const areaName = this.hass.formatEntityName(stateObj, \"area\");\n\n        const domainName = domainToName(\n          this.hass.localize,\n          computeDomain(entityId)\n        );\n\n        const primary = entityName || deviceName || entityId;\n        const secondary = [areaName, entityName ? deviceName : undefined]\n          .filter(Boolean)\n          .join(isRTL ? \" ◂ \" : \" ▸ \");\n        const a11yLabel = [deviceName, entityName].filter(Boolean).join(\" - \");\n\n        return {\n          id: entityId,\n          primary: primary,\n          secondary: secondary,\n          domain_name: domainName,\n          sorting_label: [deviceName, entityName].filter(Boolean).join(\"_\"),\n          search_labels: [\n            entityName,\n            deviceName,\n            areaName,\n            domainName,\n            friendlyName,\n            entityId,\n          ].filter(Boolean) as string[],\n          a11y_label: a11yLabel,\n          stateObj: stateObj,\n        };\n      });\n\n      if (includeDeviceClasses) {\n        items = items.filter(\n          (item) =>\n            // We always want to include the entity of the current value\n            item.id === this.value ||\n            (item.stateObj?.attributes.device_class &&\n              includeDeviceClasses.includes(\n                item.stateObj.attributes.device_class\n              ))\n        );\n      }\n\n      if (includeUnitOfMeasurement) {\n        items = items.filter(\n          (item) =>\n            // We always want to include the entity of the current value\n            item.id === this.value ||\n            (item.stateObj?.attributes.unit_of_measurement &&\n              includeUnitOfMeasurement.includes(\n                item.stateObj.attributes.unit_of_measurement\n              ))\n        );\n      }\n\n      if (entityFilter) {\n        items = items.filter(\n          (item) =>\n            // We always want to include the entity of the current value\n            item.id === this.value ||\n            (item.stateObj && entityFilter!(item.stateObj))\n        );\n      }\n\n      return items;\n    }\n  );\n\n  protected render() {\n    const placeholder =\n      this.placeholder ??\n      this.hass.localize(\"ui.components.entity.entity-picker.placeholder\");\n    const notFoundLabel = this.hass.localize(\n      \"ui.components.entity.entity-picker.no_match\"\n    );\n\n    return html`\n      <ha-generic-picker\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .autofocus=${this.autofocus}\n        .allowCustomValue=${this.allowCustomEntity}\n        .label=${this.label}\n        .helper=${this.helper}\n        .searchLabel=${this.searchLabel}\n        .notFoundLabel=${notFoundLabel}\n        .placeholder=${placeholder}\n        .value=${this.value}\n        .rowRenderer=${this._rowRenderer}\n        .getItems=${this._getItems}\n        .getAdditionalItems=${this._getAdditionalItems}\n        .hideClearIcon=${this.hideClearIcon}\n        .searchFn=${this._searchFn}\n        .valueRenderer=${this._valueRenderer}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-generic-picker>\n    `;\n  }\n\n  private _searchFn: PickerComboBoxSearchFn<EntityComboBoxItem> = (\n    search,\n    filteredItems\n  ) => {\n    // If there is exact match for entity id, put it first\n    const index = filteredItems.findIndex(\n      (item) => item.stateObj?.entity_id === search\n    );\n    if (index === -1) {\n      return filteredItems;\n    }\n\n    const [exactMatch] = filteredItems.splice(index, 1);\n    filteredItems.unshift(exactMatch);\n    return filteredItems;\n  };\n\n  public async open() {\n    await this.updateComplete;\n    await this._picker?.open();\n  }\n\n  private _valueChanged(ev) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n\n    if (!value) {\n      this._setValue(undefined);\n      return;\n    }\n\n    if (value.startsWith(CREATE_ID)) {\n      const domain = value.substring(CREATE_ID.length);\n\n      showHelperDetailDialog(this, {\n        domain,\n        dialogClosedCallback: (item) => {\n          if (item.entityId) this._setValue(item.entityId);\n        },\n      });\n      return;\n    }\n\n    if (!isValidEntityId(value)) {\n      return;\n    }\n\n    this._setValue(value);\n  }\n\n  private _setValue(value: string | undefined) {\n    this.value = value;\n\n    fireEvent(this, \"value-changed\", { value });\n    fireEvent(this, \"change\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import type { HaFormSchema } from \"../components/ha-form/types\";\nimport type { HomeAssistant } from \"../types\";\nimport type { RefreshTokenType } from \"./refresh_token\";\n\nexport interface AuthUrlSearchParams {\n  client_id?: string;\n  redirect_uri?: string;\n  state?: string;\n}\n\nexport interface AuthProvider {\n  name: string;\n  id: string;\n  type: string;\n  users?: Record<string, string>;\n}\n\nexport interface Credential {\n  type: string;\n}\n\nexport interface SignedPath {\n  path: string;\n}\n\nexport const hassUrl = __HASS_URL__;\n\nexport const autocompleteLoginFields = (schema: HaFormSchema[]) =>\n  schema.map((field) => {\n    if (field.type !== \"string\") return field;\n    switch (field.name) {\n      case \"username\":\n        return { ...field, autocomplete: \"username\", autofocus: true };\n      case \"password\":\n        return { ...field, autocomplete: \"current-password\" };\n      case \"code\":\n        return { ...field, autocomplete: \"one-time-code\", autofocus: true };\n      default:\n        return field;\n    }\n  });\n\nexport const getSignedPath = (\n  hass: HomeAssistant,\n  path: string\n): Promise<SignedPath> => hass.callWS({ type: \"auth/sign_path\", path });\n\nexport const fetchAuthProviders = () =>\n  fetch(\"/auth/providers\", {\n    credentials: \"same-origin\",\n  });\n\nexport const createLoginFlow = (\n  client_id: string | undefined,\n  redirect_uri: string | undefined,\n  handler: (string | null)[]\n) =>\n  fetch(\"/auth/login_flow\", {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: JSON.stringify({\n      client_id,\n      handler,\n      redirect_uri,\n    }),\n  });\n\nexport const submitLoginFlow = (flow_id: string, data: Record<string, any>) =>\n  fetch(`/auth/login_flow/${flow_id}`, {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: JSON.stringify(data),\n  });\n\nexport const deleteLoginFlow = (flow_id) =>\n  fetch(`/auth/login_flow/${flow_id}`, {\n    method: \"DELETE\",\n    credentials: \"same-origin\",\n  });\n\nexport const redirectWithAuthCode = (\n  url: string,\n  authCode: string,\n  oauth2State: string | undefined,\n  storeToken: boolean\n) => {\n  // OAuth 2: 3.1.2 we need to retain query component of a redirect URI\n  if (!url.includes(\"?\")) {\n    url += \"?\";\n  } else if (!url.endsWith(\"&\")) {\n    url += \"&\";\n  }\n\n  url += `code=${encodeURIComponent(authCode)}`;\n\n  if (oauth2State) {\n    url += `&state=${encodeURIComponent(oauth2State)}`;\n  }\n  if (storeToken) {\n    url += `&storeToken=true`;\n  }\n\n  document.location.assign(url);\n};\n\nexport const createAuthForUser = async (\n  hass: HomeAssistant,\n  userId: string,\n  username: string,\n  password: string\n) =>\n  hass.callWS({\n    type: \"config/auth_provider/homeassistant/create\",\n    user_id: userId,\n    username,\n    password,\n  });\n\nexport const changePassword = (\n  hass: HomeAssistant,\n  current_password: string,\n  new_password: string\n) =>\n  hass.callWS({\n    type: \"config/auth_provider/homeassistant/change_password\",\n    current_password,\n    new_password,\n  });\n\nexport const adminChangePassword = (\n  hass: HomeAssistant,\n  userId: string,\n  password: string\n) =>\n  hass.callWS<undefined>({\n    type: \"config/auth_provider/homeassistant/admin_change_password\",\n    user_id: userId,\n    password,\n  });\n\nexport const adminChangeUsername = (\n  hass: HomeAssistant,\n  userId: string,\n  username: string\n) =>\n  hass.callWS<undefined>({\n    type: \"config/auth_provider/homeassistant/admin_change_username\",\n    user_id: userId,\n    username,\n  });\n\nexport const deleteAllRefreshTokens = (\n  hass: HomeAssistant,\n  token_type?: RefreshTokenType,\n  delete_current_token?: boolean\n) =>\n  hass.callWS({\n    type: \"auth/delete_all_refresh_tokens\",\n    token_type,\n    delete_current_token,\n  });\n","import { arrayLiteralIncludes } from \"../common/array/literal-includes\";\n\nexport const UNAVAILABLE = \"unavailable\";\nexport const UNKNOWN = \"unknown\";\nexport const ON = \"on\";\nexport const OFF = \"off\";\n\nexport const UNAVAILABLE_STATES = [UNAVAILABLE, UNKNOWN] as const;\nexport const OFF_STATES = [UNAVAILABLE, UNKNOWN, OFF] as const;\n\nexport const isUnavailableState = arrayLiteralIncludes(UNAVAILABLE_STATES);\nexport const isOffState = arrayLiteralIncludes(OFF_STATES);\n","import type { Connection } from \"home-assistant-js-websocket\";\nimport { createCollection } from \"home-assistant-js-websocket\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport type { HomeAssistant } from \"../types\";\nimport { debounce } from \"../common/util/debounce\";\n\nexport const integrationsWithPanel = {\n  bluetooth: \"config/bluetooth\",\n  dhcp: \"config/dhcp\",\n  matter: \"config/matter\",\n  mqtt: \"config/mqtt\",\n  ssdp: \"config/ssdp\",\n  thread: \"config/thread\",\n  zeroconf: \"config/zeroconf\",\n  zha: \"config/zha/dashboard\",\n  zwave_js: \"config/zwave_js/dashboard\",\n};\n\nexport type IntegrationType =\n  | \"device\"\n  | \"helper\"\n  | \"hub\"\n  | \"service\"\n  | \"hardware\"\n  | \"entity\"\n  | \"system\";\n\nexport interface IntegrationManifest {\n  is_built_in: boolean;\n  overwrites_built_in?: boolean;\n  domain: string;\n  name: string;\n  config_flow: boolean;\n  documentation: string;\n  issue_tracker?: string;\n  dependencies?: string[];\n  after_dependencies?: string[];\n  codeowners?: string[];\n  requirements?: string[];\n  ssdp?: { manufacturer?: string; modelName?: string; st?: string }[];\n  zeroconf?: string[];\n  homekit?: { models: string[] };\n  integration_type?: IntegrationType;\n  loggers?: string[];\n  quality_scale?:\n    | \"bronze\"\n    | \"silver\"\n    | \"gold\"\n    | \"platinum\"\n    | \"no_score\"\n    | \"internal\"\n    | \"legacy\"\n    | \"custom\";\n  iot_class:\n    | \"assumed_state\"\n    | \"cloud_polling\"\n    | \"cloud_push\"\n    | \"local_polling\"\n    | \"local_push\";\n  single_config_entry?: boolean;\n  version?: string;\n}\nexport interface IntegrationSetup {\n  domain: string;\n  seconds?: number;\n}\n\nexport interface IntegrationLogInfo {\n  domain: string;\n  level?: number;\n}\n\nexport enum LogSeverity {\n  CRITICAL = 50,\n  ERROR = 40,\n  WARNING = 30,\n  INFO = 20,\n  DEBUG = 10,\n  NOTSET = 0,\n}\n\nexport type IntegrationLogPersistance = \"none\" | \"once\" | \"permanent\";\n\nexport const integrationIssuesUrl = (\n  domain: string,\n  manifest: IntegrationManifest\n) =>\n  manifest.issue_tracker ||\n  `https://github.com/home-assistant/core/issues?q=is%3Aissue+is%3Aopen+label%3A%22integration%3A+${domain}%22`;\n\nexport const domainToName = (\n  localize: LocalizeFunc,\n  domain: string,\n  manifest?: IntegrationManifest\n) => localize(`component.${domain}.title`) || manifest?.name || domain;\n\nexport const fetchIntegrationManifests = (\n  hass: HomeAssistant,\n  integrations?: string[]\n) => {\n  const params: any = {\n    type: \"manifest/list\",\n  };\n  if (integrations) {\n    params.integrations = integrations;\n  }\n  return hass.callWS<IntegrationManifest[]>(params);\n};\n\nexport const fetchIntegrationManifest = (\n  hass: HomeAssistant,\n  integration: string\n) => hass.callWS<IntegrationManifest>({ type: \"manifest/get\", integration });\n\nexport const fetchIntegrationSetups = (hass: HomeAssistant) =>\n  hass.callWS<IntegrationSetup[]>({ type: \"integration/setup_info\" });\n\nexport const fetchIntegrationLogInfo = (conn) =>\n  conn.sendMessagePromise({\n    type: \"logger/log_info\",\n  });\n\nexport const setIntegrationLogLevel = (\n  hass: HomeAssistant,\n  integration: string,\n  level: string,\n  persistence: IntegrationLogPersistance\n) =>\n  hass.callWS({\n    type: \"logger/integration_log_level\",\n    integration,\n    level,\n    persistence,\n  });\n\nconst subscribeLogInfoUpdates = (conn, store) =>\n  conn.subscribeEvents(\n    debounce(\n      () =>\n        fetchIntegrationLogInfo(conn).then((log_infos) =>\n          store.setState(log_infos, true)\n        ),\n      200,\n      true\n    ),\n    \"logging_changed\"\n  );\n\nexport const subscribeLogInfo = (\n  conn: Connection,\n  onChange: (devices: IntegrationLogInfo[]) => void\n) =>\n  createCollection<IntegrationLogInfo[]>(\n    \"_integration_log_info\",\n    fetchIntegrationLogInfo,\n    subscribeLogInfoUpdates,\n    conn,\n    onChange\n  );\n\nexport const waitForIntegrationSetup = (hass: HomeAssistant, domain: string) =>\n  hass.callWS<{ integration_loaded: boolean }>({\n    type: \"integration/wait\",\n    domain,\n  });\n","import { fireEvent } from \"../../../common/dom/fire_event\";\n\nexport const loadHelperDetailDialog = () => import(\"./dialog-helper-detail\");\n\nexport interface ShowDialogHelperDetailParams {\n  domain?: string;\n  dialogClosedCallback?: (params: {\n    flowFinished: boolean;\n    entryId?: string;\n    entityId?: string;\n  }) => void;\n}\n\nexport const showHelperDetailDialog = (\n  element: HTMLElement,\n  params: ShowDialogHelperDetailParams\n) => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-helper-detail\",\n    dialogImport: loadHelperDetailDialog,\n    dialogParams: params,\n  });\n};\n"],"names":["validEntityId","isValidEntityId","entityId","test","CREATE_ID","HaEntityPicker","LitElement","firstUpdated","changedProperties","super","this","hass","loadBackendTranslation","_showEntityId","_this$hass$userData","showEntityId","userData","showEntityIdPicker","render","_this$placeholder","placeholder","localize","notFoundLabel","html","_t","_","disabled","autofocus","allowCustomEntity","label","helper","searchLabel","value","_rowRenderer","_getItems","_getAdditionalItems","hideClearIcon","_searchFn","_valueRenderer","_valueChanged","open","_this$_picker","updateComplete","_picker","ev","stopPropagation","detail","startsWith","domain","substring","length","showHelperDetailDialog","dialogClosedCallback","item","_setValue","undefined","fireEvent","args","required","stateObj","states","_t2","mdiShape","entityName","formatEntityName","deviceName","areaName","isRTL","computeRTL","primary","secondary","filter","Boolean","join","_t3","index","_t4","icon_path","_t5","_t6","_t7","nothing","_t8","entity_id","domain_name","_t9","_getCreateItems","createDomains","memoizeOne","map","isHelperDomain","domainToName","id","mdiPlus","_getEntities","includeDomains","excludeDomains","entityFilter","includeDeviceClasses","includeUnitOfMeasurement","includeEntities","excludeEntities","items","entityIds","Object","keys","includes","eid","computeDomain","friendlyName","computeStateName","domainName","a11yLabel","sorting_label","search_labels","a11y_label","_item$stateObj","attributes","device_class","_item$stateObj2","unit_of_measurement","search","filteredItems","findIndex","_item$stateObj3","exactMatch","splice","unshift","attribute","type","String","Array","autocompleteLoginFields","schema","field","name","assign","autocomplete","getSignedPath","path","callWS","UNAVAILABLE","UNKNOWN","ON","OFF","UNAVAILABLE_STATES","OFF_STATES","isUnavailableState","arrayLiteralIncludes","manifest","fetchIntegrationManifests","integrations","params","fetchIntegrationManifest","integration","loadHelperDetailDialog","e","element","dialogTag","dialogImport","dialogParams"],"mappings":"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"}