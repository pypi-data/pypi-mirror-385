{"version":3,"file":"3044.ffbed296a4653b87.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-form/ha-form-optional_actions.ts"],"sourcesContent":["import { mdiPlus } from \"@mdi/js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { stopPropagation } from \"../../common/dom/stop_propagation\";\nimport type { LocalizeFunc } from \"../../common/translations/localize\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-button\";\nimport \"../ha-list-item\";\nimport \"../ha-svg-icon\";\nimport \"./ha-form\";\nimport type {\n  HaFormDataContainer,\n  HaFormElement,\n  HaFormOptionalActionsSchema,\n  HaFormSchema,\n} from \"./types\";\n\nconst NO_ACTIONS = [];\n\n@customElement(\"ha-form-optional_actions\")\nexport class HaFormOptionalActions extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public localize?: LocalizeFunc;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public data!: HaFormDataContainer;\n\n  @property({ attribute: false }) public schema!: HaFormOptionalActionsSchema;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public computeLabel?: (\n    schema: HaFormSchema,\n    data?: HaFormDataContainer\n  ) => string;\n\n  @property({ attribute: false }) public computeHelper?: (\n    schema: HaFormSchema\n  ) => string;\n\n  @property({ attribute: false }) public localizeValue?: (\n    key: string\n  ) => string;\n\n  @state() private _displayActions?: string[];\n\n  public async focus() {\n    await this.updateComplete;\n    this.renderRoot.querySelector(\"ha-form\")?.focus();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (changedProps.has(\"data\")) {\n      const displayActions = this._displayActions ?? NO_ACTIONS;\n      const hiddenActions = this._hiddenActions(\n        this.schema.schema,\n        displayActions\n      );\n      this._displayActions = [\n        ...displayActions,\n        ...hiddenActions.filter((name) => name in this.data),\n      ];\n    }\n  }\n\n  private _hiddenActions = memoizeOne(\n    (schema: readonly HaFormSchema[], displayActions: string[]): string[] =>\n      schema\n        .map((item) => item.name)\n        .filter((name) => !displayActions.includes(name))\n  );\n\n  private _displaySchema = memoizeOne(\n    (\n      schema: readonly HaFormSchema[],\n      displayActions: string[]\n    ): HaFormSchema[] =>\n      schema.filter((item) => displayActions.includes(item.name))\n  );\n\n  public render(): TemplateResult {\n    const displayActions = this._displayActions ?? NO_ACTIONS;\n\n    const schema = this._displaySchema(\n      this.schema.schema,\n      this._displayActions ?? []\n    );\n\n    const hiddenActions = this._hiddenActions(\n      this.schema.schema,\n      displayActions\n    );\n\n    const schemaMap = new Map<string, HaFormSchema>(\n      this.computeLabel\n        ? this.schema.schema.map((item) => [item.name, item])\n        : []\n    );\n\n    return html`\n      ${schema.length > 0\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this.data}\n              .schema=${schema}\n              .disabled=${this.disabled}\n              .computeLabel=${this.computeLabel}\n              .computeHelper=${this.computeHelper}\n              .localizeValue=${this.localizeValue}\n            ></ha-form>\n          `\n        : nothing}\n      ${hiddenActions.length > 0\n        ? html`\n            <ha-button-menu\n              @action=${this._handleAddAction}\n              fixed\n              @closed=${stopPropagation}\n            >\n              <ha-button slot=\"trigger\" appearance=\"filled\" size=\"small\">\n                <ha-svg-icon .path=${mdiPlus} slot=\"start\"></ha-svg-icon>\n                ${this.localize?.(\"ui.components.form-optional-actions.add\") ||\n                \"Add interaction\"}\n              </ha-button>\n              ${hiddenActions.map((action) => {\n                const actionSchema = schemaMap.get(action);\n                return html`\n                  <ha-list-item>\n                    ${this.computeLabel && actionSchema\n                      ? this.computeLabel(actionSchema)\n                      : action}\n                  </ha-list-item>\n                `;\n              })}\n            </ha-button-menu>\n          `\n        : nothing}\n    `;\n  }\n\n  private _handleAddAction(ev: CustomEvent) {\n    const hiddenActions = this._hiddenActions(\n      this.schema.schema,\n      this._displayActions ?? NO_ACTIONS\n    );\n    const index = ev.detail.index;\n    const action = hiddenActions[index];\n    this._displayActions = [...(this._displayActions ?? []), action];\n  }\n\n  static styles = css`\n    :host {\n      display: flex !important;\n      flex-direction: column;\n      gap: 24px;\n    }\n    :host ha-form {\n      display: block;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form-optional_actions\": HaFormOptionalActions;\n  }\n}\n"],"names":["NO_ACTIONS","HaFormOptionalActions","LitElement","focus","_this$renderRoot$quer","this","updateComplete","renderRoot","querySelector","updated","changedProps","super","has","_this$_displayActions","displayActions","_displayActions","hiddenActions","_hiddenActions","schema","filter","name","data","render","_this$_displayActions2","_this$_displayActions3","_this$localize","_displaySchema","schemaMap","Map","computeLabel","map","item","html","_t","_","length","_t2","hass","disabled","computeHelper","localizeValue","nothing","_t3","_handleAddAction","stopPropagation","mdiPlus","localize","call","action","actionSchema","get","_t4","ev","_this$_displayActions4","_this$_displayActions5","detail","index","args","memoizeOne","includes","styles","css","_t5","attribute","type","Boolean"],"mappings":"qeAmBAA,EAAA,GAGO,MAAPC,UAAAC,EAAAA,GA0BE,WAAAC,GAAA,IAAAC,QACQC,KAANC,eACA,QAAAF,EAAAC,KAAAE,WAAAC,cAAA,sBAAAJ,GAAAA,EAAAD,OACF,CAEUM,OAAAA,CAAAC,GAER,GADAC,MAAAF,QAAAC,GACAA,EAAAE,IAAA,aAAAC,EACE,MAAAC,EAAA,QAAAD,EAAA,KAAAE,uBAAA,IAAAF,EAAAA,EAAAb,EACAgB,EAAA,KAAAC,eAAA,KAAAC,OAAAA,OAAAJ,GAIAT,KAAAU,gBAAA,IACKD,KACAE,EAAAG,QAAAC,GAAAA,KAAA,KAAAC,OAEP,CACF,CAiBOC,MAAAA,GAAA,IAAAC,EAAAC,EAAAC,EACL,MAAAX,EAAA,QAAAS,EAAA,KAAAR,uBAAA,IAAAQ,EAAAA,EAAAvB,EAEAkB,EAAA,KAAAQ,eAAA,KAAAR,OAAAA,OAAA,QAAAM,EAAA,KAAAT,uBAAA,IAAAS,EAAAA,EAAA,IAKAR,EAAA,KAAAC,eAAA,KAAAC,OAAAA,OAAAJ,GAKAa,EAAA,IAAAC,IAAA,KAAAC,aAAA,KAAAX,OAAAA,OAAAY,KAAAC,GAAA,CAEwCA,EAAAX,KAAWW,KAAK,IAIxD,OAAAC,EAAAA,EAAAA,IAAAC,IAAAA,EAAAC,CAAA;QAAA;QAAA;OACEhB,EAAAiB,OAAA,GAAAH,EAAAA,EAAAA,IAAAI,IAAAA,EAAAF,CAAA;;sBAAA;sBAAA;wBAAA;0BAAA;8BAAA;+BAAA;+BAAA;;aAGc,KAAAG,KACA,KAAAhB,KACEH,EACE,KAAAoB,SACI,KAAAT,aACC,KAAAU,cACA,KAAAC,eAEnBC,EAAAA,GAEJzB,EAAAmB,OAAA,GAAAH,EAAAA,EAAAA,IAAAU,IAAAA,EAAAR,CAAA;;wBAAA;;wBAAA;;;qCAAA;kBAAA;;gBAAA;;aAGgB,KAAAS,iBAEAC,EAAAA,EAGaC,GACnB,QAAApB,EAAA,KAAAqB,gBAAA,IAAArB,OAAA,EAAAA,EAAAsB,KAAA,oEAGF/B,EAAAc,KAAAkB,IACE,MAAAC,EAAAtB,EAAAuB,IAAAF,GACA,OAAAhB,EAAAA,EAAAA,IAAAmB,IAAAA,EAAAjB,CAAA;;sBAAA;;mBAEI,KAAAL,cAAAoB,EAAA,KAAApB,aAAAoB,GAAAD,EAAA,KAOVP,EAAAA,GAGR,CAEQE,gBAAAA,CAAAS,GAAA,IAAAC,EAAAC,EACN,MAKAN,EALA,KAAA/B,eAAA,KAAAC,OAAAA,OAAA,QAAAmC,EAAA,KAAAtC,uBAAA,IAAAsC,EAAAA,EAAArD,GAIAoD,EAAAG,OAAAC,OAEAnD,KAAAU,gBAAA,IAA4B,QAA5B,EAA4BV,KAAAU,uBAAA,IAAAuC,EAAAA,EAAA,GAA6BN,EAC3D,C,kBAlIK,SAAAS,GAAA,KAAAnB,UAAA,OAAArB,gBAAAyC,EAAAA,EAAAA,IAAA,CAAAxC,EAAAJ,IAAAI,EAAAY,KAAAC,GAAAA,EAAAX,OAAAD,QAAAC,IAAAN,EAAA6C,SAAAvC,OAAA,KAAAM,gBAAAgC,EAAAA,EAAAA,IAAA,CAAAxC,EAAAJ,IAAAI,EAAAC,QAAAY,GAAAjB,EAAA6C,SAAA5B,EAAAX,S,EAAMnB,EAAA2D,QAAAC,EAAAA,EAAAA,IAAAC,IAAAA,EAAA5B,CAAA;;;;;;;;;kCACC6B,WAAA,K,2DAEAA,WAAA,K,uDAEAA,WAAA,K,uDAEAA,WAAA,K,yDAEAC,KAAAC,W,2DAEAF,WAAA,K,+DAKAA,WAAA,K,gEAIAA,WAAA,K"}