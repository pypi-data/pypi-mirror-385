{"version":3,"file":"1285.8a30c8569e19dff1.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/format_date.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/format_date_time.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/format_time.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/resolve-time-zone.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/use_am_pm.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/cloud/dialog-cloud-already-connected/dialog-cloud-already-connected.ts","webpack://knx-frontend/./homeassistant-frontend/src/util/url.ts"],"sourcesContent":["import type { HassConfig } from \"home-assistant-js-websocket\";\nimport memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { DateFormat } from \"../../data/translation\";\nimport { resolveTimeZone } from \"./resolve-time-zone\";\n\n// Tuesday, August 10\nexport const formatDateWeekdayDay = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateWeekdayDayMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateWeekdayDayMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"long\",\n      month: \"long\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// August 10, 2021\nexport const formatDate = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Aug 10, 2021\nexport const formatDateShort = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateShortMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateShortMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 10/08/2021\nexport const formatDateNumeric = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => {\n  const formatter = formatDateNumericMem(locale, config.time_zone);\n\n  if (\n    locale.date_format === DateFormat.language ||\n    locale.date_format === DateFormat.system\n  ) {\n    return formatter.format(dateObj);\n  }\n\n  const parts = formatter.formatToParts(dateObj);\n\n  const literal = parts.find((value) => value.type === \"literal\")?.value;\n  const day = parts.find((value) => value.type === \"day\")?.value;\n  const month = parts.find((value) => value.type === \"month\")?.value;\n  const year = parts.find((value) => value.type === \"year\")?.value;\n\n  const lastPart = parts[parts.length - 1];\n  let lastLiteral = lastPart?.type === \"literal\" ? lastPart?.value : \"\";\n\n  if (locale.language === \"bg\" && locale.date_format === DateFormat.YMD) {\n    lastLiteral = \"\";\n  }\n\n  const formats = {\n    [DateFormat.DMY]: `${day}${literal}${month}${literal}${year}${lastLiteral}`,\n    [DateFormat.MDY]: `${month}${literal}${day}${literal}${year}${lastLiteral}`,\n    [DateFormat.YMD]: `${year}${literal}${month}${literal}${day}${lastLiteral}`,\n  };\n\n  return formats[locale.date_format];\n};\n\nconst formatDateNumericMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) => {\n    const localeString =\n      locale.date_format === DateFormat.system ? undefined : locale.language;\n\n    if (\n      locale.date_format === DateFormat.language ||\n      locale.date_format === DateFormat.system\n    ) {\n      return new Intl.DateTimeFormat(localeString, {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n      });\n    }\n\n    return new Intl.DateTimeFormat(localeString, {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    });\n  }\n);\n\n// Aug 10\nexport const formatDateVeryShort = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateVeryShortMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateVeryShortMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      day: \"numeric\",\n      month: \"short\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// August 2021\nexport const formatDateMonthYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateMonthYearMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateMonthYearMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      month: \"long\",\n      year: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// August\nexport const formatDateMonth = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateMonthMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateMonthMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      month: \"long\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 2021\nexport const formatDateYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateYearMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateYearMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Monday\nexport const formatDateWeekday = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateWeekdayMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateWeekdayMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"long\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Mon\nexport const formatDateWeekdayShort = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateWeekdayShortMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateWeekdayShortMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"short\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n","import type { HassConfig } from \"home-assistant-js-websocket\";\nimport memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { formatDateNumeric } from \"./format_date\";\nimport { formatTime } from \"./format_time\";\nimport { resolveTimeZone } from \"./resolve-time-zone\";\nimport { useAmPm } from \"./use_am_pm\";\n\n// August 9, 2021, 8:23 AM\nexport const formatDateTime = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateTimeMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateTimeMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\nexport const formatDateTimeWithBrowserDefaults = (dateObj: Date) =>\n  formatDateTimeWithBrowserDefaultsMem().format(dateObj);\n\nconst formatDateTimeWithBrowserDefaultsMem = memoizeOne(\n  () =>\n    new Intl.DateTimeFormat(undefined, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    })\n);\n\n// Aug 9, 2021, 8:23 AM\nexport const formatShortDateTimeWithYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatShortDateTimeWithYearMem(locale, config.time_zone).format(dateObj);\n\nconst formatShortDateTimeWithYearMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Aug 9, 8:23 AM\nexport const formatShortDateTime = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatShortDateTimeMem(locale, config.time_zone).format(dateObj);\n\nconst formatShortDateTimeMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      month: \"short\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\nexport const formatShortDateTimeWithConditionalYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => {\n  const now = new Date();\n  if (now.getFullYear() === dateObj.getFullYear()) {\n    return formatShortDateTime(dateObj, locale, config);\n  }\n  return formatShortDateTimeWithYear(dateObj, locale, config);\n};\n\n// August 9, 2021, 8:23:15 AM\nexport const formatDateTimeWithSeconds = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateTimeWithSecondsMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateTimeWithSecondsMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 9/8/2021, 8:23 AM\nexport const formatDateTimeNumeric = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) =>\n  `${formatDateNumeric(dateObj, locale, config)}, ${formatTime(\n    dateObj,\n    locale,\n    config\n  )}`;\n","import type { HassConfig } from \"home-assistant-js-websocket\";\nimport memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { resolveTimeZone } from \"./resolve-time-zone\";\nimport { useAmPm } from \"./use_am_pm\";\n\n// 9:15 PM || 21:15\nexport const formatTime = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTimeMem(locale, config.time_zone).format(dateObj);\n\nconst formatTimeMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 9:15:24 PM || 21:15:24\nexport const formatTimeWithSeconds = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTimeWithSecondsMem(locale, config.time_zone).format(dateObj);\n\nconst formatTimeWithSecondsMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Tuesday 7:00 PM || Tuesday 19:00\nexport const formatTimeWeekday = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTimeWeekdayMem(locale, config.time_zone).format(dateObj);\n\nconst formatTimeWeekdayMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"long\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 21:15\nexport const formatTime24h = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTime24hMem(locale, config.time_zone).format(dateObj);\n\nconst formatTime24hMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    // en-GB to fix Chrome 24:59 to 0:59 https://stackoverflow.com/a/60898146\n    new Intl.DateTimeFormat(\"en-GB\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: false,\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n","import { TimeZone } from \"../../data/translation\";\n\nconst RESOLVED_TIME_ZONE = Intl.DateTimeFormat?.().resolvedOptions?.().timeZone;\n\n// Browser time zone can be determined from Intl, with fallback to UTC for polyfill or no support.\nexport const LOCAL_TIME_ZONE = RESOLVED_TIME_ZONE ?? \"UTC\";\n\n// Pick time zone based on user profile option.  Core zone is used when local cannot be determined.\nexport const resolveTimeZone = (option: TimeZone, serverTimeZone: string) =>\n  option === TimeZone.local && RESOLVED_TIME_ZONE\n    ? LOCAL_TIME_ZONE\n    : serverTimeZone;\n","import memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { TimeFormat } from \"../../data/translation\";\n\nexport const useAmPm = memoizeOne((locale: FrontendLocaleData): boolean => {\n  if (\n    locale.time_format === TimeFormat.language ||\n    locale.time_format === TimeFormat.system\n  ) {\n    const testLanguage =\n      locale.time_format === TimeFormat.language ? locale.language : undefined;\n    const test = new Date(\"January 1, 2023 22:00:00\").toLocaleString(\n      testLanguage\n    );\n    return test.includes(\"10\");\n  }\n\n  return locale.time_format === TimeFormat.am_pm;\n});\n","import { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { formatDateTime } from \"../../../../common/datetime/format_date_time\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-button\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-icon-button\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { obfuscateUrl } from \"../../../../util/url\";\nimport type { CloudAlreadyConnectedParams as CloudAlreadyConnectedDialogParams } from \"./show-dialog-cloud-already-connected\";\n\n@customElement(\"dialog-cloud-already-connected\")\nclass DialogCloudAlreadyConnected extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _params?: CloudAlreadyConnectedDialogParams;\n\n  @state() private _obfuscateIp = true;\n\n  public showDialog(params: CloudAlreadyConnectedDialogParams) {\n    this._params = params;\n  }\n\n  public closeDialog() {\n    this._params?.closeDialog?.();\n    this._params = undefined;\n    this._obfuscateIp = true;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    const { details } = this._params;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\n            \"ui.panel.config.cloud.dialog_already_connected.heading\"\n          )\n        )}\n      >\n        <div class=\"intro\">\n          <span>\n            ${this.hass.localize(\n              \"ui.panel.config.cloud.dialog_already_connected.description\"\n            )}\n          </span>\n          <b>\n            ${this.hass.localize(\n              \"ui.panel.config.cloud.dialog_already_connected.other_home_assistant\"\n            )}\n          </b>\n        </div>\n        <div class=\"instance-details\">\n          ${details.name\n            ? html`<div class=\"instance-detail\">\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.dialog_already_connected.instance_name\"\n                  )}:\n                </span>\n                <span>${details.name}</span>\n              </div>`\n            : nothing}\n          ${details.version\n            ? html`<div class=\"instance-detail\">\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.dialog_already_connected.instance_version\"\n                  )}:\n                </span>\n                <span>${details.version}</span>\n              </div>`\n            : nothing}\n          <div class=\"instance-detail\">\n            <span>\n              ${this.hass.localize(\n                \"ui.panel.config.cloud.dialog_already_connected.ip_address\"\n              )}:\n            </span>\n            <div class=\"obfuscated\">\n              <span>\n                ${this._obfuscateIp\n                  ? obfuscateUrl(details.remote_ip_address)\n                  : details.remote_ip_address}\n              </span>\n\n              <ha-icon-button\n                class=\"toggle-unmasked-url\"\n                .label=${this.hass.localize(\n                  `ui.panel.config.cloud.dialog_already_connected.obfuscated_ip.${this._obfuscateIp ? \"hide\" : \"show\"}`\n                )}\n                @click=${this._toggleObfuscateIp}\n                .path=${this._obfuscateIp ? mdiEye : mdiEyeOff}\n              ></ha-icon-button>\n            </div>\n          </div>\n          <div class=\"instance-detail\">\n            <span>\n              ${this.hass.localize(\n                \"ui.panel.config.cloud.dialog_already_connected.connected_at\"\n              )}:\n            </span>\n            <span>\n              ${formatDateTime(\n                new Date(details.connected_at),\n                this.hass.locale,\n                this.hass.config\n              )}\n            </span>\n          </div>\n        </div>\n        <ha-alert\n          alert-type=\"info\"\n          .title=${this.hass.localize(\n            \"ui.panel.config.cloud.dialog_already_connected.info_backups.title\"\n          )}\n        >\n          ${this.hass.localize(\n            \"ui.panel.config.cloud.dialog_already_connected.info_backups.description\"\n          )}\n        </ha-alert>\n\n        <ha-button\n          appearance=\"plain\"\n          @click=${this.closeDialog}\n          slot=\"secondaryAction\"\n        >\n          ${this.hass!.localize(\"ui.common.cancel\")}\n        </ha-button>\n        <ha-button @click=${this._logInHere} slot=\"primaryAction\">\n          ${this.hass!.localize(\n            \"ui.panel.config.cloud.dialog_already_connected.login_here\"\n          )}\n        </ha-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _toggleObfuscateIp() {\n    this._obfuscateIp = !this._obfuscateIp;\n  }\n\n  private _logInHere() {\n    this._params?.logInHereAction?.();\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 535px;\n        }\n        .intro b {\n          display: block;\n          margin-top: 16px;\n        }\n        .instance-details {\n          display: flex;\n          flex-direction: column;\n          margin-bottom: 16px;\n        }\n        .instance-detail {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .obfuscated {\n          align-items: center;\n          display: flex;\n          flex-direction: row;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-cloud-already-connected\": DialogCloudAlreadyConnected;\n  }\n}\n","export function obfuscateUrl(url: string) {\n  if (url.endsWith(\".ui.nabu.casa\")) {\n    return \"https://•••••••••••••••••.ui.nabu.casa\";\n  }\n  // hide any words that look like they might be a hostname or IP address\n  return url.replace(/(?<=:\\/\\/)[\\w-]+|(?<=\\.)[\\w-]+/g, (match) =>\n    \"•\".repeat(match.length)\n  );\n}\n"],"names":["memoizeOne","locale","serverTimeZone","Intl","DateTimeFormat","language","weekday","month","day","timeZone","resolveTimeZone","time_zone","formatDate","dateObj","config","formatDateMem","format","year","formatDateNumeric","formatter","formatDateNumericMem","date_format","DateFormat","parts","formatToParts","literal","find","value","type","lastPart","length","lastLiteral","localeString","undefined","formatDateTime","formatDateTimeMem","hour","useAmPm","minute","hourCycle","second","formatTime","formatTimeMem","formatTimeWithSeconds","formatTimeWithSecondsMem","formatTimeWeekday","formatTimeWeekdayMem","formatTime24h","formatTime24hMem","hour12","RESOLVED_TIME_ZONE","resolvedOptions","LOCAL_TIME_ZONE","option","TimeZone","time_format","TimeFormat","testLanguage","Date","toLocaleString","includes","DialogCloudAlreadyConnected","LitElement","showDialog","params","this","_params","closeDialog","_obfuscateIp","fireEvent","dialog","localName","render","nothing","details","html","createCloseHeading","hass","localize","name","version","obfuscateUrl","remote_ip_address","_toggleObfuscateIp","mdiEye","mdiEyeOff","connected_at","_logInHere","logInHereAction","styles","haStyleDialog","css","args","url","endsWith","replace","match","repeat"],"mappings":"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"}