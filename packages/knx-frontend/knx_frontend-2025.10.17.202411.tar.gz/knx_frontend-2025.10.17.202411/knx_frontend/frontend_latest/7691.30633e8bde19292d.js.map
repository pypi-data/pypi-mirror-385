{"version":3,"file":"7691.30633e8bde19292d.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-form/ha-form.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-icon-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/helpers/forms/ha-input_text-form.ts"],"sourcesContent":["import type { PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, ReactiveElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-alert\";\nimport \"../ha-selector/ha-selector\";\nimport type { HaFormDataContainer, HaFormElement, HaFormSchema } from \"./types\";\n\nconst LOAD_ELEMENTS = {\n  boolean: () => import(\"./ha-form-boolean\"),\n  constant: () => import(\"./ha-form-constant\"),\n  float: () => import(\"./ha-form-float\"),\n  grid: () => import(\"./ha-form-grid\"),\n  expandable: () => import(\"./ha-form-expandable\"),\n  integer: () => import(\"./ha-form-integer\"),\n  multi_select: () => import(\"./ha-form-multi_select\"),\n  positive_time_period_dict: () =>\n    import(\"./ha-form-positive_time_period_dict\"),\n  select: () => import(\"./ha-form-select\"),\n  string: () => import(\"./ha-form-string\"),\n  optional_actions: () => import(\"./ha-form-optional_actions\"),\n};\n\nconst getValue = (obj, item) =>\n  obj ? (!item.name || item.flatten ? obj : obj[item.name]) : null;\n\nconst getError = (obj, item) => (obj && item.name ? obj[item.name] : null);\n\nconst getWarning = (obj, item) => (obj && item.name ? obj[item.name] : null);\n\n@customElement(\"ha-form\")\nexport class HaForm extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public data!: HaFormDataContainer;\n\n  @property({ attribute: false }) public schema!: readonly HaFormSchema[];\n\n  @property({ attribute: false }) public error?: Record<\n    string,\n    string | string[]\n  >;\n\n  @property({ attribute: false }) public warning?: Record<string, string>;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public computeError?: (\n    schema: any,\n    error\n  ) => string;\n\n  @property({ attribute: false }) public computeWarning?: (\n    schema: any,\n    warning\n  ) => string;\n\n  @property({ attribute: false }) public computeLabel?: (\n    schema: any,\n    data: HaFormDataContainer\n  ) => string;\n\n  @property({ attribute: false }) public computeHelper?: (\n    schema: any\n  ) => string | undefined;\n\n  @property({ attribute: false }) public localizeValue?: (\n    key: string\n  ) => string;\n\n  protected getFormProperties(): Record<string, any> {\n    return {};\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    const root = this.renderRoot.querySelector(\".root\");\n    if (!root) {\n      return;\n    }\n    for (const child of root.children) {\n      if (child.tagName !== \"HA-ALERT\") {\n        if (child instanceof ReactiveElement) {\n          // eslint-disable-next-line no-await-in-loop\n          await child.updateComplete;\n        }\n        (child as HTMLElement).focus();\n        break;\n      }\n    }\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"schema\") && this.schema) {\n      this.schema.forEach((item) => {\n        if (\"selector\" in item) {\n          return;\n        }\n        LOAD_ELEMENTS[item.type]?.();\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"root\" part=\"root\">\n        ${this.error && this.error.base\n          ? html`\n              <ha-alert alert-type=\"error\">\n                ${this._computeError(this.error.base, this.schema)}\n              </ha-alert>\n            `\n          : \"\"}\n        ${this.schema.map((item) => {\n          const error = getError(this.error, item);\n          const warning = getWarning(this.warning, item);\n\n          return html`\n            ${error\n              ? html`\n                  <ha-alert own-margin alert-type=\"error\">\n                    ${this._computeError(error, item)}\n                  </ha-alert>\n                `\n              : warning\n                ? html`\n                    <ha-alert own-margin alert-type=\"warning\">\n                      ${this._computeWarning(warning, item)}\n                    </ha-alert>\n                  `\n                : \"\"}\n            ${\"selector\" in item\n              ? html`<ha-selector\n                  .schema=${item}\n                  .hass=${this.hass}\n                  .narrow=${this.narrow}\n                  .name=${item.name}\n                  .selector=${item.selector}\n                  .value=${getValue(this.data, item)}\n                  .label=${this._computeLabel(item, this.data)}\n                  .disabled=${item.disabled || this.disabled || false}\n                  .placeholder=${item.required ? \"\" : item.default}\n                  .helper=${this._computeHelper(item)}\n                  .localizeValue=${this.localizeValue}\n                  .required=${item.required || false}\n                  .context=${this._generateContext(item)}\n                ></ha-selector>`\n              : dynamicElement(this.fieldElementName(item.type), {\n                  schema: item,\n                  data: getValue(this.data, item),\n                  label: this._computeLabel(item, this.data),\n                  helper: this._computeHelper(item),\n                  disabled: this.disabled || item.disabled || false,\n                  hass: this.hass,\n                  localize: this.hass?.localize,\n                  computeLabel: this.computeLabel,\n                  computeHelper: this.computeHelper,\n                  localizeValue: this.localizeValue,\n                  context: this._generateContext(item),\n                  ...this.getFormProperties(),\n                })}\n          `;\n        })}\n      </div>\n    `;\n  }\n\n  protected fieldElementName(type: string): string {\n    return `ha-form-${type}`;\n  }\n\n  private _generateContext(\n    schema: HaFormSchema\n  ): Record<string, any> | undefined {\n    if (!schema.context) {\n      return undefined;\n    }\n\n    const context = {};\n    for (const [context_key, data_key] of Object.entries(schema.context)) {\n      context[context_key] = this.data[data_key];\n    }\n    return context;\n  }\n\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const root = super.createRenderRoot() as ShadowRoot;\n    // attach it as soon as possible to make sure we fetch all events.\n    this.addValueChangedListener(root);\n    return root;\n  }\n\n  protected addValueChangedListener(element: Element | ShadowRoot) {\n    element.addEventListener(\"value-changed\", (ev) => {\n      ev.stopPropagation();\n      const schema = (ev.target as HaFormElement).schema as HaFormSchema;\n\n      if (ev.target === this) return;\n\n      const newValue =\n        !schema.name || (\"flatten\" in schema && schema.flatten)\n          ? ev.detail.value\n          : { [schema.name]: ev.detail.value };\n\n      this.data = {\n        ...this.data,\n        ...newValue,\n      };\n\n      fireEvent(this, \"value-changed\", {\n        value: this.data,\n      });\n    });\n  }\n\n  private _computeLabel(schema: HaFormSchema, data: HaFormDataContainer) {\n    return this.computeLabel\n      ? this.computeLabel(schema, data)\n      : schema\n        ? schema.name\n        : \"\";\n  }\n\n  private _computeHelper(schema: HaFormSchema) {\n    return this.computeHelper ? this.computeHelper(schema) : \"\";\n  }\n\n  private _computeError(\n    error: string | string[],\n    schema: HaFormSchema | readonly HaFormSchema[]\n  ): string | TemplateResult {\n    if (Array.isArray(error)) {\n      return html`<ul>\n        ${error.map(\n          (err) =>\n            html`<li>\n              ${this.computeError ? this.computeError(err, schema) : err}\n            </li>`\n        )}\n      </ul>`;\n    }\n    return this.computeError ? this.computeError(error, schema) : error;\n  }\n\n  private _computeWarning(\n    warning,\n    schema: HaFormSchema | readonly HaFormSchema[]\n  ) {\n    return this.computeWarning ? this.computeWarning(warning, schema) : warning;\n  }\n\n  static styles = css`\n    .root > * {\n      display: block;\n    }\n    .root > *:not([own-margin]):not(:last-child) {\n      margin-bottom: 24px;\n    }\n    ha-alert[own-margin] {\n      margin-bottom: 4px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form\": HaForm;\n  }\n}\n","import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type {\n  ComboBoxDataProviderCallback,\n  ComboBoxDataProviderParams,\n} from \"@vaadin/combo-box/vaadin-combo-box-light\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport \"./ha-combo-box\";\nimport \"./ha-icon\";\nimport \"./ha-combo-box-item\";\n\ninterface IconItem {\n  icon: string;\n  parts: Set<string>;\n  keywords: string[];\n}\n\ninterface RankedIcon {\n  icon: string;\n  rank: number;\n}\n\nlet ICONS: IconItem[] = [];\nlet ICONS_LOADED = false;\n\nconst loadIcons = async () => {\n  ICONS_LOADED = true;\n\n  const iconList = await import(\"../../build/mdi/iconList.json\");\n  ICONS = iconList.default.map((icon) => ({\n    icon: `mdi:${icon.name}`,\n    parts: new Set(icon.name.split(\"-\")),\n    keywords: icon.keywords,\n  }));\n\n  const customIconLoads: Promise<IconItem[]>[] = [];\n  Object.keys(customIcons).forEach((iconSet) => {\n    customIconLoads.push(loadCustomIconItems(iconSet));\n  });\n  (await Promise.all(customIconLoads)).forEach((customIconItems) => {\n    ICONS.push(...customIconItems);\n  });\n};\n\nconst loadCustomIconItems = async (iconsetPrefix: string) => {\n  try {\n    const getIconList = customIcons[iconsetPrefix].getIconList;\n    if (typeof getIconList !== \"function\") {\n      return [];\n    }\n    const iconList = await getIconList();\n    const customIconItems = iconList.map((icon) => ({\n      icon: `${iconsetPrefix}:${icon.name}`,\n      parts: new Set(icon.name.split(\"-\")),\n      keywords: icon.keywords ?? [],\n    }));\n    return customIconItems;\n  } catch (_err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    return [];\n  }\n};\n\nconst rowRenderer: ComboBoxLitRenderer<IconItem | RankedIcon> = (item) => html`\n  <ha-combo-box-item type=\"button\">\n    <ha-icon .icon=${item.icon} slot=\"start\"></ha-icon>\n    ${item.icon}\n  </ha-combo-box-item>\n`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .dataProvider=${ICONS_LOADED ? this._iconProvider : undefined}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .placeholder=${this.placeholder}\n        .errorMessage=${this.errorMessage}\n        .invalid=${this.invalid}\n        .renderer=${rowRenderer}\n        icon\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        ${this._value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this._value || this.placeholder} slot=\"icon\">\n              </ha-icon>\n            `\n          : html`<slot slot=\"icon\" name=\"fallback\"></slot>`}\n      </ha-combo-box>\n    `;\n  }\n\n  // Filter can take a significant chunk of frame (up to 3-5 ms)\n  private _filterIcons = memoizeOne(\n    (filter: string, iconItems: IconItem[] = ICONS) => {\n      if (!filter) {\n        return iconItems;\n      }\n\n      const filteredItems: RankedIcon[] = [];\n      const addIcon = (icon: string, rank: number) =>\n        filteredItems.push({ icon, rank });\n\n      // Filter and rank such that exact matches rank higher, and prefer icon name matches over keywords\n      for (const item of iconItems) {\n        if (item.parts.has(filter)) {\n          addIcon(item.icon, 1);\n        } else if (item.keywords.includes(filter)) {\n          addIcon(item.icon, 2);\n        } else if (item.icon.includes(filter)) {\n          addIcon(item.icon, 3);\n        } else if (item.keywords.some((word) => word.includes(filter))) {\n          addIcon(item.icon, 4);\n        }\n      }\n\n      // Allow preview for custom icon not in list\n      if (filteredItems.length === 0) {\n        addIcon(filter, 0);\n      }\n\n      return filteredItems.sort((itemA, itemB) => itemA.rank - itemB.rank);\n    }\n  );\n\n  private _iconProvider = (\n    params: ComboBoxDataProviderParams,\n    callback: ComboBoxDataProviderCallback<IconItem | RankedIcon>\n  ) => {\n    const filteredItems = this._filterIcons(params.filter.toLowerCase(), ICONS);\n    const iStart = params.page * params.pageSize;\n    const iEnd = iStart + params.pageSize;\n    callback(filteredItems.slice(iStart, iEnd), filteredItems.length);\n  };\n\n  private async _openedChanged(ev: ValueChangedEvent<boolean>) {\n    const opened = ev.detail.value;\n    if (opened && !ICONS_LOADED) {\n      await loadIcons();\n      this.requestUpdate();\n    }\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static styles = css`\n    *[slot=\"icon\"] {\n      color: var(--primary-text-color);\n      position: relative;\n      bottom: 2px;\n    }\n    *[slot=\"prefix\"] {\n      margin-right: 8px;\n      margin-inline-end: 8px;\n      margin-inline-start: initial;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-expansion-panel\";\nimport \"../../../../components/ha-form/ha-form\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-textfield\";\nimport type { InputText } from \"../../../../data/input_text\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_text-form\")\nclass HaInputTextForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public new = false;\n\n  private _item?: InputText;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _max?: number;\n\n  @state() private _min?: number;\n\n  @state() private _mode?: string;\n\n  @state() private _pattern?: string;\n\n  set item(item: InputText) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max || 100;\n      this._min = item.min || 0;\n      this._mode = item.mode || \"text\";\n      this._pattern = item.pattern;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"text\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          autoValidate\n          required\n          .validationMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .hass=${this.hass}\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <ha-expansion-panel\n          header=${this.hass.localize(\n            \"ui.dialogs.helper_settings.generic.advanced_settings\"\n          )}\n          outlined\n        >\n          <ha-textfield\n            .value=${this._min}\n            .configValue=${\"min\"}\n            type=\"number\"\n            min=\"0\"\n            max=\"255\"\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.min\"\n            )}\n          ></ha-textfield>\n          <ha-textfield\n            .value=${this._max}\n            .configValue=${\"max\"}\n            min=\"0\"\n            max=\"255\"\n            type=\"number\"\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.max\"\n            )}\n          ></ha-textfield>\n          <div class=\"layout horizontal center justified\">\n            ${this.hass.localize(\"ui.dialogs.helper_settings.input_text.mode\")}\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.helper_settings.input_text.text\"\n              )}\n            >\n              <ha-radio\n                name=\"mode\"\n                value=\"text\"\n                .checked=${this._mode === \"text\"}\n                @change=${this._modeChanged}\n              ></ha-radio>\n            </ha-formfield>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.helper_settings.input_text.password\"\n              )}\n            >\n              <ha-radio\n                name=\"mode\"\n                value=\"password\"\n                .checked=${this._mode === \"password\"}\n                @change=${this._modeChanged}\n              ></ha-radio>\n            </ha-formfield>\n          </div>\n          <ha-textfield\n            .value=${this._pattern || \"\"}\n            .configValue=${\"pattern\"}\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.pattern_label\"\n            )}\n            .helper=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_text.pattern_helper\"\n            )}\n          ></ha-textfield>\n        </ha-expansion-panel>\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: (ev.target as HaRadio).value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-textfield,\n        ha-icon-picker {\n          display: block;\n          margin: 8px 0;\n        }\n        ha-expansion-panel {\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_text-form\": HaInputTextForm;\n  }\n}\n"],"names":["LOAD_ELEMENTS","boolean","constant","float","grid","expandable","e","integer","multi_select","positive_time_period_dict","select","string","optional_actions","getValue","obj","item","name","flatten","HaForm","LitElement","getFormProperties","focus","this","updateComplete","root","renderRoot","querySelector","child","children","tagName","ReactiveElement","willUpdate","changedProps","has","schema","forEach","type","render","html","error","base","_computeError","map","getError","warning","getWarning","_computeWarning","hass","narrow","selector","data","_computeLabel","disabled","required","default","_computeHelper","localizeValue","_generateContext","dynamicElement","fieldElementName","label","helper","localize","computeLabel","computeHelper","context","context_key","data_key","Object","entries","createRenderRoot","addValueChangedListener","element","addEventListener","ev","stopPropagation","target","newValue","detail","value","fireEvent","Array","isArray","err","computeError","computeWarning","args","styles","css","attribute","Boolean","ICONS","ICONS_LOADED","loadCustomIconItems","getIconList","customIcons","iconsetPrefix","iconList","icon","parts","Set","split","keywords","_err","console","warn","rowRenderer","HaIconPicker","_value","_iconProvider","undefined","placeholder","errorMessage","invalid","_openedChanged","_valueChanged","customIconLoads","keys","iconSet","push","Promise","all","customIconItems","loadIcons","requestUpdate","_setValue","bubbles","composed","_filterIcons","memoizeOne","filter","iconItems","filteredItems","addIcon","rank","includes","some","word","length","sort","itemA","itemB","params","callback","toLowerCase","iStart","page","pageSize","iEnd","slice","HaInputTextForm","_item","_name","_icon","_max","max","_min","min","_mode","mode","_pattern","pattern","then","shadowRoot","_modeChanged","nothing","new","configValue","haStyle"],"mappings":"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"}