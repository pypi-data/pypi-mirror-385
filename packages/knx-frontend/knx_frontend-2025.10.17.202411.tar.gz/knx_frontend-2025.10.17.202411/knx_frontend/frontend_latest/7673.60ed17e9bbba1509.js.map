{"version":3,"file":"7673.60ed17e9bbba1509.js","sources":["webpack://knx-frontend/./node_modules/@material/web/internal/controller/attachable-controller.ts","webpack://knx-frontend/./node_modules/@material/web/internal/motion/animation.ts","webpack://knx-frontend/./node_modules/@material/web/ripple/internal/ripple-styles.ts","webpack://knx-frontend/./node_modules/@material/web/ripple/internal/ripple.ts","webpack://knx-frontend/./node_modules/lit-html/src/directive-helpers.ts","webpack://knx-frontend/./node_modules/lit-html/src/static.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, ReactiveController, ReactiveControllerHost} from 'lit';\n\n/**\n * An element that can be attached to an associated controlling element.\n */\nexport interface Attachable {\n  /**\n   * Reflects the value of the `for` attribute, which is the ID of the element's\n   * associated control.\n   *\n   * Use this when the elements's associated control is not its parent.\n   *\n   * To manually control an element, set its `for` attribute to `\"\"`.\n   *\n   * @example\n   * ```html\n   * <div class=\"container\">\n   *   <md-attachable for=\"interactive\"></md-attachable>\n   *   <button id=\"interactive\">Action</button>\n   * </div>\n   * ```\n   *\n   * @example\n   * ```html\n   * <button class=\"manually-controlled\">\n   *   <md-attachable for=\"\"></md-attachable>\n   * </button>\n   * ```\n   */\n  htmlFor: string | null;\n\n  /**\n   * Gets or sets the element that controls the visibility of the attachable\n   * element. It is one of:\n   *\n   * - The control referenced by the `for` attribute.\n   * - The control provided to `element.attach(control)`\n   * - The element's parent.\n   * - `null` if the element is not controlled.\n   */\n  control: HTMLElement | null;\n\n  /**\n   * Attaches the element to an interactive control.\n   *\n   * @param control The element that controls the attachable element.\n   */\n  attach(control: HTMLElement): void;\n\n  /**\n   * Detaches the element from its current control.\n   */\n  detach(): void;\n}\n\n/**\n * A key to retrieve an `Attachable` element's `AttachableController` from a\n * global `MutationObserver`.\n */\nconst ATTACHABLE_CONTROLLER = Symbol('attachableController');\n\n/**\n * The host of an `AttachableController`. The controller will add itself to\n * the host so it can be retrieved in a global `MutationObserver`.\n */\ninterface AttachableControllerHost extends ReactiveControllerHost, HTMLElement {\n  [ATTACHABLE_CONTROLLER]?: AttachableController;\n}\n\nlet FOR_ATTRIBUTE_OBSERVER: MutationObserver | undefined;\n\nif (!isServer) {\n  /**\n   * A global `MutationObserver` that reacts to `for` attribute changes on\n   * `Attachable` elements. If the `for` attribute changes, the controller will\n   * re-attach to the new referenced element.\n   */\n  FOR_ATTRIBUTE_OBSERVER = new MutationObserver((records) => {\n    for (const record of records) {\n      // When a control's `for` attribute changes, inform its\n      // `AttachableController` to update to a new control.\n      (record.target as AttachableControllerHost)[\n        ATTACHABLE_CONTROLLER\n      ]?.hostConnected();\n    }\n  });\n}\n\n/**\n * A controller that provides an implementation for `Attachable` elements.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement implements Attachable {\n *   get control() { return this.attachableController.control; }\n *\n *   private readonly attachableController = new AttachableController(\n *     this,\n *     (previousControl, newControl) => {\n *       previousControl?.removeEventListener('click', this.handleClick);\n *       newControl?.addEventListener('click', this.handleClick);\n *     }\n *   );\n *\n *   // Implement remaining `Attachable` properties/methods that call the\n *   // controller's properties/methods.\n * }\n * ```\n */\nexport class AttachableController implements ReactiveController, Attachable {\n  get htmlFor() {\n    return this.host.getAttribute('for');\n  }\n\n  set htmlFor(htmlFor: string | null) {\n    if (htmlFor === null) {\n      this.host.removeAttribute('for');\n    } else {\n      this.host.setAttribute('for', htmlFor);\n    }\n  }\n\n  get control() {\n    if (this.host.hasAttribute('for')) {\n      if (!this.htmlFor || !this.host.isConnected) {\n        return null;\n      }\n\n      return (\n        this.host.getRootNode() as Document | ShadowRoot\n      ).querySelector<HTMLElement>(`#${this.htmlFor}`);\n    }\n\n    return this.currentControl || this.host.parentElement;\n  }\n  set control(control: HTMLElement | null) {\n    if (control) {\n      this.attach(control);\n    } else {\n      this.detach();\n    }\n  }\n\n  private currentControl: HTMLElement | null = null;\n\n  /**\n   * Creates a new controller for an `Attachable` element.\n   *\n   * @param host The `Attachable` element.\n   * @param onControlChange A callback with two parameters for the previous and\n   *     next control. An `Attachable` element may perform setup or teardown\n   *     logic whenever the control changes.\n   */\n  constructor(\n    private readonly host: AttachableControllerHost,\n    private readonly onControlChange: (\n      prev: HTMLElement | null,\n      next: HTMLElement | null,\n    ) => void,\n  ) {\n    host.addController(this);\n    host[ATTACHABLE_CONTROLLER] = this;\n    FOR_ATTRIBUTE_OBSERVER?.observe(host, {attributeFilter: ['for']});\n  }\n\n  attach(control: HTMLElement) {\n    if (control === this.currentControl) {\n      return;\n    }\n\n    this.setCurrentControl(control);\n    // When imperatively attaching, remove the `for` attribute so\n    // that the attached control is used instead of a referenced one.\n    this.host.removeAttribute('for');\n  }\n\n  detach() {\n    this.setCurrentControl(null);\n    // When imperatively detaching, add an empty `for=\"\"` attribute. This will\n    // ensure the control is `null` rather than the `parentElement`.\n    this.host.setAttribute('for', '');\n  }\n\n  /** @private */\n  hostConnected() {\n    this.setCurrentControl(this.control);\n  }\n\n  /** @private */\n  hostDisconnected() {\n    this.setCurrentControl(null);\n  }\n\n  private setCurrentControl(control: HTMLElement | null) {\n    this.onControlChange(this.currentControl, control);\n    this.currentControl = control;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Easing functions to use for web animations.\n *\n * **NOTE:** `EASING.EMPHASIZED` is approximated with unknown accuracy.\n *\n * TODO(b/241113345): replace with tokens\n */\nexport const EASING = {\n  STANDARD: 'cubic-bezier(0.2, 0, 0, 1)',\n  STANDARD_ACCELERATE: 'cubic-bezier(.3,0,1,1)',\n  STANDARD_DECELERATE: 'cubic-bezier(0,0,0,1)',\n  EMPHASIZED: 'cubic-bezier(.3,0,0,1)',\n  EMPHASIZED_ACCELERATE: 'cubic-bezier(.3,0,.8,.15)',\n  EMPHASIZED_DECELERATE: 'cubic-bezier(.05,.7,.1,1)',\n} as const;\n\n/**\n * A signal that is used for abortable tasks.\n */\nexport interface AnimationSignal {\n  /**\n   * Starts the abortable task. Any previous tasks started with this instance\n   * will be aborted.\n   *\n   * @return An `AbortSignal` for the current task.\n   */\n  start(): AbortSignal;\n  /**\n   * Complete the current task.\n   */\n  finish(): void;\n}\n\n/**\n * Creates an `AnimationSignal` that can be used to cancel a previous task.\n *\n * @example\n * class MyClass {\n *   private labelAnimationSignal = createAnimationSignal();\n *\n *   private async animateLabel() {\n *     // Start of the task. Previous tasks will be canceled.\n *     const signal = this.labelAnimationSignal.start();\n *\n *     // Do async work...\n *     if (signal.aborted) {\n *       // Use AbortSignal to check if a request was made to abort after some\n *       // asynchronous work.\n *       return;\n *     }\n *\n *     const animation = this.animate(...);\n *     // Add event listeners to be notified when the task should be canceled.\n *     signal.addEventListener('abort', () => {\n *       animation.cancel();\n *     });\n *\n *     animation.addEventListener('finish', () => {\n *       // Tell the signal that the current task is finished.\n *       this.labelAnimationSignal.finish();\n *     });\n *   }\n * }\n *\n * @return An `AnimationSignal`.\n */\nexport function createAnimationSignal(): AnimationSignal {\n  // The current animation's AbortController\n  let animationAbortController: AbortController | null = null;\n\n  return {\n    start() {\n      // Tell the previous animation to cancel.\n      animationAbortController?.abort();\n      // Set up a new AbortController for the current animation.\n      animationAbortController = new AbortController();\n      // Provide the AbortSignal so that the caller can check aborted status\n      // and add listeners.\n      return animationAbortController.signal;\n    },\n    finish() {\n      animationAbortController = null;\n    },\n  };\n}\n\n/**\n * Returns a function which can be used to throttle function calls\n * mapped to a key via a given function that should produce a promise that\n * determines the throttle amount (defaults to requestAnimationFrame).\n */\nexport function createThrottle() {\n  const stack = new Set();\n  return async (\n    key = '',\n    cb: (...args: unknown[]) => unknown,\n    timeout = async () => {\n      await new Promise(requestAnimationFrame);\n    },\n  ) => {\n    if (!stack.has(key)) {\n      stack.add(key);\n      await timeout();\n      if (stack.has(key)) {\n        stack.delete(key);\n        cb();\n      }\n    }\n  };\n}\n\n/**\n * Parses an number in milliseconds from a css time value\n */\nexport function msFromTimeCSSValue(value: string) {\n  const match = value.trim().match(/([\\d.]+)(\\s*s$)?/);\n  const time = match?.[1];\n  const seconds = match?.[2];\n  return Number(time ?? 0) * (seconds ? 1000 : 1);\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./ripple/internal/ripple-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{display:flex;margin:auto;pointer-events:none}:host([disabled]){display:none}@media(forced-colors: active){:host{display:none}}:host,.surface{border-radius:inherit;position:absolute;inset:0;overflow:hidden}.surface{-webkit-tap-highlight-color:rgba(0,0,0,0)}.surface::before,.surface::after{content:\"\";opacity:0;position:absolute}.surface::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));inset:0;transition:opacity 15ms linear,background-color 15ms linear}.surface::after{background:radial-gradient(closest-side, var(--md-ripple-pressed-color, var(--md-sys-color-on-surface, #1d1b20)) max(100% - 70px, 65%), transparent 100%);transform-origin:center center;transition:opacity 375ms linear}.hovered::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-ripple-hover-opacity, 0.08)}.pressed::after{opacity:var(--md-ripple-pressed-opacity, 0.12);transition-duration:105ms}\n`;\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, isServer, LitElement, PropertyValues} from 'lit';\nimport {property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {\n  Attachable,\n  AttachableController,\n} from '../../internal/controller/attachable-controller.js';\nimport {EASING} from '../../internal/motion/animation.js';\n\nconst PRESS_GROW_MS = 450;\nconst MINIMUM_PRESS_MS = 225;\nconst INITIAL_ORIGIN_SCALE = 0.2;\nconst PADDING = 10;\nconst SOFT_EDGE_MINIMUM_SIZE = 75;\nconst SOFT_EDGE_CONTAINER_RATIO = 0.35;\nconst PRESS_PSEUDO = '::after';\nconst ANIMATION_FILL = 'forwards';\n\n/**\n * Interaction states for the ripple.\n *\n * On Touch:\n *  - `INACTIVE -> TOUCH_DELAY -> WAITING_FOR_CLICK -> INACTIVE`\n *  - `INACTIVE -> TOUCH_DELAY -> HOLDING -> WAITING_FOR_CLICK -> INACTIVE`\n *\n * On Mouse or Pen:\n *   - `INACTIVE -> WAITING_FOR_CLICK -> INACTIVE`\n */\nenum State {\n  /**\n   * Initial state of the control, no touch in progress.\n   *\n   * Transitions:\n   *   - on touch down: transition to `TOUCH_DELAY`.\n   *   - on mouse down: transition to `WAITING_FOR_CLICK`.\n   */\n  INACTIVE,\n  /**\n   * Touch down has been received, waiting to determine if it's a swipe or\n   * scroll.\n   *\n   * Transitions:\n   *   - on touch up: begin press; transition to `WAITING_FOR_CLICK`.\n   *   - on cancel: transition to `INACTIVE`.\n   *   - after `TOUCH_DELAY_MS`: begin press; transition to `HOLDING`.\n   */\n  TOUCH_DELAY,\n  /**\n   * A touch has been deemed to be a press\n   *\n   * Transitions:\n   *  - on up: transition to `WAITING_FOR_CLICK`.\n   */\n  HOLDING,\n  /**\n   * The user touch has finished, transition into rest state.\n   *\n   * Transitions:\n   *   - on click end press; transition to `INACTIVE`.\n   */\n  WAITING_FOR_CLICK,\n}\n\n/**\n * Events that the ripple listens to.\n */\nconst EVENTS = [\n  'click',\n  'contextmenu',\n  'pointercancel',\n  'pointerdown',\n  'pointerenter',\n  'pointerleave',\n  'pointerup',\n];\n\n/**\n * Delay reacting to touch so that we do not show the ripple for a swipe or\n * scroll interaction.\n */\nconst TOUCH_DELAY_MS = 150;\n\n/**\n * Used to detect if HCM is active. Events do not process during HCM when the\n * ripple is not displayed.\n */\nconst FORCED_COLORS = isServer\n  ? null\n  : window.matchMedia('(forced-colors: active)');\n\n/**\n * A ripple component.\n */\nexport class Ripple extends LitElement implements Attachable {\n  /**\n   * Disables the ripple.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  get htmlFor() {\n    return this.attachableController.htmlFor;\n  }\n\n  set htmlFor(htmlFor: string | null) {\n    this.attachableController.htmlFor = htmlFor;\n  }\n\n  get control() {\n    return this.attachableController.control;\n  }\n  set control(control: HTMLElement | null) {\n    this.attachableController.control = control;\n  }\n\n  @state() private hovered = false;\n  @state() private pressed = false;\n\n  @query('.surface') private readonly mdRoot!: HTMLElement | null;\n  private rippleSize = '';\n  private rippleScale = '';\n  private initialSize = 0;\n  private growAnimation?: Animation;\n  private state = State.INACTIVE;\n  private rippleStartEvent?: PointerEvent;\n  private readonly attachableController = new AttachableController(\n    this,\n    this.onControlChange.bind(this),\n  );\n\n  attach(control: HTMLElement) {\n    this.attachableController.attach(control);\n  }\n\n  detach() {\n    this.attachableController.detach();\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    // Needed for VoiceOver, which will create a \"group\" if the element is a\n    // sibling to other content.\n    this.setAttribute('aria-hidden', 'true');\n  }\n\n  protected override render() {\n    const classes = {\n      'hovered': this.hovered,\n      'pressed': this.pressed,\n    };\n\n    return html`<div class=\"surface ${classMap(classes)}\"></div>`;\n  }\n\n  protected override update(changedProps: PropertyValues<Ripple>) {\n    if (changedProps.has('disabled') && this.disabled) {\n      this.hovered = false;\n      this.pressed = false;\n    }\n    super.update(changedProps);\n  }\n\n  /**\n   * TODO(b/269799771): make private\n   * @private only public for slider\n   */\n  handlePointerenter(event: PointerEvent) {\n    if (!this.shouldReactToEvent(event)) {\n      return;\n    }\n\n    this.hovered = true;\n  }\n\n  /**\n   * TODO(b/269799771): make private\n   * @private only public for slider\n   */\n  handlePointerleave(event: PointerEvent) {\n    if (!this.shouldReactToEvent(event)) {\n      return;\n    }\n\n    this.hovered = false;\n\n    // release a held mouse or pen press that moves outside the element\n    if (this.state !== State.INACTIVE) {\n      this.endPressAnimation();\n    }\n  }\n\n  private handlePointerup(event: PointerEvent) {\n    if (!this.shouldReactToEvent(event)) {\n      return;\n    }\n\n    if (this.state === State.HOLDING) {\n      this.state = State.WAITING_FOR_CLICK;\n      return;\n    }\n\n    if (this.state === State.TOUCH_DELAY) {\n      this.state = State.WAITING_FOR_CLICK;\n      this.startPressAnimation(this.rippleStartEvent);\n      return;\n    }\n  }\n\n  private async handlePointerdown(event: PointerEvent) {\n    if (!this.shouldReactToEvent(event)) {\n      return;\n    }\n\n    this.rippleStartEvent = event;\n    if (!this.isTouch(event)) {\n      this.state = State.WAITING_FOR_CLICK;\n      this.startPressAnimation(event);\n      return;\n    }\n\n    // Wait for a hold after touch delay\n    this.state = State.TOUCH_DELAY;\n    await new Promise((resolve) => {\n      setTimeout(resolve, TOUCH_DELAY_MS);\n    });\n\n    if (this.state !== State.TOUCH_DELAY) {\n      return;\n    }\n\n    this.state = State.HOLDING;\n    this.startPressAnimation(event);\n  }\n\n  private handleClick() {\n    // Click is a MouseEvent in Firefox and Safari, so we cannot use\n    // `shouldReactToEvent`\n    if (this.disabled) {\n      return;\n    }\n\n    if (this.state === State.WAITING_FOR_CLICK) {\n      this.endPressAnimation();\n      return;\n    }\n\n    if (this.state === State.INACTIVE) {\n      // keyboard synthesized click event\n      this.startPressAnimation();\n      this.endPressAnimation();\n    }\n  }\n\n  private handlePointercancel(event: PointerEvent) {\n    if (!this.shouldReactToEvent(event)) {\n      return;\n    }\n\n    this.endPressAnimation();\n  }\n\n  private handleContextmenu() {\n    if (this.disabled) {\n      return;\n    }\n\n    this.endPressAnimation();\n  }\n\n  private determineRippleSize() {\n    const {height, width} = this.getBoundingClientRect();\n    const maxDim = Math.max(height, width);\n    const softEdgeSize = Math.max(\n      SOFT_EDGE_CONTAINER_RATIO * maxDim,\n      SOFT_EDGE_MINIMUM_SIZE,\n    );\n\n    // `?? 1` may be removed once `currentCSSZoom` is widely available.\n    const zoom = this.currentCSSZoom ?? 1;\n    const initialSize = Math.floor((maxDim * INITIAL_ORIGIN_SCALE) / zoom);\n    const hypotenuse = Math.sqrt(width ** 2 + height ** 2);\n    const maxRadius = hypotenuse + PADDING;\n\n    this.initialSize = initialSize;\n    // The dimensions may be altered by CSS `zoom`, which needs to be\n    // compensated for in the final scale() value.\n    const maybeZoomedScale = (maxRadius + softEdgeSize) / initialSize;\n    this.rippleScale = `${maybeZoomedScale / zoom}`;\n    this.rippleSize = `${initialSize}px`;\n  }\n\n  private getNormalizedPointerEventCoords(pointerEvent: PointerEvent): {\n    x: number;\n    y: number;\n  } {\n    const {scrollX, scrollY} = window;\n    const {left, top} = this.getBoundingClientRect();\n    const documentX = scrollX + left;\n    const documentY = scrollY + top;\n    const {pageX, pageY} = pointerEvent;\n    // `?? 1` may be removed once `currentCSSZoom` is widely available.\n    const zoom = this.currentCSSZoom ?? 1;\n    return {\n      x: (pageX - documentX) / zoom,\n      y: (pageY - documentY) / zoom,\n    };\n  }\n\n  private getTranslationCoordinates(positionEvent?: Event) {\n    const {height, width} = this.getBoundingClientRect();\n    // `?? 1` may be removed once `currentCSSZoom` is widely available.\n    const zoom = this.currentCSSZoom ?? 1;\n    // end in the center\n    const endPoint = {\n      x: (width / zoom - this.initialSize) / 2,\n      y: (height / zoom - this.initialSize) / 2,\n    };\n\n    let startPoint;\n    if (positionEvent instanceof PointerEvent) {\n      startPoint = this.getNormalizedPointerEventCoords(positionEvent);\n    } else {\n      startPoint = {\n        x: width / zoom / 2,\n        y: height / zoom / 2,\n      };\n    }\n\n    // center around start point\n    startPoint = {\n      x: startPoint.x - this.initialSize / 2,\n      y: startPoint.y - this.initialSize / 2,\n    };\n\n    return {startPoint, endPoint};\n  }\n\n  private startPressAnimation(positionEvent?: Event) {\n    if (!this.mdRoot) {\n      return;\n    }\n\n    this.pressed = true;\n    this.growAnimation?.cancel();\n    this.determineRippleSize();\n    const {startPoint, endPoint} =\n      this.getTranslationCoordinates(positionEvent);\n    const translateStart = `${startPoint.x}px, ${startPoint.y}px`;\n    const translateEnd = `${endPoint.x}px, ${endPoint.y}px`;\n\n    this.growAnimation = this.mdRoot.animate(\n      {\n        top: [0, 0],\n        left: [0, 0],\n        height: [this.rippleSize, this.rippleSize],\n        width: [this.rippleSize, this.rippleSize],\n        transform: [\n          `translate(${translateStart}) scale(1)`,\n          `translate(${translateEnd}) scale(${this.rippleScale})`,\n        ],\n      },\n      {\n        pseudoElement: PRESS_PSEUDO,\n        duration: PRESS_GROW_MS,\n        easing: EASING.STANDARD,\n        fill: ANIMATION_FILL,\n      },\n    );\n  }\n\n  private async endPressAnimation() {\n    this.rippleStartEvent = undefined;\n    this.state = State.INACTIVE;\n    const animation = this.growAnimation;\n    let pressAnimationPlayState = Infinity;\n    if (typeof animation?.currentTime === 'number') {\n      pressAnimationPlayState = animation.currentTime;\n    } else if (animation?.currentTime) {\n      pressAnimationPlayState = animation.currentTime.to('ms').value;\n    }\n\n    if (pressAnimationPlayState >= MINIMUM_PRESS_MS) {\n      this.pressed = false;\n      return;\n    }\n\n    await new Promise((resolve) => {\n      setTimeout(resolve, MINIMUM_PRESS_MS - pressAnimationPlayState);\n    });\n\n    if (this.growAnimation !== animation) {\n      // A new press animation was started. The old animation was canceled and\n      // should not finish the pressed state.\n      return;\n    }\n\n    this.pressed = false;\n  }\n\n  /**\n   * Returns `true` if\n   *  - the ripple element is enabled\n   *  - the pointer is primary for the input type\n   *  - the pointer is the pointer that started the interaction, or will start\n   * the interaction\n   *  - the pointer is a touch, or the pointer state has the primary button\n   * held, or the pointer is hovering\n   */\n  private shouldReactToEvent(event: PointerEvent) {\n    if (this.disabled || !event.isPrimary) {\n      return false;\n    }\n\n    if (\n      this.rippleStartEvent &&\n      this.rippleStartEvent.pointerId !== event.pointerId\n    ) {\n      return false;\n    }\n\n    if (event.type === 'pointerenter' || event.type === 'pointerleave') {\n      return !this.isTouch(event);\n    }\n\n    const isPrimaryButton = event.buttons === 1;\n    return this.isTouch(event) || isPrimaryButton;\n  }\n\n  private isTouch({pointerType}: PointerEvent) {\n    return pointerType === 'touch';\n  }\n\n  /** @private */\n  async handleEvent(event: Event) {\n    if (FORCED_COLORS?.matches) {\n      // Skip event logic since the ripple is `display: none`.\n      return;\n    }\n\n    switch (event.type) {\n      case 'click':\n        this.handleClick();\n        break;\n      case 'contextmenu':\n        this.handleContextmenu();\n        break;\n      case 'pointercancel':\n        this.handlePointercancel(event as PointerEvent);\n        break;\n      case 'pointerdown':\n        await this.handlePointerdown(event as PointerEvent);\n        break;\n      case 'pointerenter':\n        this.handlePointerenter(event as PointerEvent);\n        break;\n      case 'pointerleave':\n        this.handlePointerleave(event as PointerEvent);\n        break;\n      case 'pointerup':\n        this.handlePointerup(event as PointerEvent);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private onControlChange(prev: HTMLElement | null, next: HTMLElement | null) {\n    if (isServer) return;\n\n    for (const event of EVENTS) {\n      prev?.removeEventListener(event, this);\n      next?.addEventListener(event, this);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content and markers.\n *\n * Note: The only difference between this and clearPart() is that this also\n * removes the part's start node. This means that the ChildPart must own its\n * start node, ie it must be a marker node specifically for this part and not an\n * anchor from surrounding content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$clear();\n  part._$startNode.remove();\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {\n  html as coreHtml,\n  svg as coreSvg,\n  mathml as coreMathml,\n  TemplateResult,\n} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * an attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg | typeof coreMathml) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const mathml = withStatic(coreMathml);\n"],"names":["ATTACHABLE_CONTROLLER","Symbol","FOR_ATTRIBUTE_OBSERVER","isServer","MutationObserver","records","record","target","hostConnected","AttachableController","htmlFor","this","host","getAttribute","removeAttribute","setAttribute","control","hasAttribute","isConnected","getRootNode","querySelector","currentControl","parentElement","attach","detach","setCurrentControl","hostDisconnected","onControlChange","constructor","addController","observe","attributeFilter","EASING","STANDARD","STANDARD_ACCELERATE","STANDARD_DECELERATE","EMPHASIZED","EMPHASIZED_ACCELERATE","EMPHASIZED_DECELERATE","createAnimationSignal","animationAbortController","start","abort","AbortController","signal","finish","styles","css","State","EVENTS","FORCED_COLORS","window","matchMedia","Ripple","LitElement","attachableController","connectedCallback","super","render","classes","hovered","pressed","html","classMap","update","changedProps","has","disabled","handlePointerenter","event","shouldReactToEvent","handlePointerleave","state","INACTIVE","endPressAnimation","handlePointerup","HOLDING","TOUCH_DELAY","WAITING_FOR_CLICK","startPressAnimation","rippleStartEvent","handlePointerdown","isTouch","Promise","resolve","setTimeout","handleClick","handlePointercancel","handleContextmenu","determineRippleSize","height","width","getBoundingClientRect","maxDim","Math","max","softEdgeSize","zoom","currentCSSZoom","initialSize","floor","maxRadius","sqrt","maybeZoomedScale","rippleScale","rippleSize","getNormalizedPointerEventCoords","pointerEvent","scrollX","scrollY","left","top","documentX","documentY","pageX","pageY","x","y","getTranslationCoordinates","positionEvent","endPoint","startPoint","PointerEvent","mdRoot","growAnimation","cancel","translateStart","translateEnd","animate","transform","pseudoElement","duration","easing","fill","undefined","animation","pressAnimationPlayState","Infinity","currentTime","to","value","isPrimary","pointerId","type","isPrimaryButton","buttons","pointerType","handleEvent","matches","prev","next","removeEventListener","addEventListener","bind","__decorate","property","Boolean","reflect","query","I","t","o","i","e","_$litType$","l","h","f","strings","r","document","createComment","s","n","_$AA","parentNode","_$AB","insertBefore","d","options","nextSibling","_$AM","_$AQ","_$AP","_$AU","v","_$AI","u","m","_$AH","p","M","_$AR","remove","a","_$litStatic$","reduce","Error","Map","length","c","$","push","join","get","raw","set"],"mappings":"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"}