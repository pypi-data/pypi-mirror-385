{"version":3,"file":"615.c39601ca4d26dcf6.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/entity/state_active.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/entity/state_color.ts","webpack://knx-frontend/./homeassistant-frontend/src/resources/css-variables.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/entity/color/battery_color.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/group.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/string/slugify.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/style/icon_color_css.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/entity/state-badge.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/camera.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/climate.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { isUnavailableState, OFF, UNAVAILABLE } from \"../../data/entity\";\nimport { computeDomain } from \"./compute_domain\";\n\nexport function stateActive(stateObj: HassEntity, state?: string): boolean {\n  const domain = computeDomain(stateObj.entity_id);\n  const compareState = state !== undefined ? state : stateObj?.state;\n\n  if ([\"button\", \"event\", \"input_button\", \"scene\"].includes(domain)) {\n    return compareState !== UNAVAILABLE;\n  }\n\n  if (isUnavailableState(compareState)) {\n    return false;\n  }\n\n  // The \"off\" check is relevant for most domains, but there are exceptions\n  // such as \"alert\" where \"off\" is still a somewhat active state and\n  // therefore gets a custom color and \"idle\" is instead the state that\n  // matches what most other domains consider inactive.\n  if (compareState === OFF && domain !== \"alert\") {\n    return false;\n  }\n\n  // Custom cases\n  switch (domain) {\n    case \"alarm_control_panel\":\n      return compareState !== \"disarmed\";\n    case \"alert\":\n      // \"on\" and \"off\" are active, as \"off\" just means alert was acknowledged but is still active\n      return compareState !== \"idle\";\n    case \"cover\":\n      return compareState !== \"closed\";\n    case \"device_tracker\":\n    case \"person\":\n      return compareState !== \"not_home\";\n    case \"lawn_mower\":\n      return [\"mowing\", \"error\"].includes(compareState);\n    case \"lock\":\n      return compareState !== \"locked\";\n    case \"media_player\":\n      return compareState !== \"standby\";\n    case \"vacuum\":\n      return ![\"idle\", \"docked\", \"paused\"].includes(compareState);\n    case \"valve\":\n      return compareState !== \"closed\";\n    case \"plant\":\n      return compareState === \"problem\";\n    case \"group\":\n      return [\"on\", \"home\", \"open\", \"locked\", \"problem\"].includes(compareState);\n    case \"timer\":\n      return compareState === \"active\";\n    case \"camera\":\n      return compareState === \"streaming\";\n  }\n\n  return true;\n}\n","/** Return a color representing a state. */\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport type { GroupEntity } from \"../../data/group\";\nimport { computeGroupDomain } from \"../../data/group\";\nimport { computeCssVariable } from \"../../resources/css-variables\";\nimport { slugify } from \"../string/slugify\";\nimport { batteryStateColorProperty } from \"./color/battery_color\";\nimport { computeDomain } from \"./compute_domain\";\nimport { stateActive } from \"./state_active\";\n\nconst STATE_COLORED_DOMAIN = new Set([\n  \"alarm_control_panel\",\n  \"alert\",\n  \"automation\",\n  \"binary_sensor\",\n  \"calendar\",\n  \"camera\",\n  \"climate\",\n  \"cover\",\n  \"device_tracker\",\n  \"fan\",\n  \"group\",\n  \"humidifier\",\n  \"input_boolean\",\n  \"lawn_mower\",\n  \"light\",\n  \"lock\",\n  \"media_player\",\n  \"person\",\n  \"plant\",\n  \"remote\",\n  \"schedule\",\n  \"script\",\n  \"siren\",\n  \"sun\",\n  \"switch\",\n  \"timer\",\n  \"update\",\n  \"vacuum\",\n  \"valve\",\n  \"water_heater\",\n]);\n\nexport const stateColorCss = (stateObj: HassEntity, state?: string) => {\n  const compareState = state !== undefined ? state : stateObj?.state;\n  if (compareState === UNAVAILABLE) {\n    return `var(--state-unavailable-color)`;\n  }\n\n  const properties = stateColorProperties(stateObj, state);\n  if (properties) {\n    return computeCssVariable(properties);\n  }\n\n  return undefined;\n};\n\nexport const domainStateColorProperties = (\n  domain: string,\n  stateObj: HassEntity,\n  state?: string\n): string[] => {\n  const compareState = state !== undefined ? state : stateObj.state;\n  const active = stateActive(stateObj, state);\n\n  return domainColorProperties(\n    domain,\n    stateObj.attributes.device_class,\n    compareState,\n    active\n  );\n};\n\nexport const domainColorProperties = (\n  domain: string,\n  deviceClass: string | undefined,\n  state: string,\n  active: boolean\n) => {\n  const properties: string[] = [];\n\n  const stateKey = slugify(state, \"_\");\n  const activeKey = active ? \"active\" : \"inactive\";\n\n  if (deviceClass) {\n    properties.push(`--state-${domain}-${deviceClass}-${stateKey}-color`);\n  }\n\n  properties.push(\n    `--state-${domain}-${stateKey}-color`,\n    `--state-${domain}-${activeKey}-color`,\n    `--state-${activeKey}-color`\n  );\n\n  return properties;\n};\n\nexport const stateColorProperties = (\n  stateObj: HassEntity,\n  state?: string\n): string[] | undefined => {\n  const compareState = state !== undefined ? state : stateObj?.state;\n  const domain = computeDomain(stateObj.entity_id);\n  const dc = stateObj.attributes.device_class;\n\n  // Special rules for battery coloring\n  if (domain === \"sensor\" && dc === \"battery\") {\n    const property = batteryStateColorProperty(compareState);\n    if (property) {\n      return [property];\n    }\n  }\n\n  // Special rules for group coloring\n  if (domain === \"group\") {\n    const groupDomain = computeGroupDomain(stateObj as GroupEntity);\n    if (groupDomain && STATE_COLORED_DOMAIN.has(groupDomain)) {\n      return domainStateColorProperties(groupDomain, stateObj, state);\n    }\n  }\n\n  if (STATE_COLORED_DOMAIN.has(domain)) {\n    return domainStateColorProperties(domain, stateObj, state);\n  }\n\n  return undefined;\n};\n\nexport const stateColorBrightness = (stateObj: HassEntity): string => {\n  if (\n    stateObj.attributes.brightness &&\n    computeDomain(stateObj.entity_id) !== \"plant\"\n  ) {\n    // lowest brightness will be around 50% (that's pretty dark)\n    const brightness = stateObj.attributes.brightness;\n    return `brightness(${(brightness + 245) / 5}%)`;\n  }\n  return \"\";\n};\n","export function computeCssVariable(\n  props: string | string[]\n): string | undefined {\n  if (Array.isArray(props)) {\n    return props\n      .reverse()\n      .reduce<\n        string | undefined\n      >((str, variable) => `var(${variable}${str ? `, ${str}` : \"\"})`, undefined);\n  }\n  return `var(${props})`;\n}\n\nexport function computeCssValue(\n  prop: string | string[],\n  computedStyles: CSSStyleDeclaration\n): string | undefined {\n  if (Array.isArray(prop)) {\n    for (const property of prop) {\n      const value = computeCssValue(property, computedStyles);\n      if (value) return value;\n    }\n    return undefined;\n  }\n\n  if (!prop.endsWith(\"-color\")) {\n    return undefined;\n  }\n  return computedStyles.getPropertyValue(prop).trim() || undefined;\n}\n","export const batteryStateColorProperty = (\n  state: string\n): string | undefined => {\n  const value = Number(state);\n  if (isNaN(value)) {\n    return undefined;\n  }\n  if (value >= 70) {\n    return \"--state-sensor-battery-high-color\";\n  }\n  if (value >= 30) {\n    return \"--state-sensor-battery-medium-color\";\n  }\n  return \"--state-sensor-battery-low-color\";\n};\n","import type {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\n\ninterface GroupEntityAttributes extends HassEntityAttributeBase {\n  entity_id: string[];\n  order: number;\n  auto?: boolean;\n  view?: boolean;\n  control?: \"hidden\";\n}\nexport interface GroupEntity extends HassEntityBase {\n  attributes: GroupEntityAttributes;\n}\n\nexport const computeGroupDomain = (\n  stateObj: GroupEntity\n): string | undefined => {\n  const entityIds = stateObj.attributes.entity_id || [];\n  const uniqueDomains = [\n    ...new Set(entityIds.map((entityId) => computeDomain(entityId))),\n  ];\n  return uniqueDomains.length === 1 ? uniqueDomains[0] : undefined;\n};\n","// https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\nexport const slugify = (value: string, delimiter = \"_\") => {\n  const a =\n    \"àáâäæãåāăąабçćčđďдèéêëēėęěеёэфğǵгḧхîïíīįìıİийкłлḿмñńǹňнôöòóœøōõőоṕпŕřрßśšşșсťțтûüùúūǘůűųувẃẍÿýыžźżз·\";\n  const b = `aaaaaaaaaaabcccdddeeeeeeeeeeefggghhiiiiiiiiijkllmmnnnnnoooooooooopprrrsssssstttuuuuuuuuuuvwxyyyzzzz${delimiter}`;\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n  const complex_cyrillic = {\n    ж: \"zh\",\n    х: \"kh\",\n    ц: \"ts\",\n    ч: \"ch\",\n    ш: \"sh\",\n    щ: \"shch\",\n    ю: \"iu\",\n    я: \"ia\",\n  };\n\n  let slugified;\n\n  if (value === \"\") {\n    slugified = \"\";\n  } else {\n    slugified = value\n      .toString()\n      .toLowerCase()\n      .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n      .replace(/[а-я]/g, (c) => complex_cyrillic[c] || \"\") // Replace some cyrillic characters\n      .replace(/(\\d),(?=\\d)/g, \"$1\") // Remove Commas between numbers\n      .replace(/[^a-z0-9]+/g, delimiter) // Replace all non-word characters\n      .replace(new RegExp(`(${delimiter})\\\\1+`, \"g\"), \"$1\") // Replace multiple delimiters with single delimiter\n      .replace(new RegExp(`^${delimiter}+`), \"\") // Trim delimiter from start of text\n      .replace(new RegExp(`${delimiter}+$`), \"\"); // Trim delimiter from end of text\n\n    if (slugified === \"\") {\n      slugified = \"unknown\";\n    }\n  }\n\n  return slugified;\n};\n","import { css } from \"lit\";\n\nexport const iconColorCSS = css`\n  ha-state-icon[data-domain=\"alarm_control_panel\"][data-state=\"pending\"],\n  ha-state-icon[data-domain=\"alarm_control_panel\"][data-state=\"arming\"],\n  ha-state-icon[data-domain=\"alarm_control_panel\"][data-state=\"triggered\"],\n  ha-state-icon[data-domain=\"lock\"][data-state=\"jammed\"] {\n    animation: pulse 1s infinite;\n  }\n\n  @keyframes pulse {\n    0% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  /* Color the icon if unavailable */\n  ha-state-icon[data-state=\"unavailable\"] {\n    color: var(--state-unavailable-color);\n  }\n`;\n","import { mdiAlert } from \"@mdi/js\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport {\n  stateColorBrightness,\n  stateColorCss,\n} from \"../../common/entity/state_color\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\nimport { cameraUrlWithWidthHeight } from \"../../data/camera\";\nimport { CLIMATE_HVAC_ACTION_TO_MODE } from \"../../data/climate\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-state-icon\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public overrideIcon?: string;\n\n  @property({ attribute: false }) public overrideImage?: string;\n\n  // Cannot be a boolean attribute because undefined is treated different than\n  // false.  When it is undefined, state is still colored for light entities.\n  @property({ attribute: false }) public stateColor?: boolean;\n\n  @property() public color?: string;\n\n  // @todo Consider reworking to eliminate need for attribute since it is manipulated internally\n  @property({ type: Boolean, reflect: true }) public icon = true;\n\n  @state() private _iconStyle: Record<string, string | undefined> = {};\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    if (\n      this.hasUpdated &&\n      this.overrideImage === undefined &&\n      (this.stateObj?.attributes.entity_picture ||\n        this.stateObj?.attributes.entity_picture_local)\n    ) {\n      // Update image on connect, so we get new auth token\n      this.requestUpdate(\"stateObj\");\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (\n      this.overrideImage === undefined &&\n      (this.stateObj?.attributes.entity_picture ||\n        this.stateObj?.attributes.entity_picture_local)\n    ) {\n      // Clear image on disconnect so we don't fetch with old auth when we reconnect\n      this.style.backgroundImage = \"\";\n    }\n  }\n\n  private get _stateColor() {\n    const domain = this.stateObj\n      ? computeStateDomain(this.stateObj)\n      : undefined;\n    return this.stateColor ?? domain === \"light\";\n  }\n\n  protected render() {\n    const stateObj = this.stateObj;\n\n    // We either need a `stateObj` or one override\n    if (!stateObj && !this.overrideIcon && !this.overrideImage) {\n      return html`<div class=\"missing\">\n        <ha-svg-icon .path=${mdiAlert}></ha-svg-icon>\n      </div>`;\n    }\n\n    const cls = this.getClass();\n    if (cls) {\n      cls.forEach((toSet, className) => {\n        if (!toSet) {\n          this.classList.remove(className);\n        } else {\n          this.classList.add(className);\n        }\n      });\n    }\n\n    if (!this.icon) {\n      return nothing;\n    }\n\n    const domain = stateObj ? computeStateDomain(stateObj) : undefined;\n\n    return html`<ha-state-icon\n      .hass=${this.hass}\n      style=${styleMap(this._iconStyle)}\n      data-domain=${ifDefined(domain)}\n      data-state=${ifDefined(stateObj?.state)}\n      .icon=${this.overrideIcon}\n      .stateObj=${stateObj}\n    ></ha-state-icon>`;\n  }\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (\n      !changedProps.has(\"stateObj\") &&\n      !changedProps.has(\"overrideImage\") &&\n      !changedProps.has(\"overrideIcon\") &&\n      !changedProps.has(\"stateColor\") &&\n      !changedProps.has(\"color\")\n    ) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: Record<string, string> = {};\n    let backgroundImage = \"\";\n\n    this.icon = true;\n\n    if (stateObj) {\n      const domain = computeDomain(stateObj.entity_id);\n      if (this.overrideImage === undefined) {\n        // hide icon if we have entity picture\n        if (\n          (stateObj.attributes.entity_picture_local ||\n            stateObj.attributes.entity_picture) &&\n          !this.overrideIcon\n        ) {\n          let imageUrl =\n            stateObj.attributes.entity_picture_local ||\n            stateObj.attributes.entity_picture;\n          if (this.hass) {\n            imageUrl = this.hass.hassUrl(imageUrl);\n          }\n          if (domain === \"camera\") {\n            imageUrl = cameraUrlWithWidthHeight(imageUrl, 80, 80);\n          }\n          backgroundImage = `url(${imageUrl})`;\n          this.icon = false;\n        } else if (this.color) {\n          // Externally provided overriding color wins over state color\n          iconStyle.color = this.color;\n        } else if (this._stateColor) {\n          const color = stateColorCss(stateObj);\n          if (color) {\n            iconStyle.color = color;\n          }\n          if (stateObj.attributes.rgb_color) {\n            iconStyle.color = `rgb(${stateObj.attributes.rgb_color.join(\",\")})`;\n          }\n          if (stateObj.attributes.brightness) {\n            const brightness = stateObj.attributes.brightness;\n            if (typeof brightness !== \"number\") {\n              const errorMessage = `Type error: state-badge expected number, but type of ${\n                stateObj.entity_id\n              }.attributes.brightness is ${typeof brightness} (${brightness})`;\n              // eslint-disable-next-line\n              console.warn(errorMessage);\n            }\n            iconStyle.filter = stateColorBrightness(stateObj);\n          }\n          if (stateObj.attributes.hvac_action) {\n            const hvacAction = stateObj.attributes.hvac_action;\n            if (hvacAction in CLIMATE_HVAC_ACTION_TO_MODE) {\n              iconStyle.color = stateColorCss(\n                stateObj,\n                CLIMATE_HVAC_ACTION_TO_MODE[hvacAction]\n              )!;\n            } else {\n              delete iconStyle.color;\n            }\n          }\n        }\n      } else if (this.overrideImage) {\n        let imageUrl = this.overrideImage;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        backgroundImage = `url(${imageUrl})`;\n        this.icon = false;\n      }\n    }\n\n    this._iconStyle = iconStyle;\n    this.style.backgroundImage = backgroundImage;\n  }\n\n  protected getClass() {\n    const cls = new Map(\n      [\"has-no-radius\", \"has-media-image\", \"has-image\"].map((_cls) => [\n        _cls,\n        false,\n      ])\n    );\n    if (this.stateObj) {\n      const domain = computeDomain(this.stateObj.entity_id);\n      if (domain === \"update\") {\n        cls.set(\"has-no-radius\", true);\n      } else if (domain === \"media_player\" || domain === \"camera\") {\n        cls.set(\"has-media-image\", true);\n      } else if (this.style.backgroundImage !== \"\") {\n        cls.set(\"has-image\", true);\n      }\n    }\n    return cls;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      iconColorCSS,\n      css`\n        :host {\n          position: relative;\n          display: inline-flex;\n          width: 40px;\n          color: var(--state-icon-color);\n          border-radius: var(--state-badge-border-radius, 50%);\n          height: 40px;\n          background-size: cover;\n          box-sizing: border-box;\n          --state-inactive-color: initial;\n          align-items: center;\n          justify-content: center;\n        }\n        :host(.has-image) {\n          border-radius: var(--state-badge-with-image-border-radius, 50%);\n        }\n        :host(.has-media-image) {\n          border-radius: var(--state-badge-with-media-image-border-radius, 8%);\n        }\n        :host(.has-no-radius) {\n          border-radius: 0;\n        }\n        :host(:focus) {\n          outline: none;\n        }\n        :host(:not([icon]):focus) {\n          border: 2px solid var(--divider-color);\n        }\n        :host([icon]:focus) {\n          background: var(--divider-color);\n        }\n        ha-state-icon {\n          transition:\n            color 0.3s ease-in-out,\n            filter 0.3s ease-in-out;\n        }\n        .missing {\n          color: #fce588;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport {\n  DEFAULT_DOMAIN_ICON,\n  entityIcon,\n  FALLBACK_DOMAIN_ICONS,\n} from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FALLBACK_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import type {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\nimport { timeCacheEntityPromiseFunc } from \"../common/util/time-cache-entity-promise-func\";\nimport type { HomeAssistant } from \"../types\";\nimport { getSignedPath } from \"./auth\";\n\nexport const CAMERA_ORIENTATIONS = [1, 2, 3, 4, 6, 8];\nexport const CAMERA_SUPPORT_ON_OFF = 1;\nexport const CAMERA_SUPPORT_STREAM = 2;\n\nexport const STREAM_TYPE_HLS = \"hls\";\nexport const STREAM_TYPE_WEB_RTC = \"web_rtc\";\n\nexport type StreamType = typeof STREAM_TYPE_HLS | typeof STREAM_TYPE_WEB_RTC;\n\ninterface CameraEntityAttributes extends HassEntityAttributeBase {\n  model_name: string;\n  access_token: string;\n  brand: string;\n  motion_detection: boolean;\n  frontend_stream_type: string;\n}\n\nexport interface CameraEntity extends HassEntityBase {\n  attributes: CameraEntityAttributes;\n}\n\nexport interface CameraPreferences {\n  preload_stream: boolean;\n  orientation: number;\n}\n\nexport interface CameraThumbnail {\n  content_type: string;\n  content: string;\n}\n\nexport interface Stream {\n  url: string;\n}\n\nexport type WebRtcOfferEvent =\n  | WebRtcId\n  | WebRtcAnswer\n  | WebRtcCandidate\n  | WebRtcError;\n\nexport interface WebRtcId {\n  type: \"session\";\n  session_id: string;\n}\n\nexport interface WebRtcAnswer {\n  type: \"answer\";\n  answer: string;\n}\n\nexport interface WebRtcCandidate {\n  type: \"candidate\";\n  candidate: RTCIceCandidateInit;\n}\n\nexport interface WebRtcError {\n  type: \"error\";\n  code: string;\n  message: string;\n}\n\nexport interface WebRtcOfferResponse {\n  id: string;\n}\n\nexport const cameraUrlWithWidthHeight = (\n  base_url: string,\n  width: number,\n  height: number\n) => `${base_url}&width=${width}&height=${height}`;\n\nexport const computeMJPEGStreamUrl = (entity: CameraEntity) =>\n  `/api/camera_proxy_stream/${entity.entity_id}?token=${entity.attributes.access_token}`;\n\nexport const fetchThumbnailUrlWithCache = async (\n  hass: HomeAssistant,\n  entityId: string,\n  width: number,\n  height: number\n) => {\n  const base_url = await timeCacheEntityPromiseFunc(\n    \"_cameraTmbUrl\",\n    9000,\n    fetchThumbnailUrl,\n    hass,\n    entityId\n  );\n  return cameraUrlWithWidthHeight(base_url, width, height);\n};\n\nexport const fetchThumbnailUrl = async (\n  hass: HomeAssistant,\n  entityId: string\n) => {\n  const path = await getSignedPath(hass, `/api/camera_proxy/${entityId}`);\n  return hass.hassUrl(path.path);\n};\n\nexport const fetchStreamUrl = async (\n  hass: HomeAssistant,\n  entityId: string,\n  format?: \"hls\"\n) => {\n  const data = {\n    type: \"camera/stream\",\n    entity_id: entityId,\n  };\n  if (format) {\n    // @ts-ignore\n    data.format = format;\n  }\n  const stream = await hass.callWS<Stream>(data);\n  stream.url = hass.hassUrl(stream.url);\n  return stream;\n};\n\nexport const webRtcOffer = (\n  hass: HomeAssistant,\n  entity_id: string,\n  offer: string,\n  callback: (event: WebRtcOfferEvent) => void\n) =>\n  hass.connection.subscribeMessage<WebRtcOfferEvent>(callback, {\n    type: \"camera/webrtc/offer\",\n    entity_id,\n    offer,\n  });\n\nexport const addWebRtcCandidate = (\n  hass: HomeAssistant,\n  entity_id: string,\n  session_id: string,\n  candidate: RTCIceCandidateInit\n) =>\n  hass.callWS({\n    type: \"camera/webrtc/candidate\",\n    entity_id,\n    session_id,\n    candidate: candidate,\n  });\n\nexport const fetchCameraPrefs = (hass: HomeAssistant, entityId: string) =>\n  hass.callWS<CameraPreferences>({\n    type: \"camera/get_prefs\",\n    entity_id: entityId,\n  });\n\ntype ValueOf<T extends any[]> = T[number];\nexport const updateCameraPrefs = (\n  hass: HomeAssistant,\n  entityId: string,\n  prefs: {\n    preload_stream?: boolean;\n    orientation?: ValueOf<typeof CAMERA_ORIENTATIONS>;\n  }\n) =>\n  hass.callWS<CameraPreferences>({\n    type: \"camera/update_prefs\",\n    entity_id: entityId,\n    ...prefs,\n  });\n\nconst CAMERA_MEDIA_SOURCE_PREFIX = \"media-source://camera/\";\n\nexport const isCameraMediaSource = (mediaContentId: string) =>\n  mediaContentId.startsWith(CAMERA_MEDIA_SOURCE_PREFIX);\n\nexport const getEntityIdFromCameraMediaSource = (mediaContentId: string) =>\n  mediaContentId.substring(CAMERA_MEDIA_SOURCE_PREFIX.length);\n\nexport interface CameraCapabilities {\n  frontend_stream_types: StreamType[];\n}\n\nexport const fetchCameraCapabilities = async (\n  hass: HomeAssistant,\n  entity_id: string\n) =>\n  hass.callWS<CameraCapabilities>({ type: \"camera/capabilities\", entity_id });\n\nexport interface WebRTCClientConfiguration {\n  configuration: RTCConfiguration;\n  dataChannel?: string;\n}\n\nexport const fetchWebRtcClientConfiguration = async (\n  hass: HomeAssistant,\n  entityId: string\n) =>\n  hass.callWS<WebRTCClientConfiguration>({\n    type: \"camera/webrtc/get_client_config\",\n    entity_id: entityId,\n  });\n","import {\n  mdiFan,\n  mdiFire,\n  mdiPower,\n  mdiSnowflake,\n  mdiSunSnowflakeVariant,\n  mdiThermostat,\n  mdiThermostatAuto,\n  mdiWaterPercent,\n} from \"@mdi/js\";\nimport type {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\n\nexport const HVAC_MODES = [\n  \"auto\",\n  \"heat_cool\",\n  \"heat\",\n  \"cool\",\n  \"dry\",\n  \"fan_only\",\n  \"off\",\n] as const;\n\nexport type HvacMode = (typeof HVAC_MODES)[number];\n\nexport const CLIMATE_PRESET_NONE = \"none\";\n\nexport type HvacAction =\n  | \"cooling\"\n  | \"defrosting\"\n  | \"drying\"\n  | \"fan\"\n  | \"heating\"\n  | \"idle\"\n  | \"off\"\n  | \"preheating\";\n\nexport type ClimateEntity = HassEntityBase & {\n  attributes: HassEntityAttributeBase & {\n    hvac_mode: HvacMode;\n    hvac_modes: HvacMode[];\n    hvac_action?: HvacAction;\n    current_temperature: number;\n    min_temp: number;\n    max_temp: number;\n    temperature: number;\n    target_temp_step?: number;\n    target_temp_high?: number;\n    target_temp_low?: number;\n    humidity?: number;\n    current_humidity?: number;\n    target_humidity_low?: number;\n    target_humidity_high?: number;\n    min_humidity?: number;\n    max_humidity?: number;\n    fan_mode?: string;\n    fan_modes?: string[];\n    preset_mode?: string;\n    preset_modes?: string[];\n    swing_mode?: string;\n    swing_modes?: string[];\n    swing_horizontal_mode?: string;\n    swing_horizontal_modes?: string[];\n    aux_heat?: \"on\" | \"off\";\n  };\n};\n\nexport const enum ClimateEntityFeature {\n  TARGET_TEMPERATURE = 1,\n  TARGET_TEMPERATURE_RANGE = 2,\n  TARGET_HUMIDITY = 4,\n  FAN_MODE = 8,\n  PRESET_MODE = 16,\n  SWING_MODE = 32,\n  AUX_HEAT = 64,\n  TURN_OFF = 128,\n  TURN_ON = 256,\n  SWING_HORIZONTAL_MODE = 512,\n}\n\nconst hvacModeOrdering = HVAC_MODES.reduce(\n  (order, mode, index) => {\n    order[mode] = index;\n    return order;\n  },\n  {} as Record<HvacMode, number>\n);\n\nexport const compareClimateHvacModes = (mode1: HvacMode, mode2: HvacMode) =>\n  hvacModeOrdering[mode1] - hvacModeOrdering[mode2];\n\nexport const CLIMATE_HVAC_ACTION_TO_MODE: Record<HvacAction, HvacMode> = {\n  cooling: \"cool\",\n  defrosting: \"heat\",\n  drying: \"dry\",\n  fan: \"fan_only\",\n  heating: \"heat\",\n  idle: \"off\",\n  off: \"off\",\n  preheating: \"heat\",\n};\n\nexport const CLIMATE_HVAC_MODE_ICONS: Record<HvacMode, string> = {\n  cool: mdiSnowflake,\n  dry: mdiWaterPercent,\n  fan_only: mdiFan,\n  auto: mdiThermostatAuto,\n  heat: mdiFire,\n  off: mdiPower,\n  heat_cool: mdiSunSnowflakeVariant,\n};\n\nexport const climateHvacModeIcon = (mode: string) =>\n  CLIMATE_HVAC_MODE_ICONS[mode] || mdiThermostat;\n"],"names":["stateActive","stateObj","state","domain","computeDomain","entity_id","compareState","undefined","includes","UNAVAILABLE","isUnavailableState","OFF","STATE_COLORED_DOMAIN","Set","stateColorCss","properties","stateColorProperties","props","Array","isArray","reverse","reduce","str","variable","domainStateColorProperties","active","domainColorProperties","attributes","device_class","deviceClass","stateKey","slugify","activeKey","push","dc","property","value","Number","isNaN","batteryStateColorProperty","groupDomain","entityIds","uniqueDomains","map","entityId","length","computeGroupDomain","has","stateColorBrightness","brightness","delimiter","a","b","p","RegExp","split","join","complex_cyrillic","ж","х","ц","ч","ш","щ","ю","я","slugified","toString","toLowerCase","replace","c","charAt","indexOf","iconColorCSS","css","StateBadge","LitElement","connectedCallback","super","hasUpdated","overrideImage","entity_picture","entity_picture_local","this","requestUpdate","disconnectedCallback","style","backgroundImage","_stateColor","computeStateDomain","stateColor","render","overrideIcon","html","mdiAlert","cls","getClass","forEach","toSet","className","classList","add","remove","icon","nothing","hass","styleMap","_iconStyle","ifDefined","willUpdate","changedProps","iconStyle","color","rgb_color","errorMessage","console","warn","filter","hvac_action","hvacAction","CLIMATE_HVAC_ACTION_TO_MODE","imageUrl","hassUrl","cameraUrlWithWidthHeight","Map","_cls","set","styles","args","attribute","type","Boolean","reflect","customElements","define","HaStateIcon","entities","_renderFallback","entityIcon","stateValue","then","icn","until","FALLBACK_DOMAIN_ICONS","DEFAULT_DOMAIN_ICON","base_url","width","height","fetchStreamUrl","format","data","stream","callWS","url","CLIMATE_PRESET_NONE","order","mode","index","cooling","defrosting","drying","fan","heating","idle","off","preheating"],"mappings":"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"}