{"version":3,"file":"4175.26b3fb66b3348501.js","sources":["webpack://knx-frontend/./node_modules/dialog-polyfill/dist/dialog-polyfill.esm.js"],"sourcesContent":["// nb. This is for IE10 and lower _only_.\nvar supportCustomEvent = window.CustomEvent;\nif (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n  supportCustomEvent = function CustomEvent(event, x) {\n    x = x || {};\n    var ev = document.createEvent('CustomEvent');\n    ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n    return ev;\n  };\n  supportCustomEvent.prototype = window.Event.prototype;\n}\n\n/**\n * Dispatches the passed event to both an \"on<type>\" handler as well as via the\n * normal dispatch operation. Does not bubble.\n *\n * @param {!EventTarget} target\n * @param {!Event} event\n * @return {boolean}\n */\nfunction safeDispatchEvent(target, event) {\n  var check = 'on' + event.type.toLowerCase();\n  if (typeof target[check] === 'function') {\n    target[check](event);\n  }\n  return target.dispatchEvent(event);\n}\n\n/**\n * @param {Element} el to check for stacking context\n * @return {boolean} whether this el or its parents creates a stacking context\n */\nfunction createsStackingContext(el) {\n  while (el && el !== document.body) {\n    var s = window.getComputedStyle(el);\n    var invalid = function(k, ok) {\n      return !(s[k] === undefined || s[k] === ok);\n    };\n\n    if (s.opacity < 1 ||\n        invalid('zIndex', 'auto') ||\n        invalid('transform', 'none') ||\n        invalid('mixBlendMode', 'normal') ||\n        invalid('filter', 'none') ||\n        invalid('perspective', 'none') ||\n        s['isolation'] === 'isolate' ||\n        s.position === 'fixed' ||\n        s.webkitOverflowScrolling === 'touch') {\n      return true;\n    }\n    el = el.parentElement;\n  }\n  return false;\n}\n\n/**\n * Finds the nearest <dialog> from the passed element.\n *\n * @param {Element} el to search from\n * @return {HTMLDialogElement} dialog found\n */\nfunction findNearestDialog(el) {\n  while (el) {\n    if (el.localName === 'dialog') {\n      return /** @type {HTMLDialogElement} */ (el);\n    }\n    if (el.parentElement) {\n      el = el.parentElement;\n    } else if (el.parentNode) {\n      el = el.parentNode.host;\n    } else {\n      el = null;\n    }\n  }\n  return null;\n}\n\n/**\n * Blur the specified element, as long as it's not the HTML body element.\n * This works around an IE9/10 bug - blurring the body causes Windows to\n * blur the whole application.\n *\n * @param {Element} el to blur\n */\nfunction safeBlur(el) {\n  // Find the actual focused element when the active element is inside a shadow root\n  while (el && el.shadowRoot && el.shadowRoot.activeElement) {\n    el = el.shadowRoot.activeElement;\n  }\n\n  if (el && el.blur && el !== document.body) {\n    el.blur();\n  }\n}\n\n/**\n * @param {!NodeList} nodeList to search\n * @param {Node} node to find\n * @return {boolean} whether node is inside nodeList\n */\nfunction inNodeList(nodeList, node) {\n  for (var i = 0; i < nodeList.length; ++i) {\n    if (nodeList[i] === node) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {HTMLFormElement} el to check\n * @return {boolean} whether this form has method=\"dialog\"\n */\nfunction isFormMethodDialog(el) {\n  if (!el || !el.hasAttribute('method')) {\n    return false;\n  }\n  return el.getAttribute('method').toLowerCase() === 'dialog';\n}\n\n/**\n * @param {!DocumentFragment|!Element} hostElement\n * @return {?Element}\n */\nfunction findFocusableElementWithin(hostElement) {\n  // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n  // alternative involves stepping through and trying to focus everything.\n  var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n  var query = opts.map(function(el) {\n    return el + ':not([disabled])';\n  });\n  // TODO(samthor): tabindex values that are not numeric are not focusable.\n  query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n  var target = hostElement.querySelector(query.join(', '));\n\n  if (!target && 'attachShadow' in Element.prototype) {\n    // If we haven't found a focusable target, see if the host element contains an element\n    // which has a shadowRoot.\n    // Recursively search for the first focusable item in shadow roots.\n    var elems = hostElement.querySelectorAll('*');\n    for (var i = 0; i < elems.length; i++) {\n      if (elems[i].tagName && elems[i].shadowRoot) {\n        target = findFocusableElementWithin(elems[i].shadowRoot);\n        if (target) {\n          break;\n        }\n      }\n    }\n  }\n  return target;\n}\n\n/**\n * Determines if an element is attached to the DOM.\n * @param {Element} element to check\n * @return {boolean} whether the element is in DOM\n */\nfunction isConnected(element) {\n  return element.isConnected || document.body.contains(element);\n}\n\n/**\n * @param {!Event} event\n * @return {?Element}\n */\nfunction findFormSubmitter(event) {\n  if (event.submitter) {\n    return event.submitter;\n  }\n\n  var form = event.target;\n  if (!(form instanceof HTMLFormElement)) {\n    return null;\n  }\n\n  var submitter = dialogPolyfill.formSubmitter;\n  if (!submitter) {\n    var target = event.target;\n    var root = ('getRootNode' in target && target.getRootNode() || document);\n    submitter = root.activeElement;\n  }\n\n  if (!submitter || submitter.form !== form) {\n    return null;\n  }\n  return submitter;\n}\n\n/**\n * @param {!Event} event\n */\nfunction maybeHandleSubmit(event) {\n  if (event.defaultPrevented) {\n    return;\n  }\n  var form = /** @type {!HTMLFormElement} */ (event.target);\n\n  // We'd have a value if we clicked on an imagemap.\n  var value = dialogPolyfill.imagemapUseValue;\n  var submitter = findFormSubmitter(event);\n  if (value === null && submitter) {\n    value = submitter.value;\n  }\n\n  // There should always be a dialog as this handler is added specifically on them, but check just\n  // in case.\n  var dialog = findNearestDialog(form);\n  if (!dialog) {\n    return;\n  }\n\n  // Prefer formmethod on the button.\n  var formmethod = submitter && submitter.getAttribute('formmethod') || form.getAttribute('method');\n  if (formmethod !== 'dialog') {\n    return;\n  }\n  event.preventDefault();\n\n  if (value != null) {\n    // nb. we explicitly check against null/undefined\n    dialog.close(value);\n  } else {\n    dialog.close();\n  }\n}\n\n/**\n * @param {!HTMLDialogElement} dialog to upgrade\n * @constructor\n */\nfunction dialogPolyfillInfo(dialog) {\n  this.dialog_ = dialog;\n  this.replacedStyleTop_ = false;\n  this.openAsModal_ = false;\n\n  // Set a11y role. Browsers that support dialog implicitly know this already.\n  if (!dialog.hasAttribute('role')) {\n    dialog.setAttribute('role', 'dialog');\n  }\n\n  dialog.show = this.show.bind(this);\n  dialog.showModal = this.showModal.bind(this);\n  dialog.close = this.close.bind(this);\n\n  dialog.addEventListener('submit', maybeHandleSubmit, false);\n\n  if (!('returnValue' in dialog)) {\n    dialog.returnValue = '';\n  }\n\n  if ('MutationObserver' in window) {\n    var mo = new MutationObserver(this.maybeHideModal.bind(this));\n    mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n  } else {\n    // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n    // seem to fire even if the element was removed as part of a parent removal. Use the removed\n    // events to force downgrade (useful if removed/immediately added).\n    var removed = false;\n    var cb = function() {\n      removed ? this.downgradeModal() : this.maybeHideModal();\n      removed = false;\n    }.bind(this);\n    var timeout;\n    var delayModel = function(ev) {\n      if (ev.target !== dialog) { return; }  // not for a child element\n      var cand = 'DOMNodeRemoved';\n      removed |= (ev.type.substr(0, cand.length) === cand);\n      window.clearTimeout(timeout);\n      timeout = window.setTimeout(cb, 0);\n    };\n    ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n      dialog.addEventListener(name, delayModel);\n    });\n  }\n  // Note that the DOM is observed inside DialogManager while any dialog\n  // is being displayed as a modal, to catch modal removal from the DOM.\n\n  Object.defineProperty(dialog, 'open', {\n    set: this.setOpen.bind(this),\n    get: dialog.hasAttribute.bind(dialog, 'open')\n  });\n\n  this.backdrop_ = document.createElement('div');\n  this.backdrop_.className = 'backdrop';\n  this.backdrop_.addEventListener('mouseup'  , this.backdropMouseEvent_.bind(this));\n  this.backdrop_.addEventListener('mousedown', this.backdropMouseEvent_.bind(this));\n  this.backdrop_.addEventListener('click'    , this.backdropMouseEvent_.bind(this));\n}\n\ndialogPolyfillInfo.prototype = /** @type {HTMLDialogElement.prototype} */ ({\n\n  get dialog() {\n    return this.dialog_;\n  },\n\n  /**\n   * Maybe remove this dialog from the modal top layer. This is called when\n   * a modal dialog may no longer be tenable, e.g., when the dialog is no\n   * longer open or is no longer part of the DOM.\n   */\n  maybeHideModal: function() {\n    if (this.dialog_.hasAttribute('open') && isConnected(this.dialog_)) { return; }\n    this.downgradeModal();\n  },\n\n  /**\n   * Remove this dialog from the modal top layer, leaving it as a non-modal.\n   */\n  downgradeModal: function() {\n    if (!this.openAsModal_) { return; }\n    this.openAsModal_ = false;\n    this.dialog_.style.zIndex = '';\n\n    // This won't match the native <dialog> exactly because if the user set top on a centered\n    // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n    // possible to polyfill this perfectly.\n    if (this.replacedStyleTop_) {\n      this.dialog_.style.top = '';\n      this.replacedStyleTop_ = false;\n    }\n\n    // Clear the backdrop and remove from the manager.\n    this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n    dialogPolyfill.dm.removeDialog(this);\n  },\n\n  /**\n   * @param {boolean} value whether to open or close this dialog\n   */\n  setOpen: function(value) {\n    if (value) {\n      this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n    } else {\n      this.dialog_.removeAttribute('open');\n      this.maybeHideModal();  // nb. redundant with MutationObserver\n    }\n  },\n\n  /**\n   * Handles mouse events ('mouseup', 'mousedown', 'click') on the fake .backdrop element, redirecting them as if\n   * they were on the dialog itself.\n   *\n   * @param {!Event} e to redirect\n   */\n  backdropMouseEvent_: function(e) {\n    if (!this.dialog_.hasAttribute('tabindex')) {\n      // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n      // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n      // would not be needed - clicks would move the implicit cursor there.\n      var fake = document.createElement('div');\n      this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n      fake.tabIndex = -1;\n      fake.focus();\n      this.dialog_.removeChild(fake);\n    } else {\n      this.dialog_.focus();\n    }\n\n    var redirectedEvent = document.createEvent('MouseEvents');\n    redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n        e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n        e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n    this.dialog_.dispatchEvent(redirectedEvent);\n    e.stopPropagation();\n  },\n\n  /**\n   * Focuses on the first focusable element within the dialog. This will always blur the current\n   * focus, even if nothing within the dialog is found.\n   */\n  focus_: function() {\n    // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n    var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n    if (!target && this.dialog_.tabIndex >= 0) {\n      target = this.dialog_;\n    }\n    if (!target) {\n      target = findFocusableElementWithin(this.dialog_);\n    }\n    safeBlur(document.activeElement);\n    target && target.focus();\n  },\n\n  /**\n   * Sets the zIndex for the backdrop and dialog.\n   *\n   * @param {number} dialogZ\n   * @param {number} backdropZ\n   */\n  updateZIndex: function(dialogZ, backdropZ) {\n    if (dialogZ < backdropZ) {\n      throw new Error('dialogZ should never be < backdropZ');\n    }\n    this.dialog_.style.zIndex = dialogZ;\n    this.backdrop_.style.zIndex = backdropZ;\n  },\n\n  /**\n   * Shows the dialog. If the dialog is already open, this does nothing.\n   */\n  show: function() {\n    if (!this.dialog_.open) {\n      this.setOpen(true);\n      this.focus_();\n    }\n  },\n\n  /**\n   * Show this dialog modally.\n   */\n  showModal: function() {\n    if (this.dialog_.hasAttribute('open')) {\n      throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n    }\n    if (!isConnected(this.dialog_)) {\n      throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n    }\n    if (!dialogPolyfill.dm.pushDialog(this)) {\n      throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n    }\n\n    if (createsStackingContext(this.dialog_.parentElement)) {\n      console.warn('A dialog is being shown inside a stacking context. ' +\n          'This may cause it to be unusable. For more information, see this link: ' +\n          'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n    }\n\n    this.setOpen(true);\n    this.openAsModal_ = true;\n\n    // Optionally center vertically, relative to the current viewport.\n    if (dialogPolyfill.needsCentering(this.dialog_)) {\n      dialogPolyfill.reposition(this.dialog_);\n      this.replacedStyleTop_ = true;\n    } else {\n      this.replacedStyleTop_ = false;\n    }\n\n    // Insert backdrop.\n    this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n    // Focus on whatever inside the dialog.\n    this.focus_();\n  },\n\n  /**\n   * Closes this HTMLDialogElement. This is optional vs clearing the open\n   * attribute, however this fires a 'close' event.\n   *\n   * @param {string=} opt_returnValue to use as the returnValue\n   */\n  close: function(opt_returnValue) {\n    if (!this.dialog_.hasAttribute('open')) {\n      throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n    }\n    this.setOpen(false);\n\n    // Leave returnValue untouched in case it was set directly on the element\n    if (opt_returnValue !== undefined) {\n      this.dialog_.returnValue = opt_returnValue;\n    }\n\n    // Triggering \"close\" event for any attached listeners on the <dialog>.\n    var closeEvent = new supportCustomEvent('close', {\n      bubbles: false,\n      cancelable: false\n    });\n    safeDispatchEvent(this.dialog_, closeEvent);\n  }\n\n});\n\nvar dialogPolyfill = {};\n\ndialogPolyfill.reposition = function(element) {\n  var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n  var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n  element.style.top = Math.max(scrollTop, topValue) + 'px';\n};\n\ndialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n  for (var i = 0; i < document.styleSheets.length; ++i) {\n    var styleSheet = document.styleSheets[i];\n    var cssRules = null;\n    // Some browsers throw on cssRules.\n    try {\n      cssRules = styleSheet.cssRules;\n    } catch (e) {}\n    if (!cssRules) { continue; }\n    for (var j = 0; j < cssRules.length; ++j) {\n      var rule = cssRules[j];\n      var selectedNodes = null;\n      // Ignore errors on invalid selector texts.\n      try {\n        selectedNodes = document.querySelectorAll(rule.selectorText);\n      } catch(e) {}\n      if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n        continue;\n      }\n      var cssTop = rule.style.getPropertyValue('top');\n      var cssBottom = rule.style.getPropertyValue('bottom');\n      if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ndialogPolyfill.needsCentering = function(dialog) {\n  var computedStyle = window.getComputedStyle(dialog);\n  if (computedStyle.position !== 'absolute') {\n    return false;\n  }\n\n  // We must determine whether the top/bottom specified value is non-auto.  In\n  // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n  // Firefox returns the used value. So we do this crazy thing instead: check\n  // the inline style and then go through CSS rules.\n  if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n      (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n    return false;\n  }\n  return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n};\n\n/**\n * @param {!Element} element to force upgrade\n */\ndialogPolyfill.forceRegisterDialog = function(element) {\n  if (window.HTMLDialogElement || element.showModal) {\n    console.warn('This browser already supports <dialog>, the polyfill ' +\n        'may not work correctly', element);\n  }\n  if (element.localName !== 'dialog') {\n    throw new Error('Failed to register dialog: The element is not a dialog.');\n  }\n  new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n};\n\n/**\n * @param {!Element} element to upgrade, if necessary\n */\ndialogPolyfill.registerDialog = function(element) {\n  if (!element.showModal) {\n    dialogPolyfill.forceRegisterDialog(element);\n  }\n};\n\n/**\n * @constructor\n */\ndialogPolyfill.DialogManager = function() {\n  /** @type {!Array<!dialogPolyfillInfo>} */\n  this.pendingDialogStack = [];\n\n  var checkDOM = this.checkDOM_.bind(this);\n\n  // The overlay is used to simulate how a modal dialog blocks the document.\n  // The blocking dialog is positioned on top of the overlay, and the rest of\n  // the dialogs on the pending dialog stack are positioned below it. In the\n  // actual implementation, the modal dialog stacking is controlled by the\n  // top layer, where z-index has no effect.\n  this.overlay = document.createElement('div');\n  this.overlay.className = '_dialog_overlay';\n  this.overlay.addEventListener('click', function(e) {\n    this.forwardTab_ = undefined;\n    e.stopPropagation();\n    checkDOM([]);  // sanity-check DOM\n  }.bind(this));\n\n  this.handleKey_ = this.handleKey_.bind(this);\n  this.handleFocus_ = this.handleFocus_.bind(this);\n\n  this.zIndexLow_ = 100000;\n  this.zIndexHigh_ = 100000 + 150;\n\n  this.forwardTab_ = undefined;\n\n  if ('MutationObserver' in window) {\n    this.mo_ = new MutationObserver(function(records) {\n      var removed = [];\n      records.forEach(function(rec) {\n        for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n          if (!(c instanceof Element)) {\n            continue;\n          } else if (c.localName === 'dialog') {\n            removed.push(c);\n          }\n          removed = removed.concat(c.querySelectorAll('dialog'));\n        }\n      });\n      removed.length && checkDOM(removed);\n    });\n  }\n};\n\n/**\n * Called on the first modal dialog being shown. Adds the overlay and related\n * handlers.\n */\ndialogPolyfill.DialogManager.prototype.blockDocument = function() {\n  document.documentElement.addEventListener('focus', this.handleFocus_, true);\n  document.addEventListener('keydown', this.handleKey_);\n  this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n};\n\n/**\n * Called on the first modal dialog being removed, i.e., when no more modal\n * dialogs are visible.\n */\ndialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n  document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n  document.removeEventListener('keydown', this.handleKey_);\n  this.mo_ && this.mo_.disconnect();\n};\n\n/**\n * Updates the stacking of all known dialogs.\n */\ndialogPolyfill.DialogManager.prototype.updateStacking = function() {\n  var zIndex = this.zIndexHigh_;\n\n  for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n    dpi.updateZIndex(--zIndex, --zIndex);\n    if (i === 0) {\n      this.overlay.style.zIndex = --zIndex;\n    }\n  }\n\n  // Make the overlay a sibling of the dialog itself.\n  var last = this.pendingDialogStack[0];\n  if (last) {\n    var p = last.dialog.parentNode || document.body;\n    p.appendChild(this.overlay);\n  } else if (this.overlay.parentNode) {\n    this.overlay.parentNode.removeChild(this.overlay);\n  }\n};\n\n/**\n * @param {Element} candidate to check if contained or is the top-most modal dialog\n * @return {boolean} whether candidate is contained in top dialog\n */\ndialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n  while (candidate = findNearestDialog(candidate)) {\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      if (dpi.dialog === candidate) {\n        return i === 0;  // only valid if top-most\n      }\n    }\n    candidate = candidate.parentElement;\n  }\n  return false;\n};\n\ndialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n  var target = event.composedPath ? event.composedPath()[0] : event.target;\n\n  if (this.containedByTopDialog_(target)) { return; }\n\n  if (document.activeElement === document.documentElement) { return; }\n\n  event.preventDefault();\n  event.stopPropagation();\n  safeBlur(/** @type {Element} */ (target));\n\n  if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n  var dpi = this.pendingDialogStack[0];\n  var dialog = dpi.dialog;\n  var position = dialog.compareDocumentPosition(target);\n  if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n    if (this.forwardTab_) {\n      // forward\n      dpi.focus_();\n    } else if (target !== document.documentElement) {\n      // backwards if we're not already focused on <html>\n      document.documentElement.focus();\n    }\n  }\n\n  return false;\n};\n\ndialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n  this.forwardTab_ = undefined;\n  if (event.keyCode === 27) {\n    event.preventDefault();\n    event.stopPropagation();\n    var cancelEvent = new supportCustomEvent('cancel', {\n      bubbles: false,\n      cancelable: true\n    });\n    var dpi = this.pendingDialogStack[0];\n    if (dpi && safeDispatchEvent(dpi.dialog, cancelEvent)) {\n      dpi.dialog.close();\n    }\n  } else if (event.keyCode === 9) {\n    this.forwardTab_ = !event.shiftKey;\n  }\n};\n\n/**\n * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n * removed and immediately readded don't stay modal, they become normal.\n *\n * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n */\ndialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n  // This operates on a clone because it may cause it to change. Each change also calls\n  // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n  // at a time?!\n  var clone = this.pendingDialogStack.slice();\n  clone.forEach(function(dpi) {\n    if (removed.indexOf(dpi.dialog) !== -1) {\n      dpi.downgradeModal();\n    } else {\n      dpi.maybeHideModal();\n    }\n  });\n};\n\n/**\n * @param {!dialogPolyfillInfo} dpi\n * @return {boolean} whether the dialog was allowed\n */\ndialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n  var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n  if (this.pendingDialogStack.length >= allowed) {\n    return false;\n  }\n  if (this.pendingDialogStack.unshift(dpi) === 1) {\n    this.blockDocument();\n  }\n  this.updateStacking();\n  return true;\n};\n\n/**\n * @param {!dialogPolyfillInfo} dpi\n */\ndialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n  var index = this.pendingDialogStack.indexOf(dpi);\n  if (index === -1) { return; }\n\n  this.pendingDialogStack.splice(index, 1);\n  if (this.pendingDialogStack.length === 0) {\n    this.unblockDocument();\n  }\n  this.updateStacking();\n};\n\ndialogPolyfill.dm = new dialogPolyfill.DialogManager();\ndialogPolyfill.formSubmitter = null;\ndialogPolyfill.imagemapUseValue = null;\n\n/**\n * Installs global handlers, such as click listers and native method overrides. These are needed\n * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n */\nif (window.HTMLDialogElement === undefined) {\n\n  /**\n   * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n   * one that returns the correct value.\n   */\n  var testForm = document.createElement('form');\n  testForm.setAttribute('method', 'dialog');\n  if (testForm.method !== 'dialog') {\n    var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n    if (methodDescriptor) {\n      // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n      // and don't bother to update the element.\n      var realGet = methodDescriptor.get;\n      methodDescriptor.get = function() {\n        if (isFormMethodDialog(this)) {\n          return 'dialog';\n        }\n        return realGet.call(this);\n      };\n      var realSet = methodDescriptor.set;\n      /** @this {HTMLElement} */\n      methodDescriptor.set = function(v) {\n        if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n          return this.setAttribute('method', v);\n        }\n        return realSet.call(this, v);\n      };\n      Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n    }\n  }\n\n  /**\n   * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n   * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n   * document.activeElement.\n   */\n  document.addEventListener('click', function(ev) {\n    dialogPolyfill.formSubmitter = null;\n    dialogPolyfill.imagemapUseValue = null;\n    if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n    var target = /** @type {Element} */ (ev.target);\n    if ('composedPath' in ev) {\n      var path = ev.composedPath();\n      target = path.shift() || target;\n    }\n    if (!target || !isFormMethodDialog(target.form)) { return; }\n\n    var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n    if (!valid) {\n      if (!(target.localName === 'input' && target.type === 'image')) { return; }\n      // this is a <input type=\"image\">, which can submit forms\n      dialogPolyfill.imagemapUseValue = ev.offsetX + ',' + ev.offsetY;\n    }\n\n    var dialog = findNearestDialog(target);\n    if (!dialog) { return; }\n\n    dialogPolyfill.formSubmitter = target;\n\n  }, false);\n\n  /**\n   * Global 'submit' handler. This handles submits of `method=\"dialog\"` which are invalid, i.e.,\n   * outside a dialog. They get prevented.\n   */\n  document.addEventListener('submit', function(ev) {\n    var form = ev.target;\n    var dialog = findNearestDialog(form);\n    if (dialog) {\n      return;  // ignore, handle there\n    }\n\n    var submitter = findFormSubmitter(ev);\n    var formmethod = submitter && submitter.getAttribute('formmethod') || form.getAttribute('method');\n    if (formmethod === 'dialog') {\n      ev.preventDefault();\n    }\n  });\n\n  /**\n   * Replace the native HTMLFormElement.submit() method, as it won't fire the\n   * submit event and give us a chance to respond.\n   */\n  var nativeFormSubmit = HTMLFormElement.prototype.submit;\n  var replacementFormSubmit = function () {\n    if (!isFormMethodDialog(this)) {\n      return nativeFormSubmit.call(this);\n    }\n    var dialog = findNearestDialog(this);\n    dialog && dialog.close();\n  };\n  HTMLFormElement.prototype.submit = replacementFormSubmit;\n}\n\nexport default dialogPolyfill;\n"],"names":["supportCustomEvent","window","CustomEvent","safeDispatchEvent","target","event","check","type","toLowerCase","dispatchEvent","findNearestDialog","el","localName","parentElement","parentNode","host","safeBlur","shadowRoot","activeElement","blur","document","body","inNodeList","nodeList","node","i","length","isFormMethodDialog","hasAttribute","getAttribute","findFocusableElementWithin","hostElement","query","map","push","querySelector","join","Element","prototype","elems","querySelectorAll","tagName","isConnected","element","contains","findFormSubmitter","submitter","form","HTMLFormElement","dialogPolyfill","formSubmitter","getRootNode","maybeHandleSubmit","defaultPrevented","value","imagemapUseValue","dialog","preventDefault","close","dialogPolyfillInfo","this","dialog_","replacedStyleTop_","openAsModal_","setAttribute","show","bind","showModal","addEventListener","returnValue","MutationObserver","maybeHideModal","observe","attributes","attributeFilter","timeout","removed","cb","downgradeModal","delayModel","ev","cand","substr","clearTimeout","setTimeout","forEach","name","Object","defineProperty","set","setOpen","get","backdrop_","createElement","className","backdropMouseEvent_","x","createEvent","initCustomEvent","bubbles","cancelable","detail","Event","style","zIndex","top","removeChild","dm","removeDialog","removeAttribute","e","focus","fake","insertBefore","firstChild","tabIndex","redirectedEvent","initMouseEvent","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","stopPropagation","focus_","updateZIndex","dialogZ","backdropZ","Error","open","pushDialog","s","getComputedStyle","invalid","k","ok","undefined","opacity","position","webkitOverflowScrolling","createsStackingContext","console","warn","needsCentering","reposition","nextSibling","opt_returnValue","closeEvent","scrollTop","documentElement","topValue","innerHeight","offsetHeight","Math","max","styleSheets","styleSheet","cssRules","j","rule","selectedNodes","selectorText","cssTop","getPropertyValue","cssBottom","bottom","isInlinePositionSetByStylesheet","HTMLDialogElement","forceRegisterDialog","pendingDialogStack","checkDOM","checkDOM_","overlay","forwardTab_","handleKey_","handleFocus_","zIndexLow_","zIndexHigh_","mo_","records","rec","c","removedNodes","concat","DialogManager","blockDocument","childList","subtree","unblockDocument","removeEventListener","disconnect","updateStacking","dpi","last","appendChild","containedByTopDialog_","candidate","composedPath","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","keyCode","cancelEvent","slice","indexOf","allowed","unshift","index","splice","testForm","method","methodDescriptor","getOwnPropertyDescriptor","realGet","call","realSet","v","shift","offsetX","offsetY","nativeFormSubmit","submit"],"mappings":"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"}