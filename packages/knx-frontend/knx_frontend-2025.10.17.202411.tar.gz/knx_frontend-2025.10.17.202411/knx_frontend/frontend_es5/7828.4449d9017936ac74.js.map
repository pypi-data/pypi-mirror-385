{"version":3,"file":"7828.4449d9017936ac74.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-form/ha-form-grid.ts"],"sourcesContent":["import \"./ha-form\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type {\n  HaFormGridSchema,\n  HaFormDataContainer,\n  HaFormElement,\n  HaFormSchema,\n} from \"./types\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-form-grid\")\nexport class HaFormGrid extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public data!: HaFormDataContainer;\n\n  @property({ attribute: false }) public schema!: HaFormGridSchema;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public computeLabel?: (\n    schema: HaFormSchema,\n    data?: HaFormDataContainer\n  ) => string;\n\n  @property({ attribute: false }) public computeHelper?: (\n    schema: HaFormSchema\n  ) => string;\n\n  @property({ attribute: false }) public localizeValue?: (\n    key: string\n  ) => string;\n\n  public async focus() {\n    await this.updateComplete;\n    this.renderRoot.querySelector(\"ha-form\")?.focus();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (changedProps.has(\"schema\")) {\n      if (this.schema.column_min_width) {\n        this.style.setProperty(\n          \"--form-grid-min-width\",\n          this.schema.column_min_width\n        );\n      } else {\n        this.style.setProperty(\"--form-grid-min-width\", \"\");\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.schema.schema.map(\n        (item) => html`\n          <ha-form\n            .hass=${this.hass}\n            .data=${this.data}\n            .schema=${[item]}\n            .disabled=${this.disabled}\n            .computeLabel=${this.computeLabel}\n            .computeHelper=${this.computeHelper}\n            .localizeValue=${this.localizeValue}\n          ></ha-form>\n        `\n      )}\n    `;\n  }\n\n  static styles = css`\n    :host {\n      display: grid !important;\n      grid-template-columns: repeat(\n        var(--form-grid-column-count, auto-fit),\n        minmax(var(--form-grid-min-width, 200px), 1fr)\n      );\n      grid-column-gap: 8px;\n      grid-row-gap: 24px;\n    }\n    :host > ha-form {\n      display: block;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form-grid\": HaFormGrid;\n  }\n}\n"],"names":["HaFormGrid","LitElement","focus","_this$renderRoot$quer","this","updateComplete","renderRoot","querySelector","updated","changedProps","super","has","schema","column_min_width","style","setProperty","render","html","_t","_","map","item","_t2","hass","data","disabled","computeLabel","computeHelper","localizeValue","args","styles","css","_t3","attribute","type","Boolean"],"mappings":"kRAaO,MAAPA,UAAAC,EAAAA,GAsBE,WAAAC,GAAA,IAAAC,QACQC,KAANC,eACA,QAAAF,EAAAC,KAAAE,WAAAC,cAAA,sBAAAJ,GAAAA,EAAAD,OACF,CAEUM,OAAAA,CAAAC,GACRC,MAAAF,QAAAC,GACAA,EAAAE,IAAA,YACMP,KAAJQ,OAAAC,iBACET,KAAAU,MAAAC,YAAA,wBAAAX,KAAAQ,OAAAC,kBAKAT,KAAAU,MAAAC,YAAA,4BAGN,CAEUC,MAAAA,GACR,OAAAC,EAAAA,EAAAA,IAAAC,IAAAA,EAAAC,CAAA;QAAA;OACE,KAAAP,OAAAA,OAAAQ,KAAAC,IAAAJ,EAAAA,EAAAA,IAAAK,IAAAA,EAAAH,CAAA;;oBAAA;oBAAA;sBAAA;wBAAA;4BAAA;6BAAA;6BAAA;;WAGY,KAAAI,KACA,KAAAC,KACE,CAAGH,GACD,KAAAI,SACI,KAAAC,aACC,KAAAC,cACA,KAAAC,iBAKzB,C,kBAzDK,SAAAC,GAAA,KAAAJ,UAAA,C,EAAMzB,EAAA8B,QAAAC,EAAAA,EAAAA,IAAAC,IAAAA,EAAAb,CAAA;;;;;;;;;;;;;kCACCc,WAAA,K,uDAEAA,WAAA,K,uDAEAA,WAAA,K,yDAEAC,KAAAC,W,2DAEAF,WAAA,K,+DAKAA,WAAA,K,gEAIAA,WAAA,K"}