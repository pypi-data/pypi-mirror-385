import"core-js/modules/es.array.iterator.js";import"core-js/modules/es.array-buffer.constructor.js";import"core-js/modules/es.array-buffer.slice.js";import"core-js/modules/es.array-buffer.detached.js";import"core-js/modules/es.array-buffer.transfer.js";import"core-js/modules/es.array-buffer.transfer-to-fixed-length.js";import"core-js/modules/es.typed-array.int16-array.js";import"core-js/modules/es.typed-array.at.js";import"core-js/modules/es.typed-array.fill.js";import"core-js/modules/es.typed-array.find-last.js";import"core-js/modules/es.typed-array.find-last-index.js";import"core-js/modules/es.typed-array.set.js";import"core-js/modules/es.typed-array.sort.js";import"core-js/modules/es.typed-array.to-locale-string.js";import"core-js/modules/es.typed-array.to-reversed.js";import"core-js/modules/es.typed-array.to-sorted.js";import"core-js/modules/es.typed-array.with.js";class RecorderProcessor extends AudioWorkletProcessor{process(r,e,s){if(r[0].length<1)return!0;const o=r[0][0],t=new Int16Array(o.length);for(let a=0;a<o.length;a++){const r=Math.max(-1,Math.min(1,o[a]));t[a]=r<0?32768*r:32767*r}return this.port.postMessage(t),!0}}registerProcessor("recorder-worklet",RecorderProcessor);