vocabulary V {
    type Node := { a, b, c }
    type A := { 1, 2, 3 }
    B: Node -> A
    P: Node -> Int
    Q: Node -> Real
    P_div: Node -> Int
    Q_div: Node -> Real

    T: Node -> Node
}


theory T:V  {
    // Less than
    !x in Node: P(x) < 4.
    !x in Node: 0 < P(x).

    !x in Node: P(x) < 4.0.
    !x in Node: 0.0 < P(x).

    !y in Node: Q(y) < 4.
    !y in Node: 0 < Q(y).

    !y in Node: Q(y) < 4.0.
    !y in Node: 0.0 < Q(y).

    // Less than or equal
    !x in Node: P(x) =< 4.
    !x in Node: 0 =< P(x).

    !x in Node: P(x) =< 4.0.
    !x in Node: 0.0 =< P(x).

    !y in Node: Q(y) =< 4.
    !y in Node: 0 =< Q(y).

    !y in Node: Q(y) =< 4.0.
    !y in Node: 0.0 =< Q(y).

    // Greater than
    !x in Node: P(x) > 0.
    !x in Node: 4 > P(x).

    !x in Node: P(x) > 0.0.
    !x in Node: 4.0 > P(x).

    !y in Node: Q(y) > 0.
    !y in Node: 4 > Q(y).

    !y in Node: Q(y) > 0.0.
    !y in Node: 4.0 > Q(y).

    // Greater than or equal
    !x in Node: P(x) >= 0.
    !x in Node: 4 >= P(x).

    !x in Node: P(x) >= 0.0.
    !x in Node: 4.0 >= P(x).

    !y in Node: Q(y) >= 0.
    !y in Node: 4 >= Q(y).

    !y in Node: Q(y) >= 0.0.
    !y in Node: 4.0 >= Q(y).

    // Eq
    ?x in Node: P(x) = Q(x).
    ?x in Node: Q(x) = P(x).
    ?x in Node: P(x) = P(x).
    ?x in Node: Q(x) = Q(x).

    ?x in Node: P(x) = 1.
    ?x in Node: 1 = P(x).
    ?x in Node: P(x) = 1.0.
    ?x in Node: 1.0 = P(x).

    ?x in Node: Q(x) = 1.
    ?x in Node: 1 = Q(x).
    ?x in Node: Q(x) = 1.0.
    ?x in Node: 1.0 = Q(x).

    ?x in Node: T(x) = a.
    ?x in Node: a = T(x).

    // Neq
    ?x in Node: P(x) ~= Q(x).
    ?x in Node: Q(x) ~= P(x).

    ?x in Node: P(x) ~= 1.
    ?x in Node: 1 ~= P(x).
    ?x in Node: P(x) ~= 1.0.
    ?x in Node: 1.0 ~= P(x).

    ?x in Node: Q(x) ~= 1.
    ?x in Node: 1 ~= Q(x).
    ?x in Node: Q(x) ~= 1.0.
    ?x in Node: 1.0 ~= Q(x).

    ?x in Node: T(x) ~= a.
    ?x in Node: a ~= T(x).

    // Add
    ?x in Node: (P(x) + P(x)) < 8.
    ?x in Node: (Q(x) + Q(x)) < 8.

    ?x in Node: (P(x) + Q(x)) < 8.
    ?x in Node: (Q(x) + P(x)) < 8.

    ?x in Node: (P(x) + 1) < 5.
    ?x in Node: (1 + P(x)) < 5.

    ?x in Node: (P(x) + 1.0) < 5.
    ?x in Node: (1.0 + P(x)) < 5.

    ?x in Node: (Q(x) + 1) < 5.
    ?x in Node: (1 + Q(x)) < 5.

    // Sub
    ?x in Node: (P(x) - P(x)) < 1.
    ?x in Node: (Q(x) - Q(x)) < 1.

    ?x in Node: (P(x) - Q(x)) < 1.
    ?x in Node: (Q(x) - P(x)) < 1.

    ?x in Node: (P(x) - 1) < 5.
    ?x in Node: (1 - P(x)) < 5.

    ?x in Node: (P(x) - 1.0) < 5.
    ?x in Node: (1.0 - P(x)) < 5.

    ?x in Node: (Q(x) - 1) < 5.
    ?x in Node: (1 - Q(x)) < 5.

    // mult
    ?x in Node: (P(x) * P(x)) < 10.
    ?x in Node: (Q(x) * Q(x)) < 10.

    ?x in Node: (P(x) * Q(x)) < 10.
    ?x in Node: (Q(x) * P(x)) < 10.

    ?x in Node: (P(x) * 1) < 5.
    ?x in Node: (1 * P(x)) < 5.

    ?x in Node: (P(x) * 1.0) < 5.
    ?x in Node: (1.0 * P(x)) < 5.

    ?x in Node: (Q(x) * 1) < 5.
    ?x in Node: (1 * Q(x)) < 5.

    // Division
    ?x in Node: [[P_div(x) / P_div(x) < 10]].
    ?x in Node: [[Q_div(x) / Q_div(x) < 10]].

    ?x in Node: [[P_div(x) / Q_div(x) < 10]].
    ?x in Node: [[Q_div(x) / P_div(x) < 10]].

    ?x in Node: P_div(x) / 1 < 5.
    ?x in Node: [[1 / P_div(x) < 5]].

    ?x in Node: P_div(x) / 1.0 < 5.
    ?x in Node: [[1.0 / P_div(x) < 5]].

    ?x in Node: Q_div(x) / 1 < 5.
    ?x in Node: [[1 / Q_div(x) < 5]].
    !x in Node: 1/B(x) < 2.
    !x in Node: 1.0/B(x) < 2.
    
    // Remainder
    ?x in Node: [[P(x) % P(x) < 10]].
    ?x in Node: [[Q(x) % Q(x) < 10]].

    ?x in Node: [[P(x) % Q(x) < 10]].
    ?x in Node: [[Q(x) % P(x) < 10]].

    ?x in Node: P(x) % 1 < 5.
    ?x in Node: [[1 % P(x) < 5]].

    ?x in Node: P(x) % 1.0 < 5.
    ?x in Node: [[1.0 % P(x) < 5]].

    ?x in Node: Q(x) % 1 < 5.
    ?x in Node: [[1 % Q(x) < 5]].
    !x in Node: 1%B(x) < 2.
    !x in Node: 1.0%B(x) < 2.

    !x in Node: 1 % B(x) = 1.
    !x in Node: 1.0 % B(x) = 1.

    // Sum

    sum{{ 2 | x in Node: true }} < 20.
    sum{{ 2.0 | x in Node: true }} < 20.
    sum{{ P(x) | x in Node: true }} < 20.
    sum{{ Q(x) | x in Node: true }} < 20.
}

structure {}

