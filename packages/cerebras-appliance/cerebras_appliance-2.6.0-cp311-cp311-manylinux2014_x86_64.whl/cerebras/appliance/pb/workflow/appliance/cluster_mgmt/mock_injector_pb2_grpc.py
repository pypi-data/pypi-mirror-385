# Copyright 2016-2024 Cerebras Systems
# SPDX-License-Identifier: BSD-3-Clause

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cerebras.appliance.pb.workflow.appliance.cluster_mgmt import mock_injector_pb2 as cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2


class MockInjectorServiceStub(object):
    """This service is used for testing other grpc services
    by artificially overriding responses.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MockApiMethod = channel.unary_unary(
                '/cluster.cluster_mgmt_pb.MockInjectorService/MockApiMethod',
                request_serializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodRequest.SerializeToString,
                response_deserializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodResponse.FromString,
                )
        self.ClearMockedMethod = channel.unary_unary(
                '/cluster.cluster_mgmt_pb.MockInjectorService/ClearMockedMethod',
                request_serializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodRequest.SerializeToString,
                response_deserializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodResponse.FromString,
                )


class MockInjectorServiceServicer(object):
    """This service is used for testing other grpc services
    by artificially overriding responses.
    """

    def MockApiMethod(self, request, context):
        """Override a specific method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearMockedMethod(self, request, context):
        """Clear a mocked method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MockInjectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MockApiMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.MockApiMethod,
                    request_deserializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodRequest.FromString,
                    response_serializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodResponse.SerializeToString,
            ),
            'ClearMockedMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearMockedMethod,
                    request_deserializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodRequest.FromString,
                    response_serializer=cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cluster.cluster_mgmt_pb.MockInjectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MockInjectorService(object):
    """This service is used for testing other grpc services
    by artificially overriding responses.
    """

    @staticmethod
    def MockApiMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cluster.cluster_mgmt_pb.MockInjectorService/MockApiMethod',
            cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodRequest.SerializeToString,
            cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearMockedMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cluster.cluster_mgmt_pb.MockInjectorService/ClearMockedMethod',
            cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodRequest.SerializeToString,
            cerebras_dot_pb_dot_workflow_dot_appliance_dot_cluster__mgmt_dot_mock__injector__pb2.MockMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
