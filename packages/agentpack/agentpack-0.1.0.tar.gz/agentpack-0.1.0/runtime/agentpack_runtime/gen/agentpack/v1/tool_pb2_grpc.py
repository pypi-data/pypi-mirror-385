# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from agentpack.types import common_pb2 as agentpack_dot_types_dot_common__pb2
from agentpack.types import tool_spec_pb2 as agentpack_dot_types_dot_tool__spec__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ToolHostStub(object):
    """Tool Host service - implemented by SDK runtime
    This service runs inside the tool container and receives invocations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Describe = channel.unary_unary(
                '/agentpack.v1.ToolHost/Describe',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agentpack_dot_types_dot_tool__spec__pb2.ToolSpec.FromString,
                _registered_method=True)
        self.Invoke = channel.unary_unary(
                '/agentpack.v1.ToolHost/Invoke',
                request_serializer=agentpack_dot_types_dot_common__pb2.ToolRequest.SerializeToString,
                response_deserializer=agentpack_dot_types_dot_common__pb2.ToolResult.FromString,
                _registered_method=True)
        self.InvokeStream = channel.unary_stream(
                '/agentpack.v1.ToolHost/InvokeStream',
                request_serializer=agentpack_dot_types_dot_common__pb2.ToolRequest.SerializeToString,
                response_deserializer=agentpack_dot_types_dot_common__pb2.ToolEvent.FromString,
                _registered_method=True)


class ToolHostServicer(object):
    """Tool Host service - implemented by SDK runtime
    This service runs inside the tool container and receives invocations
    """

    def Describe(self, request, context):
        """Describe the tool's capabilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Invoke(self, request, context):
        """Invoke the tool (synchronous)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvokeStream(self, request, context):
        """Invoke the tool with streaming events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToolHostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Describe': grpc.unary_unary_rpc_method_handler(
                    servicer.Describe,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agentpack_dot_types_dot_tool__spec__pb2.ToolSpec.SerializeToString,
            ),
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=agentpack_dot_types_dot_common__pb2.ToolRequest.FromString,
                    response_serializer=agentpack_dot_types_dot_common__pb2.ToolResult.SerializeToString,
            ),
            'InvokeStream': grpc.unary_stream_rpc_method_handler(
                    servicer.InvokeStream,
                    request_deserializer=agentpack_dot_types_dot_common__pb2.ToolRequest.FromString,
                    response_serializer=agentpack_dot_types_dot_common__pb2.ToolEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agentpack.v1.ToolHost', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agentpack.v1.ToolHost', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ToolHost(object):
    """Tool Host service - implemented by SDK runtime
    This service runs inside the tool container and receives invocations
    """

    @staticmethod
    def Describe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentpack.v1.ToolHost/Describe',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agentpack_dot_types_dot_tool__spec__pb2.ToolSpec.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentpack.v1.ToolHost/Invoke',
            agentpack_dot_types_dot_common__pb2.ToolRequest.SerializeToString,
            agentpack_dot_types_dot_common__pb2.ToolResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InvokeStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/agentpack.v1.ToolHost/InvokeStream',
            agentpack_dot_types_dot_common__pb2.ToolRequest.SerializeToString,
            agentpack_dot_types_dot_common__pb2.ToolEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
