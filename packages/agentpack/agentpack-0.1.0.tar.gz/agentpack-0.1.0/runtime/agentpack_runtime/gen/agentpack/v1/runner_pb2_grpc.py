# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from agentpack.v1 import runner_pb2 as agentpack_dot_v1_dot_runner__pb2


class ToolRunnerStub(object):
    """Tool Runner service - internal service for executing tools in containers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Execute = channel.unary_stream(
                '/agentpack.v1.ToolRunner/Execute',
                request_serializer=agentpack_dot_v1_dot_runner__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=agentpack_dot_v1_dot_runner__pb2.ExecutionEvent.FromString,
                _registered_method=True)
        self.Cancel = channel.unary_unary(
                '/agentpack.v1.ToolRunner/Cancel',
                request_serializer=agentpack_dot_v1_dot_runner__pb2.CancelRequest.SerializeToString,
                response_deserializer=agentpack_dot_v1_dot_runner__pb2.CancelResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/agentpack.v1.ToolRunner/GetStatus',
                request_serializer=agentpack_dot_v1_dot_runner__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=agentpack_dot_v1_dot_runner__pb2.ExecutionStatus.FromString,
                _registered_method=True)


class ToolRunnerServicer(object):
    """Tool Runner service - internal service for executing tools in containers
    """

    def Execute(self, request, context):
        """Execute a tool in a sandbox
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cancel(self, request, context):
        """Cancel a running tool
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Get execution status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToolRunnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Execute': grpc.unary_stream_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=agentpack_dot_v1_dot_runner__pb2.ExecuteRequest.FromString,
                    response_serializer=agentpack_dot_v1_dot_runner__pb2.ExecutionEvent.SerializeToString,
            ),
            'Cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.Cancel,
                    request_deserializer=agentpack_dot_v1_dot_runner__pb2.CancelRequest.FromString,
                    response_serializer=agentpack_dot_v1_dot_runner__pb2.CancelResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=agentpack_dot_v1_dot_runner__pb2.GetStatusRequest.FromString,
                    response_serializer=agentpack_dot_v1_dot_runner__pb2.ExecutionStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agentpack.v1.ToolRunner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agentpack.v1.ToolRunner', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ToolRunner(object):
    """Tool Runner service - internal service for executing tools in containers
    """

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/agentpack.v1.ToolRunner/Execute',
            agentpack_dot_v1_dot_runner__pb2.ExecuteRequest.SerializeToString,
            agentpack_dot_v1_dot_runner__pb2.ExecutionEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentpack.v1.ToolRunner/Cancel',
            agentpack_dot_v1_dot_runner__pb2.CancelRequest.SerializeToString,
            agentpack_dot_v1_dot_runner__pb2.CancelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agentpack.v1.ToolRunner/GetStatus',
            agentpack_dot_v1_dot_runner__pb2.GetStatusRequest.SerializeToString,
            agentpack_dot_v1_dot_runner__pb2.ExecutionStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
