[project]
name = "bohr-agent-sdk"
dynamic = ["version"]
description = "SDK for scientific agents"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "DP Technology" }]
maintainers = [
    { name = "liupeng", email = "liupeng@dp.tech" },
    { name = "zjgemi", email = "liuxzj@dp.tech" },
]
keywords = ["agent SDK", "AI for science"]
license = { text = "MIT" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
# 核心依赖
dependencies = [
    "click>=8.0.0",
    "mcp>=1.17.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.8.0",
    "dpdispatcher>=0.6.8",
    "lbg>=1.2.29",
    "jsonpickle>=3.0.3",
    "psutil>=5.9.6",
    "paho-mqtt>=2.1.0",
    "redis>=6.2.0",
    "twine>=6.1.0",
    "build>=1.2.2.post1",
    "cloudpickle",
    "watchdog>=6.0.0",
    "fastapi>=0.116.0",
    "bohrium-open-sdk"
]

# 可选依赖
[project.optional-dependencies]
# 实验室模式依赖
device = [
    "pywinauto-recorder>=0.1.0",  # 用于设备控制
]

# 云模式依赖
cloud = [
    "paho-mqtt>=1.6.1",      # MQTT客户端
    "redis>=5.0.1",          # Redis客户端
    "aiohttp>=3.9.1",        # 异步HTTP客户端
]

# 开发工具依赖
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "google-adk"
]

# 文档工具依赖
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
]

# 完整安装（包含所有功能）
all = [
    "bohr-agent-sdk[device,cloud,dev,docs,dispatcher,bohrium]",
]

# CLI 入口点配置
[project.scripts]
dp-agent = "dp.agent.cli.cli:main"
bohr-agent = "dp.agent.cli.cli:main"

[project.urls]
Homepage = "https://github.com/dptech-corp/bohr-agent-sdk"
repository = "https://github.com/dptech-corp/bohr-agent-sdk"
"Bug Reports" = "https://github.com/dptech-corp/bohr-agent-sdk/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = false  # 关闭自动包含，使用显式配置

[tool.setuptools.package-data]
"dp.agent.cli.templates" = [
    "**/*.template",
    "**/*.json",
    "**/*.md", 
    "**/*.txt",
    "**/*.py"
]
"dp.agent.cli.templates.ui" = [
    "**/*.py",
    "config/*.json",
    "*.txt"
]
# 包含前端静态文件和必要的配置文件（用于开发模式）
"dp.agent.cli.templates.ui.frontend" = [
    "ui-static/**/*",
    "package.json",  # 开发模式需要
    "vite.config.ts",  # Vite 配置
    "tsconfig.json",  # TypeScript 配置
    "index.html"  # 开发模式入口
]

# 使用 exclude-package-data 排除不需要的文件
[tool.setuptools.exclude-package-data]
"dp.agent.cli.templates.ui.frontend" = [
    "*.sh",
    ".eslintrc.cjs",
    "tsconfig.node.json",  # 排除这个，但保留 tsconfig.json
    "src/**/*",  # 排除源码
    "public/**/*",  # 排除 public 目录
    "node_modules/**/*"  # 排除 node_modules
]

[build-system]
requires = [
    "setuptools>=61.0.0",
    "wheel>=0.37.0",
]
build-backend = "setuptools.build_meta"