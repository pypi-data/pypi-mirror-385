# Build directories (contains all generated files)
build/
output/
dist/
.pybuild/

# Package distribution artifacts
apt-repo/
*.deb
*.buildinfo
*.changes

# Build and audit logs
build.log
pip-audit-report.json

# Docker build logs
src/docker/build-*.log

# Generated figures (exclude generated, include source templates)
!src/figures/Figure*_placeholder.txt

# Figure generation artifacts
scripts/figures/__pycache__/
scripts/figures/*.pyc

# LaTeX auxiliary files
*.aux
*.bbl
*.blg
*.fls
*.fdb_latexmk
*.log
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb
*.pdf
*.zip

# gptrepo
output.txt

# OS and editor files
.DS_Store
.vscode/
*.swp
*.swo
*~

# Claude Code configuration
CLAUDE.md
.claude

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Python files in base directory only (not subdirectories)
/*.py

# Debug and temporary development files
debug_*.py
todo*.md

# C extensions
*.so

# Distribution / packaging
.Python
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
.rxiv_cache/
nosetests.xml
coverage.xml
coverage-*.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
activate_venv.sh

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer,
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Auto-generated API documentation
docs/api/*.md
!docs/api/README.md
!docs/api/index.md

# Git submodules are tracked by .gitmodules
# Individual submodule contents are managed by git submodule commands

# Prevent individual submodule files from being committed
# Submodules should only be managed via git submodule commands
submodules/homebrew-rxiv-maker/
submodules/scoop-rxiv-maker/
submodules/vscode-rxiv-maker/

# Repository contamination prevention
# Prevent common files from wrong repositories being accidentally added


# Scoop files should only be in scoop-rxiv-maker submodule
/bucket/
*.ps1
scoop-*

# VSCode extension files should only be in vscode-rxiv-maker submodule
/.vscodeignore
/language-configuration.json
/*.tmLanguage.json
/src/extension.ts
/src/test/extension.test.ts
/schemas/config-schema.json
/esbuild.js
/eslint.config.mjs

# Prevent temporary submodule clones from being committed
temp-*-clone/
temp-*-fix/

# Safeguard system logs and temporary files
scripts/safeguards/*.log
.safeguard-validation-*

.gitignore
MANUSCRIPT/2025__author_et_al__rxiv.pdf
EXAMPLE_MANUSCRIPT/2025__Saraiva_et_al__for_arxiv.zip

# Allow PDFs in FIGURES directories to be tracked
!MANUSCRIPT/FIGURES/*.pdf
!EXAMPLE_MANUSCRIPT/FIGURES/*.pdf
GEMINI.md
# Markdown files - ignore by default except important ones
*.md
.github/*.md

# Important markdown files to keep tracked
!README.md
!CHANGELOG.md
!CONTRIBUTING.md
!CODE_OF_CONDUCT.md
!docs/**/*.md
!EXAMPLE_MANUSCRIPT/**/*.md
!MANUSCRIPT/**/*.md
!examples/**/*.md
!test_init/**/*.md
!src/**/*.md
!tests/**/*.md
!scripts/**/*.md
!.github/**/*.md

# Specific temporary/working files to ignore
todo*.md
DOCKER_ACCELERATION.md
GEMINI.md
CLAUDE.md
output.md

# Temporary analysis files
.folder2md_ignore
submodules/vscode-rxiv-maker/node_modules
test-results
plan_prompt.md
.gha-logs
.bandit
bandit-report.json
iv-maker/output.md
lms/todo.md
pip-audit-report.json
coverage.json

# Reports and logs (auto-generated)
*.log
*.xml
*-report.json
coverage*.xml
coverage*.json
*.report
report-*.json
*.audit
audit-*.json

# Distribution artifacts (should be generated via CI/CD)
dist/
*.whl
*.tar.gz

# Backup directories
backup/

# Environment files (local overrides only)
.env
.env.local
.env.*.local

# Tool configuration files
.folder2md_ignore
.bandit

# MyPy cache
.mypy_cache/

# Output directories and generated files
*/output/*.log
*/output/*.xml
*/output/.log
output/
build/

# APT repository validation results (temporary files)
validation-results/
packaging/validation-results/
.venv-linux
rxivdraft/MANUSCRIPT/2025__ant√≥nio_d_brito_et_al__rxiv.pdf
.ci_artifacts

.gemini/
.gemini-clipboard/
gha-creds-*.json
