[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rxiv-maker"
dynamic = ["version"]
authors = [
    {name = "Rxiv-Maker Contributors", email = "rxiv.maker@gmail.com"},
]
keywords = ["latex", "markdown", "scientific-writing", "publishing", "automation", "cli", "command-line", "hatch"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Text Processing :: Markup :: LaTeX",
    "Topic :: Text Processing :: Markup :: Markdown",
]
description = "Write scientific preprints in Markdown. Generate publication-ready PDFs efficiently."
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    # Core scientific libraries for figure generation (optional for users who don't generate figures)
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    # Core functionality dependencies
    "Pillow>=9.0.0",
    "pypdf>=6.0.0",
    "PyYAML>=6.0.0",
    "python-dotenv>=1.0.0",
    "crossref-commons>=0.0.7",
    "click>=8.0.0",
    "rich>=13.0.0",
    "rich-click>=1.6.0",
    "typing-extensions>=4.0.0",
    "packaging>=21.0.0",
    "platformdirs>=4.0.0",
    "tomli-w>=1.0.0",
    "requests>=2.28.0",
    "playwright>=1.54.0",
]

[project.urls]
Homepage = "https://github.com/HenriquesLab/rxiv-maker"
Documentation = "https://github.com/HenriquesLab/rxiv-maker#readme"
Repository = "https://github.com/HenriquesLab/rxiv-maker"
Issues = "https://github.com/HenriquesLab/rxiv-maker/issues"
Changelog = "https://github.com/HenriquesLab/rxiv-maker/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/HenriquesLab/rxiv-maker/issues"
"Source Code" = "https://github.com/HenriquesLab/rxiv-maker"

[project.optional-dependencies]
dev = [
    # Core testing framework
    "pytest>=7.4,<9.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.8.0",
    # Testing utilities
    "pytest-timeout>=2.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-sugar>=0.9.7",
    "pytest-benchmark>=4.0.0",
    "pytest-env>=1.0.0",
    "pytest-snapshot>=0.9.0",
    "pytest-datadir>=1.4.0",
    "pytest-clarity>=1.0.0",
    "pytest-notebook>=0.10.0",
    # Code quality and formatting
    "ruff>=0.12.2",
    "mypy>=1.0",
    "pre-commit>=4.2.0",
    # Build and packaging
    "hatch>=1.14.1",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    # Type checking
    "types-requests>=2.32.4.20250611",
    "types-PyYAML>=6.0.0",
    # Documentation and utilities
    "coverage[toml]>=7.0",
    "nbstripout>=0.7.1",
    "nox>=2023.0.0",
]




# Ruff configuration (replaces black, isort, flake8, autoflake, docformatter)
[tool.ruff]
# Set the maximum line length (increased for better readability)
line-length = 120
target-version = "py311"
exclude = [
    "versioneer.py",
    "rxiv_maker_colab.ipynb",
]

[tool.ruff.lint]
# Enable the following rule sets (reduced strictness)
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
]

# Ignore specific rules that are too strict or conflict with practical coding
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by line-length setting with more tolerance)
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D200",  # One-line docstring should fit on one line
    "D212",  # Multi-line docstring summary should start at the first line
    "D213",  # Multi-line docstring summary should start at the second line
    "D400",  # First line should end with a period
    "D401",  # First line should be in imperative mood
    "D415",  # First line should end with a period, question mark, or exclamation point
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around the equals sign in keyword arguments
skip-magic-trailing-comma = false
# Prefer hanging indents for function arguments
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["rxiv_maker"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.ruff.lint.per-file-ignores]
# Ignore certain rules in test files (but keep docstring checks for main classes)
"tests/*" = ["D"]
# Ignore debug and example files
"debug_*.py" = ["D"]
"trace_*.py" = ["D"]
"notebooks/*" = ["D", "E501"]
# Ignore auto-generated files
"rxiv_maker_colab.ipynb" = ["ALL"]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
check_untyped_defs = true
explicit_package_bases = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/rxiv_maker"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--durations=10",  # Show slowest tests
    "--cov-report=term-missing:skip-covered",
    "--dist=worksteal",  # Optimized work distribution with pytest-xdist
    "--maxfail=5",  # Increased to handle flaky tests better
    "--timeout=60",  # Default timeout for fast tests, overridden by specific timeouts
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast (select with '-m fast')",
    "medium: marks tests as medium speed (1-5s duration)",
    "asyncio: marks tests as async tests",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "notebook: marks tests as notebook tests",
    "validation: marks tests as validation-related tests",
    "build_manager: marks tests as build manager-related tests",
    "pdf_validation: marks tests as PDF validation-related tests",
    "cli: marks tests as CLI-related tests",
    "docker: marks tests as Docker engine mode tests",
    "podman: marks tests as Podman engine mode tests",
    "binary: Binary distribution tests",
    "pyinstaller: PyInstaller-specific tests",
    "package_manager: Package manager integration tests",
    "homebrew: Homebrew-specific tests",
    "scoop: Scoop-specific tests",
    "pypi: PyPI distribution and integration tests",
    "end_to_end: End-to-end binary workflow tests",
    "platform_specific: Tests that only run on specific platforms",
    "performance: Performance benchmark tests",
    "memory_intensive: Tests that use significant memory",
    "requires_latex: Requires LaTeX installation",
    "requires_docker: Requires Docker availability",
    "requires_podman: Requires Podman availability",
    "requires_r: Requires R statistical software",
    "system: System-level integration tests",
    "flaky: Tests that are known to be flaky or unstable",
    "ci_exclude: Tests to exclude in CI environments",
    "processor: marks tests as processor-related tests",
    "medium: marks tests as medium-duration tests",
    "docker: marks tests as Docker-related tests",
    "podman: marks tests as Podman-related tests",
    "network: marks tests requiring network connectivity",
    "filesystem: marks tests requiring filesystem operations",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:pkg_resources",
    "error::pytest.PytestUnraisableExceptionWarning",
]

# Hatch configuration

[tool.hatch.version]
path = "src/rxiv_maker/__version__.py"

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.4",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "ruff>=0.12.2",
    "pre-commit>=4.2.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/rxiv_maker {args:tests}"
lint = "ruff check {args:src}"
format = "ruff format {args:src}"
type-check = "mypy {args:src/rxiv_maker}"
all = ["lint", "type-check", "test-cov"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve"
# Console scripts entry point
[project.scripts]
rxiv = "rxiv_maker.cli:main"
rxiv-install-deps = "rxiv_maker.install.manager:main"

# Typos spell checker configuration
[tool.typos.files]
extend-exclude = [
    "*.log",
    "*.bib",
    "*.tex",
    "*.pdf",
    "*.png",
    "*.jpg",
    "*.jpeg",
    "*.svg",
    "build/",
    "dist/",
    ".git/",
    "__pycache__/",
    "*.egg-info/",
    "src/docker/**",  # Docker-related files may contain non-standard text
]

[tool.typos.default]
extend-ignore-re = [
    # LaTeX commands and environments
    "\\\\[a-zA-Z]+",
    # File paths and URLs
    "[a-zA-Z0-9-_.]+\\.[a-zA-Z0-9]{2,}",
]

[tool.typos.default.extend-words]
# Add technical terms and proper names that might be flagged as typos
rxiv = "rxiv"
arxiv = "arxiv"
biorxiv = "biorxiv"
preprint = "preprint"
doi = "doi"
orcid = "orcid"
yaml = "yaml"
toml = "toml"
# Institution names and proper nouns
instituto = "instituto"  # Portuguese for "institute"
tennant = "tennant"      # Proper surname
# LaTeX formatting sequences
ois = "ois"              # Part of LaTeX accent commands like {\c{c}}ois
ure = "ure"              # As in "Figure"
# File extensions
fot = "fot"              # LaTeX font outline file extension
# Python/matplotlib functions
setp = "setp"            # matplotlib function plt.setp()
# GObject Introspection packages - legitimate package names, not typos
gir = "gir"              # Prevent "gir1.2-*" packages from being changed to "git1.2-*"

# Bandit security scanner configuration
[tool.bandit]
exclude_dirs = [
    "tests",
    "docs",
    ".venv",
    "output",
]
skips = [
    "B101",  # assert_used
    "B404",  # subprocess
    "B601",  # shell_injection
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_true
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
]

# Mermaid diagram configuration
[tool.mermaid]
theme = "dark"

[tool.mermaid.themeVariables]
primaryColor = "#1f2937"
primaryTextColor = "#ffffff"
primaryBorderColor = "#ffffff"
secondaryBorderColor = "#ffffff"
tertiaryBorderColor = "#ffffff"
secondaryTextColor = "#ffffff"
tertiaryTextColor = "#ffffff"
textColor = "#ffffff"
fontFamily = "Arial, sans-serif"
fontSize = "16px"

# Hatchling build configuration
[tool.hatch.build.targets.wheel]
packages = ["src/rxiv_maker"]

[tool.hatch.build.targets.wheel.force-include]
"src/tex" = "rxiv_maker/tex"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
    "/pyproject.toml"
]
