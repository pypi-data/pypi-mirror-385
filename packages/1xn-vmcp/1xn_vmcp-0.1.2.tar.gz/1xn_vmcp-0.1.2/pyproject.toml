[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "1xn-vmcp"
version = "0.1.2"
description = "Virtual MCP - Aggregate and manage MCP servers with a unified interface"
readme = "README.md"
requires-python = ">=3.10,<3.14"
license = {text = "MIT"}
authors = [
    {name = "Onexn labs", email = "contact@1xn.ai"}
]
keywords = ["mcp", "model-context-protocol", "ai", "agents", "tools"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "httpx>=0.25.0,<1.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    "python-multipart>=0.0.6",
    "websockets>=12.0,<13.0",
    "mcp>=1.0.0",
    "sqlalchemy>=2.0.0,<3.0.0",
    "alembic>=1.12.0,<2.0.0",
    "asyncpg>=0.29.0,<1.0.0",
    "psycopg2-binary>=2.9.9,<3.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "jinja2>=3.1.2,<4.0.0",
    "typer>=0.9.0,<1.0.0",
    "rich>=13.7.0,<14.0.0",
    "opentelemetry-api>=1.21.0,<2.0.0",
    "opentelemetry-sdk>=1.21.0,<2.0.0",
    "opentelemetry-instrumentation>=0.42b0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",
    "opentelemetry-instrumentation-asyncio>=0.42b0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.21.0",
    "opentelemetry-exporter-otlp-proto-http>=1.21.0",
    "starlette>=0.27.0",
    "Pillow>=10.0.0",
    "pandas>=2.0.0",
    "pytz>=2023.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "ruff>=0.1.7",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]

[project.scripts]
1xn-vmcp = "vmcp.cli.main:app"
vmcp = "vmcp.cli.main:app"
start_mcp_servers = "mcp_server.start_mcp_servers:main"
start_test_server = "test_server.test_http_server:main"

[project.urls]
Homepage = "https://github.com/vmcp/vmcp"
Documentation = "https://docs.vmcp.dev"
Repository = "https://github.com/vmcp/vmcp"
Issues = "https://github.com/vmcp/vmcp/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/vmcp", "mcp_server", "test_server"]


[tool.hatch.build.targets.sdist]
include = [
    "/backend",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 120
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=vmcp --cov-report=html --cov-report=term-missing --strict-markers --html=test_reports/results.html --self-contained-html"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.15.1",
]
