#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º Rich Markdown.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tests/test_all_themes.py

–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–∑ formatted_text.md –≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º–∞—Ö.
"""

import sys
from pathlib import Path

from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.theme import Theme

# Add src to path
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

from penguin_tamer.themes import get_available_themes, get_code_theme, THEMES  # noqa: E402


def load_test_markdown():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π markdown –∏–∑ —Ñ–∞–π–ª–∞."""
    test_file = Path(__file__).parent / "formatted_text.md"
    with open(test_file, 'r', encoding='utf-8') as f:
        return f.read()


def display_theme_sample(console: Console, theme_name: str, markdown_text: str):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü —Ç–µ–º—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º markdown.

    Args:
        console: Rich Console –æ–±—ä–µ–∫—Ç
        theme_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        markdown_text: –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –¥–ª—è markdown —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    theme_styles = THEMES.get(theme_name, THEMES["default"])
    theme = Theme(theme_styles)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞
    code_theme = get_code_theme(theme_name)

    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å–æ–ª—å —Å —Ç–µ–º–æ–π
    themed_console = Console(theme=theme)

    # –°–æ–∑–¥–∞—ë–º Markdown —Å –Ω—É–∂–Ω–æ–π —Ç–µ–º–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞
    markdown = Markdown(markdown_text, code_theme=code_theme)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
    console.print()
    console.print("=" * 80)
    console.print(f"[bold cyan]–¢–ï–ú–ê:[/bold cyan] [bold yellow]{theme_name.upper()}[/bold yellow]")
    console.print(f"[dim]Code theme: {code_theme}[/dim]")
    console.print("=" * 80)
    console.print()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º markdown —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π
    themed_console.print(markdown)

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    console.print()
    console.print("[dim]" + "‚îÄ" * 80 + "[/dim]")
    console.print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    console = Console()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π markdown
    try:
        markdown_text = load_test_markdown()
    except FileNotFoundError:
        console.print("[bold red]–û—à–∏–±–∫–∞:[/bold red] –§–∞–π–ª formatted_text.md –Ω–µ –Ω–∞–π–¥–µ–Ω!", style="bold red")
        sys.exit(1)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
    available_themes = get_available_themes()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    console.print()
    console.print(Panel.fit(
        "[bold cyan]üé® –¢–µ—Å—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º Rich Markdown[/bold cyan]\n"
        f"[dim]–î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–º: {len(available_themes)}[/dim]",
        border_style="cyan"
    ))
    console.print()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É
    for idx, theme_name in enumerate(available_themes, 1):
        console.print(f"[bold blue]({idx}/{len(available_themes)})[/bold blue]", end=" ")
        display_theme_sample(console, theme_name, markdown_text)

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        if idx < len(available_themes):
            try:
                console.input("[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º—ã...[/dim]")
            except (KeyboardInterrupt, EOFError):
                console.print("\n[yellow]–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
                break

    # –ò—Ç–æ–≥–∏
    console.print()
    console.print(Panel.fit(
        "[bold green]‚úì –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω[/bold green]\n"
        f"[dim]–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–º: {len(available_themes)}[/dim]",
        border_style="green"
    ))
    console.print()


if __name__ == "__main__":
    main()
