"""
–í–∏–∑—É–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–≤—É—Ö—Ñ–∞–∑–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
- –§–∞–∑—É 1: "Connecting..." (~2-3 —Å–µ–∫—É–Ω–¥—ã)
- –§–∞–∑—É 2: "Thinking..." (~2-3 —Å–µ–∫—É–Ω–¥—ã)
- –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏
"""

import sys
import json
import yaml
from pathlib import Path
from rich.console import Console

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))

from penguin_tamer.demo_system import create_demo_manager  # noqa: E402


def create_demo():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ-—Ñ–∞–π–ª."""
    test_dir = Path(__file__).parent / "test_visual_phases"
    test_dir.mkdir(exist_ok=True)
    (test_dir / "demo").mkdir(exist_ok=True)

    demo_data = {
        "version": "2.0",
        "events": [
            {"type": "input", "text": "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"},
            {"type": "output", "text": "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –æ—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞? üêô"}
        ]
    }

    demo_file = test_dir / "demo" / "test.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(demo_data, f, indent=2, ensure_ascii=False)

    return test_dir, demo_file


def visual_demo():
    """–í–∏–∑—É–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–≤—É—Ö—Ñ–∞–∑–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞."""
    console = Console()
    config_dir, demo_file = create_demo()
    config_demo_path = Path(__file__).parent / "src" / "penguin_tamer" / "demo_system" / "config_demo.yaml"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    with open(config_demo_path, 'r', encoding='utf-8') as f:
        config_data = yaml.safe_load(f)

    original_values = {
        'spinner_enabled': config_data['playback'].get('spinner_enabled', True),
        'spinner_phase1_text': config_data['playback'].get('spinner_phase1_text', 'Connecting...'),
        'spinner_phase1_min_duration': config_data['playback'].get('spinner_phase1_min_duration', 0.3),
        'spinner_phase1_max_duration': config_data['playback'].get('spinner_phase1_max_duration', 0.8),
        'spinner_phase2_text': config_data['playback'].get('spinner_phase2_text', 'Thinking...'),
        'spinner_phase2_min_duration': config_data['playback'].get('spinner_phase2_min_duration', 0.5),
        'spinner_phase2_max_duration': config_data['playback'].get('spinner_phase2_max_duration', 2.0),
    }

    try:
        print("\n" + "=" * 80)
        print("üé¨ –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–í–£–•–§–ê–ó–ù–û–ì–û –°–ü–ò–ù–ù–ï–†–ê")
        print("=" * 80)
        print("\n–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ:")
        print("  1Ô∏è‚É£  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å")
        print("  2Ô∏è‚É£  –°–ø–∏–Ω–Ω–µ—Ä —Ñ–∞–∑–∞ 1: 'Connecting...' (~2-3 —Å–µ–∫—É–Ω–¥—ã)")
        print("  3Ô∏è‚É£  –°–ø–∏–Ω–Ω–µ—Ä —Ñ–∞–∑–∞ 2: 'Thinking...' (~2-3 —Å–µ–∫—É–Ω–¥—ã)")
        print("  4Ô∏è‚É£  –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ LLM —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π")
        print("\n" + "-" * 80)
        input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∞–∑—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        config_data['playback']['spinner_enabled'] = True
        config_data['playback']['spinner_phase1_text'] = "Connecting..."
        config_data['playback']['spinner_phase1_min_duration'] = 2.0
        config_data['playback']['spinner_phase1_max_duration'] = 3.0
        config_data['playback']['spinner_phase2_text'] = "Thinking..."
        config_data['playback']['spinner_phase2_min_duration'] = 2.0
        config_data['playback']['spinner_phase2_max_duration'] = 3.0

        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)

        print("\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...\n")
        demo_manager = create_demo_manager(
            mode="play",
            console=console,
            config_dir=config_dir,
            demo_file=demo_file
        )
        demo_manager.play()

        print("\n" + "=" * 80)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 80)
        print("\nüéØ –í—ã –≤–∏–¥–µ–ª–∏:")
        print("  ‚úÖ –§–∞–∑—É 'Connecting...' —Å –∫—Ä—É—Ç—è—â–µ–π—Å—è –∞–Ω–∏–º–∞—Ü–∏–µ–π")
        print("  ‚úÖ –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ–∞–∑—É 'Thinking...'")
        print("  ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ –≤—Ç–æ—Ä–æ–π —Ñ–∞–∑–µ")
        print("  ‚úÖ –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ LLM")
        print("\nüí° –≠—Ç–æ —Ç–æ—á–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã!")

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for key, value in original_values.items():
            config_data['playback'][key] = value
        with open(config_demo_path, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False)


if __name__ == "__main__":
    visual_demo()
