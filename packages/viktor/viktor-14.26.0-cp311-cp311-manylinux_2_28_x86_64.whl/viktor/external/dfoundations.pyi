import abc
import pandas as pd
from ..core import Color, File
from ..geo import GEFData
from .external_program import ExternalProgram
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from datetime import datetime
from enum import Enum
from io import BytesIO, StringIO
from typing import Any

__all__ = ['BearingPilesCalculationOptions', 'BearingPilesModel', 'CPTRule', 'CalculationType', 'ConstructionSequence', 'DFoundationsAnalysis', 'DrivenBasePile', 'HShapedPile', 'HollowOpenPile', 'HollowPile', 'LostTipPile', 'MaxConeResistType', 'Metadata', 'OutputFileParser', 'PileLoadSettlementCurve', 'PileMaterial', 'PileSlipLayer', 'PileType', 'PileTypeClayLoamPeat', 'ProfileLayer', 'RectEnlPile', 'RectPile', 'RoundEnlPile', 'RoundPile', 'SectionPile', 'SoilType', 'TaperPile', 'TensionPilesCalculationOptions', 'TensionPilesModel', 'UserPile']

class DFoundationsAnalysis(ExternalProgram):
    '''
    DFoundationsAnalysis can be used to perform an analysis using D-Foundations on a third-party worker. To start
    an analysis call the method :meth:`~.ExternalProgram.execute`, with an appropriate timeout (in seconds).
    To retrieve the results call the method :meth:`get_output_file`, after :meth:`~.ExternalProgram.execute`.

    Note: the input for the BytesIO object should be of type bytes. You can convert a string to bytes by calling the
    method :meth:`~builtins.str.encode`. Default encoding is \'utf-8\'.

    Usage:

    .. code-block:: python

        input_file = BytesIO("dfoundations input file body".encode(\'utf-8\'))
        dfoundations_analysis = DFoundationsAnalysis(input_file=input_file)
        dfoundations_analysis.execute(timeout=10)
        output_file = dfoundations_analysis.get_output_file()

    Exceptions which can be raised during calculation:
    - :class:`viktor.errors.ExecutionError`: generic error. Error message provides more information
    '''
    input_file: Incomplete
    def __init__(self, input_file: BytesIO | File) -> None:
        """
        :param input_file: .foi input file.
        """
    def get_output_file(self, extension: str = '.fod', *, as_file: bool = False) -> BytesIO | File | None:
        """ Method can be used to retrieve the results generated by running an external analysis. Call method
         :meth:`~.ExternalProgram.execute` first and :meth:`get_output_file` afterwards.

        :param extension: extension of the file you want to return; one of: '.fos', '.fod', '.error.log', '.err'
        :param as_file: return as BytesIO (default) or File

        :returns:

            - File, if as_file = True
            - BytesIO, if as_file = False (default)

        """

class SoilType(Enum):
    GRAVEL: SoilType
    SAND: SoilType
    LOAM: SoilType
    CLAY: SoilType
    PEAT: SoilType

class MaxConeResistType(Enum):
    STANDARD: MaxConeResistType
    MANUAL: MaxConeResistType

class CPTRule(Enum):
    NEN: CPTRule
    NEN_STRESS: CPTRule
    CUR: CPTRule
    TYPE_3: CPTRule
    QC_ONLY: CPTRule

class ConstructionSequence(Enum):
    CPT_EXCAVATION_INSTALL: ConstructionSequence
    INSTALL_CPT_EXCAVATION: ConstructionSequence
    EXCAVATION_CPT_INSTALL: ConstructionSequence
    EXCAVATION_INSTALL_CPT: ConstructionSequence
    INSTALL_EXCAVATION_CPT: ConstructionSequence
    CPT_INSTALL_EXCAVATION: ConstructionSequence
    EXCAVATION_CPT_BOTH_BEFORE_AND_AFTER_INSTALL: ConstructionSequence

class _MainCalculationType(Enum):
    PRELIMINARY_DESIGN: _MainCalculationType
    VERIFICATION: _MainCalculationType

class CalculationType(Enum):
    DESIGN_CALCULATION: CalculationType
    COMPLETE_CALCULATION: CalculationType
    INDICATION_BEARING_CAPACITY: CalculationType
    BEARING_CAPACITY_AT_FIXED_PILE_TIP_LEVEL: CalculationType
    PILE_TIP_LEVEL_AND_NET_BEARING_CAPACITY: CalculationType

class _ReductionConeResistance(Enum):
    SAFE: _ReductionConeResistance
    BEGEMANN: _ReductionConeResistance
    MANUAL: _ReductionConeResistance

class PileType(Enum):
    PREFAB_CONCRETE: PileType
    CLOSED_STEEL: PileType
    DRIVEN_TUBE_BACK_DRIVING: PileType
    DRIVEN_TUBE_BACK_VIBRATION: PileType
    TAPERED_TIMBER: PileType
    STRAIGHT_TIMBER: PileType
    SCREW_LOST_TIP: PileType
    SCREW_WITH_GROUT: PileType
    PREFAB_WITH_GROUT: PileType
    PREFAB_WITHOUT_GROUT: PileType
    STEEL: PileType
    CONTINUOUS_FLIGHT_AUGER: PileType
    BORED_DRILLING: PileType
    BORED_SHELLING: PileType
    OPEN_STEEL: PileType
    MV: PileType
    MICRO_DOUBLE_EXTORTED: PileType
    MICRO_DOUBLE_NOT_EXTORTED: PileType
    MICRO_SINGLE_EXTORTED: PileType
    MICRO_SINGLE_NOT_EXTORTED: PileType
    MICRO_ANCHOR_BORED: PileType
    MICRO_ANCHOR_SCREWED: PileType
    MICRO_VIBRATED: PileType
    GROUTED_STEEL_PROFILE: PileType
    GROUTED_STEEL_PIPE: PileType
    USER_DEFINED_VIBRATING: PileType
    USER_DEFINED_LOW_VIBRATING: PileType
    USER_DEFINED: PileType

class PileTypeClayLoamPeat(Enum):
    ACCORDING_TO_STANDARD: PileTypeClayLoamPeat
    USER_DEFINED: PileTypeClayLoamPeat

class PileLoadSettlementCurve(Enum):
    ONE: PileLoadSettlementCurve
    TWO: PileLoadSettlementCurve
    THREE: PileLoadSettlementCurve

class PileMaterial(Enum):
    CONCRETE: PileMaterial
    STEEL: PileMaterial
    TIMBER: PileMaterial
    WOOD: PileMaterial
    USER_DEFINED: PileMaterial

class PileSlipLayer(Enum):
    NONE: PileSlipLayer
    SYNTHETIC: PileSlipLayer
    BENTONITE: PileSlipLayer
    BITUMEN: PileSlipLayer
    USER_DEFINED: PileSlipLayer

class Metadata:
    def __init__(self, file_name: str = '-', company: str = '-', title_1: str = '-', title_2: str = '-', geotechnical_consultant: str = '', design_engineer: str = '', principal: str = '', project_id: str = '', location: str = '', current_date: bool = False, current_time: bool = False) -> None:
        """ Data container for metadata to be added to the D-Foundations input file.

        :param file_name: file name, as shown in the input file header
        :param company: company name, as shown in the input file header
        :param title_1:
        :param title_2:
        :param geotechnical_consultant:
        :param design_engineer:
        :param principal:
        :param project_id:
        :param location:
        :param current_date: date, as shown in the input file header
        :param current_time: time, as shown in the input file header
        """

class _CalculationOptions:
    def __init__(self, calculation_type: CalculationType, rigid: bool, *, unit_weight_water: float = None, surcharge: float = None, max_allowed_settlement_str_geo: int = None, max_allowed_relative_rotation_str_geo: int = None, max_allowed_settlement_sls: int = None, max_allowed_relative_rotation_sls: int = None, xi3: float = None, xi4: float = None, gamma_b: float = None, gamma_s: float = None, gamma_fnk: float = None, gamma_m_var_qc: float = None, gamma_st: float = None, gamma_gamma: float = None, area: float = None, e_ea_gem: float = None, write_intermediate_results: bool = False, use_pile_group: bool = True, overrule_excavation: bool = False, suppress_qciii_reduction: bool = False, use_almere_rules: bool = False, use_extra_almere_rules: bool = False, use_compaction: bool = False, overrule_excess_pore_pressure: bool = True, trajectory_begin_end_interval: tuple[float, float, float] = None, net_bearing_capacity: int = None, cpt_test_level: float = None) -> None: ...
    @property
    def calculation_type(self) -> CalculationType: ...

class BearingPilesCalculationOptions(_CalculationOptions):
    def __init__(self, calculation_type: CalculationType, rigid: bool, max_allowed_settlement_str_geo: int = 150, max_allowed_settlement_sls: int = 150, max_allowed_relative_rotation_str_geo: int = 100, max_allowed_relative_rotation_sls: int = 300, *, xi3: float = None, xi4: float = None, gamma_b: float = None, gamma_s: float = None, gamma_fnk: float = None, area: float = None, e_ea_gem: float = None, write_intermediate_results: bool = False, use_pile_group: bool = True, overrule_excavation: bool = False, suppress_qciii_reduction: bool = False, use_almere_rules: bool = False, use_extra_almere_rules: bool = False, trajectory_begin_end_interval: tuple[float, float, float] = None, net_bearing_capacity: int = None, cpt_test_level: float = None) -> None:
        """

        :param calculation_type:
        :param rigid: True for rigid, False for non-rigid
        :param max_allowed_settlement_str_geo: [mm]
        :param max_allowed_relative_rotation_str_geo: 1 : [-]
        :param max_allowed_settlement_sls: [mm]
        :param max_allowed_relative_rotation_sls: 1 : [-]
        :param xi3: ξ_3 [-]
        :param xi4: ξ_4 [-]
        :param gamma_b: γ_b [-]
        :param gamma_s: γ_s [-]
        :param gamma_fnk: γ_f;nk [-]
        :param area: [m²]
        :param e_ea_gem: E_ea;gem [kN/m2]
        :param write_intermediate_results:
        :param use_pile_group:
        :param overrule_excavation:
        :param suppress_qciii_reduction:
        :param use_almere_rules:
        :param use_extra_almere_rules:
        :param trajectory_begin_end_interval: tuple([m], [m], [m])
        :param net_bearing_capacity: [kN]
        :param cpt_test_level: [m]

        :raises ModelError:
            - if 'calculation_type' is DESIGN_CALCULATION or INDICATION_BEARING_CAPACITY or
              PILE_TIP_LEVEL_AND_NET_BEARING_CAPACITY and trajectory_begin_end_interval' is not set.
            - if the number of iterations > 151, based on the provided 'trajectory_begin_end_interval'.
            - if 'calculation_type' is PILE_TIP_LEVEL_AND_NET_BEARING_CAPACITY and 'net_bearing_capacity' is not set.
            - if 'calculation_type' is DESIGN_CALCULATION or COMPLETE_CALCULATION and 'cpt_test_level' is not set.

        """

class TensionPilesCalculationOptions(_CalculationOptions):
    def __init__(self, calculation_type: CalculationType, rigid: bool, unit_weight_water: float = 9.81, surcharge: float = 0.0, *, xi3: float = None, xi4: float = None, gamma_m_var_qc: float = None, gamma_st: float = None, gamma_gamma: float = None, use_compaction: bool = False, overrule_excavation: bool = False, overrule_excess_pore_pressure: bool = True, trajectory_begin_end_interval: tuple[float, float, float] = None, net_bearing_capacity: int = None) -> None:
        """ Data container for the calculation options for a Tension Piles (EC7-NL) model.

        :param calculation_type: valid types:

            - CalculationType.INDICATION_BEARING_CAPACITY
            - CalculationType.BEARING_CAPACITY_AT_FIXED_PILE_TIP_LEVEL
            - CalculationType.PILE_TIP_LEVEL_AND_NET_BEARING_CAPACITY

        :param rigid: True for rigid, False for non-rigid
        :param unit_weight_water: [kN/m3]
        :param surcharge: [kN/m2]
        :param xi3: ξ_3 [-]
        :param xi4: ξ_4 [-]
        :param gamma_m_var_qc: γ_m;var;qc [-]
        :param gamma_st: γ_st [-]
        :param gamma_gamma: γ_γ [-]
        :param overrule_excavation:
        :param use_compaction:
        :param overrule_excess_pore_pressure:
        :param trajectory_begin_end_interval: tuple([m], [m], [m])
        :param net_bearing_capacity: [kN]

        :raise ModelError:
            - if 'calculation_type' is not one of the valid types.
            - if 'calculation_type' is INDICATION_BEARING_CAPACITY or PILE_TIP_LEVEL_AND_NET_BEARING_CAPACITY and
              'trajectory_begin_end_interval' is not set.
            - if the number of iterations > 151, based on the provided 'trajectory_begin_end_interval'.
            - if 'calculation_type' is PILE_TIP_LEVEL_AND_NET_BEARING_CAPACITY and 'net_bearing_capacity' is not set.

        """

class _Material:
    def __init__(self, soil_type: SoilType, gam_dry: float, gam_wet: float, color: Color = None, *, e0: float = 0.001001, diameter_d50: float = 0.2, min_void_ratio: float = 0.4, max_void_ratio: float = 0.8, cohesion: float = 0.0, phi: float = 20.0, cu: float = 0.0, max_cone_resist_type: MaxConeResistType = ..., max_cone_resist: float = 0.0, use_tension: bool = True, ca: float = 1.0, cc: float = 1.0) -> None: ...
    @property
    def color(self) -> Color: ...
    def serialize(self) -> dict[str, Any]: ...

class _CPT:
    def __init__(self, measurements: list[list[float]], ground_level: float, rule: CPTRule = ..., min_layer_thickness: float = 0.1, *, imported: bool, project_name: str = 'Unknown', project_id: str = '', client_name: str = 'Unknown', file_date: datetime = None, gef_version: str = 'Unknown', x: float = 987000000.0, y: float = 987000000.0, excavation_depth: float = 0.0) -> None: ...
    def serialize(self) -> dict[str, Any]: ...

class ProfileLayer:
    def __init__(self, top_level: float, material: str, ad_pore_pressure_at_top: float = 0.0, ad_pore_pressure_at_bottom: float = 0.0, ocr: float = 1.0) -> None:
        """ Data container for a single layer within a profile.
        
        :param top_level: [m]
        :param material: name of the material.
        :param ad_pore_pressure_at_top: [kN/m2]. Tensions Piles (EC7-NL) model only. Ignored for other model types.
        :param ad_pore_pressure_at_bottom: [kN/m2]. Tensions Piles (EC7-NL) model only. Ignored for other model types.
        :param ocr: [-]. Tensions Piles (EC7-NL) model only. Ignored for other model types.
        """
    @property
    def material(self) -> str: ...

class _Profile:
    def __init__(self, cpt: _CPT, layers: list[ProfileLayer], x: float, y: float, phreatic_level: float, *, pile_tip_level: float = None, overconsolidation_ratio: float = None, top_positive_skin_friction: float = None, bottom_negative_skin_friction: float = None, expected_ground_level_settlement: float = None, top_tension_zone: float = None) -> None: ...
    @property
    def layers(self) -> list[ProfileLayer]: ...
    def serialize(self, name: str) -> dict[str, Any]: ...

class _PileShape(metaclass=ABCMeta):
    class _Shape(Enum):
        ROUND: _PileShape._Shape
        RECT: _PileShape._Shape
        ROUND_ENL: _PileShape._Shape
        RECT_ENL: _PileShape._Shape
        TAPER: _PileShape._Shape
        HOLLOW: _PileShape._Shape
        LOST_TIP: _PileShape._Shape
        DRIVEN: _PileShape._Shape
        SECTION: _PileShape._Shape
        HOL_OPEN: _PileShape._Shape
        H: _PileShape._Shape
        USER_DEFINED: _PileShape._Shape

class RectPile(_PileShape):
    width: Incomplete
    length: Incomplete
    def __init__(self, width: float, length: float) -> None:
        """ Rectangular pile.

        :param width: [m]
        :param length: [m]
        """

class RectEnlPile(_PileShape):
    base_width: Incomplete
    base_length: Incomplete
    base_height: Incomplete
    shaft_width: Incomplete
    shaft_length: Incomplete
    def __init__(self, base_width: float, base_length: float, base_height: float, shaft_width: float, shaft_length: float) -> None:
        """ Round pile with enlarged base.

        :param base_width: [m]
        :param base_length: [m]
        :param base_height: [m]
        :param shaft_width: [m]. Must be smaller than 'base_width'.
        :param shaft_length: [m]. Must be smaller than 'base_length'.

        :raise ModelError:
            - if 'shaft_width' is not smaller than 'base_width'.
            - if 'shaft_length' is not smaller than 'base_length'.
        """

class SectionPile(RectPile):
    """ Section pile. """

class UserPile(_PileShape):
    circumference: Incomplete
    cross_section: Incomplete
    def __init__(self, circumference: float, cross_section: float) -> None:
        """ User defined pile.

        :param circumference: [m]
        :param cross_section: [m2]
        """

class RoundPile(_PileShape):
    diameter: Incomplete
    def __init__(self, diameter: float) -> None:
        """ Round pile.

        :param diameter: [m]
        """

class TaperPile(_PileShape):
    diameter_tip: Incomplete
    increase: Incomplete
    def __init__(self, diameter_tip: float, increase: float) -> None:
        """ Round tapered pile.

        :param diameter_tip: [m]
        :param increase: [m/m']
        """

class HollowPile(_PileShape):
    external_diameter: Incomplete
    wall_thickness: Incomplete
    def __init__(self, external_diameter: float, wall_thickness: float) -> None:
        """ Round hollow pile with closed base.

        :param external_diameter: [m]
        :param wall_thickness: [mm]. Must be smaller than half of 'external_diameter'.

        :raise ModelError: if 'wall_thickness' is not smaller than half of 'external_diameter'.
        """
    @property
    def internal_diameter(self) -> float: ...

class HollowOpenPile(_PileShape):
    external_diameter: Incomplete
    wall_thickness: Incomplete
    def __init__(self, external_diameter: float, wall_thickness: float) -> None:
        """ Round open-ended hollow pile.

        :param external_diameter: [m]
        :param wall_thickness: [mm]. Must be smaller than half of 'external_diameter'.

        :raise ModelError: if 'wall_thickness' is not smaller than half of 'external_diameter'.
        """
    @property
    def internal_diameter(self) -> float: ...

class LostTipPile(_PileShape):
    base_diameter: Incomplete
    pile_diameter: Incomplete
    def __init__(self, base_diameter: float, pile_diameter: float) -> None:
        """ Round pile with lost tip.

        :param base_diameter: [m]
        :param pile_diameter: [m]. Must be smaller than 'base_diameter'.

        :raise ModelError: if 'pile_diameter' is not smaller than 'base_diameter'.
        """

class RoundEnlPile(LostTipPile):
    base_height: Incomplete
    def __init__(self, base_diameter: float, pile_diameter: float, base_height: float) -> None:
        """ Round pile with enlarged base.

        :param base_diameter: [m]
        :param pile_diameter: [m]. Must be smaller than 'base_diameter'.
        :param base_height: [m]

        :raise ModelError: if 'pile_diameter' is not smaller than 'base_diameter'.
        """

class DrivenBasePile(RoundEnlPile):
    """ Round pile with in situ formed base. """

class HShapedPile(_PileShape):
    height: Incomplete
    width: Incomplete
    thickness_web: Incomplete
    thickness_flange: Incomplete
    def __init__(self, height: float, width: float, thickness_web: float, thickness_flange: float) -> None:
        """ H-shaped profile.

        :param height: [m]
        :param width: [m]
        :param thickness_web: [mm]. Must be smaller than 'width'.
        :param thickness_flange: [mm]. Must be smaller than half of 'height'.

        :raise ModelError:
            - if 'thickness_web' is not smaller than 'width'.
            - if 'thickness_flange' is not smaller than half of 'height'.
        """

class _PileTypeConfig(metaclass=ABCMeta):
    def __init__(self, type_sand_gravel: PileType = None, type_clay_loam_peat: PileTypeClayLoamPeat = None, material: PileMaterial = None, factor_sand_gravel: float = None, factor_clay_loam_peat: float = None, material_property: float = None) -> None: ...
    @abstractmethod
    def validate(self, shape: type[_PileShape]) -> None: ...
    def serialize(self) -> dict[str, Any]: ...

class _BearingPileTypeConfig(_PileTypeConfig):
    def __init__(self, pile_type: PileType, slip_layer: PileSlipLayer, type_sand_gravel: PileType = None, type_clay_loam_peat: PileTypeClayLoamPeat = None, type_p: PileType = None, load_settlement_curve: PileLoadSettlementCurve = None, material: PileMaterial = None, factor_sand_gravel: float = None, factor_clay_loam_peat: float = None, factor_pile_class: float = None, e_modulus_material: float = None, slip_layer_adhesion: float = None, use_pre_2016: bool = False, as_prefab: bool = False, qciii_reduction: float = None, overrule_tip_section_factor: float = None, overrule_tip_shape_factor: float = None) -> None: ...
    def validate(self, shape: type[_PileShape]) -> None: ...
    def serialize(self) -> dict[str, Any]: ...

class _TensionPileTypeConfig(_PileTypeConfig):
    def __init__(self, type_sand_gravel: PileType, type_clay_loam_peat: PileTypeClayLoamPeat, material: PileMaterial, factor_sand_gravel: float = None, factor_clay_loam_peat: float = None, unit_weight_material: float = None) -> None: ...
    def validate(self, shape: type[_PileShape]) -> None: ...

class _PileType:
    def __init__(self, shape: _PileShape, config: _PileTypeConfig) -> None: ...
    def serialize(self, name: str) -> dict[str, Any]: ...

class _Pile:
    def __init__(self, x: float, y: float, *, pile_head_level: float = 0.0, surcharge: float = 0.0, limit_state_str_geo: float = 0.0, serviceability_limit_state: float = 0.0, load_max_min: tuple[float, float] = None) -> None: ...
    def serialize(self, name: str) -> dict[str, Any]: ...

class _Model(metaclass=ABCMeta):
    def __init__(self, construction_sequence: ConstructionSequence, calculation_options: _CalculationOptions, excavation_level: float, reduction_cone_resistance: float = None, *, create_default_materials: bool = True) -> None: ...
    @property
    def materials(self) -> dict[str, dict[str, Any]]:
        """ Lists all materials currently in de model. """
    @property
    def profiles(self) -> list[dict[str, Any]]:
        """ Lists all profiles currently in de model. """
    @property
    def pile_types(self) -> list[dict[str, Any]]:
        """ Lists all pile types currently in de model. """
    @property
    def piles(self) -> list[dict[str, Any]]:
        """ Lists all piles currently in de model. """
    def generate_input_file(self, metadata: Metadata = None, *, as_file: bool = False) -> File | BytesIO:
        """ Generate a D-Foundations input file.

        .. note:: This method needs to be mocked in (automated) unit and integration tests.

        :param metadata: Metadata which will be written to the input file. If no metadata is provided, default data
          will be used.
        :param as_file: return as BytesIO (default) or File
        """

class BearingPilesModel(_Model):
    def __init__(self, construction_sequence: ConstructionSequence, calculation_options: BearingPilesCalculationOptions, excavation_level: float, reduction_cone_resistance: float = None, *, create_default_materials: bool = True) -> None:
        """ Create a Bearing Piles (EC7-NL) model.

        :param construction_sequence:
        :param calculation_options:
        :param excavation_level: [m]
        :param reduction_cone_resistance: Distance edge pile to excavation boundary [m] to implement 'Begemann'.
          'None' to implement 'Safe (NEN)'.
        :param create_default_materials: whether to start with the default D-Foundations materials.

        The default materials are:

            - BClay, clean, moderate
            - BClay, clean, modstiff
            - BClay, clean, stiff
            - BClay, clean, weak
            - BClay, sl san, moderate
            - BClay, sl san, modstiff
            - BClay, sl san, stiff
            - BClay, sl san, weak
            - BGravel, clean, moderate
            - BGravel, clean, stiff
            - BGravel, ve sil, moderate
            - BGravel, ve sil, stiff
            - BLoam, clean, moderate
            - BLoam, clean, modstiff
            - BLoam, clean, stiff
            - BLoam, clean, weak
            - BLoam, sl san, moderate
            - BLoam, sl san, modstiff
            - BLoam, sl san, stiff
            - BLoam, sl san, weak
            - BPeat, sl san, moderate
            - BPeat, sl san, stiff
            - BPeat, sl san, weak
            - BSand, clean, loose
            - BSand, clean, moderate
            - BSand, clean, stiff
            - BSand, ve sil, loose
            - BSand, ve sil, moderate
            - BSand, ve sil, stiff
            - Clay, clean, moderate
            - Clay, clean, stiff
            - Clay, clean, weak
            - Clay, organ, moderate
            - Clay, organ, weak
            - Clay, sl san, moderate
            - Clay, sl san, stiff
            - Clay, sl san, weak
            - Clay, ve san, stiff
            - Gravel, sl sil, loose
            - Gravel, sl sil, moderate
            - Gravel, sl sil, stiff
            - Gravel, ve sil, loose
            - Gravel, ve sil, moderate
            - Gravel, ve sil, stiff
            - Loam, sl san, moderate
            - Loam, sl san, stiff
            - Loam, sl san, weak
            - Loam, ve san, stiff
            - Peat, mod pl, moderate
            - Peat, not pl, weak
            - Sand, clean, loose
            - Sand, clean, moderate
            - Sand, clean, stiff
            - Sand, sl sil, moderate
            - Sand, ve sil, loose

        .. autoattribute:: materials
        .. autoattribute:: profiles
        .. autoattribute:: pile_types
        .. autoattribute:: piles
        .. automethod:: generate_input_file
        """
    def create_material(self, name: str, soil_type: SoilType, gamma_unsat: float, gamma_sat: float, friction_angle: float, diameter_d50: float = 0.2, color: Color = None) -> None:
        """ Create a material with the given name and properties.

        :param name: name of the material to create (max. 25 characters)
        :param soil_type: [-]
        :param gamma_unsat: gamma-unsaturated, dry [kN/m³]
        :param gamma_sat: gamma-saturated, wet [kN/m³]
        :param friction_angle: phi [degree]
        :param diameter_d50: median [mm]
        :param color: color for visualization in deltares software (None for default color 'white')

        :raise ModelError:
            - if material with given name already exists in the model
            - if name is longer than 25 characters
        """
    def create_profile(self, name: str, layers: list[ProfileLayer], x: float, y: float, measurements: list[tuple[float, float]], phreatic_level: float, pile_tip_level: float, overconsolidation_ratio: float, top_positive_skin_friction: float, bottom_negative_skin_friction: float, expected_ground_level_settlement: float, *, cpt_rule: CPTRule = ..., min_layer_thickness: float = 0.1) -> None:
        """ Create a profile manually.

        :param name: name of the profile (must be unique).
        :param layers: list of layers.
        :param x: [m]
        :param y: [m]
        :param measurements: list of measurement data (level [m], qc-value [MPa]).
        :param phreatic_level: [m]
        :param pile_tip_level: [m]
        :param overconsolidation_ratio: overconsolidation ratio of bearing zone [-]
        :param top_positive_skin_friction: top of positive skin friction [m]
        :param bottom_negative_skin_friction: bottom of negative skin friction [m]
        :param expected_ground_level_settlement: [m]
        :param cpt_rule:
        :param min_layer_thickness: [m]

        :raise ModelError:
            - if max. number of profiles (350) was reached.
            - if profile with the given name already exists.
            - if a material exists within one of the layers of which the name does not exist in the model.
            - if measurements exceeds max. number of rows (5000).
            - if layers exceeds max. number for a single profile (100).
        """
    def import_profile(self, cpt: GEFData, layers: list[ProfileLayer], x: float, y: float, phreatic_level: float, pile_tip_level: float, overconsolidation_ratio: float, top_positive_skin_friction: float, bottom_negative_skin_friction: float, expected_ground_level_settlement: float, name: str = None, manual_ground_level: float = None, *, cpt_rule: CPTRule = ..., min_layer_thickness: float = 0.1) -> None:
        """ Create a profile by importing a CPT-file.

        :param cpt: CPT file to import.
        :param layers: list of layers.
        :param x: [m]
        :param y: [m]
        :param phreatic_level: [m]
        :param pile_tip_level: [m]
        :param overconsolidation_ratio: overconsolidation ratio of bearing zone [-]
        :param top_positive_skin_friction: top of positive skin friction [m]
        :param bottom_negative_skin_friction: bottom of negative skin friction [m]
        :param expected_ground_level_settlement: [m]
        :param name: name of the profile (must be unique). None for default (name of the cpt).
        :param manual_ground_level: set to override the ground level [m] from the cpt.
        :param cpt_rule:
        :param min_layer_thickness: [m]

        :raise ModelError:
            - if max. number of profiles (350) was reached.
            - if profile with the given name already exists.
            - if a material exists within one of the layers of which the name does not exist in the model.
            - if measurements exceeds max. number of rows (5000).
            - if layers exceeds max. number for a single profile (100).
            - if ground level could not be read from cpt file.
        """
    def create_pile_type(self, name: str, shape: _PileShape, pile_type: PileType, slip_layer: PileSlipLayer, type_sand_gravel: PileType = None, type_clay_loam_peat: PileTypeClayLoamPeat = None, type_p: PileType = None, load_settlement_curve: PileLoadSettlementCurve = None, material: PileMaterial = None, factor_sand_gravel: float = None, factor_clay_loam_peat: float = None, factor_pile_class: float = None, e_modulus: float = None, slip_layer_adhesion: float = None, *, use_pre_2016: bool = False, as_prefab: bool = False, qciii_reduction: float = None, overrule_tip_section_factor: float = None, overrule_tip_shape_factor: float = None) -> None:
        """ Create a pile type with the given properties.

        :param name: name of the pile type. Must be unique. Max. 10 characters.
        :param shape: pile type shape class instance. See below for possible shapes.
        :param pile_type: predefined/user-defined pile type. Only certain types are valid in combination with the
          provided 'shape'. For more information on valid combinations, please refer to the D-Foundations software.
        :param slip_layer:
        :param type_sand_gravel: pile type for α_s sand/gravel
        :param type_clay_loam_peat: pile type for α_s clay/loam/peat
        :param type_p: pile type for α_p
        :param load_settlement_curve:
        :param material:
        :param factor_sand_gravel: α_s [-]. Only required if 'type_sand_gravel' is of type user-defined.
        :param factor_clay_loam_peat: α_s [-]. Only required if 'type_clay_loam_peat' is of type user-defined.
        :param factor_pile_class: α_p [-]. Only required if 'type_p' is of type user-defined.
        :param e_modulus: Young's modulus [kN/m2]. Only required if 'material' is of type user-defined.
        :param slip_layer_adhesion: Representative cohesion [kN/m2]. Only required if 'slip_layer' is of type
          user-defined.
        :param use_pre_2016:
        :param as_prefab:
        :param qciii_reduction: [%]
        :param overrule_tip_section_factor: Pile top cross section factor (s) [-]
        :param overrule_tip_shape_factor: Pile tip shape factor (β) [-]

        :raise ModelError:
            - if 'pile_type' is of type user-defined and 'type_sand_gravel' is not set.
            - if 'pile_type' is of type user-defined and 'type_clay_loam_peat' is not set.
            - if 'pile_type' is of type user-defined and 'material' is not set.
            - if 'pile_type' is of type user-defined and 'type_p' is not set.
            - if 'pile_type' is of type user-defined and 'load_settlement_curve' is not set.
            - if 'type_sand_gravel' is of type user-defined and 'factor_sand_gravel' is not set.
            - if 'type_clay_loam_peat' is of type user-defined and 'factor_clay_loam_peat' is not set.
            - if 'material' is of type user-defined and 'e_modulus' is not set.
            - if 'type_p' is of type user-defined and 'factor_pile_class' is not set.
            - if 'slip_layer' is of type user-defined and 'slip_layer_adhesion' is not set.
            - if an invalid 'shape' is provided.
            - if a 'pile_type' is provided that is invalid in combination with the given 'shape'.
            - if one of the types PileType.USER_DEFINED_VIBRATING or PileType.USER_DEFINED_LOW_VIBRATING is selected
              for 'type_sand_gravel' or 'type_p' (no valid options).
            - if a pile type with the give name already exists.
            - if 'factor_sand_gravel', 'factor_clay_loam_peat' or 'factor_pile_class' is outside valid range 0-9.
            - if 'overrule_tip_section_factor' or 'overrule_tip_shape_factor' is outside valid range 0-10.

        Possible shapes are:

            - RectPile
            - RectEnlPile
            - SectionPile
            - RoundPile
            - TaperPile
            - HollowPile
            - HollowOpenPile
            - RoundEnlPile
            - LostTipPile
            - DrivenBasePile
            - HShapedPile
        """
    def create_pile(self, name: str, x: float, y: float, pile_head_level: float, surcharge: float, limit_state_str_geo: float, serviceability_limit_state: float) -> None:
        """ Create a pile with given properties.

        :param name: name of the pile. Must be unique. Max. 10 characters.
        :param x: [m]
        :param y: [m]
        :param pile_head_level: [m R.L.]
        :param surcharge: [kN/m2]
        :param limit_state_str_geo: Limit state STR/GEO [kN]
        :param serviceability_limit_state: [kN]

        :raise ModelError:
            - if pile with given name already exists.
            - if name exceeds the max. number of characters (10).
        """

class TensionPilesModel(_Model):
    def __init__(self, construction_sequence: ConstructionSequence, calculation_options: TensionPilesCalculationOptions, excavation_level: float, reduction_cone_resistance: float = None, *, create_default_materials: bool = True) -> None:
        """ Create a Tension Piles (EC7-NL) model.

        :param construction_sequence:
        :param calculation_options:
        :param excavation_level: [m]
        :param reduction_cone_resistance: Distance edge pile to excavation boundary [m] to implement 'Begemann'.
          'None' to implement 'Safe (NEN)'.
        :param create_default_materials: whether to start with the default D-Foundations materials.

        The default materials are:

            - BClay, clean, moderate
            - BClay, clean, modstiff
            - BClay, clean, stiff
            - BClay, clean, weak
            - BClay, sl san, moderate
            - BClay, sl san, modstiff
            - BClay, sl san, stiff
            - BClay, sl san, weak
            - BGravel, clean, moderate
            - BGravel, clean, stiff
            - BGravel, ve sil, moderate
            - BGravel, ve sil, stiff
            - BLoam, clean, moderate
            - BLoam, clean, modstiff
            - BLoam, clean, stiff
            - BLoam, clean, weak
            - BLoam, sl san, moderate
            - BLoam, sl san, modstiff
            - BLoam, sl san, stiff
            - BLoam, sl san, weak
            - BPeat, sl san, moderate
            - BPeat, sl san, stiff
            - BPeat, sl san, weak
            - BSand, clean, loose
            - BSand, clean, moderate
            - BSand, clean, stiff
            - BSand, ve sil, loose
            - BSand, ve sil, moderate
            - BSand, ve sil, stiff
            - Clay, clean, moderate
            - Clay, clean, stiff
            - Clay, clean, weak
            - Clay, organ, moderate
            - Clay, organ, weak
            - Clay, sl san, moderate
            - Clay, sl san, stiff
            - Clay, sl san, weak
            - Clay, ve san, stiff
            - Gravel, sl sil, loose
            - Gravel, sl sil, moderate
            - Gravel, sl sil, stiff
            - Gravel, ve sil, loose
            - Gravel, ve sil, moderate
            - Gravel, ve sil, stiff
            - Loam, sl san, moderate
            - Loam, sl san, stiff
            - Loam, sl san, weak
            - Loam, ve san, stiff
            - Peat, mod pl, moderate
            - Peat, not pl, weak
            - Sand, clean, loose
            - Sand, clean, moderate
            - Sand, clean, stiff
            - Sand, sl sil, moderate
            - Sand, ve sil, loose

        .. autoattribute:: materials
        .. autoattribute:: profiles
        .. autoattribute:: pile_types
        .. autoattribute:: piles
        .. automethod:: generate_input_file
        """
    def create_material(self, name: str, soil_type: SoilType, gamma_unsat: float, gamma_sat: float, friction_angle: float, diameter_d50: float = 0.2, max_cone_resist_type: MaxConeResistType = ..., max_cone_resist: float = 0.0, apply_tension: bool = True, min_void_ratio: float = 0.4, max_void_ratio: float = 0.8, color: Color = None) -> None:
        """ Create a material with the given name and properties.

        :param name: name of the material to create (max. 25 characters)
        :param color: color for visualization in deltares software (None for default color 'white')
        :param soil_type: [-]
        :param gamma_unsat: gamma-unsaturated, dry [kN/m³]
        :param gamma_sat: gamma-saturated, wet [kN/m³]
        :param friction_angle: phi [degree]
        :param diameter_d50: median [mm]
        :param max_cone_resist_type: [-]
        :param max_cone_resist: [MPa]
        :param apply_tension: True (default) / False
        :param min_void_ratio: [-]
        :param max_void_ratio: [-]

        :raise ModelError:
            - if material with given name already exists in the model
            - if name is longer than 25 characters
        """
    def create_profile(self, name: str, layers: list[ProfileLayer], x: float, y: float, measurements: list[tuple[float, float]], phreatic_level: float, pile_tip_level: float, top_tension_zone: float, *, cpt_rule: CPTRule = ..., min_layer_thickness: float = 0.1) -> None:
        """ Create a profile manually.

        :param name: name of the profile (must be unique).
        :param layers: list of layers.
        :param x: [m]
        :param y: [m]
        :param measurements: list of measurement data (level [m], qc-value [MPa]).
        :param phreatic_level: [m]
        :param pile_tip_level: [m]
        :param top_tension_zone: Top of tension zone [m]
        :param cpt_rule:
        :param min_layer_thickness: [m]

        :raise ModelError:
            - if max. number of profiles (350) was reached.
            - if profile with the given name already exists.
            - if a material exists within one of the layers of which the name does not exist in the model.
            - if measurements exceeds max. number of rows (5000).
            - if layers exceeds max. number for a single profile (100).
        """
    def import_profile(self, cpt: GEFData, layers: list[ProfileLayer], x: float, y: float, phreatic_level: float, pile_tip_level: float, top_tension_zone: float, name: str = None, manual_ground_level: float = None, *, cpt_rule: CPTRule = ..., min_layer_thickness: float = 0.1) -> None:
        """ Create a profile by importing a CPT-file.

        :param cpt: CPT file to import.
        :param layers: list of layers.
        :param x: [m]
        :param y: [m]
        :param phreatic_level: [m]
        :param pile_tip_level: [m]
        :param top_tension_zone: Top of tension zone [m]
        :param name: name of the profile (must be unique). None for default (name of the cpt).
        :param manual_ground_level: set to override the ground level [m] from the cpt.
        :param cpt_rule:
        :param min_layer_thickness: [m]

        :raise ModelError:
            - if max. number of profiles (350) was reached.
            - if profile with the given name already exists.
            - if a material exists within one of the layers of which the name does not exist in the model.
            - if measurements exceeds max. number of rows (5000).
            - if layers exceeds max. number for a single profile (100).
            - if ground level could not be read from cpt file.
        """
    def create_pile_type(self, name: str, shape: _PileShape, type_sand_gravel: PileType, type_clay_loam_peat: PileTypeClayLoamPeat, material: PileMaterial, factor_sand_gravel: float = None, factor_clay_loam_peat: float = None, unit_weight_material: float = None) -> None:
        """ Create a pile type with the given properties.

        :param name: name of the pile type. Must be unique. Max. 10 characters.
        :param shape: pile type shape class instance. See below for possible shapes.
        :param type_sand_gravel: pile type for α_t sand/gravel. predefined/user-defined pile type.
         Only certain types are valid in combination with the provided 'shape'. For more information on valid
         combinations, please refer to the D-Foundations software.
        :param type_clay_loam_peat: pile type for α_t clay/loam/peat.
        :param material:
        :param factor_sand_gravel: α_t [-]. Only required if 'type_sand_gravel' is of type user-defined.
        :param factor_clay_loam_peat: α_t [-]. Only required if 'type_sand_gravel' is of type user-defined.
        :param unit_weight_material: unit weight pile material [kN/m3]. Only required if 'material' is of type
          ser-defined.

        :raise ModelError:
            - if 'type_sand_gravel' is of type user-defined and 'factor_sand_gravel' is not set.
            - if 'type_clay_loam_peat' is of type user-defined and 'factor_clay_loam_peat' is not set.
            - if 'material' is of type user-defined and 'unit_weight_material' is not set.
            - if an invalid 'shape' is provided.
            - if a 'type_sand_gravel' is provided that is invalid in combination with the given 'shape'.
            - if a pile type with the give name already exists.
            - if 'factor_sand_gravel' or 'factor_clay_loam_peat' is outside valid range 0-9.

        Possible shapes are:

            - RectPile
            - RectEnlPile
            - UserPile
            - RoundPile
            - TaperPile
            - HollowPile
            - HollowOpenPile
            - RoundEnlPile
            - LostTipPile
            - DrivenBasePile
            - HShapedPile
        """
    def create_pile(self, name: str, x: float, y: float, pile_head_level: float, load_max_min: tuple[float, float] = None) -> None:
        """ Create a pile with given properties.

        :param name: name of the pile. Must be unique. Max. 10 characters.
        :param x: [m]
        :param y: [m]
        :param pile_head_level: [m R.L.]
        :param load_max_min: (max. load [kN], min. load [kN]). None for 'No' use of alternating loads.

        :raise ModelError:
            - if pile with given name already exists.
            - if name exceeds the max. number of characters (10).
        """

class OutputFileParser(metaclass=abc.ABCMeta):
    """ Helper class to extract results from a D-Foundations output file (.fod).

    Currently the following versions are (partly) supported:

    - v17:
        - Tension Piles model
        - Bearing Piles model - Preliminary Design (calculation options only)
    - v19:
        - Tension Piles model
        - Bearing Piles model - Verification

    Example usage:

    .. code-block:: python

        parser = OutputFileParser(fod_file)
        calculation_parameters = parser.calculation_parameters
        results = parser.results(False)
    """
    def __new__(cls, fod_file: StringIO) -> Any: ...
    def __init__(self, fod_file: StringIO) -> None:
        """

        :param fod_file: D-Foundations output file (.fod)
        """
    @property
    def raw_results(self) -> str: ...
    @property
    @abstractmethod
    def calculation_parameters(self) -> dict[str, float | bool]:
        """Calculation parameters."""
    @abstractmethod
    def results(self, as_pandas: bool = True) -> dict[str, pd.DataFrame | dict[str, Any]]:
        """ All result data.

        :param as_pandas: True to return the results as a dictionary of pandas DataFrame objects. False for dicts.
        """

class _ParserV19:
    """ Automatic parsing of pandas data frames for v19. """

class _PreliminaryBearingParserV17(OutputFileParser):
    @property
    def calculation_parameters(self) -> dict[str, float | bool]: ...
    def results(self, as_pandas: bool = True) -> dict[str, pd.DataFrame | dict[str, Any]]: ...

class _PreliminaryTensionParserV17(OutputFileParser):
    """
    D-Foundations parser for Tension Piles (EC7-NL) model
    Currently supports only Eurocode 7 Design Results
    """
    @property
    def calculation_parameters(self) -> dict[str, float | bool]: ...
    def results(self, as_pandas: bool = True) -> dict[str, Any]: ...

class _VerificationParserV17(OutputFileParser):
    def __init__(self, fod_file: StringIO) -> None: ...
    @property
    def calculation_parameters(self) -> dict[str, float | bool]: ...
    def results(self, as_pandas: bool = True) -> dict[str, pd.DataFrame | dict[str, Any]]: ...

class _PreliminaryBearingParserV19(OutputFileParser, _ParserV19):
    def __init__(self, fod_file: StringIO) -> None: ...
    @property
    def calculation_parameters(self) -> dict[str, float | bool]: ...
    def results(self, as_pandas: bool = True) -> dict[str, pd.DataFrame | dict[str, Any]]: ...

class _PreliminaryTensionParserV19(_PreliminaryTensionParserV17, _ParserV19):
    def results(self, as_pandas: bool = True) -> dict[str, pd.DataFrame | dict[str, Any]]: ...

class _VerificationParserV19(OutputFileParser, _ParserV19):
    @property
    def calculation_parameters(self) -> dict[str, float | bool]: ...
    def results(self, as_pandas: bool = True) -> dict[str, pd.DataFrame | dict[str, Any]]: ...
