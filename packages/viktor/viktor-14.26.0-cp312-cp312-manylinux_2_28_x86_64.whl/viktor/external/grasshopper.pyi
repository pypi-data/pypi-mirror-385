from ..core import File
from .external_program import ExternalProgram
from _typeshed import Incomplete
from typing import Any

__all__ = ['GrasshopperAnalysis']

class _DataTree:
    """ Copied from https://pypi.org/project/compute-rhino3d v0.12.2"""
    data: Incomplete
    def __init__(self, name: str) -> None: ...
    def append(self, path: list, items: list) -> None:
        """
        Append a path to this tree

        Args:
            path (iter): a list of integers defining a path
            items (list): list of data to add to the tree
        """

class GrasshopperAnalysis(ExternalProgram):
    ''' ::version(v14.8.0)

    Perform an analysis using Grasshopper on a remote server by means of a worker.
    To start an analysis call the method :meth:`~.ExternalProgram.execute`, with an appropriate timeout (in seconds).

    To retrieve the output, call :meth:`get_output`.

    Usage:

    .. code-block:: python

        my_input_parameters = {
            \'my_int\': 1,
            \'my_bool\': True,
            \'my_string\': "test",
            \'my_list\': [1, 2, 3],
            \'my_dict\': {\'{0;0;0}\': [1], \'{0;1;1}\': [1, 2, 3]}
        }
        grasshopper_analysis = GrasshopperAnalysis(script=my_grasshopper_script, input_parameters=my_input_parameters)
        grasshopper_analysis.execute(timeout=10)
        output = grasshopper_analysis.get_output()

    Exceptions which can be raised during calculation:

     - :class:`~viktor.errors.ExecutionError`: generic error. Error message provides more information
    '''
    script: Incomplete
    def __init__(self, *, script: File, input_parameters: dict[str, Any] = None) -> None:
        """
        :param script: Grasshopper script (.gh)
        :param input_parameters: Input parameters to be passed to the grasshopper script in the form of a float dict.
         Key names will be matched with the Hops parameter names in Grasshopper and substituted accordingly
        """
    def get_output(self) -> dict:
        '''
        Retrieve the output generated by running the Grasshopper analysis. Call method
        :meth:`~.ExternalProgram.execute` first and :meth:`get_output` afterward.

        The output is in the form:

        .. code-block:: python

            {
                "absolutetolerance": float,
                "angletolerance": float,
                "modelunits": str,
                "algo": str,
                "pointer": str,
                "cachesolve": bool,
                "recursionlevel": int,
                "values": list[dict]
                "warnings": list[str],
                "errors": list[str]
            }
        '''
