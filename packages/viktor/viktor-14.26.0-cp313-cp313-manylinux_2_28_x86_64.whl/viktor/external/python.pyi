from ..core import File
from .external_program import ExternalProgram
from io import BytesIO

__all__ = ['PythonAnalysis']

class PythonAnalysis(ExternalProgram):
    ''' ::version(14.17.0)

    PythonAnalysis can be used to evaluate a python script on third-party infrastructure. The script is expected
    to be blocking, i.e. if the script is invoked from command prompt, it should wait until the executable is
    finished. The default behaviour, is that the python script is defined within the app and send to the worker to be
    executed on third-party infrastructure. If desired (due to security considerations) the worker can be configured to
    only run local scripts. These scripts must be defined the in worker configuration file and can be selected through
    the `script_key`.

    Usage:

    .. code-block:: python

        script = vkt.File.from_path(Path(__file__).parent / "my_script.py")
        files = [
            (\'input1.txt\', file1),
        ]
        python_analysis = PythonAnalysis(script=script, files=files, output_filenames=["output.txt"])
        python_analysis.execute(timeout=60)
        output_file = python_analysis.get_output_file("output.txt")

    Exceptions which can be raised during calculation:

        - :class:`viktor.errors.LicenseError`: no license available
        - :class:`viktor.errors.ExecutionError`: generic error. Error message provides more information
    '''
    def __init__(self, script: File = None, script_key: str = '', files: list[tuple[str, BytesIO | File]] = None, output_filenames: list[str] = None) -> None:
        """
        :param script: Script file that is transferred to the working directory on the server.
        :param script_key: The key of the script that needs to be run. Only use this when the worker is configured to
                           run local scripts. This key should be present in the configuration file of the worker.
        :param files: Additional files that are transferred to the working directory on the server. Each file is a tuple
                      containing the content and the filename which is used to save on the infrastructure.
        :param output_filenames: A list of filenames (including extension) that are to be transferred back to the app.
                                 This filename is relative to the working directory.

        Either one of 'script' or 'script_key' should be defined.

        :raises ValueError: when neither 'script' or 'script_key' is included OR when both are included.
        """
    def get_output_file(self, filename: str) -> File | None:
        """
        Method can be used to retrieve the results generated by running an external analysis. Call method
        :meth:`~.ExternalProgram.execute` first and :meth:`get_output_file` afterwards.

        :param filename: The name of the file (including extension) that you want to get.
        """
