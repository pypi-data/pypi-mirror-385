from ..core import File
from .external_program import ExternalProgram
from io import BytesIO

__all__ = ['GenericAnalysis']

class GenericAnalysis(ExternalProgram):
    '''
    GenericAnalysis can be used to evaluate an executable on third-party infrastructure. The executable is expected
    to be blocking, i.e. if the executable is invoked from command prompt, it should wait until the executable is
    finished. For security purposes the executable that should be called has to be defined in the configuration file
    of the worker.

    Usage:

    .. code-block:: python

        files = [
            (\'input1.txt\', file1),
            (\'input2.txt\', file2)
        ]
        generic_analysis = GenericAnalysis(files=files, executable_key="someexecutable", output_filenames=["output.txt"])
        generic_analysis.execute(timeout=60)
        output_file = generic_analysis.get_output_file("output.txt")

    Exceptions which can be raised during calculation:

        - :class:`viktor.errors.LicenseError`: no license available
        - :class:`viktor.errors.ExecutionError`: generic error. Error message provides more information
    '''
    def __init__(self, files: list[tuple[str, BytesIO | File]] | None = None, executable_key: str = None, output_filenames: list[str] = None) -> None:
        """
        :param files: Files that are transferred to the working directory on the server. Each file is a tuple
                      containing the content and the filename which is used to save on the infrastructure.
        :param executable_key: The key of the executable that needs to be evaluated. This key should be present in the
                               configuration file of the worker.
        :param output_filenames: A list of filenames (including extension) that are to be transferred back to the app.
                                 This filename is relative to the working directory.

        :raises ValueError: when no attribute is included in call.
        """
    def get_output_file(self, filename: str, *, as_file: bool = False) -> BytesIO | File | None:
        """
        Method can be used to retrieve the results generated by running an external analysis. Call method
        :meth:`~.ExternalProgram.execute` first and :meth:`get_output_file` afterwards.

        :param filename: The name of the file (including extension) that you want to get.
        :param as_file: Return as BytesIO (default) or File
        """
