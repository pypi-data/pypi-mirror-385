import abc
import json
import xml.etree.ElementTree as ET
from ...core import File
from ..external_program import ExternalProgram
from .objects import BarSurface, CalculationSetup, CheckMember, CheckMember1D, CheckSection, CheckSectionExtreme, CodeSettings, ConcAggregateType, ConcCementClass, ConcDependentParams, ConcDiagramType, ConcreteMaterial, CrossSection, CrossSectionComponent, CrossSectionParameter, CrossSectionType, ExposureClassesDataEc2, FatigueLoading, LoadingSLS, LoadingULS, MatConcrete, MatConcreteEc2, MatReinforcement, MatReinforcementEc2, MemberType, ProjectData, ReinfClass, ReinfDiagramType, ReinfFabrication, ReinfType, ReinforcedBar, ReinforcedCrossSection, ReinforcementMaterial, Stirrup, ThermalState, TwoWaySlabType
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from io import BytesIO, StringIO
from typing import Any, BinaryIO, Iterator, Sequence

__all__ = ['Beam', 'CompressionMember', 'GeneralShape', 'IdeaRcsAnalysis', 'Model', 'OneWaySlab', 'OpenModel', 'OutputFileParser', 'RcsOutputFileParser', 'RectSection', 'SectionPrototype1D']

class IdeaRcsAnalysis(ExternalProgram):
    '''
    Can be used to perform an analysis using IDEA StatiCa RCS on a third-party worker. To start an analysis call the
    method :meth:`~.ExternalProgram.execute`, with an appropriate timeout (in seconds).
    To retrieve the results call the method :meth:`get_output_file`, after :meth:`~.ExternalProgram.execute`.

    Usage:

    .. code-block:: python

        idea_rcs_file = File.from_data("idea rcs input file content")
        idea_rcs_analysis = IdeaRcsAnalysis(input_file=idea_rcs_file)
        idea_rcs_analysis.execute(timeout=10)
        result = idea_rcs_analysis.get_output_file()

    Exceptions which can be raised during calculation:

        - :class:`viktor.errors.ExecutionError`: generic error. Error message provides more information
    '''
    input_file: Incomplete
    def __init__(self, input_file: BytesIO | File, *, return_result_xml: bool = None, return_rcs_file: bool = None) -> None:
        """
        :param input_file: IDEA (Open)Model input XML file.
        :param return_result_xml: Result .xml file will be available if set to True (default: True).
        :param return_rcs_file: Input .ideaRcs file will be available if set to True (default: False).
        """
    def get_output_file(self, *, as_file: bool = False) -> BytesIO | File | None:
        """
        Method can be used to retrieve the results generated by running an external analysis.
        The file is only available when return_result_xml=True.
        :meth:`~.ExternalProgram.execute` must be called first.

        :returns:

            - File (encoding='utf-16'), if as_file = True
            - BytesIO (encoding='utf-16'), if as_file = False (default)
        """
    def get_idea_rcs_file(self, *, as_file: bool = False) -> BytesIO | File | None:
        """
        Method can be used to retrieve the .ideaRcs file which is converted from the (Open)Model input XML.
        The file is only available when return_rcs_file=True.
        :meth:`~.ExternalProgram.execute` must be called first.

        :returns:

            - File, if as_file = True
            - BytesIO, if as_file = False (default)
        """

class _Model:
    def __init__(self, project_data: ProjectData = None, code_settings: CodeSettings = None) -> None: ...
    @property
    def project_data(self) -> ProjectData: ...
    @property
    def code_settings(self) -> CodeSettings: ...
    def generate_xml_input(self, *, as_file: bool = False) -> BytesIO | File:
        """ Generates the input file XML representation of the IDEA-RCS model.

        .. warning:: Whether an input XML file represents a valid model is dependent on many things, e.g. on the
         combination of certain parameters. The OpenModel does not give any guarantees on this. It is therefore
         important to always validate your model by hand thoroughly, before using it in an automated way within your
         app!

        .. note:: This method needs to be mocked in (automated) unit and integration tests.

        :param as_file: return as BytesIO (default) or File ::version(v13.5.0)
        """

class _EnumEncoder(json.JSONEncoder):
    """ To auto-serialize Enum type. """
    def default(self, o: Any) -> Any: ...

class OpenModel(_Model):
    def __init__(self, *, project_data: ProjectData = None, code_settings: CodeSettings = None) -> None:
        """
        Can be used to construct an IDEA-RCS model and generate its corresponding input XML file. This file can in
        turn be used as input of :class:`~.IdeaRcsAnalysis`. For a more elaborate example implementation, please see
        the guide.

        The OpenModel follows IDEA's underlying API. Alternatively, you can use :class:`~.Model`.

        .. warning:: Use this binding at own risk. Whether an input XML file represents a valid model is dependent on many
         things, e.g. on the combination of certain parameters. The OpenModel does not give any guarantees on this.
         It is therefore important to always validate your model by hand thoroughly, before using it in an automated way
         within your app!

        Example usage:

        .. code-block:: python

            # Initialize the model.
            model = OpenModel()  # empty model, or optionally pass ProjectData and/or CodeSettings

            # Create the concrete section.
            mat = model.create_matconcrete_ec2(ConcreteMaterial.C12_15)
            cs = model.create_cross_section_parameter(name='cs', cross_section_type=CrossSectionType.RECT, material=mat,
                                                      Width=2.0, Height=2.0)

            # Create the reinforced cross-section.
            rcs = model.create_reinforced_cross_section(name='rcs', cross_section=cs)

            # Create bars (and stirrups) as desired
            mat_reinf = model.create_matreinforcement_ec2(ReinforcementMaterial.B_400A)

            bar_locations = [(-0.101, -0.175), (0.101, -0.175), (0.101, 0.175), (-0.101, 0.175)]
            bar_diameters = [0.016, 0.016, 0.016, 0.016]

            for coords, diameter in zip(bar_locations, bar_diameters):
                rcs.create_bar(coords, diameter, mat_reinf)

            # Create a CheckMember.
            member = model.create_check_member1d()

            # 'Assign' the CheckMember to a CheckSection with the previously defined reinforced section and add extremes.
            check_section = model.add_check_section(description='S 1', check_member=member, reinf_section=rcs)
            freq = LoadingSLS(ResultOfInternalForces(N=-100000, My=210000))
            fund = LoadingULS(ResultOfInternalForces(N=-99999, My=200000))
            check_section.create_extreme(frequent=freq, fundamental=fund)

            # 'Assign' the necessary additional data to the CheckMember.
            model.add_member_data_ec2(member, MemberType.BEAM_SLAB, TwoWaySlabType.SHELL_AS_PLATE)

            # Generate the input XML file.
            input_xml = model.generate_xml_input()

        :param project_data: project_data (default: IDEA-RCS default project_data)
        :param code_settings: code and calculation settings (default: IDEA-RCS default settings)

        .. autoattribute:: project_data
        .. autoattribute:: code_settings
        .. automethod:: generate_xml_input
        """
    def create_matconcrete_ec2(self, base_material: ConcreteMaterial, name: str = None, *, e_modulus: float = 32800, g_modulus: float = 13667, poisson: float = 0.2, unit_mass: float = 2500, specific_heat: float = 0.6, thermal_expansion: float = 1e-05, thermal_conductivity: float = 45, is_default: bool = False, order_in_code: int = 1, thermal_state: ThermalState = None, fck_28: float = None, stone_diameter: float = 0.016, cement_class: ConcCementClass = ..., aggregate_type: ConcAggregateType = ..., diagram_type: ConcDiagramType = ..., silica_fume: bool = False, plain_concrete_diagram: bool = False, dep_params: ConcDependentParams = None) -> MatConcreteEc2:
        """ Create a material concrete Ec2 object and add it to the model.

        :param base_material: IDEA-RCS base material to start with.
        :param name: Name of the material (default: base_material name).
        :param e_modulus: Young's modulus [MPa] (default: 32800 MPa).
        :param g_modulus: Shear modulus [MPa] (default: 13667 MPa).
        :param poisson: Poisson's ratio (default: 0.2).
        :param unit_mass: Unit mass [kg/m3] (default: 2500 kg/m3).
        :param specific_heat: Specific heat capacity (default: 0.6).
        :param thermal_expansion: Thermal expansion [1/K] (default: 1e-05).
        :param thermal_conductivity: Thermal conductivity (default: 45).
        :param is_default: True if material is default material in IDEA-RCS code (default: False).
        :param order_in_code: Order of this material in the IDEA-RCS code (default: 1).
        :param thermal_state: Collection of thermal states for expansion, conductivity, specific heat, stress-strain
         and strain curvatures (default: ThermalState()).
        :param fck_28: Characteristic compressive cylinder strength of concrete at 28 days [MPa] (default: base_material fck).
        :param stone_diameter: Aggregate size (default: 16 mm).
        :param cement_class: Cement class (default: R).
        :param aggregate_type: Aggregate type (default: Quartzite).
        :param diagram_type: Type of stress-strain diagram for ULS calculation (default: Parabolic).
        :param silica_fume: Contains silica fume (default: False) (EN 1992-2:2008-07 only).
        :param plain_concrete_diagram: Stress strain diagram with tension part (default: False).
        :param dep_params: Collection of a series of dependent parameters (see ConcDependentParams for more info).
         If None, values will be calculated based on 'fck' (default: None).
        """
    def create_matreinforcement_ec2(self, base_material: ReinforcementMaterial, name: str = None, *, e_modulus: float = 200000, g_modulus: float = 83333, poisson: float = 0.2, unit_mass: float = 7850, specific_heat: float = 0.6, thermal_expansion: float = 1e-05, thermal_conductivity: float = 45, is_default: bool = False, order_in_code: int = 1, thermal_state: ThermalState = None, bar_surface: BarSurface = ..., fyk: float = None, ftk_by_fyk: float = None, epsuk: float = None, ftk: float = None, class_: ReinfClass = ..., type_: ReinfType = ..., fabrication: ReinfFabrication = ..., diagram_type: ReinfDiagramType = ...) -> MatReinforcementEc2:
        """ Create a material reinforcement Ec2 object and add it to the model.

        :param base_material: IDEA-RCS base material to start with.
        :param name: Name of the material (default: base_material name).
        :param e_modulus: Young's modulus [MPa] (default: 200000 MPa).
        :param g_modulus: Shear modulus [MPa] (default: 83333 MPa).
        :param poisson: Poisson's ratio (default: 0.2).
        :param unit_mass: Unit mass [kg/m3] (default: 7850 kg/m3).
        :param specific_heat: Specific heat capacity (default: 0.6).
        :param thermal_expansion: Thermal expansion [1/K] (default: 1e-05).
        :param thermal_conductivity: Thermal conductivity (default: 45).
        :param is_default: True if material is default material in IDEA-RCS code (default: False).
        :param order_in_code: Order of this material in the IDEA-RCS code (default: 1).
        :param thermal_state: Collection of thermal states for expansion, conductivity, specific heat, stress-strain
         and strain curvatures (default: ThermalState()).
        :param bar_surface: Bar surface (default: Ribbed).
        :param fyk: Characteristic yield strength of reinforcement (default: base_material fyk).
        :param ftk_by_fyk: factor k = ratio ftk / fyk (default: base_material k).
        :param epsuk: Characteristic strain of reinforcement at maximum load - εuk [x 1e-4].
        :param ftk: Characteristic tensile strength of reinforcement (default: base_material ftk).
        :param class_: Class of reinforcement (default: B).
        :param type_: Type of reinforcement (default: Bars).
        :param fabrication: Fabrication of reinforcement (default: Hot rolled).
        :param diagram_type: Type of material diagram (default: Bilinear with an inclined top branch).
        """
    def create_cross_section_component(self, name: str = None) -> CrossSectionComponent:
        """ Create a cross-section object defined by one or multiple components and add it to the model.

        :param name: Name of cross-section (default: '').
        """
    def create_cross_section_parameter(self, cross_section_type: CrossSectionType, material: MatConcrete, name: str = None, **parameters: Any) -> CrossSectionParameter:
        """ Create a cross-section object defined by parameters and add it to the model.

        :param cross_section_type: Type of cross-section.
        :param material: Material (created by :meth:`~.create_matconcrete_ec2`).
        :param name: Name of cross-section (default: '').
        :param parameters: keyword naming should correspond to chosen cross_section_type(!).

        The following combinations of cross_section_type and parameters can be used
        (see the IDEA StatiCa interface for the naming convention):

        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.O`: D
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.RECT`: Width, Height
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TRAPEZOID`: H, Bb, Bt
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.IGN`: H, Bh, Bs, Ts, Th, Tw
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.IGH`: H, Bh, Bs, Ts, Th, Tw, Bfh, Tfh
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.BEAM_SHAPE_I_HAUNCH_CHAMFER`: Bbf, Hbf, Hbfh, Bw, H, Htfh, Htf, Btf, Bwh
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TG`: Height, Width, TopFlangeWidth, WallWidth
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TTFH`: Height, Width, TopFlangeWidth, WallWidth, TopFlangeHaunch
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TGREV`: Height, Width, TopFlangeWidth, WallWidth
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TCHAMFER_1`: Height, Width, TopFlangeWidth, WallWidth, TopFlangeHaunch2, WallHaunch2
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TCHAMFER_2`: Height, Width, TopFlangeWidth, WallWidth, TopFlangeHaunch2, WallHaunch1, WallHaunch2
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TWH`: Height, Width, TopFlangeWidth, WallWidth, WallHaunch
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TTFHREV`: Height, Width, TopFlangeWidth, WallWidth, TopFlangeHaunch
        - :class:`~viktor.external.idea_rcs.objects.CrossSectionType.TWHREV`: Height, Width, TopFlangeWidth, WallWidth, WallHaunch

        """
    def create_reinforced_cross_section(self, cross_section: CrossSection, name: str = None) -> ReinforcedCrossSection:
        """ Create a reinforced cross-section object and add it to the model.

        :param cross_section: Cross-section (created by :meth:`~.create_cross_section_parameter`
                              or :meth:`~.create_cross_section_component`).
        :param name: Name of cross-section (default: 'R{i}').
        """
    def create_check_member1d(self, name: str = None) -> CheckMember1D:
        """
        Create a member 1D check, which can be used in :meth:`~.add_check_section` and :meth:`~.add_member_data_ec2`.
        """
    def add_check_section(self, check_member: CheckMember, reinf_section: ReinforcedCrossSection, description: str = None) -> CheckSection:
        """ Adds a single section check on the given CheckMember. Note that :meth:`~.add_member_data_ec2` must be
        called subsequently.

        :param check_member: CheckMember (created by :meth:`~.create_check_member1d`).
        :param reinf_section: Reinforcement of cross-section (created by :meth:`~.create_reinforced_cross_section`).
        :param description: Description/name of the section (default: 'S{i}').
        """
    def add_member_data_ec2(self, member: CheckMember, member_type: MemberType, two_way_slab_type: TwoWaySlabType, *, calculation_setup: CalculationSetup = None, coeff_kx_for_wmax: float = None, exposure_class_data: ExposureClassesDataEc2 = None, creep_coefficient: float = None, relative_humidity: float = None) -> None:
        """ Adds a concrete member Ec2 data to the model.

        :param member: CheckMember (created by :meth:`~.create_check_member1d`). Should be previously added to a
         check section via :meth:`~.add_check_section`.
        :param member_type: Structural type of member. Must be a valid type corresponding to the reinf_section assigned
         to the member in :meth:`~.add_check_section`.
        :param two_way_slab_type: Two-way slab type. Must be a valid type corresponding to the reinf_section assigned
         to the member in :meth:`~.add_check_section`.
        :param calculation_setup: Calculation control settings (default: Capacity N-M(-M) | Shear | Interaction |
         Stress Limitation | Crack width | Detailing).
        :param coeff_kx_for_wmax: (Dutch annex only) Coefficient kx to increase limited concrete crack (default: 1.0).
        :param exposure_class_data: Exposure classes (default: no corrosion).
        :param creep_coefficient: Final value of creep coefficient (default: calculated by IDEA-RCS).
        :param relative_humidity: Percentage of relative humidity (default: 65).
        """

class _SectionPrototype(ABC, metaclass=abc.ABCMeta):
    """ Abstract base class of all section prototypes. """
    @abstractmethod
    def __init__(self): ...

class SectionPrototype1D(_SectionPrototype, ABC, metaclass=abc.ABCMeta):
    """ Abstract base class of all 1D (beam-like) section prototypes. """
    @abstractmethod
    def __init__(self): ...

class RectSection(SectionPrototype1D):
    def __init__(self, width: float, height: float) -> None:
        """ Rectangular section.

        The origin is located in the centroid of this section.

        :param width: Width of the section.
        :param height: Height of the section.
        """

class GeneralShape(SectionPrototype1D):
    def __init__(self, outline: Sequence[tuple[float, float]], *, openings: Sequence[Sequence[tuple[float, float]]] = None) -> None:
        """ General cross-section, defined by a set of coordinates.

        :param outline: Vertices which define the outline of the section (y, z). A minimum of 3 vertices is required,
                        the outline is automatically closed.
        :param openings: One or multiple openings, defined by vertices (y, z). A minimum of 3 vertices per opening is
                         required, the opening is automatically closed.
        """

class _SectionPrototype2D(_SectionPrototype, ABC, metaclass=abc.ABCMeta):
    """ Abstract base class of all 2D (plate-like) section prototypes. """
    @abstractmethod
    def __init__(self, thickness: float): ...

class Member:
    """ Base class of all member types. """
    def __init__(self, rcs: ReinforcedCrossSection, check_section: CheckSection) -> None: ...
    @property
    def bars(self) -> list[ReinforcedBar]: ...
    @property
    def stirrups(self) -> list[Stirrup]: ...
    @property
    def extremes(self) -> list[CheckSectionExtreme]: ...
    def create_bar(self, coordinates: tuple[float, float], diameter: float, material: MatReinforcement) -> None:
        """ Create a reinforced bar on the reinforced cross-section.

        :param coordinates: (X, Y) coordinate of the bar [m].
        :param diameter: Diameter of the bar [m].
        :param material: Reinforcement material (created by :meth:`~.idea_rcs.OpenModel.create_matreinforcement_ec2`).
        """
    def create_bar_layer(self, *, origin: tuple[float, float], diameter: float, material: MatReinforcement, number_of_bars: int, delta_y: float = None, delta_z: float = None) -> None:
        """ Create multiple reinforced bars on the reinforced cross-section, positioned on a line.

        :param origin: Origin point (Y, Z) [m].
        :param diameter: Diameter of the bar [m].
        :param material: Reinforcement material (created by :meth:`~.idea_rcs.OpenModel.create_matreinforcement_ec2`).
        :param number_of_bars: Number of bars (minimum of 2).
        :param delta_y: Distance between origin bar and the last bar in y-direction [m].
        :param delta_z: Distance between origin bar and the last bar in z-direction [m].
        """
    def create_stirrup(self, points: Sequence[tuple[float, float] | tuple[tuple[float, float], tuple[float, float]]], diameter: float, material: MatReinforcement, distance: float, shear_check: bool = None, torsion_check: bool = None, mandrel_diameter_factor: float = None, anchorage_length: float = None) -> None:
        """ Create a stirrup on the reinforced cross-section.

        :param points: Sequence of (X, Y) coordinates [m] of the stirrup vertices, connected by straight line segments.
         For arc-segments use ((X_end, Y_end), (X_on_arc, Y_on_arc)).
        :param diameter: Diameter of the stirrup [m].
        :param material: Reinforcement material (created by :meth:`~.idea_rcs.OpenModel.create_matreinforcement_ec2`).
        :param distance: Longitudinal distance between stirrups [m].
        :param shear_check: Take stirrup into account in shear check (default: False).
        :param torsion_check: Take stirrup into account in torsion check (default: False).
        :param mandrel_diameter_factor: Inner diameter of mandrel as multiple of stirrup diameter [-] (default: 1.0).
        :param anchorage_length: Anchorage length [m] (default: 0.0).
        """
    def create_extreme(self, *, description: str = None, accidental: LoadingULS = None, fatigue: FatigueLoading = None, frequent: LoadingSLS = None, fundamental: LoadingULS = None, characteristic: LoadingSLS = None, quasi_permanent: LoadingSLS = None) -> None:
        """ Create an extreme case with corresponding internal forces on the beam for checking.

        :param description: Description of the extreme (default: '{section_name} - E {i}'). ::version(v14.6.0)
        :param accidental: Accidental loading.
        :param fatigue: Fatigue loading.
        :param frequent: Frequent loading.
        :param fundamental: Fundamental loading.
        :param characteristic: Characteristic loading.
        :param quasi_permanent: Quasi-Permanent loading.
        """

class Beam(Member):
    """
    Do not use this __init__ directly, but create the object by :meth:`Model.create_beam`.
    """
class CompressionMember(Member):
    """
    Do not use this __init__ directly, but create the object by :meth:`Model.create_compression_member`.
    """
class OneWaySlab(Member):
    """
    Do not use this __init__ directly, but create the object by :meth:`Model.create_one_way_slab`.
    """

class Model(_Model):
    def __init__(self, *, project_data: ProjectData = None, code_settings: CodeSettings = None) -> None:
        """
        Can be used to construct an IDEA-RCS model and generate its corresponding input XML file. This file can in
        turn be used as input of :class:`~.IdeaRcsAnalysis`. For a more detailed elaboration, please see the guide.

        Alternatively, you can use :class:`~.OpenModel`.

        .. warning:: Use this binding at own risk. Whether an input XML file represents a valid model is dependent on
         many things, e.g. on the combination of certain parameters. The Model does not give any guarantees on this.
         It is therefore important to always validate your model by hand thoroughly, before using it in an automated way
         within your app!

        Example usage:

        .. code-block:: python

            # Initialize the model.
            model = Model()  # empty model, or optionally pass ProjectData and/or CodeSettings

            # Create the desired material(s).
            cs_mat = model.create_concrete_material(ConcreteMaterial.C12_15)
            mat_reinf = model.create_reinforcement_material(ReinforcementMaterial.B_400A)

            # Create a beam (or other type of member) to be checked.
            cross_section = RectSection(0.5, 1.0)
            beam = model.create_beam(cross_section, cs_mat)

            # Create bars (and stirrups) as desired
            bar_locations = [(-0.101, -0.175), (0.101, -0.175), (0.101, 0.175), (-0.101, 0.175)]
            bar_diameters = [0.016, 0.016, 0.016, 0.016]

            for coords, diameter in zip(bar_locations, bar_diameters):
                beam.create_bar(coords, diameter, mat_reinf)

            # Add extreme(s)
            freq = LoadingSLS(ResultOfInternalForces(N=-100000, My=210000))
            fund = LoadingULS(ResultOfInternalForces(N=-99999, My=200000))
            beam.create_extreme(frequent=freq, fundamental=fund)

            # Generate the input XML file.
            input_xml = model.generate_xml_input()

        :param project_data: project_data (default: IDEA-RCS default project_data)
        :param code_settings: code and calculation settings (default: IDEA-RCS default settings)

        .. autoattribute:: project_data
        .. autoattribute:: code_settings
        .. automethod:: generate_xml_input
        """
    def create_concrete_material(self, base_material: ConcreteMaterial, name: str = None, *, unit_mass: float = 2500, fck: float = None, stone_diameter: float = 0.016, cement_class: ConcCementClass = ..., aggregate_type: ConcAggregateType = ..., diagram_type: ConcDiagramType = ..., silica_fume: bool = False, plain_concrete_diagram: bool = False, dep_params: ConcDependentParams = None) -> MatConcreteEc2:
        """ Create a concrete material, to be used in :meth:`~.create_beam` and similar methods.

        :param base_material: IDEA-RCS base material to start with.
        :param name: Name of the material (default: base_material name).
        :param unit_mass: Unit mass [kg/m3] (default: 2500 kg/m3).
        :param fck: Characteristic compressive cylinder strength of concrete at 28 days [MPa] (default: base_material fck).
        :param stone_diameter: Aggregate size (default: 16 mm).
        :param cement_class: Cement class (default: R).
        :param aggregate_type: Aggregate type (default: Quartzite).
        :param diagram_type: Type of stress-strain diagram for ULS calculation (default: Parabolic).
        :param silica_fume: Contains silica fume (default: False) (EN 1992-2:2008-07 only).
        :param plain_concrete_diagram: Stress strain diagram with tension part (default: False).
        :param dep_params: Collection of a series of dependent parameters (see ConcDependentParams for more info).
         If None, values will be calculated based on 'fck' (default: None).
        """
    def create_reinforcement_material(self, base_material: ReinforcementMaterial, name: str = None, *, unit_mass: float = 7850, e_modulus: float = 200000, fyk: float = None, ftk_by_fyk: float = None, epsuk: float = None, type_: ReinfType = ..., bar_surface: BarSurface = ..., class_: ReinfClass = ..., fabrication: ReinfFabrication = ..., diagram_type: ReinfDiagramType = ...) -> MatReinforcementEc2:
        """ Create a reinforcement material, to be used in :meth:`~.create_reinforcement_bar`.

        :param base_material: IDEA-RCS base material to start with.
        :param name: Name of the material (default: base_material name).
        :param unit_mass: Unit mass [kg/m3] (default: 7850 kg/m3).
        :param e_modulus: Young's modulus [MPa] (default: 200000 MPa).
        :param fyk: Characteristic yield strength of reinforcement (default: base_material fyk).
        :param ftk_by_fyk: factor k = ratio ftk / fyk (default: base_material k).
        :param epsuk: Characteristic strain of reinforcement at maximum load - εuk [x 1e-4].
        :param type_: Type of reinforcement (default: Bars).
        :param bar_surface: Bar surface (default: Ribbed).
        :param class_: Class of reinforcement (default: B).
        :param fabrication: Fabrication of reinforcement (default: Hot rolled).
        :param diagram_type: Type of material diagram (default: Bilinear with an inclined top branch).
        """
    def create_beam(self, cs: SectionPrototype1D, material: MatConcrete, *, calculation_control: CalculationSetup = None, name: str = None, rcs_name: str = None, design_member_name: str = None, exposure_classes: ExposureClassesDataEc2 = None, coeff_kx: float = None, creep_coefficient: float = None, relative_humidity: float = None) -> Beam:
        """ Create a beam section.

        :param cs: Cross-section prototype.
        :param material: Material for the cross-section (created by :meth:`~.create_concrete_material`).
        :param calculation_control: Calculation control settings (default: Capacity N-M(-M) | Shear | Interaction |
         Stress Limitation | Crack width | Detailing).
        :param name: Name of the cross-section (default: 'S{i}').
        :param rcs_name: Name of the reinforced cross-section (default: 'R{i}').
        :param design_member_name: Name of the design member (default: 'M {i}'). ::version(v14.6.0)
        :param exposure_classes: Corrosion exposure classes (default: no corrosion).
        :param coeff_kx: (Dutch annex only) Coefficient k_x acc. 7.3.1 (default: 1.0).
        :param creep_coefficient: Final value of creep coefficient (default: calculated by IDEA-RCS).
        :param relative_humidity: Percentage of relative humidity (default: 65).
        """
    def create_compression_member(self, cs: SectionPrototype1D, material: MatConcrete, *, calculation_control: CalculationSetup = None, name: str = None, rcs_name: str = None, design_member_name: str = None, exposure_classes: ExposureClassesDataEc2 = None, coeff_kx: float = None, creep_coefficient: float = None, relative_humidity: float = None) -> CompressionMember:
        """ Create a compression member section.

        :param cs: Cross-section prototype.
        :param material: Material for the cross-section (created by :meth:`~.create_concrete_material`).
        :param calculation_control: Calculation control settings (default: Capacity N-M(-M) | Shear | Interaction |
         Stress Limitation | Crack width | Detailing).
        :param name: Name of the cross-section (default: 'S{i}').
        :param rcs_name: Name of the reinforced cross-section (default: 'R{i}').
        :param design_member_name: Name of the design member (default: 'M {i}'). ::version(v14.6.0)
        :param exposure_classes: Corrosion exposure classes (default: no corrosion).
        :param coeff_kx: (Dutch annex only) Coefficient k_x acc. 7.3.1 (default: 1.0).
        :param creep_coefficient: Final value of creep coefficient (default: calculated by IDEA-RCS).
        :param relative_humidity: Percentage of relative humidity (default: 65).
        """
    def create_one_way_slab(self, cs: SectionPrototype1D, material: MatConcrete, *, calculation_control: CalculationSetup = None, name: str = None, rcs_name: str = None, design_member_name: str = None, exposure_classes: ExposureClassesDataEc2 = None, coeff_kx: float = None, creep_coefficient: float = None, relative_humidity: float = None) -> OneWaySlab:
        """ Create a one-way slab member section.

        :param cs: Cross-section prototype.
        :param material: Material for the cross-section (created by :meth:`~.create_concrete_material`).
        :param calculation_control: Calculation control settings (default: Capacity N-M(-M) | Shear | Interaction |
         Stress Limitation | Crack width | Detailing).
        :param name: Name of the cross-section (default: 'S{i}').
        :param rcs_name: Name of the reinforced cross-section (default: 'R{i}').
        :param design_member_name: Name of the design member (default: 'M {i}'). ::version(v14.6.0)
        :param exposure_classes: Corrosion exposure classes (default: no corrosion).
        :param coeff_kx: (Dutch annex only) Coefficient k_x acc. 7.3.1 (default: 1.0).
        :param creep_coefficient: Final value of creep coefficient (default: calculated by IDEA-RCS).
        :param relative_humidity: Percentage of relative humidity (default: 65).
        """

class RcsOutputFileParser:
    """ Parser to extract results from an IDEA-RCS output file (.xml).

    Currently the following data can be extracted:

        - :meth:`~.RcsOutputFileParser.SectionResult.capacity`
        - :meth:`~.RcsOutputFileParser.SectionResult.shear`
        - :meth:`~.RcsOutputFileParser.SectionResult.torsion` (new in v13.4.0)
        - :meth:`~.RcsOutputFileParser.SectionResult.interaction` (new in v13.4.0)
        - :meth:`~.RcsOutputFileParser.SectionResult.crack_width`
        - :meth:`~.RcsOutputFileParser.SectionResult.detailing`
        - :meth:`~.RcsOutputFileParser.SectionResult.stress_limitation`
        - :meth:`~.RcsOutputFileParser.SectionResult.fatigue`

    Example using :class:`~viktor.core.File`:

    .. code-block:: python

        xml_file = idea_rcs_analysis.get_output_file(as_file=True)
        with xml_file.open_binary() as f:
            parser = RcsOutputFileParser(f)

            # loop through all sections
            for section in parser.section_results():
                capacity_results = section.capacity()
                shear_results = section.shear()

            # or get results for a single section
            section_4 = parser.section_result(4)
            ...

            # or loop through all extremes within a section
            for extreme in section_4.extremes():
                capacity = extreme['capacity']
                ...


    Example using BytesIO:

    .. code-block:: python

        xml_file = idea_rcs_analysis.get_output_file()
        parser = RcsOutputFileParser(xml_file)

        for section in parser.section_results():
            ...

    """
    def __init__(self, xml_file: BinaryIO) -> None:
        """

        :param xml_file: IDEA-RCS XML output file (.xml).
        """
    def section_result(self, id_: int) -> RcsOutputFileParser.SectionResult:
        """ Retrieve the section result of the provided id. """
    def section_results(self) -> Iterator['RcsOutputFileParser.SectionResult']:
        """ Iterates through all section results.

        Usage:

        .. code-block:: python

            for section in parser.section_results():
                capacity_results = section.capacity()

                if section.id_ == 3:
                    ...

        """
    class SectionResult:
        """ Parsed result section, on which specific results can be retrieved. """
        def __init__(self, id_: int, element: ET.Element) -> None:
            """
            Do not instantiate this object directly, but retrieve it through :meth:`RcsOutputFileParser.section_results`.
            """
        @property
        def id_(self) -> int:
            """ Returns the 'SectionId' of current section. """
        def extremes(self) -> list[dict]:
            """ Get all results combined per extreme for the current section.

            Returns a list of dictionaries in the following format:

            .. code-block:: python

                [
                    {
                        'capacity': {...} | None,
                        'shear': {...} | None,
                        'torsion': {...} | None,        # new in v13.4.0
                        'interaction': {...} | None,    # new in v13.4.0
                        'crack_width': {...} | None,
                        'detailing': {...} | None,
                        'stress_limitation': {...} | None,
                        'fatigue': {...} | None,
                    },
                    ...
                ]
            """
        def capacity(self) -> list[dict | None]:
            """ Get the capacity results of all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'Fu': {
                            'N': <float>,
                            'Qy': <float>,
                            'Qz': <float>,
                            'Mx': <float>,
                            'My': <float>,
                            'Mz': <float>
                        },
                        'Fu1': {
                            ...  # see 'Fu'
                        } | None,
                        'Fu2': {
                            ...  # see 'Fu'
                        } | None,
                        'CheckValue': <float>,
                        'Result': <str>  # new in v13.4.0
                    } | None,
                    ...
                ]
            """
        def shear(self) -> list[dict | None]:
            """ Get the shear resistances for all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'Ved': <float>,
                        'Vrdc': <float>,
                        'Vrd': <float>,
                        'Vrdmax': <float>,
                        'Vrdr': <float>,
                        'Vrds': <float>,
                        'CheckValue': <float>,
                        'Result': <str>  # new in v13.4.0
                    } | None,
                    ...
                ]
            """
        def torsion(self) -> list[dict | None]:
            """ ::version(v13.4.0)

            Get the torsion results for all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'Ted': <float>,
                        'Trdc': <float>,
                        'Trdmax': <float>,
                        'Trds': <float>,
                        'Trd': <float>,
                        'CheckValue': <float>,
                        'Result': <str>
                    } | None,
                    ...
                ]
            """
        def interaction(self) -> list[dict | None]:
            """ ::version(v13.4.0)

            Get the interaction results for all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'Ned': <float>,
                        'Medy': <float>,
                        'Medz': <float>,
                        'Ved': <float>,
                        'Ted': <float>,
                        'CheckValue': <float>,
                        'CheckValueShearAndTorsion': <float>,
                        'CheckValueShearTorsionAndBending': <float>,
                        'Result': <str>
                    } | None,
                    ...
                ]
            """
        def crack_width(self) -> list[dict | None]:
            """ Get the crack width (short/long) results for all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'short': {
                            'N': <float>,
                            'My': <float>,
                            'Mz': <float>,
                            'W': <float>,
                            'Wlim': <float>,
                            'CheckValue': <float>,
                            'Result': <str>  # new in v13.4.0
                        } | None,
                        'long': {
                            ...  # see 'short'
                        } | None,
                    } | None,
                    ...
                ]
            """
        def detailing(self) -> list[dict | None]:
            """
            Get the unity checks of the longitudinal reinforcement and shear reinforcement
            for all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'longitudinal': <float> | None,
                        'shear': <float> | None,
                        'CheckValue': <float>,  # new in v13.4.0
                        'CheckValueLongReinf': <float>,  # new in v13.4.0
                        'CheckValueShearReinf': <float>,  # new in v13.4.0
                        'Result': <str>  # new in v13.4.0
                    } | None,
                    ...
                ]
            """
        def stress_limitation(self) -> list[dict | None]:
            """ Get the short- and long-term stress limitation results for all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'Check_7_2_2_Concrete_fck': {  # new in v13.4.0
                            'short': {
                                'Stress': <float> | None,
                                'CheckValue': <float>,
                                'Result': <str>
                            } | None,
                            'long': {
                                ...  # see 'short'
                            } | None
                        } | None,
                        'Check_7_2_3_Concrete_fck': {  # new in v13.4.0
                            ...  # see 'Check_7_2_2_Concrete_fck'
                        } | None,
                        'Check_7_2_5_Tendons_fpk': {  # new in v13.4.0
                            ...  # see 'Check_7_2_2_Concrete_fck'
                        } | None,
                        'Check_7_2_5_ReinforcementBars_fyk': {  # new in v13.4.0
                            ...  # see 'Check_7_2_2_Concrete_fck'
                        } | None,
                        'Check_5_10_3_2_Tendons': {  # new in v13.4.0
                            ...  # see 'Check_7_2_2_Concrete_fck'
                        } | None,
                        'Check_5_10_2_1_1_Tendons': {  # new in v13.4.0
                            ...  # see 'Check_7_2_2_Concrete_fck'
                        } | None,
                        'short': {
                            'Check_7_2_2_Concrete_fck': <float> | None,
                            ...  # see above for all keys
                        } | None,
                        'long': {
                            'Check_7_2_2_Concrete_fck': <float> | None,
                            ...  # see above for all keys
                        } | None,
                    } | None,
                    ...
                ]
            """
        def fatigue(self) -> list[dict | None]:
            """ Get the fatigue results for all extremes for the current section.

            Returns a list of dictionaries (or None if not present for a certain extreme) in the following format:

            .. code-block:: python

                [
                    {
                        'fatigue': {
                            'CheckValue': <float>,
                            'DecisionMethod': <str>,
                            'Result': <str>  # new in v13.4.0
                        },
                        'shear': {
                            'max': {
                                'Ved': <float>,
                                'Vrdc': <float>,
                                'Vrd': <float>,
                                'Vrdmax': <float>,
                                'Vrdr': <float>,
                                'Vrds': <float>,
                                'CheckValue': <float>,
                                'Result': <str>  # new in v13.4.0
                            },
                            'min': {
                                ...  # see 'max'
                            },
                        }
                    } | None,
                    ...
                ]
            """

class OutputFileParser:
    def __init__(self, xml_file: StringIO) -> None:
        """ Helper class to extract results from a IDEA-RCS output file (.xml).

        Note, for very large result files we advise to make use of :class:`~.RcsOutputFileParser` instead.

        :param xml_file: valid IDEA-RCS XML output file.
        :raises ParsingError: if 'xml_file' can not be parsed (not a valid format).

        Example usage:

        .. code-block:: python

            parser = OutputFileParser(xml_file)
            for section in parser.section_ids:
                capacity_results = parser.capacity_results(section)
                ...

        In case you require results which are not supported, you can retrieve the raw results using the
        :meth:`~.raw_results` method.

        """
    @property
    def section_ids(self) -> list[int]:
        """ Get all section ids for which results are present in the result file. """
    def raw_results(self) -> dict:
        """ Get the (complete) raw results in dict form. Can be used if results need to be extracted that are not
         supported by the available methods. """
    def capacity_results(self, section_id: int) -> list[dict[str, Any] | None]:
        """ Get the result of applied internal forces of all extremes for the section with provided 'section_id'.

        :param section_id: id of the check section. Must be present in the output file.
        :raises ParsingError: if 'section_id' is not present in output file.

        See :meth:`~.RcsOutputFileParser.SectionResult.capacity` for return format.
        """
    def shear_results(self, section_id: int) -> list[dict[str, Any] | None]:
        """ Get the shear resistances for all extremes for the section with provided 'section_id'.

        :param section_id: id of the check section. Must be present in the output file.
        :raises ParsingError: if 'section_id' is not present in output file.

        See :meth:`~.RcsOutputFileParser.SectionResult.shear` for return format.
        """
    def crack_width_results(self, section_id: int) -> list[dict[str, dict[str, Any] | None] | None]:
        """ Get the crack width (short/long) results for all extremes for the section with provided 'section_id'.

        :param section_id: id of the check section. Must be present in the output file.
        :raises ParsingError: if 'section_id' is not present in output file.

        See :meth:`~.RcsOutputFileParser.SectionResult.crack_width` for return format.
        """
    def detailing_results(self, section_id: int) -> list[dict[str, float | None] | None]:
        """ Get the unity checks of the longitudinal reinforcement and shear reinforcement for all extremes for the
        section with provided 'section_id'.

        :param section_id: id of the check section. Must be present in the output file.
        :raises ParsingError: if 'section_id' is not present in output file.

        See :meth:`~.RcsOutputFileParser.SectionResult.detailing` for return format.
        """
    def stress_limitation_results(self, section_id: int) -> list[dict[str, float | None] | None]:
        """ Get the short- and long-term stress limitation results for all extremes for provided 'section_id'.

        :param section_id: id of the check section. Must be present in the output file.
        :raises ParsingError: if 'section_id' is not present in output file.

        See :meth:`~.RcsOutputFileParser.SectionResult.stress_limitation` for return format.
        """
    def fatigue_results(self, section_id: int) -> list[dict | None]:
        """ Get the fatigue results for all extremes for the provided 'section_id'.

        :param section_id: id of the check section. Must be present in the output file.
        :raises ParsingError: if 'section_id' is not present in output file.

        See :meth:`~.RcsOutputFileParser.SectionResult.fatigue` for return format.
        """
