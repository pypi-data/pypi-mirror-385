name: Create Release Tag

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version validation
        token: ${{ secrets.RELEASE_TOKEN }}
    
    - name: Configure Git
      run: |
        # Use the person who triggered the workflow
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
    
    - name: Get current version and calculate next version
      id: version
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep "^version = " pyproject.toml | cut -d'"' -f2)
        echo "Current version from pyproject.toml: '$CURRENT_VERSION'"
        
        # Validate current version format
        if [ -z "$CURRENT_VERSION" ]; then
          echo "‚ùå Error: Could not extract version from pyproject.toml"
          exit 1
        fi
        
        if ! [[ "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Error: Current version '$CURRENT_VERSION' is not in X.Y.Z format"
          exit 1
        fi
        
        # Split version into components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        echo "Version components: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
        
        # Calculate new version based on release type
        RELEASE_TYPE="${{ inputs.release_type }}"
        case $RELEASE_TYPE in
          major)
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
            ;;
          minor)
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
            ;;
          patch)
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
        
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
        echo "‚ïë          Release Summary               ‚ïë"
        echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
        echo "‚ïë Current version: $CURRENT_VERSION"
        echo "‚ïë Release type:    $RELEASE_TYPE"
        echo "‚ïë New version:     $NEW_VERSION"
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        
        # Output for later steps
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Also set as environment variables as backup
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Check if version already exists
      run: |
        VERSION="v${{ steps.version.outputs.new }}"
        if [ -z "${{ steps.version.outputs.new }}" ]; then
          echo "‚ùå Error: Version is empty!"
          exit 1
        fi
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "‚ùå Tag $VERSION already exists!"
          exit 1
        fi
        echo "‚úÖ Tag $VERSION does not exist yet"
    
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ steps.version.outputs.new }}"
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        
        # Verify the change
        echo "Updated pyproject.toml:"
        grep "^version = " pyproject.toml
    
    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "chore: bump version to ${{ steps.version.outputs.new }}"
        git push origin main
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        VERSION="v${{ steps.version.outputs.new }}"
        
        if [ -z "$PREV_TAG" ]; then
          echo "First release"
          NOTES="Initial release of StarHTML"
        else
          echo "Previous tag: $PREV_TAG"
          # Get commit messages since last tag
          NOTES="### Changes since $PREV_TAG\n\n"
          NOTES+=$(git log $PREV_TAG..HEAD --pretty=format:"- %s" --no-merges | grep -v "chore: " | head -20)
        fi
        
        # Save for the tag message
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo -e "$NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Create and push tag
      run: |
        VERSION="v${{ steps.version.outputs.new }}"
        TYPE="${{ inputs.release_type }}"
        
        # Fallback to environment variable if output is empty
        if [ -z "${VERSION#v}" ]; then
          echo "‚ö†Ô∏è Using environment variable fallback"
          VERSION="v$NEW_VERSION"
        fi
        
        # Final validation
        if [ -z "${VERSION#v}" ]; then
          echo "‚ùå Error: Version is still empty!"
          exit 1
        fi
        
        echo "Creating tag: $VERSION"
        
        # Create annotated tag with generated release notes
        git tag -a "$VERSION" -m "Release $VERSION ($TYPE release)
        
        $RELEASE_NOTES"
        git push origin "$VERSION"
        
        echo "‚úÖ Created and pushed tag $VERSION"
        echo "üöÄ This will trigger the release workflow to publish to PyPI"