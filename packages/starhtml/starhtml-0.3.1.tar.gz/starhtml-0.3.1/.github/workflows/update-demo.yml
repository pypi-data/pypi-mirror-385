name: Update Demo Dependencies

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'StarHTML version to update to (leave empty for latest)'
        required: false
        type: string

jobs:
  update-demo:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
    
    - name: Configure Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Get version to update to
      id: get-version
      run: |
        # Check if version was provided as input
        if [ -n "${{ inputs.version }}" ]; then
          VERSION="${{ inputs.version }}"
          echo "Using specified version: $VERSION"
        else
          # Get latest version from PyPI
          echo "Fetching latest version from PyPI..."
          VERSION=$(curl -s https://pypi.org/pypi/starhtml/json | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])" 2>/dev/null || echo "")
          
          if [ -z "$VERSION" ]; then
            echo "❌ Failed to fetch latest version from PyPI"
            exit 1
          fi
          
          echo "Latest PyPI version: $VERSION"
        fi
        
        # Verify the version exists on PyPI
        if curl -s https://pypi.org/pypi/starhtml/$VERSION/json > /dev/null 2>&1; then
          echo "✅ Version $VERSION is available on PyPI"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "❌ Version $VERSION not found on PyPI"
          exit 1
        fi
    
    - name: Update demo requirements
      run: |
        cd web
        VERSION="${{ steps.get-version.outputs.version }}"

        # First, ensure we have a clean state (in case of previous failures)
        git checkout pyproject.toml 2>/dev/null || true

        # Update pyproject.toml to use the exact version
        # Only match starhtml in the dependencies array (with leading spaces)
        sed -i "s/    \"starhtml[^\"]*\"/    \"starhtml>=$VERSION\"/" pyproject.toml

        # Update the lock file
        uv lock --upgrade-package starhtml

        echo "✅ Updated demo to use starhtml $VERSION"

    - name: Commit and push changes
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"

        git add web/pyproject.toml web/uv.lock
        git commit -m "chore: update web to use starhtml $VERSION [skip ci]"
        git push origin main