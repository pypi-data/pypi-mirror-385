name: CI

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Detect if this is a documentation-only change
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      docs-only: ${{ steps.filter.outputs.docs-only }}
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Need full history to compare commits
    - name: Check changed files
      id: filter
      run: |
        # Get list of changed files
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        else
          FILES=$(git diff --name-only HEAD^)
        fi

        echo "Changed files:"
        echo "$FILES"

        # Check if ONLY documentation files changed
        DOCS_ONLY=true
        while IFS= read -r file; do
          # Allow these documentation-only files (excluding .github/ workflows)
          if [[ ! "$file" =~ ^(CHANGELOG\.md|README\.md|docs/.*|LICENSE|NOTICE|CONTRIBUTING\.md|SECURITY\.md|TRADEMARK\.md)$ ]]; then
            DOCS_ONLY=false
            echo "Non-docs file changed: $file"
            break
          fi
        done <<< "$FILES"

        echo "docs-only=$DOCS_ONLY" >> $GITHUB_OUTPUT
        echo "Documentation-only PR: $DOCS_ONLY"

  # Lightweight validation for docs-only changes
  validate-docs:
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-only == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - name: Validate documentation
      run: |
        echo "‚úÖ Documentation-only change detected"
        echo "Running lightweight validation..."

        # Check markdown files are valid
        if command -v markdownlint >/dev/null 2>&1; then
          markdownlint . || echo "Markdown linting skipped (markdownlint not required)"
        fi

        echo "‚úÖ Validation complete for documentation changes"

  # Full test suite for code changes
  test:
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-only == 'false'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Needed for setuptools_scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Run pre-commit checks
      run: |
        pre-commit run --all-files

    - name: Run tests with pytest
      run: |
        python -c "import os; os.makedirs('tests/coverage', exist_ok=True)"
        pytest

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        files: ./tests/coverage/coverage.xml
        fail_ci_if_error: false

  security:
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-only == 'false'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade "pip>=25.3" || python -m pip install --upgrade "pip!=25.2"
        pip install -e .[security]

    - name: Run Bandit security scan
      run: |
        mkdir -p tests/security
        bandit -r src/ -f json -o tests/security/bandit-report.json --skip B110
        bandit -r src/ --skip B110

    - name: Run Safety scan
      run: |
        safety check --json || echo "Safety scan completed with warnings"

    - name: Run pip-audit
      run: |
        pip-audit || echo "pip-audit completed with warnings (known pip build tool vulnerability)"

  build-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-only == 'false'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Needed for setuptools_scm

    - name: Set up Python 3.11
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools_scm

    - name: Test setuptools_scm version detection
      run: |
        python -c "from setuptools_scm import get_version; print(f'Version: {get_version()}')"

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test installation
      run: |
        pip install dist/*.whl
        adri --version
        python -c "import adri; print(f'ADRI version: {adri.__version__}')"

    # Skip artifact upload under act (local) - fails due to missing node in runner
    - name: Upload build artifacts
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: adri-build-3.11
        path: dist/

  validate-root-structure:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: always()  # Run for both docs and code changes

    steps:
    - uses: actions/checkout@v5

    - name: Clean up temporary CI artifacts before validation
      run: |
        echo "üßπ Cleaning up temporary CI artifacts in validation environment..."

        # Remove all possible temporary artifacts that might exist
        rm -rf coverage.* .coverage* htmlcov/ .pytest_cache/ .benchmarks/
        rm -rf build/ dist/ *.egg-info/ .tox/ .mypy_cache/ .hypothesis/
        rm -rf bandit-report.* *.tmp *.temp pip-*.log
        rm -rf __pycache__/ .DS_Store Thumbs.db

        echo "‚úÖ Cleanup completed in validation environment"

    - name: Validate root directory structure
      run: |
        echo "üîç Validating repository root directory structure..."

        # Define allowed root files
        ALLOWED_FILES=(
          ".commitlintrc.json"
          ".flake8"
          ".gitignore"
          ".gitmessage"
          ".pre-commit-config.yaml"
          "adri-config.yaml"
          "ARCHITECTURE.md"
          "CHANGELOG.md"
          "CONTRIBUTING.md"
          "ENTERPRISE_FEATURES.md"
          "LICENSE"
          "NOTICE"
          "pyproject.toml"
          "README.md"
          "SECURITY.md"
          "TRADEMARK.md"
          "UPSTREAM_SYNC.md"
        )

        # Define allowed root directories
        ALLOWED_DIRS=(
          ".git"
          ".github"
          "ADRI"
          "archive"
          "demos"
          "docs"
          "examples"
          "scripts"
          "src"
          "tests"
        )

        # Check for unauthorized files in root (excluding temporary test artifacts)
        echo "üìÅ Checking for unauthorized files in root directory..."
        VIOLATIONS=0

        for file in *; do
          # Skip temporary test artifacts that might be created during parallel CI runs
          if [[ "$file" =~ ^(htmlcov|\.coverage.*|coverage\.(json|xml)|\.pytest_cache|\.benchmarks|.*_standard\.yaml|test_logs|bandit-report\.(json|xml)|\.tox|\.mypy_cache|\.hypothesis|.*\.tmp|.*\.temp|pip-.*\.log|build|dist|.*\.egg-info)$ ]]; then
            echo "‚è≠Ô∏è Skipping temporary artifact: $file"
            continue
          fi
          if [[ -f "$file" ]]; then
            # Check if file is in allowed list
            FOUND=0
            for allowed in "${ALLOWED_FILES[@]}"; do
              if [[ "$file" == "$allowed" ]]; then
                FOUND=1
                break
              fi
            done

            if [[ $FOUND -eq 0 ]]; then
              echo "‚ùå UNAUTHORIZED FILE: $file"
              echo "   Should be moved to appropriate directory:"

              # Suggest proper location based on file type
              case "$file" in
                *.md)
                  if [[ "$file" == *"plan"* || "$file" == *"implementation"* || "$file" == *"guide"* ]]; then
                    echo "   ‚Üí archive/internal-docs/ (internal documentation)"
                  else
                    echo "   ‚Üí docs/ (user documentation)"
                  fi
                  ;;
                *.py)
                  echo "   ‚Üí tests/ (test files) or examples/ (example code)"
                  ;;
                *.json|*.xml|*.report)
                  echo "   ‚Üí Should be in .gitignore (build artifacts)"
                  ;;
                *.yaml|*.yml)
                  if [[ "$file" != "adri-config.yaml" ]]; then
                    echo "   ‚Üí examples/standards/ (data standards) or tests/fixtures/ (test data)"
                  fi
                  ;;
                *)
                  echo "   ‚Üí Check if this file should exist or be gitignored"
                  ;;
              esac
              VIOLATIONS=$((VIOLATIONS + 1))
            fi
          elif [[ -d "$file" ]]; then
            # Check if directory is in allowed list
            FOUND=0
            for allowed in "${ALLOWED_DIRS[@]}"; do
              if [[ "$file" == "$allowed" ]]; then
                FOUND=1
                break
              fi
            done

            if [[ $FOUND -eq 0 ]]; then
              echo "‚ùå UNAUTHORIZED DIRECTORY: $file"
              echo "   Consider if this should be:"
              echo "   ‚Üí Moved inside src/, tests/, docs/, or examples/"
              echo "   ‚Üí Added to .gitignore if it's a build artifact"
              echo "   ‚Üí Archived if it's legacy/internal content"
              VIOLATIONS=$((VIOLATIONS + 1))
            fi
          fi
        done

        # Report results
        if [[ $VIOLATIONS -eq 0 ]]; then
          echo "‚úÖ Root directory structure is clean and compliant!"
          echo ""
          echo "üìä Current root structure:"
          ls -la | grep -E "^(d|-)" | awk '{print "   " $9}' | grep -v "^\.$" | grep -v "^\.\.$$"
        else
          echo ""
          echo "‚ùå Found $VIOLATIONS structure violations!"
          echo ""
          echo "üìã Clean root directory policy:"
          echo "   ‚Ä¢ Documentation: README.md, CHANGELOG.md, CONTRIBUTING.md, etc."
          echo "   ‚Ä¢ Configuration: pyproject.toml, .gitignore, .pre-commit-config.yaml"
          echo "   ‚Ä¢ Source directories: src/, tests/, docs/, examples/, demos/"
          echo "   ‚Ä¢ NO: Planning docs, build artifacts, temp files, AI-generated files"
          echo ""
          echo "üõ†Ô∏è  To fix violations:"
          echo "   1. Move files to appropriate directories (see suggestions above)"
          echo "   2. Add build artifacts to .gitignore"
          echo "   3. Archive internal documentation to archive/internal-docs/"
          echo ""
          exit 1
        fi

  validate-gitignore-protection:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: always()  # Run for both docs and code changes

    steps:
    - uses: actions/checkout@v5

    - name: Validate .gitignore protections
      run: |
        echo "üõ°Ô∏è Validating .gitignore protection patterns..."

        # Required protection patterns
        REQUIRED_PATTERNS=(
          "archive/"
          "src/adri/_version.py"
          "*_plan.md"
          "*_implementation*.md"
          "*.DS_Store"
          "*.swp"
          "bandit-report.json"
          "coverage.xml"
          "dist/"
          "build/"
          "*.egg-info/"
        )

        MISSING_PATTERNS=()

        for pattern in "${REQUIRED_PATTERNS[@]}"; do
          if ! grep -qF "$pattern" .gitignore; then
            MISSING_PATTERNS+=("$pattern")
          fi
        done

        if [[ ${#MISSING_PATTERNS[@]} -eq 0 ]]; then
          echo "‚úÖ All required protection patterns are present in .gitignore"
        else
          echo "‚ùå Missing required .gitignore patterns:"
          for pattern in "${MISSING_PATTERNS[@]}"; do
            echo "   - $pattern"
          done
          echo ""
          echo "These patterns help prevent accidental publication of:"
          echo "   ‚Ä¢ Build artifacts and temporary files"
          echo "   ‚Ä¢ AI-generated planning documents"
          echo "   ‚Ä¢ System files and caches"
          echo "   ‚Ä¢ Internal development artifacts"
          exit 1
        fi
