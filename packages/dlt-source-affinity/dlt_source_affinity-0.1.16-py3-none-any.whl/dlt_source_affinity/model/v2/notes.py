# generated by datamodel-codegen:
#   filename:  v2_spec.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, List, Literal

from pydantic import AwareDatetime, ConfigDict, Field, RootModel

from .. import MyBaseModel
from . import CompanyData, Opportunity, PaginationWithTotalCount, PersonData


class Content(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    html: str | None = None
    """
    The HTML content of the note
    """


class PersonMention(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=2147483647)]
    """
    The id of the mention
    """
    type: Literal["person"]
    """
    The type of mention
    """
    person: PersonData


class Mention(RootModel[PersonMention]):
    root: Annotated[PersonMention, Field(discriminator="type", title="notes.Mention")]
    """
    A mention in a note.
    """


class BaseNote(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=2147483647)]
    """
    The id of the note
    """
    content: Content
    creator: PersonData
    mentions: Annotated[List[Mention], Field(max_length=100)]
    """
    The mentions in the note
    """
    createdAt: AwareDatetime
    """
    The date and time the note was created
    """
    updatedAt: AwareDatetime | None = None
    """
    The date and time the note was last updated
    """


class SharingType(Enum):
    PRIVATE = "private"
    PUBLIC = "public"
    CUSTOM = "custom"


class PermissionSettings(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    sharingType: SharingType
    """
    The sharing type of the note
    """
    owner: PersonData


class OpportunitiesPreview(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Opportunity] | None, Field(max_length=100)] = None
    """
    Preview of attached Opportunities for a Note
    """
    totalCount: Annotated[int | None, Field(ge=0, le=9007199254740991)] = None
    """
    The total count of the collection parameter.
    """


class PersonsPreview(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[PersonData] | None, Field(max_length=100)] = None
    """
    Preview of attached Persons for a Note
    """
    totalCount: Annotated[int | None, Field(ge=0, le=9007199254740991)] = None
    """
    The total count of the collection parameter.
    """


class CompaniesPreview(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[CompanyData] | None, Field(max_length=100)] = None
    """
    Preview of attached Companies for a Note
    """
    totalCount: Annotated[int | None, Field(ge=0, le=9007199254740991)] = None
    """
    The total count of the collection parameter.
    """


class BaseRootNote(BaseNote):
    model_config = ConfigDict(
        extra="ignore",
    )
    repliesCount: Annotated[int | None, Field(ge=0, le=2147483647)] = None
    """
    The number of replies to this note. This is only included if the `repliesCount` parameter is passed in the `includes` in the request and the note is not a reply itself.
    """
    permissions: PermissionSettings | None = None
    opportunitiesPreview: OpportunitiesPreview | None = None
    personsPreview: PersonsPreview | None = None
    companiesPreview: CompaniesPreview | None = None


class EntitiesNote(BaseRootNote):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["entities"]
    """
    The type of the note
    """


class MeetingInteraction(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=9007199254740991)]
    """
    The id of the Meeting (Event)
    """
    type: Literal["meeting"]
    """
    The type of the Interaction
    """


class CallInteraction(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=9007199254740991)]
    """
    The id of the Call (Event)
    """
    type: Literal["call"]
    """
    The type of the Interaction
    """


class ChatMessageInteraction(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=9007199254740991)]
    """
    The id of the ChatMessage
    """
    type: Literal["chat-message"]
    """
    The type of the Interaction
    """


class EmailInteraction(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=9007199254740991)]
    """
    The id of the Email
    """
    type: Literal["email"]
    """
    The type of the Interaction
    """


class Interaction(
    RootModel[
        MeetingInteraction | CallInteraction | ChatMessageInteraction | EmailInteraction
    ]
):
    root: Annotated[
        MeetingInteraction
        | CallInteraction
        | ChatMessageInteraction
        | EmailInteraction,
        Field(discriminator="type", title="notes.NoteInteraction"),
    ]
    """
    An interaction attached to a Note. It can be a Meeting, a Call or an ChatMessage.
    """


class InteractionNote(BaseRootNote):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["interaction"]
    """
    The type of the note
    """
    interaction: Interaction


class AiNotetakerRootNote(BaseRootNote):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["ai-notetaker"]
    """
    The type of the note
    """
    interaction: MeetingInteraction | None = None
    """
    The meeting this AI Notetaker was invited to.
    """


class Parent(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=2147483647)]
    """
    The id of the parent note
    """


class BaseReply(BaseNote):
    model_config = ConfigDict(
        extra="ignore",
    )
    parent: Parent


class UserReplyNote(BaseReply):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["user-reply"]
    """
    The type of the note
    """


class AiNotetakerReplyNote(BaseReply):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["ai-notetaker-reply"]
    """
    The type of the note
    """
    interaction: MeetingInteraction | None = None
    """
    The meeting this AI Notetaker was invited to.
    """


class Note(
    RootModel[
        EntitiesNote
        | InteractionNote
        | AiNotetakerRootNote
        | UserReplyNote
        | AiNotetakerReplyNote
    ]
):
    root: Annotated[
        EntitiesNote
        | InteractionNote
        | AiNotetakerRootNote
        | UserReplyNote
        | AiNotetakerReplyNote,
        Field(discriminator="type", title="notes.Note"),
    ]
    """
    Note model
    """


class NotesPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Note], Field(max_length=100)]
    """
    A page of Note objects
    """
    pagination: PaginationWithTotalCount


class Reply(RootModel[UserReplyNote | AiNotetakerReplyNote]):
    root: Annotated[
        UserReplyNote | AiNotetakerReplyNote,
        Field(discriminator="type", title="notes.Reply"),
    ]
    """
    A Reply to a Note, created by a User or AI Notetaker.
    """


class RepliesPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Reply], Field(max_length=100)]
    """
    A page of Note Replies
    """
    pagination: PaginationWithTotalCount
