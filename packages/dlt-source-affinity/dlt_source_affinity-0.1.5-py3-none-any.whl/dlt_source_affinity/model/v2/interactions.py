# generated by datamodel-codegen:
#   filename:  v2_spec.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, List, Literal

from pydantic import AwareDatetime, ConfigDict, Field

from .. import MyBaseModel
from . import (
    Attendee,
    AttendeesPreview,
    PaginationWithTotalCount,
    PersonData,
    PersonDataPreview,
)


class Call(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The call's unique identifier
    """
    loggingType: Annotated[Literal["manual"], Field(examples=["manual"])]
    """
    Indicates how the interaction was added to Affinity: either manually by a user ('manual') or automatically through Affinity's capture process ('automated'). Currently, calls can only be logged as 'manual'.
    """
    title: Annotated[str | None, Field(examples=["Example title"])] = None
    """
    The call's title
    """
    startTime: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The timestamp of when the call starts
    """
    endTime: Annotated[
        AwareDatetime | None, Field(examples=["2023-01-01T00:00:00Z"])
    ] = None
    """
    The timestamp of when the call ends
    """
    allDay: Annotated[bool, Field(examples=[False])]
    """
    Whether the call is all day
    """
    creator: Attendee | None = None
    """
    The person who created the call
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The timestamp of when the call was created
    """
    updatedAt: Annotated[
        AwareDatetime | None, Field(examples=["2023-01-01T00:00:00Z"])
    ] = None
    """
    The timestamp of when the call was updated
    """
    attendeesPreview: AttendeesPreview
    """
    A preview of the attendees in the call
    """


class CallPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Call], Field(max_length=100)]
    """
    A page of Call results
    """
    pagination: PaginationWithTotalCount


class Direction(Enum):
    SENT = "sent"
    RECEIVED = "received"


class ChatMessage(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The chat message's unique identifier
    """
    sentAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The timestamp of when the chat message was sent
    """
    loggingType: Annotated[Literal["manual"], Field(examples=["manual"])]
    """
    Indicates how the interaction was added to Affinity: either manually by a user ('manual') or automatically through Affinity's capture process ('automated'). Currently, chat messages can only be logged as 'manual'.
    """
    direction: Annotated[Direction, Field(examples=["sent"])]
    """
    The direction of the chat message
    """
    creator: PersonData
    """
    The creator of the chat message
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2022-01-01T00:00:00Z"])]
    """
    The timestamp of when the chat message was created
    """
    updatedAt: Annotated[
        AwareDatetime | None, Field(examples=["2023-01-01T00:00:00Z"])
    ] = None
    """
    The timestamp of when the chat message was updated
    """
    participantsPreview: PersonDataPreview
    """
    A preview of the participants who are in the chat message
    """


class ChatMessagePaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[ChatMessage], Field(max_length=100)]
    """
    A page of ChatMessage results
    """
    pagination: PaginationWithTotalCount


class Email(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The email's unique identifier
    """
    sentAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The timestamp of when the email was sent
    """
    loggingType: Annotated[Literal["automated"], Field(examples=["automated"])]
    """
    Indicates how the interaction was added to Affinity: either manually by a user ('manual') or automatically through Affinity's capture process ('automated'). Currently, emails can only be logged as 'automated'.
    """
    direction: Annotated[Direction, Field(examples=["received"])]
    """
    The direction of the email: 'sent' if the email was sent by an internal user and  'received' if the email was sent to an internal user.
    """
    subject: Annotated[str | None, Field(examples=["Example subject"])] = None
    """
    The email's subject
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The timestamp of when the email was created
    """
    updatedAt: Annotated[
        AwareDatetime | None, Field(examples=["2023-01-01T00:00:00Z"])
    ] = None
    """
    The timestamp of when the email was updated
    """
    from_: Annotated[Attendee, Field(alias="from")]
    """
    The participant who sent the email
    """
    toParticipantsPreview: AttendeesPreview
    """
    A preview of the participants in the 'To' field of the email
    """
    ccParticipantsPreview: AttendeesPreview
    """
    A preview of the participants who are cc'ed in the email
    """


class EmailPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Email], Field(max_length=100)]
    """
    A page of Email results
    """
    pagination: PaginationWithTotalCount


class LoggingType(Enum):
    AUTOMATED = "automated"
    MANUAL = "manual"


class Meeting(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The meeting's unique identifier
    """
    loggingType: Annotated[LoggingType, Field(examples=["automated"])]
    """
    Indicates how the interaction was added to Affinity: either manually by a user ('manual') or automatically through Affinity's capture process ('automated').
    """
    title: Annotated[str | None, Field(examples=["Example title"])] = None
    """
    The meeting's title
    """
    startTime: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The timestamp of when the meeting starts
    """
    endTime: Annotated[
        AwareDatetime | None, Field(examples=["2023-01-01T00:00:00Z"])
    ] = None
    """
    The timestamp of when the meeting ends
    """
    allDay: Annotated[bool, Field(examples=[False])]
    """
    Whether the meeting is all day
    """
    creator: Attendee | None = None
    """
    The person who created the meeting
    """
    organizer: Attendee | None = None
    """
    The person who organized the meeting
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The timestamp of when the meeting was created
    """
    updatedAt: Annotated[
        AwareDatetime | None, Field(examples=["2023-01-01T00:00:00Z"])
    ] = None
    """
    The timestamp of when the meeting was updated
    """
    attendeesPreview: AttendeesPreview
    """
    A preview of the attendees in the meeting
    """


class MeetingPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Meeting], Field(max_length=100)]
    """
    A page of Meeting results
    """
    pagination: PaginationWithTotalCount
