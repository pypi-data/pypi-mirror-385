# generated by datamodel-codegen:
#   filename:  v2_spec.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, List, Literal
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, ConfigDict, Field, RootModel

from .. import MyBaseModel


class AuthenticationError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["authentication"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class AuthorizationError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["authorization"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class BadRequestError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["bad-request"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class ConflictError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["conflict"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class MethodNotAllowedError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["method-not-allowed"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class NotAcceptableError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["not-acceptable"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class NotFoundError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["not-found"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class NotImplementedError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["not-implemented"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class RateLimitError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["rate-limit"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class ServerError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["server"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class UnprocessableEntityError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["unprocessable-entity"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class UnsupportedMediaTypeError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["unsupported-media-type"]
    """
    Error code
    """
    message: str
    """
    Error message
    """


class ValidationError(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    code: Literal["validation"]
    """
    Error code
    """
    message: str
    """
    Error message
    """
    param: str
    """
    Param the error refers to
    """


class Error(
    RootModel[
        AuthenticationError
        | AuthorizationError
        | BadRequestError
        | ConflictError
        | MethodNotAllowedError
        | NotAcceptableError
        | NotFoundError
        | NotImplementedError
        | RateLimitError
        | ServerError
        | UnprocessableEntityError
        | UnsupportedMediaTypeError
        | ValidationError
    ]
):
    root: Annotated[
        AuthenticationError
        | AuthorizationError
        | BadRequestError
        | ConflictError
        | MethodNotAllowedError
        | NotAcceptableError
        | NotFoundError
        | NotImplementedError
        | RateLimitError
        | ServerError
        | UnprocessableEntityError
        | UnsupportedMediaTypeError
        | ValidationError,
        Field(discriminator="code", title="Error"),
    ]


class Errors(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    errors: List[Error]
    """
    Errors
    """


class Tenant(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The tenant's unique identifier
    """
    name: Annotated[str, Field(examples=["Contoso Ltd."])]
    """
    The name of the tenant
    """
    subdomain: Annotated[str, Field(examples=["contoso"])]
    """
    The tenant's subdomain under affinity.co
    """


class User(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The user's unique identifier
    """
    firstName: Annotated[str, Field(examples=["John"])]
    """
    The user's first name
    """
    lastName: Annotated[str | None, Field(examples=["Smith"])] = None
    """
    The user's last name
    """
    emailAddress: Annotated[str, Field(examples=["john.smith@contoso.com"])]
    """
    The user's email address
    """


class Type(Enum):
    API_KEY = "api-key"
    ACCESS_TOKEN = "access-token"


class Grant(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Annotated[Type, Field(examples=["api-key"])]
    """
    The type of grant used to authenticate
    """
    scopes: Annotated[List[str], Field(examples=[["api"]])]
    """
    The scopes available to the current grant
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    When the grant was created
    """


class WhoAmI(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    tenant: Tenant
    user: User
    grant: Grant


class NotFoundErrors(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    errors: List[NotFoundError]
    """
    NotFoundError errors
    """


class Type1(Enum):
    INTERNAL = "internal"
    EXTERNAL = "external"
    COLLABORATOR = "collaborator"


class PersonData(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The persons's unique identifier
    """
    firstName: Annotated[str | None, Field(examples=["Jane"])] = None
    """
    The person's first name
    """
    lastName: Annotated[str | None, Field(examples=["Doe"])] = None
    """
    The person's last name
    """
    primaryEmailAddress: Annotated[str | None, Field(examples=["jane.doe@acme.co"])] = (
        None
    )
    """
    The person's primary email address
    """
    type: Annotated[Type1, Field(examples=["internal"])]
    """
    The person's type
    """


class Attendee(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    emailAddress: Annotated[str | None, Field(examples=["john.smith@contoso.com"])] = (
        None
    )
    """
    The email addresses of the attendee
    """
    person: PersonData | None = None


class AttendeesPreview(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Attendee], Field(max_length=100)]
    """
    A preview of Attendees
    """
    totalCount: Annotated[int, Field(examples=[200], ge=0, le=9007199254740991)]
    """
    The total count of Attendees
    """


class Pagination(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    prevUrl: Annotated[
        AnyUrl | None,
        Field(
            examples=["https://api.affinity.co/v2/foo?cursor=ICAgICAgYmVmb3JlOjo6Nw"]
        ),
    ] = None
    """
    URL for the previous page
    """
    nextUrl: Annotated[
        AnyUrl | None,
        Field(
            examples=["https://api.affinity.co/v2/foo?cursor=ICAgICAgIGFmdGVyOjo6NA"]
        ),
    ] = None
    """
    URL for the next page
    """


class PaginationWithTotalCount(Pagination):
    model_config = ConfigDict(
        extra="ignore",
    )
    totalCount: Annotated[int | None, Field(ge=0, le=9007199254740991)] = None
    """
    The total count of the collection. Only included if requested via the totalCount query string parameter.
    """


class PersonDataPreview(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[PersonData], Field(max_length=100)]
    """
    A preview of persons
    """
    totalCount: Annotated[int, Field(examples=[200], ge=0, le=9007199254740991)]
    """
    The total count of persons
    """


class CompanyData(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The company's unique identifier
    """
    name: Annotated[str, Field(examples=["Acme"])]
    """
    The company's name
    """
    domain: Annotated[str | None, Field(examples=["acme.co"])] = None
    """
    The company's primary domain
    """


class CompanyValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["company"]
    """
    The type of value
    """
    data: CompanyData | None = None


class CompaniesValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["company-multi"]
    """
    The type of value
    """
    data: Annotated[List[CompanyData] | None, Field(max_length=100)]
    """
    The values for many companies
    """


class DateValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["datetime"]
    """
    The type of value
    """
    data: AwareDatetime | None = None
    """
    The value for a date
    """


class Dropdown(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    dropdownOptionId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    Dropdown item's unique identifier
    """
    text: Annotated[str, Field(examples=["first"])]
    """
    Dropdown item text
    """


class DropdownValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["dropdown"]
    """
    The type of value
    """
    data: Dropdown | None = None


class DropdownsValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["dropdown-multi"]
    """
    The type of value
    """
    data: List[Dropdown] | None
    """
    The value for many dropdown items
    """


class FloatValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["number"]
    """
    The type of value
    """
    data: float | None = None
    """
    The value for a number
    """


class FloatsValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["number-multi"]
    """
    The type of value
    """
    data: List[float] | None
    """
    The value for many numbers
    """


class Type2(Enum):
    FILTERABLE_TEXT = "filterable-text"
    TEXT = "text"


class TextValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Annotated[
        Literal["filterable-text", "text"], Field(examples=["filterable-text"])
    ]
    """
    The type of value
    """
    data: str | None = None
    """
    The value for a string
    """


class LinkedInEntry(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    link: str | None = None
    """
    The link to the LinkedIn entry
    """
    text: str | None = None


class TextsValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["filterable-text-multi"]
    """
    The type of value
    """
    data: List[LinkedInEntry] | List[str] | None = None
    """
    The value for many strings
    """


class FormulaNumber(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    calculatedValue: float | None = None
    """
    Calculated value
    """


class FormulaValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["formula-number"]
    """
    The type of value
    """
    data: FormulaNumber | None = None


class Direction(Enum):
    RECEIVED = "received"
    SENT = "sent"


class ChatMessage(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Annotated[Literal["chat-message"], Field(examples=["chat-message"])]
    """
    The type of interaction
    """
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The chat message's unique identifier
    """
    direction: Annotated[Direction, Field(examples=["sent"])]
    """
    The direction of the chat message
    """
    sentAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The time the chat message was sent
    """
    manualCreator: PersonData
    participants: List[PersonData]
    """
    The participants of the chat
    """


class Email(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Annotated[Literal["email"], Field(examples=["email"])]
    """
    The type of interaction
    """
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The email's unique identifier
    """
    subject: Annotated[str | None, Field(examples=["Acme Upsell $10k"])] = None
    """
    The subject of the email
    """
    sentAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The time the email was sent
    """
    from_: Annotated[Attendee, Field(alias="from")]
    to: List[Attendee]
    """
    The recipients of the email
    """
    cc: List[Attendee]
    """
    The cc recipients of the email
    """


class Meeting(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Annotated[Literal["meeting"], Field(examples=["meeting"])]
    """
    The type of interaction
    """
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The meeting's unique identifier
    """
    title: Annotated[str | None, Field(examples=["Acme Upsell $10k"])] = None
    """
    The meeting's title
    """
    allDay: Annotated[bool, Field(examples=[False])]
    """
    Whether the meeting is an all-day event
    """
    startTime: Annotated[AwareDatetime, Field(examples=["2023-02-03T04:00:00Z"])]
    """
    The meeting start time
    """
    endTime: Annotated[
        AwareDatetime | None, Field(examples=["2023-02-03T05:00:00Z"])
    ] = None
    """
    The meeting end time
    """
    attendees: List[Attendee]
    """
    People attending the meeting
    """


class PhoneCall(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Annotated[Literal["call"], Field(examples=["call"])]
    """
    The type of interaction
    """
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The phon_call's unique identifier
    """
    startTime: Annotated[AwareDatetime, Field(examples=["2023-02-03T04:00:00Z"])]
    """
    The call start time
    """
    attendees: List[Attendee]
    """
    People attending the call
    """


class Interaction(RootModel[ChatMessage | Email | Meeting | PhoneCall]):
    root: Annotated[
        ChatMessage | Email | Meeting | PhoneCall,
        Field(discriminator="type", title="Interaction"),
    ]


class InteractionValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["interaction"]
    """
    The type of value
    """
    data: Interaction | None = None


class Location(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    streetAddress: Annotated[str | None, Field(examples=["1 Main Street"])] = None
    """
    Street address
    """
    city: Annotated[str | None, Field(examples=["San Francisco"])] = None
    """
    City
    """
    state: Annotated[str | None, Field(examples=["California"])] = None
    """
    State
    """
    country: Annotated[str | None, Field(examples=["United States"])] = None
    """
    Country
    """
    continent: Annotated[str | None, Field(examples=["North America"])] = None
    """
    Continent
    """


class LocationValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["location"]
    """
    The type of value
    """
    data: Location | None = None


class LocationsValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["location-multi"]
    """
    The type of value
    """
    data: List[Location] | None
    """
    The values for many locations
    """


class PersonValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["person"]
    """
    The type of value
    """
    data: PersonData | None = None


class PersonsValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["person-multi"]
    """
    The type of value
    """
    data: Annotated[List[PersonData] | None, Field(max_length=100)]
    """
    The values for many persons
    """


class RankedDropdown(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    dropdownOptionId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    Dropdown item's unique identifier
    """
    text: Annotated[str, Field(examples=["first"])]
    """
    Dropdown item text
    """
    rank: Annotated[int, Field(examples=[0], ge=0, le=9007199254740991)]
    """
    Dropdown item rank
    """
    color: Annotated[str | None, Field(examples=["white"])] = None
    """
    Dropdown item color
    """


class RankedDropdownValue(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["ranked-dropdown"]
    """
    The type of value
    """
    data: RankedDropdown | None = None


class FieldValue(
    RootModel[
        CompaniesValue
        | CompanyValue
        | DateValue
        | DropdownsValue
        | DropdownValue
        | FloatsValue
        | FloatValue
        | FormulaValue
        | InteractionValue
        | LocationsValue
        | LocationValue
        | PersonsValue
        | PersonValue
        | RankedDropdownValue
        | TextsValue
        | TextValue
    ]
):
    root: Annotated[
        CompaniesValue
        | CompanyValue
        | DateValue
        | DropdownsValue
        | DropdownValue
        | FloatsValue
        | FloatValue
        | FormulaValue
        | InteractionValue
        | LocationsValue
        | LocationValue
        | PersonsValue
        | PersonValue
        | RankedDropdownValue
        | TextsValue
        | TextValue,
        Field(
            discriminator="type",
            examples=[
                {
                    "data": {
                        "continent": "North America",
                        "country": "United States",
                        "streetAddress": "1 Main Street",
                        "city": "San Francisco",
                        "state": "California",
                    },
                    "type": "location",
                }
            ],
            title="FieldValue",
        ),
    ]


class Type3(Enum):
    ENRICHED = "enriched"
    GLOBAL_ = "global"
    LIST = "list"
    RELATIONSHIP_INTELLIGENCE = "relationship-intelligence"


class EnrichmentSource(Enum):
    AFFINITY_DATA = "affinity-data"
    DEALROOM = "dealroom"
    NONE_TYPE_NONE = None


class FieldModel(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[str, Field(examples=["affinity-data-location", "field-1234"])]
    """
    The field's unique identifier
    """
    name: Annotated[str, Field(examples=["Location"])]
    """
    The field's name
    """
    type: Annotated[Type3, Field(examples=["enriched"])]
    """
    The field's type
    """
    enrichmentSource: Annotated[
        EnrichmentSource | None, Field(examples=["affinity-data"])
    ]
    """
    The source of the data in this Field (if it is enriched)
    """
    value: FieldValue


class Company(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The company's unique identifier
    """
    name: Annotated[str, Field(examples=["Acme"])]
    """
    The company's name
    """
    domain: Annotated[str | None, Field(examples=["acme.co"])] = None
    """
    The company's primary domain
    """
    domains: Annotated[List[str], Field(examples=[["acme.co"]])]
    """
    All of the company's domains
    """
    isGlobal: Annotated[bool, Field(examples=[True])]
    """
    Whether or not the company is tenant specific
    """
    fields: List[FieldModel] | None = None
    """
    The fields associated with the company
    """


class CompanyPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Company], Field(max_length=100)]
    """
    A page of Company results
    """
    pagination: Pagination


class AuthorizationErrors(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    errors: List[AuthorizationError]
    """
    AuthorizationError errors
    """


class ValueType(Enum):
    PERSON = "person"
    PERSON_MULTI = "person-multi"
    COMPANY = "company"
    COMPANY_MULTI = "company-multi"
    FILTERABLE_TEXT = "filterable-text"
    FILTERABLE_TEXT_MULTI = "filterable-text-multi"
    NUMBER = "number"
    NUMBER_MULTI = "number-multi"
    DATETIME = "datetime"
    LOCATION = "location"
    LOCATION_MULTI = "location-multi"
    TEXT = "text"
    RANKED_DROPDOWN = "ranked-dropdown"
    DROPDOWN = "dropdown"
    DROPDOWN_MULTI = "dropdown-multi"
    FORMULA_NUMBER = "formula-number"
    INTERACTION = "interaction"


class FieldMetadata(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[str, Field(examples=["affinity-data-location", "field-1234"])]
    """
    The field's unique identifier
    """
    name: Annotated[str, Field(examples=["Location"])]
    """
    The field's name
    """
    type: Annotated[Type3, Field(examples=["enriched"])]
    """
    The field's type
    """
    enrichmentSource: Annotated[
        EnrichmentSource | None, Field(examples=["affinity-data"])
    ]
    """
    The source of the data in this Field (if it is enriched)
    """
    valueType: Annotated[ValueType, Field(examples=["location"])]
    """
    The type of the data in this Field
    """


class FieldMetadataPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[FieldMetadata], Field(max_length=100)]
    """
    A page of FieldMetadata results
    """
    pagination: Pagination


class ListModel(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The unique identifier for the list
    """
    name: Annotated[str, Field(examples=["All companies"])]
    """
    The name of the list
    """
    creatorId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the user that created this list
    """
    ownerId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the user that owns this list
    """
    isPublic: Annotated[bool, Field(examples=[False])]
    """
    Whether or not the list is public
    """


class ListPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[ListModel], Field(max_length=100)]
    """
    A page of List results
    """
    pagination: Pagination


class ListEntry(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The list entry's unique identifier
    """
    listId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the list that this list entry belongs to
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The date that the list entry was created
    """
    creatorId: Annotated[int | None, Field(examples=[1], ge=1, le=9007199254740991)] = (
        None
    )
    """
    The ID of the user that created this list entry
    """
    fields: List[FieldModel]
    """
    The fields associated with the list entry
    """


class ListEntryPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[ListEntry], Field(max_length=100)]
    """
    A page of ListEntry results
    """
    pagination: Pagination


class Opportunity(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The unique identifier for the opportunity
    """
    name: Annotated[str, Field(examples=["Acme Upsell $10k"])]
    """
    The name of the opportunity
    """
    listId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the list that the opportunity belongs to
    """


class Status(Enum):
    IN_PROGRESS = "in-progress"
    SUCCESS = "success"
    FAILED = "failed"


class CompanyMergeState(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[12345], ge=1, le=9007199254740991)]
    """
    The unique identifier for the merge
    """
    status: Annotated[Status, Field(examples=["success"])]
    """
    Current status of the merge
    """
    taskId: Annotated[UUID, Field(examples=["789e0123-e45b-67c8-d901-234567890123"])]
    """
    Identifier for the task this merge belongs to
    """
    startedAt: Annotated[AwareDatetime, Field(examples=["2025-06-03T10:30:00Z"])]
    """
    Timestamp when the merge started
    """
    primaryCompanyId: Annotated[int, Field(examples=[12345], ge=1, le=9007199254740991)]
    """
    ID of the primary company that other profiles were merged into
    """
    duplicateCompanyId: Annotated[
        int, Field(examples=[67890], ge=1, le=9007199254740991)
    ]
    """
    ID of the duplicate company that was merged into the primary company
    """
    completedAt: Annotated[
        AwareDatetime | None, Field(examples=["2025-06-03T10:32:15Z", None])
    ] = None
    """
    Timestamp when the merge completed (success or failure)
    """
    errorMessage: Annotated[
        str | None, Field(examples=["Primary company not found", None])
    ] = None
    """
    Error message if the merge failed
    """


class CompanyMergeStatePaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[CompanyMergeState], Field(max_length=100)]
    """
    Array of company merge states
    """
    pagination: Pagination


class CompanyMergeRequest(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    primaryCompanyId: Annotated[int, Field(examples=[12345], ge=1, le=9007199254740991)]
    """
    The ID of the company profile that will be kept after the merge. All data from the duplicate company will be merged into this company.
    """
    duplicateCompanyId: Annotated[
        int, Field(examples=[67890], ge=1, le=9007199254740991)
    ]
    """
    The ID of the company profile that will be merged and then deleted. All data from this company will be transferred to the primary company.
    """


class CompanyMergeResponse(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    taskUrl: Annotated[
        AnyUrl,
        Field(
            examples=[
                "https://api.affinit.com/tasks/company-merges/123e4567-e89b-12d3-a456-426614174000"
            ]
        ),
    ]
    """
    URL to check the status of the merge task
    """


class Type5(Enum):
    COMPANY = "company"
    OPPORTUNITY = "opportunity"
    PERSON = "person"


class ListWithType(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The unique identifier for the list
    """
    name: Annotated[str, Field(examples=["All companies"])]
    """
    The name of the list
    """
    creatorId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the user that created this list
    """
    ownerId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the user that owns this list
    """
    isPublic: Annotated[bool, Field(examples=[False])]
    """
    Whether or not the list is public
    """
    type: Annotated[Type5, Field(examples=["company"])]
    """
    The entity type for this list
    """


class ListWithTypePaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[ListWithType], Field(max_length=100)]
    """
    A page of ListWithType results
    """
    pagination: Pagination


class CompanyListEntry(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The list entry's unique identifier
    """
    type: Annotated[Literal["company"], Field(examples=["company"])]
    """
    The entity type for this list entry
    """
    listId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the list that this list entry belongs to
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The date that the list entry was created
    """
    creatorId: Annotated[int | None, Field(examples=[1], ge=1, le=9007199254740991)] = (
        None
    )
    """
    The ID of the user that created this list entry
    """
    entity: Company


class OpportunityWithFields(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The unique identifier for the opportunity
    """
    name: Annotated[str, Field(examples=["Acme Upsell $10k"])]
    """
    The name of the opportunity
    """
    listId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the list that the opportunity belongs to
    """
    fields: List[FieldModel] | None = None
    """
    The fields associated with the opportunity
    """


class OpportunityListEntry(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The list entry's unique identifier
    """
    type: Annotated[Literal["opportunity"], Field(examples=["opportunity"])]
    """
    The entity type for this list entry
    """
    listId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the list that this list entry belongs to
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The date that the list entry was created
    """
    creatorId: Annotated[int | None, Field(examples=[1], ge=1, le=9007199254740991)] = (
        None
    )
    """
    The ID of the user that created this list entry
    """
    entity: OpportunityWithFields


class Type6(Enum):
    INTERNAL = "internal"
    EXTERNAL = "external"


class Person(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The persons's unique identifier
    """
    firstName: Annotated[str, Field(examples=["Jane"])]
    """
    The person's first name
    """
    lastName: Annotated[str | None, Field(examples=["Doe"])] = None
    """
    The person's last name
    """
    primaryEmailAddress: Annotated[str | None, Field(examples=["jane.doe@acme.co"])] = (
        None
    )
    """
    The person's primary email address
    """
    emailAddresses: Annotated[
        List[str], Field(examples=[["jane.doe@acme.co", "janedoe@gmail.com"]])
    ]
    """
    All of the person's email addresses
    """
    type: Annotated[Type6, Field(examples=["internal"])]
    """
    The person's type
    """
    fields: List[FieldModel] | None = None
    """
    The fields associated with the person
    """


class PersonListEntry(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The list entry's unique identifier
    """
    type: Annotated[Literal["person"], Field(examples=["person"])]
    """
    The entity type for this list entry
    """
    listId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The ID of the list that this list entry belongs to
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The date that the list entry was created
    """
    creatorId: Annotated[int | None, Field(examples=[1], ge=1, le=9007199254740991)] = (
        None
    )
    """
    The ID of the user that created this list entry
    """
    entity: Person


class ListEntryWithEntity(
    RootModel[CompanyListEntry | OpportunityListEntry | PersonListEntry]
):
    root: Annotated[
        CompanyListEntry | OpportunityListEntry | PersonListEntry,
        Field(discriminator="type", title="ListEntryWithEntity"),
    ]


class ListEntryWithEntityPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[ListEntryWithEntity] | None, Field(max_length=100)]
    """
    A page of ListEntryWithEntity results
    """
    pagination: Pagination


class FieldPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[FieldModel], Field(max_length=100)]
    """
    A page of Field results
    """
    pagination: Pagination


class CompanyReference(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(ge=1, le=9007199254740991)]
    """
    The company's unique identifier
    """


class CompaniesValueUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["company-multi"]
    """
    The type of value
    """
    data: Annotated[List[CompanyReference] | None, Field(max_length=100)]
    """
    The values for many companies
    """


class CompanyValueUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["company"]
    """
    The type of value
    """
    data: CompanyReference | None = None


class DropdownReference(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    dropdownOptionId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    Dropdown item's unique identifier
    """


class DropdownValueUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["dropdown"]
    """
    The type of value
    """
    data: DropdownReference | None = None


class DropdownsValueUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["dropdown-multi"]
    """
    The type of value
    """
    data: List[DropdownReference] | None
    """
    The value for many dropdown items
    """


class PersonReference(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    The persons's unique identifier
    """


class PersonValueUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["person"]
    """
    The type of value
    """
    data: PersonReference | None = None


class PersonsValueUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["person-multi"]
    """
    The type of value
    """
    data: Annotated[List[PersonReference] | None, Field(max_length=100)]
    """
    The values for many persons
    """


class RankedDropdownReference(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    dropdownOptionId: Annotated[int, Field(examples=[1], ge=1, le=9007199254740991)]
    """
    Ranked Dropdown item's unique identifier
    """


class RankedDropdownValueUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    type: Literal["ranked-dropdown"]
    """
    The type of value
    """
    data: RankedDropdownReference | None = None


class FieldValueUpdate(
    RootModel[
        CompaniesValueUpdate
        | CompanyValueUpdate
        | DateValue
        | DropdownValueUpdate
        | DropdownsValueUpdate
        | FloatValue
        | FloatsValue
        | LocationValue
        | LocationsValue
        | PersonValueUpdate
        | PersonsValueUpdate
        | RankedDropdownValueUpdate
        | TextValue
        | TextsValue
    ]
):
    root: Annotated[
        CompaniesValueUpdate
        | CompanyValueUpdate
        | DateValue
        | DropdownValueUpdate
        | DropdownsValueUpdate
        | FloatValue
        | FloatsValue
        | LocationValue
        | LocationsValue
        | PersonValueUpdate
        | PersonsValueUpdate
        | RankedDropdownValueUpdate
        | TextValue
        | TextsValue,
        Field(
            discriminator="type",
            examples=[
                {
                    "type": "location",
                    "data": {
                        "continent": "North America",
                        "country": "United States",
                        "streetAddress": "1 Main Street",
                        "city": "San Francisco",
                        "state": "California",
                    },
                }
            ],
            title="FieldValueUpdate",
        ),
    ]


class Update(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[str, Field(examples=["field-105"])]
    """
    The field's unique identifier.
    """
    value: FieldValueUpdate | None = None


class ListEntryBatchOperationUpdateFields(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    operation: Literal["update-fields"]
    updates: Annotated[List[Update], Field(max_length=100)]


class ListEntryBatchOperationRequest(RootModel[ListEntryBatchOperationUpdateFields]):
    root: Annotated[
        ListEntryBatchOperationUpdateFields,
        Field(discriminator="operation", title="ListEntryBatchOperationRequest"),
    ]


class ListEntryBatchOperations(Enum):
    UPDATE_FIELDS = "update-fields"


class ListEntryBatchOperationResponse(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    operation: ListEntryBatchOperations | None = None


class FieldUpdate(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    value: FieldValueUpdate | None = None


class Type7(Enum):
    SHEET = "sheet"
    BOARD = "board"
    DASHBOARD = "dashboard"


class SavedView(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[28], ge=1, le=9007199254740991)]
    """
    The saved view's unique identifier
    """
    name: Annotated[str, Field(examples=["my interesting companies"])]
    """
    The saved view's name
    """
    type: Annotated[Type7, Field(examples=["sheet"])]
    """
    The type for this saved view
    """
    createdAt: Annotated[AwareDatetime, Field(examples=["2023-01-01T00:00:00Z"])]
    """
    The date that the saved view was created
    """


class SavedViewPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[SavedView], Field(max_length=100)]
    """
    A page of SavedView results
    """
    pagination: Pagination


class CompanyDataPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[CompanyData], Field(max_length=100)]
    """
    A page of Company results
    """
    pagination: Pagination


class OpportunityPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Opportunity], Field(max_length=100)]
    """
    A page of Opportunity results
    """
    pagination: Pagination


class PersonDataPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[PersonData], Field(max_length=100)]
    """
    A page of Person results
    """
    pagination: Pagination


class PersonPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[Person], Field(max_length=100)]
    """
    A page of Person results
    """
    pagination: Pagination


class PersonMergeState(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[int, Field(examples=[12345], ge=1, le=9007199254740991)]
    """
    The unique identifier for the merge
    """
    status: Annotated[Status, Field(examples=["success"])]
    """
    Current status of the merge
    """
    taskId: Annotated[UUID, Field(examples=["789e0123-e45b-67c8-d901-234567890123"])]
    """
    Identifier for the task this merge belongs to
    """
    startedAt: Annotated[AwareDatetime, Field(examples=["2025-06-03T10:30:00Z"])]
    """
    Timestamp when the merge started
    """
    primaryPersonId: Annotated[int, Field(examples=[12345], ge=1, le=9007199254740991)]
    """
    ID of the primary person that other profiles were merged into
    """
    duplicatePersonId: Annotated[
        int, Field(examples=[67890], ge=1, le=9007199254740991)
    ]
    """
    ID of the duplicate person that was merged into the primary person
    """
    completedAt: Annotated[
        AwareDatetime | None, Field(examples=["2025-06-03T10:32:15Z", None])
    ] = None
    """
    Timestamp when the merge completed (success or failure)
    """
    errorMessage: Annotated[
        str | None, Field(examples=["Primary person not found", None])
    ] = None
    """
    Error message if the merge failed
    """


class PersonMergeStatePaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[List[PersonMergeState], Field(max_length=100)]
    """
    Array of person merge states
    """
    pagination: Pagination


class PersonMergeRequest(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    primaryPersonId: Annotated[int, Field(examples=[12345], ge=1, le=9007199254740991)]
    """
    The ID of the person profile that will be kept after the merge. All data from the duplicate person will be merged into this person.
    """
    duplicatePersonId: Annotated[
        int, Field(examples=[67890], ge=1, le=9007199254740991)
    ]
    """
    The ID of the person profile that will be merged and then deleted. All data from this person will be transferred to the primary person.
    """


class PersonMergeResponse(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    taskUrl: Annotated[
        AnyUrl,
        Field(
            examples=[
                "https://api.affinit.com/tasks/person-merges/123e4567-e89b-12d3-a456-426614174000"
            ]
        ),
    ]
    """
    URL to check the status of the merge task
    """


class ResultsSummary(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    total: Annotated[int, Field(examples=[5], ge=0, le=2147483647)]
    """
    Total number of merges in the batch
    """
    inProgress: Annotated[int, Field(examples=[2], ge=0, le=2147483647)]
    """
    Number of merges currently in progress
    """
    success: Annotated[int, Field(examples=[2], ge=0, le=2147483647)]
    """
    Number of successfully completed merges
    """
    failed: Annotated[int, Field(examples=[1], ge=0, le=2147483647)]
    """
    Number of failed merges
    """


class PersonMergeTask(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[UUID, Field(examples=["123e4567-e89b-12d3-a456-426614174000"])]
    """
    The unique identifier for this merge task
    """
    status: Annotated[Status, Field(examples=["in-progress"])]
    """
    The current status of the batch operation
    """
    resultsSummary: ResultsSummary
    """
    Summary of merges in this batch task
    """


class PersonMergeTaskPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[
        List[PersonMergeTask],
        Field(
            examples=[
                [
                    {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "status": "success",
                        "resultsSummary": {
                            "total": 1,
                            "inProgress": 0,
                            "success": 1,
                            "failed": 0,
                        },
                    },
                    {
                        "id": "456e7890-e12b-34c5-d678-901234567890",
                        "status": "failed",
                        "resultsSummary": {
                            "total": 1,
                            "inProgress": 0,
                            "success": 0,
                            "failed": 1,
                        },
                    },
                ]
            ],
            max_length=100,
        ),
    ]
    """
    Array of person merge tasks
    """
    pagination: Pagination


class CompanyMergeTask(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    id: Annotated[UUID, Field(examples=["123e4567-e89b-12d3-a456-426614174000"])]
    """
    The unique identifier for this merge task
    """
    status: Annotated[Status, Field(examples=["in-progress"])]
    """
    The current status of the batch operation
    """
    resultsSummary: ResultsSummary
    """
    Summary of merges in this batch task
    """


class CompanyMergeTaskPaged(MyBaseModel):
    model_config = ConfigDict(
        extra="ignore",
    )
    data: Annotated[
        List[CompanyMergeTask],
        Field(
            examples=[
                [
                    {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "status": "success",
                        "resultsSummary": {
                            "total": 1,
                            "inProgress": 0,
                            "success": 1,
                            "failed": 0,
                        },
                    },
                    {
                        "id": "456e7890-e12b-34c5-d678-901234567890",
                        "status": "failed",
                        "resultsSummary": {
                            "total": 1,
                            "inProgress": 0,
                            "success": 0,
                            "failed": 1,
                        },
                    },
                ]
            ],
            max_length=100,
        ),
    ]
    """
    Array of company merge tasks
    """
    pagination: Pagination
