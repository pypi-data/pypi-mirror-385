#!/usr/bin/env python3

"""
Consolidated Nmap Vulnerability Analyzer

Parse and analyze Nmap XML scan results with comprehensive vulnerability database integration.
This file consolidates all Nmap analysis functionality into a single comprehensive tool.
Integrates with ExploitDB, NVD, and RouterSploit vulnerability databases for complete coverage.
"""

import xml.etree.ElementTree as ET
import json
import csv
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging
import os
import re
import ipaddress

# Vulnerability database integration
try:
    from vulnerability_analyzer.database.embedded import get_embedded_database
    VULN_ANALYZER_AVAILABLE = True
except ImportError:
    VULN_ANALYZER_AVAILABLE = False


class NmapAnalyzer:
    """
    Consolidated Nmap XML analyzer with comprehensive vulnerability database integration.
    """
    
    def __init__(self, xml_file: str = None, vuln_db_path: str = None):
        """Initialize the consolidated Nmap analyzer."""
        
        if xml_file:
            self.xml_file = Path(xml_file)
            if not self.xml_file.exists():
                raise FileNotFoundError(f"XML file not found: {xml_file}")
        else:
            self.xml_file = None
            
        self.hosts = []
        self.scan_info = {}
        self.vulnerability_stats = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
        
        # Vulnerability database integration
        if VULN_ANALYZER_AVAILABLE:
            try:
                self.vuln_db = get_embedded_database()
            except Exception:
                self.vuln_db = None
        else:
            self.vuln_db = None
            
        if self.xml_file:
            self._parse_xml()
            
    def _parse_xml(self):
        """Parse the XML file and extract all data."""
        tree = ET.parse(self.xml_file)
        self.root = tree.getroot()
        
        self._extract_scan_info()
        self._parse_hosts()
        
    def _extract_scan_info(self):
        """Extract scan metadata from XML root."""
        self.scan_info = {
            'scanner': self.root.get('scanner', 'nmap'),
            'version': self.root.get('version', 'unknown'),
            'start_time': self.root.get('startstr', ''),
        }
        
    def _parse_hosts(self):
        """Parse all hosts with detailed service and vulnerability analysis."""
        for host_elem in self.root.findall('host'):
            host_data = self._parse_host(host_elem)
            if host_data:
                self.hosts.append(host_data)
                
    def _parse_host(self, host_elem) -> Dict[str, Any]:
        """Parse individual host with comprehensive analysis."""
        
        host_data = {
            'addresses': [],
            'hostnames': [],
            'status': {},
            'ports': [],
            'vulnerabilities': [],
            'services': set(),
            'cves': set(),
            'risk_score': 0
        }
        
        # Parse addresses
        for addr_elem in host_elem.findall('address'):
            host_data['addresses'].append({
                'addr': addr_elem.get('addr', ''),
                'addrtype': addr_elem.get('addrtype', 'ipv4')
            })
            
        # Parse status
        status_elem = host_elem.find('status')
        if status_elem is not None:
            host_data['status'] = {
                'state': status_elem.get('state', 'unknown'),
                'reason': status_elem.get('reason', 'unknown')
            }
        
        # Parse ports
        ports_elem = host_elem.find('ports')
        if ports_elem is not None:
            for port_elem in ports_elem.findall('port'):
                port_data = self._parse_port(port_elem)
                if port_data:
                    host_data['ports'].append(port_data)
                    
                    service_name = port_data.get('service', {}).get('name', '')
                    if service_name:
                        host_data['services'].add(service_name)
                    
                    for vuln in port_data.get('vulnerabilities', []):
                        host_data['vulnerabilities'].append(vuln)
                        if vuln.get('cve_id'):
                            host_data['cves'].add(vuln['cve_id'])
                            
        # Calculate risk score
        host_data['risk_score'] = len(host_data['vulnerabilities']) * 10
        
        # Convert sets to lists
        host_data['services'] = list(host_data['services'])
        host_data['cves'] = list(host_data['cves'])
        
        return host_data
        
    def _parse_port(self, port_elem) -> Dict[str, Any]:
        """Parse port information with vulnerability analysis."""
        
        port_data = {
            'portid': int(port_elem.get('portid', 0)),
            'protocol': port_elem.get('protocol', 'tcp'),
            'state': {},
            'service': {},
            'vulnerabilities': []
        }
        
        # Parse state
        state_elem = port_elem.find('state')
        if state_elem is not None:
            port_data['state'] = {
                'state': state_elem.get('state', 'unknown'),
                'reason': state_elem.get('reason', 'unknown')
            }
        
        # Parse service
        service_elem = port_elem.find('service')
        if service_elem is not None:
            port_data['service'] = {
                'name': service_elem.get('name', 'unknown'),
                'product': service_elem.get('product', ''),
                'version': service_elem.get('version', ''),
                'method': service_elem.get('method', 'probed')
            }
        
        # Analyze vulnerabilities for this port
        port_data['vulnerabilities'] = self._analyze_port_vulnerabilities(port_data)
        
        return port_data
        
    def _analyze_port_vulnerabilities(self, port_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Analyze port for vulnerabilities using comprehensive database."""
        
        vulnerabilities = []
        service = port_data.get('service', {})
        service_name = service.get('name', '')
        service_version = service.get('version', '')
        
        if self.vuln_db and service_name:
            try:
                # Search for vulnerabilities matching the service
                search_terms = [service_name]
                if service_version:
                    search_terms.append(f"{service_name} {service_version}")
                
                for search_term in search_terms:
                    db_vulns = self.vuln_db.search_vulnerabilities(search_term)[:10]
                    
                    for vuln in db_vulns:
                        vulnerability = {
                            'id': vuln.get('id', 'Unknown'),
                            'summary': vuln.get('summary', 'No summary available'),
                            'severity': vuln.get('severity', 'unknown'),
                            'cve_id': vuln.get('cve_id'),
                            'service': service_name,
                            'source': 'vulnerability_database'
                        }
                        vulnerabilities.append(vulnerability)
                        
                        # Update vulnerability statistics
                        severity = vulnerability['severity'].lower()
                        if severity in self.vulnerability_stats:
                            self.vulnerability_stats[severity] += 1
                            
            except Exception as e:
                logging.warning(f"Error analyzing vulnerabilities for {service_name}: {e}")
        
        return vulnerabilities
        
    def analyze(self) -> Dict[str, Any]:
        """
        Perform comprehensive analysis and return standardized results.
        """
        
        if not self.hosts:
            return {
                'scan_info': self.scan_info,
                'hosts': [],
                'summary': {
                    'total_hosts': 0,
                    'total_ports': 0,
                    'total_vulnerabilities': 0
                },
                'analysis_metadata': {
                    'analyzer': 'NmapAnalyzer',
                    'version': '1.2.0',
                    'timestamp': datetime.now().isoformat(),
                    'vuln_database_available': VULN_ANALYZER_AVAILABLE and self.vuln_db is not None
                }
            }
        
        # Calculate summary statistics
        total_ports = sum(len(host.get('ports', [])) for host in self.hosts)
        total_vulnerabilities = sum(len(host.get('vulnerabilities', [])) for host in self.hosts)
        
        return {
            'scan_info': self.scan_info,
            'hosts': self.hosts,
            'summary': {
                'total_hosts': len(self.hosts),
                'total_ports': total_ports,
                'total_vulnerabilities': total_vulnerabilities,
                'vulnerability_stats': self.vulnerability_stats
            },
            'analysis_metadata': {
                'analyzer': 'NmapAnalyzer',
                'version': '1.2.0',
                'timestamp': datetime.now().isoformat(),
                'vuln_database_available': VULN_ANALYZER_AVAILABLE and self.vuln_db is not None
            }
        }
        
    def save_results(self, output_file: str, format: str = 'json'):
        """Save analysis results to file."""
        
        results = self.analyze()
        
        if format.lower() == 'json':
            with open(output_file, 'w') as f:
                json.dump(results, f, indent=2, default=str)
        elif format.lower() == 'csv':
            self._save_csv(results, output_file)
        else:
            raise ValueError(f"Unsupported format: {format}")
            
    def _save_csv(self, results: Dict[str, Any], output_file: str):
        """Save results in CSV format."""
        
        with open(output_file, 'w', newline='') as f:
            writer = csv.writer(f)
            
            # Write header
            writer.writerow(['host_ip', 'port', 'protocol', 'service', 'version', 
                           'vulnerability_id', 'severity', 'summary'])
            
            # Write data
            for host in results['hosts']:
                host_ip = host['addresses'][0]['addr'] if host['addresses'] else 'unknown'
                
                for port in host.get('ports', []):
                    port_id = port['portid']
                    protocol = port['protocol']
                    service_name = port.get('service', {}).get('name', '')
                    service_version = port.get('service', {}).get('version', '')
                    
                    vulnerabilities = port.get('vulnerabilities', [])
                    if not vulnerabilities:
                        writer.writerow([host_ip, port_id, protocol, service_name, 
                                       service_version, '', '', ''])
                    else:
                        for vuln in vulnerabilities:
                            writer.writerow([host_ip, port_id, protocol, service_name,
                                           service_version, vuln.get('id', ''),
                                           vuln.get('severity', ''), 
                                           vuln.get('summary', '')])


def main():
    """Command-line interface for the analyzer."""
    
    import argparse
    
    parser = argparse.ArgumentParser(description='Comprehensive Nmap XML Vulnerability Analyzer')
    parser.add_argument('xml_file', help='Nmap XML output file')
    parser.add_argument('-o', '--output', help='Output file path')
    parser.add_argument('-f', '--format', choices=['json', 'csv'], default='json',
                       help='Output format (default: json)')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Enable verbose logging')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.basicConfig(level=logging.INFO)
        
    try:
        analyzer = NmapAnalyzer(args.xml_file)
        results = analyzer.analyze()
        
        if args.output:
            analyzer.save_results(args.output, args.format)
            print(f"Results saved to {args.output}")
        else:
            print(json.dumps(results, indent=2, default=str))
            
    except Exception as e:
        print(f"Error: {e}")
        return 1
        
    return 0


if __name__ == "__main__":
    import sys
    sys.exit(main())