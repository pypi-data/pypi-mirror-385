#!/usr/bin/env python3
"""
Comprehensive Vulnerability Analysis Demo
Shows vulnerability detection using both Nmap XML and PCAP data

This demo demonstrates:
1. Service vulnerability analysis from Nmap scans
2. Network traffic analysis from PCAP files
3. Comprehensive assessment combining both data sources
4. Detailed vulnerability reporting
"""

import os
import sys
import json
from pathlib import Path

# Add the src directory to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

import vulnerability_analyzer


def analyze_nmap_data():
    """Analyze Nmap XML files for service vulnerabilities"""
    print("[*] NMAP SERVICE VULNERABILITY ANALYSIS")
    print("=" * 60)
    
    # Initialize analyzer
    analyzer = vulnerability_analyzer.VulnerabilityAnalyzer()
    
    # Sample Nmap files
    sample_data_dir = Path(__file__).parent / 'sample_data'
    nmap_files = [
        sample_data_dir / 'nmap_example.xml',
        sample_data_dir / 'sample-nmap-output.xml'
    ]
    
    total_vulnerabilities = 0
    
    for nmap_file in nmap_files:
        if nmap_file.exists():
            print(f"\n[*] Analyzing: {nmap_file.name}")
            
            # Parse services from XML (simplified for demo)
            services = extract_services_from_nmap(str(nmap_file))
            
            if services:
                host_ip = services[0]['host_ip']
                service_list = services[0]['services']
                
                print(f"  Host: {host_ip}")
                print(f"  Services found: {len(service_list)}")
                
                # Analyze vulnerabilities
                results = analyzer.analyze_service_vulnerabilities(host_ip, service_list)
                
                vuln_count = len(results['vulnerabilities_found'])
                total_vulnerabilities += vuln_count
                
                print(f"  Vulnerabilities found: {vuln_count}")
                print(f"  Risk score: {results['risk_score']:.1f}/10")
                
                # Show sample vulnerabilities
                print("  Sample vulnerabilities:")
                for vuln in results['vulnerabilities_found'][:3]:
                    print(f"    - {vuln['cve_id']}: {vuln['title'][:60]}...")
                    print(f"      Severity: {vuln['severity']} (Score: {vuln['base_score']})")
            else:
                print("  No services found in this file")
        else:
            print(f"  [!] File not found: {nmap_file}")
    
    return total_vulnerabilities


def analyze_pcap_data():
    """Analyze PCAP file for network traffic vulnerabilities"""
    print(f"\n[*] PCAP TRAFFIC VULNERABILITY ANALYSIS")
    print("=" * 60)
    
    # Initialize analyzer
    analyzer = vulnerability_analyzer.VulnerabilityAnalyzer()
    
    # Sample PCAP file
    sample_data_dir = Path(__file__).parent / 'sample_data'
    pcap_file = sample_data_dir / 'vulnerable_traffic.pcap'
    
    if pcap_file.exists():
        print(f"[*] Analyzing: {pcap_file.name}")
        print(f"  File size: {pcap_file.stat().st_size} bytes")
        
        # Create sample traffic data for demonstration
        # In a real implementation, you would parse the PCAP file
        sample_traffic = [
            {
                'src_ip': '192.168.1.100',
                'dst_ip': '192.168.1.1',
                'src_port': 12345,
                'dst_port': 22,
                'protocol': 'TCP',
                'payload': 'SSH-2.0-OpenSSH_6.2',
                'timestamp': '2025-01-01 12:00:00'
            },
            {
                'src_ip': '192.168.1.100', 
                'dst_ip': '192.168.1.1',
                'src_port': 12346,
                'dst_port': 3306,
                'protocol': 'TCP',
                'payload': 'MySQL Server 5.0.54',
                'timestamp': '2025-01-01 12:00:05'
            },
            {
                'src_ip': '192.168.1.100',
                'dst_ip': '192.168.1.1', 
                'src_port': 12347,
                'dst_port': 80,
                'protocol': 'TCP',
                'payload': 'GET / HTTP/1.1\r\nHost: example.com\r\nUser-Agent: Apache/2.2.2',
                'timestamp': '2025-01-01 12:00:10'
            }
        ]
        
        # Analyze traffic for vulnerabilities
        traffic_results = analyzer.analyze_network_traffic(sample_traffic)
        
        print(f"  Packets analyzed: {traffic_results['packets_analyzed']}")
        print(f"  Suspicious indicators: {len(traffic_results['suspicious_indicators'])}")
        print(f"  Attack attempts: {len(traffic_results['attack_attempts'])}")
        
        # Extract services from traffic for vulnerability analysis
        detected_services = extract_services_from_traffic(sample_traffic)
        
        if detected_services:
            print(f"  Services detected from traffic: {len(detected_services)}")
            
            # Analyze detected services
            for service_group in detected_services:
                host_ip = service_group['host_ip']
                services = service_group['services']
                
                print(f"\n  [*] Analyzing services on {host_ip}:")
                results = analyzer.analyze_service_vulnerabilities(host_ip, services)
                
                print(f"    Vulnerabilities found: {len(results['vulnerabilities_found'])}")
                print(f"    Risk score: {results['risk_score']:.1f}/10")
                
                # Show sample vulnerabilities
                for vuln in results['vulnerabilities_found'][:2]:
                    print(f"      - {vuln['cve_id']}: {vuln['severity']} (Score: {vuln['base_score']})")
        
        return len(traffic_results.get('attack_attempts', []))
        
    else:
        print(f"  [!] PCAP file not found: {pcap_file}")
        return 0


def extract_services_from_nmap(xml_file):
    """Extract services from Nmap XML file (simplified parser)"""
    try:
        import xml.etree.ElementTree as ET
        tree = ET.parse(xml_file)
        root = tree.getroot()
        
        hosts = []
        for host in root.findall('host'):
            host_data = {'host_ip': '', 'services': []}
            
            # Get IP address
            address = host.find('address')
            if address is not None:
                host_data['host_ip'] = address.get('addr')
            
            # Get ports and services
            ports = host.find('ports')
            if ports is not None:
                for port in ports.findall('port'):
                    state = port.find('state')
                    if state is not None and state.get('state') == 'open':
                        service = port.find('service')
                        if service is not None:
                            service_data = {
                                'port': int(port.get('portid')),
                                'service': service.get('name', ''),
                                'product': service.get('product', ''),
                                'version': service.get('version', ''),
                                'banner': f"{service.get('product', '')} {service.get('version', '')}".strip()
                            }
                            host_data['services'].append(service_data)
            
            if host_data['services']:
                hosts.append(host_data)
        
        return hosts
    except Exception as e:
        print(f"  [!] Error parsing XML: {e}")
        return []


def extract_services_from_traffic(traffic_data):
    """Extract service information from network traffic"""
    services_by_host = {}
    
    for packet in traffic_data:
        dst_ip = packet['dst_ip']
        dst_port = packet['dst_port']
        payload = packet.get('payload', '')
        
        if dst_ip not in services_by_host:
            services_by_host[dst_ip] = []
        
        # Detect services based on ports and payloads
        service_info = {
            'port': dst_port,
            'service': '',
            'product': '',
            'version': '',
            'banner': payload
        }
        
        if dst_port == 22 and 'SSH' in payload:
            service_info['service'] = 'ssh'
            if 'OpenSSH' in payload:
                service_info['product'] = 'OpenSSH'
                # Extract version if possible
                if 'OpenSSH_' in payload:
                    version = payload.split('OpenSSH_')[1].split()[0]
                    service_info['version'] = version
        elif dst_port == 3306 and 'MySQL' in payload:
            service_info['service'] = 'mysql'
            service_info['product'] = 'MySQL'
            if 'Server' in payload:
                parts = payload.split()
                for i, part in enumerate(parts):
                    if part == 'Server' and i + 1 < len(parts):
                        service_info['version'] = parts[i + 1]
        elif dst_port == 80 and ('Apache' in payload or 'HTTP' in payload):
            service_info['service'] = 'http'
            if 'Apache' in payload:
                service_info['product'] = 'Apache'
                # Extract Apache version
                if 'Apache/' in payload:
                    version = payload.split('Apache/')[1].split()[0]
                    service_info['version'] = version
        
        # Only add if we detected a service
        if service_info['service']:
            services_by_host[dst_ip].append(service_info)
    
    # Convert to expected format
    result = []
    for host_ip, services in services_by_host.items():
        if services:
            result.append({
                'host_ip': host_ip,
                'services': services
            })
    
    return result


def comprehensive_assessment():
    """Perform comprehensive security assessment"""
    print(f"\n[*] COMPREHENSIVE SECURITY ASSESSMENT")
    print("=" * 60)
    
    # Run both analyses
    nmap_vulns = analyze_nmap_data()
    pcap_threats = analyze_pcap_data()
    
    print(f"\n[*] ASSESSMENT SUMMARY")
    print("-" * 40)
    print(f"Total vulnerabilities from Nmap analysis: {nmap_vulns}")
    print(f"Total threats from PCAP analysis: {pcap_threats}")
    print(f"Combined security score: {max(0, 10 - (nmap_vulns * 0.1 + pcap_threats * 0.5)):.1f}/10")
    
    # Generate assessment report
    assessment_report = {
        'timestamp': '2025-10-19T12:00:00Z',
        'analysis_type': 'comprehensive',
        'nmap_analysis': {
            'vulnerabilities_found': nmap_vulns,
            'files_analyzed': 2
        },
        'pcap_analysis': {
            'threats_detected': pcap_threats,
            'packets_analyzed': 3
        },
        'recommendations': [
            'Update vulnerable services identified in Nmap scans',
            'Monitor network traffic for suspicious patterns',
            'Implement proper network segmentation',
            'Regular vulnerability assessments recommended'
        ]
    }
    
    # Save report
    report_path = Path(__file__).parent / 'comprehensive_assessment_report.json'
    with open(report_path, 'w') as f:
        json.dump(assessment_report, f, indent=2)
    
    print(f"[+] Assessment report saved: {report_path}")
    return assessment_report


def main():
    """Run the complete demonstration"""
    print("[*] VULNERABILITY ANALYZER - COMPREHENSIVE DEMO WITH PCAP")
    print("=" * 80)
    print("This demo shows vulnerability analysis using:")
    print("1. Nmap XML files (service vulnerability detection)")
    print("2. PCAP files (network traffic analysis)")
    print("3. Comprehensive security assessment")
    print("=" * 80)
    
    try:
        # Run comprehensive assessment
        report = comprehensive_assessment()
        
        print(f"\n[*] DEMO COMPLETED SUCCESSFULLY!")
        print("=" * 50)
        print("Key Results:")
        print(f"- Nmap vulnerabilities: {report['nmap_analysis']['vulnerabilities_found']}")
        print(f"- PCAP threats: {report['pcap_analysis']['threats_detected']}")
        print(f"- Files analyzed: {report['nmap_analysis']['files_analyzed']} XML + 1 PCAP")
        print("- Report generated with recommendations")
        
    except KeyboardInterrupt:
        print(f"\n[!] Demo interrupted by user")
    except Exception as e:
        print(f"[!] Error during demo: {e}")


if __name__ == "__main__":
    main()