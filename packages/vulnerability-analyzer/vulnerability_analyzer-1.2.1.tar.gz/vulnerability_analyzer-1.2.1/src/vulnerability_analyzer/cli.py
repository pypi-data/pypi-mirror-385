"""Vulnerability Analyzer Command Line Interface."""

import argparse
import json
import sys
from pathlib import Path
from typing import Optional

from . import quick_analyze, search_cves

try:
    from .analysis.pcap import PcapAnalyzer
    _pcap_import_error: Optional[Exception] = None
except ImportError as exc:  # pragma: no cover - optional dependency guard
    PcapAnalyzer = None  # type: ignore[assignment]
    _pcap_import_error = exc

try:
    from .analysis.nmap import NmapAnalyzer
    _nmap_import_error: Optional[Exception] = None
except ImportError as exc:  # pragma: no cover - optional dependency guard
    NmapAnalyzer = None  # type: ignore[assignment]
    _nmap_import_error = exc


def search_cves_command(args):
    """Search CVEs command"""
    print(f"Searching for CVEs matching: {args.query}")

    try:
        results = search_cves(args.query, limit=args.limit)
        
        if not results:
            print("No CVEs found matching your query.")
            return
        
        print(f"\nFound {len(results)} CVEs:")
        print("-" * 80)
        
        for i, cve in enumerate(results, 1):
            print(f"{i}. {cve.get('id', 'N/A')}")
            print(f"   Score: {cve.get('base_score', 'N/A')}")
            print(f"   Severity: {cve.get('severity', 'N/A')}")
            print(f"   Description: {cve.get('description', 'No description')[:100]}...")
            if i < len(results):
                print()
        
    except Exception as e:
        print(f"Error searching CVEs: {e}")
        sys.exit(1)


def analyze_pcap_command(args):
    """Analyze PCAP command"""
    pcap_file = Path(args.pcap_file)
    
    if not pcap_file.exists():
        print(f"Error: PCAP file '{pcap_file}' not found.")
        sys.exit(1)
    
    print(f"Analyzing PCAP file: {pcap_file}")

    if PcapAnalyzer is None:
        message = "PCAP analysis requires optional dependencies."
        if _pcap_import_error:
            message += f" ({_pcap_import_error})"
        print(f"Error: {message}")
        sys.exit(1)

    try:
        analyzer = PcapAnalyzer()
        results = analyzer.analyze(str(pcap_file))

        hosts = results.get('hosts', [])
        total_vulnerabilities = sum(len(host.get('vulnerabilities', [])) for host in hosts)

        print("\nAnalysis Results:")
        print(f"Hosts observed: {len(hosts)}")
        print(f"Detected vulnerabilities: {total_vulnerabilities}")

        if hosts:
            print("\nTop Findings:")
            print("-" * 40)
            displayed = 0
            for host in hosts:
                for vuln in host.get('vulnerabilities', []):
                    displayed += 1
                    title = vuln.get('description') or vuln.get('summary') or 'Unnamed finding'
                    print(f"{displayed}. {vuln.get('cve_id', 'N/A')} - {title}")
                    if displayed >= 10:
                        break
                if displayed >= 10:
                    break

        if args.output:
            output_file = Path(args.output)
            suffix = output_file.suffix.lower()
            if suffix in {'.json', '.csv'}:
                format_map = {'.json': 'json', '.csv': 'csv'}
                analyzer.save_results(results, str(output_file), format=format_map[suffix])
            else:
                output_file.write_text(json.dumps(results, indent=2, default=str))
            print(f"Results saved to: {output_file}")

    except Exception as e:
        print(f"Error analyzing PCAP: {e}")
        sys.exit(1)


def analyze_nmap_command(args):
    """Analyze Nmap XML command"""
    nmap_file = Path(args.nmap_file)
    
    if not nmap_file.exists():
        print(f"Error: Nmap file '{nmap_file}' not found.")
        sys.exit(1)
    
    print(f"Analyzing Nmap XML: {nmap_file}")

    if NmapAnalyzer is None:
        message = "Nmap analysis requires optional dependencies."
        if _nmap_import_error:
            message += f" ({_nmap_import_error})"
        print(f"Error: {message}")
        sys.exit(1)

    try:
        analyzer = NmapAnalyzer(str(nmap_file))
        results = analyzer.analyze()

        hosts = results.get('hosts', [])
        print("\nScan Results:")
        print(f"Hosts discovered: {len(hosts)}")

        for i, host in enumerate(hosts[:5], 1):
            addresses = host.get('addresses', [])
            address = addresses[0]['addr'] if addresses else 'Unknown'
            print(f"\nHost {i}: {address}")
            status = host.get('status', {}).get('state', 'Unknown')
            print(f"  Status: {status}")
            services = host.get('services', [])
            if services:
                print(f"  Services: {', '.join(services)}")

            ports = host.get('ports', [])
            print(f"  Open ports: {len(ports)}")

            for port in ports[:5]:
                service = port.get('service', {})
                print(
                    f"    {port.get('portid')}/{port.get('protocol')} - "
                    f"{service.get('name', 'Unknown')} {service.get('version', '')}"
                )

        if args.output:
            output_file = Path(args.output)
            suffix = output_file.suffix.lower()
            if suffix in {'.json', '.csv'}:
                format_map = {'.json': 'json', '.csv': 'csv'}
                analyzer.save_results(str(output_file), format=format_map[suffix])
            else:
                output_file.write_text(json.dumps(results, indent=2, default=str))
            print(f"Results saved to: {output_file}")

    except Exception as e:
        print(f"Error analyzing Nmap XML: {e}")
        sys.exit(1)


def quick_analyze_command(args):
    """Quick analysis command"""
    pcap_file = Path(args.pcap_file) if args.pcap_file else None
    nmap_file = Path(args.nmap_file) if args.nmap_file else None
    
    # Validate files exist
    if pcap_file and not pcap_file.exists():
        print(f"Error: PCAP file '{pcap_file}' not found.")
        sys.exit(1)
    
    if nmap_file and not nmap_file.exists():
        print(f"Error: Nmap file '{nmap_file}' not found.")
        sys.exit(1)
    
    if not pcap_file and not nmap_file:
        print("Error: At least one of --pcap or --nmap must be provided.")
        sys.exit(1)
    
    print("Performing quick security analysis...")

    report_format = 'json'
    if args.output:
        suffix = Path(args.output).suffix.lower()
        if suffix in {'.json', '.html', '.csv', '.txt'}:
            report_format = suffix.lstrip('.')

    try:
        results = quick_analyze(
            pcap_path=str(pcap_file) if pcap_file else None,
            nmap_file=str(nmap_file) if nmap_file else None,
            output_format=report_format,
        )

        matches = results.get('vulnerability_matches', [])
        high_risk = [m for m in matches if m.get('severity', '').upper() in {'CRITICAL', 'HIGH'}]
        combined_summary = results.get('combined_summary', {})
        overall = combined_summary.get('overall', {})
        source_summaries = combined_summary.get('sources', {})
        host_breakdown = combined_summary.get('host_breakdown', [])

        print("\nQuick Analysis Results:")
        print(f"Total hosts analyzed: {overall.get('total_hosts', len(results.get('service_assessments', [])))}")
        print(f"Service assessments performed: {overall.get('service_assessments', len(results.get('service_assessments', [])))}")
        print(f"Vulnerability matches (database): {overall.get('service_vulnerability_matches', len(matches))}")
        print(f"Raw source findings (Nmap/PCAP): {overall.get('raw_source_vulnerabilities', 0)}")

        severity_breakdown = overall.get('severity_breakdown', {})
        if severity_breakdown:
            print("\nSeverity distribution:")
            for severity, count in sorted(severity_breakdown.items(), key=lambda item: item[0]):
                label = severity.upper()
                print(f"  {label}: {count}")

        if source_summaries:
            print("\nSource breakdown:")
            print("-" * 40)
            for label, summary in source_summaries.items():
                name = label.upper()
                print(f"{name}:")
                print(f"  Hosts parsed: {summary.get('hosts', 0)}")
                print(f"  Vulnerability matches: {summary.get('service_vulnerability_matches', 0)}")
                print(f"  Native findings: {summary.get('raw_vulnerabilities', 0)}")
                if summary.get('summary'):
                    stats = summary['summary']
                    total_vulns = None
                    if isinstance(stats, dict):
                        total_vulns = stats.get('total_vulnerabilities')
                        if total_vulns is None:
                            nested_stats = stats.get('statistics')
                            if isinstance(nested_stats, dict):
                                total_vulns = nested_stats.get('total_vulnerabilities')
                    if total_vulns is not None:
                        print(f"  Reported vulnerabilities: {total_vulns}")

        if host_breakdown:
            print("\nPer-host snapshot:")
            print("-" * 40)
            for host_info in host_breakdown[:5]:
                sources = ", ".join(host_info.get('sources', [])) or 'unknown'
                print(f"Host {host_info.get('host', 'unknown')} ({sources})")
                print(
                    "  Database matches: "
                    f"{host_info.get('service_vulnerability_matches', 0)} | "
                    "Raw findings: "
                    f"{host_info.get('raw_source_vulnerabilities', 0)}"
                )
                print(
                    "  Risk score (avg / max): "
                    f"{host_info.get('average_risk_score', 0):.2f} / "
                    f"{host_info.get('max_risk_score', 0):.2f}"
                )

        if high_risk:
            print("\nHigh-Risk Findings:")
            print("-" * 40)
            for i, finding in enumerate(high_risk[:5], 1):
                title = finding.get('title') or finding.get('service') or 'Unknown Risk'
                description = finding.get('description', 'No description')
                print(f"{i}. {title}")
                print(f"   Severity: {finding.get('severity', 'Unknown')}")
                print(f"   Source: {finding.get('source', 'N/A').upper()}")
                print(f"   Host: {finding.get('host', 'Unknown')}")
                print(f"   Description: {description[:80]}{'...' if len(description) > 80 else ''}")

        if args.output:
            output_file = Path(args.output)
            suffix = output_file.suffix.lower()
            report_content = results.get('report') if isinstance(results.get('report'), str) else None

            if suffix in {'.html', '.csv', '.txt'} and report_content:
                output_file.write_text(report_content)
            else:
                output_file.write_text(json.dumps(results, indent=2, default=str))

            print(f"Results saved to: {output_file}")

    except Exception as e:
        print(f"Error performing analysis: {e}")
        sys.exit(1)


def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(
        description="Vulnerability Analyzer - Command Line Interface",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  vulnerability-analyzer search "buffer overflow" --limit 10
  vulnerability-analyzer pcap analyze traffic.pcap --output report.json
  vulnerability-analyzer nmap analyze scan.xml --output results.json
  vulnerability-analyzer quick --pcap traffic.pcap --nmap scan.xml --output assessment.html
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Search CVEs command
    search_parser = subparsers.add_parser('search', help='Search CVE database')
    search_parser.add_argument('query', help='Search query (CVE ID, keyword, etc.)')
    search_parser.add_argument('--limit', type=int, default=20, help='Maximum results to return')
    search_parser.set_defaults(func=search_cves_command)
    
    # PCAP analysis command
    pcap_parser = subparsers.add_parser('pcap', help='PCAP analysis commands')
    pcap_subparsers = pcap_parser.add_subparsers(dest='pcap_command')
    
    pcap_analyze_parser = pcap_subparsers.add_parser('analyze', help='Analyze PCAP file')
    pcap_analyze_parser.add_argument('pcap_file', help='Path to PCAP file')
    pcap_analyze_parser.add_argument('--output', '-o', help='Output file path')
    pcap_analyze_parser.set_defaults(func=analyze_pcap_command)
    
    # Nmap analysis command
    nmap_parser = subparsers.add_parser('nmap', help='Nmap analysis commands')
    nmap_subparsers = nmap_parser.add_subparsers(dest='nmap_command')
    
    nmap_analyze_parser = nmap_subparsers.add_parser('analyze', help='Analyze Nmap XML file')
    nmap_analyze_parser.add_argument('nmap_file', help='Path to Nmap XML file')
    nmap_analyze_parser.add_argument('--output', '-o', help='Output file path')
    nmap_analyze_parser.set_defaults(func=analyze_nmap_command)
    
    # Quick analysis command
    quick_parser = subparsers.add_parser('quick', help='Quick vulnerability analysis')
    quick_parser.add_argument('--pcap', dest='pcap_file', help='PCAP file to analyze')
    quick_parser.add_argument('--nmap', dest='nmap_file', help='Nmap XML file to analyze')
    quick_parser.add_argument('--output', '-o', help='Output file path')
    quick_parser.set_defaults(func=quick_analyze_command)
    
    # Parse arguments
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Handle subcommands that have their own subparsers
    if args.command == 'pcap' and not args.pcap_command:
        pcap_parser.print_help()
        sys.exit(1)
    
    if args.command == 'nmap' and not args.nmap_command:
        nmap_parser.print_help()
        sys.exit(1)
    
    # Execute command
    try:
        args.func(args)
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
        sys.exit(130)
    except Exception as e:
        print(f"Unexpected error: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()