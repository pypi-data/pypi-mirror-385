#!/usr/bin/env python3
"""
PCAP Analysis using PyShark
Advanced packet analysis with vulnerability detection for feature/pyshark-enhancements

Original PyShark: https://github.com/KimiNewt/pyshark
Issues & Discussion: https://github.com/KimiNewt/pyshark/issues
Enhanced Branch: https://github.com/D14b0l1c/pyshark/tree/feature/pyshark-enhancements

Installation: pip install pyshark
Requirements: Wireshark installation (for underlying tshark)

PyShark is a Python wrapper for tshark, allowing python packet parsing using 
wireshark dissectors. This enhanced version includes additional protocol analysis
and vulnerability detection capabilities.
"""

import os
import sys
from pathlib import Path

# Add the src directory to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

import vulnerability_analyzer


def analyze_pcap_with_pyshark(pcap_file):
    """Analyze PCAP using PyShark library"""
    try:
        import pyshark
        print(f"[*] Loading PCAP with PyShark: {pcap_file}")
        
        # Read PCAP file with PyShark
        capture = pyshark.FileCapture(pcap_file)
        
        services = []
        conversations = {}  # Track unique conversations
        packet_count = 0
        
        for packet in capture:
            packet_count += 1
            
            # Only process TCP packets
            if hasattr(packet, 'tcp'):
                tcp = packet.tcp
                
                # Extract network info
                if hasattr(packet, 'ip'):
                    src_ip = packet.ip.src
                    dst_ip = packet.ip.dst
                else:
                    continue
                
                src_port = int(tcp.srcport)
                dst_port = int(tcp.dstport)
                
                # Create conversation key
                conv_key = f"{dst_ip}:{dst_port}"
                
                # Check for payload in various layers
                payload = ""
                
                # Try to get payload from different layers
                if hasattr(packet, 'data'):
                    try:
                        # PyShark stores data as hex string
                        payload_hex = packet.data.data
                        payload_bytes = bytes.fromhex(payload_hex.replace(':', ''))
                        payload = payload_bytes.decode('utf-8', errors='ignore')
                    except:
                        pass
                
                # Alternative: try HTTP layer
                elif hasattr(packet, 'http'):
                    http = packet.http
                    if hasattr(http, 'request_full_uri'):
                        payload = f"GET {http.request_full_uri}"
                    elif hasattr(http, 'response_line'):
                        payload = http.response_line
                    elif hasattr(http, 'user_agent'):
                        payload = f"User-Agent: {http.user_agent}"
                
                # Alternative: try SSH layer
                elif hasattr(packet, 'ssh'):
                    ssh = packet.ssh
                    if hasattr(ssh, 'protocol'):
                        payload = f"SSH-{ssh.protocol}"
                
                # Alternative: try FTP layer  
                elif hasattr(packet, 'ftp'):
                    ftp = packet.ftp
                    if hasattr(ftp, 'response'):
                        payload = ftp.response
                    elif hasattr(ftp, 'request'):
                        payload = ftp.request
                
                # Only process if we haven't seen this conversation yet and have payload
                if conv_key not in conversations and payload.strip():
                    service_info = detect_service_from_payload(dst_port, payload)
                    if service_info:
                        service_info.update({
                            'src_ip': src_ip,
                            'dst_ip': dst_ip,
                            'src_port': src_port,
                            'dst_port': dst_port,
                            'packet_number': packet_count,
                            'payload_preview': payload[:200],
                            'detected_by': 'pyshark'
                        })
                        services.append(service_info)
                        conversations[conv_key] = True
                        print(f"    Detected {service_info['service']} on {dst_ip}:{dst_port}")
                        
                # Check for SYN packets to common ports even without payload
                elif hasattr(tcp, 'flags_syn') and tcp.flags_syn == '1' and hasattr(tcp, 'flags_ack') and tcp.flags_ack == '0':
                    if conv_key not in conversations:
                        service_info = detect_service_from_port(dst_port)
                        if service_info:
                            service_info.update({
                                'src_ip': src_ip,
                                'dst_ip': dst_ip,
                                'src_port': src_port,
                                'dst_port': dst_port,
                                'packet_number': packet_count,
                                'payload_preview': f"SYN to port {dst_port}",
                                'detected_by': 'pyshark'
                            })
                            services.append(service_info)
                            conversations[conv_key] = True
                            print(f"    Detected {service_info['service']} service attempt on {dst_ip}:{dst_port}")
        
        print(f"  Total packets processed: {packet_count}")
        capture.close()
        
        return services
        
    except ImportError:
        print("  [!] PyShark not installed. Install with: pip install pyshark")
        print("  [!] Also requires Wireshark installation for underlying tshark")
        return []
    except Exception as e:
        print(f"  [!] Error with PyShark: {e}")
        return []


def detect_service_from_payload(port, payload):
    """Enhanced service detection from payload"""
    payload_lower = payload.lower()
    
    service_info = {
        'port': port,
        'service': '',
        'product': '',
        'version': '',
        'banner': payload.strip()
    }
    
    # SSH Detection
    if 'ssh-' in payload_lower:
        service_info['service'] = 'ssh'
        if 'openssh' in payload_lower:
            service_info['product'] = 'OpenSSH'
            # Extract version: SSH-2.0-OpenSSH_6.2
            try:
                if 'openssh_' in payload_lower:
                    version_part = payload.split('OpenSSH_')[1]
                    version = version_part.split()[0].split('\r')[0].split('\n')[0]
                    service_info['version'] = version
            except:
                pass
    
    # HTTP Detection
    elif any(x in payload_lower for x in ['http/', 'get /', 'post /', 'server:']):
        service_info['service'] = 'http'
        
        # Apache detection
        if 'apache' in payload_lower:
            service_info['product'] = 'Apache httpd'
            try:
                if 'apache/' in payload_lower:
                    version = payload_lower.split('apache/')[1].split()[0]
                    service_info['version'] = version
            except:
                pass
        
        # Nginx detection  
        elif 'nginx' in payload_lower:
            service_info['product'] = 'nginx'
            try:
                if 'nginx/' in payload_lower:
                    version = payload_lower.split('nginx/')[1].split()[0]
                    service_info['version'] = version
            except:
                pass
        
        # IIS detection
        elif 'microsoft-iis' in payload_lower:
            service_info['product'] = 'Microsoft IIS'
            try:
                if 'microsoft-iis/' in payload_lower:
                    version = payload_lower.split('microsoft-iis/')[1].split()[0]
                    service_info['version'] = version
            except:
                pass
    
    # FTP Detection
    elif payload_lower.startswith('220') and ('ftp' in payload_lower or port == 21):
        service_info['service'] = 'ftp'
        if 'vsftpd' in payload_lower:
            service_info['product'] = 'vsftpd'
            try:
                # Extract version from banner like "220 (vsFTPd 3.0.3)"
                if '(vsftpd' in payload_lower:
                    version = payload_lower.split('(vsftpd')[1].split(')')[0].strip()
                    service_info['version'] = version
            except:
                pass
        elif 'proftpd' in payload_lower:
            service_info['product'] = 'ProFTPD'
    
    # SMTP Detection
    elif payload_lower.startswith('220') and ('smtp' in payload_lower or port == 25):
        service_info['service'] = 'smtp'
        if 'postfix' in payload_lower:
            service_info['product'] = 'Postfix'
        elif 'sendmail' in payload_lower:
            service_info['product'] = 'Sendmail'
        elif 'exim' in payload_lower:
            service_info['product'] = 'Exim'
    
    # MySQL Detection
    elif 'mysql' in payload_lower or port == 3306:
        service_info['service'] = 'mysql'
        service_info['product'] = 'MySQL'
        try:
            # MySQL version detection is complex, often in binary protocol
            if 'server' in payload_lower:
                # Simple text-based version extraction
                parts = payload.split()
                for part in parts:
                    if any(char.isdigit() for char in part) and '.' in part:
                        service_info['version'] = part
                        break
        except:
            pass
    
    # DNS Detection
    elif port == 53:
        service_info['service'] = 'domain'
        service_info['product'] = 'DNS Server'
    
    # Return only if we detected a service
    return service_info if service_info['service'] else None


def detect_service_from_port(port):
    """Detect likely service from port number only"""
    port_services = {
        21: {'service': 'ftp', 'product': 'FTP Server'},
        22: {'service': 'ssh', 'product': 'SSH Server'},
        23: {'service': 'telnet', 'product': 'Telnet Server'},
        25: {'service': 'smtp', 'product': 'SMTP Server'},
        53: {'service': 'domain', 'product': 'DNS Server'},
        80: {'service': 'http', 'product': 'HTTP Server'},
        110: {'service': 'pop3', 'product': 'POP3 Server'},
        143: {'service': 'imap', 'product': 'IMAP Server'},
        443: {'service': 'https', 'product': 'HTTPS Server'},
        993: {'service': 'imaps', 'product': 'IMAPS Server'},
        995: {'service': 'pop3s', 'product': 'POP3S Server'},
        3306: {'service': 'mysql', 'product': 'MySQL Server'},
        5432: {'service': 'postgresql', 'product': 'PostgreSQL Server'},
    }
    
    if port in port_services:
        service_info = {
            'port': port,
            'service': port_services[port]['service'],
            'product': port_services[port]['product'],
            'version': '',
            'banner': f'Port {port} service detection'
        }
        return service_info
    
    return None


def analyze_services_for_vulnerabilities(services):
    """Analyze detected services for vulnerabilities"""
    if not services:
        print("  [!] No services detected from PCAP")
        return 0
    
    print(f"\n[*] VULNERABILITY ANALYSIS")
    print("=" * 50)
    
    # Initialize vulnerability analyzer
    analyzer = vulnerability_analyzer.VulnerabilityAnalyzer()
    
    # Group services by destination IP
    services_by_host = {}
    for service in services:
        dst_ip = service['dst_ip']
        if dst_ip not in services_by_host:
            services_by_host[dst_ip] = []
        
        # Convert to format expected by analyzer
        service_data = {
            'port': service['port'],
            'service': service['service'],
            'product': service['product'],
            'version': service['version'],
            'banner': service['banner']
        }
        services_by_host[dst_ip].append(service_data)
    
    total_vulnerabilities = 0
    
    for host_ip, host_services in services_by_host.items():
        print(f"\n[*] Analyzing host: {host_ip}")
        print(f"  Services detected: {len(host_services)}")
        
        # Show detected services
        for service in host_services:
            product_version = f"{service['product']} {service['version']}".strip()
            print(f"    - {service['service']}:{service['port']} - {product_version}")
        
        # Analyze vulnerabilities
        results = analyzer.analyze_service_vulnerabilities(host_ip, host_services)
        
        vuln_count = len(results['vulnerabilities_found'])
        total_vulnerabilities += vuln_count
        
        print(f"  Vulnerabilities found: {vuln_count}")
        print(f"  Risk score: {results['risk_score']:.1f}/10")
        
        # Show sample vulnerabilities
        for vuln in results['vulnerabilities_found'][:3]:
            print(f"    - {vuln['cve_id']}: {vuln['severity']} (Score: {vuln['base_score']})")
            print(f"      {vuln['title'][:80]}...")
    
    return total_vulnerabilities


def advanced_pyshark_analysis(pcap_file):
    """Advanced PyShark analysis with enhanced protocol detection"""
    try:
        import pyshark
        print(f"[*] Advanced PyShark analysis: {pcap_file}")
        
        # Use display filter for better performance
        capture = pyshark.FileCapture(
            pcap_file,
            display_filter='tcp or udp',  # Focus on TCP/UDP traffic
            include_raw=True,             # Include raw packet data
            use_json=True                 # Use JSON for better parsing
        )
        
        advanced_services = []
        protocol_stats = {}
        
        for packet in capture:
            # Track protocol statistics
            highest_layer = packet.highest_layer
            protocol_stats[highest_layer] = protocol_stats.get(highest_layer, 0) + 1
            
            # Enhanced HTTP analysis
            if hasattr(packet, 'http'):
                http_info = analyze_http_packet(packet)
                if http_info:
                    advanced_services.append(http_info)
            
            # Enhanced TLS/SSL analysis
            elif hasattr(packet, 'tls') or hasattr(packet, 'ssl'):
                tls_info = analyze_tls_packet(packet)
                if tls_info:
                    advanced_services.append(tls_info)
            
            # Enhanced DNS analysis
            elif hasattr(packet, 'dns'):
                dns_info = analyze_dns_packet(packet)
                if dns_info:
                    advanced_services.append(dns_info)
        
        print(f"  Protocol distribution:")
        for protocol, count in sorted(protocol_stats.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"    {protocol}: {count} packets")
        
        capture.close()
        return advanced_services
        
    except Exception as e:
        print(f"  [!] Advanced PyShark analysis error: {e}")
        return []


def analyze_http_packet(packet):
    """Analyze HTTP packet for service information"""
    try:
        http = packet.http
        service_info = {
            'port': int(packet.tcp.dstport),
            'service': 'http',
            'product': '',
            'version': '',
            'banner': '',
            'src_ip': packet.ip.src,
            'dst_ip': packet.ip.dst,
            'detected_by': 'pyshark-http'
        }
        
        # Extract server information
        if hasattr(http, 'server'):
            server = http.server
            service_info['banner'] = f"Server: {server}"
            
            # Parse server string for product/version
            if 'apache' in server.lower():
                service_info['product'] = 'Apache httpd'
                try:
                    if 'apache/' in server.lower():
                        version = server.lower().split('apache/')[1].split()[0]
                        service_info['version'] = version
                except:
                    pass
            elif 'nginx' in server.lower():
                service_info['product'] = 'nginx'
                try:
                    if 'nginx/' in server.lower():
                        version = server.lower().split('nginx/')[1].split()[0]
                        service_info['version'] = version
                except:
                    pass
        
        return service_info if service_info['product'] else None
        
    except:
        return None


def analyze_tls_packet(packet):
    """Analyze TLS/SSL packet for service information"""
    try:
        if hasattr(packet, 'tls'):
            tls = packet.tls
        else:
            tls = packet.ssl
            
        service_info = {
            'port': int(packet.tcp.dstport),
            'service': 'https' if int(packet.tcp.dstport) == 443 else 'ssl',
            'product': 'TLS/SSL Server',
            'version': '',
            'banner': '',
            'src_ip': packet.ip.src,
            'dst_ip': packet.ip.dst,
            'detected_by': 'pyshark-tls'
        }
        
        # Extract TLS version
        if hasattr(tls, 'record_version'):
            version = tls.record_version
            service_info['version'] = f"TLS {version}"
            service_info['banner'] = f"TLS Version: {version}"
        
        return service_info
        
    except:
        return None


def analyze_dns_packet(packet):
    """Analyze DNS packet for service information"""
    try:
        dns = packet.dns
        service_info = {
            'port': int(packet.udp.dstport) if hasattr(packet, 'udp') else 53,
            'service': 'domain',
            'product': 'DNS Server',
            'version': '',
            'banner': '',
            'src_ip': packet.ip.src,
            'dst_ip': packet.ip.dst,
            'detected_by': 'pyshark-dns'
        }
        
        # Extract DNS query information
        if hasattr(dns, 'qry_name'):
            query = dns.qry_name
            service_info['banner'] = f"DNS Query: {query}"
        
        return service_info
        
    except:
        return None


def main():
    """Main function for PyShark PCAP analysis"""
    print("[*] PYSHARK PCAP ANALYSIS WITH VULNERABILITY DETECTION")
    print("[*] Feature Branch: pyshark-enhancements")
    print("=" * 70)
    
    # Path to PCAP file
    pcap_file = Path(__file__).parent / 'sample_data' / 'vulnerable_traffic.pcap'
    
    if not pcap_file.exists():
        print(f"[!] PCAP file not found: {pcap_file}")
        print("  Place a PCAP file at examples/sample_data/vulnerable_traffic.pcap")
        return
    
    print(f"[*] Target PCAP: {pcap_file}")
    print(f"  File size: {pcap_file.stat().st_size} bytes")
    
    # Basic PyShark analysis
    services = analyze_pcap_with_pyshark(str(pcap_file))
    
    print(f"\n[*] BASIC SERVICES DETECTED:")
    print("-" * 40)
    for service in services:
        product_version = f"{service['product']} {service['version']}".strip()
        print(f"  {service['dst_ip']}:{service['dst_port']} - {service['service']} - {product_version}")
        print(f"    Packet #{service['packet_number']}: {service['payload_preview'][:60]}...")
    
    # Advanced PyShark analysis
    advanced_services = advanced_pyshark_analysis(str(pcap_file))
    
    if advanced_services:
        print(f"\n[*] ADVANCED SERVICES DETECTED:")
        print("-" * 40)
        for service in advanced_services:
            product_version = f"{service['product']} {service['version']}".strip()
            print(f"  {service['dst_ip']}:{service['port']} - {service['service']} - {product_version}")
            if service['banner']:
                print(f"    {service['banner']}")
    
    # Combine services for vulnerability analysis
    all_services = services + advanced_services
    
    # Analyze for vulnerabilities
    total_vulns = analyze_services_for_vulnerabilities(all_services)
    
    print(f"\n[*] PYSHARK ANALYSIS COMPLETE")
    print("=" * 40)
    print(f"Basic services detected: {len(services)}")
    print(f"Advanced services detected: {len(advanced_services)}")
    print(f"Total vulnerabilities: {total_vulns}")
    print("Method: PyShark packet parsing")
    print("Branch: feature/pyshark-enhancements")


if __name__ == "__main__":
    main()