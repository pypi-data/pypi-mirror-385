#!/usr/bin/env python3
"""
Comprehensive PCAP Analysis Comparison
All Major Python Packet Analysis Libraries with GitHub References

LIBRARY REFERENCES:
==================
Scapy: https://github.com/secdev/scapy
   - Most flexible, pure Python packet manipulation
   - Documentation: https://scapy.readthedocs.io/

PyShark (Original): https://github.com/KimiNewt/pyshark  
   - Issues: https://github.com/KimiNewt/pyshark/issues
   - Python wrapper for Wireshark's tshark

PyShark (Enhanced): https://github.com/D14b0l1c/pyshark/tree/feature/pyshark-enhancements
   - Custom enhancements and vulnerability detection features
   - Advanced protocol analysis capabilities

DPKT: https://github.com/kbandla/dpkt
   - Fast, simple packet creation/parsing
   - Documentation: https://dpkt.readthedocs.io/

Wireshark/Tshark: https://github.com/wireshark/wireshark
   - Industry standard network protocol analyzer
   - Tshark docs: https://www.wireshark.org/docs/man-pages/tshark.html

INSTALLATION:
============
pip install scapy pyshark dpkt
# Also install Wireshark for tshark/pyshark functionality
"""

import os
import sys
import time
from pathlib import Path

# Add the src directory to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

import vulnerability_analyzer


def test_library_availability():
    """Test which packet analysis libraries are available"""
    print("[*] TESTING LIBRARY AVAILABILITY")
    print("=" * 50)
    
    libraries = {
        'scapy': {
            'github': 'https://github.com/secdev/scapy',
            'install': 'pip install scapy',
            'available': False
        },
        'pyshark': {
            'github': 'https://github.com/KimiNewt/pyshark',
            'enhanced': 'https://github.com/D14b0l1c/pyshark/tree/feature/pyshark-enhancements',
            'install': 'pip install pyshark',
            'available': False
        },
        'dpkt': {
            'github': 'https://github.com/kbandla/dpkt',
            'install': 'pip install dpkt',
            'available': False
        },
        'tshark': {
            'github': 'https://github.com/wireshark/wireshark',
            'install': 'Install Wireshark',
            'available': False
        }
    }
    
    # Test Scapy
    try:
        import scapy.all
        libraries['scapy']['available'] = True
        print("Available Scapy: Available")
    except ImportError:
        print("Missing Scapy: Not installed")
    
    # Test PyShark
    try:
        import pyshark
        libraries['pyshark']['available'] = True
        print("Available PyShark: Available")
    except ImportError:
        print("Missing PyShark: Not installed")
    
    # Test DPKT
    try:
        import dpkt
        libraries['dpkt']['available'] = True
        print("Available DPKT: Available")
    except ImportError:
        print("Missing DPKT: Not installed")
    
    # Test Tshark
    import shutil
    if shutil.which('tshark'):
        libraries['tshark']['available'] = True
        print("Available Tshark: Available")
    else:
        print("Missing Tshark: Not installed")
    
    print(f"\n[*] GITHUB REPOSITORIES:")
    print("-" * 30)
    for lib, info in libraries.items():
        print(f"{lib.upper()}:")
        print(f"  Main: {info['github']}")
        if 'enhanced' in info:
            print(f"  Enhanced: {info['enhanced']}")
        print(f"  Install: {info['install']}")
        print(f"  Status: {'Available' if info['available'] else 'Missing'}")
        print()
    
    return libraries


def run_scapy_analysis(pcap_file):
    """Run Scapy analysis if available"""
    try:
        import scapy.all as scapy
        print("[*] RUNNING SCAPY ANALYSIS")
        print("GitHub: https://github.com/secdev/scapy")
        print("-" * 40)
        
        start_time = time.time()
        packets = scapy.rdpcap(pcap_file)
        services = []
        
        for i, packet in enumerate(packets[:100]):  # Limit for demo
            if packet.haslayer(scapy.TCP) and packet.haslayer(scapy.IP):
                tcp = packet[scapy.TCP]
                ip = packet[scapy.IP]
                
                if packet.haslayer(scapy.Raw):
                    try:
                        payload = packet[scapy.Raw].load.decode('utf-8', errors='ignore')
                        if 'ssh' in payload.lower() or 'http' in payload.lower():
                            services.append({
                                'method': 'scapy',
                                'dst_ip': ip.dst,
                                'dst_port': tcp.dport,
                                'payload_preview': payload[:50]
                            })
                    except:
                        pass
        
        analysis_time = time.time() - start_time
        print(f"  Services detected: {len(services)}")
        print(f"  Analysis time: {analysis_time:.2f}s")
        print(f"  GitHub: https://github.com/secdev/scapy")
        return services
        
    except ImportError:
        print("[!] Scapy not available - install with: pip install scapy")
        return []


def run_pyshark_analysis(pcap_file):
    """Run PyShark analysis if available"""
    try:
        import pyshark
        print("\n[*] RUNNING PYSHARK ANALYSIS")
        print("Original: https://github.com/KimiNewt/pyshark")
        print("Enhanced: https://github.com/D14b0l1c/pyshark/tree/feature/pyshark-enhancements")
        print("-" * 40)
        
        start_time = time.time()
        capture = pyshark.FileCapture(pcap_file)
        services = []
        
        packet_count = 0
        for packet in capture:
            packet_count += 1
            if packet_count > 100:  # Limit for demo
                break
                
            if hasattr(packet, 'tcp') and hasattr(packet, 'ip'):
                tcp = packet.tcp
                ip = packet.ip
                
                if hasattr(packet, 'http'):
                    services.append({
                        'method': 'pyshark',
                        'dst_ip': ip.dst,
                        'dst_port': tcp.dstport,
                        'protocol': 'HTTP'
                    })
                elif hasattr(packet, 'ssh'):
                    services.append({
                        'method': 'pyshark',
                        'dst_ip': ip.dst, 
                        'dst_port': tcp.dstport,
                        'protocol': 'SSH'
                    })
        
        capture.close()
        analysis_time = time.time() - start_time
        print(f"  Services detected: {len(services)}")
        print(f"  Analysis time: {analysis_time:.2f}s")
        print(f"  Feature branch supports enhanced protocol analysis")
        return services
        
    except ImportError:
        print("[!] PyShark not available - install with: pip install pyshark")
        return []


def run_dpkt_analysis(pcap_file):
    """Run DPKT analysis if available"""
    try:
        import dpkt
        import socket
        print("\n[*] RUNNING DPKT ANALYSIS")
        print("GitHub: https://github.com/kbandla/dpkt")
        print("-" * 40)
        
        start_time = time.time()
        services = []
        
        with open(pcap_file, 'rb') as f:
            pcap = dpkt.pcap.Reader(f)
            packet_count = 0
            
            for timestamp, buf in pcap:
                packet_count += 1
                if packet_count > 100:  # Limit for demo
                    break
                    
                try:
                    eth = dpkt.ethernet.Ethernet(buf)
                    if isinstance(eth.data, dpkt.ip.IP):
                        ip = eth.data
                        if isinstance(ip.data, dpkt.tcp.TCP):
                            tcp = ip.data
                            
                            if tcp.data:
                                try:
                                    payload = tcp.data.decode('utf-8', errors='ignore')
                                    if 'ssh' in payload.lower() or 'http' in payload.lower():
                                        services.append({
                                            'method': 'dpkt',
                                            'dst_ip': socket.inet_ntoa(ip.dst),
                                            'dst_port': tcp.dport,
                                            'payload_preview': payload[:50]
                                        })
                                except:
                                    pass
                except:
                    continue
        
        analysis_time = time.time() - start_time
        print(f"  Services detected: {len(services)}")
        print(f"  Analysis time: {analysis_time:.2f}s")
        print(f"  GitHub: https://github.com/kbandla/dpkt")
        return services
        
    except ImportError:
        print("[!] DPKT not available - install with: pip install dpkt")
        return []


def run_tshark_analysis(pcap_file):
    """Run Tshark analysis if available"""
    try:
        import subprocess
        import shutil
        
        if not shutil.which('tshark'):
            print("[!] Tshark not available - install Wireshark")
            return []
            
        print("\n[*] RUNNING TSHARK ANALYSIS")
        print("GitHub: https://github.com/wireshark/wireshark")
        print("-" * 40)
        
        start_time = time.time()
        
        # Get basic stats
        cmd = ['tshark', '-r', pcap_file, '-q', '-z', 'conv,tcp', '-z', 'conv,udp']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        # Count TCP connections
        tcp_connections = 0
        udp_connections = 0
        for line in result.stdout.split('\n'):
            if '<->' in line and 'TCP' in result.stdout:
                tcp_connections += 1
            elif '<->' in line and 'UDP' in result.stdout:
                udp_connections += 1
        
        analysis_time = time.time() - start_time
        print(f"  TCP connections: {tcp_connections}")
        print(f"  UDP connections: {udp_connections}")
        print(f"  Analysis time: {analysis_time:.2f}s")
        print(f"  GitHub: https://github.com/wireshark/wireshark")
        
        return [{'method': 'tshark', 'tcp_conns': tcp_connections, 'udp_conns': udp_connections}]
        
    except Exception as e:
        print(f"[!] Tshark analysis failed: {e}")
        return []


def compare_all_methods(pcap_file):
    """Compare all available packet analysis methods"""
    print("\n[*] COMPREHENSIVE COMPARISON")
    print("=" * 70)
    
    results = {
        'scapy': run_scapy_analysis(pcap_file),
        'pyshark': run_pyshark_analysis(pcap_file), 
        'dpkt': run_dpkt_analysis(pcap_file),
        'tshark': run_tshark_analysis(pcap_file)
    }
    
    print(f"\n[*] COMPARISON SUMMARY")
    print("=" * 50)
    
    for method, services in results.items():
        if services:
            print(f"{method.upper()}: {len(services)} detections")
        else:
            print(f"{method.upper()}: Not available or no detections")
    
    return results


def vulnerability_analysis_demo(pcap_file):
    """Demonstrate vulnerability analysis integration"""
    print(f"\n[*] VULNERABILITY ANALYSIS INTEGRATION")
    print("=" * 50)
    
    # Mock service data for demo
    demo_services = [
        {
            'port': 22,
            'service': 'ssh',
            'product': 'OpenSSH',
            'version': '6.2',
            'banner': 'SSH-2.0-OpenSSH_6.2'
        },
        {
            'port': 80,
            'service': 'http',
            'product': 'Apache httpd',
            'version': '2.2.22',
            'banner': 'Server: Apache/2.2.22'
        }
    ]
    
    analyzer = vulnerability_analyzer.VulnerabilityAnalyzer()
    results = analyzer.analyze_service_vulnerabilities('192.168.1.100', demo_services)
    
    print(f"  Services analyzed: {len(demo_services)}")
    print(f"  Vulnerabilities found: {len(results['vulnerabilities_found'])}")
    print(f"  Risk score: {results['risk_score']:.1f}/10")
    
    # Show sample vulnerabilities
    for vuln in results['vulnerabilities_found'][:3]:
        print(f"    - {vuln['cve_id']}: {vuln['severity']} (Score: {vuln['base_score']})")


def main():
    """Main comparison function"""
    print("[*] COMPREHENSIVE PCAP ANALYSIS LIBRARY COMPARISON")
    print("[*] WITH GITHUB REFERENCES AND VULNERABILITY DETECTION")
    print("=" * 80)
    
    # Test library availability
    libraries = test_library_availability()
    
    # Path to PCAP file
    pcap_file = Path(__file__).parent / 'sample_data' / 'vulnerable_traffic.pcap'
    
    if not pcap_file.exists():
        print(f"\n[!] PCAP file not found: {pcap_file}")
        print("  Create sample data or place a PCAP file there for testing")
        
        # Still show vulnerability analysis demo
        vulnerability_analysis_demo(str(pcap_file))
        return
    
    print(f"\n[*] Target PCAP: {pcap_file}")
    print(f"  File size: {pcap_file.stat().st_size} bytes")
    
    # Run comprehensive comparison
    results = compare_all_methods(str(pcap_file))
    
    # Demonstrate vulnerability analysis
    vulnerability_analysis_demo(str(pcap_file))
    
    print(f"\n[*] GITHUB REPOSITORIES SUMMARY")
    print("=" * 50)
    print("Scapy: https://github.com/secdev/scapy")
    print("PyShark (Original): https://github.com/KimiNewt/pyshark")
    print("PyShark (Enhanced): https://github.com/D14b0l1c/pyshark/tree/feature/pyshark-enhancements")
    print("DPKT: https://github.com/kbandla/dpkt") 
    print("Wireshark: https://github.com/wireshark/wireshark")
    print("Vulnerability Analyzer: https://github.com/D14b0l1c/vulnerability-analyzer")
    
    print(f"\n[*] ALL ANALYSIS METHODS TESTED!")
    print("  Choose the library that best fits your use case:")
    print("  - Scapy: Maximum flexibility and control")
    print("  - PyShark: Easy Wireshark integration") 
    print("  - DPKT: Speed and simplicity")
    print("  - Tshark: Command-line power")


if __name__ == "__main__":
    main()