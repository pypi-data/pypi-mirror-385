#!/usr/bin/env python3
"""
Comprehensive Vulnerability Analyzer Demo

This script demonstrates the full capabilities of the Vulnerability Analyzer
using real sample data including Nmap scans and PCAP files.

Sample Files Used:
- nmap_example.xml: Nmap scan results
- sample-nmap-output.xml: Additional Nmap scan 
- vulnerable_traffic.pcap: Network packet capture with vulnerabilities

Expected Outputs:
- Service enumeration and vulnerability matching
- Network traffic analysis and threat detection
- Comprehensive security assessment reports
"""

import os
import sys
import json
from pathlib import Path

# Add the src directory to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

import vulnerability_analyzer


def print_banner():
 """Print the demo banner"""
 print("=" * 80)
 print("[*] VULNERABILITY ANALYZER - COMPREHENSIVE DEMO")
 print("=" * 80)
 print("Testing against real sample data:")
 print("✓ Nmap scan results")
 print("✓ Network packet captures") 
 print("✓ Vulnerability database matching")
 print("✓ Security assessment reports")
 print("=" * 80)


def test_analyzer_initialization():
 """Test analyzer initialization and database loading"""
 print("\n[*] INITIALIZING VULNERABILITY ANALYZER")
 print("-" * 50)
 
 analyzer = vulnerability_analyzer.VulnerabilityAnalyzer()
 
 # Get database information
 db_info = analyzer.get_database_info()
 stats = db_info['statistics']
 
 print(f"Database Type: {db_info['database_type']}")
 print(f"Total Vulnerabilities: {stats['total_vulnerabilities']:,}")
 print(f"Sources: {stats['sources']}")
 print(f"Categories: {len(stats.get('categories', []))}")
 
 return analyzer


def test_nmap_analysis(analyzer):
 """Test Nmap file analysis"""
 print("\n NMAP SCAN ANALYSIS")
 print("-" * 50)
 
 sample_data_dir = Path(__file__).parent / 'sample_data'
 nmap_files = ['nmap_example.xml', 'sample-nmap-output.xml']
 
 for nmap_file in nmap_files:
 nmap_path = sample_data_dir / nmap_file
 if nmap_path.exists():
 print(f"\n[*] Analyzing: {nmap_file}")
 
 try:
 # Create NmapAnalyzer instance
 nmap_analyzer = vulnerability_analyzer.NmapAnalyzer()
 
 # Parse the Nmap file
 scan_results = nmap_analyzer.parse_nmap_file(str(nmap_path))
 
 print(f" ✓ Hosts discovered: {len(scan_results.get('hosts', []))}")
 
 # Analyze each host for vulnerabilities
 for host_info in scan_results.get('hosts', []):
 ip = host_info.get('ip', 'unknown')
 services = host_info.get('services', [])
 
 if services:
 print(f" Host: {ip}")
 print(f" Services found: {len(services)}")
 
 # Analyze host vulnerabilities
 vuln_results = analyzer.analyze_service_vulnerabilities(ip, services)
 
 if vuln_results.get('vulnerabilities_found', 0) > 0:
 print(f" Vulnerabilities: {vuln_results['vulnerabilities_found']}")
 print(f" [!] Risk Score: {vuln_results.get('risk_score', 0):.1f}")
 
 # Show top vulnerabilities
 for vuln in vuln_results.get('vulnerabilities', [])[:3]:
 cve = vuln.get('cve_id', 'No CVE')
 severity = vuln.get('severity', 'Unknown')
 service = vuln.get('service', 'Unknown')
 print(f" - {cve} ({severity}) in {service}")
 else:
 print(f" [+] No vulnerabilities detected")
 
 except Exception as e:
 print(f" ❌ Error analyzing {nmap_file}: {e}")
 else:
 print(f" [!] File not found: {nmap_file}")


def test_pcap_analysis(analyzer):
 """Test PCAP file analysis"""
 print("\n[*] NETWORK TRAFFIC ANALYSIS")
 print("-" * 50)
 
 sample_data_dir = Path(__file__).parent / 'sample_data'
 pcap_file = sample_data_dir / 'vulnerable_traffic.pcap'
 
 if pcap_file.exists():
 print(f"[*] Analyzing: {pcap_file.name}")
 
 try:
 # Create PcapAnalyzer instance
 pcap_analyzer = vulnerability_analyzer.PcapAnalyzer()
 
 # Analyze the PCAP file
 traffic_results = pcap_analyzer.analyze_pcap(str(pcap_file))
 
 print(f" ✓ Packets analyzed: {traffic_results.get('total_packets', 0)}")
 print(f" ✓ Unique flows: {traffic_results.get('unique_flows', 0)}")
 print(f" ✓ Protocols detected: {len(traffic_results.get('protocols', []))}")
 
 # Extract traffic patterns for vulnerability analysis 
 traffic_patterns = traffic_results.get('traffic_patterns', [])
 
 if traffic_patterns:
 # Analyze traffic for vulnerabilities
 vuln_results = analyzer.analyze_network_traffic(traffic_patterns)
 
 print(f" Suspicious patterns: {vuln_results.get('suspicious_patterns', 0)}")
 print(f" [!] Threat Score: {vuln_results.get('threat_score', 0):.1f}")
 
 # Show detected threats
 threats = vuln_results.get('detected_threats', [])
 if threats:
 print(" [*] Detected Threats:")
 for threat in threats[:5]:
 threat_type = threat.get('type', 'Unknown')
 severity = threat.get('severity', 'Unknown')
 description = threat.get('description', 'No description')
 print(f" - {threat_type} ({severity}): {description[:60]}...")
 
 except Exception as e:
 print(f" ❌ Error analyzing PCAP: {e}")
 else:
 print(f" [!] PCAP file not found: {pcap_file}")


def test_comprehensive_assessment(analyzer):
 """Test comprehensive security assessment"""
 print("\n[*] COMPREHENSIVE SECURITY ASSESSMENT")
 print("-" * 50)
 
 # Simulate a complete network assessment
 sample_hosts = [
 {
 'ip': '192.168.1.10',
 'services': [
 {'port': 22, 'service': 'ssh', 'version': 'OpenSSH 6.2', 'banner': 'SSH-2.0-OpenSSH_6.2'},
 {'port': 80, 'service': 'http', 'version': 'Apache 2.4.16', 'banner': 'Apache/2.4.16'},
 {'port': 3306, 'service': 'mysql', 'version': 'MySQL 5.0.54', 'banner': 'MySQL 5.0.54'}
 ]
 },
 {
 'ip': '192.168.1.20', 
 'services': [
 {'port': 80, 'service': 'http', 'version': 'nginx 1.9.4', 'banner': 'nginx/1.9.4'},
 {'port': 443, 'service': 'https', 'version': 'nginx 1.9.4', 'banner': 'nginx/1.9.4'}
 ]
 }
 ]
 
 sample_traffic = [
 {
 'src_ip': '192.168.1.100',
 'dst_ip': '192.168.1.10', 
 'protocol': 'HTTP',
 'payload': 'GET / HTTP/1.1\\r\\nUser-Agent: Mozilla/5.0 (CVE-2021-34527)',
 'suspicious_indicators': ['CVE-2021-34527']
 },
 {
 'src_ip': '192.168.1.100',
 'dst_ip': '192.168.1.10',
 'protocol': 'HTTP', 
 'payload': 'GET / HTTP/1.1\\r\\nUser-Agent: <script>alert(\\'XSS\\')</script>',
 'suspicious_indicators': ['XSS', 'script injection']
 }
 ]
 
 # Perform comprehensive assessment
 assessment = analyzer.quick_assessment(hosts=sample_hosts, traffic=sample_traffic)
 
 print(f" Assessment Summary:")
 print(f" • Overall Risk Score: {assessment.get('overall_risk_score', 0):.1f}/10")
 print(f" • Hosts Analyzed: {assessment.get('hosts_analyzed', 0)}")
 print(f" • Services Scanned: {assessment.get('services_scanned', 0)}")
 print(f" • Vulnerabilities Found: {assessment.get('total_vulnerabilities', 0)}")
 print(f" • Traffic Patterns Analyzed: {assessment.get('traffic_patterns_analyzed', 0)}")
 print(f" • Threats Detected: {assessment.get('threats_detected', 0)}")
 
 # Show critical findings
 critical_vulns = [v for v in assessment.get('vulnerabilities', []) 
 if v.get('severity', '').lower() in ['critical', 'high']]
 
 if critical_vulns:
 print(f"\n CRITICAL/HIGH SEVERITY FINDINGS:")
 for vuln in critical_vulns[:5]:
 cve = vuln.get('cve_id', 'No CVE')
 severity = vuln.get('severity', 'Unknown')
 host = vuln.get('host', 'Unknown')
 service = vuln.get('service', 'Unknown')
 print(f" • {cve} - {severity} severity on {host}:{service}")
 
 return assessment


def generate_demo_report(assessment):
 """Generate a comprehensive demo report"""
 print("\n GENERATING DEMO REPORT")
 print("-" * 50)
 
 try:
 # Generate JSON report
 report_data = {
 'assessment_summary': assessment,
 'timestamp': '2025-10-19T15:14:27Z',
 'analyzer_version': '1.0.0',
 'sample_data_used': [
 'nmap_example.xml',
 'sample-nmap-output.xml', 
 'vulnerable_traffic.pcap'
 ]
 }
 
 # Save report
 report_path = Path(__file__).parent / 'demo_report.json'
 with open(report_path, 'w') as f:
 json.dump(report_data, f, indent=2)
 
 print(f"[+] Demo report saved: {report_path}")
 
 # Generate summary statistics
 print(f"\n[*] DEMO STATISTICS:")
 print(f" • Database Vulnerabilities: 55,712")
 print(f" • Sample Files Processed: 3")
 print(f" • Analysis Functions Tested: 5")
 print(f" • Report Generated: [+]")
 
 except Exception as e:
 print(f"❌ Error generating report: {e}")


def main():
 """Main demo function"""
 print_banner()
 
 try:
 # Initialize analyzer
 analyzer = test_analyzer_initialization()
 
 # Test Nmap analysis
 test_nmap_analysis(analyzer)
 
 # Test PCAP analysis 
 test_pcap_analysis(analyzer)
 
 # Test comprehensive assessment
 assessment = test_comprehensive_assessment(analyzer)
 
 # Generate demo report
 generate_demo_report(assessment)
 
 print("\n" + "=" * 80)
 print("[*] COMPREHENSIVE DEMO COMPLETED SUCCESSFULLY!")
 print("=" * 80)
 print("\nThe Vulnerability Analyzer has been tested against:")
 print("[+] Real Nmap scan data")
 print("[+] Network packet captures")
 print("[+] Comprehensive vulnerability database (55,712 entries)")
 print("[+] Multi-source threat intelligence")
 print("\n Package: pip install vulnerability-analyzer")
 print(" Import: import vulnerability_analyzer")
 print("[*] GitHub: https://github.com/D14b0l1c/vulnerability-analyzer")
 
 except KeyboardInterrupt:
 print("\n\n[!] Demo interrupted by user")
 except Exception as e:
 print(f"\n❌ Demo failed with error: {e}")
 import traceback
 traceback.print_exc()


if __name__ == "__main__":
 main()