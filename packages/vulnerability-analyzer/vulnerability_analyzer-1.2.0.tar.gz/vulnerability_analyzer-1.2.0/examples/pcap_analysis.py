#!/usr/bin/env python3
"""
PCAP Analysis with Vulnerability Detection

This script demonstrates how the vulnerability analyzer works with
PCAP file parsing using multiple libraries (scapy, pyshark, dpkt).

Installation requirements:
pip install scapy pyshark dpkt
"""

import os
import sys
from pathlib import Path

# Add the src directory to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

import vulnerability_analyzer


def analyze_pcap_with_scapy(pcap_file):
    """Analyze PCAP using Scapy library"""
    try:
        import scapy.all as scapy
        print(f"[*] Analyzing PCAP with Scapy: {pcap_file}")
        
        # Read packets from PCAP
        packets = scapy.rdpcap(pcap_file)
        print(f"  Total packets: {len(packets)}")
        
        services = []
        
        for packet in packets:
            if packet.haslayer(scapy.TCP):
                tcp = packet[scapy.TCP]
                
                # Extract basic info
                src_ip = packet[scapy.IP].src if packet.haslayer(scapy.IP) else "Unknown"
                dst_ip = packet[scapy.IP].dst if packet.haslayer(scapy.IP) else "Unknown"
                src_port = tcp.sport
                dst_port = tcp.dport
                
                # Extract payload if available
                if packet.haslayer(scapy.Raw):
                    payload = packet[scapy.Raw].load.decode('utf-8', errors='ignore')
                    
                    # Detect services based on payload
                    service_info = detect_service_from_payload(dst_port, payload)
                    if service_info:
                        service_info.update({
                            'src_ip': src_ip,
                            'dst_ip': dst_ip,
                            'src_port': src_port,
                            'dst_port': dst_port,
                            'raw_payload': payload[:100]  # First 100 chars
                        })
                        services.append(service_info)
        
        return services
        
    except ImportError:
        print("  [!] Scapy not installed. Install with: pip install scapy")
        return []
    except Exception as e:
        print(f"  [!] Error with Scapy: {e}")
        return []


def analyze_pcap_with_pyshark(pcap_file):
    """Analyze PCAP using PyShark library"""
    try:
        import pyshark
        print(f"[*] Analyzing PCAP with PyShark: {pcap_file}")
        
        # Open capture file
        cap = pyshark.FileCapture(pcap_file)
        services = []
        packet_count = 0
        
        for packet in cap:
            packet_count += 1
            
            if hasattr(packet, 'tcp'):
                tcp = packet.tcp
                
                # Extract IPs
                src_ip = packet.ip.src if hasattr(packet, 'ip') else "Unknown"
                dst_ip = packet.ip.dst if hasattr(packet, 'ip') else "Unknown"
                src_port = int(tcp.srcport)
                dst_port = int(tcp.dstport)
                
                # Look for application layer data
                payload = ""
                if hasattr(packet, 'http'):
                    # HTTP traffic
                    if hasattr(packet.http, 'user_agent'):
                        payload = f"HTTP User-Agent: {packet.http.user_agent}"
                    elif hasattr(packet.http, 'server'):
                        payload = f"HTTP Server: {packet.http.server}"
                elif hasattr(packet, 'ssh'):
                    # SSH traffic
                    if hasattr(packet.ssh, 'protocol'):
                        payload = f"SSH Protocol: {packet.ssh.protocol}"
                elif hasattr(packet, 'tls'):
                    # TLS/SSL traffic
                    if hasattr(packet.tls, 'handshake_extensions_server_name'):
                        payload = f"TLS SNI: {packet.tls.handshake_extensions_server_name}"
                
                if payload:
                    service_info = detect_service_from_payload(dst_port, payload)
                    if service_info:
                        service_info.update({
                            'src_ip': src_ip,
                            'dst_ip': dst_ip,
                            'src_port': src_port,
                            'dst_port': dst_port,
                            'raw_payload': payload
                        })
                        services.append(service_info)
        
        cap.close()
        print(f"  Total packets processed: {packet_count}")
        return services
        
    except ImportError:
        print("  [!] PyShark not installed. Install with: pip install pyshark")
        return []
    except Exception as e:
        print(f"  [!] Error with PyShark: {e}")
        return []


def analyze_pcap_with_dpkt(pcap_file):
    """Analyze PCAP using dpkt library"""
    try:
        import dpkt
        import socket
        print(f"[*] Analyzing PCAP with dpkt: {pcap_file}")
        
        services = []
        
        with open(pcap_file, 'rb') as f:
            pcap = dpkt.pcap.Reader(f)
            packet_count = 0
            
            for timestamp, buf in pcap:
                packet_count += 1
                
                # Parse Ethernet frame
                eth = dpkt.ethernet.Ethernet(buf)
                
                # Check if it's IP
                if isinstance(eth.data, dpkt.ip.IP):
                    ip = eth.data
                    
                    # Convert IPs to strings
                    src_ip = socket.inet_ntoa(ip.src)
                    dst_ip = socket.inet_ntoa(ip.dst)
                    
                    # Check if it's TCP
                    if isinstance(ip.data, dpkt.tcp.TCP):
                        tcp = ip.data
                        src_port = tcp.sport
                        dst_port = tcp.dport
                        
                        # Extract payload
                        if tcp.data:
                            try:
                                payload = tcp.data.decode('utf-8', errors='ignore')
                                
                                service_info = detect_service_from_payload(dst_port, payload)
                                if service_info:
                                    service_info.update({
                                        'src_ip': src_ip,
                                        'dst_ip': dst_ip,
                                        'src_port': src_port,
                                        'dst_port': dst_port,
                                        'raw_payload': payload[:100]
                                    })
                                    services.append(service_info)
                            except:
                                pass  # Skip binary data
        
        print(f"  Total packets processed: {packet_count}")
        return services
        
    except ImportError:
        print("  [!] dpkt not installed. Install with: pip install dpkt")
        return []
    except Exception as e:
        print(f"  [!] Error with dpkt: {e}")
        return []


def detect_service_from_payload(port, payload):
    """Detect service type and version from payload"""
    payload_lower = payload.lower()
    
    service_info = {
        'port': port,
        'service': '',
        'product': '',
        'version': '',
        'banner': payload
    }
    
    # SSH Detection
    if port == 22 or 'ssh-' in payload_lower:
        service_info['service'] = 'ssh'
        if 'openssh' in payload_lower:
            service_info['product'] = 'OpenSSH'
            # Extract version: SSH-2.0-OpenSSH_6.2
            if 'openssh_' in payload_lower:
                try:
                    version = payload.split('OpenSSH_')[1].split()[0]
                    service_info['version'] = version
                except:
                    pass
    
    # HTTP Detection
    elif port == 80 or port == 8080 or 'http' in payload_lower:
        service_info['service'] = 'http'
        if 'apache' in payload_lower:
            service_info['product'] = 'Apache'
            # Extract Apache version
            if 'apache/' in payload_lower:
                try:
                    version = payload.split('Apache/')[1].split()[0]
                    service_info['version'] = version
                except:
                    pass
        elif 'nginx' in payload_lower:
            service_info['product'] = 'nginx'
            if 'nginx/' in payload_lower:
                try:
                    version = payload.split('nginx/')[1].split()[0]
                    service_info['version'] = version
                except:
                    pass
    
    # HTTPS/TLS Detection
    elif port == 443:
        service_info['service'] = 'https'
        if 'server:' in payload_lower:
            server_header = payload.split('Server:')[1].split('\n')[0].strip()
            service_info['product'] = server_header
    
    # MySQL Detection
    elif port == 3306 or 'mysql' in payload_lower:
        service_info['service'] = 'mysql'
        service_info['product'] = 'MySQL'
        if 'server' in payload_lower:
            # Extract MySQL version
            try:
                version = payload.split('Server')[1].split()[0]
                service_info['version'] = version
            except:
                pass
    
    # FTP Detection
    elif port == 21 or payload_lower.startswith('220'):
        service_info['service'] = 'ftp'
        if 'vsftpd' in payload_lower:
            service_info['product'] = 'vsftpd'
        elif 'proftpd' in payload_lower:
            service_info['product'] = 'ProFTPD'
    
    # SMTP Detection
    elif port == 25 or payload_lower.startswith('220') and 'smtp' in payload_lower:
        service_info['service'] = 'smtp'
        if 'postfix' in payload_lower:
            service_info['product'] = 'Postfix'
        elif 'sendmail' in payload_lower:
            service_info['product'] = 'Sendmail'
    
    # Return only if we detected a service
    return service_info if service_info['service'] else None


def analyze_services_for_vulnerabilities(services):
    """Analyze detected services for vulnerabilities"""
    if not services:
        print("  [!] No services detected from PCAP")
        return
    
    print(f"\n[*] VULNERABILITY ANALYSIS")
    print("=" * 50)
    
    # Initialize vulnerability analyzer
    analyzer = vulnerability_analyzer.VulnerabilityAnalyzer()
    
    # Group services by destination IP
    services_by_host = {}
    for service in services:
        dst_ip = service['dst_ip']
        if dst_ip not in services_by_host:
            services_by_host[dst_ip] = []
        
        # Convert to format expected by analyzer
        service_data = {
            'port': service['port'],
            'service': service['service'],
            'product': service['product'],
            'version': service['version'],
            'banner': service['banner']
        }
        services_by_host[dst_ip].append(service_data)
    
    total_vulnerabilities = 0
    
    for host_ip, host_services in services_by_host.items():
        print(f"\n[*] Analyzing host: {host_ip}")
        print(f"  Services detected: {len(host_services)}")
        
        # Analyze vulnerabilities
        results = analyzer.analyze_service_vulnerabilities(host_ip, host_services)
        
        vuln_count = len(results['vulnerabilities_found'])
        total_vulnerabilities += vuln_count
        
        print(f"  Vulnerabilities found: {vuln_count}")
        print(f"  Risk score: {results['risk_score']:.1f}/10")
        
        # Show sample vulnerabilities
        for vuln in results['vulnerabilities_found'][:3]:
            print(f"    - {vuln['cve_id']}: {vuln['severity']} (Score: {vuln['base_score']})")
    
    print(f"\n[*] TOTAL VULNERABILITIES FOUND: {total_vulnerabilities}")
    return total_vulnerabilities


def main():
    """Main function to demonstrate PCAP analysis"""
    print("[*] PCAP ANALYSIS WITH VULNERABILITY DETECTION")
    print("=" * 70)
    
    # Path to sample PCAP file
    pcap_file = Path(__file__).parent / 'sample_data' / 'vulnerable_traffic.pcap'
    
    if not pcap_file.exists():
        print(f"[!] PCAP file not found: {pcap_file}")
        print("  Place a PCAP file at examples/sample_data/vulnerable_traffic.pcap")
        return
    
    print(f"[*] Analyzing PCAP file: {pcap_file}")
    print(f"  File size: {pcap_file.stat().st_size} bytes")
    
    # Try different PCAP parsing libraries
    all_services = []
    
    # Method 1: Scapy
    scapy_services = analyze_pcap_with_scapy(str(pcap_file))
    all_services.extend(scapy_services)
    
    # Method 2: PyShark
    pyshark_services = analyze_pcap_with_pyshark(str(pcap_file))
    all_services.extend(pyshark_services)
    
    # Method 3: dpkt
    dpkt_services = analyze_pcap_with_dpkt(str(pcap_file))
    all_services.extend(dpkt_services)
    
    # Remove duplicates
    unique_services = []
    seen = set()
    for service in all_services:
        key = (service['dst_ip'], service['port'], service['service'])
        if key not in seen:
            seen.add(key)
            unique_services.append(service)
    
    print(f"\n[*] SERVICES DETECTED FROM PCAP:")
    print("-" * 40)
    for service in unique_services:
        print(f"  {service['dst_ip']}:{service['port']} - {service['service']} "
              f"{service['product']} {service['version']}")
    
    # Analyze for vulnerabilities
    analyze_services_for_vulnerabilities(unique_services)


if __name__ == "__main__":
    main()