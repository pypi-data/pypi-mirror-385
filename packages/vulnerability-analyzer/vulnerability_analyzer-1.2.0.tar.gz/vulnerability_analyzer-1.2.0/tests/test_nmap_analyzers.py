#!/usr/bin/env python3
"""
Test Nmap Analysis Tools
Tests the comprehensive Nmap analyzers with sample XML files

Author: Security Research Team
Date: 2024
"""

import os
import sys
import json
from pathlib import Path

def test_nmap_analyzers():
    """Test both comprehensive and vulners analyzers"""
    
    # Check for sample XML files
    sample_files = [
        'nmap_example.xml',
        'sample-nmap-output.xml'
    ]
    
    existing_files = []
    for sample_file in sample_files:
        if os.path.exists(sample_file):
            existing_files.append(sample_file)
            print(f"‚úì Found sample file: {sample_file}")
        else:
            print(f"‚ö† Sample file not found: {sample_file}")
    
    if not existing_files:
        print("‚ùå No sample XML files found. Please ensure you have Nmap XML output files to test with.")
        return False
    
    # Test comprehensive analyzer
    print(f"\nüîç Testing Comprehensive Nmap Analyzer...")
    try:
        from nmap_analysis_comprehensive import NmapAnalyzer
        
        for xml_file in existing_files:
            print(f"\nüìÑ Analyzing {xml_file}...")
            
            try:
                # Test with vulnerability database if available
                vuln_db_path = 'vulnerability_db.json' if os.path.exists('vulnerability_db.json') else None
                
                analyzer = NmapAnalyzer(xml_file, vuln_db_path)
                summary = analyzer.get_summary()
                
                print(f"   ‚úì Hosts analyzed: {summary['statistics']['total_hosts']}")
                print(f"   ‚úì Open ports: {summary['statistics']['open_ports']}")
                print(f"   ‚úì Services found: {summary['statistics']['unique_services']}")
                print(f"   ‚úì Vulnerabilities: {summary['statistics']['total_vulnerabilities']}")
                
                # Generate reports
                json_file = analyzer.export_json(f"test_comprehensive_{Path(xml_file).stem}.json")
                csv_file = analyzer.export_csv(f"test_comprehensive_{Path(xml_file).stem}.csv")
                html_file = analyzer.generate_html_report(f"test_comprehensive_{Path(xml_file).stem}.html")
                
                print(f"   ‚úì JSON report: {json_file}")
                print(f"   ‚úì CSV report: {csv_file}")
                print(f"   ‚úì HTML report: {html_file}")
                
            except Exception as e:
                print(f"   ‚ùå Error analyzing {xml_file}: {e}")
                
    except ImportError as e:
        print(f"‚ùå Could not import comprehensive analyzer: {e}")
        return False
    
    # Test Vulners analyzer
    print(f"\nüîç Testing Nmap Vulners Analyzer...")
    try:
        from nmap_vulners_analyzer import NmapVulnersAnalyzer
        
        for xml_file in existing_files:
            print(f"\nüìÑ Analyzing {xml_file} with Vulners patterns...")
            
            try:
                # Test with vulnerability database if available
                vuln_db_path = 'vulnerability_db.json' if os.path.exists('vulnerability_db.json') else None
                
                analyzer = NmapVulnersAnalyzer(xml_file, vuln_db_path)
                results = analyzer.analyze_vulnerabilities()
                
                print(f"   ‚úì Hosts analyzed: {len(results.get('hosts', []))}")
                print(f"   ‚úì Total vulnerabilities: {results['summary']['total_vulnerabilities']}")
                print(f"   ‚úì Critical: {results['summary']['critical_count']}")
                print(f"   ‚úì High: {results['summary']['high_count']}")
                print(f"   ‚úì Medium: {results['summary']['medium_count']}")
                print(f"   ‚úì Low: {results['summary']['low_count']}")
                
                # Generate reports
                json_file = analyzer.export_results(results, f"test_vulners_{Path(xml_file).stem}.json", 'json')
                csv_file = analyzer.export_results(results, f"test_vulners_{Path(xml_file).stem}.csv", 'csv')
                html_file = analyzer.export_results(results, f"test_vulners_{Path(xml_file).stem}.html", 'html')
                
                print(f"   ‚úì JSON report: {json_file}")
                print(f"   ‚úì CSV report: {csv_file}")
                print(f"   ‚úì HTML report: {html_file}")
                
            except Exception as e:
                print(f"   ‚ùå Error analyzing {xml_file}: {e}")
                
    except ImportError as e:
        print(f"‚ùå Could not import vulners analyzer: {e}")
        return False
    
    return True

def compare_analyzers():
    """Compare results from both analyzers"""
    print(f"\nüìä Comparing Analyzer Results...")
    
    # Look for generated JSON files
    json_files = {
        'comprehensive': [],
        'vulners': []
    }
    
    for file in os.listdir('.'):
        if file.startswith('test_comprehensive_') and file.endswith('.json'):
            json_files['comprehensive'].append(file)
        elif file.startswith('test_vulners_') and file.endswith('.json'):
            json_files['vulners'].append(file)
    
    if not json_files['comprehensive'] or not json_files['vulners']:
        print("‚ö† No JSON results found for comparison")
        return
    
    print(f"\nüìà Comparison Summary:")
    print(f"{'Analyzer':<15} {'File':<30} {'Hosts':<8} {'Vulns':<8} {'Services':<10}")
    print("-" * 75)
    
    for comp_file in json_files['comprehensive']:
        try:
            with open(comp_file, 'r') as f:
                data = json.load(f)
                stats = data.get('summary', {}).get('statistics', {})
                print(f"{'Comprehensive':<15} {comp_file:<30} {stats.get('total_hosts', 0):<8} {stats.get('total_vulnerabilities', 0):<8} {stats.get('unique_services', 0):<10}")
        except Exception as e:
            print(f"‚ùå Error reading {comp_file}: {e}")
    
    for vulners_file in json_files['vulners']:
        try:
            with open(vulners_file, 'r') as f:
                data = json.load(f)
                summary = data.get('summary', {})
                print(f"{'Vulners':<15} {vulners_file:<30} {len(data.get('hosts', [])):<8} {summary.get('total_vulnerabilities', 0):<8} {'N/A':<10}")
        except Exception as e:
            print(f"‚ùå Error reading {vulners_file}: {e}")

def show_github_references():
    """Show GitHub references used in the analyzers"""
    print(f"\nüìö GitHub Repository References:")
    print(f"   vulnerscom/nmap-vulners:")
    print(f"   ‚îî‚îÄ‚îÄ https://github.com/vulnerscom/nmap-vulners")
    print(f"   ‚îî‚îÄ‚îÄ NSE scripts for vulnerability detection")
    print(f"   ‚îî‚îÄ‚îÄ vulners.nse - Core vulnerability scanning")
    print(f"   ‚îî‚îÄ‚îÄ vulners_enterprise.nse - Enterprise API integration")
    print(f"   ‚îî‚îÄ‚îÄ http-vulners-regex.nse - HTTP service patterns")
    print(f"")
    print(f"   ernw/nmap-parse-output:")
    print(f"   ‚îî‚îÄ‚îÄ https://github.com/ernw/nmap-parse-output")
    print(f"   ‚îî‚îÄ‚îÄ XSLT-based Nmap XML processing tools")
    print(f"   ‚îî‚îÄ‚îÄ HTML report generation")
    print(f"   ‚îî‚îÄ‚îÄ Data extraction and manipulation")

def main():
    print("üîç Nmap Analysis Tools Test Suite")
    print("=" * 50)
    
    # Show GitHub references
    show_github_references()
    
    # Test analyzers
    success = test_nmap_analyzers()
    
    if success:
        # Compare results
        compare_analyzers()
        
        print(f"\n‚úÖ Testing completed successfully!")
        print(f"üìä Check generated reports for detailed analysis results")
        print(f"üåê Open HTML files in your browser for visual reports")
        
        # List generated files
        print(f"\nüìÑ Generated Files:")
        for file in sorted(os.listdir('.')):
            if (file.startswith('test_comprehensive_') or 
                file.startswith('test_vulners_') or
                file.startswith('nmap_analysis_') or
                file.startswith('nmap_vulners_analysis_')):
                print(f"   {file}")
    else:
        print(f"\n‚ùå Testing failed - check error messages above")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())