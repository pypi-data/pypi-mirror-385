Metadata-Version: 2.4
Name: fkr-cli
Version: 1.0.0
Summary: Gerador de dados fake multi-linguagem (Python, Delphi/Pascal, C#)
Home-page: https://github.com/yourusername/fkr-cli
Author: FKR CLI Contributors
License: MIT
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Software Development :: Code Generators
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer>=0.9.0
Requires-Dist: faker>=18.0.0
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# FKR CLI - Gerador de Dados Fake Multi-Linguagem

Gerador de dados fake inteligente que suporta Python, Delphi/Pascal e C#.

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/)

## üìù Sobre o Projeto

FKR √© um gerador de dados fake open source que facilita a cria√ß√£o de dados de teste para desenvolvimento. Com suporte a m√∫ltiplas linguagens e formatos, √© ideal para popular bancos de dados, criar fixtures e testar aplica√ß√µes.

## Instala√ß√£o

```bash
pip install -e .
```

## Uso

```bash
# Gerar JSON (padr√£o)
fkr classes/pessoa.py:Pessoa -c 10

# Gerar SQL
fkr classes/Pessoa.pas:TPessoa -c 100 --format sql --table pessoas

# Gerar CSV
fkr classes/Usuario.cs:Usuario -c 50 --format csv
```

## Features

- ‚úÖ Suporte a Python (.py), Delphi/Pascal (.pas), C# (.cs)
- ‚úÖ Formatos de sa√≠da: JSON, SQL, CSV
- ‚úÖ 100+ campos mapeados automaticamente
- ‚úÖ IDs inteligentes (UUID para string, serial para int)
- ‚úÖ Classes customizadas retornam null
- ‚úÖ Providers personalizados para ERP

## Sintaxe

```bash
fkr <arquivo>:<classe> -c <count> --format <json|sql|csv> --table <nome>
```

**Op√ß√µes:**
- `-c, --count`: N√∫mero de registros a gerar (padr√£o: 1)
- `-f, --format`: Formato de sa√≠da (json, sql, csv) (padr√£o: json)
- `-t, --table`: Nome da tabela SQL (padr√£o: nome da classe em min√∫sculas)

## Exemplos

```bash
# Python
fkr models/user.py:User -c 100 --format sql --table users

# Delphi
fkr units/Pessoa.pas:TPessoa -c 50 --format csv

# C#
fkr Entities/Product.cs:Product -c 200 --format json
```

O arquivo de sa√≠da ser√° gerado no mesmo diret√≥rio do arquivo de entrada.

## ü§ù Contribuindo

Contribui√ß√µes s√£o bem-vindas! Este √© um projeto open source e voc√™ pode:

- üêõ Reportar bugs
- üí° Sugerir novas features
- üîß Adicionar novos parsers (Java, Go, TypeScript, etc.)
- üìö Melhorar a documenta√ß√£o
- ‚ûï Adicionar novos providers no `PROVIDER_MAP`

### Como Contribuir

1. Fork o projeto
2. Crie uma branch para sua feature (`git checkout -b feature/NovoParser`)
3. Commit suas mudan√ßas (`git commit -m 'Adiciona parser para Java'`)
4. Push para a branch (`git push origin feature/NovoParser`)
5. Abra um Pull Request

### Adicionando um Novo Parser

Para adicionar suporte a uma nova linguagem:

1. Crie um novo parser em `parsers/` implementando a interface `Parser`
2. Adicione o parser no `ParserFactory` em `parsers/parser_factory.py`
3. Teste com classes reais da linguagem

Exemplo:

```python
# parsers/java_parser.py
from interfaces.parser import Parser
from typing import Dict, Type

class JavaParser(Parser):
    def parse(self, file_path: str, class_name: str) -> Dict[str, Type]:
        # Implementa√ß√£o do parser
        pass
    
    def get_supported_extensions(self) -> list[str]:
        return ['.java']
```

## üìÑ Licen√ßa

Este projeto est√° sob a licen√ßa MIT. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.

## üåü Autor

Desenvolvido com ‚ù§Ô∏è pela comunidade open source.

---

**Gostou do projeto? Deixe uma ‚≠ê no reposit√≥rio!**

