# coding: utf-8

"""
    Terra Scientific Pipelines Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from teaspoons_client.models.async_pipeline_run_response import AsyncPipelineRunResponse

class TestAsyncPipelineRunResponse(unittest.TestCase):
    """AsyncPipelineRunResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AsyncPipelineRunResponse:
        """Test AsyncPipelineRunResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AsyncPipelineRunResponse`
        """
        model = AsyncPipelineRunResponse()
        if include_optional:
            return AsyncPipelineRunResponse(
                job_report = teaspoons_client.models.job_report.JobReport(
                    id = '', 
                    description = '', 
                    status = 'RUNNING', 
                    status_code = 56, 
                    submitted = '', 
                    completed = '', 
                    result_url = '', ),
                error_report = teaspoons_client.models.error_report.ErrorReport(
                    message = '', 
                    status_code = 56, 
                    causes = [
                        ''
                        ], ),
                pipeline_run_report = teaspoons_client.models.pipeline_run_report.PipelineRunReport(
                    pipeline_name = '', 
                    pipeline_version = 56, 
                    tool_version = '', 
                    outputs = {
                        'key' : null
                        }, 
                    output_expiration_date = '', 
                    quota_consumed = 56, )
            )
        else:
            return AsyncPipelineRunResponse(
                job_report = teaspoons_client.models.job_report.JobReport(
                    id = '', 
                    description = '', 
                    status = 'RUNNING', 
                    status_code = 56, 
                    submitted = '', 
                    completed = '', 
                    result_url = '', ),
                pipeline_run_report = teaspoons_client.models.pipeline_run_report.PipelineRunReport(
                    pipeline_name = '', 
                    pipeline_version = 56, 
                    tool_version = '', 
                    outputs = {
                        'key' : null
                        }, 
                    output_expiration_date = '', 
                    quota_consumed = 56, ),
        )
        """

    def testAsyncPipelineRunResponse(self):
        """Test AsyncPipelineRunResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
