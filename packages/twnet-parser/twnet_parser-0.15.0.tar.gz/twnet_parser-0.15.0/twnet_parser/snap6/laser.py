# generated by scripts/generate_messages.py

from typing import Any, Dict

from twnet_parser.pretty_print import PrettyPrint
from twnet_parser.packer import Unpacker
from twnet_parser.packer import pack_int

class ObjLaser(PrettyPrint):
    def __init__(
            self,
            x: int = 0,
            y: int = 0,
            from_x: int = 0,
            from_y: int = 0,
            start_tick: int = 0
    ) -> None:
        self.item_name: str = 'obj.laser'
        self.type_id: int = 3
        self.id: int = 0
        self.size: int = 5

        self.x: int = x
        self.y: int = y
        self.from_x: int = from_x
        self.from_y: int = from_y
        self.start_tick: int = start_tick

    def __iter__(self):
        yield 'item_name', self.item_name
        yield 'type_id', self.type_id
        yield 'id', self.id
        yield 'size', self.size

        yield 'x', self.x
        yield 'y', self.y
        yield 'from_x', self.from_x
        yield 'from_y', self.from_y
        yield 'start_tick', self.start_tick

    def to_dict_payload_only(self) -> Dict[str, Any]:
        return {
            'x': self.x,
            'y': self.y,
            'from_x': self.from_x,
            'from_y': self.from_y,
            'start_tick': self.start_tick
        }

    # first byte of data
    # has to be the first byte of the message payload
    # NOT the chunk header and NOT the message id
    def unpack(self, unpacker: Unpacker) -> bool:
        self.x = unpacker.get_int()
        self.y = unpacker.get_int()
        self.from_x = unpacker.get_int()
        self.from_y = unpacker.get_int()
        self.start_tick = unpacker.get_int()
        return True

    def pack(self) -> bytes:
        return pack_int(self.x) + \
            pack_int(self.y) + \
            pack_int(self.from_x) + \
            pack_int(self.from_y) + \
            pack_int(self.start_tick)