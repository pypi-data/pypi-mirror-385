# generated by scripts/generate_messages.py

from typing import Any, Dict

from twnet_parser.pretty_print import PrettyPrint
from twnet_parser.packer import Unpacker
from twnet_parser.packer import pack_int
import twnet_parser.enum7 as enum7

class ObjSpectatorInfo(PrettyPrint):
    def __init__(
            self,
            spec_mode: int = enum7.Spec.FREEVIEW.value,
            spectator_id: int = 0,
            x: int = 0,
            y: int = 0
    ) -> None:
        self.item_name: str = 'obj.spectator_info'
        self.type_id: int = 12
        self.id: int = 0
        self.size: int = 4

        self.spec_mode: int = spec_mode
        self.spectator_id: int = spectator_id
        self.x: int = x
        self.y: int = y

    def __iter__(self):
        yield 'item_name', self.item_name
        yield 'type_id', self.type_id
        yield 'id', self.id
        yield 'size', self.size

        yield 'spec_mode', self.spec_mode
        yield 'spectator_id', self.spectator_id
        yield 'x', self.x
        yield 'y', self.y

    def to_dict_payload_only(self) -> Dict[str, Any]:
        return {
            'spec_mode': self.spec_mode,
            'spectator_id': self.spectator_id,
            'x': self.x,
            'y': self.y
        }

    # first byte of data
    # has to be the first byte of the message payload
    # NOT the chunk header and NOT the message id
    def unpack(self, unpacker: Unpacker) -> bool:
        self.spec_mode = unpacker.get_int() # enum SPEC
        self.spectator_id = unpacker.get_int()
        self.x = unpacker.get_int()
        self.y = unpacker.get_int()
        return True

    def pack(self) -> bytes:
        return pack_int(self.spec_mode) + \
            pack_int(self.spectator_id) + \
            pack_int(self.x) + \
            pack_int(self.y)