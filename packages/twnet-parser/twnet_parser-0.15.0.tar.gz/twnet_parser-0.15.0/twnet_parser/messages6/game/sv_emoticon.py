# generated by scripts/generate_messages.py

from twnet_parser.pretty_print import PrettyPrint
from twnet_parser.packer import Unpacker
from twnet_parser.chunk_header import ChunkHeader
from twnet_parser.packer import pack_int
from typing import Literal, Optional
import twnet_parser.enum6 as enum6

class MsgSvEmoticon(PrettyPrint):
    def __init__(
            self,
            chunk_header: Optional[ChunkHeader] = None,
            client_id: int = 0,
            emoticon: int = enum6.Emoticon.OOP.value
    ) -> None:
        self.message_type: Literal['system', 'game'] = 'game'
        self.message_name: str = 'sv_emoticon'
        self.system_message: bool = False
        self.message_id: int = 10
        if not chunk_header:
            chunk_header = ChunkHeader(version = '0.6')
        self.header: ChunkHeader = chunk_header

        self.client_id: int = client_id
        self.emoticon: int = emoticon

    def __iter__(self):
        yield 'message_type', self.message_type
        yield 'message_name', self.message_name
        yield 'system_message', self.system_message
        yield 'message_id', self.message_id
        yield 'header', dict(self.header)

        yield 'client_id', self.client_id
        yield 'emoticon', self.emoticon

    # first byte of data
    # has to be the first byte of the message payload
    # NOT the chunk header and NOT the message id
    def unpack(self, data: bytes) -> bool:
        unpacker = Unpacker(data)
        self.client_id = unpacker.get_int()
        self.emoticon = unpacker.get_int() # enum EMOTICON
        return True

    def pack(self) -> bytes:
        return pack_int(self.client_id) + \
            pack_int(self.emoticon)