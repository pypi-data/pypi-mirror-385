# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/event_reporting/v3/event_reporting_service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EventReportingServiceStub",
    "StreamEventsRequest",
    "StreamEventsRequestIdentifier",
    "StreamEventsResponse",
)

from collections.abc import Iterable, Iterator
from dataclasses import dataclass

import betterproto2
import grpc

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class StreamEventsRequest(betterproto2.Message):
    """
    [#not-implemented-hide:]
    An events envoy sends to the management server.
    """

    identifier: "StreamEventsRequestIdentifier | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Identifier data that will only be sent in the first message on the stream. This is effectively
    structured metadata and is a performance optimization.
    """

    events: "list[____google__protobuf__.Any]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Batch of events. When the stream is already active, it will be the events occurred
    since the last message had been sent. If the server receives unknown event type, it should
    silently ignore it.

    The following events are supported:

    * :ref:`HealthCheckEvent <envoy_v3_api_msg_data.core.v3.HealthCheckEvent>`
    * :ref:`OutlierDetectionEvent <envoy_v3_api_msg_data.cluster.v3.OutlierDetectionEvent>`
    """


default_message_pool.register_message(
    "envoy.service.event_reporting.v3", "StreamEventsRequest", StreamEventsRequest
)


@dataclass(eq=False, repr=False)
class StreamEventsRequestIdentifier(betterproto2.Message):
    node: "___config__core__v3__.Node | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The node sending the event messages over the stream.
    """


default_message_pool.register_message(
    "envoy.service.event_reporting.v3",
    "StreamEventsRequest.Identifier",
    StreamEventsRequestIdentifier,
)


@dataclass(eq=False, repr=False)
class StreamEventsResponse(betterproto2.Message):
    """
    [#not-implemented-hide:]
    The management server may send envoy a StreamEventsResponse to tell which events the server
    is interested in. In future, with aggregated event reporting service, this message will
    contain, for example, clusters the envoy should send events for, or event types the server
    wants to process.
    """

    pass


default_message_pool.register_message(
    "envoy.service.event_reporting.v3", "StreamEventsResponse", StreamEventsResponse
)


class EventReportingServiceStub:
    """
    [#protodoc-title: gRPC Event Reporting Service]

    [#not-implemented-hide:]
    Service for streaming different types of events from Envoy to a server. The examples of
    such events may be health check or outlier detection events.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_events(
        self, messages: "Iterable[StreamEventsRequest]"
    ) -> "Iterator[StreamEventsResponse]":
        """
        Envoy will connect and send StreamEventsRequest messages forever.
        The management server may send StreamEventsResponse to configure event stream. See below.
        This API is designed for high throughput with the expectation that it might be lossy.
        """

        yield from self._channel.stream_stream(
            "/envoy.service.event_reporting.v3.EventReportingService/StreamEvents",
            StreamEventsRequest.SerializeToString,
            StreamEventsResponse.FromString,
        )(iter(messages))


from .....google import protobuf as ____google__protobuf__
from ....config.core import v3 as ___config__core__v3__
