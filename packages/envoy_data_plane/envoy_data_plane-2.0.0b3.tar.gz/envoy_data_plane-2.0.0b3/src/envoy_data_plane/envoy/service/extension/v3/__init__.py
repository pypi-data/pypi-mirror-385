# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/extension/v3/config_discovery.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EcdsDummy",
    "ExtensionConfigDiscoveryServiceStub",
)

from collections.abc import Iterable, Iterator
from dataclasses import dataclass

import betterproto2
import grpc

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class EcdsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue
    with importing services: https://github.com/google/protobuf/issues/4221 and
    protoxform to upgrade the file.
    """

    pass


default_message_pool.register_message(
    "envoy.service.extension.v3", "EcdsDummy", EcdsDummy
)


class ExtensionConfigDiscoveryServiceStub:
    """
    [#protodoc-title: Extension config discovery service (ECDS)]

    A service that supports dynamic configuration updates for a specific filter.
    Currently, ECDS is supported for network filters, HTTP filters, UDP session filters, and listener filters.
    Please check :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.

    The overall extension config discovery service works as follows:

    #. A filter (:ref:`Downstream Network <envoy_v3_api_field_config.listener.v3.Filter.config_discovery>`,
       :ref:`Upstream Network <envoy_v3_api_field_config.cluster.v3.Filter.config_discovery>`,
       :ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`,
       :ref:`UDP Session <envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.SessionFilter.config_discovery>`,
       or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
       contains a (:ref:`ExtensionConfigSource config discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`) configuration. This configuration
       includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
       from which the filter configuration will be fetched.
    #. The client then registers for a resource using the filter name as the ``resource_name``.
    #. The xDS server sends back the filter's configuration.
    #. The client stores the configuration that will be used in the next instantiation of the filter chain,
       i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
       account in the following instantiation of the filter chain.

    .. note::
      Filters that are configured using ECDS are warmed. For more details see
      :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.

    Return extension configurations.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_extension_configs(
        self, messages: "Iterable[__discovery__v3__.DiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/StreamExtensionConfigs",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(iter(messages))

    def delta_extension_configs(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/DeltaExtensionConfigs",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))

    def fetch_extension_configs(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        return self._channel.unary_unary(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/FetchExtensionConfigs",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(message)


from ...discovery import v3 as __discovery__v3__
