# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/status/v2/csds.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ClientConfig",
    "ClientStatusDiscoveryServiceStub",
    "ClientStatusRequest",
    "ClientStatusResponse",
    "ConfigStatus",
    "PerXdsConfig",
)

from collections.abc import Iterable, Iterator
from dataclasses import dataclass

import betterproto2
import grpc

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ConfigStatus(betterproto2.Enum):
    """
    Status of a config.
    """

    UNKNOWN = 0
    """
    Status info is not available/unknown.
    """

    SYNCED = 1
    """
    Management server has sent the config to client and received ACK.
    """

    NOT_SENT = 2
    """
    Config is not sent.
    """

    STALE = 3
    """
    Management server has sent the config to client but hasnâ€™t received
    ACK/NACK.
    """

    ERROR = 4
    """
    Management server has sent the config to client but received NACK.
    """


@dataclass(eq=False, repr=False)
class ClientConfig(betterproto2.Message):
    """
    All xds configs for a particular client.
    """

    node: "___api__v2__core__.Node | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Node for a particular client.
    """

    xds_config: "list[PerXdsConfig]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "envoy.service.status.v2", "ClientConfig", ClientConfig
)


@dataclass(eq=False, repr=False)
class ClientStatusRequest(betterproto2.Message):
    """
    Request for client status of clients identified by a list of NodeMatchers.
    """

    node_matchers: "list[___type__matcher__.NodeMatcher]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Management server can use these match criteria to identify clients.
    The match follows OR semantics.
    """


default_message_pool.register_message(
    "envoy.service.status.v2", "ClientStatusRequest", ClientStatusRequest
)


@dataclass(eq=False, repr=False)
class ClientStatusResponse(betterproto2.Message):
    config: "list[ClientConfig]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Client configs for the clients specified in the ClientStatusRequest.
    """


default_message_pool.register_message(
    "envoy.service.status.v2", "ClientStatusResponse", ClientStatusResponse
)


@dataclass(eq=False, repr=False)
class PerXdsConfig(betterproto2.Message):
    """
    Detailed config (per xDS) with status.
    [#next-free-field: 6]

    Oneofs:
        - per_xds_config:
    """

    status: "ConfigStatus" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ConfigStatus(0)
    )

    listener_config: "___admin__v2alpha__.ListenersConfigDump | None" = (
        betterproto2.field(
            2, betterproto2.TYPE_MESSAGE, optional=True, group="per_xds_config"
        )
    )

    cluster_config: "___admin__v2alpha__.ClustersConfigDump | None" = (
        betterproto2.field(
            3, betterproto2.TYPE_MESSAGE, optional=True, group="per_xds_config"
        )
    )

    route_config: "___admin__v2alpha__.RoutesConfigDump | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="per_xds_config"
    )

    scoped_route_config: "___admin__v2alpha__.ScopedRoutesConfigDump | None" = (
        betterproto2.field(
            5, betterproto2.TYPE_MESSAGE, optional=True, group="per_xds_config"
        )
    )


default_message_pool.register_message(
    "envoy.service.status.v2", "PerXdsConfig", PerXdsConfig
)


class ClientStatusDiscoveryServiceStub:
    """
    [#protodoc-title: Client Status Discovery Service (CSDS)]

    CSDS is Client Status Discovery Service. It can be used to get the status of
    an xDS-compliant client from the management server's point of view. In the
    future, it can potentially be used as an interface to get the current
    state directly from the client.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_client_status(
        self, messages: "Iterable[ClientStatusRequest]"
    ) -> "Iterator[ClientStatusResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.status.v2.ClientStatusDiscoveryService/StreamClientStatus",
            ClientStatusRequest.SerializeToString,
            ClientStatusResponse.FromString,
        )(iter(messages))

    def fetch_client_status(
        self, message: "ClientStatusRequest"
    ) -> "ClientStatusResponse":
        return self._channel.unary_unary(
            "/envoy.service.status.v2.ClientStatusDiscoveryService/FetchClientStatus",
            ClientStatusRequest.SerializeToString,
            ClientStatusResponse.FromString,
        )(message)


from ....admin import v2alpha as ___admin__v2alpha__
from ....api.v2 import core as ___api__v2__core__
from ....type import matcher as ___type__matcher__
