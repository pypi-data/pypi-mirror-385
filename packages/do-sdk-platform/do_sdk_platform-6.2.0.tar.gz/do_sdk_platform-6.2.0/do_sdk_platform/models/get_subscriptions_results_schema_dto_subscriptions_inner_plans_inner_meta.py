# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetSubscriptionsResultsSchemaDtoSubscriptionsInnerPlansInnerMeta(BaseModel):
    """
    GetSubscriptionsResultsSchemaDtoSubscriptionsInnerPlansInnerMeta
    """ # noqa: E501
    includes: Optional[List[StrictStr]] = None
    index: Optional[Union[StrictFloat, StrictInt]] = None
    coming_soon: Optional[List[StrictStr]] = None
    is_coming_soon: Optional[StrictStr] = None
    max_days: Optional[Union[StrictFloat, StrictInt]] = None
    renewable: Optional[StrictBool] = None
    max_invites: Optional[Union[StrictFloat, StrictInt]] = None
    max_subscriptions: Optional[Union[StrictFloat, StrictInt]] = None
    can_buy_credits: Optional[StrictBool] = None
    needs_credit_card: Optional[StrictBool] = None
    academic: Optional[StrictBool] = None
    is_beta: Optional[StrictBool] = None
    demo_url: Optional[StrictStr] = None
    doc_url: Optional[StrictStr] = None
    gateway: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["includes", "index", "coming_soon", "is_coming_soon", "max_days", "renewable", "max_invites", "max_subscriptions", "can_buy_credits", "needs_credit_card", "academic", "is_beta", "demo_url", "doc_url", "gateway"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSubscriptionsResultsSchemaDtoSubscriptionsInnerPlansInnerMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSubscriptionsResultsSchemaDtoSubscriptionsInnerPlansInnerMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includes": obj.get("includes"),
            "index": obj.get("index"),
            "coming_soon": obj.get("coming_soon"),
            "is_coming_soon": obj.get("is_coming_soon"),
            "max_days": obj.get("max_days"),
            "renewable": obj.get("renewable"),
            "max_invites": obj.get("max_invites"),
            "max_subscriptions": obj.get("max_subscriptions"),
            "can_buy_credits": obj.get("can_buy_credits"),
            "needs_credit_card": obj.get("needs_credit_card"),
            "academic": obj.get("academic"),
            "is_beta": obj.get("is_beta"),
            "demo_url": obj.get("demo_url"),
            "doc_url": obj.get("doc_url"),
            "gateway": obj.get("gateway")
        })
        return _obj


