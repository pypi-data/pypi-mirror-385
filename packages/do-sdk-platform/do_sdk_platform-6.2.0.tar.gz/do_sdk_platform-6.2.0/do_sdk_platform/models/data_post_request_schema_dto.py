# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from do_sdk_platform.models.data_post_request_schema_dto_content_type import DataPostRequestSchemaDtoContentType
from do_sdk_platform.models.data_post_request_schema_dto_data_description_inner import DataPostRequestSchemaDtoDataDescriptionInner
from do_sdk_platform.models.data_post_request_schema_dto_type import DataPostRequestSchemaDtoType
from do_sdk_platform.models.data_post_request_schema_dto_unfed_file_service import DataPostRequestSchemaDtoUnfedFileService
from typing import Optional, Set
from typing_extensions import Self

class DataPostRequestSchemaDto(BaseModel):
    """
    DataPostRequestSchemaDto
    """ # noqa: E501
    type: DataPostRequestSchemaDtoType
    unfed_file_service: DataPostRequestSchemaDtoUnfedFileService = Field(alias="unfedFileService")
    content_type: Optional[DataPostRequestSchemaDtoContentType] = Field(default=None, alias="contentType")
    convert_only: StrictBool = Field(alias="convertOnly")
    new_only: StrictBool = Field(alias="newOnly")
    copy: StrictBool
    do_copy: Optional[StrictStr] = Field(default=None, alias="doCopy")
    replace: StrictBool
    data_description: List[DataPostRequestSchemaDtoDataDescriptionInner] = Field(alias="dataDescription")
    __properties: ClassVar[List[str]] = ["type", "unfedFileService", "contentType", "convertOnly", "newOnly", "copy", "doCopy", "replace", "dataDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPostRequestSchemaDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unfed_file_service
        if self.unfed_file_service:
            _dict['unfedFileService'] = self.unfed_file_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_type
        if self.content_type:
            _dict['contentType'] = self.content_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_description (list)
        _items = []
        if self.data_description:
            for _item_data_description in self.data_description:
                if _item_data_description:
                    _items.append(_item_data_description.to_dict())
            _dict['dataDescription'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPostRequestSchemaDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": DataPostRequestSchemaDtoType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "unfedFileService": DataPostRequestSchemaDtoUnfedFileService.from_dict(obj["unfedFileService"]) if obj.get("unfedFileService") is not None else None,
            "contentType": DataPostRequestSchemaDtoContentType.from_dict(obj["contentType"]) if obj.get("contentType") is not None else None,
            "convertOnly": obj.get("convertOnly"),
            "newOnly": obj.get("newOnly"),
            "copy": obj.get("copy"),
            "doCopy": obj.get("doCopy"),
            "replace": obj.get("replace"),
            "dataDescription": [DataPostRequestSchemaDtoDataDescriptionInner.from_dict(_item) for _item in obj["dataDescription"]] if obj.get("dataDescription") is not None else None
        })
        return _obj


