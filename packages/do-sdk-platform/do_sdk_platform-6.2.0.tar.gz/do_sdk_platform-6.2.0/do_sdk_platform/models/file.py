# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class File(BaseModel):
    """
    File
    """ # noqa: E501
    id: StrictStr = Field(description="Deep Origin system ID.")
    uri: StrictStr
    name: StrictStr
    status: StrictStr
    content_length: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(alias="contentLength")
    content_type: Optional[StrictStr] = Field(default=None, alias="contentType")
    date_created: StrictStr = Field(alias="dateCreated")
    date_updated: Optional[StrictStr] = Field(default=None, alias="dateUpdated")
    created_by_user_drn: Optional[StrictStr] = Field(default=None, alias="createdByUserDrn")
    __properties: ClassVar[List[str]] = ["id", "uri", "name", "status", "contentLength", "contentType", "dateCreated", "dateUpdated", "createdByUserDrn"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ready', 'archived']):
            raise ValueError("must be one of enum values ('ready', 'archived')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "contentLength": obj.get("contentLength"),
            "contentType": obj.get("contentType"),
            "dateCreated": obj.get("dateCreated"),
            "dateUpdated": obj.get("dateUpdated"),
            "createdByUserDrn": obj.get("createdByUserDrn")
        })
        return _obj


