# coding: utf-8

"""
    Lance Namespace Specification

    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from lance_namespace_urllib3_client.models.string_fts_query import StringFtsQuery
from lance_namespace_urllib3_client.models.structured_fts_query import StructuredFtsQuery
from typing import Optional, Set
from typing_extensions import Self

class QueryTableRequestFullTextQuery(BaseModel):
    """
    Optional full-text search query. Provide either string_query or structured_query, not both.
    """ # noqa: E501
    string_query: Optional[StringFtsQuery] = None
    structured_query: Optional[StructuredFtsQuery] = None
    __properties: ClassVar[List[str]] = ["string_query", "structured_query"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryTableRequestFullTextQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of string_query
        if self.string_query:
            _dict['string_query'] = self.string_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structured_query
        if self.structured_query:
            _dict['structured_query'] = self.structured_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryTableRequestFullTextQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "string_query": StringFtsQuery.from_dict(obj["string_query"]) if obj.get("string_query") is not None else None,
            "structured_query": StructuredFtsQuery.from_dict(obj["structured_query"]) if obj.get("structured_query") is not None else None
        })
        return _obj


