# coding: utf-8

"""
    Lance Namespace Specification

    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from lance_namespace_urllib3_client.models.match_query import MatchQuery
from lance_namespace_urllib3_client.models.multi_match_query import MultiMatchQuery
from lance_namespace_urllib3_client.models.phrase_query import PhraseQuery
from typing import Optional, Set
from typing_extensions import Self

class FtsQuery(BaseModel):
    """
    Full-text search query. Exactly one query type field must be provided. This structure follows the same pattern as AlterTransactionAction to minimize differences and compatibility issues across codegen in different languages. 
    """ # noqa: E501
    match: Optional[MatchQuery] = None
    phrase: Optional[PhraseQuery] = None
    boost: Optional[BoostQuery] = None
    multi_match: Optional[MultiMatchQuery] = None
    boolean: Optional[BooleanQuery] = None
    __properties: ClassVar[List[str]] = ["match", "phrase", "boost", "multi_match", "boolean"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FtsQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phrase
        if self.phrase:
            _dict['phrase'] = self.phrase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boost
        if self.boost:
            _dict['boost'] = self.boost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_match
        if self.multi_match:
            _dict['multi_match'] = self.multi_match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boolean
        if self.boolean:
            _dict['boolean'] = self.boolean.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FtsQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "match": MatchQuery.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "phrase": PhraseQuery.from_dict(obj["phrase"]) if obj.get("phrase") is not None else None,
            "boost": BoostQuery.from_dict(obj["boost"]) if obj.get("boost") is not None else None,
            "multi_match": MultiMatchQuery.from_dict(obj["multi_match"]) if obj.get("multi_match") is not None else None,
            "boolean": BooleanQuery.from_dict(obj["boolean"]) if obj.get("boolean") is not None else None
        })
        return _obj

from lance_namespace_urllib3_client.models.boolean_query import BooleanQuery
from lance_namespace_urllib3_client.models.boost_query import BoostQuery
# TODO: Rewrite to not use raise_errors
FtsQuery.model_rebuild(raise_errors=False)

