# coding: utf-8

"""
    Lance Namespace Specification

    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MergeInsertIntoTableRequest(BaseModel):
    """
    Request for merging or inserting records into a table, excluding the Arrow IPC stream. 
    """ # noqa: E501
    id: Optional[List[StrictStr]] = None
    on: Optional[StrictStr] = Field(default=None, description="Column name to use for matching rows (required)")
    when_matched_update_all: Optional[StrictBool] = Field(default=False, description="Update all columns when rows match")
    when_matched_update_all_filt: Optional[StrictStr] = Field(default=None, description="The row is updated (similar to UpdateAll) only for rows where the SQL expression evaluates to true")
    when_not_matched_insert_all: Optional[StrictBool] = Field(default=False, description="Insert all columns when rows don't match")
    when_not_matched_by_source_delete: Optional[StrictBool] = Field(default=False, description="Delete all rows from target table that don't match a row in the source table")
    when_not_matched_by_source_delete_filt: Optional[StrictStr] = Field(default=None, description="Delete rows from the target table if there is no match AND the SQL expression evaluates to true")
    __properties: ClassVar[List[str]] = ["id", "on", "when_matched_update_all", "when_matched_update_all_filt", "when_not_matched_insert_all", "when_not_matched_by_source_delete", "when_not_matched_by_source_delete_filt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MergeInsertIntoTableRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MergeInsertIntoTableRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "on": obj.get("on"),
            "when_matched_update_all": obj.get("when_matched_update_all") if obj.get("when_matched_update_all") is not None else False,
            "when_matched_update_all_filt": obj.get("when_matched_update_all_filt"),
            "when_not_matched_insert_all": obj.get("when_not_matched_insert_all") if obj.get("when_not_matched_insert_all") is not None else False,
            "when_not_matched_by_source_delete": obj.get("when_not_matched_by_source_delete") if obj.get("when_not_matched_by_source_delete") is not None else False,
            "when_not_matched_by_source_delete_filt": obj.get("when_not_matched_by_source_delete_filt")
        })
        return _obj


