# coding: utf-8

"""
    Lance Namespace Specification

    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateTableIndexRequest(BaseModel):
    """
    CreateTableIndexRequest
    """ # noqa: E501
    id: Optional[List[StrictStr]] = None
    column: StrictStr = Field(description="Name of the column to create index on")
    index_type: StrictStr = Field(description="Type of index to create")
    metric_type: Optional[StrictStr] = Field(default=None, description="Distance metric type for vector indexes")
    with_position: Optional[StrictBool] = Field(default=None, description="Optional FTS parameter for position tracking")
    base_tokenizer: Optional[StrictStr] = Field(default=None, description="Optional FTS parameter for base tokenizer")
    language: Optional[StrictStr] = Field(default=None, description="Optional FTS parameter for language")
    max_token_length: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Optional FTS parameter for maximum token length")
    lower_case: Optional[StrictBool] = Field(default=None, description="Optional FTS parameter for lowercase conversion")
    stem: Optional[StrictBool] = Field(default=None, description="Optional FTS parameter for stemming")
    remove_stop_words: Optional[StrictBool] = Field(default=None, description="Optional FTS parameter for stop word removal")
    ascii_folding: Optional[StrictBool] = Field(default=None, description="Optional FTS parameter for ASCII folding")
    __properties: ClassVar[List[str]] = ["id", "column", "index_type", "metric_type", "with_position", "base_tokenizer", "language", "max_token_length", "lower_case", "stem", "remove_stop_words", "ascii_folding"]

    @field_validator('index_type')
    def index_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BTREE', 'BITMAP', 'LABEL_LIST', 'IVF_FLAT', 'IVF_PQ', 'IVF_HNSW_SQ', 'FTS']):
            raise ValueError("must be one of enum values ('BTREE', 'BITMAP', 'LABEL_LIST', 'IVF_FLAT', 'IVF_PQ', 'IVF_HNSW_SQ', 'FTS')")
        return value

    @field_validator('metric_type')
    def metric_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['l2', 'cosine', 'dot']):
            raise ValueError("must be one of enum values ('l2', 'cosine', 'dot')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTableIndexRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTableIndexRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "column": obj.get("column"),
            "index_type": obj.get("index_type"),
            "metric_type": obj.get("metric_type"),
            "with_position": obj.get("with_position"),
            "base_tokenizer": obj.get("base_tokenizer"),
            "language": obj.get("language"),
            "max_token_length": obj.get("max_token_length"),
            "lower_case": obj.get("lower_case"),
            "stem": obj.get("stem"),
            "remove_stop_words": obj.get("remove_stop_words"),
            "ascii_folding": obj.get("ascii_folding")
        })
        return _obj


