# coding: utf-8

"""
    Lance Namespace Specification

    This OpenAPI specification is a part of the Lance namespace specification. It contains 2 parts:  The `components/schemas`, `components/responses`, `components/examples`, `tags` sections define the request and response shape for each operation in a Lance Namespace across all implementations. See https://lancedb.github.io/lance-namespace/spec/operations for more details.  The `servers`, `security`, `paths`, `components/parameters` sections are for the  Lance REST Namespace implementation, which defines a complete REST server that can work with Lance datasets. See https://lancedb.github.io/lance-namespace/spec/impls/rest for more details. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from lance_namespace_urllib3_client.models.alter_transaction_set_property import AlterTransactionSetProperty
from lance_namespace_urllib3_client.models.alter_transaction_set_status import AlterTransactionSetStatus
from lance_namespace_urllib3_client.models.alter_transaction_unset_property import AlterTransactionUnsetProperty
from typing import Optional, Set
from typing_extensions import Self

class AlterTransactionAction(BaseModel):
    """
    A single action that could be performed to alter a transaction. This action holds the model definition for all types of specific actions models, this is to minimize difference and compatibility issue across codegen in different languages. When used, only one of the actions should be non-null for each action. If you would like to perform multiple actions, set a list of actions in the AlterTransactionRequest. 
    """ # noqa: E501
    set_status_action: Optional[AlterTransactionSetStatus] = Field(default=None, alias="setStatusAction")
    set_property_action: Optional[AlterTransactionSetProperty] = Field(default=None, alias="setPropertyAction")
    unset_property_action: Optional[AlterTransactionUnsetProperty] = Field(default=None, alias="unsetPropertyAction")
    __properties: ClassVar[List[str]] = ["setStatusAction", "setPropertyAction", "unsetPropertyAction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlterTransactionAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of set_status_action
        if self.set_status_action:
            _dict['setStatusAction'] = self.set_status_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_property_action
        if self.set_property_action:
            _dict['setPropertyAction'] = self.set_property_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unset_property_action
        if self.unset_property_action:
            _dict['unsetPropertyAction'] = self.unset_property_action.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlterTransactionAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "setStatusAction": AlterTransactionSetStatus.from_dict(obj["setStatusAction"]) if obj.get("setStatusAction") is not None else None,
            "setPropertyAction": AlterTransactionSetProperty.from_dict(obj["setPropertyAction"]) if obj.get("setPropertyAction") is not None else None,
            "unsetPropertyAction": AlterTransactionUnsetProperty.from_dict(obj["unsetPropertyAction"]) if obj.get("unsetPropertyAction") is not None else None
        })
        return _obj


