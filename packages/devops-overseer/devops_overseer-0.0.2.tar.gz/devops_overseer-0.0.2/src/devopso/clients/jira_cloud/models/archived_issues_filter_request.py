# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-f79806309100f55b79091ff1d6ea3c2c90b46ad9
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.jira_cloud.models.date_range_filter_request import DateRangeFilterRequest
from typing import Optional, Set
from typing_extensions import Self

class ArchivedIssuesFilterRequest(BaseModel):
    """
    Details of a filter for exporting archived issues.
    """ # noqa: E501
    archived_by: Optional[List[StrictStr]] = Field(default=None, description="List archived issues archived by a specified account ID.", alias="archivedBy")
    archived_date_range: Optional[DateRangeFilterRequest] = Field(default=None, alias="archivedDateRange")
    issue_types: Optional[List[StrictStr]] = Field(default=None, description="List archived issues with a specified issue type ID.", alias="issueTypes")
    projects: Optional[List[StrictStr]] = Field(default=None, description="List archived issues with a specified project key.")
    reporters: Optional[List[StrictStr]] = Field(default=None, description="List archived issues where the reporter is a specified account ID.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["archivedBy", "archivedDateRange", "issueTypes", "projects", "reporters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArchivedIssuesFilterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of archived_date_range
        if self.archived_date_range:
            _dict['archivedDateRange'] = self.archived_date_range.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArchivedIssuesFilterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivedBy": obj.get("archivedBy"),
            "archivedDateRange": DateRangeFilterRequest.from_dict(obj["archivedDateRange"]) if obj.get("archivedDateRange") is not None else None,
            "issueTypes": obj.get("issueTypes"),
            "projects": obj.get("projects"),
            "reporters": obj.get("reporters")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


