# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-f79806309100f55b79091ff1d6ea3c2c90b46ad9
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.jira_cloud.models.project_issue_type_query_context import ProjectIssueTypeQueryContext
from devopso.clients.jira_cloud.models.transition_preview import TransitionPreview
from devopso.clients.jira_cloud.models.workflow_document_version_bean import WorkflowDocumentVersionBean
from devopso.clients.jira_cloud.models.workflow_preview_layout import WorkflowPreviewLayout
from devopso.clients.jira_cloud.models.workflow_preview_scope import WorkflowPreviewScope
from devopso.clients.jira_cloud.models.workflow_preview_status import WorkflowPreviewStatus
from typing import Optional, Set
from typing_extensions import Self

class WorkflowPreview(BaseModel):
    """
    Details of a workflow.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the workflow.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the workflow.")
    looped_transition_container_layout: Optional[WorkflowPreviewLayout] = Field(default=None, alias="loopedTransitionContainerLayout")
    name: Optional[StrictStr] = Field(default=None, description="The name of the workflow.")
    query_context: Optional[List[ProjectIssueTypeQueryContext]] = Field(default=None, description="The project and issue type context for this workflow query.", alias="queryContext")
    scope: Optional[WorkflowPreviewScope] = None
    start_point_layout: Optional[WorkflowPreviewLayout] = Field(default=None, alias="startPointLayout")
    statuses: Optional[List[WorkflowPreviewStatus]] = Field(default=None, description="The statuses referenced in this workflow.")
    transitions: Optional[List[TransitionPreview]] = Field(default=None, description="The transitions of the workflow.")
    version: Optional[WorkflowDocumentVersionBean] = None
    __properties: ClassVar[List[str]] = ["description", "id", "loopedTransitionContainerLayout", "name", "queryContext", "scope", "startPointLayout", "statuses", "transitions", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowPreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of looped_transition_container_layout
        if self.looped_transition_container_layout:
            _dict['loopedTransitionContainerLayout'] = self.looped_transition_container_layout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in query_context (list)
        _items = []
        if self.query_context:
            for _item_query_context in self.query_context:
                if _item_query_context:
                    _items.append(_item_query_context.to_dict())
            _dict['queryContext'] = _items
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_point_layout
        if self.start_point_layout:
            _dict['startPointLayout'] = self.start_point_layout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in statuses (list)
        _items = []
        if self.statuses:
            for _item_statuses in self.statuses:
                if _item_statuses:
                    _items.append(_item_statuses.to_dict())
            _dict['statuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transitions (list)
        _items = []
        if self.transitions:
            for _item_transitions in self.transitions:
                if _item_transitions:
                    _items.append(_item_transitions.to_dict())
            _dict['transitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowPreview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "loopedTransitionContainerLayout": WorkflowPreviewLayout.from_dict(obj["loopedTransitionContainerLayout"]) if obj.get("loopedTransitionContainerLayout") is not None else None,
            "name": obj.get("name"),
            "queryContext": [ProjectIssueTypeQueryContext.from_dict(_item) for _item in obj["queryContext"]] if obj.get("queryContext") is not None else None,
            "scope": WorkflowPreviewScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "startPointLayout": WorkflowPreviewLayout.from_dict(obj["startPointLayout"]) if obj.get("startPointLayout") is not None else None,
            "statuses": [WorkflowPreviewStatus.from_dict(_item) for _item in obj["statuses"]] if obj.get("statuses") is not None else None,
            "transitions": [TransitionPreview.from_dict(_item) for _item in obj["transitions"]] if obj.get("transitions") is not None else None,
            "version": WorkflowDocumentVersionBean.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj


