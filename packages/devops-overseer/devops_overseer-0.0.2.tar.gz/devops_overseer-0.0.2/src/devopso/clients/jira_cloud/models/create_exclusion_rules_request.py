# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-f79806309100f55b79091ff1d6ea3c2c90b46ad9
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateExclusionRulesRequest(BaseModel):
    """
    CreateExclusionRulesRequest
    """ # noqa: E501
    issue_ids: Optional[List[StrictInt]] = Field(default=None, description="The IDs of the issues to exclude from the plan.", alias="issueIds")
    issue_type_ids: Optional[List[StrictInt]] = Field(default=None, description="The IDs of the issue types to exclude from the plan.", alias="issueTypeIds")
    number_of_days_to_show_completed_issues: Optional[StrictInt] = Field(default=None, description="Issues completed this number of days ago will be excluded from the plan.", alias="numberOfDaysToShowCompletedIssues")
    release_ids: Optional[List[StrictInt]] = Field(default=None, description="The IDs of the releases to exclude from the plan.", alias="releaseIds")
    work_status_category_ids: Optional[List[StrictInt]] = Field(default=None, description="The IDs of the work status categories to exclude from the plan.", alias="workStatusCategoryIds")
    work_status_ids: Optional[List[StrictInt]] = Field(default=None, description="The IDs of the work statuses to exclude from the plan.", alias="workStatusIds")
    __properties: ClassVar[List[str]] = ["issueIds", "issueTypeIds", "numberOfDaysToShowCompletedIssues", "releaseIds", "workStatusCategoryIds", "workStatusIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateExclusionRulesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateExclusionRulesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issueIds": obj.get("issueIds"),
            "issueTypeIds": obj.get("issueTypeIds"),
            "numberOfDaysToShowCompletedIssues": obj.get("numberOfDaysToShowCompletedIssues"),
            "releaseIds": obj.get("releaseIds"),
            "workStatusCategoryIds": obj.get("workStatusCategoryIds"),
            "workStatusIds": obj.get("workStatusIds")
        })
        return _obj


