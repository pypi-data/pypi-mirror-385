# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-f79806309100f55b79091ff1d6ea3c2c90b46ad9
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JiraLabelPropertiesInputJackson1(BaseModel):
    """
    JiraLabelPropertiesInputJackson1
    """ # noqa: E501
    color: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["color", "name"]

    @field_validator('color')
    def color_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GREY_LIGHTEST', 'GREY_LIGHTER', 'GREY', 'GREY_DARKER', 'GREY_DARKEST', 'PURPLE_LIGHTEST', 'PURPLE_LIGHTER', 'PURPLE', 'PURPLE_DARKER', 'PURPLE_DARKEST', 'BLUE_LIGHTEST', 'BLUE_LIGHTER', 'BLUE', 'BLUE_DARKER', 'BLUE_DARKEST', 'TEAL_LIGHTEST', 'TEAL_LIGHTER', 'TEAL', 'TEAL_DARKER', 'TEAL_DARKEST', 'GREEN_LIGHTEST', 'GREEN_LIGHTER', 'GREEN', 'GREEN_DARKER', 'GREEN_DARKEST', 'LIME_LIGHTEST', 'LIME_LIGHTER', 'LIME', 'LIME_DARKER', 'LIME_DARKEST', 'YELLOW_LIGHTEST', 'YELLOW_LIGHTER', 'YELLOW', 'YELLOW_DARKER', 'YELLOW_DARKEST', 'ORANGE_LIGHTEST', 'ORANGE_LIGHTER', 'ORANGE', 'ORANGE_DARKER', 'ORANGE_DARKEST', 'RED_LIGHTEST', 'RED_LIGHTER', 'RED', 'RED_DARKER', 'RED_DARKEST', 'MAGENTA_LIGHTEST', 'MAGENTA_LIGHTER', 'MAGENTA', 'MAGENTA_DARKER', 'MAGENTA_DARKEST']):
            raise ValueError("must be one of enum values ('GREY_LIGHTEST', 'GREY_LIGHTER', 'GREY', 'GREY_DARKER', 'GREY_DARKEST', 'PURPLE_LIGHTEST', 'PURPLE_LIGHTER', 'PURPLE', 'PURPLE_DARKER', 'PURPLE_DARKEST', 'BLUE_LIGHTEST', 'BLUE_LIGHTER', 'BLUE', 'BLUE_DARKER', 'BLUE_DARKEST', 'TEAL_LIGHTEST', 'TEAL_LIGHTER', 'TEAL', 'TEAL_DARKER', 'TEAL_DARKEST', 'GREEN_LIGHTEST', 'GREEN_LIGHTER', 'GREEN', 'GREEN_DARKER', 'GREEN_DARKEST', 'LIME_LIGHTEST', 'LIME_LIGHTER', 'LIME', 'LIME_DARKER', 'LIME_DARKEST', 'YELLOW_LIGHTEST', 'YELLOW_LIGHTER', 'YELLOW', 'YELLOW_DARKER', 'YELLOW_DARKEST', 'ORANGE_LIGHTEST', 'ORANGE_LIGHTER', 'ORANGE', 'ORANGE_DARKER', 'ORANGE_DARKEST', 'RED_LIGHTEST', 'RED_LIGHTER', 'RED', 'RED_DARKER', 'RED_DARKEST', 'MAGENTA_LIGHTEST', 'MAGENTA_LIGHTER', 'MAGENTA', 'MAGENTA_DARKER', 'MAGENTA_DARKEST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JiraLabelPropertiesInputJackson1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JiraLabelPropertiesInputJackson1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color": obj.get("color"),
            "name": obj.get("name")
        })
        return _obj


