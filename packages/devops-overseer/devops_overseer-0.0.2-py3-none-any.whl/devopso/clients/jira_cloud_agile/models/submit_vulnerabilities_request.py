# coding: utf-8

"""
    Jira Software Cloud API

    Jira Software Cloud REST API documentation

    The version of the OpenAPI document: 1001.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from devopso.clients.jira_cloud_agile.models.provider_metadata5 import ProviderMetadata5
from devopso.clients.jira_cloud_agile.models.vulnerability_details import VulnerabilityDetails
from typing import Optional, Set
from typing_extensions import Self

class SubmitVulnerabilitiesRequest(BaseModel):
    """
    The payload used to submit (update / insert) Vulnerability data.
    """ # noqa: E501
    operation_type: Optional[StrictStr] = Field(default=None, description="Indicates the operation being performed by the provider system when sending this data. \"NORMAL\" - Data received during real-time, user-triggered actions (e.g. user closed or updated a vulnerability). \"SCAN\" - Data sent through some automated process (e.g. some periodically scheduled repository scan). \"BACKFILL\" - Data received while backfilling existing data (e.g. pushing historical vulnerabilities when re-connect a workspace). Default is \"NORMAL\". \"NORMAL\" traffic has higher priority but tighter rate limits, \"SCAN\" traffic has medium priority and looser limits, \"BACKFILL\" has lower priority and much looser limits ", alias="operationType")
    properties: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="Properties assigned to vulnerability data that can then be used for delete / query operations.  Examples might be an account or user ID that can then be used to clean up data if an account is removed from the Provider system.  Properties are supplied as key/value pairs, and a maximum of 5 properties can be supplied, keys cannot contain ':' or start with '_'. ")
    vulnerabilities: Annotated[List[VulnerabilityDetails], Field(min_length=1, max_length=1000)]
    provider_metadata: Optional[ProviderMetadata5] = Field(default=None, alias="providerMetadata")
    __properties: ClassVar[List[str]] = ["operationType", "properties", "vulnerabilities", "providerMetadata"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'SCAN', 'BACKFILL']):
            raise ValueError("must be one of enum values ('NORMAL', 'SCAN', 'BACKFILL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmitVulnerabilitiesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vulnerabilities (list)
        _items = []
        if self.vulnerabilities:
            for _item_vulnerabilities in self.vulnerabilities:
                if _item_vulnerabilities:
                    _items.append(_item_vulnerabilities.to_dict())
            _dict['vulnerabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of provider_metadata
        if self.provider_metadata:
            _dict['providerMetadata'] = self.provider_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmitVulnerabilitiesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operationType": obj.get("operationType"),
            "properties": obj.get("properties"),
            "vulnerabilities": [VulnerabilityDetails.from_dict(_item) for _item in obj["vulnerabilities"]] if obj.get("vulnerabilities") is not None else None,
            "providerMetadata": ProviderMetadata5.from_dict(obj["providerMetadata"]) if obj.get("providerMetadata") is not None else None
        })
        return _obj


