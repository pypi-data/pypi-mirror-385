# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT-f79806309100f55b79091ff1d6ea3c2c90b46ad9
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from devopso.clients.jira_cloud.models.service_registry_tier import ServiceRegistryTier
from typing import Optional, Set
from typing_extensions import Self

class ServiceRegistry(BaseModel):
    """
    ServiceRegistry
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="service description")
    id: Optional[UUID] = Field(default=None, description="service ID")
    name: Optional[StrictStr] = Field(default=None, description="service name")
    organization_id: Optional[StrictStr] = Field(default=None, description="organization ID", alias="organizationId")
    revision: Optional[StrictStr] = Field(default=None, description="service revision")
    service_tier: Optional[ServiceRegistryTier] = Field(default=None, alias="serviceTier")
    __properties: ClassVar[List[str]] = ["description", "id", "name", "organizationId", "revision", "serviceTier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceRegistry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_tier
        if self.service_tier:
            _dict['serviceTier'] = self.service_tier.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceRegistry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organizationId": obj.get("organizationId"),
            "revision": obj.get("revision"),
            "serviceTier": ServiceRegistryTier.from_dict(obj["serviceTier"]) if obj.get("serviceTier") is not None else None
        })
        return _obj


