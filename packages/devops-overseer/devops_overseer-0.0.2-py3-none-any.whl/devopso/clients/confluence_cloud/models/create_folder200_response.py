# coding: utf-8

"""
    The Confluence Cloud REST API v2

    This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.content_status import ContentStatus
from devopso.clients.confluence_cloud.models.get_attachment_by_id200_response_all_of_links import GetAttachmentById200ResponseAllOfLinks
from devopso.clients.confluence_cloud.models.parent_content_type import ParentContentType
from devopso.clients.confluence_cloud.models.version import Version
from typing import Optional, Set
from typing_extensions import Self

class CreateFolder200Response(BaseModel):
    """
    CreateFolder200Response
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID of the folder.")
    type: Optional[StrictStr] = Field(default=None, description="The content type of the object.")
    status: Optional[ContentStatus] = None
    title: Optional[StrictStr] = Field(default=None, description="Title of the folder.")
    parent_id: Optional[StrictStr] = Field(default=None, description="ID of the parent content, or null if there is no parent content.", alias="parentId")
    parent_type: Optional[ParentContentType] = Field(default=None, alias="parentType")
    position: Optional[StrictInt] = Field(default=None, description="Position of the folder within the given parent page tree.")
    author_id: Optional[StrictStr] = Field(default=None, description="The account ID of the user who created this folder.", alias="authorId")
    owner_id: Optional[StrictStr] = Field(default=None, description="The account ID of the user who owns this folder.", alias="ownerId")
    created_at: Optional[datetime] = Field(default=None, description="Date and time when the folder was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\".", alias="createdAt")
    space_id: Optional[StrictStr] = Field(default=None, description="ID of the space the folder is in.", alias="spaceId")
    version: Optional[Version] = None
    links: Optional[GetAttachmentById200ResponseAllOfLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "title", "parentId", "parentType", "position", "authorId", "ownerId", "createdAt", "spaceId", "version", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFolder200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFolder200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "parentId": obj.get("parentId"),
            "parentType": obj.get("parentType"),
            "position": obj.get("position"),
            "authorId": obj.get("authorId"),
            "ownerId": obj.get("ownerId"),
            "createdAt": obj.get("createdAt"),
            "spaceId": obj.get("spaceId"),
            "version": Version.from_dict(obj["version"]) if obj.get("version") is not None else None,
            "_links": GetAttachmentById200ResponseAllOfLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None
        })
        return _obj


