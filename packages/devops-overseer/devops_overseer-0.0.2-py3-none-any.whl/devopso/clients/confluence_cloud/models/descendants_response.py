# coding: utf-8

"""
    The Confluence Cloud REST API v2

    This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from devopso.clients.confluence_cloud.models.only_archived_and_current_content_status import OnlyArchivedAndCurrentContentStatus
from typing import Optional, Set
from typing_extensions import Self

class DescendantsResponse(BaseModel):
    """
    DescendantsResponse
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID of the descendant.")
    status: Optional[OnlyArchivedAndCurrentContentStatus] = None
    title: Optional[StrictStr] = Field(default=None, description="Title of the descendant.")
    type: Optional[StrictStr] = Field(default=None, description="Hierarchical content type (database/embed/folder/page/whiteboard).")
    parent_id: Optional[StrictStr] = Field(default=None, description="ID of the parent content.", alias="parentId")
    depth: Optional[StrictInt] = Field(default=None, description="Depth of the descendant in the content tree relative to the content specified in the request.")
    child_position: Optional[StrictInt] = Field(default=None, description="Numerical value indicating position of the content relative to its siblings (with the same parentId) within the content tree. If the content is sorted by childPosition, it will reflect the default content ordering within the content tree.", alias="childPosition")
    __properties: ClassVar[List[str]] = ["id", "status", "title", "type", "parentId", "depth", "childPosition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DescendantsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if child_position (nullable) is None
        # and model_fields_set contains the field
        if self.child_position is None and "child_position" in self.model_fields_set:
            _dict['childPosition'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DescendantsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "parentId": obj.get("parentId"),
            "depth": obj.get("depth"),
            "childPosition": obj.get("childPosition")
        })
        return _obj


