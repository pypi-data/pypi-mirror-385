# coding: utf-8

"""
    Infrahub-API

    Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from hyperstack.api.virtual_machine_api import VirtualMachineApi


class TestVirtualMachineApi(unittest.TestCase):
    """VirtualMachineApi unit test stubs"""

    def setUp(self) -> None:
        self.api = VirtualMachineApi()

    def tearDown(self) -> None:
        pass

    def test_attach_firewalls_to_a_virtual_machine(self) -> None:
        """Test case for attach_firewalls_to_a_virtual_machine

        Attach firewalls to a virtual machine
        """
        pass

    def test_create_one_or_more_virtual_machines(self) -> None:
        """Test case for create_one_or_more_virtual_machines

        Create virtual machines
        """
        pass

    def test_delete_security_rule(self) -> None:
        """Test case for delete_security_rule

        Delete firewall rule from virtual machine
        """
        pass

    def test_delete_virtual_machine(self) -> None:
        """Test case for delete_virtual_machine

        Delete virtual machine
        """
        pass

    def test_fetch_virtual_machine_name_availability(self) -> None:
        """Test case for fetch_virtual_machine_name_availability

        Fetch virtual machine name availability
        """
        pass

    def test_get_instance_hard_reboot(self) -> None:
        """Test case for get_instance_hard_reboot

        Hard reboot virtual machine
        """
        pass

    def test_get_instance_hibernate(self) -> None:
        """Test case for get_instance_hibernate

        Hibernate virtual machine
        """
        pass

    def test_get_instance_hibernate_restore(self) -> None:
        """Test case for get_instance_hibernate_restore

        Restore virtual machine from hibernation
        """
        pass

    def test_get_instance_logs(self) -> None:
        """Test case for get_instance_logs

        Get virtual machine logs
        """
        pass

    def test_get_instance_metrics(self) -> None:
        """Test case for get_instance_metrics

        Retrieve virtual machine performance metrics
        """
        pass

    def test_get_instance_start(self) -> None:
        """Test case for get_instance_start

        Start virtual machine
        """
        pass

    def test_get_instance_stop(self) -> None:
        """Test case for get_instance_stop

        Stop virtual machine
        """
        pass

    def test_list_virtual_machines(self) -> None:
        """Test case for list_virtual_machines

        List virtual machines
        """
        pass

    def test_post_instance_logs(self) -> None:
        """Test case for post_instance_logs

        Request virtual machine logs
        """
        pass

    def test_post_instance_resize(self) -> None:
        """Test case for post_instance_resize

        Resize virtual machine
        """
        pass

    def test_post_security_rule(self) -> None:
        """Test case for post_security_rule

        Add firewall rule to virtual machine
        """
        pass

    def test_post_snapshots(self) -> None:
        """Test case for post_snapshots

        Create snapshot from a virtual machine
        """
        pass

    def test_put_labels(self) -> None:
        """Test case for put_labels

        Edit virtual machine labels
        """
        pass

    def test_retrieve_virtual_machine_details(self) -> None:
        """Test case for retrieve_virtual_machine_details

        Retrieve virtual machine details
        """
        pass

    def test_retrieve_virtual_machines_associated_with_a_contract(self) -> None:
        """Test case for retrieve_virtual_machines_associated_with_a_contract

        Retrieve virtual machines associated with a contract
        """
        pass


if __name__ == '__main__':
    unittest.main()
