# coding: utf-8

"""
    Infrahub-API

    Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from hyperstack.models.instances import Instances

class TestInstances(unittest.TestCase):
    """Instances unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Instances:
        """Test Instances
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Instances`
        """
        model = Instances()
        if include_optional:
            return Instances(
                count = 56,
                instances = [
                    hyperstack.models.instance_fields.Instance_Fields(
                        callback_url = '', 
                        contract_id = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        environment = hyperstack.models.instance_environment_fields.Instance_Environment_Fields(
                            features = hyperstack.models.environment_features.Environment_Features(
                                green_status = 'GREEN', 
                                network_optimised = True, ), 
                            id = 56, 
                            name = '', 
                            org_id = 56, 
                            region = '', ), 
                        features = hyperstack.models.features.features(), 
                        fixed_ip = '', 
                        flavor = hyperstack.models.instance_flavor_fields.Instance_Flavor_Fields(
                            cpu = 56, 
                            disk = 56, 
                            ephemeral = 56, 
                            gpu = '', 
                            gpu_count = 56, 
                            id = 56, 
                            labels = [
                                hyperstack.models.flavor_label_fields.FlavorLabelFields(
                                    id = 56, 
                                    label = '', )
                                ], 
                            name = '', 
                            ram = 1.337, ), 
                        floating_ip = '', 
                        floating_ip_status = '', 
                        id = 56, 
                        image = hyperstack.models.instance_image_fields.Instance_Image_Fields(
                            name = '', ), 
                        keypair = hyperstack.models.instance_keypair_fields.Instance_Keypair_Fields(
                            name = '', ), 
                        labels = [
                            ''
                            ], 
                        locked = True, 
                        name = '', 
                        os = '', 
                        port_randomization = True, 
                        port_randomization_status = '', 
                        power_state = '', 
                        requires_public_ip = True, 
                        security_rules = [
                            hyperstack.models.security_rules_fields_for_instance.Security_Rules_Fields_for_Instance(
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                direction = '', 
                                ethertype = '', 
                                id = 56, 
                                port_range_max = 56, 
                                port_range_min = 56, 
                                protocol = '', 
                                remote_ip_prefix = '', 
                                status = '', )
                            ], 
                        status = '', 
                        vm_state = '', 
                        volume_attachments = [
                            hyperstack.models.volume_attachment_fields.Volume_Attachment_Fields(
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                device = '', 
                                id = 56, 
                                protected = True, 
                                status = '', 
                                volume = hyperstack.models.volume_fields_for_instance.Volume_Fields_for_Instance(
                                    bootable = True, 
                                    description = '', 
                                    id = 56, 
                                    name = '', 
                                    size = 56, 
                                    volume_type = '', ), )
                            ], )
                    ],
                message = '',
                page = 56,
                page_size = 56,
                status = True
            )
        else:
            return Instances(
        )
        """

    def testInstances(self):
        """Test Instances"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
