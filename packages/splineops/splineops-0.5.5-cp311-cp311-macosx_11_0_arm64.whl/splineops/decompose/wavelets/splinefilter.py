# splineops/src/splineops/decompose/wavelets/splinefilter.py

"""
splinefilter.py
----------
Holds numeric arrays for various spline filters used in wavelets transformations,
mirroring your Java SplineFilter code for orders 1, 3, 5.
"""

import numpy as np

class SplineFilter:
    """
    Python translation of SplineFilter.java from DeconvolutionLab2.
    For each order in {1,3,5}, we define h[] taps and then 
    compute g[] by flipping signs of odd indices.
    """

    def __init__(self, order:int):
        self.order = order
        self.h = None
        self.g = None
        self._init_filters()  # fill self.h with correct numeric array
        self._compute_g()     # build self.g from self.h

    def _init_filters(self):
        """
        Populate self.h with the numeric coefficients for each order
        exactly as in SplineFilter.java
        """
        if self.order == 1:
            # The code in SplineFilter.java sets a big array (length=47).
            # The last index can be zero or uninitialized if your snippet didn't show it.
            h = np.zeros(47, dtype=float)
            h[0]  = 0.81764640621546
            h[1]  = 0.39729708810751
            h[2]  = -0.06910098743038
            h[3]  = -0.05194534825542
            h[4]  = 0.01697104840045
            h[5]  = 0.00999059568192
            h[6]  = -0.00388326235731
            h[7]  = -0.00220195129177
            h[8]  = 0.00092337104427
            h[9]  = 0.00051163604209
            h[10] = -0.00022429633694
            h[11] = -0.00012268632858
            h[12] = 0.00005535633860
            h[13] = 0.00003001119291
            h[14] = -0.00001381880394
            h[15] = -0.00000744435611
            h[16] = 0.00000347980027
            h[17] = 0.00000186561005
            h[18] = -0.00000088225856
            h[19] = -0.00000047122304
            h[20] = 0.00000022491351
            h[21] = 0.00000011976480
            h[22] = -0.00000005759525
            h[23] = -0.00000003059265
            h[24] = 0.00000001480431
            h[25] = 0.00000000784714
            h[26] = -0.00000000381742
            h[27] = -0.00000000201987
            h[28] = 0.00000000098705
            h[29] = 0.00000000052147
            h[30] = -0.00000000025582
            h[31] = -0.00000000013497
            h[32] = 0.00000000006644
            h[33] = 0.00000000003501
            h[34] = -0.00000000001729
            h[35] = -0.00000000000910
            h[36] = 0.00000000000451
            h[37] = 0.00000000000237
            h[38] = -0.00000000000118
            h[39] = -0.00000000000062
            h[40] = 0.00000000000031
            h[41] = 0.00000000000016
            h[42] = -0.00000000000008
            h[43] = -0.00000000000004
            h[44] = 0.00000000000002
            h[45] = 0.00000000000001
            # h[46] left as 0.0, if needed
            self.h = h

        elif self.order == 3:
            # A long array from your snippet.
            hvals = [
                0.76613005375980, 0.43392263358931, -0.05020172467149, -0.11003701838811,
                0.03208089747022, 0.04206835144072, -0.01717631549201, -0.01798232098097,
                0.00868529481309, 0.00820147720600, -0.00435383945777, -0.00388242526560,
                0.00218671237015, 0.00188213352389, -0.00110373982039, -0.00092719873146,
                0.00055993664336, 0.00046211522752, -0.00028538371867, -0.00023234729403,
                0.00014604186978, 0.00011762760216, -0.00007499842461, -0.00005987934057,
                0.00003863216129, 0.00003062054907, -0.00001995254847, -0.00001571784835,
                0.00001032898225, 0.00000809408097,
                -0.00000535805976, -0.00000417964096, 0.00000278450629, 0.00000216346143,
                -0.00000144942177, -0.00000112219704, 0.00000075557065, 0.00000058316635,
                -0.00000039439119, -0.00000030355006, 0.00000020610937, 0.00000015823692,
                -0.00000010783016, -0.00000008259641, 0.00000005646954, 0.00000004316539,
                -0.00000002959949, -0.00000002258313, 0.00000001552811, 0.00000001182675,
                -0.00000000815248, -0.00000000619931, 0.00000000428324, 0.00000000325227,
                -0.00000000225188, -0.00000000170752, 0.00000000118465, 0.00000000089713,
                -0.00000000062357, -0.00000000047167, 0.00000000032841, 0.00000000024814,
                -0.00000000017305, -0.00000000013062, 0.00000000009123, 0.00000000006879,
                -0.00000000004811, -0.00000000003625, 0.00000000002539, 0.00000000001911,
                -0.00000000001340, -0.00000000001008, 0.00000000000708, 0.00000000000532,
                -0.00000000000374, -0.00000000000281, 0.00000000000198, 0.00000000000148,
                -0.00000000000104, -0.00000000000078, 0.00000000000055, 0.00000000000041,
                -0.00000000000029, -0.00000000000022, 0.00000000000015, 0.00000000000012,
                -0.00000000000008, -0.00000000000006, 0.00000000000004, 0.00000000000003,
                -0.00000000000002, -0.00000000000002, 0.00000000000001, 0.00000000000001,
                -0.00000000000001, -0.00000000000000
            ]
            self.h = np.array(hvals, dtype=float)

        elif self.order == 5:
            # The array from your snippet:
            hvals = [
                0.74729, 0.4425, -0.037023, -0.12928, 0.029477, 0.061317,
                -0.021008, -0.032523, 0.014011, 0.01821,
                -0.0090501, -0.010563, 0.0057688, 0.0062796,
                -0.0036605, -0.0037995, 0.0023214, 0.0023288,
                -0.0014738, -0.0014414, 0.00093747, 0.00089889,
                -0.00059753, -0.00056398, 0.00038165, 0.00035559,
                -0.00024423, -0.00022512, 0.00015658, 0.00014301,
                -0.00010055, -9.1113e-05, 6.4669e-05, 5.8198e-05,
                -4.1649e-05, -3.7256e-05, 2.729e-05, 2.458e-05,
                -2.2593e-05, -3.5791e-05, -1.7098e-05, -2.9619e-06
            ]
            self.h = np.array(hvals, dtype=float)

        else:
            raise ValueError(f"SplineFilter order={self.order} not implemented.")

    def _compute_g(self):
        """
        Follows the Java code's approach:
          if (order > 0)
             g[0] = h[0]
             for k=1..len(h)-1:
                if k is even => g[k] =  h[k]
                else         => g[k] = -h[k]
          else
             g[0] = -h[0]
        """
        if self.h is None:
            raise ValueError("self.h is not set.")
        n = len(self.h)
        self.g = np.zeros(n, dtype=float)

        if self.order > 0:
            self.g[0] = self.h[0]
            for k in range(1, n):
                if (k % 2) == 0:   # even
                    self.g[k] = self.h[k]
                else:             # odd
                    self.g[k] = -self.h[k]
        else:
            self.g[0] = -self.h[0]
        # done
