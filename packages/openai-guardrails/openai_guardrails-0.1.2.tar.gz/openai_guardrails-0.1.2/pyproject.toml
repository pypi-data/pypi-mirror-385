[project]
name = "openai-guardrails"
version = "0.1.2"
description = "OpenAI Guardrails: A framework for building safe and reliable AI systems."
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [{ name = "OpenAI", email = "support@openai.com" }]
dependencies = [
    "openai>=1.75.0",
    "pydantic>=2.11.3",
    "openai-agents>=0.3.3",
    "pip>=25.0.1",
    "presidio-analyzer>=2.2.358",
]
classifiers = [
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
]

[project.urls]
Homepage = "https://openai.github.io/openai-guardrails-python/"
Repository = "https://github.com/openai/openai-guardrails-python"

[project.optional-dependencies]
examples = [
    "pillow>=11.2.1",
    "rich>=14.0.0",
]
benchmark = [
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "pandas>=2.0.0",
]

[dependency-groups]
dev = [
  "mypy>=1.15.0",
  "ruff>=0.11.8",
  "pytest>=8.3.5",
  "pytest-asyncio>=0.26.0",
  "pyright>=1.1.400",
  "types-tqdm>=4.67.0.20250516",
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.14",
  "mkdocstrings[python]>=0.29.1",
  "mkdocs-static-i18n>=1.3.0",
  "pymdown-extensions>=10.0.0",
  "coverage>=7.8.0",
  "hypothesis>=6.131.20",
  "pytest-cov>=6.3.0",
]

[tool.uv.workspace]
members = ["mcp_server"]

[tool.uv.sources]
guardrails = { workspace = true }

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/guardrails"]

[project.scripts]
guardrails = "guardrails.cli:main"
guardrails-evals = "guardrails.evals.guardrail_evals:main"

[tool.ruff]
line-length = 150
target-version = "py311"

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
  "D",  # pydocstyle
]
isort = { combine-as-imports = true, known-first-party = ["guardrails"] }

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**" = ["E501", "D100", "D103", "D104"]
"examples/**" = ["D100", "D103", "D104"]

[tool.ruff.format]
docstring-code-format = true

[tool.coverage.run]
source = ["guardrails"]
omit = [
  "src/guardrails/evals/*",
]

[tool.mypy]
strict = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false
exclude = [
  "examples",
  "src/guardrails/evals",
]

[tool.pyright]
ignore = [
  "examples",
  "src/guardrails/evals",
]
