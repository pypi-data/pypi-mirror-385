[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pynetro"
version = "0.1.5"
description = "Async Python wrapper for Netro API (HTTP-agnostic, HA-friendly)"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [{ name = "kcofoni", email = "kcofoni@gmail.com" }]
keywords = ["netro", "irrigation", "asyncio", "home-assistant", "api"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Home Automation",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11", 
  "Programming Language :: Python :: 3.12",
  "Framework :: AsyncIO",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent"
]
dependencies = []

[project.urls]
Homepage = "https://github.com/kcofoni/pynetro"
Repository = "https://github.com/kcofoni/pynetro"
Issues = "https://github.com/kcofoni/pynetro/issues"
Documentation = "https://github.com/kcofoni/pynetro#readme"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
# Selection of important but balanced quality rules

select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade (code modernization)
    "D",    # pydocstyle (docstrings)
    "TRY",  # tryceratops (error handling)
    "EM",   # flake8-errmsg
    "RUF",  # Ruff-specific rules
]

# Ignore some overly strict rules for now

ignore = [
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D213",  # Multi-line docstring summary should start at the second line (conflicts with D212)
    "TRY003", # Avoid specifying long messages outside the exception class (to be fixed gradually)
    "EM101", # Exception must not use a string literal (to be fixed gradually)
    "PIE790", # Unnecessary ellipsis constant (appropriate in Protocols)
    "E501",  # ignore line length checks (handled by Black)
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Google style for docstrings

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pylint."messages control"]
# Disable some pylint messages; include line-too-long to silence C0301
disable = "unnecessary-ellipsis,line-too-long"  # W2301 / C0301
