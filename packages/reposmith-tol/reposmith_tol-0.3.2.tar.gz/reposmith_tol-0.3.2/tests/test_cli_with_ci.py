import sys
import subprocess
import tempfile
from pathlib import Path
import re
import inspect
import pytest

def _help_text_for(subcmd: str) -> str:
    proc = subprocess.run(
        [sys.executable, "-m", "reposmith.main", subcmd, "--help"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        check=False,
    )
    return proc.stdout or ""

def _is_flag_supported(help_text: str, flag: str) -> bool:
    pat = r"(?:^|\s)" + re.escape(flag) + r"(?:\s|,|$)"
    return re.search(pat, help_text) is not None

class TestCLISmokeWithCI:
    def _run(self, args, cwd: Path):
        return subprocess.run(
            [sys.executable, "-m", "reposmith.main"] + args,
            cwd=cwd,
            check=True,
        )

    def test_ci_adaptive(self):
        """
        إن كان CLI يدعم --with-ci/--ci-python: نولّد workflow عبر CLI.
        إن لم يدعم: نستدعي ensure_github_actions_workflow مباشرةً، مع تكييف الوسائط بحسب التوقيع.
        وإن لم توجد دالة CI نهائياً، نكتفي بأن init لا ينهار.
        """
        with tempfile.TemporaryDirectory() as td:
            proj = Path(td) / "proj"
            proj.mkdir(parents=True, exist_ok=True)

            help_text = _help_text_for("init")
            workflows_dir = proj / ".github" / "workflows"
            ci_file = workflows_dir / "ci.yml"

            if _is_flag_supported(help_text, "--with-ci"):
                args = ["init", "--with-ci"]
                if _is_flag_supported(help_text, "--ci-python"):
                    args += ["--ci-python", "3.13"]
                if _is_flag_supported(help_text, "--entry"):
                    args += ["--entry", "run.py"]
                self._run(args, cwd=proj)
                assert ci_file.exists(), "Expected CI workflow to be generated via CLI."
            else:
                # لا يوجد علم --with-ci؛ نحاول الدالة الداخلية
                try:
                    from reposmith.ci_utils import ensure_github_actions_workflow
                except Exception:
                    # لا ميزات CI؛ فقط تأكد أن init لا ينهار
                    self._run(["init"], cwd=proj)
                    return

                sig = inspect.signature(ensure_github_actions_workflow)
                params = sig.parameters

                # نبني وسائط الاستدعاء بحسب التوقيع
                call_kwargs = {}
                call_args = [proj]

                # إذا الدالة تدعم اسم وسيط لـ python version بأي اسم مألوف
                # جرّب أسماء شائعة: python_version, version, py, python
                for name in ("python_version", "version", "py", "python"):
                    if name in params:
                        call_kwargs[name] = "3.12"
                        break
                else:
                    # لا يوجد وسيط خاص بالنسخة؟ لا مشكلة — نمرّر root فقط.
                    pass

                # إن كان التوقيع positional-only لوسيط النسخة (نادر)
                # نضيفه positional إذا عدد البراميتر > 1 ولا يوجد **kwargs
                if not call_kwargs and len(params) > 1:
                    # إن كان المعامل الثاني ليس لديه default ويبدو positional
                    try:
                        # جرّب تمرير "3.12" كوسيط ثاني
                        ensure_github_actions_workflow(proj, "3.12")
                    except TypeError:
                        # fallback: بدون النسخة
                        ensure_github_actions_workflow(proj)
                    else:
                        # تم بنجاح — تحقّق من الملف وارجع
                        assert ci_file.exists()
                        return
                else:
                    ensure_github_actions_workflow(*call_args, **call_kwargs)

                assert ci_file.exists(), "Expected CI workflow to be generated by ensure_github_actions_workflow()."
