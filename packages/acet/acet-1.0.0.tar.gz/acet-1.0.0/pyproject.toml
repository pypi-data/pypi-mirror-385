[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "acet"
version = "1.0.0"
description = "Agentic Context Toolkit: context delta learning for adaptive LLM agents"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Lionel", email = "lioarce1@gmail.com"}
]
keywords = [
    "llm",
    "agents",
    "context",
    "rag",
    "ai",
    "machine-learning",
    "context-engineering",
    "self-improving"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
dependencies = [
    "pydantic>=2.9",
    "httpx>=0.27",
    "tiktoken>=0.8",
    "numpy>=2.1",
    "sentence-transformers>=3.2",
    "sqlalchemy>=2.0",
    "structlog>=24.0",
    "python-dotenv>=1.0"
]

[project.optional-dependencies]
openai = ["openai>=1.54"]
anthropic = ["anthropic>=0.39"]
litellm = ["litellm>=1.52"]
ollama = ["ollama>=0.4"]
faiss = ["faiss-cpu>=1.9"]
chroma = ["chromadb>=0.5"]
postgres = ["psycopg2-binary>=2.9", "pgvector>=0.3"]
langchain = ["langchain>=0.3", "langchain-community>=0.3"]
llamaindex = ["llama-index>=0.11"]
dev = [
    "pytest>=8.3",
    "pytest-cov>=6.0",
    "pytest-asyncio>=0.24",
    "mypy>=1.13",
    "ruff>=0.7",
    "black>=24.10",
    "sphinx>=8.0",
    "sphinx-rtd-theme>=3.0"
]
all = [
    "openai>=1.54",
    "anthropic>=0.39",
    "litellm>=1.52",
    "ollama>=0.4",
    "faiss-cpu>=1.9",
    "chromadb>=0.5",
    "psycopg2-binary>=2.9",
    "pgvector>=0.3",
    "langchain>=0.3",
    "langchain-community>=0.3",
    "llama-index>=0.11"
]

[project.urls]
Homepage = "https://github.com/lioarce01/agentic-context-toolkit"
Documentation = "https://github.com/lioarce01/agentic-context-toolkit"
Repository = "https://github.com/lioarce01/agentic-context-toolkit"
CHANGELOG = "https://github.com/lioarce01/agentic-context-toolkit/blob/main/CHANGELOG.md"
Issues = "https://github.com/lioarce01/agentic-context-toolkit/issues"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\\.(pyi?)$'

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP"
]
ignore = [
    "E501",
    "B008",
    "UP035",
    "UP045",
    "UP006"
]
per-file-ignores = {"__init__.py" = ["F401"]}

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = [
    "sqlalchemy",
    "sqlalchemy.*",
    "pgvector.*",
    "tiktoken",
    "tiktoken.*",
    "structlog",
    "openai",
    "anthropic",
    "litellm",
    "redis",
    "redis.*",
    "langchain",
    "langchain.*",
    "langchain_core",
    "langchain_core.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "act.storage.postgres"
disallow_subclassing_any = false

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "--cov=act",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers"
]

[tool.coverage.run]
source = ["act"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
precision = 2
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == '__main__':",
    "if TYPE_CHECKING:",
    "@abstractmethod"
]





