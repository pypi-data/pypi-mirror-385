# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
envlist = fetch-libs, lint, static, unit
isolated_build=true

[vars]
src_path = {toxinidir}/src/
lib_path = {toxinidir}/lib/
tst_path = {toxinidir}/tests/
all_path = {[vars]src_path} {[vars]tst_path}
uv_flags = --frozen --isolated

[testenv]
skip_install = True  # skip building the package; none of the tox envs needs it
allowlist_externals = uv
basepython = python3
setenv =
  PYTHONPATH = {[vars]src_path}
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH

[testenv:lock]
description = Update uv.lock with the latest deps
commands =
  uv lock --upgrade --no-cache
  # re-generate the lock file for tester charms at the same time.  This is done to keep the testers in sync.
  # We cannot simply copy the lock file as the tester's vendor the local coordinated-worker package from source.
  uv lock --upgrade --no-cache --directory tests/integration/testers/coordinator/
  uv lock --upgrade --no-cache --directory tests/integration/testers/worker/

[testenv:fetch-libs]
allowlist_externals =
    bash
commands =
    # fetch all charm libs required by the coordinated_workers package
    bash hacks/fetch_charm_libs.sh

[testenv:fetch-libs-testers]
allowlist_externals =
    bash
commands =
    # fetch all charm libs required by the coordinated_workers package, in each tester charm
    bash hacks/fetch_charm_libs.sh tests/integration/testers/coordinator/
    bash hacks/fetch_charm_libs.sh tests/integration/testers/worker/

[testenv:fmt]
description = "Format and lint the code"
commands =
    uv run {[vars]uv_flags} --all-groups ruff format {[vars]all_path}
    uv run {[vars]uv_flags} --all-groups ruff check --fix-only {[vars]all_path}

[testenv:lint]
description = Lint the code
commands =
    uv run {[vars]uv_flags} --all-groups ruff check {[vars]all_path}

[testenv:static]
description = Static code checking
allowlist_externals =
  {[testenv]allowlist_externals}
commands =
    uv run {[vars]uv_flags} --all-groups pyright {[vars]src_path}

[testenv:unit]
description = Run unit tests
setenv =
    PYTHONPATH = {[vars]src_path}:{[vars]lib_path}
commands =
    uv run {[vars]uv_flags} --all-groups coverage run --source={[vars]src_path} -m pytest \
        {[vars]tst_path}unit {posargs}
    uv run {[vars]uv_flags} --all-groups coverage combine
    uv run {[vars]uv_flags} --all-groups coverage report

[testenv:integration]
description = Run integration tests
setenv =
  PYTHONPATH = {toxinidir}
passenv =
  CHARM_PATH_COORDINATOR
  CHARM_PATH_WORKER
commands =
    uv run {[vars]uv_flags} --all-groups pytest --exitfirst {[vars]tst_path}integration {posargs}
