# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.code import Code
from rxfoundry.clients.swifty_api.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionChangeRequest(BaseModel):
    """
    PrescriptionChangeRequest
    """ # noqa: E501
    surescripts_request_code: Optional[StrictStr] = None
    surescripts_request_sub_code: Optional[StrictStr] = None
    request: Optional[StrictStr] = None
    urgency: Optional[StrictStr] = None
    requested_on: Optional[datetime] = None
    requested_by: Optional[User] = None
    approved: Optional[StrictBool] = None
    approved_on: Optional[datetime] = None
    approved_with_changes: Optional[StrictStr] = None
    denied_on: Optional[datetime] = None
    denied_reasons: Optional[List[Code]] = None
    denied_reason: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["surescripts_request_code", "surescripts_request_sub_code", "request", "urgency", "requested_on", "requested_by", "approved", "approved_on", "approved_with_changes", "denied_on", "denied_reasons", "denied_reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionChangeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of requested_by
        if self.requested_by:
            _dict['requested_by'] = self.requested_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in denied_reasons (list)
        _items = []
        if self.denied_reasons:
            for _item_denied_reasons in self.denied_reasons:
                if _item_denied_reasons:
                    _items.append(_item_denied_reasons.to_dict())
            _dict['denied_reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionChangeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "surescripts_request_code": obj.get("surescripts_request_code"),
            "surescripts_request_sub_code": obj.get("surescripts_request_sub_code"),
            "request": obj.get("request"),
            "urgency": obj.get("urgency"),
            "requested_on": obj.get("requested_on"),
            "requested_by": User.from_dict(obj["requested_by"]) if obj.get("requested_by") is not None else None,
            "approved": obj.get("approved"),
            "approved_on": obj.get("approved_on"),
            "approved_with_changes": obj.get("approved_with_changes"),
            "denied_on": obj.get("denied_on"),
            "denied_reasons": [Code.from_dict(_item) for _item in obj["denied_reasons"]] if obj.get("denied_reasons") is not None else None,
            "denied_reason": obj.get("denied_reason")
        })
        return _obj


