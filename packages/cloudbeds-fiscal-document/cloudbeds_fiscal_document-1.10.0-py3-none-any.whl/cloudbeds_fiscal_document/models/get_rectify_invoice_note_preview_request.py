# coding: utf-8

"""
    Fiscal document service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudbeds_fiscal_document.models.creation_method import CreationMethod
from typing import Optional, Set
from typing_extensions import Self

class GetRectifyInvoiceNotePreviewRequest(BaseModel):
    """
    Request to create a rectifying invoice. Only available for Spanish properties.  **Important:** The specified invoice must not have been previously rectified. If it has been rectified, you must rectify the most recent invoice in the rectification chain instead. 
    """ # noqa: E501
    invoice_id: StrictInt = Field(description="ID of the invoice to be rectified.  **Validation:** This invoice must not have been previously rectified according to Spanish fiscal regulations. ", alias="invoiceId")
    reason: Optional[StrictStr] = Field(default=None, description="Reason for rectifying the invoice")
    user_id: Optional[StrictInt] = Field(default=None, description="ID of the user creating the rectification", alias="userId")
    method: CreationMethod
    transaction_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="Include transactions with the specified IDs (deprecated, use `includeTransactionIds` instead)", alias="transactionIds")
    folio_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="Include all transactions from the specified folio IDs", alias="folioIds")
    exclude_transaction_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="Exclude transactions with the specified IDs", alias="excludeTransactionIds")
    include_transaction_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="Include transactions with the specified IDs", alias="includeTransactionIds")
    __properties: ClassVar[List[str]] = ["invoiceId", "reason", "userId", "method", "transactionIds", "folioIds", "excludeTransactionIds", "includeTransactionIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetRectifyInvoiceNotePreviewRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if transaction_ids (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_ids is None and "transaction_ids" in self.model_fields_set:
            _dict['transactionIds'] = None

        # set to None if folio_ids (nullable) is None
        # and model_fields_set contains the field
        if self.folio_ids is None and "folio_ids" in self.model_fields_set:
            _dict['folioIds'] = None

        # set to None if exclude_transaction_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_transaction_ids is None and "exclude_transaction_ids" in self.model_fields_set:
            _dict['excludeTransactionIds'] = None

        # set to None if include_transaction_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_transaction_ids is None and "include_transaction_ids" in self.model_fields_set:
            _dict['includeTransactionIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetRectifyInvoiceNotePreviewRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceId": obj.get("invoiceId"),
            "reason": obj.get("reason"),
            "userId": obj.get("userId"),
            "method": obj.get("method"),
            "transactionIds": obj.get("transactionIds"),
            "folioIds": obj.get("folioIds"),
            "excludeTransactionIds": obj.get("excludeTransactionIds"),
            "includeTransactionIds": obj.get("includeTransactionIds")
        })
        return _obj


