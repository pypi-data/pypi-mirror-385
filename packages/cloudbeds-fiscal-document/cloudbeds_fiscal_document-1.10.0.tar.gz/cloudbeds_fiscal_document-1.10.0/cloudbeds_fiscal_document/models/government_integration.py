# coding: utf-8

"""
    Fiscal document service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cloudbeds_fiscal_document.models.fiscal_document_status import FiscalDocumentStatus
from cloudbeds_fiscal_document.models.government_integration_qr import GovernmentIntegrationQr
from typing import Optional, Set
from typing_extensions import Self

class GovernmentIntegration(BaseModel):
    """
    GovernmentIntegration
    """ # noqa: E501
    number: Optional[StrictStr] = None
    series: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    qr: Optional[GovernmentIntegrationQr] = None
    url: Optional[StrictStr] = None
    official_id: Optional[StrictStr] = Field(default=None, alias="officialId")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    rectifying_invoice_type: Optional[StrictStr] = Field(default=None, alias="rectifyingInvoiceType")
    cancellation_failed_fallback_status: Optional[FiscalDocumentStatus] = Field(default=None, alias="cancellationFailedFallbackStatus")
    generate_receipt: Optional[StrictBool] = Field(default=None, description="Indicates if the receipt was generated/sent to fiscal printer", alias="generateReceipt")
    __properties: ClassVar[List[str]] = ["number", "series", "status", "qr", "url", "officialId", "externalId", "rectifyingInvoiceType", "cancellationFailedFallbackStatus", "generateReceipt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GovernmentIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of qr
        if self.qr:
            _dict['qr'] = self.qr.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GovernmentIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "series": obj.get("series"),
            "status": obj.get("status"),
            "qr": GovernmentIntegrationQr.from_dict(obj["qr"]) if obj.get("qr") is not None else None,
            "url": obj.get("url"),
            "officialId": obj.get("officialId"),
            "externalId": obj.get("externalId"),
            "rectifyingInvoiceType": obj.get("rectifyingInvoiceType"),
            "cancellationFailedFallbackStatus": obj.get("cancellationFailedFallbackStatus"),
            "generateReceipt": obj.get("generateReceipt")
        })
        return _obj


