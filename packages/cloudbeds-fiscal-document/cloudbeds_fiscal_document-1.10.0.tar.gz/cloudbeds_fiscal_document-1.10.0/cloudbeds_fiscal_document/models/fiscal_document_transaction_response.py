# coding: utf-8

"""
    Fiscal document service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_fiscal_document.models.fiscal_document_transaction_allocation import FiscalDocumentTransactionAllocation
from cloudbeds_fiscal_document.models.source_kind import SourceKind
from typing import Optional, Set
from typing_extensions import Self

class FiscalDocumentTransactionResponse(BaseModel):
    """
    FiscalDocumentTransactionResponse
    """ # noqa: E501
    id: Optional[StrictStr] = None
    property_id: Optional[StrictStr] = Field(default=None, alias="propertyId")
    source_id: Optional[StrictStr] = Field(default=None, alias="sourceId")
    source_kind: Optional[SourceKind] = Field(default=None, alias="sourceKind")
    transaction_date: Optional[datetime] = Field(default=None, alias="transactionDate")
    guest_name: Optional[StrictStr] = Field(default=None, alias="guestName")
    description: Optional[StrictStr] = None
    internal_code: Optional[StrictStr] = Field(default=None, alias="internalCode")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    folio_id: Optional[StrictStr] = Field(default=None, alias="folioId")
    status: Optional[StrictStr] = Field(default=None, description="Status of the transaction - PENDING for unpaid transactions, POSTED for paid transactions")
    paid_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="paidAmount")
    allocations: Optional[List[FiscalDocumentTransactionAllocation]] = None
    __properties: ClassVar[List[str]] = ["id", "propertyId", "sourceId", "sourceKind", "transactionDate", "guestName", "description", "internalCode", "amount", "folioId", "status", "paidAmount", "allocations"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'POSTED']):
            raise ValueError("must be one of enum values ('PENDING', 'POSTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FiscalDocumentTransactionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allocations (list)
        _items = []
        if self.allocations:
            for _item_allocations in self.allocations:
                if _item_allocations:
                    _items.append(_item_allocations.to_dict())
            _dict['allocations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FiscalDocumentTransactionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "propertyId": obj.get("propertyId"),
            "sourceId": obj.get("sourceId"),
            "sourceKind": obj.get("sourceKind"),
            "transactionDate": obj.get("transactionDate"),
            "guestName": obj.get("guestName"),
            "description": obj.get("description"),
            "internalCode": obj.get("internalCode"),
            "amount": obj.get("amount"),
            "folioId": obj.get("folioId"),
            "status": obj.get("status"),
            "paidAmount": obj.get("paidAmount"),
            "allocations": [FiscalDocumentTransactionAllocation.from_dict(_item) for _item in obj["allocations"]] if obj.get("allocations") is not None else None
        })
        return _obj


