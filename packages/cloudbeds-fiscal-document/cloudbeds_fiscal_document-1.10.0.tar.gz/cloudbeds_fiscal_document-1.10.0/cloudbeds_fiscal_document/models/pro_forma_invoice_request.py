# coding: utf-8

"""
    Fiscal document service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudbeds_fiscal_document.models.recipient_request import RecipientRequest
from cloudbeds_fiscal_document.models.source_kind import SourceKind
from typing import Optional, Set
from typing_extensions import Self

class ProFormaInvoiceRequest(BaseModel):
    """
    ProFormaInvoiceRequest
    """ # noqa: E501
    transaction_ids: List[Annotated[int, Field(strict=True, ge=1)]] = Field(description="List of pending transaction IDs to include in the pro forma invoice (deprecated, use `includeTransactionIds` instead)", alias="transactionIds")
    payment_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="List of payment IDs associated with the pending transactions", alias="paymentIds")
    source_id: Annotated[int, Field(strict=True, ge=1)] = Field(alias="sourceId")
    sequence_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="sequenceId")
    source_kind: SourceKind = Field(alias="sourceKind")
    user_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="userId")
    recipient: RecipientRequest
    invoice_date: Optional[date] = Field(default=None, description="Date for the pro forma invoice (defaults to current date if not provided)", alias="invoiceDate")
    folio_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="Include all transactions from the specified folio IDs", alias="folioIds")
    exclude_transaction_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="Exclude transactions with the specified IDs", alias="excludeTransactionIds")
    include_transaction_ids: Optional[List[Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="Include transactions with the specified IDs", alias="includeTransactionIds")
    __properties: ClassVar[List[str]] = ["transactionIds", "paymentIds", "sourceId", "sequenceId", "sourceKind", "userId", "recipient", "invoiceDate", "folioIds", "excludeTransactionIds", "includeTransactionIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProFormaInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # set to None if sequence_id (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_id is None and "sequence_id" in self.model_fields_set:
            _dict['sequenceId'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProFormaInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionIds": obj.get("transactionIds"),
            "paymentIds": obj.get("paymentIds"),
            "sourceId": obj.get("sourceId"),
            "sequenceId": obj.get("sequenceId"),
            "sourceKind": obj.get("sourceKind"),
            "userId": obj.get("userId"),
            "recipient": RecipientRequest.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "invoiceDate": obj.get("invoiceDate"),
            "folioIds": obj.get("folioIds"),
            "excludeTransactionIds": obj.get("excludeTransactionIds"),
            "includeTransactionIds": obj.get("includeTransactionIds")
        })
        return _obj


