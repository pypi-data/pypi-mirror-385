# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.provider_resource import ProviderResource
from ..types.provider_resource_paginated_response import ProviderResourcePaginatedResponse
from .raw_client import AsyncRawProviderResourcesClient, RawProviderResourcesClient
from .types.provider_resource_controller_get_provider_resources_paginated_request_sort_order import (
    ProviderResourceControllerGetProviderResourcesPaginatedRequestSortOrder,
)


class ProviderResourcesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProviderResourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProviderResourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProviderResourcesClient
        """
        return self._raw_client

    def provider_resource_controller_get_provider_resources_paginated(
        self,
        *,
        id: typing.Optional[str] = None,
        resource_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[ProviderResourceControllerGetProviderResourcesPaginatedRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProviderResourcePaginatedResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        resource_id : typing.Optional[str]

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[ProviderResourceControllerGetProviderResourcesPaginatedRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResourcePaginatedResponse
            List of provider resources

        Examples
        --------
        import datetime

        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.provider_resources.provider_resource_controller_get_provider_resources_paginated(
            id="id",
            resource_id="resourceId",
            page=1.1,
            sort_order="ASC",
            limit=1.1,
            created_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.provider_resource_controller_get_provider_resources_paginated(
            id=id,
            resource_id=resource_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    def provider_resource_controller_create_provider_resource(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource
            Successfully created provider resource

        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.provider_resources.provider_resource_controller_create_provider_resource()
        """
        _response = self._raw_client.provider_resource_controller_create_provider_resource(
            request_options=request_options
        )
        return _response.data

    def provider_resource_controller_get_provider_resource(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource
            Successfully retrieved provider resource

        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.provider_resources.provider_resource_controller_get_provider_resource(
            id="id",
        )
        """
        _response = self._raw_client.provider_resource_controller_get_provider_resource(
            id, request_options=request_options
        )
        return _response.data

    def provider_resource_controller_delete_provider_resource(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.provider_resources.provider_resource_controller_delete_provider_resource(
            id="id",
        )
        """
        _response = self._raw_client.provider_resource_controller_delete_provider_resource(
            id, request_options=request_options
        )
        return _response.data

    def provider_resource_controller_update_provider_resource(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.provider_resources.provider_resource_controller_update_provider_resource(
            id="id",
        )
        """
        _response = self._raw_client.provider_resource_controller_update_provider_resource(
            id, request_options=request_options
        )
        return _response.data


class AsyncProviderResourcesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProviderResourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProviderResourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProviderResourcesClient
        """
        return self._raw_client

    async def provider_resource_controller_get_provider_resources_paginated(
        self,
        *,
        id: typing.Optional[str] = None,
        resource_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[ProviderResourceControllerGetProviderResourcesPaginatedRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProviderResourcePaginatedResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        resource_id : typing.Optional[str]

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[ProviderResourceControllerGetProviderResourcesPaginatedRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResourcePaginatedResponse
            List of provider resources

        Examples
        --------
        import asyncio
        import datetime

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.provider_resources.provider_resource_controller_get_provider_resources_paginated(
                id="id",
                resource_id="resourceId",
                page=1.1,
                sort_order="ASC",
                limit=1.1,
                created_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.provider_resource_controller_get_provider_resources_paginated(
            id=id,
            resource_id=resource_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    async def provider_resource_controller_create_provider_resource(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource
            Successfully created provider resource

        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.provider_resources.provider_resource_controller_create_provider_resource()


        asyncio.run(main())
        """
        _response = await self._raw_client.provider_resource_controller_create_provider_resource(
            request_options=request_options
        )
        return _response.data

    async def provider_resource_controller_get_provider_resource(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource
            Successfully retrieved provider resource

        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.provider_resources.provider_resource_controller_get_provider_resource(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.provider_resource_controller_get_provider_resource(
            id, request_options=request_options
        )
        return _response.data

    async def provider_resource_controller_delete_provider_resource(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.provider_resources.provider_resource_controller_delete_provider_resource(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.provider_resource_controller_delete_provider_resource(
            id, request_options=request_options
        )
        return _response.data

    async def provider_resource_controller_update_provider_resource(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProviderResource:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProviderResource


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.provider_resources.provider_resource_controller_update_provider_resource(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.provider_resource_controller_update_provider_resource(
            id, request_options=request_options
        )
        return _response.data
