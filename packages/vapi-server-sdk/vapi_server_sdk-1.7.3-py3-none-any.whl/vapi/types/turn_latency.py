# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class TurnLatency(UncheckedBaseModel):
    model_latency: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="modelLatency")] = (
        pydantic.Field(default=None)
    )
    """
    This is the model latency for the first token.
    """

    voice_latency: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="voiceLatency")] = (
        pydantic.Field(default=None)
    )
    """
    This is the voice latency from the model output.
    """

    transcriber_latency: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="transcriberLatency")
    ] = pydantic.Field(default=None)
    """
    This is the transcriber latency from the user speech.
    """

    endpointing_latency: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="endpointingLatency")
    ] = pydantic.Field(default=None)
    """
    This is the endpointing latency.
    """

    turn_latency: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="turnLatency")] = (
        pydantic.Field(default=None)
    )
    """
    This is the latency for the whole turn.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
