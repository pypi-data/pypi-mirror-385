# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .structured_data_multi_plan import StructuredDataMultiPlan
from .structured_data_plan import StructuredDataPlan
from .success_evaluation_plan import SuccessEvaluationPlan
from .summary_plan import SummaryPlan


class AnalysisPlan(UncheckedBaseModel):
    min_messages_threshold: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="minMessagesThreshold")
    ] = pydantic.Field(default=None)
    """
    The minimum number of messages required to run the analysis plan.
    If the number of messages is less than this, analysis will be skipped.
    @default 2
    """

    summary_plan: typing_extensions.Annotated[typing.Optional[SummaryPlan], FieldMetadata(alias="summaryPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for generating the summary of the call. This outputs to `call.analysis.summary`.
    """

    structured_data_plan: typing_extensions.Annotated[
        typing.Optional[StructuredDataPlan], FieldMetadata(alias="structuredDataPlan")
    ] = pydantic.Field(default=None)
    """
    This is the plan for generating the structured data from the call. This outputs to `call.analysis.structuredData`.
    """

    structured_data_multi_plan: typing_extensions.Annotated[
        typing.Optional[typing.List[StructuredDataMultiPlan]], FieldMetadata(alias="structuredDataMultiPlan")
    ] = pydantic.Field(default=None)
    """
    This is an array of structured data plan catalogs. Each entry includes a `key` and a `plan` for generating the structured data from the call. This outputs to `call.analysis.structuredDataMulti`.
    """

    success_evaluation_plan: typing_extensions.Annotated[
        typing.Optional[SuccessEvaluationPlan], FieldMetadata(alias="successEvaluationPlan")
    ] = pydantic.Field(default=None)
    """
    This is the plan for generating the success evaluation of the call. This outputs to `call.analysis.successEvaluation`.
    """

    outcome_ids: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="outcomeIds")] = (
        pydantic.Field(default=None)
    )
    """
    This is an array of outcome UUIDs to be calculated during analysis.
    The outcomes will be calculated and stored in `call.analysis.outcomes`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
