# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .analysis import Analysis
from .artifact import Artifact
from .artifact_plan import ArtifactPlan
from .assistant_overrides import AssistantOverrides
from .call_costs_item import CallCostsItem
from .call_destination import CallDestination
from .call_ended_reason import CallEndedReason
from .call_messages_item import CallMessagesItem
from .call_phone_call_provider import CallPhoneCallProvider
from .call_phone_call_transport import CallPhoneCallTransport
from .call_status import CallStatus
from .call_type import CallType
from .compliance import Compliance
from .cost_breakdown import CostBreakdown
from .create_customer_dto import CreateCustomerDto
from .create_squad_dto import CreateSquadDto
from .create_workflow_dto import CreateWorkflowDto
from .import_twilio_phone_number_dto import ImportTwilioPhoneNumberDto
from .monitor import Monitor
from .schedule_plan import SchedulePlan
from .workflow_overrides import WorkflowOverrides


class Call(UncheckedBaseModel):
    type: typing.Optional[CallType] = pydantic.Field(default=None)
    """
    This is the type of call.
    """

    costs: typing.Optional[typing.List[CallCostsItem]] = pydantic.Field(default=None)
    """
    These are the costs of individual components of the call in USD.
    """

    messages: typing.Optional[typing.List[CallMessagesItem]] = None
    phone_call_provider: typing_extensions.Annotated[
        typing.Optional[CallPhoneCallProvider], FieldMetadata(alias="phoneCallProvider")
    ] = pydantic.Field(default=None)
    """
    This is the provider of the call.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    phone_call_transport: typing_extensions.Annotated[
        typing.Optional[CallPhoneCallTransport], FieldMetadata(alias="phoneCallTransport")
    ] = pydantic.Field(default=None)
    """
    This is the transport of the phone call.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    status: typing.Optional[CallStatus] = pydantic.Field(default=None)
    """
    This is the status of the call.
    """

    ended_reason: typing_extensions.Annotated[typing.Optional[CallEndedReason], FieldMetadata(alias="endedReason")] = (
        pydantic.Field(default=None)
    )
    """
    This is the explanation for how the call ended.
    """

    destination: typing.Optional[CallDestination] = pydantic.Field(default=None)
    """
    This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.
    """

    id: str = pydantic.Field()
    """
    This is the unique identifier for the call.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the org that this call belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the call was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the call was last updated.
    """

    started_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="startedAt")] = (
        pydantic.Field(default=None)
    )
    """
    This is the ISO 8601 date-time string of when the call was started.
    """

    ended_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="endedAt")] = (
        pydantic.Field(default=None)
    )
    """
    This is the ISO 8601 date-time string of when the call was ended.
    """

    cost: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost of the call in USD.
    """

    cost_breakdown: typing_extensions.Annotated[
        typing.Optional[CostBreakdown], FieldMetadata(alias="costBreakdown")
    ] = pydantic.Field(default=None)
    """
    This is the cost of the call in USD.
    """

    artifact_plan: typing_extensions.Annotated[typing.Optional[ArtifactPlan], FieldMetadata(alias="artifactPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.
    """

    analysis: typing.Optional[Analysis] = pydantic.Field(default=None)
    """
    This is the analysis of the call. Configure in `assistant.analysisPlan`.
    """

    monitor: typing.Optional[Monitor] = pydantic.Field(default=None)
    """
    This is to real-time monitor the call. Configure in `assistant.monitorPlan`.
    """

    artifact: typing.Optional[Artifact] = pydantic.Field(default=None)
    """
    These are the artifacts created from the call. Configure in `assistant.artifactPlan`.
    """

    compliance: typing.Optional[Compliance] = pydantic.Field(default=None)
    """
    This is the compliance of the call. Configure in `assistant.compliancePlan`.
    """

    phone_call_provider_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="phoneCallProviderId")
    ] = pydantic.Field(default=None)
    """
    The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage. callControlId in Telnyx.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    campaign_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="campaignId")] = pydantic.Field(
        default=None
    )
    """
    This is the campaign ID that the call belongs to.
    """

    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the assistant ID that will be used for the call. To use a transient assistant, use `assistant` instead.
    
    To start a call with:
    - Assistant, use `assistantId` or `assistant`
    - Squad, use `squadId` or `squad`
    - Workflow, use `workflowId` or `workflow`
    """

    assistant: typing.Optional["CreateAssistantDto"] = pydantic.Field(default=None)
    """
    This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.
    
    To start a call with:
    - Assistant, use `assistant`
    - Squad, use `squad`
    - Workflow, use `workflow`
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the overrides for the `assistant` or `assistantId`'s settings and template variables.
    """

    squad_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="squadId")] = pydantic.Field(
        default=None
    )
    """
    This is the squad that will be used for the call. To use a transient squad, use `squad` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    squad: typing.Optional[CreateSquadDto] = pydantic.Field(default=None)
    """
    This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workflowId")] = pydantic.Field(
        default=None
    )
    """
    This is the workflow that will be used for the call. To use a transient workflow, use `workflow` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow: typing.Optional[CreateWorkflowDto] = pydantic.Field(default=None)
    """
    This is a workflow that will be used for the call. To use an existing workflow, use `workflowId` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow_overrides: typing_extensions.Annotated[
        typing.Optional[WorkflowOverrides], FieldMetadata(alias="workflowOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the overrides for the `workflow` or `workflowId`'s settings and template variables.
    """

    phone_number_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="phoneNumberId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    phone_number: typing_extensions.Annotated[
        typing.Optional[ImportTwilioPhoneNumberDto], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    customer_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="customerId")] = pydantic.Field(
        default=None
    )
    """
    This is the customer that will be called. To call a transient customer , use `customer` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that will be called. To call an existing customer, use `customerId` instead.
    
    Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the call. This is just for your own reference.
    """

    schedule_plan: typing_extensions.Annotated[typing.Optional[SchedulePlan], FieldMetadata(alias="schedulePlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the schedule plan of the call.
    """

    transport: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    This is the transport of the call.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .anthropic_model import AnthropicModel  # noqa: E402, F401, I001
from .anyscale_model import AnyscaleModel  # noqa: E402, F401, I001
from .call_hook_assistant_speech_interrupted import CallHookAssistantSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_call_ending import CallHookCallEnding  # noqa: E402, F401, I001
from .call_hook_customer_speech_interrupted import CallHookCustomerSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_customer_speech_timeout import CallHookCustomerSpeechTimeout  # noqa: E402, F401, I001
from .cerebras_model import CerebrasModel  # noqa: E402, F401, I001
from .create_assistant_dto import CreateAssistantDto  # noqa: E402, F401, I001
from .create_handoff_tool_dto import CreateHandoffToolDto  # noqa: E402, F401, I001
from .custom_llm_model import CustomLlmModel  # noqa: E402, F401, I001
from .deep_infra_model import DeepInfraModel  # noqa: E402, F401, I001
from .deep_seek_model import DeepSeekModel  # noqa: E402, F401, I001
from .google_model import GoogleModel  # noqa: E402, F401, I001
from .groq_model import GroqModel  # noqa: E402, F401, I001
from .group_condition import GroupCondition  # noqa: E402, F401, I001
from .handoff_destination_assistant import HandoffDestinationAssistant  # noqa: E402, F401, I001
from .inflection_ai_model import InflectionAiModel  # noqa: E402, F401, I001
from .open_ai_model import OpenAiModel  # noqa: E402, F401, I001
from .open_router_model import OpenRouterModel  # noqa: E402, F401, I001
from .perplexity_ai_model import PerplexityAiModel  # noqa: E402, F401, I001
from .together_ai_model import TogetherAiModel  # noqa: E402, F401, I001
from .tool_call_hook_action import ToolCallHookAction  # noqa: E402, F401, I001
from .xai_model import XaiModel  # noqa: E402, F401, I001

update_forward_refs(Call)
