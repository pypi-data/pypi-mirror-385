# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .tool_call import ToolCall


class AssistantMessage(UncheckedBaseModel):
    role: typing.Literal["assistant"] = pydantic.Field(default="assistant")
    """
    This is the role of the message author
    """

    content: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the content of the assistant message
    """

    refusal: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the refusal message generated by the model
    """

    tool_calls: typing.Optional[typing.List[ToolCall]] = pydantic.Field(default=None)
    """
    This is the tool calls generated by the model
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is an optional name for the participant
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    This is an optional metadata for the message
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
