# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class ToolMessage(UncheckedBaseModel):
    role: typing.Literal["tool"] = pydantic.Field(default="tool")
    """
    This is the role of the message author
    """

    content: str = pydantic.Field()
    """
    This is the content of the tool message
    """

    tool_call_id: str = pydantic.Field()
    """
    This is the ID of the tool call this message is responding to
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is an optional name for the participant
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    This is an optional metadata for the message
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
