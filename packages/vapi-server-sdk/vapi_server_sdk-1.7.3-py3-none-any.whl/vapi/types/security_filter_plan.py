# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .security_filter_base import SecurityFilterBase
from .security_filter_plan_mode import SecurityFilterPlanMode


class SecurityFilterPlan(UncheckedBaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the security filter is enabled.
    @default false
    """

    filters: typing.Optional[typing.List[SecurityFilterBase]] = pydantic.Field(default=None)
    """
    Array of security filter types to apply.
    If array is not empty, only those security filters are run.
    """

    mode: typing.Optional[SecurityFilterPlanMode] = pydantic.Field(default=None)
    """
    Mode of operation when a security threat is detected.
    - 'sanitize': Remove or replace the threatening content
    - 'reject': Replace the entire transcript with replacement text
    - 'replace': Replace threatening patterns with replacement text
    @default 'sanitize'
    """

    replacement_text: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="replacementText")] = (
        pydantic.Field(default=None)
    )
    """
    Text to use when replacing filtered content.
    @default '[FILTERED]'
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
