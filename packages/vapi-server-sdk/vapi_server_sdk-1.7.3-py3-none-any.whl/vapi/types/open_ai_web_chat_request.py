# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chat_assistant_overrides import ChatAssistantOverrides
from .create_web_customer_dto import CreateWebCustomerDto
from .open_ai_web_chat_request_input import OpenAiWebChatRequestInput


class OpenAiWebChatRequest(UncheckedBaseModel):
    assistant_id: typing_extensions.Annotated[str, FieldMetadata(alias="assistantId")] = pydantic.Field()
    """
    The assistant ID to use for this chat
    """

    session_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="sessionId")] = pydantic.Field(
        default=None
    )
    """
    This is the ID of the session that will be used for the chat.
    If provided, the conversation will continue from the previous state.
    If not provided or expired, a new session will be created.
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[ChatAssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the variable values that will be used to replace template variables in the assistant messages.
    Only variable substitution is supported in web chat - other assistant properties cannot be overridden.
    """

    customer: typing.Optional[CreateWebCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer information for the chat.
    Used to automatically manage sessions for repeat customers.
    """

    input: OpenAiWebChatRequestInput = pydantic.Field()
    """
    This is the input text for the chat.
    Can be a string or an array of chat messages.
    """

    stream: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to stream the response or not.
    """

    session_end: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="sessionEnd")] = pydantic.Field(
        default=None
    )
    """
    This is a flag to indicate end of session. When true, the session will be marked as completed and the chat will be ended.
    Used to end session to send End-of-session report to the customer.
    When flag is set to true, any messages sent will not be processed and session will directly be marked as completed.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
