# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .turn_latency import TurnLatency


class PerformanceMetrics(UncheckedBaseModel):
    turn_latencies: typing_extensions.Annotated[
        typing.Optional[typing.List[TurnLatency]], FieldMetadata(alias="turnLatencies")
    ] = pydantic.Field(default=None)
    """
    These are the individual latencies for each turn.
    """

    model_latency_average: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="modelLatencyAverage")
    ] = pydantic.Field(default=None)
    """
    This is the average latency for the model to output the first token.
    """

    voice_latency_average: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="voiceLatencyAverage")
    ] = pydantic.Field(default=None)
    """
    This is the average latency for the text to speech.
    """

    transcriber_latency_average: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="transcriberLatencyAverage")
    ] = pydantic.Field(default=None)
    """
    This is the average latency for the transcriber.
    """

    endpointing_latency_average: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="endpointingLatencyAverage")
    ] = pydantic.Field(default=None)
    """
    This is the average latency for the endpointing.
    """

    turn_latency_average: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="turnLatencyAverage")
    ] = pydantic.Field(default=None)
    """
    This is the average latency for complete turns.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
