# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .eval_messages_item import EvalMessagesItem


class Eval(UncheckedBaseModel):
    messages: typing.List[EvalMessagesItem] = pydantic.Field()
    """
    This is the mock conversation that will be used to evaluate the flow of the conversation.
    
    Mock Messages are used to simulate the flow of the conversation
    
    Evaluation Messages are used as checkpoints in the flow where the model's response to previous conversation needs to be evaluated to check the content and tool calls
    """

    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the eval.
    It helps identify what the eval is checking for.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the description of the eval.
    This helps describe the eval and its purpose in detail. It will not be used to evaluate the flow of the conversation.
    """

    type: typing.Literal["chat.mockConversation"] = pydantic.Field(default="chat.mockConversation")
    """
    This is the type of the eval.
    Currently it is fixed to `chat.mockConversation`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
