# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .update_assistant_dto_background_sound import UpdateAssistantDtoBackgroundSound
    from .update_assistant_dto_background_sound_zero import UpdateAssistantDtoBackgroundSoundZero
    from .update_assistant_dto_client_messages_item import UpdateAssistantDtoClientMessagesItem
    from .update_assistant_dto_credentials_item import UpdateAssistantDtoCredentialsItem
    from .update_assistant_dto_first_message_mode import UpdateAssistantDtoFirstMessageMode
    from .update_assistant_dto_hooks_item import UpdateAssistantDtoHooksItem
    from .update_assistant_dto_model import UpdateAssistantDtoModel
    from .update_assistant_dto_server_messages_item import UpdateAssistantDtoServerMessagesItem
    from .update_assistant_dto_transcriber import UpdateAssistantDtoTranscriber
    from .update_assistant_dto_voice import UpdateAssistantDtoVoice
    from .update_assistant_dto_voicemail_detection import UpdateAssistantDtoVoicemailDetection
_dynamic_imports: typing.Dict[str, str] = {
    "UpdateAssistantDtoBackgroundSound": ".update_assistant_dto_background_sound",
    "UpdateAssistantDtoBackgroundSoundZero": ".update_assistant_dto_background_sound_zero",
    "UpdateAssistantDtoClientMessagesItem": ".update_assistant_dto_client_messages_item",
    "UpdateAssistantDtoCredentialsItem": ".update_assistant_dto_credentials_item",
    "UpdateAssistantDtoFirstMessageMode": ".update_assistant_dto_first_message_mode",
    "UpdateAssistantDtoHooksItem": ".update_assistant_dto_hooks_item",
    "UpdateAssistantDtoModel": ".update_assistant_dto_model",
    "UpdateAssistantDtoServerMessagesItem": ".update_assistant_dto_server_messages_item",
    "UpdateAssistantDtoTranscriber": ".update_assistant_dto_transcriber",
    "UpdateAssistantDtoVoice": ".update_assistant_dto_voice",
    "UpdateAssistantDtoVoicemailDetection": ".update_assistant_dto_voicemail_detection",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "UpdateAssistantDtoBackgroundSound",
    "UpdateAssistantDtoBackgroundSoundZero",
    "UpdateAssistantDtoClientMessagesItem",
    "UpdateAssistantDtoCredentialsItem",
    "UpdateAssistantDtoFirstMessageMode",
    "UpdateAssistantDtoHooksItem",
    "UpdateAssistantDtoModel",
    "UpdateAssistantDtoServerMessagesItem",
    "UpdateAssistantDtoTranscriber",
    "UpdateAssistantDtoVoice",
    "UpdateAssistantDtoVoicemailDetection",
]
