# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from ...core.unchecked_base_model import UncheckedBaseModel


class CallControllerFindAllPaginatedRequestStructuredOutputsValue(UncheckedBaseModel):
    eq: typing.Optional[str] = pydantic.Field(default=None)
    """
    Equal to
    """

    neq: typing.Optional[str] = pydantic.Field(default=None)
    """
    Not equal to
    """

    gt: typing.Optional[str] = pydantic.Field(default=None)
    """
    Greater than
    """

    gte: typing.Optional[str] = pydantic.Field(default=None)
    """
    Greater than or equal to
    """

    lt: typing.Optional[str] = pydantic.Field(default=None)
    """
    Less than
    """

    lte: typing.Optional[str] = pydantic.Field(default=None)
    """
    Less than or equal to
    """

    contains: typing.Optional[str] = pydantic.Field(default=None)
    """
    Contains
    """

    not_contains: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="notContains")] = (
        pydantic.Field(default=None)
    )
    """
    Not contains
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
