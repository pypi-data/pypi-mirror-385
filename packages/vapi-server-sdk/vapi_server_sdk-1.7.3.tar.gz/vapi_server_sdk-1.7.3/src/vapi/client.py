# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import VapiEnvironment

if typing.TYPE_CHECKING:
    from .analytics.client import AnalyticsClient, AsyncAnalyticsClient
    from .assistants.client import AssistantsClient, AsyncAssistantsClient
    from .calls.client import AsyncCallsClient, CallsClient
    from .campaigns.client import AsyncCampaignsClient, CampaignsClient
    from .chats.client import AsyncChatsClient, ChatsClient
    from .eval.client import AsyncEvalClient, EvalClient
    from .files.client import AsyncFilesClient, FilesClient
    from .phone_numbers.client import AsyncPhoneNumbersClient, PhoneNumbersClient
    from .provider_resources.client import AsyncProviderResourcesClient, ProviderResourcesClient
    from .sessions.client import AsyncSessionsClient, SessionsClient
    from .squads.client import AsyncSquadsClient, SquadsClient
    from .structured_outputs.client import AsyncStructuredOutputsClient, StructuredOutputsClient
    from .tools.client import AsyncToolsClient, ToolsClient


class Vapi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : VapiEnvironment
        The environment to use for requests from the client. from .environment import VapiEnvironment



        Defaults to VapiEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from vapi import Vapi

    client = Vapi(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: VapiEnvironment = VapiEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._assistants: typing.Optional[AssistantsClient] = None
        self._squads: typing.Optional[SquadsClient] = None
        self._calls: typing.Optional[CallsClient] = None
        self._chats: typing.Optional[ChatsClient] = None
        self._campaigns: typing.Optional[CampaignsClient] = None
        self._sessions: typing.Optional[SessionsClient] = None
        self._phone_numbers: typing.Optional[PhoneNumbersClient] = None
        self._tools: typing.Optional[ToolsClient] = None
        self._files: typing.Optional[FilesClient] = None
        self._structured_outputs: typing.Optional[StructuredOutputsClient] = None
        self._eval: typing.Optional[EvalClient] = None
        self._provider_resources: typing.Optional[ProviderResourcesClient] = None
        self._analytics: typing.Optional[AnalyticsClient] = None

    @property
    def assistants(self):
        if self._assistants is None:
            from .assistants.client import AssistantsClient  # noqa: E402

            self._assistants = AssistantsClient(client_wrapper=self._client_wrapper)
        return self._assistants

    @property
    def squads(self):
        if self._squads is None:
            from .squads.client import SquadsClient  # noqa: E402

            self._squads = SquadsClient(client_wrapper=self._client_wrapper)
        return self._squads

    @property
    def calls(self):
        if self._calls is None:
            from .calls.client import CallsClient  # noqa: E402

            self._calls = CallsClient(client_wrapper=self._client_wrapper)
        return self._calls

    @property
    def chats(self):
        if self._chats is None:
            from .chats.client import ChatsClient  # noqa: E402

            self._chats = ChatsClient(client_wrapper=self._client_wrapper)
        return self._chats

    @property
    def campaigns(self):
        if self._campaigns is None:
            from .campaigns.client import CampaignsClient  # noqa: E402

            self._campaigns = CampaignsClient(client_wrapper=self._client_wrapper)
        return self._campaigns

    @property
    def sessions(self):
        if self._sessions is None:
            from .sessions.client import SessionsClient  # noqa: E402

            self._sessions = SessionsClient(client_wrapper=self._client_wrapper)
        return self._sessions

    @property
    def phone_numbers(self):
        if self._phone_numbers is None:
            from .phone_numbers.client import PhoneNumbersClient  # noqa: E402

            self._phone_numbers = PhoneNumbersClient(client_wrapper=self._client_wrapper)
        return self._phone_numbers

    @property
    def tools(self):
        if self._tools is None:
            from .tools.client import ToolsClient  # noqa: E402

            self._tools = ToolsClient(client_wrapper=self._client_wrapper)
        return self._tools

    @property
    def files(self):
        if self._files is None:
            from .files.client import FilesClient  # noqa: E402

            self._files = FilesClient(client_wrapper=self._client_wrapper)
        return self._files

    @property
    def structured_outputs(self):
        if self._structured_outputs is None:
            from .structured_outputs.client import StructuredOutputsClient  # noqa: E402

            self._structured_outputs = StructuredOutputsClient(client_wrapper=self._client_wrapper)
        return self._structured_outputs

    @property
    def eval(self):
        if self._eval is None:
            from .eval.client import EvalClient  # noqa: E402

            self._eval = EvalClient(client_wrapper=self._client_wrapper)
        return self._eval

    @property
    def provider_resources(self):
        if self._provider_resources is None:
            from .provider_resources.client import ProviderResourcesClient  # noqa: E402

            self._provider_resources = ProviderResourcesClient(client_wrapper=self._client_wrapper)
        return self._provider_resources

    @property
    def analytics(self):
        if self._analytics is None:
            from .analytics.client import AnalyticsClient  # noqa: E402

            self._analytics = AnalyticsClient(client_wrapper=self._client_wrapper)
        return self._analytics


class AsyncVapi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : VapiEnvironment
        The environment to use for requests from the client. from .environment import VapiEnvironment



        Defaults to VapiEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from vapi import AsyncVapi

    client = AsyncVapi(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: VapiEnvironment = VapiEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._assistants: typing.Optional[AsyncAssistantsClient] = None
        self._squads: typing.Optional[AsyncSquadsClient] = None
        self._calls: typing.Optional[AsyncCallsClient] = None
        self._chats: typing.Optional[AsyncChatsClient] = None
        self._campaigns: typing.Optional[AsyncCampaignsClient] = None
        self._sessions: typing.Optional[AsyncSessionsClient] = None
        self._phone_numbers: typing.Optional[AsyncPhoneNumbersClient] = None
        self._tools: typing.Optional[AsyncToolsClient] = None
        self._files: typing.Optional[AsyncFilesClient] = None
        self._structured_outputs: typing.Optional[AsyncStructuredOutputsClient] = None
        self._eval: typing.Optional[AsyncEvalClient] = None
        self._provider_resources: typing.Optional[AsyncProviderResourcesClient] = None
        self._analytics: typing.Optional[AsyncAnalyticsClient] = None

    @property
    def assistants(self):
        if self._assistants is None:
            from .assistants.client import AsyncAssistantsClient  # noqa: E402

            self._assistants = AsyncAssistantsClient(client_wrapper=self._client_wrapper)
        return self._assistants

    @property
    def squads(self):
        if self._squads is None:
            from .squads.client import AsyncSquadsClient  # noqa: E402

            self._squads = AsyncSquadsClient(client_wrapper=self._client_wrapper)
        return self._squads

    @property
    def calls(self):
        if self._calls is None:
            from .calls.client import AsyncCallsClient  # noqa: E402

            self._calls = AsyncCallsClient(client_wrapper=self._client_wrapper)
        return self._calls

    @property
    def chats(self):
        if self._chats is None:
            from .chats.client import AsyncChatsClient  # noqa: E402

            self._chats = AsyncChatsClient(client_wrapper=self._client_wrapper)
        return self._chats

    @property
    def campaigns(self):
        if self._campaigns is None:
            from .campaigns.client import AsyncCampaignsClient  # noqa: E402

            self._campaigns = AsyncCampaignsClient(client_wrapper=self._client_wrapper)
        return self._campaigns

    @property
    def sessions(self):
        if self._sessions is None:
            from .sessions.client import AsyncSessionsClient  # noqa: E402

            self._sessions = AsyncSessionsClient(client_wrapper=self._client_wrapper)
        return self._sessions

    @property
    def phone_numbers(self):
        if self._phone_numbers is None:
            from .phone_numbers.client import AsyncPhoneNumbersClient  # noqa: E402

            self._phone_numbers = AsyncPhoneNumbersClient(client_wrapper=self._client_wrapper)
        return self._phone_numbers

    @property
    def tools(self):
        if self._tools is None:
            from .tools.client import AsyncToolsClient  # noqa: E402

            self._tools = AsyncToolsClient(client_wrapper=self._client_wrapper)
        return self._tools

    @property
    def files(self):
        if self._files is None:
            from .files.client import AsyncFilesClient  # noqa: E402

            self._files = AsyncFilesClient(client_wrapper=self._client_wrapper)
        return self._files

    @property
    def structured_outputs(self):
        if self._structured_outputs is None:
            from .structured_outputs.client import AsyncStructuredOutputsClient  # noqa: E402

            self._structured_outputs = AsyncStructuredOutputsClient(client_wrapper=self._client_wrapper)
        return self._structured_outputs

    @property
    def eval(self):
        if self._eval is None:
            from .eval.client import AsyncEvalClient  # noqa: E402

            self._eval = AsyncEvalClient(client_wrapper=self._client_wrapper)
        return self._eval

    @property
    def provider_resources(self):
        if self._provider_resources is None:
            from .provider_resources.client import AsyncProviderResourcesClient  # noqa: E402

            self._provider_resources = AsyncProviderResourcesClient(client_wrapper=self._client_wrapper)
        return self._provider_resources

    @property
    def analytics(self):
        if self._analytics is None:
            from .analytics.client import AsyncAnalyticsClient  # noqa: E402

            self._analytics = AsyncAnalyticsClient(client_wrapper=self._client_wrapper)
        return self._analytics


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: VapiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
