# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.create_assistant_dto import CreateAssistantDto
from ..types.create_customer_dto import CreateCustomerDto
from ..types.create_squad_dto import CreateSquadDto
from ..types.import_twilio_phone_number_dto import ImportTwilioPhoneNumberDto
from ..types.session import Session
from ..types.session_paginated_response import SessionPaginatedResponse
from .raw_client import AsyncRawSessionsClient, RawSessionsClient
from .types.create_session_dto_messages_item import CreateSessionDtoMessagesItem
from .types.create_session_dto_status import CreateSessionDtoStatus
from .types.sessions_list_request_sort_order import SessionsListRequestSortOrder
from .types.update_session_dto_messages_item import UpdateSessionDtoMessagesItem
from .types.update_session_dto_status import UpdateSessionDtoStatus

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SessionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSessionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSessionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSessionsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        name: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        workflow_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[SessionsListRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionPaginatedResponse:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is the name of the session to filter by.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant to filter sessions by.

        squad_id : typing.Optional[str]
            This is the ID of the squad to filter sessions by.

        workflow_id : typing.Optional[str]
            This is the ID of the workflow to filter sessions by.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[SessionsListRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionPaginatedResponse


        Examples
        --------
        import datetime

        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.sessions.list(
            name="name",
            assistant_id="assistantId",
            squad_id="squadId",
            workflow_id="workflowId",
            page=1.1,
            sort_order="ASC",
            limit=1.1,
            created_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.list(
            name=name,
            assistant_id=assistant_id,
            squad_id=squad_id,
            workflow_id=workflow_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[CreateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        messages: typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]] = OMIT,
        customer: typing.Optional[CreateCustomerDto] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[ImportTwilioPhoneNumberDto] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is a user-defined name for the session. Maximum length is 40 characters.

        status : typing.Optional[CreateSessionDtoStatus]
            This is the current status of the session. Can be either 'active' or 'completed'.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant configuration for this session. Use this when creating a new assistant configuration.
            If assistantId is provided, this will be ignored.

        squad_id : typing.Optional[str]
            This is the squad ID associated with this session. Use this when referencing an existing squad.

        squad : typing.Optional[CreateSquadDto]
            This is the squad configuration for this session. Use this when creating a new squad configuration.
            If squadId is provided, this will be ignored.

        messages : typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]]
            This is an array of chat messages in the session.

        customer : typing.Optional[CreateCustomerDto]
            This is the customer information associated with this session.

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number associated with this session.

        phone_number : typing.Optional[ImportTwilioPhoneNumberDto]
            This is the phone number configuration for this session.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.sessions.create()
        """
        _response = self._raw_client.create(
            name=name,
            status=status,
            expiration_seconds=expiration_seconds,
            assistant_id=assistant_id,
            assistant=assistant,
            squad_id=squad_id,
            squad=squad,
            messages=messages,
            customer=customer,
            phone_number_id=phone_number_id,
            phone_number=phone_number,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.sessions.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.sessions.delete(
            id="id",
        )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[UpdateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        messages: typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the new name for the session. Maximum length is 40 characters.

        status : typing.Optional[UpdateSessionDtoStatus]
            This is the new status for the session.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        messages : typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]]
            This is the updated array of chat messages.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.sessions.update(
            id="id",
        )
        """
        _response = self._raw_client.update(
            id,
            name=name,
            status=status,
            expiration_seconds=expiration_seconds,
            messages=messages,
            request_options=request_options,
        )
        return _response.data


class AsyncSessionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSessionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSessionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSessionsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        name: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        workflow_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[SessionsListRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionPaginatedResponse:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is the name of the session to filter by.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant to filter sessions by.

        squad_id : typing.Optional[str]
            This is the ID of the squad to filter sessions by.

        workflow_id : typing.Optional[str]
            This is the ID of the workflow to filter sessions by.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[SessionsListRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionPaginatedResponse


        Examples
        --------
        import asyncio
        import datetime

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sessions.list(
                name="name",
                assistant_id="assistantId",
                squad_id="squadId",
                workflow_id="workflowId",
                page=1.1,
                sort_order="ASC",
                limit=1.1,
                created_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            name=name,
            assistant_id=assistant_id,
            squad_id=squad_id,
            workflow_id=workflow_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[CreateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        messages: typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]] = OMIT,
        customer: typing.Optional[CreateCustomerDto] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[ImportTwilioPhoneNumberDto] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is a user-defined name for the session. Maximum length is 40 characters.

        status : typing.Optional[CreateSessionDtoStatus]
            This is the current status of the session. Can be either 'active' or 'completed'.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant configuration for this session. Use this when creating a new assistant configuration.
            If assistantId is provided, this will be ignored.

        squad_id : typing.Optional[str]
            This is the squad ID associated with this session. Use this when referencing an existing squad.

        squad : typing.Optional[CreateSquadDto]
            This is the squad configuration for this session. Use this when creating a new squad configuration.
            If squadId is provided, this will be ignored.

        messages : typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]]
            This is an array of chat messages in the session.

        customer : typing.Optional[CreateCustomerDto]
            This is the customer information associated with this session.

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number associated with this session.

        phone_number : typing.Optional[ImportTwilioPhoneNumberDto]
            This is the phone number configuration for this session.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sessions.create()


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name,
            status=status,
            expiration_seconds=expiration_seconds,
            assistant_id=assistant_id,
            assistant=assistant,
            squad_id=squad_id,
            squad=squad,
            messages=messages,
            customer=customer,
            phone_number_id=phone_number_id,
            phone_number=phone_number,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sessions.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sessions.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[UpdateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        messages: typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the new name for the session. Maximum length is 40 characters.

        status : typing.Optional[UpdateSessionDtoStatus]
            This is the new status for the session.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        messages : typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]]
            This is the updated array of chat messages.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sessions.update(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id,
            name=name,
            status=status,
            expiration_seconds=expiration_seconds,
            messages=messages,
            request_options=request_options,
        )
        return _response.data
