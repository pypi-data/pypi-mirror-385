# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..types.create_assistant_dto import CreateAssistantDto
from ..types.create_customer_dto import CreateCustomerDto
from ..types.create_squad_dto import CreateSquadDto
from ..types.import_twilio_phone_number_dto import ImportTwilioPhoneNumberDto
from ..types.session import Session
from ..types.session_paginated_response import SessionPaginatedResponse
from .types.create_session_dto_messages_item import CreateSessionDtoMessagesItem
from .types.create_session_dto_status import CreateSessionDtoStatus
from .types.sessions_list_request_sort_order import SessionsListRequestSortOrder
from .types.update_session_dto_messages_item import UpdateSessionDtoMessagesItem
from .types.update_session_dto_status import UpdateSessionDtoStatus

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawSessionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        name: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        workflow_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[SessionsListRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SessionPaginatedResponse]:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is the name of the session to filter by.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant to filter sessions by.

        squad_id : typing.Optional[str]
            This is the ID of the squad to filter sessions by.

        workflow_id : typing.Optional[str]
            This is the ID of the workflow to filter sessions by.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[SessionsListRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SessionPaginatedResponse]

        """
        _response = self._client_wrapper.httpx_client.request(
            "session",
            method="GET",
            params={
                "name": name,
                "assistantId": assistant_id,
                "squadId": squad_id,
                "workflowId": workflow_id,
                "page": page,
                "sortOrder": sort_order,
                "limit": limit,
                "createdAtGt": serialize_datetime(created_at_gt) if created_at_gt is not None else None,
                "createdAtLt": serialize_datetime(created_at_lt) if created_at_lt is not None else None,
                "createdAtGe": serialize_datetime(created_at_ge) if created_at_ge is not None else None,
                "createdAtLe": serialize_datetime(created_at_le) if created_at_le is not None else None,
                "updatedAtGt": serialize_datetime(updated_at_gt) if updated_at_gt is not None else None,
                "updatedAtLt": serialize_datetime(updated_at_lt) if updated_at_lt is not None else None,
                "updatedAtGe": serialize_datetime(updated_at_ge) if updated_at_ge is not None else None,
                "updatedAtLe": serialize_datetime(updated_at_le) if updated_at_le is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SessionPaginatedResponse,
                    construct_type(
                        type_=SessionPaginatedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[CreateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        messages: typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]] = OMIT,
        customer: typing.Optional[CreateCustomerDto] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[ImportTwilioPhoneNumberDto] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Session]:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is a user-defined name for the session. Maximum length is 40 characters.

        status : typing.Optional[CreateSessionDtoStatus]
            This is the current status of the session. Can be either 'active' or 'completed'.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant configuration for this session. Use this when creating a new assistant configuration.
            If assistantId is provided, this will be ignored.

        squad_id : typing.Optional[str]
            This is the squad ID associated with this session. Use this when referencing an existing squad.

        squad : typing.Optional[CreateSquadDto]
            This is the squad configuration for this session. Use this when creating a new squad configuration.
            If squadId is provided, this will be ignored.

        messages : typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]]
            This is an array of chat messages in the session.

        customer : typing.Optional[CreateCustomerDto]
            This is the customer information associated with this session.

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number associated with this session.

        phone_number : typing.Optional[ImportTwilioPhoneNumberDto]
            This is the phone number configuration for this session.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Session]

        """
        _response = self._client_wrapper.httpx_client.request(
            "session",
            method="POST",
            json={
                "name": name,
                "status": status,
                "expirationSeconds": expiration_seconds,
                "assistantId": assistant_id,
                "assistant": convert_and_respect_annotation_metadata(
                    object_=assistant, annotation=CreateAssistantDto, direction="write"
                ),
                "squadId": squad_id,
                "squad": convert_and_respect_annotation_metadata(
                    object_=squad, annotation=CreateSquadDto, direction="write"
                ),
                "messages": convert_and_respect_annotation_metadata(
                    object_=messages, annotation=typing.Sequence[CreateSessionDtoMessagesItem], direction="write"
                ),
                "customer": convert_and_respect_annotation_metadata(
                    object_=customer, annotation=CreateCustomerDto, direction="write"
                ),
                "phoneNumberId": phone_number_id,
                "phoneNumber": convert_and_respect_annotation_metadata(
                    object_=phone_number, annotation=ImportTwilioPhoneNumberDto, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[Session]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Session]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[Session]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Session]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[UpdateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        messages: typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Session]:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the new name for the session. Maximum length is 40 characters.

        status : typing.Optional[UpdateSessionDtoStatus]
            This is the new status for the session.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        messages : typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]]
            This is the updated array of chat messages.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Session]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "status": status,
                "expirationSeconds": expiration_seconds,
                "messages": convert_and_respect_annotation_metadata(
                    object_=messages, annotation=typing.Sequence[UpdateSessionDtoMessagesItem], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSessionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        name: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        workflow_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[SessionsListRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SessionPaginatedResponse]:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is the name of the session to filter by.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant to filter sessions by.

        squad_id : typing.Optional[str]
            This is the ID of the squad to filter sessions by.

        workflow_id : typing.Optional[str]
            This is the ID of the workflow to filter sessions by.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[SessionsListRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SessionPaginatedResponse]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "session",
            method="GET",
            params={
                "name": name,
                "assistantId": assistant_id,
                "squadId": squad_id,
                "workflowId": workflow_id,
                "page": page,
                "sortOrder": sort_order,
                "limit": limit,
                "createdAtGt": serialize_datetime(created_at_gt) if created_at_gt is not None else None,
                "createdAtLt": serialize_datetime(created_at_lt) if created_at_lt is not None else None,
                "createdAtGe": serialize_datetime(created_at_ge) if created_at_ge is not None else None,
                "createdAtLe": serialize_datetime(created_at_le) if created_at_le is not None else None,
                "updatedAtGt": serialize_datetime(updated_at_gt) if updated_at_gt is not None else None,
                "updatedAtLt": serialize_datetime(updated_at_lt) if updated_at_lt is not None else None,
                "updatedAtGe": serialize_datetime(updated_at_ge) if updated_at_ge is not None else None,
                "updatedAtLe": serialize_datetime(updated_at_le) if updated_at_le is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SessionPaginatedResponse,
                    construct_type(
                        type_=SessionPaginatedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[CreateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        messages: typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]] = OMIT,
        customer: typing.Optional[CreateCustomerDto] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[ImportTwilioPhoneNumberDto] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Session]:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is a user-defined name for the session. Maximum length is 40 characters.

        status : typing.Optional[CreateSessionDtoStatus]
            This is the current status of the session. Can be either 'active' or 'completed'.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant configuration for this session. Use this when creating a new assistant configuration.
            If assistantId is provided, this will be ignored.

        squad_id : typing.Optional[str]
            This is the squad ID associated with this session. Use this when referencing an existing squad.

        squad : typing.Optional[CreateSquadDto]
            This is the squad configuration for this session. Use this when creating a new squad configuration.
            If squadId is provided, this will be ignored.

        messages : typing.Optional[typing.Sequence[CreateSessionDtoMessagesItem]]
            This is an array of chat messages in the session.

        customer : typing.Optional[CreateCustomerDto]
            This is the customer information associated with this session.

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number associated with this session.

        phone_number : typing.Optional[ImportTwilioPhoneNumberDto]
            This is the phone number configuration for this session.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Session]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "session",
            method="POST",
            json={
                "name": name,
                "status": status,
                "expirationSeconds": expiration_seconds,
                "assistantId": assistant_id,
                "assistant": convert_and_respect_annotation_metadata(
                    object_=assistant, annotation=CreateAssistantDto, direction="write"
                ),
                "squadId": squad_id,
                "squad": convert_and_respect_annotation_metadata(
                    object_=squad, annotation=CreateSquadDto, direction="write"
                ),
                "messages": convert_and_respect_annotation_metadata(
                    object_=messages, annotation=typing.Sequence[CreateSessionDtoMessagesItem], direction="write"
                ),
                "customer": convert_and_respect_annotation_metadata(
                    object_=customer, annotation=CreateCustomerDto, direction="write"
                ),
                "phoneNumberId": phone_number_id,
                "phoneNumber": convert_and_respect_annotation_metadata(
                    object_=phone_number, annotation=ImportTwilioPhoneNumberDto, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Session]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Session]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Session]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Session]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        status: typing.Optional[UpdateSessionDtoStatus] = OMIT,
        expiration_seconds: typing.Optional[float] = OMIT,
        messages: typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Session]:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the new name for the session. Maximum length is 40 characters.

        status : typing.Optional[UpdateSessionDtoStatus]
            This is the new status for the session.

        expiration_seconds : typing.Optional[float]
            Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.

        messages : typing.Optional[typing.Sequence[UpdateSessionDtoMessagesItem]]
            This is the updated array of chat messages.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Session]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"session/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "status": status,
                "expirationSeconds": expiration_seconds,
                "messages": convert_and_respect_annotation_metadata(
                    object_=messages, annotation=typing.Sequence[UpdateSessionDtoMessagesItem], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Session,
                    construct_type(
                        type_=Session,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
