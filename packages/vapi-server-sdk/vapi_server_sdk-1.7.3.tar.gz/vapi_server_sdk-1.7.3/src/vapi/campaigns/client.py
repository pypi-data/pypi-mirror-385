# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.campaign import Campaign
from ..types.campaign_paginated_response import CampaignPaginatedResponse
from ..types.create_customer_dto import CreateCustomerDto
from ..types.schedule_plan import SchedulePlan
from .raw_client import AsyncRawCampaignsClient, RawCampaignsClient
from .types.campaign_controller_find_all_request_sort_order import CampaignControllerFindAllRequestSortOrder
from .types.campaign_controller_find_all_request_status import CampaignControllerFindAllRequestStatus

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CampaignsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCampaignsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCampaignsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCampaignsClient
        """
        return self._raw_client

    def campaign_controller_find_all(
        self,
        *,
        id: typing.Optional[str] = None,
        status: typing.Optional[CampaignControllerFindAllRequestStatus] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[CampaignControllerFindAllRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CampaignPaginatedResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        status : typing.Optional[CampaignControllerFindAllRequestStatus]

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[CampaignControllerFindAllRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CampaignPaginatedResponse


        Examples
        --------
        import datetime

        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.campaigns.campaign_controller_find_all(
            id="id",
            status="scheduled",
            page=1.1,
            sort_order="ASC",
            limit=1.1,
            created_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.campaign_controller_find_all(
            id=id,
            status=status,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    def campaign_controller_create(
        self,
        *,
        name: str,
        phone_number_id: str,
        customers: typing.Sequence[CreateCustomerDto],
        assistant_id: typing.Optional[str] = OMIT,
        workflow_id: typing.Optional[str] = OMIT,
        schedule_plan: typing.Optional[SchedulePlan] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Campaign:
        """
        Parameters
        ----------
        name : str
            This is the name of the campaign. This is just for your own reference.

        phone_number_id : str
            This is the phone number ID that will be used for the campaign calls.

        customers : typing.Sequence[CreateCustomerDto]
            These are the customers that will be called in the campaign.

        assistant_id : typing.Optional[str]
            This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.

        workflow_id : typing.Optional[str]
            This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.

        schedule_plan : typing.Optional[SchedulePlan]
            This is the schedule plan for the campaign.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        from vapi import CreateCustomerDto, Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.campaigns.campaign_controller_create(
            name="Q2 Sales Campaign",
            phone_number_id="phoneNumberId",
            customers=[CreateCustomerDto()],
        )
        """
        _response = self._raw_client.campaign_controller_create(
            name=name,
            phone_number_id=phone_number_id,
            customers=customers,
            assistant_id=assistant_id,
            workflow_id=workflow_id,
            schedule_plan=schedule_plan,
            request_options=request_options,
        )
        return _response.data

    def campaign_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Campaign:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.campaigns.campaign_controller_find_one(
            id="id",
        )
        """
        _response = self._raw_client.campaign_controller_find_one(id, request_options=request_options)
        return _response.data

    def campaign_controller_remove(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Campaign:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.campaigns.campaign_controller_remove(
            id="id",
        )
        """
        _response = self._raw_client.campaign_controller_remove(id, request_options=request_options)
        return _response.data

    def campaign_controller_update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        workflow_id: typing.Optional[str] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        schedule_plan: typing.Optional[SchedulePlan] = OMIT,
        status: typing.Optional[typing.Literal["ended"]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Campaign:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the name of the campaign. This is just for your own reference.

        assistant_id : typing.Optional[str]
            This is the assistant ID that will be used for the campaign calls.
            Can only be updated if campaign is not in progress or has ended.

        workflow_id : typing.Optional[str]
            This is the workflow ID that will be used for the campaign calls.
            Can only be updated if campaign is not in progress or has ended.

        phone_number_id : typing.Optional[str]
            This is the phone number ID that will be used for the campaign calls.
            Can only be updated if campaign is not in progress or has ended.

        schedule_plan : typing.Optional[SchedulePlan]
            This is the schedule plan for the campaign.
            Can only be updated if campaign is not in progress or has ended.

        status : typing.Optional[typing.Literal["ended"]]
            This is the status of the campaign.
            Can only be updated to 'ended' if you want to end the campaign.
            When set to 'ended', it will delete all scheduled calls. Calls in progress will be allowed to complete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.campaigns.campaign_controller_update(
            id="id",
        )
        """
        _response = self._raw_client.campaign_controller_update(
            id,
            name=name,
            assistant_id=assistant_id,
            workflow_id=workflow_id,
            phone_number_id=phone_number_id,
            schedule_plan=schedule_plan,
            status=status,
            request_options=request_options,
        )
        return _response.data


class AsyncCampaignsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCampaignsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCampaignsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCampaignsClient
        """
        return self._raw_client

    async def campaign_controller_find_all(
        self,
        *,
        id: typing.Optional[str] = None,
        status: typing.Optional[CampaignControllerFindAllRequestStatus] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[CampaignControllerFindAllRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CampaignPaginatedResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        status : typing.Optional[CampaignControllerFindAllRequestStatus]

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[CampaignControllerFindAllRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CampaignPaginatedResponse


        Examples
        --------
        import asyncio
        import datetime

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.campaigns.campaign_controller_find_all(
                id="id",
                status="scheduled",
                page=1.1,
                sort_order="ASC",
                limit=1.1,
                created_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.campaign_controller_find_all(
            id=id,
            status=status,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    async def campaign_controller_create(
        self,
        *,
        name: str,
        phone_number_id: str,
        customers: typing.Sequence[CreateCustomerDto],
        assistant_id: typing.Optional[str] = OMIT,
        workflow_id: typing.Optional[str] = OMIT,
        schedule_plan: typing.Optional[SchedulePlan] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Campaign:
        """
        Parameters
        ----------
        name : str
            This is the name of the campaign. This is just for your own reference.

        phone_number_id : str
            This is the phone number ID that will be used for the campaign calls.

        customers : typing.Sequence[CreateCustomerDto]
            These are the customers that will be called in the campaign.

        assistant_id : typing.Optional[str]
            This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.

        workflow_id : typing.Optional[str]
            This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.

        schedule_plan : typing.Optional[SchedulePlan]
            This is the schedule plan for the campaign.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi, CreateCustomerDto

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.campaigns.campaign_controller_create(
                name="Q2 Sales Campaign",
                phone_number_id="phoneNumberId",
                customers=[CreateCustomerDto()],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.campaign_controller_create(
            name=name,
            phone_number_id=phone_number_id,
            customers=customers,
            assistant_id=assistant_id,
            workflow_id=workflow_id,
            schedule_plan=schedule_plan,
            request_options=request_options,
        )
        return _response.data

    async def campaign_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Campaign:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.campaigns.campaign_controller_find_one(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.campaign_controller_find_one(id, request_options=request_options)
        return _response.data

    async def campaign_controller_remove(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Campaign:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.campaigns.campaign_controller_remove(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.campaign_controller_remove(id, request_options=request_options)
        return _response.data

    async def campaign_controller_update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        assistant_id: typing.Optional[str] = OMIT,
        workflow_id: typing.Optional[str] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        schedule_plan: typing.Optional[SchedulePlan] = OMIT,
        status: typing.Optional[typing.Literal["ended"]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Campaign:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the name of the campaign. This is just for your own reference.

        assistant_id : typing.Optional[str]
            This is the assistant ID that will be used for the campaign calls.
            Can only be updated if campaign is not in progress or has ended.

        workflow_id : typing.Optional[str]
            This is the workflow ID that will be used for the campaign calls.
            Can only be updated if campaign is not in progress or has ended.

        phone_number_id : typing.Optional[str]
            This is the phone number ID that will be used for the campaign calls.
            Can only be updated if campaign is not in progress or has ended.

        schedule_plan : typing.Optional[SchedulePlan]
            This is the schedule plan for the campaign.
            Can only be updated if campaign is not in progress or has ended.

        status : typing.Optional[typing.Literal["ended"]]
            This is the status of the campaign.
            Can only be updated to 'ended' if you want to end the campaign.
            When set to 'ended', it will delete all scheduled calls. Calls in progress will be allowed to complete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Campaign


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.campaigns.campaign_controller_update(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.campaign_controller_update(
            id,
            name=name,
            assistant_id=assistant_id,
            workflow_id=workflow_id,
            phone_number_id=phone_number_id,
            schedule_plan=schedule_plan,
            status=status,
            request_options=request_options,
        )
        return _response.data
