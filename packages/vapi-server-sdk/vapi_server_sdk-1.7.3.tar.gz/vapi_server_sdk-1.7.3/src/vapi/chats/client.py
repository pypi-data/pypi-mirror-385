# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.assistant_overrides import AssistantOverrides
from ..types.chat import Chat
from ..types.chat_paginated_response import ChatPaginatedResponse
from ..types.create_assistant_dto import CreateAssistantDto
from ..types.create_squad_dto import CreateSquadDto
from ..types.twilio_sms_chat_transport import TwilioSmsChatTransport
from .raw_client import AsyncRawChatsClient, RawChatsClient
from .types.chats_create_response import ChatsCreateResponse
from .types.chats_create_response_response import ChatsCreateResponseResponse
from .types.chats_list_request_sort_order import ChatsListRequestSortOrder
from .types.create_chat_dto_input import CreateChatDtoInput
from .types.open_ai_responses_request_input import OpenAiResponsesRequestInput

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ChatsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawChatsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawChatsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawChatsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        assistant_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        workflow_id: typing.Optional[str] = None,
        session_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[ChatsListRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatPaginatedResponse:
        """
        Parameters
        ----------
        assistant_id : typing.Optional[str]
            This is the unique identifier for the assistant that will be used for the chat.

        squad_id : typing.Optional[str]
            This is the unique identifier for the squad that will be used for the chat.

        workflow_id : typing.Optional[str]
            This is the unique identifier for the workflow that will be used for the chat.

        session_id : typing.Optional[str]
            This is the unique identifier for the session that will be used for the chat.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[ChatsListRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatPaginatedResponse


        Examples
        --------
        import datetime

        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.chats.list(
            assistant_id="assistantId",
            squad_id="squadId",
            workflow_id="workflowId",
            session_id="sessionId",
            page=1.1,
            sort_order="ASC",
            limit=1.1,
            created_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_gt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_lt=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_ge=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            updated_at_le=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.list(
            assistant_id=assistant_id,
            squad_id=squad_id,
            workflow_id=workflow_id,
            session_id=session_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        *,
        input: CreateChatDtoInput,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        assistant_overrides: typing.Optional[AssistantOverrides] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        name: typing.Optional[str] = OMIT,
        session_id: typing.Optional[str] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        previous_chat_id: typing.Optional[str] = OMIT,
        transport: typing.Optional[TwilioSmsChatTransport] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatsCreateResponse:
        """
        Creates a new chat with optional SMS delivery via transport field. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive. Transport field enables SMS delivery with two modes: (1) New conversation - provide transport.phoneNumberId and transport.customer to create a new session, (2) Existing conversation - provide sessionId to use existing session data. Cannot specify both sessionId and transport fields together. The transport.useLLMGeneratedMessageForOutbound flag controls whether input is processed by LLM (true, default) or forwarded directly as SMS (false).

        Parameters
        ----------
        input : CreateChatDtoInput
            This is the input text for the chat.
            Can be a string or an array of chat messages.
            This field is REQUIRED for chat creation.

        assistant_id : typing.Optional[str]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant_overrides : typing.Optional[AssistantOverrides]
            These are the variable values that will be used to replace template variables in the assistant messages.
            Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.

        squad_id : typing.Optional[str]
            This is the squad that will be used for the chat. To use a transient squad, use `squad` instead.

        squad : typing.Optional[CreateSquadDto]
            This is the squad that will be used for the chat. To use an existing squad, use `squadId` instead.

        name : typing.Optional[str]
            This is the name of the chat. This is just for your own reference.

        session_id : typing.Optional[str]
            This is the ID of the session that will be used for the chat.
            Mutually exclusive with previousChatId.

        stream : typing.Optional[bool]
            This is a flag that determines whether the response should be streamed.
            When true, the response will be sent as chunks of text.

        previous_chat_id : typing.Optional[str]
            This is the ID of the chat that will be used as context for the new chat.
            The messages from the previous chat will be used as context.
            Mutually exclusive with sessionId.

        transport : typing.Optional[TwilioSmsChatTransport]
            This is used to send the chat through a transport like SMS.
            If transport.phoneNumberId and transport.customer are provided, creates a new session.
            If sessionId is provided without transport fields, uses existing session data.
            Cannot specify both sessionId and transport fields (phoneNumberId/customer) together.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatsCreateResponse
            Chat response - either non-streaming chat or streaming

        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.chats.create(
            input="input",
        )
        """
        _response = self._raw_client.create(
            input=input,
            assistant_id=assistant_id,
            assistant=assistant,
            assistant_overrides=assistant_overrides,
            squad_id=squad_id,
            squad=squad,
            name=name,
            session_id=session_id,
            stream=stream,
            previous_chat_id=previous_chat_id,
            transport=transport,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Chat:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Chat


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.chats.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Chat:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Chat


        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.chats.delete(
            id="id",
        )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def create_response(
        self,
        *,
        input: OpenAiResponsesRequestInput,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        assistant_overrides: typing.Optional[AssistantOverrides] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        name: typing.Optional[str] = OMIT,
        session_id: typing.Optional[str] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        previous_chat_id: typing.Optional[str] = OMIT,
        transport: typing.Optional[TwilioSmsChatTransport] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatsCreateResponseResponse:
        """
        Parameters
        ----------
        input : OpenAiResponsesRequestInput
            This is the input text for the chat.
            Can be a string or an array of chat messages.
            This field is REQUIRED for chat creation.

        assistant_id : typing.Optional[str]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant_overrides : typing.Optional[AssistantOverrides]
            These are the variable values that will be used to replace template variables in the assistant messages.
            Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.

        squad_id : typing.Optional[str]
            This is the squad that will be used for the chat. To use a transient squad, use `squad` instead.

        squad : typing.Optional[CreateSquadDto]
            This is the squad that will be used for the chat. To use an existing squad, use `squadId` instead.

        name : typing.Optional[str]
            This is the name of the chat. This is just for your own reference.

        session_id : typing.Optional[str]
            This is the ID of the session that will be used for the chat.
            Mutually exclusive with previousChatId.

        stream : typing.Optional[bool]
            Whether to stream the response or not.

        previous_chat_id : typing.Optional[str]
            This is the ID of the chat that will be used as context for the new chat.
            The messages from the previous chat will be used as context.
            Mutually exclusive with sessionId.

        transport : typing.Optional[TwilioSmsChatTransport]
            This is used to send the chat through a transport like SMS.
            If transport.phoneNumberId and transport.customer are provided, creates a new session.
            If sessionId is provided without transport fields, uses existing session data.
            Cannot specify both sessionId and transport fields (phoneNumberId/customer) together.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatsCreateResponseResponse
            OpenAI Responses API format - either non-streaming or streaming

        Examples
        --------
        from vapi import Vapi

        client = Vapi(
            token="YOUR_TOKEN",
        )
        client.chats.create_response(
            input="input",
        )
        """
        _response = self._raw_client.create_response(
            input=input,
            assistant_id=assistant_id,
            assistant=assistant,
            assistant_overrides=assistant_overrides,
            squad_id=squad_id,
            squad=squad,
            name=name,
            session_id=session_id,
            stream=stream,
            previous_chat_id=previous_chat_id,
            transport=transport,
            request_options=request_options,
        )
        return _response.data


class AsyncChatsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawChatsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawChatsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawChatsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        assistant_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        workflow_id: typing.Optional[str] = None,
        session_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[ChatsListRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatPaginatedResponse:
        """
        Parameters
        ----------
        assistant_id : typing.Optional[str]
            This is the unique identifier for the assistant that will be used for the chat.

        squad_id : typing.Optional[str]
            This is the unique identifier for the squad that will be used for the chat.

        workflow_id : typing.Optional[str]
            This is the unique identifier for the workflow that will be used for the chat.

        session_id : typing.Optional[str]
            This is the unique identifier for the session that will be used for the chat.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[ChatsListRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatPaginatedResponse


        Examples
        --------
        import asyncio
        import datetime

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.chats.list(
                assistant_id="assistantId",
                squad_id="squadId",
                workflow_id="workflowId",
                session_id="sessionId",
                page=1.1,
                sort_order="ASC",
                limit=1.1,
                created_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_gt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_lt=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_ge=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at_le=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            assistant_id=assistant_id,
            squad_id=squad_id,
            workflow_id=workflow_id,
            session_id=session_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        *,
        input: CreateChatDtoInput,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        assistant_overrides: typing.Optional[AssistantOverrides] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        name: typing.Optional[str] = OMIT,
        session_id: typing.Optional[str] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        previous_chat_id: typing.Optional[str] = OMIT,
        transport: typing.Optional[TwilioSmsChatTransport] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatsCreateResponse:
        """
        Creates a new chat with optional SMS delivery via transport field. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive. Transport field enables SMS delivery with two modes: (1) New conversation - provide transport.phoneNumberId and transport.customer to create a new session, (2) Existing conversation - provide sessionId to use existing session data. Cannot specify both sessionId and transport fields together. The transport.useLLMGeneratedMessageForOutbound flag controls whether input is processed by LLM (true, default) or forwarded directly as SMS (false).

        Parameters
        ----------
        input : CreateChatDtoInput
            This is the input text for the chat.
            Can be a string or an array of chat messages.
            This field is REQUIRED for chat creation.

        assistant_id : typing.Optional[str]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant_overrides : typing.Optional[AssistantOverrides]
            These are the variable values that will be used to replace template variables in the assistant messages.
            Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.

        squad_id : typing.Optional[str]
            This is the squad that will be used for the chat. To use a transient squad, use `squad` instead.

        squad : typing.Optional[CreateSquadDto]
            This is the squad that will be used for the chat. To use an existing squad, use `squadId` instead.

        name : typing.Optional[str]
            This is the name of the chat. This is just for your own reference.

        session_id : typing.Optional[str]
            This is the ID of the session that will be used for the chat.
            Mutually exclusive with previousChatId.

        stream : typing.Optional[bool]
            This is a flag that determines whether the response should be streamed.
            When true, the response will be sent as chunks of text.

        previous_chat_id : typing.Optional[str]
            This is the ID of the chat that will be used as context for the new chat.
            The messages from the previous chat will be used as context.
            Mutually exclusive with sessionId.

        transport : typing.Optional[TwilioSmsChatTransport]
            This is used to send the chat through a transport like SMS.
            If transport.phoneNumberId and transport.customer are provided, creates a new session.
            If sessionId is provided without transport fields, uses existing session data.
            Cannot specify both sessionId and transport fields (phoneNumberId/customer) together.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatsCreateResponse
            Chat response - either non-streaming chat or streaming

        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.chats.create(
                input="input",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            input=input,
            assistant_id=assistant_id,
            assistant=assistant,
            assistant_overrides=assistant_overrides,
            squad_id=squad_id,
            squad=squad,
            name=name,
            session_id=session_id,
            stream=stream,
            previous_chat_id=previous_chat_id,
            transport=transport,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Chat:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Chat


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.chats.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Chat:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Chat


        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.chats.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def create_response(
        self,
        *,
        input: OpenAiResponsesRequestInput,
        assistant_id: typing.Optional[str] = OMIT,
        assistant: typing.Optional[CreateAssistantDto] = OMIT,
        assistant_overrides: typing.Optional[AssistantOverrides] = OMIT,
        squad_id: typing.Optional[str] = OMIT,
        squad: typing.Optional[CreateSquadDto] = OMIT,
        name: typing.Optional[str] = OMIT,
        session_id: typing.Optional[str] = OMIT,
        stream: typing.Optional[bool] = OMIT,
        previous_chat_id: typing.Optional[str] = OMIT,
        transport: typing.Optional[TwilioSmsChatTransport] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ChatsCreateResponseResponse:
        """
        Parameters
        ----------
        input : OpenAiResponsesRequestInput
            This is the input text for the chat.
            Can be a string or an array of chat messages.
            This field is REQUIRED for chat creation.

        assistant_id : typing.Optional[str]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant : typing.Optional[CreateAssistantDto]
            This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.

        assistant_overrides : typing.Optional[AssistantOverrides]
            These are the variable values that will be used to replace template variables in the assistant messages.
            Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.

        squad_id : typing.Optional[str]
            This is the squad that will be used for the chat. To use a transient squad, use `squad` instead.

        squad : typing.Optional[CreateSquadDto]
            This is the squad that will be used for the chat. To use an existing squad, use `squadId` instead.

        name : typing.Optional[str]
            This is the name of the chat. This is just for your own reference.

        session_id : typing.Optional[str]
            This is the ID of the session that will be used for the chat.
            Mutually exclusive with previousChatId.

        stream : typing.Optional[bool]
            Whether to stream the response or not.

        previous_chat_id : typing.Optional[str]
            This is the ID of the chat that will be used as context for the new chat.
            The messages from the previous chat will be used as context.
            Mutually exclusive with sessionId.

        transport : typing.Optional[TwilioSmsChatTransport]
            This is used to send the chat through a transport like SMS.
            If transport.phoneNumberId and transport.customer are provided, creates a new session.
            If sessionId is provided without transport fields, uses existing session data.
            Cannot specify both sessionId and transport fields (phoneNumberId/customer) together.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChatsCreateResponseResponse
            OpenAI Responses API format - either non-streaming or streaming

        Examples
        --------
        import asyncio

        from vapi import AsyncVapi

        client = AsyncVapi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.chats.create_response(
                input="input",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_response(
            input=input,
            assistant_id=assistant_id,
            assistant=assistant,
            assistant_overrides=assistant_overrides,
            squad_id=squad_id,
            squad=squad,
            name=name,
            session_id=session_id,
            stream=stream,
            previous_chat_id=previous_chat_id,
            transport=transport,
            request_options=request_options,
        )
        return _response.data
