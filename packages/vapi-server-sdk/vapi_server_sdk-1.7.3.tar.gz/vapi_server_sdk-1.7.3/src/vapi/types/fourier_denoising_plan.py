# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class FourierDenoisingPlan(UncheckedBaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether Fourier denoising is enabled. Note that this is experimental and may not work as expected.
    """

    media_detection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="mediaDetectionEnabled")
    ] = pydantic.Field(default=None)
    """
    Whether automatic media detection is enabled. When enabled, the filter will automatically
    detect consistent background TV/music/radio and switch to more aggressive filtering settings.
    Only applies when enabled is true.
    """

    static_threshold: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="staticThreshold")] = (
        pydantic.Field(default=None)
    )
    """
    Static threshold in dB used as fallback when no baseline is established.
    """

    baseline_offset_db: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="baselineOffsetDb")] = (
        pydantic.Field(default=None)
    )
    """
    How far below the rolling baseline to filter audio, in dB.
    Lower values (e.g., -10) are more aggressive, higher values (e.g., -20) are more conservative.
    """

    window_size_ms: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="windowSizeMs")] = (
        pydantic.Field(default=None)
    )
    """
    Rolling window size in milliseconds for calculating the audio baseline.
    Larger windows adapt more slowly but are more stable.
    """

    baseline_percentile: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="baselinePercentile")
    ] = pydantic.Field(default=None)
    """
    Percentile to use for baseline calculation (1-99).
    Higher percentiles (e.g., 85) focus on louder speech, lower percentiles (e.g., 50) include quieter speech.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
