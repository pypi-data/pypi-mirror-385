# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .assistant_overrides import AssistantOverrides
from .create_squad_dto import CreateSquadDto
from .create_workflow_dto import CreateWorkflowDto
from .workflow_overrides import WorkflowOverrides


class CreateWebCallDto(UncheckedBaseModel):
    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the assistant ID that will be used for the call. To use a transient assistant, use `assistant` instead.
    
    To start a call with:
    - Assistant, use `assistantId` or `assistant`
    - Squad, use `squadId` or `squad`
    - Workflow, use `workflowId` or `workflow`
    """

    assistant: typing.Optional["CreateAssistantDto"] = pydantic.Field(default=None)
    """
    This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.
    
    To start a call with:
    - Assistant, use `assistant`
    - Squad, use `squad`
    - Workflow, use `workflow`
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the overrides for the `assistant` or `assistantId`'s settings and template variables.
    """

    squad_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="squadId")] = pydantic.Field(
        default=None
    )
    """
    This is the squad that will be used for the call. To use a transient squad, use `squad` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    squad: typing.Optional[CreateSquadDto] = pydantic.Field(default=None)
    """
    This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workflowId")] = pydantic.Field(
        default=None
    )
    """
    This is the workflow that will be used for the call. To use a transient workflow, use `workflow` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow: typing.Optional[CreateWorkflowDto] = pydantic.Field(default=None)
    """
    This is a workflow that will be used for the call. To use an existing workflow, use `workflowId` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow_overrides: typing_extensions.Annotated[
        typing.Optional[WorkflowOverrides], FieldMetadata(alias="workflowOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the overrides for the `workflow` or `workflowId`'s settings and template variables.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .anthropic_model import AnthropicModel  # noqa: E402, F401, I001
from .anyscale_model import AnyscaleModel  # noqa: E402, F401, I001
from .call_hook_assistant_speech_interrupted import CallHookAssistantSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_call_ending import CallHookCallEnding  # noqa: E402, F401, I001
from .call_hook_customer_speech_interrupted import CallHookCustomerSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_customer_speech_timeout import CallHookCustomerSpeechTimeout  # noqa: E402, F401, I001
from .cerebras_model import CerebrasModel  # noqa: E402, F401, I001
from .create_assistant_dto import CreateAssistantDto  # noqa: E402, F401, I001
from .create_handoff_tool_dto import CreateHandoffToolDto  # noqa: E402, F401, I001
from .custom_llm_model import CustomLlmModel  # noqa: E402, F401, I001
from .deep_infra_model import DeepInfraModel  # noqa: E402, F401, I001
from .deep_seek_model import DeepSeekModel  # noqa: E402, F401, I001
from .google_model import GoogleModel  # noqa: E402, F401, I001
from .groq_model import GroqModel  # noqa: E402, F401, I001
from .group_condition import GroupCondition  # noqa: E402, F401, I001
from .handoff_destination_assistant import HandoffDestinationAssistant  # noqa: E402, F401, I001
from .inflection_ai_model import InflectionAiModel  # noqa: E402, F401, I001
from .open_ai_model import OpenAiModel  # noqa: E402, F401, I001
from .open_router_model import OpenRouterModel  # noqa: E402, F401, I001
from .perplexity_ai_model import PerplexityAiModel  # noqa: E402, F401, I001
from .together_ai_model import TogetherAiModel  # noqa: E402, F401, I001
from .tool_call_hook_action import ToolCallHookAction  # noqa: E402, F401, I001
from .xai_model import XaiModel  # noqa: E402, F401, I001

update_forward_refs(CreateWebCallDto)
