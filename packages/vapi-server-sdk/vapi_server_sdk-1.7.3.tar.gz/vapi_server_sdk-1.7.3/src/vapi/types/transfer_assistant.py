# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .transfer_assistant_first_message_mode import TransferAssistantFirstMessageMode
from .transfer_assistant_model import TransferAssistantModel


class TransferAssistant(UncheckedBaseModel):
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional name for the transfer assistant
    """

    model: TransferAssistantModel = pydantic.Field()
    """
    Model configuration for the transfer assistant
    """

    first_message: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="firstMessage")] = (
        pydantic.Field(default=None)
    )
    """
    This is the first message that the transfer assistant will say.
    This can also be a URL to a custom audio file.
    
    If unspecified, assistant will wait for user to speak and use the model to respond once they speak.
    """

    first_message_mode: typing_extensions.Annotated[
        typing.Optional[TransferAssistantFirstMessageMode], FieldMetadata(alias="firstMessageMode")
    ] = pydantic.Field(default=None)
    """
    This is the mode for the first message. Default is 'assistant-speaks-first'.
    
    Use:
    - 'assistant-speaks-first' to have the assistant speak first.
    - 'assistant-waits-for-user' to have the assistant wait for the user to speak first.
    - 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state.
    
    @default 'assistant-speaks-first'
    """

    max_duration_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="maxDurationSeconds")
    ] = pydantic.Field(default=None)
    """
    This is the maximum duration in seconds for the transfer assistant conversation.
    After this time, the transfer will be cancelled automatically.
    @default 120
    """

    silence_timeout_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="silenceTimeoutSeconds")
    ] = pydantic.Field(default=None)
    """
    This is the number of seconds of silence to wait before ending the call. Defaults to 30.
    
    @default 30
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
