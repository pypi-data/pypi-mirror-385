# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chunk_plan import ChunkPlan
from .fallback_plan import FallbackPlan
from .inworld_voice_language_code import InworldVoiceLanguageCode
from .inworld_voice_voice_id import InworldVoiceVoiceId


class InworldVoice(UncheckedBaseModel):
    caching_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cachingEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is the flag to toggle voice caching for the assistant.
    """

    provider: typing.Literal["inworld"] = pydantic.Field(default="inworld")
    """
    This is the voice provider that will be used.
    """

    voice_id: typing_extensions.Annotated[InworldVoiceVoiceId, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    Available voices by language:
    • en: Alex, Ashley, Craig, Deborah, Dennis, Edward, Elizabeth, Hades, Julia, Pixie, Mark, Olivia, Priya, Ronald, Sarah, Shaun, Theodore, Timothy, Wendy, Dominus
    • zh: Yichen, Xiaoyin, Xinyi, Jing
    • nl: Erik, Katrien, Lennart, Lore
    • fr: Alain, Hélène, Mathieu, Étienne
    • de: Johanna, Josef
    • it: Gianni, Orietta
    • ja: Asuka, Satoshi
    • ko: Hyunwoo, Minji, Seojun, Yoona
    • pl: Szymon, Wojciech
    • pt: Heitor, Maitê
    • es: Diego, Lupita, Miguel, Rafael
    """

    model: typing.Optional[typing.Literal["inworld-tts-1"]] = pydantic.Field(default=None)
    """
    This is the model that will be used.
    """

    language_code: typing_extensions.Annotated[
        typing.Optional[InworldVoiceLanguageCode], FieldMetadata(alias="languageCode")
    ] = pydantic.Field(default=None)
    """
    Language code for Inworld TTS synthesis
    """

    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for chunking the model output before it is sent to the voice provider.
    """

    fallback_plan: typing_extensions.Annotated[typing.Optional[FallbackPlan], FieldMetadata(alias="fallbackPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for voice provider fallbacks in the event that the primary voice provider fails.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
