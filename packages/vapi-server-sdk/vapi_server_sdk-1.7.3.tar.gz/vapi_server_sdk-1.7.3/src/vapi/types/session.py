# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .artifact import Artifact
from .create_customer_dto import CreateCustomerDto
from .create_squad_dto import CreateSquadDto
from .import_twilio_phone_number_dto import ImportTwilioPhoneNumberDto
from .session_messages_item import SessionMessagesItem
from .session_status import SessionStatus


class Session(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    This is the unique identifier for the session.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the organization that owns this session.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 timestamp indicating when the session was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 timestamp indicating when the session was last updated.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is a user-defined name for the session. Maximum length is 40 characters.
    """

    status: typing.Optional[SessionStatus] = pydantic.Field(default=None)
    """
    This is the current status of the session. Can be either 'active' or 'completed'.
    """

    expiration_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="expirationSeconds")
    ] = pydantic.Field(default=None)
    """
    Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.
    """

    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.
    """

    assistant: typing.Optional["CreateAssistantDto"] = pydantic.Field(default=None)
    """
    This is the assistant configuration for this session. Use this when creating a new assistant configuration.
    If assistantId is provided, this will be ignored.
    """

    squad_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="squadId")] = pydantic.Field(
        default=None
    )
    """
    This is the squad ID associated with this session. Use this when referencing an existing squad.
    """

    squad: typing.Optional[CreateSquadDto] = pydantic.Field(default=None)
    """
    This is the squad configuration for this session. Use this when creating a new squad configuration.
    If squadId is provided, this will be ignored.
    """

    messages: typing.Optional[typing.List[SessionMessagesItem]] = pydantic.Field(default=None)
    """
    This is an array of chat messages in the session.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer information associated with this session.
    """

    phone_number_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="phoneNumberId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the ID of the phone number associated with this session.
    """

    phone_number: typing_extensions.Annotated[
        typing.Optional[ImportTwilioPhoneNumberDto], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number configuration for this session.
    """

    artifact: typing.Optional[Artifact] = pydantic.Field(default=None)
    """
    These are the artifacts that were extracted from the session messages.
    They are only available after the session has completed.
    The artifact plan from the assistant or active assistant of squad is used to generate the artifact.
    Currently the only supported fields of assistant artifact plan are:
    - structuredOutputIds
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .anthropic_model import AnthropicModel  # noqa: E402, F401, I001
from .anyscale_model import AnyscaleModel  # noqa: E402, F401, I001
from .call_hook_assistant_speech_interrupted import CallHookAssistantSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_call_ending import CallHookCallEnding  # noqa: E402, F401, I001
from .call_hook_customer_speech_interrupted import CallHookCustomerSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_customer_speech_timeout import CallHookCustomerSpeechTimeout  # noqa: E402, F401, I001
from .cerebras_model import CerebrasModel  # noqa: E402, F401, I001
from .create_assistant_dto import CreateAssistantDto  # noqa: E402, F401, I001
from .create_handoff_tool_dto import CreateHandoffToolDto  # noqa: E402, F401, I001
from .custom_llm_model import CustomLlmModel  # noqa: E402, F401, I001
from .deep_infra_model import DeepInfraModel  # noqa: E402, F401, I001
from .deep_seek_model import DeepSeekModel  # noqa: E402, F401, I001
from .google_model import GoogleModel  # noqa: E402, F401, I001
from .groq_model import GroqModel  # noqa: E402, F401, I001
from .group_condition import GroupCondition  # noqa: E402, F401, I001
from .handoff_destination_assistant import HandoffDestinationAssistant  # noqa: E402, F401, I001
from .inflection_ai_model import InflectionAiModel  # noqa: E402, F401, I001
from .open_ai_model import OpenAiModel  # noqa: E402, F401, I001
from .open_router_model import OpenRouterModel  # noqa: E402, F401, I001
from .perplexity_ai_model import PerplexityAiModel  # noqa: E402, F401, I001
from .together_ai_model import TogetherAiModel  # noqa: E402, F401, I001
from .tool_call_hook_action import ToolCallHookAction  # noqa: E402, F401, I001
from .xai_model import XaiModel  # noqa: E402, F401, I001

update_forward_refs(Session)
