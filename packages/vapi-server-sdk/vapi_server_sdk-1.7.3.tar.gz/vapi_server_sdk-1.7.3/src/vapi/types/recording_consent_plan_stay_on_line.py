# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .recording_consent_plan_stay_on_line_voice import RecordingConsentPlanStayOnLineVoice


class RecordingConsentPlanStayOnLine(UncheckedBaseModel):
    message: str = pydantic.Field()
    """
    This is the message asking for consent to record the call.
    If the type is `stay-on-line`, the message should ask the user to hang up if they do not consent.
    If the type is `verbal`, the message should ask the user to verbally consent or decline.
    """

    voice: typing.Optional[RecordingConsentPlanStayOnLineVoice] = pydantic.Field(default=None)
    """
    This is the voice to use for the consent message. If not specified, inherits from the assistant's voice.
    Use a different voice for the consent message for a better user experience.
    """

    type: typing.Literal["stay-on-line"] = "stay-on-line"
    wait_seconds: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="waitSeconds")] = (
        pydantic.Field(default=None)
    )
    """
    Number of seconds to wait before transferring to the assistant if user stays on the call
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
