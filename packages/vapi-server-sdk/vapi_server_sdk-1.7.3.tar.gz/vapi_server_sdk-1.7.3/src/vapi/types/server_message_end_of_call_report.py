# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .analysis import Analysis
from .artifact import Artifact
from .call import Call
from .chat import Chat
from .compliance import Compliance
from .create_customer_dto import CreateCustomerDto
from .server_message_end_of_call_report_costs_item import ServerMessageEndOfCallReportCostsItem
from .server_message_end_of_call_report_ended_reason import ServerMessageEndOfCallReportEndedReason
from .server_message_end_of_call_report_phone_number import ServerMessageEndOfCallReportPhoneNumber


class ServerMessageEndOfCallReport(UncheckedBaseModel):
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageEndOfCallReportPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that the message is associated with.
    """

    type: typing.Literal["end-of-call-report"] = pydantic.Field(default="end-of-call-report")
    """
    This is the type of the message. "end-of-call-report" is sent when the call ends and post-processing is complete.
    """

    ended_reason: typing_extensions.Annotated[
        ServerMessageEndOfCallReportEndedReason, FieldMetadata(alias="endedReason")
    ] = pydantic.Field()
    """
    This is the reason the call ended. This can also be found at `call.endedReason` on GET /call/:id.
    """

    cost: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost of the call in USD. This can also be found at `call.cost` on GET /call/:id.
    """

    costs: typing.Optional[typing.List[ServerMessageEndOfCallReportCostsItem]] = pydantic.Field(default=None)
    """
    These are the costs of individual components of the call in USD. This can also be found at `call.costs` on GET /call/:id.
    """

    timestamp: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the timestamp of the message.
    """

    artifact: Artifact = pydantic.Field()
    """
    These are the artifacts from the call. This can also be found at `call.artifact` on GET /call/:id.
    """

    assistant: typing.Optional["CreateAssistantDto"] = pydantic.Field(default=None)
    """
    This is the assistant that the message is associated with.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that the message is associated with.
    """

    call: typing.Optional[Call] = pydantic.Field(default=None)
    """
    This is the call that the message is associated with.
    """

    chat: typing.Optional[Chat] = pydantic.Field(default=None)
    """
    This is the chat object.
    """

    analysis: Analysis = pydantic.Field()
    """
    This is the analysis of the call. This can also be found at `call.analysis` on GET /call/:id.
    """

    started_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="startedAt")] = (
        pydantic.Field(default=None)
    )
    """
    This is the ISO 8601 date-time string of when the call started. This can also be found at `call.startedAt` on GET /call/:id.
    """

    ended_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="endedAt")] = (
        pydantic.Field(default=None)
    )
    """
    This is the ISO 8601 date-time string of when the call ended. This can also be found at `call.endedAt` on GET /call/:id.
    """

    compliance: typing.Optional[Compliance] = pydantic.Field(default=None)
    """
    This is the compliance result of the call. This can also be found at `call.compliance` on GET /call/:id.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .anthropic_model import AnthropicModel  # noqa: E402, F401, I001
from .anyscale_model import AnyscaleModel  # noqa: E402, F401, I001
from .call_hook_assistant_speech_interrupted import CallHookAssistantSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_call_ending import CallHookCallEnding  # noqa: E402, F401, I001
from .call_hook_customer_speech_interrupted import CallHookCustomerSpeechInterrupted  # noqa: E402, F401, I001
from .call_hook_customer_speech_timeout import CallHookCustomerSpeechTimeout  # noqa: E402, F401, I001
from .cerebras_model import CerebrasModel  # noqa: E402, F401, I001
from .create_assistant_dto import CreateAssistantDto  # noqa: E402, F401, I001
from .create_handoff_tool_dto import CreateHandoffToolDto  # noqa: E402, F401, I001
from .custom_llm_model import CustomLlmModel  # noqa: E402, F401, I001
from .deep_infra_model import DeepInfraModel  # noqa: E402, F401, I001
from .deep_seek_model import DeepSeekModel  # noqa: E402, F401, I001
from .google_model import GoogleModel  # noqa: E402, F401, I001
from .groq_model import GroqModel  # noqa: E402, F401, I001
from .group_condition import GroupCondition  # noqa: E402, F401, I001
from .handoff_destination_assistant import HandoffDestinationAssistant  # noqa: E402, F401, I001
from .inflection_ai_model import InflectionAiModel  # noqa: E402, F401, I001
from .open_ai_model import OpenAiModel  # noqa: E402, F401, I001
from .open_router_model import OpenRouterModel  # noqa: E402, F401, I001
from .perplexity_ai_model import PerplexityAiModel  # noqa: E402, F401, I001
from .together_ai_model import TogetherAiModel  # noqa: E402, F401, I001
from .tool_call_hook_action import ToolCallHookAction  # noqa: E402, F401, I001
from .xai_model import XaiModel  # noqa: E402, F401, I001

update_forward_refs(ServerMessageEndOfCallReport)
