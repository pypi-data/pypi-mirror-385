# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class VariableExtractionAlias(UncheckedBaseModel):
    key: str = pydantic.Field()
    """
    This is the key of the variable.
    
    This variable will be accessible during the call as `{{key}}` and stored in `call.artifact.variableValues` after the call.
    
    Rules:
    - Must start with a letter (a-z, A-Z).
    - Subsequent characters can be letters, numbers, or underscores.
    - Minimum length of 1 and maximum length of 40.
    """

    value: str = pydantic.Field()
    """
    This is the value of the variable.
    
    This can reference existing variables, use filters, and perform transformations.
    
    Examples: "{{name}}", "{{customer.email}}", "Hello {{name | upcase}}"
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
