# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .eleven_labs_pronunciation_dictionary_permission_on_resource import (
    ElevenLabsPronunciationDictionaryPermissionOnResource,
)


class ElevenLabsPronunciationDictionary(UncheckedBaseModel):
    pronunciation_dictionary_id: typing_extensions.Annotated[str, FieldMetadata(alias="pronunciationDictionaryId")] = (
        pydantic.Field()
    )
    """
    The ID of the pronunciation dictionary
    """

    dictionary_name: typing_extensions.Annotated[str, FieldMetadata(alias="dictionaryName")] = pydantic.Field()
    """
    The name of the pronunciation dictionary
    """

    created_by: typing_extensions.Annotated[str, FieldMetadata(alias="createdBy")] = pydantic.Field()
    """
    The user ID of the creator
    """

    creation_time_unix: typing_extensions.Annotated[float, FieldMetadata(alias="creationTimeUnix")] = pydantic.Field()
    """
    The creation time in Unix timestamp
    """

    version_id: typing_extensions.Annotated[str, FieldMetadata(alias="versionId")] = pydantic.Field()
    """
    The version ID of the pronunciation dictionary
    """

    version_rules_num: typing_extensions.Annotated[float, FieldMetadata(alias="versionRulesNum")] = pydantic.Field()
    """
    The number of rules in this version
    """

    permission_on_resource: typing_extensions.Annotated[
        typing.Optional[ElevenLabsPronunciationDictionaryPermissionOnResource],
        FieldMetadata(alias="permissionOnResource"),
    ] = pydantic.Field(default=None)
    """
    The permission level on this resource
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the pronunciation dictionary
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
