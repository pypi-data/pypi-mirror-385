# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chunk_plan import ChunkPlan
from .fallback_plan import FallbackPlan
from .minimax_voice_language_boost import MinimaxVoiceLanguageBoost
from .minimax_voice_model import MinimaxVoiceModel
from .minimax_voice_region import MinimaxVoiceRegion


class MinimaxVoice(UncheckedBaseModel):
    caching_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cachingEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is the flag to toggle voice caching for the assistant.
    """

    provider: typing.Literal["minimax"] = pydantic.Field(default="minimax")
    """
    This is the voice provider that will be used.
    """

    voice_id: typing_extensions.Annotated[str, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    This is the provider-specific ID that will be used. Use a voice from MINIMAX_PREDEFINED_VOICES or a custom cloned voice ID.
    """

    model: typing.Optional[MinimaxVoiceModel] = pydantic.Field(default=None)
    """
    This is the model that will be used. Options are 'speech-02-hd' and 'speech-02-turbo'.
    speech-02-hd is optimized for high-fidelity applications like voiceovers and audiobooks.
    speech-02-turbo is designed for real-time applications with low latency.
    
    @default "speech-02-turbo"
    """

    emotion: typing.Optional[str] = pydantic.Field(default=None)
    """
    The emotion to use for the voice. If not provided, will use auto-detect mode.
    Options include: 'happy', 'sad', 'angry', 'fearful', 'surprised', 'disgusted', 'neutral'
    """

    pitch: typing.Optional[float] = pydantic.Field(default=None)
    """
    Voice pitch adjustment. Range from -12 to 12 semitones.
    @default 0
    """

    speed: typing.Optional[float] = pydantic.Field(default=None)
    """
    Voice speed adjustment. Range from 0.5 to 2.0.
    @default 1.0
    """

    volume: typing.Optional[float] = pydantic.Field(default=None)
    """
    Voice volume adjustment. Range from 0.5 to 2.0.
    @default 1.0
    """

    region: typing.Optional[MinimaxVoiceRegion] = pydantic.Field(default=None)
    """
    The region for Minimax API. Defaults to "worldwide".
    """

    language_boost: typing_extensions.Annotated[
        typing.Optional[MinimaxVoiceLanguageBoost], FieldMetadata(alias="languageBoost")
    ] = pydantic.Field(default=None)
    """
    Language hint for MiniMax T2A. Example: yue (Cantonese), zh (Chinese), en (English).
    """

    text_normalization_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="textNormalizationEnabled")
    ] = pydantic.Field(default=None)
    """
    Enable MiniMax text normalization to improve number reading and formatting.
    """

    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for chunking the model output before it is sent to the voice provider.
    """

    fallback_plan: typing_extensions.Annotated[typing.Optional[FallbackPlan], FieldMetadata(alias="fallbackPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for voice provider fallbacks in the event that the primary voice provider fails.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
