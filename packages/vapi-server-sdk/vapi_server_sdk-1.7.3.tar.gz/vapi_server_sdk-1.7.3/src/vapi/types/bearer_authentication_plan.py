# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class BearerAuthenticationPlan(UncheckedBaseModel):
    type: typing.Literal["bearer"] = "bearer"
    token: str = pydantic.Field()
    """
    This is the bearer token value.
    """

    header_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="headerName")] = pydantic.Field(
        default=None
    )
    """
    This is the header name where the bearer token will be sent. Defaults to 'Authorization'.
    """

    bearer_prefix_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="bearerPrefixEnabled")
    ] = pydantic.Field(default=None)
    """
    Whether to include the 'Bearer ' prefix in the header value. Defaults to true.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
