# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chat_eval_assistant_message_mock_tool_call import ChatEvalAssistantMessageMockToolCall


class ChatEvalAssistantMessageMock(UncheckedBaseModel):
    role: typing.Literal["assistant"] = pydantic.Field(default="assistant")
    """
    This is the role of the message author.
    For a mock assistant message, the role is always 'assistant'
    @default 'assistant'
    """

    content: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the content of the assistant message.
    This is the message that the assistant would have sent.
    """

    tool_calls: typing_extensions.Annotated[
        typing.Optional[typing.List[ChatEvalAssistantMessageMockToolCall]], FieldMetadata(alias="toolCalls")
    ] = pydantic.Field(default=None)
    """
    This is the tool calls that will be made by the assistant.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
