# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class CustomerSpeechTimeoutOptions(UncheckedBaseModel):
    timeout_seconds: typing_extensions.Annotated[float, FieldMetadata(alias="timeoutSeconds")] = pydantic.Field()
    """
    This is the timeout in seconds before action is triggered.
    The clock starts when the assistant finishes speaking and remains active until the user speaks.
    
    @default 7.5
    """

    trigger_max_count: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="triggerMaxCount")] = (
        pydantic.Field(default=None)
    )
    """
    This is the maximum number of times the hook will trigger in a call.
    
    @default 3
    """

    trigger_reset_mode: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="triggerResetMode")
    ] = pydantic.Field(default=None)
    """
    This is whether the counter for hook trigger resets the user speaks.
    
    @default never
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
