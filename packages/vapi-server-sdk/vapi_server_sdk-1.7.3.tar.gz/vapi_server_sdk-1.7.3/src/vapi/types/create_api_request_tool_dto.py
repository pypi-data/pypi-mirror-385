# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .backoff_plan import BackoffPlan
from .create_api_request_tool_dto_messages_item import CreateApiRequestToolDtoMessagesItem
from .create_api_request_tool_dto_method import CreateApiRequestToolDtoMethod
from .json_schema import JsonSchema
from .tool_rejection_plan import ToolRejectionPlan
from .variable_extraction_plan import VariableExtractionPlan


class CreateApiRequestToolDto(UncheckedBaseModel):
    messages: typing.Optional[typing.List[CreateApiRequestToolDtoMessagesItem]] = pydantic.Field(default=None)
    """
    These are the messages that will be spoken to the user as the tool is running.
    
    For some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.
    """

    type: typing.Literal["apiRequest"] = "apiRequest"
    method: CreateApiRequestToolDtoMethod
    timeout_seconds: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="timeoutSeconds")] = (
        pydantic.Field(default=None)
    )
    """
    This is the timeout in seconds for the request. Defaults to 20 seconds.
    
    @default 20
    """

    credential_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="credentialId")] = (
        pydantic.Field(default=None)
    )
    """
    The credential ID for API request authentication
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the tool. This will be passed to the model.
    
    Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 40.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the description of the tool. This will be passed to the model.
    """

    url: str = pydantic.Field()
    """
    This is where the request will be sent.
    """

    body: typing.Optional[JsonSchema] = pydantic.Field(default=None)
    """
    This is the body of the request.
    """

    headers: typing.Optional[JsonSchema] = pydantic.Field(default=None)
    """
    These are the headers to send with the request.
    """

    backoff_plan: typing_extensions.Annotated[typing.Optional[BackoffPlan], FieldMetadata(alias="backoffPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the backoff plan if the request fails. Defaults to undefined (the request will not be retried).
    
    @default undefined (the request will not be retried)
    """

    variable_extraction_plan: typing_extensions.Annotated[
        typing.Optional[VariableExtractionPlan], FieldMetadata(alias="variableExtractionPlan")
    ] = pydantic.Field(default=None)
    """
    This is the plan to extract variables from the tool's response. These will be accessible during the call and stored in `call.artifact.variableValues` after the call.
    
    Usage:
    1. Use `aliases` to extract variables from the tool's response body. (Most common case)
    
    ```json
    {
      "aliases": [
        {
          "key": "customerName",
          "value": "{{customer.name}}"
        },
        {
          "key": "customerAge",
          "value": "{{customer.age}}"
        }
      ]
    }
    ```
    
    The tool response body is made available to the liquid template.
    
    2. Use `aliases` to extract variables from the tool's response body if the response is an array.
    
    ```json
    {
      "aliases": [
        {
          "key": "customerName",
          "value": "{{$[0].name}}"
        },
        {
          "key": "customerAge",
          "value": "{{$[0].age}}"
        }
      ]
    }
    ```
    
    $ is a shorthand for the tool's response body. `$[0]` is the first item in the array. `$[n]` is the nth item in the array. Note, $ is available regardless of the response body type (both object and array).
    
    3. Use `aliases` to extract variables from the tool's response headers.
    
    ```json
    {
      "aliases": [
        {
          "key": "customerName",
          "value": "{{tool.response.headers.customer-name}}"
        },
        {
          "key": "customerAge",
          "value": "{{tool.response.headers.customer-age}}"
        }
      ]
    }
    ```
    
    `tool.response` is made available to the liquid template. Particularly, both `tool.response.headers` and `tool.response.body` are available. Note, `tool.response` is available regardless of the response body type (both object and array).
    
    4. Use `schema` to extract a large portion of the tool's response body.
    
    4.1. If you hit example.com and it returns `{"name": "John", "age": 30}`, then you can specify the schema as:
    
    ```json
    {
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "age": {
            "type": "number"
          }
        }
      }
    }
    ```
    These will be extracted as `{{ name }}` and `{{ age }}` respectively. To emphasize, object properties are extracted as direct global variables.
    
    4.2. If you hit example.com and it returns `{"name": {"first": "John", "last": "Doe"}}`, then you can specify the schema as:
    
    ```json
    {
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              }
            }
          }
        }
      }
    }
    ```
    
    These will be extracted as `{{ name }}`. And, `{{ name.first }}` and `{{ name.last }}` will be accessible.
    
    4.3. If you hit example.com and it returns `["94123", "94124"]`, then you can specify the schema as:
    
    ```json
    {
      "schema": {
        "type": "array",
        "title": "zipCodes",
        "items": {
          "type": "string"
        }
      }
    }
    ```
    
    This will be extracted as `{{ zipCodes }}`. To access the array items, you can use `{{ zipCodes[0] }}` and `{{ zipCodes[1] }}`.
    
    4.4. If you hit example.com and it returns `[{"name": "John", "age": 30, "zipCodes": ["94123", "94124"]}, {"name": "Jane", "age": 25, "zipCodes": ["94125", "94126"]}]`, then you can specify the schema as:
    
    ```json
    {
      "schema": {
        "type": "array",
        "title": "people",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "age": {
              "type": "number"
            },
            "zipCodes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    }
    ```
    
    This will be extracted as `{{ people }}`. To access the array items, you can use `{{ people[n].name }}`, `{{ people[n].age }}`, `{{ people[n].zipCodes }}`, `{{ people[n].zipCodes[0] }}` and `{{ people[n].zipCodes[1] }}`.
    
    Note: Both `aliases` and `schema` can be used together.
    """

    rejection_plan: typing_extensions.Annotated[
        typing.Optional[ToolRejectionPlan], FieldMetadata(alias="rejectionPlan")
    ] = pydantic.Field(default=None)
    """
    This is the plan to reject a tool call based on the conversation state.
    
    // Example 1: Reject endCall if user didn't say goodbye
    ```json
    {
      conditions: [{
        type: 'regex',
        regex: '(?i)\\\\b(bye|goodbye|farewell|see you later|take care)\\\\b',
        target: { position: -1, role: 'user' },
        negate: true  // Reject if pattern does NOT match
      }]
    }
    ```
    
    // Example 2: Reject transfer if user is actually asking a question
    ```json
    {
      conditions: [{
        type: 'regex',
        regex: '\\\\?',
        target: { position: -1, role: 'user' }
      }]
    }
    ```
    
    // Example 3: Reject transfer if user didn't mention transfer recently
    ```json
    {
      conditions: [{
        type: 'liquid',
        liquid: `{% assign recentMessages = messages | last: 5 %}
    {% assign userMessages = recentMessages | where: 'role', 'user' %}
    {% assign mentioned = false %}
    {% for msg in userMessages %}
      {% if msg.content contains 'transfer' or msg.content contains 'connect' or msg.content contains 'speak to' %}
        {% assign mentioned = true %}
        {% break %}
      {% endif %}
    {% endfor %}
    {% if mentioned %}
      false
    {% else %}
      true
    {% endif %}`
      }]
    }
    ```
    
    // Example 4: Reject endCall if the bot is looping and trying to exit
    ```json
    {
      conditions: [{
        type: 'liquid',
        liquid: `{% assign recentMessages = messages | last: 6 %}
    {% assign userMessages = recentMessages | where: 'role', 'user' | reverse %}
    {% if userMessages.size < 3 %}
      false
    {% else %}
      {% assign msg1 = userMessages[0].content | downcase %}
      {% assign msg2 = userMessages[1].content | downcase %}
      {% assign msg3 = userMessages[2].content | downcase %}
      {% comment %} Check for repetitive messages {% endcomment %}
      {% if msg1 == msg2 or msg1 == msg3 or msg2 == msg3 %}
        true
      {% comment %} Check for common loop phrases {% endcomment %}
      {% elsif msg1 contains 'cool thanks' or msg2 contains 'cool thanks' or msg3 contains 'cool thanks' %}
        true
      {% elsif msg1 contains 'okay thanks' or msg2 contains 'okay thanks' or msg3 contains 'okay thanks' %}
        true
      {% elsif msg1 contains 'got it' or msg2 contains 'got it' or msg3 contains 'got it' %}
        true
      {% else %}
        false
      {% endif %}
    {% endif %}`
      }]
    }
    ```
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .group_condition import GroupCondition  # noqa: E402, F401, I001

update_forward_refs(CreateApiRequestToolDto)
