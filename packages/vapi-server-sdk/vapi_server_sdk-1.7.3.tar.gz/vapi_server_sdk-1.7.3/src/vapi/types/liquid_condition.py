# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class LiquidCondition(UncheckedBaseModel):
    type: typing.Literal["liquid"] = pydantic.Field(default="liquid")
    """
    This is the type discriminator for liquid condition
    """

    liquid: str = pydantic.Field()
    """
    This is the Liquid template that must return exactly "true" or "false" as a string.
    The template is evaluated and the entire output must be either "true" or "false" - nothing else.
    
    Available variables:
    - `messages`: Array of recent messages in OpenAI chat completions format (ChatCompletionMessageParam[])
      Each message has properties like: role ('user', 'assistant', 'system'), content (string), etc.
    - `now`: Current timestamp in milliseconds (built-in Liquid variable)
    - Any assistant variable values (e.g., `userName`, `accountStatus`)
    
    Useful Liquid filters for messages:
    - `messages | last: 5` - Get the 5 most recent messages
    - `messages | where: 'role', 'user'` - Filter to only user messages
    - `messages | reverse` - Reverse the order of messages
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
