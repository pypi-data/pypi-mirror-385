# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .eleven_labs_pronunciation_dictionary import ElevenLabsPronunciationDictionary


class ProviderResource(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    This is the unique identifier for the provider resource.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the org that this provider resource belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the provider resource was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the provider resource was last updated.
    """

    provider: typing.Literal["11labs"] = pydantic.Field(default="11labs")
    """
    This is the provider that manages this resource.
    """

    resource_name: typing_extensions.Annotated[
        typing.Literal["pronunciation-dictionary"], FieldMetadata(alias="resourceName")
    ] = pydantic.Field(default="pronunciation-dictionary")
    """
    This is the name/type of the resource.
    """

    resource_id: typing_extensions.Annotated[str, FieldMetadata(alias="resourceId")] = pydantic.Field()
    """
    This is the provider-specific identifier for the resource.
    """

    resource: ElevenLabsPronunciationDictionary = pydantic.Field()
    """
    This is the full resource data from the provider's API.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
