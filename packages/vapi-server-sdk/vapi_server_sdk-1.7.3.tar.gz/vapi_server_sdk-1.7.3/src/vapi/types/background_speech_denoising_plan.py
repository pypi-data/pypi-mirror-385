# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .fourier_denoising_plan import FourierDenoisingPlan
from .smart_denoising_plan import SmartDenoisingPlan


class BackgroundSpeechDenoisingPlan(UncheckedBaseModel):
    smart_denoising_plan: typing_extensions.Annotated[
        typing.Optional[SmartDenoisingPlan], FieldMetadata(alias="smartDenoisingPlan")
    ] = pydantic.Field(default=None)
    """
    Whether smart denoising using Krisp is enabled.
    """

    fourier_denoising_plan: typing_extensions.Annotated[
        typing.Optional[FourierDenoisingPlan], FieldMetadata(alias="fourierDenoisingPlan")
    ] = pydantic.Field(default=None)
    """
    Whether Fourier denoising is enabled. Note that this is experimental and may not work as expected.
    
    This can be combined with smart denoising, and will be run afterwards.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
