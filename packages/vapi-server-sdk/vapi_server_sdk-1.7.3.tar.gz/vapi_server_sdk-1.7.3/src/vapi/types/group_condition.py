# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel
from .group_condition_operator import GroupConditionOperator


class GroupCondition(UncheckedBaseModel):
    type: typing.Literal["group"] = pydantic.Field(default="group")
    """
    This is the type discriminator for group condition
    """

    operator: GroupConditionOperator = pydantic.Field()
    """
    This is the logical operator for combining conditions in this group
    """

    conditions: typing.List["GroupConditionConditionsItem"] = pydantic.Field()
    """
    This is the list of nested conditions to evaluate.
    Supports recursive nesting of groups for complex logic.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .group_condition_conditions_item import GroupConditionConditionsItem  # noqa: E402, F401, I001

update_forward_refs(GroupCondition)
