# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .message_target import MessageTarget


class RegexCondition(UncheckedBaseModel):
    type: typing.Literal["regex"] = pydantic.Field(default="regex")
    """
    This is the type discriminator for regex condition
    """

    regex: str = pydantic.Field()
    """
    This is the regular expression pattern to match against message content.
    
    Note:
    - This works by using the RegExp.test method in Node.JS. Eg. /hello/.test("hello there") will return true.
    
    Hot tips:
    - In JavaScript, escape \\ when sending the regex pattern. Eg. "hello\\sthere" will be sent over the wire as "hellosthere". Send "hello\\\\sthere" instead.
    - RegExp.test does substring matching, so /cat/.test("I love cats") will return true. To do full string matching, use anchors: /^cat$/ will only match exactly "cat".
    - Word boundaries \\b are useful for matching whole words: /\\bcat\\b/ matches "cat" but not "cats" or "category".
    - Use inline flags for portability: (?i) for case insensitive, (?m) for multiline
    """

    target: typing.Optional[MessageTarget] = pydantic.Field(default=None)
    """
    This is the target for messages to check against.
    If not specified, the condition will run on the last message (position: -1).
    If role is not specified, it will look at the last message regardless of role.
    @default { position: -1 }
    """

    negate: typing.Optional[bool] = pydantic.Field(default=None)
    """
    This is the flag that when true, the condition matches if the pattern does NOT match.
    Useful for ensuring certain words/phrases are absent.
    
    @default false
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
