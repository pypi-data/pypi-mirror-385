# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyminiexact
else:
    import _pyminiexact

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyminiexact.delete_SwigPyIterator

    def value(self):
        return _pyminiexact.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyminiexact.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyminiexact.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyminiexact.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyminiexact.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyminiexact.SwigPyIterator_copy(self)

    def next(self):
        return _pyminiexact.SwigPyIterator_next(self)

    def __next__(self):
        return _pyminiexact.SwigPyIterator___next__(self)

    def previous(self):
        return _pyminiexact.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyminiexact.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyminiexact.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyminiexact.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyminiexact.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyminiexact.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyminiexact.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyminiexact.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyminiexact:
_pyminiexact.SwigPyIterator_swigregister(SwigPyIterator)
class vectorstr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyminiexact.vectorstr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyminiexact.vectorstr___nonzero__(self)

    def __bool__(self):
        return _pyminiexact.vectorstr___bool__(self)

    def __len__(self):
        return _pyminiexact.vectorstr___len__(self)

    def __getslice__(self, i, j):
        return _pyminiexact.vectorstr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyminiexact.vectorstr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyminiexact.vectorstr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyminiexact.vectorstr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyminiexact.vectorstr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyminiexact.vectorstr___setitem__(self, *args)

    def pop(self):
        return _pyminiexact.vectorstr_pop(self)

    def append(self, x):
        return _pyminiexact.vectorstr_append(self, x)

    def empty(self):
        return _pyminiexact.vectorstr_empty(self)

    def size(self):
        return _pyminiexact.vectorstr_size(self)

    def swap(self, v):
        return _pyminiexact.vectorstr_swap(self, v)

    def begin(self):
        return _pyminiexact.vectorstr_begin(self)

    def end(self):
        return _pyminiexact.vectorstr_end(self)

    def rbegin(self):
        return _pyminiexact.vectorstr_rbegin(self)

    def rend(self):
        return _pyminiexact.vectorstr_rend(self)

    def clear(self):
        return _pyminiexact.vectorstr_clear(self)

    def get_allocator(self):
        return _pyminiexact.vectorstr_get_allocator(self)

    def pop_back(self):
        return _pyminiexact.vectorstr_pop_back(self)

    def erase(self, *args):
        return _pyminiexact.vectorstr_erase(self, *args)

    def __init__(self, *args):
        _pyminiexact.vectorstr_swiginit(self, _pyminiexact.new_vectorstr(*args))

    def push_back(self, x):
        return _pyminiexact.vectorstr_push_back(self, x)

    def front(self):
        return _pyminiexact.vectorstr_front(self)

    def back(self):
        return _pyminiexact.vectorstr_back(self)

    def assign(self, n, x):
        return _pyminiexact.vectorstr_assign(self, n, x)

    def resize(self, *args):
        return _pyminiexact.vectorstr_resize(self, *args)

    def insert(self, *args):
        return _pyminiexact.vectorstr_insert(self, *args)

    def reserve(self, n):
        return _pyminiexact.vectorstr_reserve(self, n)

    def capacity(self):
        return _pyminiexact.vectorstr_capacity(self)
    __swig_destroy__ = _pyminiexact.delete_vectorstr

# Register vectorstr in _pyminiexact:
_pyminiexact.vectorstr_swigregister(vectorstr)
class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyminiexact.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyminiexact.vectori___nonzero__(self)

    def __bool__(self):
        return _pyminiexact.vectori___bool__(self)

    def __len__(self):
        return _pyminiexact.vectori___len__(self)

    def __getslice__(self, i, j):
        return _pyminiexact.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyminiexact.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyminiexact.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyminiexact.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyminiexact.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyminiexact.vectori___setitem__(self, *args)

    def pop(self):
        return _pyminiexact.vectori_pop(self)

    def append(self, x):
        return _pyminiexact.vectori_append(self, x)

    def empty(self):
        return _pyminiexact.vectori_empty(self)

    def size(self):
        return _pyminiexact.vectori_size(self)

    def swap(self, v):
        return _pyminiexact.vectori_swap(self, v)

    def begin(self):
        return _pyminiexact.vectori_begin(self)

    def end(self):
        return _pyminiexact.vectori_end(self)

    def rbegin(self):
        return _pyminiexact.vectori_rbegin(self)

    def rend(self):
        return _pyminiexact.vectori_rend(self)

    def clear(self):
        return _pyminiexact.vectori_clear(self)

    def get_allocator(self):
        return _pyminiexact.vectori_get_allocator(self)

    def pop_back(self):
        return _pyminiexact.vectori_pop_back(self)

    def erase(self, *args):
        return _pyminiexact.vectori_erase(self, *args)

    def __init__(self, *args):
        _pyminiexact.vectori_swiginit(self, _pyminiexact.new_vectori(*args))

    def push_back(self, x):
        return _pyminiexact.vectori_push_back(self, x)

    def front(self):
        return _pyminiexact.vectori_front(self)

    def back(self):
        return _pyminiexact.vectori_back(self)

    def assign(self, n, x):
        return _pyminiexact.vectori_assign(self, n, x)

    def resize(self, *args):
        return _pyminiexact.vectori_resize(self, *args)

    def insert(self, *args):
        return _pyminiexact.vectori_insert(self, *args)

    def reserve(self, n):
        return _pyminiexact.vectori_reserve(self, n)

    def capacity(self):
        return _pyminiexact.vectori_capacity(self)
    __swig_destroy__ = _pyminiexact.delete_vectori

# Register vectori in _pyminiexact:
_pyminiexact.vectori_swigregister(vectori)
class miniexact_config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    verbose = property(_pyminiexact.miniexact_config_verbose_get, _pyminiexact.miniexact_config_verbose_set)
    print_options = property(_pyminiexact.miniexact_config_print_options_get, _pyminiexact.miniexact_config_print_options_set)
    print_x = property(_pyminiexact.miniexact_config_print_x_get, _pyminiexact.miniexact_config_print_x_set)
    enumerate = property(_pyminiexact.miniexact_config_enumerate_get, _pyminiexact.miniexact_config_enumerate_set)
    print_dlx = property(_pyminiexact.miniexact_config_print_dlx_get, _pyminiexact.miniexact_config_print_dlx_set)
    parse_dlx = property(_pyminiexact.miniexact_config_parse_dlx_get, _pyminiexact.miniexact_config_parse_dlx_set)
    transform_to_libexact = property(_pyminiexact.miniexact_config_transform_to_libexact_get, _pyminiexact.miniexact_config_transform_to_libexact_set)
    algorithm_select = property(_pyminiexact.miniexact_config_algorithm_select_get, _pyminiexact.miniexact_config_algorithm_select_set)
    solutions = property(_pyminiexact.miniexact_config_solutions_get, _pyminiexact.miniexact_config_solutions_set)
    input_files = property(_pyminiexact.miniexact_config_input_files_get, _pyminiexact.miniexact_config_input_files_set)
    input_files_count = property(_pyminiexact.miniexact_config_input_files_count_get, _pyminiexact.miniexact_config_input_files_count_set)
    current_input_file = property(_pyminiexact.miniexact_config_current_input_file_get, _pyminiexact.miniexact_config_current_input_file_set)

    def __init__(self):
        _pyminiexact.miniexact_config_swiginit(self, _pyminiexact.new_miniexact_config())
    __swig_destroy__ = _pyminiexact.delete_miniexact_config

# Register miniexact_config in _pyminiexact:
_pyminiexact.miniexact_config_swigregister(miniexact_config)
MINIEXACT_ALGORITHM_NAIVE = _pyminiexact.MINIEXACT_ALGORITHM_NAIVE
MINIEXACT_ALGORITHM_MRV = _pyminiexact.MINIEXACT_ALGORITHM_MRV
MINIEXACT_ALGORITHM_MRV_SLACKER = _pyminiexact.MINIEXACT_ALGORITHM_MRV_SLACKER
MINIEXACT_ALGORITHM_X = _pyminiexact.MINIEXACT_ALGORITHM_X
MINIEXACT_ALGORITHM_C = _pyminiexact.MINIEXACT_ALGORITHM_C
MINIEXACT_ALGORITHM_M = _pyminiexact.MINIEXACT_ALGORITHM_M
MINIEXACT_ALGORITHM_KNUTH_CNF = _pyminiexact.MINIEXACT_ALGORITHM_KNUTH_CNF
MINIEXACT_ALGORITHM_DOLLARS = _pyminiexact.MINIEXACT_ALGORITHM_DOLLARS
MINIEXACT_ALGORITHM_C_DOLLAR = _pyminiexact.MINIEXACT_ALGORITHM_C_DOLLAR
MINIEXACT_LONG_OPTIONS = _pyminiexact.MINIEXACT_LONG_OPTIONS
MINIEXACT_OPTION_PRINT_X = _pyminiexact.MINIEXACT_OPTION_PRINT_X
class miniexact_problem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    llink = property(_pyminiexact.miniexact_problem_llink_get, _pyminiexact.miniexact_problem_llink_set)
    llink_size = property(_pyminiexact.miniexact_problem_llink_size_get, _pyminiexact.miniexact_problem_llink_size_set)
    llink_capacity = property(_pyminiexact.miniexact_problem_llink_capacity_get, _pyminiexact.miniexact_problem_llink_capacity_set)
    rlink = property(_pyminiexact.miniexact_problem_rlink_get, _pyminiexact.miniexact_problem_rlink_set)
    rlink_size = property(_pyminiexact.miniexact_problem_rlink_size_get, _pyminiexact.miniexact_problem_rlink_size_set)
    rlink_capacity = property(_pyminiexact.miniexact_problem_rlink_capacity_get, _pyminiexact.miniexact_problem_rlink_capacity_set)
    ulink = property(_pyminiexact.miniexact_problem_ulink_get, _pyminiexact.miniexact_problem_ulink_set)
    ulink_size = property(_pyminiexact.miniexact_problem_ulink_size_get, _pyminiexact.miniexact_problem_ulink_size_set)
    ulink_capacity = property(_pyminiexact.miniexact_problem_ulink_capacity_get, _pyminiexact.miniexact_problem_ulink_capacity_set)
    dlink = property(_pyminiexact.miniexact_problem_dlink_get, _pyminiexact.miniexact_problem_dlink_set)
    dlink_size = property(_pyminiexact.miniexact_problem_dlink_size_get, _pyminiexact.miniexact_problem_dlink_size_set)
    dlink_capacity = property(_pyminiexact.miniexact_problem_dlink_capacity_get, _pyminiexact.miniexact_problem_dlink_capacity_set)
    top = property(_pyminiexact.miniexact_problem_top_get, _pyminiexact.miniexact_problem_top_set)
    top_size = property(_pyminiexact.miniexact_problem_top_size_get, _pyminiexact.miniexact_problem_top_size_set)
    top_capacity = property(_pyminiexact.miniexact_problem_top_capacity_get, _pyminiexact.miniexact_problem_top_capacity_set)
    name = property(_pyminiexact.miniexact_problem_name_get, _pyminiexact.miniexact_problem_name_set)
    name_size = property(_pyminiexact.miniexact_problem_name_size_get, _pyminiexact.miniexact_problem_name_size_set)
    name_capacity = property(_pyminiexact.miniexact_problem_name_capacity_get, _pyminiexact.miniexact_problem_name_capacity_set)
    color_name = property(_pyminiexact.miniexact_problem_color_name_get, _pyminiexact.miniexact_problem_color_name_set)
    color_name_size = property(_pyminiexact.miniexact_problem_color_name_size_get, _pyminiexact.miniexact_problem_color_name_size_set)
    color_name_capacity = property(_pyminiexact.miniexact_problem_color_name_capacity_get, _pyminiexact.miniexact_problem_color_name_capacity_set)
    color = property(_pyminiexact.miniexact_problem_color_get, _pyminiexact.miniexact_problem_color_set)
    color_size = property(_pyminiexact.miniexact_problem_color_size_get, _pyminiexact.miniexact_problem_color_size_set)
    color_capacity = property(_pyminiexact.miniexact_problem_color_capacity_get, _pyminiexact.miniexact_problem_color_capacity_set)
    ft = property(_pyminiexact.miniexact_problem_ft_get, _pyminiexact.miniexact_problem_ft_set)
    ft_size = property(_pyminiexact.miniexact_problem_ft_size_get, _pyminiexact.miniexact_problem_ft_size_set)
    ft_capacity = property(_pyminiexact.miniexact_problem_ft_capacity_get, _pyminiexact.miniexact_problem_ft_capacity_set)
    slack = property(_pyminiexact.miniexact_problem_slack_get, _pyminiexact.miniexact_problem_slack_set)
    slack_size = property(_pyminiexact.miniexact_problem_slack_size_get, _pyminiexact.miniexact_problem_slack_size_set)
    slack_capacity = property(_pyminiexact.miniexact_problem_slack_capacity_get, _pyminiexact.miniexact_problem_slack_capacity_set)
    bound = property(_pyminiexact.miniexact_problem_bound_get, _pyminiexact.miniexact_problem_bound_set)
    bound_size = property(_pyminiexact.miniexact_problem_bound_size_get, _pyminiexact.miniexact_problem_bound_size_set)
    bound_capacity = property(_pyminiexact.miniexact_problem_bound_capacity_get, _pyminiexact.miniexact_problem_bound_capacity_set)
    cost = property(_pyminiexact.miniexact_problem_cost_get, _pyminiexact.miniexact_problem_cost_set)
    cost_size = property(_pyminiexact.miniexact_problem_cost_size_get, _pyminiexact.miniexact_problem_cost_size_set)
    cost_capacity = property(_pyminiexact.miniexact_problem_cost_capacity_get, _pyminiexact.miniexact_problem_cost_capacity_set)
    best = property(_pyminiexact.miniexact_problem_best_get, _pyminiexact.miniexact_problem_best_set)
    best_size = property(_pyminiexact.miniexact_problem_best_size_get, _pyminiexact.miniexact_problem_best_size_set)
    best_capacity = property(_pyminiexact.miniexact_problem_best_capacity_get, _pyminiexact.miniexact_problem_best_capacity_set)
    tho = property(_pyminiexact.miniexact_problem_tho_get, _pyminiexact.miniexact_problem_tho_set)
    tho_size = property(_pyminiexact.miniexact_problem_tho_size_get, _pyminiexact.miniexact_problem_tho_size_set)
    tho_capacity = property(_pyminiexact.miniexact_problem_tho_capacity_get, _pyminiexact.miniexact_problem_tho_capacity_set)
    th = property(_pyminiexact.miniexact_problem_th_get, _pyminiexact.miniexact_problem_th_set)
    th_size = property(_pyminiexact.miniexact_problem_th_size_get, _pyminiexact.miniexact_problem_th_size_set)
    th_capacity = property(_pyminiexact.miniexact_problem_th_capacity_get, _pyminiexact.miniexact_problem_th_capacity_set)
    x = property(_pyminiexact.miniexact_problem_x_get, _pyminiexact.miniexact_problem_x_set)
    x_size = property(_pyminiexact.miniexact_problem_x_size_get, _pyminiexact.miniexact_problem_x_size_set)
    x_capacity = property(_pyminiexact.miniexact_problem_x_capacity_get, _pyminiexact.miniexact_problem_x_capacity_set)
    N = property(_pyminiexact.miniexact_problem_N_get, _pyminiexact.miniexact_problem_N_set)
    N_1 = property(_pyminiexact.miniexact_problem_N_1_get, _pyminiexact.miniexact_problem_N_1_set)
    M = property(_pyminiexact.miniexact_problem_M_get, _pyminiexact.miniexact_problem_M_set)
    i = property(_pyminiexact.miniexact_problem_i_get, _pyminiexact.miniexact_problem_i_set)
    j = property(_pyminiexact.miniexact_problem_j_get, _pyminiexact.miniexact_problem_j_set)
    l = property(_pyminiexact.miniexact_problem_l_get, _pyminiexact.miniexact_problem_l_set)
    p = property(_pyminiexact.miniexact_problem_p_get, _pyminiexact.miniexact_problem_p_set)
    q = property(_pyminiexact.miniexact_problem_q_get, _pyminiexact.miniexact_problem_q_set)
    Z = property(_pyminiexact.miniexact_problem_Z_get, _pyminiexact.miniexact_problem_Z_set)
    K = property(_pyminiexact.miniexact_problem_K_get, _pyminiexact.miniexact_problem_K_set)
    primary_item_count = property(_pyminiexact.miniexact_problem_primary_item_count_get, _pyminiexact.miniexact_problem_primary_item_count_set)
    secondary_item_count = property(_pyminiexact.miniexact_problem_secondary_item_count_get, _pyminiexact.miniexact_problem_secondary_item_count_set)
    option_count = property(_pyminiexact.miniexact_problem_option_count_get, _pyminiexact.miniexact_problem_option_count_set)
    state = property(_pyminiexact.miniexact_problem_state_get, _pyminiexact.miniexact_problem_state_set)
    longest_option = property(_pyminiexact.miniexact_problem_longest_option_get, _pyminiexact.miniexact_problem_longest_option_set)
    max_option_cost = property(_pyminiexact.miniexact_problem_max_option_cost_get, _pyminiexact.miniexact_problem_max_option_cost_set)
    algorithm_userdata = property(_pyminiexact.miniexact_problem_algorithm_userdata_get, _pyminiexact.miniexact_problem_algorithm_userdata_set)
    cfg = property(_pyminiexact.miniexact_problem_cfg_get, _pyminiexact.miniexact_problem_cfg_set)

    def __init__(self):
        _pyminiexact.miniexact_problem_swiginit(self, _pyminiexact.new_miniexact_problem())
    __swig_destroy__ = _pyminiexact.delete_miniexact_problem

# Register miniexact_problem in _pyminiexact:
_pyminiexact.miniexact_problem_swigregister(miniexact_problem)

def miniexact_search_for_name(needle, names, names_size):
    return _pyminiexact.miniexact_search_for_name(needle, names, names_size)

def miniexact_has_item(needle, list, len):
    return _pyminiexact.miniexact_has_item(needle, list, len)

def miniexact_problem_allocate():
    return _pyminiexact.miniexact_problem_allocate()

def miniexact_problem_free_inner(p, a):
    return _pyminiexact.miniexact_problem_free_inner(p, a)

def miniexact_problem_free(p, a):
    return _pyminiexact.miniexact_problem_free(p, a)

def miniexact_item_from_ident(p, ident):
    return _pyminiexact.miniexact_item_from_ident(p, ident)

def miniexact_insert_ident_as_name(p, ident):
    return _pyminiexact.miniexact_insert_ident_as_name(p, ident)

def miniexact_append_NULL_to_name(p):
    return _pyminiexact.miniexact_append_NULL_to_name(p)

def miniexact_color_from_ident(p, ident):
    return _pyminiexact.miniexact_color_from_ident(p, ident)

def miniexact_color_from_ident_or_insert(p, ident):
    return _pyminiexact.miniexact_color_from_ident_or_insert(p, ident)

def miniexact_print_problem_matrix(p):
    return _pyminiexact.miniexact_print_problem_matrix(p)

def miniexact_print_problem_matrix_in_libexact_format(p):
    return _pyminiexact.miniexact_print_problem_matrix_in_libexact_format(p)

def miniexact_write_problem_to_dlx(p, o):
    return _pyminiexact.miniexact_write_problem_to_dlx(p, o)

def miniexact_print_problem_solution(p):
    return _pyminiexact.miniexact_print_problem_solution(p)

def miniexact_extract_solution_option_indices(p, solution):
    return _pyminiexact.miniexact_extract_solution_option_indices(p, solution)

def miniexact_extract_solution_item_colors(p, solution):
    return _pyminiexact.miniexact_extract_solution_item_colors(p, solution)

def miniexacts_init_x():
    return _pyminiexact.miniexacts_init_x()

def miniexacts_init_c():
    return _pyminiexact.miniexacts_init_c()

def miniexacts_init_m():
    return _pyminiexact.miniexacts_init_m()

def miniexacts_define_primary_item_with_slack(h, name, u, v):
    return _pyminiexact.miniexacts_define_primary_item_with_slack(h, name, u, v)

def miniexacts_define_primary_item(h, name):
    return _pyminiexact.miniexacts_define_primary_item(h, name)

def miniexacts_define_secondary_item(h, name):
    return _pyminiexact.miniexacts_define_secondary_item(h, name)

def miniexacts_define_color(h, name):
    return _pyminiexact.miniexacts_define_color(h, name)

def miniexacts_add_named(h, name, color, cost):
    return _pyminiexact.miniexacts_add_named(h, name, color, cost)

def miniexacts_add(h, item, color, cost):
    return _pyminiexact.miniexacts_add(h, item, color, cost)

def miniexacts_solve(h):
    return _pyminiexact.miniexacts_solve(h)

def miniexacts_solution(h, it, userdata):
    return _pyminiexact.miniexacts_solution(h, it, userdata)

def miniexacts_solution_length(h):
    return _pyminiexact.miniexacts_solution_length(h)

def miniexacts_extract_solution(h, arr):
    return _pyminiexact.miniexacts_extract_solution(h, arr)

def miniexacts_extract_colors(h, items):
    return _pyminiexact.miniexacts_extract_colors(h, items)

def miniexacts_write_to_dlx(h, path):
    return _pyminiexact.miniexacts_write_to_dlx(h, path)

def miniexacts_problem(h):
    return _pyminiexact.miniexacts_problem(h)

def miniexacts_free(h):
    return _pyminiexact.miniexacts_free(h)

def miniexacts_version():
    return _pyminiexact.miniexacts_version()
class miniexacts_x(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyminiexact.miniexacts_x_swiginit(self, _pyminiexact.new_miniexacts_x())
    __swig_destroy__ = _pyminiexact.delete_miniexacts_x

    def primary(self, name, u=1, v=1):
        return _pyminiexact.miniexacts_x_primary(self, name, u, v)

    def secondary(self, name):
        return _pyminiexact.miniexacts_x_secondary(self, name)

    def color(self, name):
        return _pyminiexact.miniexacts_x_color(self, name)

    def add(self, *args):
        return _pyminiexact.miniexacts_x_add(self, *args)

    def solve(self):
        return _pyminiexact.miniexacts_x_solve(self)

    def solution(self, *args):
        return _pyminiexact.miniexacts_x_solution(self, *args)

    def selected_options(self):
        return _pyminiexact.miniexacts_x_selected_options(self)

    def item_colors(self):
        return _pyminiexact.miniexacts_x_item_colors(self)

    def size(self):
        return _pyminiexact.miniexacts_x_size(self)

    def write_to_dlx(self, path):
        return _pyminiexact.miniexacts_x_write_to_dlx(self, path)

    def has_solution(self):
        return _pyminiexact.miniexacts_x_has_solution(self)

    def print_solution(self):
        return _pyminiexact.miniexacts_x_print_solution(self)

    def problem(self):
        return _pyminiexact.miniexacts_x_problem(self)

    def __getitem__(self, i):
        return _pyminiexact.miniexacts_x___getitem__(self, i)

# Register miniexacts_x in _pyminiexact:
_pyminiexact.miniexacts_x_swigregister(miniexacts_x)
class miniexacts_c(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyminiexact.miniexacts_c_swiginit(self, _pyminiexact.new_miniexacts_c())
    __swig_destroy__ = _pyminiexact.delete_miniexacts_c

    def primary(self, name, u=1, v=1):
        return _pyminiexact.miniexacts_c_primary(self, name, u, v)

    def secondary(self, name):
        return _pyminiexact.miniexacts_c_secondary(self, name)

    def color(self, name):
        return _pyminiexact.miniexacts_c_color(self, name)

    def add(self, *args):
        return _pyminiexact.miniexacts_c_add(self, *args)

    def solve(self):
        return _pyminiexact.miniexacts_c_solve(self)

    def solution(self, *args):
        return _pyminiexact.miniexacts_c_solution(self, *args)

    def selected_options(self):
        return _pyminiexact.miniexacts_c_selected_options(self)

    def item_colors(self):
        return _pyminiexact.miniexacts_c_item_colors(self)

    def size(self):
        return _pyminiexact.miniexacts_c_size(self)

    def write_to_dlx(self, path):
        return _pyminiexact.miniexacts_c_write_to_dlx(self, path)

    def has_solution(self):
        return _pyminiexact.miniexacts_c_has_solution(self)

    def print_solution(self):
        return _pyminiexact.miniexacts_c_print_solution(self)

    def problem(self):
        return _pyminiexact.miniexacts_c_problem(self)

    def __getitem__(self, i):
        return _pyminiexact.miniexacts_c___getitem__(self, i)

# Register miniexacts_c in _pyminiexact:
_pyminiexact.miniexacts_c_swigregister(miniexacts_c)
class miniexacts_m(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyminiexact.miniexacts_m_swiginit(self, _pyminiexact.new_miniexacts_m())
    __swig_destroy__ = _pyminiexact.delete_miniexacts_m

    def primary(self, name, u=1, v=1):
        return _pyminiexact.miniexacts_m_primary(self, name, u, v)

    def secondary(self, name):
        return _pyminiexact.miniexacts_m_secondary(self, name)

    def color(self, name):
        return _pyminiexact.miniexacts_m_color(self, name)

    def add(self, *args):
        return _pyminiexact.miniexacts_m_add(self, *args)

    def solve(self):
        return _pyminiexact.miniexacts_m_solve(self)

    def solution(self, *args):
        return _pyminiexact.miniexacts_m_solution(self, *args)

    def selected_options(self):
        return _pyminiexact.miniexacts_m_selected_options(self)

    def item_colors(self):
        return _pyminiexact.miniexacts_m_item_colors(self)

    def size(self):
        return _pyminiexact.miniexacts_m_size(self)

    def write_to_dlx(self, path):
        return _pyminiexact.miniexacts_m_write_to_dlx(self, path)

    def has_solution(self):
        return _pyminiexact.miniexacts_m_has_solution(self)

    def print_solution(self):
        return _pyminiexact.miniexacts_m_print_solution(self)

    def problem(self):
        return _pyminiexact.miniexacts_m_problem(self)

    def __getitem__(self, i):
        return _pyminiexact.miniexacts_m___getitem__(self, i)

# Register miniexacts_m in _pyminiexact:
_pyminiexact.miniexacts_m_swigregister(miniexacts_m)

