name: 'Generate a version-with-buildnum.txt file'
description: |
  Generate a version string that includes a generated build number and build
  variant appended.  The version.txt file is used to obtain the branch
  invariant portion of the full version.  The generated build number will
  be unique (within reason) and increasing so that within a lineage the full
  version number encodes relative position of any build.  The generated build
  number is not guaranteed to be sequential.
  
  The current implementation uses a time based build number.  Sequence numbers
  from the CI/CD system were also considered, and can work just as well.
  Repository hashes were not used since they neither encode the relative
  build position nor are they unique upon rebuild.
  
  The generated version is output both as a job output string and as a
  build artifact file that contains the same.
  
  This action assumes it is working with a Semantic Versioning version
  number.

  References:
    https://semver.org/
    https://packaging.python.org/en/latest/specifications/version-specifiers/
    https://peps.python.org/pep-0440/

# TODO: add support for epochs (e.g. "<epoch>!" prefix)
# TODO: Can/should we *also* encode the SHA?  While I dislike its lack of sequence
#       or uniqueness, it *does* encode useful information.

inputs:
  build-variant:
    description: |
      Build variant. E.g. "dev", "beta", "rc", etc. Use the keyword "release" for
      production releases that should not specify a variant.
    required: true

outputs:
  version-with-buildnum:
    description: 'Full version with variant build number appended'
    value: ${{ steps.generate-version-with-buildnum.outputs.version-with-buildnum }}
  version:
    description: 'Just the simple branch invariant version'
    value: ${{ steps.generate-version-with-buildnum.outputs.version }}
  buildnum:
    description: 'Just the generated build number'
    value: ${{ steps.generate-version-with-buildnum.outputs.buildnum }}
  variant-normal:
    description: 'Normalized build variant string'
    value: ${{ steps.generate-version-with-buildnum.outputs.variant-normal }}
  variant-raw:
    description: 'Raw build variant string (same as input)'
    value: ${{ steps.generate-version-with-buildnum.outputs.variant-raw }}

runs:
  using: "composite"
  steps:
    - id: generate-version-with-buildnum
      # This was initially developed to be a generic semver build number
      # generator.  PEP 440 has some quirks in regard to the semver specification:
      #  - PEP 440 specifies variant suffixes of the form "b#" over "-beta[.#]"
      #    In practice, this makes it harder to promote the build number as part of
      #    the version that appears before the pre-release suffix.
      #  - PEP 440 expects single letter variants "a", "b", "rc" over
      #    the textual "alpha", "beta", "rc" identifiers, and only
      #    expects these defined pre-release variants.  Other variants
      #    do not seem to be well-supported by python tooling.
      #  - PEP 440 treats development releases as different from the variant,
      #    rather than being a pre-release variant of pre-alpha maturity.
      #    Fully handling this would be more complex.
      name: "Prepare build version file"
      shell: bash
      run: |
        # Generated build number
        build_timestamp_b10=$(date +%s)                                # Time based build number - Base 10
        build_timestamp_b16=$(printf '%x' ${build_timestamp_b10})      # Time based build number - Base 16 - More compact, but might be interpreted as a non-digit
        build_timestamp_bx16=$(printf '0x%x' ${build_timestamp_b10})   # As above, with leading '0x' so it's never not seen as hex (but is less compact)
        semver_buildnum=${build_timestamp_b10}

        # The invariant portion of the version should be closely
        # synonymous with SCM branch
        version_invariant=$(head -1 version.txt  | tr -d '\n')

        # Configure the pre-release variant for the semver
        semver_variant=${{ inputs.build-variant }}
        case "${{ inputs.build-variant }}" in
            dev)
                # PEP 440 treats "dev" as a different dimmension than the variant.
                # Squashing to alpha to reduce dimmensions we use.
                semver_variant_py="a"
                semver_buildnum_py="${semver_buildnum}"
                ;;
            alpha)
                semver_variant_py="a"
                semver_buildnum_py="${semver_buildnum}"
                ;;
            beta)
                semver_variant_py="b"
                semver_buildnum_py="${semver_buildnum}"
                ;;
            rc)
                semver_variant_py="rc"
                semver_buildnum_py="${semver_buildnum}"
                ;;
            release)
                semver_variant_py=""
                # PEP 440 specifies "+<build>" for local variants,
                # making it harder to use it for a public release build number.
                semver_buildnum_py="" 
                ;;
            *)
                echo "Unknown build variant: ${{ inputs.build-variant }}"
                exit 1
                ;;
        esac

        # Putting it all together

        # Semver variant 1:
        #   <version>.<buildnum>-<variant>
        # printf "${version_invariant}.${semver_buildnum}${semver_variant:+-}${semver_variant}" > version-with-buildnum.txt

        # Semver variant 2:
        #   <version>-<variant>+<buildnum>
        # printf "${version_invariant}${semver_variant:+-}${semver_variant}${semver_buildnum:++}${semver_buildnum}" > version-with-buildnum.txt

        # PEP 440 semver variant:
        printf "${version_invariant}${semver_variant_py}${semver_buildnum_py}" > version-with-buildnum.txt

        # Saving the result as an artifact
        echo "Created version-with-buildnum.txt : $(cat version-with-buildnum.txt)"
        echo "version-with-buildnum=$(cat version-with-buildnum.txt)" | tee -a $GITHUB_OUTPUT
        echo "version=$(cat version.txt)" | tee -a $GITHUB_OUTPUT
        echo "buildnum=${semver_buildnum}" | tee -a $GITHUB_OUTPUT
        echo "variant-normal=${semver_variant}" | tee -a $GITHUB_OUTPUT
        echo "variant-raw=${{ inputs.build-variant }}" | tee -a $GITHUB_OUTPUT
    - name: Save Artifacts - version-with-buildnum.txt
      uses: actions/upload-artifact@v4
      with:
        name: version-with-buildnum-file
        path: version-with-buildnum.txt
