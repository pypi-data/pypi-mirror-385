## ###########################################################################
## Project and Build
## ###########################################################################
[project]
name = "planet-auth"
requires-python = ">=3.10"
dynamic = ["version"]
# version = "X.X.X"
description = "Planet Auth Utility Code"
# README.md - front page for GitHub. Focus on contributor experience.
# docs/readme.md - front page for PyPI.  Library user orientation.
# docs/index.md - front page for ReadTheDocs doc page.  Complete developer user documentation.
readme = "docs/readme.md"
authors = [{ name = "Carl Adams", email = "carl.adams@planet.com" }]
license = "Apache-2.0"
license-files = [
    "LICENSE",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
]
keywords = []
dependencies = [
    # Base dependnecies for planet_auth
    "httpx", # TODO: move into an optional dependency
    "pyjwt[crypto]",
    "pyqrcode",
    "requests",
    "setuptools", # for pkg_resources
    "strenum",
    # "sops", No longer maintained!

    # Additional dependencies for planet_auth_utils (could make optional)
    "click",
    "prompt_toolkit",
]

[project.optional-dependencies]
build = [
    "build",
    "simple503",
    "twine",
]
docs = [
    "mkdocs",
    # 0.29 mkdocstrings is slow right now.  See
    #   https://github.com/mkdocstrings/mkdocstrings/issues/756
    #   https://github.com/mkdocstrings/mkdocstrings/discussions/743
    "mkdocstrings[python] == 0.28.3",
    "mkdocs-click",
    "mkdocs-material == 9.6.12",  # Upgrades may interact with docs/custom_theme
    "mkdocs-macros-plugin",
    "mkdocs-linkcheck",
    # "linkcheckmd",
]
examples = [
    "flask",
    # "planet-auth-config >= 2.0.0"
]
test = [
    "black",
    "coverage[toml]",
    "freezegun",
    "mypy",
    "nox",
    "pyflakes == 3.2.0",  # 3.3.0 causes some grief with a new warning.
    "pylint",
    # "pylint[spelling]",  ## TODO
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "validators",
]
testsecurity = [
    "semgrep",
]
dev = [
    "planet-auth[test, docs, build]",
]
internal = [
    # For Planet Engineering internal usage.  These are Planet internal packages,
    # and will not be generally available.
    "planet-auth-config >= 2.0.0",
]

[project.scripts]
plauth = "planet_auth_utils.commands.cli.main:cmd_plauth"

[build-system]
requires = ["setuptools >= 77.0.3", "setuptools_scm >= 8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
# Using setuptools_scm to manage versioning
# version = {file = "version.txt"}
# version = {file = "version-with-buildnum.txt"}

[tool.setuptools_scm]
# version_file = "version-setuptools_scm.txt"

## ###########################################################################
## Testing
## ###########################################################################
[tool.coverage.run]
# Note: Coverage seems to break step debugging in PyCharm.
source = [
    "planet_auth",
    "planet_auth_utils",
    "planet_auth_config_injection",
    # "tests",
]
branch = true

[tool.coverage.report]
# skip_covered = true
show_missing = true
fail_under = 75

[tool.pytest.ini_options] # ignored if pytest.ini exists
# addopts = "--cov-report=term"
addopts = "--cov -rxXs --numprocesses=auto"
testpaths = [
    "tests/test_planet_auth/unit",
    # "tests/test_planet_auth/live_service",
    "tests/test_planet_auth_utils/unit",
]

## ###########################################################################
## Formatting and Linting
## ###########################################################################
[tool.black]
line-length = 119
# extend-exclude = "/docs/"

[tool.mypy]
# packages = "planet_auth"
files = "src,docs"
# PEP 484 now says optional should be explicit.  TODO: change code and remove this mypy config
implicit_optional = true

[tool.pylint.main]
disable = [
    "format",  # We use black for formatting, so disable all formatting checks
    # "fixme",
    #
    "broad-exception-caught",
    "consider-using-f-string",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-positional-arguments",
    "unused-argument",
    #
    "C", # convention, for programming standard violation
    "R", # refactor, for bad code smell
    # "W", # warning, for python specific problems
    # "E", # error, for probable bugs in the code
    # "F", # fatal, if an error occurred which prevented pylint from doing
    "protected-access"
]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration for the "fixme" rule, separated by a comma.
# notes = ["FIXME", "XXX", "TODO", "TODO?"]
notes = ["FIXME", "XXX"]

#[tool.pylint.format]
#max-line-length = 119
