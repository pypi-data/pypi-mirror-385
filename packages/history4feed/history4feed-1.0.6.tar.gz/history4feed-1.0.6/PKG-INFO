Metadata-Version: 2.4
Name: history4feed
Version: 1.0.6
Summary: Creates a complete full text historical archive for an RSS or ATOM feed.
Project-URL: Homepage, https://github.com/muchdogesec/history4feed
Project-URL: Issues, https://github.com/muchdogesec/history4feed/issues
Author: dogesec
Maintainer: dogesec
License-File: LICENSE
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Requires-Dist: brotlipy>=0.7.0
Requires-Dist: celery>=5.4.0; python_version >= '3.8'
Requires-Dist: dateparser>=1.2.1
Requires-Dist: django-filter>=24.2
Requires-Dist: django>=5.2.3
Requires-Dist: djangorestframework>=3.15.2
Requires-Dist: dogesec-commons
Requires-Dist: drf-spectacular>=0.27.2
Requires-Dist: fake-useragent>=1.5.1
Requires-Dist: gunicorn
Requires-Dist: hyperlink
Requires-Dist: lxml-html-clean>=0.4.1
Requires-Dist: psycopg2-binary>=2.9.10
Requires-Dist: python-dotenv
Requires-Dist: readability-lxml
Requires-Dist: redis
Requires-Dist: requests>=2.32.4
Requires-Dist: whitenoise==6.7.0
Provides-Extra: test
Requires-Dist: pytest; extra == 'test'
Requires-Dist: pytest-cov; extra == 'test'
Requires-Dist: pytest-django; extra == 'test'
Requires-Dist: pytest-subtests; extra == 'test'
Requires-Dist: schemathesis; extra == 'test'
Description-Content-Type: text/markdown

# history4feed

[![codecov](https://codecov.io/gh/muchdogesec/history4feed/graph/badge.svg?token=3Z5LELB8OP)](https://codecov.io/gh/muchdogesec/history4feed)

## Before you begin...

![](docs/obstracts.png)

We use history4feed in the web version of Obstracts which includes many additional features over those in this codebase. [You can find out more about the web version here](https://www.obstracts.com/).

## Overview

![](docs/history4feed.png)

It is common for feeds (RSS or XML) to only include a limited number of posts. I generally see the latest 3 - 5 posts of a blog in a feed. For blogs that have been operating for years, this means potentially thousands of posts are missed.

There is no way to page through historic articles using an RSS or ATOM feed (they were not designed for this), which means the first poll of the feed will only contain the limited number of articles in the feed. This limit is defined by the blog owner.

history4feed can be used to create a complete history for a blog and output it as an RSS feed.

history4feed offers an API interface that;

1. takes an RSS / ATOM feed URL
2. downloads a Wayback Machine archive for the feed
3. identified all unique blog posts in the historic feeds downloaded
4. downloads a HTML version of the article content on each page
5. stores the post record in the databases
6. exposes the posts as JSON or XML RSS

## Install

### Download and configure

```shell
# clone the latest code
git clone https://github.com/muchdogesec/history4feed
```

### Configuration options

history4feed has various settings that are defined in an `.env` file.

To create a template for the file:

```shell
cp .env.example .env
```

To see more information about how to set the variables, and what they do, read the `.env.markdown` file.

### Build the Docker Image

```shell
sudo docker compose build
```

### Start the server

```shell
sudo docker compose up
```

### Access the server

The webserver (Django) should now be running on: http://127.0.0.1:8002/

You can access the Swagger UI for the API in a browser at: http://127.0.0.1:8002/api/schema/swagger-ui/

## Useful supporting tools

* [Full Text, Full Archive RSS Feeds for any Blog](https://www.dogesec.com/blog/full_text_rss_atom_blog_feeds/)
* [An up-to-date list of threat intel blogs that post cyber threat intelligence research](https://github.com/muchdogesec/awesome_threat_intel_blogs)
* [Donate to the Wayback Machine](https://archive.org/donate)

## Support

[Minimal support provided via the DOGESEC community](https://community.dogesec.com/).

## License

[Apache 2.0](/LICENSE).