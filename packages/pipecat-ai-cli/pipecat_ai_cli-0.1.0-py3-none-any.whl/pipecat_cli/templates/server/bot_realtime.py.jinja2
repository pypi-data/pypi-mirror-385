#
# Copyright (c) 2024â€“2025, Daily
#
# SPDX-License-Identifier: BSD 2-Clause License
#

"""{{ project_name }} - Pipecat Voice Agent.

This bot uses a realtime pipeline: Speech-to-Speech with integrated LLM

Generated by Pipecat CLI

Required AI services:
{% if realtime_service %}
- {{ realtime_service.replace('_realtime', '').title() }} (Realtime Speech-to-Speech)
{% endif %}

Run the bot using::
    uv run bot.py
"""

{{ imports|join('\n') }}

load_dotenv(override=True)


async def run_bot(transport: BaseTransport, runner_args: RunnerArguments):
    """Main bot logic."""
    logger.info("Starting bot")

    # Realtime LLM service (handles STT, LLM, and TTS internally)
    {% if realtime_service and realtime_service in service_configs %}
    {{ service_configs[realtime_service] }}
    {% endif %}

    messages = [
        {
            "role": "system",
            "content": "You are a friendly AI assistant. Respond naturally and keep your answers conversational.",
        },
    ]

    context = LLMContext(messages)
    context_aggregator = LLMContextAggregatorPair(context)

    {% if transcription %}
    # Transcription processor
    transcript_processor = TranscriptProcessor()
    {% endif %}

    {% if recording %}
    # Audio recording
    audio_buffer = AudioBufferProcessor()
    {% endif %}

    {% if bot_type == 'web' %}
    rtvi = RTVIProcessor(config=RTVIConfig(config=[]))
    {% endif %}
    
    # Pipeline
    pipeline = Pipeline([
        transport.input(),
        {% if bot_type == 'web' %}
        rtvi,
        {% endif %}
        context_aggregator.user(),
        {% if transcription %}
        transcript_processor.user(),
        {% endif %}
        llm,
        transport.output(),
        {% if transcription %}
        transcript_processor.assistant(),
        {% endif %}
        {% if recording %}
        audio_buffer,
        {% endif %}
        context_aggregator.assistant(),
    ])

    task = PipelineTask(
        pipeline,
        params=PipelineParams(
            enable_metrics=True,
            enable_usage_metrics=True,
        ),
        {% if bot_type == 'web' %}
        observers=[RTVIObserver(rtvi)],
        {% endif %}
    )

    @transport.event_handler("on_client_connected")
    async def on_client_connected(transport, client):
        logger.info("Client connected")
        # Kick off the conversation.
        messages.append({"role": "system", "content": "Say hello and briefly introduce yourself."})
        await task.queue_frames([LLMRunFrame()])

    @transport.event_handler("on_client_disconnected")
    async def on_client_disconnected(transport, client):
        logger.info("Client disconnected")
        await task.cancel()

    runner = PipelineRunner(handle_sigint=runner_args.handle_sigint)

    await runner.run(task)


async def bot(runner_args: RunnerArguments):
    """Main bot entry point."""
    {% if enable_krisp %}
    # Krisp is available when deployed to Pipecat Cloud
    if os.environ.get("ENV") != "local":
        from pipecat.audio.filters.krisp_filter import KrispFilter

        krisp_filter = KrispFilter()
    else:
        krisp_filter = None
    {% endif %}

    # We store functions so objects (e.g. SileroVADAnalyzer) don't get
    # instantiated. The function will be called when the desired transport gets
    # selected.
    transport_params = {
        {% if 'daily' in transports %}
        "daily": lambda: DailyParams(
            audio_in_enabled=True,
            {% if enable_krisp %}
            audio_in_filter=krisp_filter,
            {% endif %}
            audio_out_enabled=True,
            {% if video_input %}
            video_in_enabled=True,
            {% endif %}
            {% if video_output %}
            video_out_enabled=True,
            video_out_is_live=True,
            video_out_width=1024,
            video_out_height=768,
            {% endif %}
            vad_analyzer=SileroVADAnalyzer(),
        ),
        {% endif %}
        {% if 'smallwebrtc' in transports %}
        "webrtc": lambda: TransportParams(
            audio_in_enabled=True,
            {% if enable_krisp %}
            audio_in_filter=krisp_filter,
            {% endif %}
            audio_out_enabled=True,
            {% if video_input %}
            video_in_enabled=True,
            {% endif %}
            {% if video_output %}
            video_out_is_live=True,
            video_out_width=1024,
            video_out_height=768,
            {% endif %}
            vad_analyzer=SileroVADAnalyzer(),
        ),
        {% endif %}
        {% if 'twilio' in transports %}
        "twilio": lambda: FastAPIWebsocketParams(
            audio_in_enabled=True,
            {% if enable_krisp %}
            audio_in_filter=krisp_filter,
            {% endif %}
            audio_out_enabled=True,
            vad_analyzer=SileroVADAnalyzer(),
        ),
        {% endif %}
        {% if 'telnyx' in transports %}
        "telnyx": lambda: FastAPIWebsocketParams(
            audio_in_enabled=True,
            {% if enable_krisp %}
            audio_in_filter=krisp_filter,
            {% endif %}
            audio_out_enabled=True,
            vad_analyzer=SileroVADAnalyzer(),
        ),
        {% endif %}
        {% if 'plivo' in transports %}
        "plivo": lambda: FastAPIWebsocketParams(
            audio_in_enabled=True,
            {% if enable_krisp %}
            audio_in_filter=krisp_filter,
            {% endif %}
            audio_out_enabled=True,
            vad_analyzer=SileroVADAnalyzer(),
        ),
        {% endif %}
        {% if 'exotel' in transports %}
        "exotel": lambda: FastAPIWebsocketParams(
            audio_in_enabled=True,
            {% if enable_krisp %}
            audio_in_filter=krisp_filter,
            {% endif %}
            audio_out_enabled=True,
            vad_analyzer=SileroVADAnalyzer(),
        ),
        {% endif %}
        {% if 'daily_telephony' in transports %}
        "daily": lambda: DailyParams(
            audio_in_enabled=True,
            {% if enable_krisp %}
            audio_in_filter=krisp_filter,
            {% endif %}
            audio_out_enabled=True,
            vad_analyzer=SileroVADAnalyzer(),
        ),
        {% endif %}
    }

    transport = await create_transport(runner_args, transport_params)

    await run_bot(transport, runner_args)


if __name__ == "__main__":
    from pipecat.runner.run import main

    main()