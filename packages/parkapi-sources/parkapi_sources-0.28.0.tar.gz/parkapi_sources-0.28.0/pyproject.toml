[project]
name = "parkapi_sources"
dynamic = ["version"]
authors = [
    {name="Ernesto Ruge, binary butterfly GmbH", email="ernesto.ruge@binary-butterfly.de"},
]
maintainers = [
    {name="Ernesto Ruge, binary butterfly GmbH", email="ernesto.ruge@binary-butterfly.de"},
]
description = "ParkAPI Sources is a collection of converters from several different data sources to normalized ParkAPI data."
readme = "README.md"
requires-python = ">=3.12"
keywords = [
    "data",
    "parking",
    "converter",
    "mobility",
    "car",
    "bike"
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

dependencies = [
    "validataclass~=0.11.0",
    "pyproj~=3.7.2",
    "lxml~=6.0.2",
    "openpyxl~=3.1.5",
    "requests~=2.32.5",
    "beautifulsoup4~=4.14.2",
    "urllib3~=2.5.0",
    "isodate~=0.7.2",
    "shapely~=2.1.2",
    "opening-hours-py~=1.1.3",
]

[project.urls]
Homepage = "https://github.com/ParkenDD/parkapi-sources-v3"
Repository = "https://github.com/ParkenDD/parkapi-sources-v3.git"
Issues = "https://github.com/ParkenDD/parkapi-sources-v3/issues"
Changelog = "https://github.com/ParkenDD/parkapi-sources-v3/blob/main/CHANGELOG.md"

[project.optional-dependencies]
testing = [
    "ruff~=0.14.0",
    "pytest~=8.4.2",
    "pytest-cov~=7.0.0",
    "requests-mock~=1.12.1",
]

[build-system]
requires = [
    "setuptools",
    "setuptools_scm",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"pkgname" = ["py.typed"]

[tool.setuptools_scm]
write_to = "src/parkapi_sources/_version.py"
version_scheme = "post-release"

[tool.pytest.ini_options]
addopts = "-ra --import-mode=importlib --cov-context=test --cov-report="
testpaths = ["tests"]
python_files = ["*_test.py", "*Test.py"]
python_classes = ["*Test"]
pythonpath = ["src"]

# Fail on warnings
filterwarnings = "error"

[tool.ruff]
lint.select = [
    "F", # pyflakes
    "I", # isort
    "S", # flake8-bandit
    "ASYNC", # flake8-async
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "INP", # flake8-no-pep420 (missing __init__.py)
    "PIE", # flake8-pie
    "T20", # flake8-print
    "Q", # flake8-quotes
    "TID", # flake8-tidy-imports
    "FLY", # flynt (use f-string instead of static join)
]

# Enable preview rules since a lot of basic pycodestyle rules are in preview mode for some reason
preview = true

lint.ignore = [
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "ISC001", # single-line-implicit-string-concatenation - conflicts with formatter
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "temp",
]

line-length = 120

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = [
    # Allow assert
    "S101",
    # Ignore unsafe practices like hardcoded passwords
    "S101", "S105", "S106",
    # Don't require __init__.py files
    "INP",
]

"src/parkapi_sources/scripts/*" = [
    # Don't require __init__.py files
    "INP",
]

"dev/*" = [
    # Don't require __init__.py files
    "INP",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.format]
quote-style = "single"
