# Before/After Refactoring Comparison
# Purpose: Shows side-by-side comparison of code improvements from refactoring
# Variables: {{PROJECT_NAME}}, {{TIMESTAMP}}, {{REFACTORING_TYPE}}, {{FILES_MODIFIED}}, {{LOC_REDUCED}}, {{PERFORMANCE_GAIN}}
# Generated by: code-refactorer agent
# Template location: ~/.multiagent/refactoring/templates/before-after-comparison.md.template

# Refactoring Comparison Report
**Project**: {{PROJECT_NAME}}
**Refactoring Type**: {{REFACTORING_TYPE}}
**Completed**: {{TIMESTAMP}}
**Performed By**: code-refactorer agent

---

## Summary of Changes

### Metrics
- **Files Modified**: {{FILES_MODIFIED}}
- **Lines of Code Reduced**: {{LOC_REDUCED}} ({{LOC_REDUCTION_PERCENT}}%)
- **Functions Refactored**: {{FUNCTIONS_REFACTORED}}
- **Duplicates Eliminated**: {{DUPLICATES_ELIMINATED}}
- **Performance Gain**: {{PERFORMANCE_GAIN}}%

### Refactoring Operations Performed
{{OPERATIONS_PERFORMED}}

### Test Results
- **Tests Run**: {{TESTS_RUN}}
- **Tests Passed**: {{TESTS_PASSED}}
- **Tests Failed**: {{TESTS_FAILED}}
- **Coverage Change**: {{COVERAGE_BEFORE}}% → {{COVERAGE_AFTER}}%

---

## Code Changes

### 1. {{CHANGE_1_TITLE}}

**File**: `{{CHANGE_1_FILE}}`
**Type**: {{CHANGE_1_TYPE}} (e.g., "Duplicate Extraction", "Pattern Modernization", "Performance Optimization")
**Impact**: {{CHANGE_1_IMPACT}}

#### Before
```{{CHANGE_1_LANGUAGE}}
{{CHANGE_1_BEFORE_CODE}}
```

#### After
```{{CHANGE_1_LANGUAGE}}
{{CHANGE_1_AFTER_CODE}}
```

#### What Changed
{{CHANGE_1_EXPLANATION}}

#### Benefits
- {{CHANGE_1_BENEFIT_1}}
- {{CHANGE_1_BENEFIT_2}}
- {{CHANGE_1_BENEFIT_3}}

---

### 2. {{CHANGE_2_TITLE}}

**File**: `{{CHANGE_2_FILE}}`
**Type**: {{CHANGE_2_TYPE}}
**Impact**: {{CHANGE_2_IMPACT}}

#### Before
```{{CHANGE_2_LANGUAGE}}
{{CHANGE_2_BEFORE_CODE}}
```

#### After
```{{CHANGE_2_LANGUAGE}}
{{CHANGE_2_AFTER_CODE}}
```

#### What Changed
{{CHANGE_2_EXPLANATION}}

#### Benefits
- {{CHANGE_2_BENEFIT_1}}
- {{CHANGE_2_BENEFIT_2}}

---

## New Files Created

### {{NEW_FILE_1_PATH}}
**Purpose**: {{NEW_FILE_1_PURPOSE}}
**Type**: {{NEW_FILE_1_TYPE}} (e.g., "Shared Utility", "Abstract Class", "Interface")

```{{NEW_FILE_1_LANGUAGE}}
{{NEW_FILE_1_CONTENT}}
```

**Usage**:
{{NEW_FILE_1_USAGE}}

---

## Performance Comparison

### Benchmarks

| Metric | Before | After | Improvement |
|--------|--------|-------|-------------|
| {{PERF_METRIC_1_NAME}} | {{PERF_METRIC_1_BEFORE}} | {{PERF_METRIC_1_AFTER}} | {{PERF_METRIC_1_IMPROVEMENT}} |
| {{PERF_METRIC_2_NAME}} | {{PERF_METRIC_2_BEFORE}} | {{PERF_METRIC_2_AFTER}} | {{PERF_METRIC_2_IMPROVEMENT}} |
| {{PERF_METRIC_3_NAME}} | {{PERF_METRIC_3_BEFORE}} | {{PERF_METRIC_3_AFTER}} | {{PERF_METRIC_3_IMPROVEMENT}} |

### Performance Analysis
{{PERFORMANCE_ANALYSIS}}

---

## Code Quality Metrics

### Maintainability
| Metric | Before | After | Change |
|--------|--------|-------|--------|
| **Cyclomatic Complexity** | {{COMPLEXITY_BEFORE}} | {{COMPLEXITY_AFTER}} | {{COMPLEXITY_CHANGE}} |
| **Code Duplication** | {{DUPLICATION_BEFORE}}% | {{DUPLICATION_AFTER}}% | {{DUPLICATION_CHANGE}}% |
| **Technical Debt Ratio** | {{DEBT_BEFORE}}% | {{DEBT_AFTER}}% | {{DEBT_CHANGE}}% |
| **Maintainability Index** | {{MAINTAINABILITY_BEFORE}} | {{MAINTAINABILITY_AFTER}} | {{MAINTAINABILITY_CHANGE}} |

### Readability Improvements
{{READABILITY_IMPROVEMENTS}}

---

## Breaking Changes

{{#if HAS_BREAKING_CHANGES}}
⚠️ **Warning**: This refactoring includes breaking changes:

### {{BREAKING_CHANGE_1_TITLE}}
**Type**: {{BREAKING_CHANGE_1_TYPE}}
**Affected APIs**: {{BREAKING_CHANGE_1_APIS}}

**Migration Required**:
{{BREAKING_CHANGE_1_MIGRATION}}

**Before**:
```{{BREAKING_CHANGE_1_LANGUAGE}}
{{BREAKING_CHANGE_1_OLD_USAGE}}
```

**After**:
```{{BREAKING_CHANGE_1_LANGUAGE}}
{{BREAKING_CHANGE_1_NEW_USAGE}}
```
{{/if}}

{{^HAS_BREAKING_CHANGES}}
✅ **No Breaking Changes**: All existing APIs and functionality preserved.
{{/HAS_BREAKING_CHANGES}}

---

## Rollback Instructions

If issues are discovered after refactoring, rollback with:

```bash
# Rollback all changes
git reset --hard {{COMMIT_BEFORE_REFACTORING}}

# Or rollback specific files
git checkout {{COMMIT_BEFORE_REFACTORING}} -- {{FILE_1}} {{FILE_2}}
```

**Commit Hash Before Refactoring**: `{{COMMIT_BEFORE_REFACTORING}}`
**Commit Hash After Refactoring**: `{{COMMIT_AFTER_REFACTORING}}`

---

## Testing Checklist

Verify these areas after refactoring:

- [ ] All unit tests pass
- [ ] Integration tests pass
- [ ] End-to-end tests pass
- [ ] Manual testing of affected features
- [ ] Performance benchmarks meet targets
- [ ] No new linting/type errors
- [ ] Documentation updated
- [ ] Code review completed

### Test Command
```bash
# Run test suite
{{TEST_COMMAND}}

# Check for regressions
{{REGRESSION_TEST_COMMAND}}
```

---

## Files Modified (Complete List)

### Modified Files ({{MODIFIED_FILES_COUNT}})
{{MODIFIED_FILES_LIST}}

### New Files ({{NEW_FILES_COUNT}})
{{NEW_FILES_LIST}}

### Deleted Files ({{DELETED_FILES_COUNT}})
{{DELETED_FILES_LIST}}

---

## Git Commit Information

### Commit Message
```
{{COMMIT_MESSAGE}}
```

### Diff Stats
```
{{GIT_DIFF_STATS}}
```

---

## Next Steps

1. **Review Changes**:
   ```bash
   git diff {{COMMIT_BEFORE_REFACTORING}}..{{COMMIT_AFTER_REFACTORING}}
   ```

2. **Run Tests**:
   ```bash
   {{TEST_COMMAND}}
   ```

3. **Update Documentation**:
   ```bash
   /docs:update --check-patterns
   ```

4. **Create Pull Request**:
   ```bash
   gh pr create --title "refactor: {{REFACTORING_TITLE}}" \
     --body "See refactoring comparison: docs/reports/before-after-comparison-{{TIMESTAMP}}.md"
   ```

5. **Monitor Metrics**:
   - Check application performance in staging
   - Verify no increase in error rates
   - Confirm improved maintainability metrics

---

## Additional Resources

- **Refactoring Analysis Report**: `docs/reports/refactoring-report-{{ANALYSIS_TIMESTAMP}}.md`
- **Test Results**: `{{TEST_RESULTS_PATH}}`
- **Performance Benchmarks**: `{{BENCHMARK_RESULTS_PATH}}`

---

**Report Generated**: {{TIMESTAMP}}
**Refactoring Duration**: {{REFACTORING_DURATION}}

For questions or issues, run:
```bash
/refactoring:refactor --help
```
