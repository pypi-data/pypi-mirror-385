# Refactoring Analysis Report
# Purpose: Comprehensive analysis of refactoring opportunities
# Variables: {{PROJECT_NAME}}, {{TIMESTAMP}}, {{TOTAL_OPPORTUNITIES}}, {{QUICK_WINS}}, {{MAJOR_IMPROVEMENTS}}, {{BACKLOG}}, {{FILES_SCANNED}}
# Generated by: refactoring-analyzer agent
# Template location: ~/.multiagent/refactoring/templates/refactoring-report.md.template

# Refactoring Analysis Report
**Project**: {{PROJECT_NAME}}
**Generated**: {{TIMESTAMP}}
**Analyst**: refactoring-analyzer agent

---

## Executive Summary

**Total Refactoring Opportunities**: {{TOTAL_OPPORTUNITIES}}

### Priority Breakdown
- 🎯 **Quick Wins** (High Impact, Low Effort): {{QUICK_WINS}}
- 🔧 **Major Improvements** (High Impact, Medium Effort): {{MAJOR_IMPROVEMENTS}}
- 📋 **Backlog** (Lower Priority): {{BACKLOG}}

### Analysis Scope
- Files Scanned: {{FILES_SCANNED}}
- Duplicate Code Blocks: {{DUPLICATE_COUNT}}
- Deprecated Patterns: {{DEPRECATED_COUNT}}
- Complex Functions: {{COMPLEX_FUNCTION_COUNT}}

### Estimated Total Effort
- Quick Wins: {{QUICK_WINS_EFFORT}} hours
- Major Improvements: {{MAJOR_IMPROVEMENTS_EFFORT}} hours
- Total: {{TOTAL_EFFORT}} hours

### Expected Benefits
- Code Duplication Reduction: {{DUPLICATION_REDUCTION}}%
- Performance Improvement: {{PERFORMANCE_IMPROVEMENT}}%
- Maintainability Score: {{MAINTAINABILITY_BEFORE}} → {{MAINTAINABILITY_AFTER}}

---

## Priority Matrix

| Category | Quick Wins | Major | Backlog | Total |
|----------|------------|-------|---------|-------|
| **Code Duplication** | {{DUP_QUICK_WINS}} | {{DUP_MAJOR}} | {{DUP_BACKLOG}} | {{DUP_TOTAL}} |
| **Legacy Patterns** | {{LEGACY_QUICK_WINS}} | {{LEGACY_MAJOR}} | {{LEGACY_BACKLOG}} | {{LEGACY_TOTAL}} |
| **Performance** | {{PERF_QUICK_WINS}} | {{PERF_MAJOR}} | {{PERF_BACKLOG}} | {{PERF_TOTAL}} |
| **Complexity** | {{COMPLEXITY_QUICK_WINS}} | {{COMPLEXITY_MAJOR}} | {{COMPLEXITY_BACKLOG}} | {{COMPLEXITY_TOTAL}} |
| **Technical Debt** | {{DEBT_QUICK_WINS}} | {{DEBT_MAJOR}} | {{DEBT_BACKLOG}} | {{DEBT_TOTAL}} |
| **TOTAL** | {{QUICK_WINS}} | {{MAJOR_IMPROVEMENTS}} | {{BACKLOG}} | {{TOTAL_OPPORTUNITIES}} |

---

## 🎯 Quick Wins (Do These First)

These are high-impact, low-effort refactorings that should be done immediately:

### 1. {{QUICK_WIN_1_TITLE}}
**Impact**: High - {{QUICK_WIN_1_IMPACT_REASON}}
**Effort**: Low - {{QUICK_WIN_1_EFFORT_REASON}}
**Estimated Time**: {{QUICK_WIN_1_TIME}} hours

**Problem**:
{{QUICK_WIN_1_PROBLEM}}

**Files Affected**:
{{QUICK_WIN_1_FILES}}

**Current State**:
```{{QUICK_WIN_1_LANGUAGE}}
{{QUICK_WIN_1_CURRENT_CODE}}
```

**Recommended Approach**:
{{QUICK_WIN_1_APPROACH}}

**Expected Result**:
```{{QUICK_WIN_1_LANGUAGE}}
{{QUICK_WIN_1_AFTER_CODE}}
```

---

### 2. {{QUICK_WIN_2_TITLE}}
_(Repeat structure for each quick win)_

---

## 🔧 Major Improvements (High Priority)

These require more effort but provide significant benefits:

### 1. {{MAJOR_1_TITLE}}
**Impact**: High - {{MAJOR_1_IMPACT_REASON}}
**Effort**: Medium - {{MAJOR_1_EFFORT_REASON}}
**Risk**: {{MAJOR_1_RISK_LEVEL}} - {{MAJOR_1_RISK_REASON}}
**Estimated Time**: {{MAJOR_1_TIME}} hours

**Problem**:
{{MAJOR_1_PROBLEM}}

**Affected Areas**:
{{MAJOR_1_AFFECTED_AREAS}}

**Refactoring Strategy**:
1. {{MAJOR_1_STEP_1}}
2. {{MAJOR_1_STEP_2}}
3. {{MAJOR_1_STEP_3}}

**Testing Requirements**:
{{MAJOR_1_TESTING}}

**Migration Notes**:
{{MAJOR_1_MIGRATION}}

---

## 📋 Backlog (Lower Priority)

These can be done incrementally over time:

| # | Title | Category | Impact | Effort | Time |
|---|-------|----------|--------|--------|------|
| 1 | {{BACKLOG_1_TITLE}} | {{BACKLOG_1_CATEGORY}} | {{BACKLOG_1_IMPACT}} | {{BACKLOG_1_EFFORT}} | {{BACKLOG_1_TIME}}h |
| 2 | {{BACKLOG_2_TITLE}} | {{BACKLOG_2_CATEGORY}} | {{BACKLOG_2_IMPACT}} | {{BACKLOG_2_EFFORT}} | {{BACKLOG_2_TIME}}h |
_(Continue for all backlog items)_

---

## Detailed Findings by Category

### 📦 Code Duplication

**Total Instances**: {{DUPLICATE_TOTAL_INSTANCES}}
**Files Affected**: {{DUPLICATE_FILES_AFFECTED}}
**Estimated LOC Reduction**: {{DUPLICATE_LOC_REDUCTION}} lines

#### Most Severe Duplications:
{{DUPLICATE_DETAILS}}

---

### 🕰️ Legacy Patterns

**Total Instances**: {{LEGACY_TOTAL_INSTANCES}}
**Patterns Identified**: {{LEGACY_PATTERNS_COUNT}} types

#### Pattern Breakdown:
| Pattern | Occurrences | Modernization |
|---------|-------------|---------------|
| {{PATTERN_1_NAME}} | {{PATTERN_1_COUNT}} | {{PATTERN_1_MODERN}} |
| {{PATTERN_2_NAME}} | {{PATTERN_2_COUNT}} | {{PATTERN_2_MODERN}} |

#### Detailed Findings:
{{LEGACY_DETAILS}}

---

### ⚡ Performance Issues

**Total Issues**: {{PERFORMANCE_TOTAL_ISSUES}}
**Estimated Performance Gain**: {{PERFORMANCE_GAIN}}%

#### Issue Breakdown:
- N+1 Query Patterns: {{N_PLUS_ONE_COUNT}}
- Inefficient Algorithms: {{INEFFICIENT_ALGO_COUNT}}
- Synchronous Operations: {{SYNC_OPS_COUNT}}
- Missing Caching: {{MISSING_CACHE_COUNT}}

#### Critical Performance Issues:
{{PERFORMANCE_DETAILS}}

---

### 🔀 Code Complexity

**Files Over 500 Lines**: {{LONG_FILES_COUNT}}
**Functions Over 50 Lines**: {{LONG_FUNCTIONS_COUNT}}
**Deep Nesting (>3 levels)**: {{DEEP_NESTING_COUNT}}

#### Most Complex Files:
| File | Lines | Functions | Max Nesting | Complexity Score |
|------|-------|-----------|-------------|------------------|
| {{COMPLEX_FILE_1}} | {{COMPLEX_FILE_1_LINES}} | {{COMPLEX_FILE_1_FUNCS}} | {{COMPLEX_FILE_1_NESTING}} | {{COMPLEX_FILE_1_SCORE}} |

#### Recommended Simplifications:
{{COMPLEXITY_DETAILS}}

---

### 🧹 Technical Debt

**Dead Code Instances**: {{DEAD_CODE_COUNT}}
**TODO/FIXME Comments**: {{TODO_COUNT}}
**Commented Code Blocks**: {{COMMENTED_CODE_COUNT}}

#### Debt Breakdown:
{{DEBT_DETAILS}}

---

## Recommendations

### Immediate Actions (This Sprint)
1. {{RECOMMENDATION_1}}
2. {{RECOMMENDATION_2}}
3. {{RECOMMENDATION_3}}

### Short Term (Next Month)
1. {{RECOMMENDATION_4}}
2. {{RECOMMENDATION_5}}

### Long Term (Next Quarter)
1. {{RECOMMENDATION_6}}
2. {{RECOMMENDATION_7}}

### Process Improvements
{{PROCESS_RECOMMENDATIONS}}

---

## Metrics & KPIs

### Current State
- **Code Duplication**: {{CURRENT_DUPLICATION}}%
- **Test Coverage**: {{CURRENT_COVERAGE}}%
- **Cyclomatic Complexity**: {{CURRENT_COMPLEXITY}} (avg)
- **Technical Debt Ratio**: {{CURRENT_DEBT_RATIO}}%

### Target State (After Refactoring)
- **Code Duplication**: {{TARGET_DUPLICATION}}%
- **Test Coverage**: {{TARGET_COVERAGE}}%
- **Cyclomatic Complexity**: {{TARGET_COMPLEXITY}} (avg)
- **Technical Debt Ratio**: {{TARGET_DEBT_RATIO}}%

### Progress Tracking
Track refactoring progress with these metrics:
- [ ] Quick wins completed: 0/{{QUICK_WINS}}
- [ ] Major improvements completed: 0/{{MAJOR_IMPROVEMENTS}}
- [ ] Code duplication reduced by {{DUPLICATION_REDUCTION}}%
- [ ] All deprecated patterns modernized
- [ ] Performance bottlenecks eliminated

---

## Next Steps

1. **Review this report** with the development team
2. **Prioritize quick wins** and assign owners
3. **Schedule refactoring sprints** for major improvements
4. **Run refactoring command** to apply changes:
   ```bash
   /refactoring:refactor --extract-duplicates
   /refactoring:refactor --modernize
   /refactoring:refactor --optimize
   ```
5. **Measure impact** after each refactoring sprint
6. **Re-run analysis** quarterly to track progress

---

**Report Generated**: {{TIMESTAMP}}
**Valid Until**: {{EXPIRY_DATE}} (re-analyze if codebase changes significantly)

For questions or to apply these refactorings, run:
```bash
/refactoring:refactor --help
```
