# Secret Management Guide - {{PROJECT_NAME}}

**Generated**: {{GENERATED_DATE}}
**Tech Stack**: {{TECH_STACK}}

## üîê Required Secrets

This project requires the following environment variables:

{{REQUIRED_ENV_VARS}}

## üìÅ File Structure

```
{{PROJECT_NAME}}/
‚îú‚îÄ‚îÄ .env                 # ‚ùå NEVER COMMIT - Contains real secrets
‚îú‚îÄ‚îÄ .env.example         # ‚úÖ Safe to commit - Template with placeholders
‚îî‚îÄ‚îÄ .gitignore           # ‚úÖ Blocks .env from git
```

## üöÄ Getting Started

### 1. Create Your .env File

```bash
# Copy the template
cp .env.example .env

# Edit with your actual secrets
vim .env  # or your preferred editor
```

### 2. Fill In Your Secrets

Edit `.env` and replace placeholders with real values:

```bash
# Example:
GITHUB_TOKEN=ghp_YOUR_ACTUAL_TOKEN_HERE
GEMINI_API_KEY=AIzaSy_YOUR_ACTUAL_KEY_HERE
```

### 3. Verify Security

```bash
# Check .env is NOT tracked by git
git status | grep .env
# Should show nothing (blocked by .gitignore)

# Test git hooks work
git add .
git commit -m "test"
git push  # Hooks will scan before push
```

## ‚ö†Ô∏è Security Best Practices

### DO ‚úÖ
- Keep secrets in `.env` file only
- Use `.env.example` for documentation
- Rotate secrets regularly
- Use different secrets for dev/staging/production
- Use secret management services (AWS Secrets Manager, Vault, etc.) in production

### DON'T ‚ùå
- NEVER commit `.env` to git
- NEVER hardcode secrets in code
- NEVER share secrets via email/Slack
- NEVER screenshot files containing secrets
- NEVER push secrets to GitHub

## üö® What If I Accidentally Commit a Secret?

### Immediate Actions (within minutes)

1. **Revoke the Secret**
   ```bash
   # Example for GitHub token
   gh auth token  # Get current token
   # Go to github.com/settings/tokens and revoke
   ```

2. **Rotate/Replace**
   - Generate new secret immediately
   - Update `.env` with new value
   - Update any services using the old secret

3. **Remove from Git History**
   ```bash
   # WARNING: This rewrites history!
   git filter-branch --force --index-filter \
     'git rm --cached --ignore-unmatch .env' \
     --prune-empty --tag-name-filter cat -- --all

   # Force push (after coordinating with team)
   git push origin --force --all
   ```

### Long-term Actions

1. **Check Billing/Usage**
   - Monitor for unauthorized usage
   - Check billing dashboards
   - Review audit logs

2. **Document Incident**
   - What secret was exposed
   - How long it was exposed
   - What actions were taken
   - Lessons learned

3. **Review Process**
   - Why did hooks not catch it?
   - Update security measures
   - Team training if needed

## üîß Tech Stack Specific

{{TECH_STACK_SPECIFIC_NOTES}}

## üìö Additional Resources

- [Secret Management Best Practices](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)
- [GitHub Security Best Practices](https://docs.github.com/en/code-security/getting-started/best-practices-for-preventing-data-leaks-in-your-organization)
- [The $2,300 Incident](../../../.multiagent/docs/core/SECURITY.md) - Why this system exists

---

**Remember**: If it's a secret, it goes in `.env`. NEVER commit `.env` to git.