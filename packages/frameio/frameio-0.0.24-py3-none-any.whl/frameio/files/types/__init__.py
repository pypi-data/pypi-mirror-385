# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .file_copy_params_data import FileCopyParamsData
    from .file_create_local_upload_params_data import FileCreateLocalUploadParamsData
    from .file_create_params_data import FileCreateParamsData
    from .file_create_remote_upload_params_data import FileCreateRemoteUploadParamsData
    from .file_move_params_data import FileMoveParamsData
    from .file_update_params_data import FileUpdateParamsData
_dynamic_imports: typing.Dict[str, str] = {
    "FileCopyParamsData": ".file_copy_params_data",
    "FileCreateLocalUploadParamsData": ".file_create_local_upload_params_data",
    "FileCreateParamsData": ".file_create_params_data",
    "FileCreateRemoteUploadParamsData": ".file_create_remote_upload_params_data",
    "FileMoveParamsData": ".file_move_params_data",
    "FileUpdateParamsData": ".file_update_params_data",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "FileCopyParamsData",
    "FileCreateLocalUploadParamsData",
    "FileCreateParamsData",
    "FileCreateRemoteUploadParamsData",
    "FileMoveParamsData",
    "FileUpdateParamsData",
]
