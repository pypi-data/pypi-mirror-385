# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.asset_include import AssetInclude
from ..types.assets_with_includes_response import AssetsWithIncludesResponse
from ..types.children_type import ChildrenType
from ..types.file_with_media_links_include import FileWithMediaLinksInclude
from ..types.folder_copy_response import FolderCopyResponse
from ..types.folder_response import FolderResponse
from ..types.folder_with_includes_response import FolderWithIncludesResponse
from ..types.folders_with_includes_response import FoldersWithIncludesResponse
from ..types.include_total_count import IncludeTotalCount
from ..types.request_after_opaque_cursor import RequestAfterOpaqueCursor
from ..types.request_page_size import RequestPageSize
from ..types.uuid_ import Uuid
from .raw_client import AsyncRawFoldersClient, RawFoldersClient
from .types.folder_copy_params_data import FolderCopyParamsData
from .types.folder_create_params_data import FolderCreateParamsData
from .types.folder_move_params_data import FolderMoveParamsData
from .types.folder_update_params_data import FolderUpdateParamsData

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FoldersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFoldersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFoldersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFoldersClient
        """
        return self._raw_client

    def show(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[AssetInclude] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderWithIncludesResponse:
        """
        Show folder details. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[AssetInclude]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderWithIncludesResponse
            OK

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.show(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="creator",
        )
        """
        _response = self._raw_client.show(account_id, folder_id, include=include, request_options=request_options)
        return _response.data

    def delete(
        self, account_id: Uuid, folder_id: Uuid, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete folder by id.

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.delete(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
        )
        """
        _response = self._raw_client.delete(account_id, folder_id, request_options=request_options)
        return _response.data

    def update(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FolderUpdateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderResponse:
        """
        Update folder details.

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FolderUpdateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderResponse
            OK

        Examples
        --------
        from frameio import Frameio
        from frameio.folders import FolderUpdateParamsData

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.update(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FolderUpdateParamsData(
                name="Folder name",
            ),
        )
        """
        _response = self._raw_client.update(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    def index(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        type: typing.Optional[ChildrenType] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssetsWithIncludesResponse:
        """
        List the children in the given folder.
        <br><br>
        Use the `include` query parameter to selectively include additional properties in the response.
        <br><br>
        Note: if you include `media_links.original` and the user does not have permission to download files
        in the corresponding project, then this endpoint will respond with a `403 Forbidden` error.
        If the content is inaccessible because watermarking is required for this user and isn't supported by
        the requested media_links, then the request will succeed but the unsupported media links will be set to null.
        Similarly, if a requested transcode link does not exist for a particular file (e.g. including
        `media_links.video_h264_180` on a static image file) or transoding process hasn't finished
        (i.e. the file's `status` is "uploaded" rather than "transcoded"), then the a media link will also be set to
        null in the response payload. In short, the client must handle null media links gracefully.

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        type : typing.Optional[ChildrenType]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssetsWithIncludesResponse
            OK

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.index(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="media_links",
            type="file,folder,version_stack",
            after="<opaque_cursor>",
            page_size=10,
            include_total_count=False,
        )
        """
        _response = self._raw_client.index(
            account_id,
            folder_id,
            include=include,
            type=type,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    def copy(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: typing.Optional[FolderCopyParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderCopyResponse:
        """
        Copy folder. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : typing.Optional[FolderCopyParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderCopyResponse
            OK

        Examples
        --------
        from frameio import Frameio
        from frameio.folders import FolderCopyParamsData

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.copy(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FolderCopyParamsData(
                parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
            ),
        )
        """
        _response = self._raw_client.copy(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    def list(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[AssetInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FoldersWithIncludesResponse:
        """
        List folders in a given folder. <br><br>Rate Limits: 5 calls per 1 second(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[AssetInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FoldersWithIncludesResponse
            OK

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.list(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="creator",
            after="<opaque_cursor>",
            page_size=10,
            include_total_count=False,
        )
        """
        _response = self._raw_client.list(
            account_id,
            folder_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FolderCreateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderResponse:
        """
        Create a new folder inside the given <i>folder_id</i> path param. <br><br>Rate Limits: 3 calls per 1 second(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FolderCreateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderResponse
            Created

        Examples
        --------
        from frameio import Frameio
        from frameio.folders import FolderCreateParamsData

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.create(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FolderCreateParamsData(
                name="Folder name",
            ),
        )
        """
        _response = self._raw_client.create(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    def move(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FolderMoveParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderResponse:
        """
        Move folder to a folder. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FolderMoveParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderResponse
            OK

        Examples
        --------
        from frameio import Frameio
        from frameio.folders import FolderMoveParamsData

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.folders.move(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FolderMoveParamsData(
                parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
            ),
        )
        """
        _response = self._raw_client.move(account_id, folder_id, data=data, request_options=request_options)
        return _response.data


class AsyncFoldersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFoldersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFoldersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFoldersClient
        """
        return self._raw_client

    async def show(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[AssetInclude] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderWithIncludesResponse:
        """
        Show folder details. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[AssetInclude]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.show(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="creator",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.show(account_id, folder_id, include=include, request_options=request_options)
        return _response.data

    async def delete(
        self, account_id: Uuid, folder_id: Uuid, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete folder by id.

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.delete(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(account_id, folder_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FolderUpdateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderResponse:
        """
        Update folder details.

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FolderUpdateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio
        from frameio.folders import FolderUpdateParamsData

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.update(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FolderUpdateParamsData(
                    name="Folder name",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    async def index(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        type: typing.Optional[ChildrenType] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssetsWithIncludesResponse:
        """
        List the children in the given folder.
        <br><br>
        Use the `include` query parameter to selectively include additional properties in the response.
        <br><br>
        Note: if you include `media_links.original` and the user does not have permission to download files
        in the corresponding project, then this endpoint will respond with a `403 Forbidden` error.
        If the content is inaccessible because watermarking is required for this user and isn't supported by
        the requested media_links, then the request will succeed but the unsupported media links will be set to null.
        Similarly, if a requested transcode link does not exist for a particular file (e.g. including
        `media_links.video_h264_180` on a static image file) or transoding process hasn't finished
        (i.e. the file's `status` is "uploaded" rather than "transcoded"), then the a media link will also be set to
        null in the response payload. In short, the client must handle null media links gracefully.

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        type : typing.Optional[ChildrenType]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssetsWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.index(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="media_links",
                type="file,folder,version_stack",
                after="<opaque_cursor>",
                page_size=10,
                include_total_count=False,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.index(
            account_id,
            folder_id,
            include=include,
            type=type,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    async def copy(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: typing.Optional[FolderCopyParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderCopyResponse:
        """
        Copy folder. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : typing.Optional[FolderCopyParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderCopyResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio
        from frameio.folders import FolderCopyParamsData

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.copy(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FolderCopyParamsData(
                    parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.copy(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    async def list(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[AssetInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FoldersWithIncludesResponse:
        """
        List folders in a given folder. <br><br>Rate Limits: 5 calls per 1 second(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[AssetInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FoldersWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.list(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="creator",
                after="<opaque_cursor>",
                page_size=10,
                include_total_count=False,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            account_id,
            folder_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FolderCreateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderResponse:
        """
        Create a new folder inside the given <i>folder_id</i> path param. <br><br>Rate Limits: 3 calls per 1 second(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FolderCreateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderResponse
            Created

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio
        from frameio.folders import FolderCreateParamsData

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.create(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FolderCreateParamsData(
                    name="Folder name",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    async def move(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FolderMoveParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FolderResponse:
        """
        Move folder to a folder. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FolderMoveParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FolderResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio
        from frameio.folders import FolderMoveParamsData

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.folders.move(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FolderMoveParamsData(
                    parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.move(account_id, folder_id, data=data, request_options=request_options)
        return _response.data
