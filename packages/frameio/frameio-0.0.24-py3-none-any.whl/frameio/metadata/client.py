# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.metadata_response import MetadataResponse
from ..types.uuid_ import Uuid
from .raw_client import AsyncRawMetadataClient, RawMetadataClient
from .types.bulk_update_metadata_params_data import BulkUpdateMetadataParamsData

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MetadataClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMetadataClient
        """
        return self._raw_client

    def bulk_update(
        self,
        account_id: Uuid,
        project_id: Uuid,
        *,
        data: BulkUpdateMetadataParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update metadata values across multiple files. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        project_id : Uuid


        data : BulkUpdateMetadataParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from frameio import Frameio
        from frameio.metadata import (
            BulkUpdateMetadataParamsData,
            BulkUpdateMetadataParamsDataValuesItem,
        )

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.metadata.bulk_update(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            project_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=BulkUpdateMetadataParamsData(
                file_ids=[
                    "6faffaff-604c-449b-b2b7-f85d49199f2f",
                    "d32f3bf4-906d-4c9c-984d-25e19c542f89",
                ],
                values=[
                    BulkUpdateMetadataParamsDataValuesItem(
                        field_definition_id="fa8a0aed-d5f6-403f-b440-8ed4bb305884",
                        value="active",
                    ),
                    BulkUpdateMetadataParamsDataValuesItem(
                        field_definition_id="95b14888-0400-45f7-9de8-1b71b2ed0114",
                        value=5,
                    ),
                    BulkUpdateMetadataParamsDataValuesItem(
                        field_definition_id="c7d70b7f-2ae1-4052-8a2f-b195198686a5",
                        value="d7d685a0-94a3-4c78-b2cd-a3cf77c2e060",
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.bulk_update(account_id, project_id, data=data, request_options=request_options)
        return _response.data

    def show(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        show_null: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MetadataResponse:
        """
        Show the metadata of a file. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        show_null : typing.Optional[bool]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetadataResponse
            OK

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.metadata.show(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            show_null=True,
        )
        """
        _response = self._raw_client.show(account_id, file_id, show_null=show_null, request_options=request_options)
        return _response.data


class AsyncMetadataClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMetadataClient
        """
        return self._raw_client

    async def bulk_update(
        self,
        account_id: Uuid,
        project_id: Uuid,
        *,
        data: BulkUpdateMetadataParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update metadata values across multiple files. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        project_id : Uuid


        data : BulkUpdateMetadataParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio
        from frameio.metadata import (
            BulkUpdateMetadataParamsData,
            BulkUpdateMetadataParamsDataValuesItem,
        )

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.bulk_update(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                project_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=BulkUpdateMetadataParamsData(
                    file_ids=[
                        "6faffaff-604c-449b-b2b7-f85d49199f2f",
                        "d32f3bf4-906d-4c9c-984d-25e19c542f89",
                    ],
                    values=[
                        BulkUpdateMetadataParamsDataValuesItem(
                            field_definition_id="fa8a0aed-d5f6-403f-b440-8ed4bb305884",
                            value="active",
                        ),
                        BulkUpdateMetadataParamsDataValuesItem(
                            field_definition_id="95b14888-0400-45f7-9de8-1b71b2ed0114",
                            value=5,
                        ),
                        BulkUpdateMetadataParamsDataValuesItem(
                            field_definition_id="c7d70b7f-2ae1-4052-8a2f-b195198686a5",
                            value="d7d685a0-94a3-4c78-b2cd-a3cf77c2e060",
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.bulk_update(
            account_id, project_id, data=data, request_options=request_options
        )
        return _response.data

    async def show(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        show_null: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MetadataResponse:
        """
        Show the metadata of a file. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        show_null : typing.Optional[bool]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetadataResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.show(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                show_null=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.show(
            account_id, file_id, show_null=show_null, request_options=request_options
        )
        return _response.data
