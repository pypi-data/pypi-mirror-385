# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .add_asset_params_data import AddAssetParamsData
    from .add_reviewers_to_share_params_data import AddReviewersToShareParamsData
    from .add_reviewers_to_share_params_data_reviewers import AddReviewersToShareParamsDataReviewers
    from .create_share_params_data import CreateShareParamsData, CreateShareParamsData_Asset
    from .remove_reviewer_params_data import RemoveReviewerParamsData
    from .remove_reviewer_params_data_reviewers import RemoveReviewerParamsDataReviewers
    from .update_share_params_data import UpdateShareParamsData
    from .update_share_params_data_access import UpdateShareParamsDataAccess
_dynamic_imports: typing.Dict[str, str] = {
    "AddAssetParamsData": ".add_asset_params_data",
    "AddReviewersToShareParamsData": ".add_reviewers_to_share_params_data",
    "AddReviewersToShareParamsDataReviewers": ".add_reviewers_to_share_params_data_reviewers",
    "CreateShareParamsData": ".create_share_params_data",
    "CreateShareParamsData_Asset": ".create_share_params_data",
    "RemoveReviewerParamsData": ".remove_reviewer_params_data",
    "RemoveReviewerParamsDataReviewers": ".remove_reviewer_params_data_reviewers",
    "UpdateShareParamsData": ".update_share_params_data",
    "UpdateShareParamsDataAccess": ".update_share_params_data_access",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AddAssetParamsData",
    "AddReviewersToShareParamsData",
    "AddReviewersToShareParamsDataReviewers",
    "CreateShareParamsData",
    "CreateShareParamsData_Asset",
    "RemoveReviewerParamsData",
    "RemoveReviewerParamsDataReviewers",
    "UpdateShareParamsData",
    "UpdateShareParamsDataAccess",
]
