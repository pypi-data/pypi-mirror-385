# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.comment_include import CommentInclude
from ..types.comment_response import CommentResponse
from ..types.comment_with_includes_response import CommentWithIncludesResponse
from ..types.comments_with_includes_response import CommentsWithIncludesResponse
from ..types.include_total_count import IncludeTotalCount
from ..types.request_after_opaque_cursor import RequestAfterOpaqueCursor
from ..types.request_page_size import RequestPageSize
from ..types.uuid_ import Uuid
from .raw_client import AsyncRawCommentsClient, RawCommentsClient
from .types.create_comment_params_data import CreateCommentParamsData
from .types.update_comment_params_data import UpdateCommentParamsData

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CommentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCommentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCommentsClient
        """
        return self._raw_client

    def show(
        self,
        account_id: Uuid,
        comment_id: Uuid,
        *,
        include: typing.Optional[CommentInclude] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentWithIncludesResponse:
        """
        Show a single comment on a file. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        comment_id : Uuid


        include : typing.Optional[CommentInclude]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentWithIncludesResponse
            OK

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.comments.show(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            comment_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="owner",
        )
        """
        _response = self._raw_client.show(account_id, comment_id, include=include, request_options=request_options)
        return _response.data

    def delete(
        self, account_id: Uuid, comment_id: Uuid, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete comment from an asset. <br><br>Rate Limits: 60 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        comment_id : Uuid


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.comments.delete(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            comment_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
        )
        """
        _response = self._raw_client.delete(account_id, comment_id, request_options=request_options)
        return _response.data

    def update(
        self,
        account_id: Uuid,
        comment_id: Uuid,
        *,
        data: UpdateCommentParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentResponse:
        """
        Update comment on given asset. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        comment_id : Uuid


        data : UpdateCommentParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse
            OK

        Examples
        --------
        from frameio import Frameio
        from frameio.comments import UpdateCommentParamsData

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.comments.update(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            comment_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=UpdateCommentParamsData(
                page=4,
                text="This is great!",
            ),
        )
        """
        _response = self._raw_client.update(account_id, comment_id, data=data, request_options=request_options)
        return _response.data

    def index(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        include: typing.Optional[CommentInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentsWithIncludesResponse:
        """
        List comments on a given asset. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        include : typing.Optional[CommentInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentsWithIncludesResponse
            OK

        Examples
        --------
        from frameio import Frameio

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.comments.index(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="owner",
            after="<opaque_cursor>",
            page_size=10,
            include_total_count=False,
        )
        """
        _response = self._raw_client.index(
            account_id,
            file_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: CreateCommentParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentResponse:
        """
        Create a comment on a file. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : CreateCommentParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse
            Created

        Examples
        --------
        from frameio import Frameio
        from frameio.comments import CreateCommentParamsData

        client = Frameio(
            token="YOUR_TOKEN",
        )
        client.comments.create(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=CreateCommentParamsData(
                page=4,
                text="This is great!",
            ),
        )
        """
        _response = self._raw_client.create(account_id, file_id, data=data, request_options=request_options)
        return _response.data


class AsyncCommentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCommentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCommentsClient
        """
        return self._raw_client

    async def show(
        self,
        account_id: Uuid,
        comment_id: Uuid,
        *,
        include: typing.Optional[CommentInclude] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentWithIncludesResponse:
        """
        Show a single comment on a file. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        comment_id : Uuid


        include : typing.Optional[CommentInclude]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.comments.show(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                comment_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="owner",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.show(
            account_id, comment_id, include=include, request_options=request_options
        )
        return _response.data

    async def delete(
        self, account_id: Uuid, comment_id: Uuid, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete comment from an asset. <br><br>Rate Limits: 60 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        comment_id : Uuid


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.comments.delete(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                comment_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(account_id, comment_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        account_id: Uuid,
        comment_id: Uuid,
        *,
        data: UpdateCommentParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentResponse:
        """
        Update comment on given asset. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        comment_id : Uuid


        data : UpdateCommentParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio
        from frameio.comments import UpdateCommentParamsData

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.comments.update(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                comment_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=UpdateCommentParamsData(
                    page=4,
                    text="This is great!",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(account_id, comment_id, data=data, request_options=request_options)
        return _response.data

    async def index(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        include: typing.Optional[CommentInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentsWithIncludesResponse:
        """
        List comments on a given asset. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        include : typing.Optional[CommentInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentsWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.comments.index(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="owner",
                after="<opaque_cursor>",
                page_size=10,
                include_total_count=False,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.index(
            account_id,
            file_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: CreateCommentParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentResponse:
        """
        Create a comment on a file. <br><br>Rate Limits: 100 calls per 1.00 minute(s) per account_user

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : CreateCommentParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse
            Created

        Examples
        --------
        import asyncio

        from frameio import AsyncFrameio
        from frameio.comments import CreateCommentParamsData

        client = AsyncFrameio(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.comments.create(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=CreateCommentParamsData(
                    page=4,
                    text="This is great!",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(account_id, file_id, data=data, request_options=request_options)
        return _response.data
