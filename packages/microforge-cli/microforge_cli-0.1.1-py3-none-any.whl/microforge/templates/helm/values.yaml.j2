# Default values for {{ project_slug }}

replicaCount: 2

image:
  repository: {{ project_slug }}
  pullPolicy: IfNotPresent
  tag: "0.1.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 80
  targetPort: 8000

ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: {{ project_slug }}.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
    # - secretName: {{ project_slug }}-tls
    #   hosts:
    #     - {{ project_slug }}.example.com

resources:
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Application configuration
config:
  appName: {{ project_name }}
  appEnv: production
  logLevel: INFO
  {% if use_redis %}
  redisUrl: redis://redis:6379/0
  {% endif %}
  {% if use_kafka %}
  kafkaBootstrapServers: kafka:9092
  {% endif %}
  {% if use_postgres %}
  databaseUrl: postgresql+asyncpg://postgres:password@postgres:5432/{{ project_slug }}
  {% endif %}

# Celery worker configuration
worker:
  enabled: true
  replicaCount: 2
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Probes
livenessProbe:
  httpGet:
    path: /health/live
    port: 8000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health/ready
    port: 8000
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

