"""Pytest configuration and fixtures."""

import pytest
from fastapi.testclient import TestClient
{% if use_postgres %}
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

from app.db.database import Base, get_session
{% endif %}
from app.main import app


@pytest.fixture
def client() -> TestClient:
    """Create a test client for the FastAPI app.

    Returns:
        TestClient instance
    """
    return TestClient(app)


{% if use_postgres %}
@pytest.fixture
def test_db():
    """Create a test database.

    Yields:
        Database session
    """
    # Create in-memory SQLite database for testing
    engine = create_engine(
        "sqlite:///:memory:",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
    )
    TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

    # Create tables
    Base.metadata.create_all(bind=engine)

    # Override dependency
    def override_get_session():
        try:
            db = TestingSessionLocal()
            yield db
        finally:
            db.close()

    app.dependency_overrides[get_session] = override_get_session

    yield TestingSessionLocal()

    # Cleanup
    Base.metadata.drop_all(bind=engine)
    app.dependency_overrides.clear()
{% endif %}


@pytest.fixture
def sample_data() -> dict:
    """Provide sample test data.

    Returns:
        Dictionary with test data
    """
    return {
        "name": "Test User",
        "email": "test@example.com",
    }

