"""Celery worker configuration and tasks."""

from celery import Celery
{% if use_kafka %}
from kombu import Exchange, Queue
{% endif %}

from app.core.config import settings
from app.core.logging import get_logger

logger = get_logger(__name__)

# Create Celery app
celery_app = Celery(
    "{{ project_slug }}",
    broker=settings.CELERY_BROKER_URL,
    {% if use_redis %}
    backend=settings.CELERY_RESULT_BACKEND,
    {% endif %}
)

# Celery configuration
celery_app.conf.update(
    task_serializer="json",
    accept_content=["json"],
    result_serializer="json",
    timezone="UTC",
    enable_utc=True,
    task_track_started=True,
    task_time_limit=30 * 60,  # 30 minutes
    task_soft_time_limit=25 * 60,  # 25 minutes
    worker_prefetch_multiplier=4,
    worker_max_tasks_per_child=1000,
)

{% if use_kafka %}
# Kafka queue configuration
celery_app.conf.task_queues = (
    Queue(
        "default",
        Exchange("default"),
        routing_key="default",
    ),
)
{% endif %}


@celery_app.task(name="{{ project_slug }}.example_task")
def example_task(name: str) -> dict[str, str]:
    """Example Celery task.

    Args:
        name: Name to process

    Returns:
        Result dictionary
    """
    logger.info("Processing example task", name=name)
    
    # Simulate some work
    result = f"Hello, {name}!"
    
    logger.info("Example task completed", result=result)
    return {"status": "success", "result": result}


@celery_app.task(name="{{ project_slug }}.async_computation")
def async_computation(x: int, y: int) -> dict[str, int]:
    """Example async computation task.

    Args:
        x: First number
        y: Second number

    Returns:
        Computation result
    """
    logger.info("Starting computation", x=x, y=y)
    
    result = x + y
    
    logger.info("Computation completed", result=result)
    return {"x": x, "y": y, "result": result}


@celery_app.task(name="{{ project_slug }}.periodic_task")
def periodic_task() -> dict[str, str]:
    """Example periodic task.

    This can be scheduled using Celery Beat.

    Returns:
        Task status
    """
    logger.info("Running periodic task")
    
    # Perform periodic work here
    
    logger.info("Periodic task completed")
    return {"status": "completed"}


# Celery Beat schedule (optional)
celery_app.conf.beat_schedule = {
    "periodic-task-every-hour": {
        "task": "{{ project_slug }}.periodic_task",
        "schedule": 3600.0,  # Every hour
    },
}

