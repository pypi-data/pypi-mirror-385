[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cc-balancer"
version = "0.1.1"
description = "Intelligent proxy for Claude Code with automatic failover and load balancing"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "CC-Balancer Contributors"}
]
keywords = ["proxy", "load-balancer", "fastapi", "claude", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.100.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pyyaml>=6.0",
    "uvicorn[standard]>=0.23.0",
    "prometheus-client>=0.17.0",
    "structlog>=23.0.0",
    "cachetools>=5.3.0",
    "python-multipart>=0.0.6",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
]
oauth = [
    "authlib>=1.2.0",
]
monitoring = [
    "watchdog>=3.0.0",
]
performance = [
    "py-spy>=0.3.14",
    "locust>=2.15.0",
]

[project.scripts]
cc-balancer = "cc_balancer.main:cli"

[project.urls]
Homepage = "https://github.com/yourusername/cc-balancer"
Documentation = "https://github.com/yourusername/cc-balancer#readme"
Repository = "https://github.com/yourusername/cc-balancer"
Issues = "https://github.com/yourusername/cc-balancer/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["cc_balancer*"]
exclude = ["tests*", "frontend*", "docs*"]

[tool.setuptools.package-data]
cc_balancer = [
    "static/**/*",
    "static/*",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--cov=cc_balancer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "-v",
]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = [
    "cachetools.*",
    "structlog.*",
    "prometheus_client.*",
    "rich.*",
]
ignore_missing_imports = true
