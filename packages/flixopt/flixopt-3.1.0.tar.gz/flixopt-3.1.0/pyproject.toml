[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "flixopt"
dynamic = ["version"]
description = "Vector based energy and material flow optimization framework in Python."
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    { name = "Chair of Building Energy Systems and Heat Supply, TU Dresden", email = "peter.stange@tu-dresden.de" },
    { name = "Felix Bumann", email = "felixbumann387@gmail.com" },
    { name = "Felix Panitz", email = "baumbude@googlemail.com" },
    { name = "Peter Stange", email = "peter.stange@tu-dresden.de" }
]
maintainers = [
    { name = "Felix Bumann", email = "felixbumann387@gmail.com" },
    { name = "Peter Stange", email = "peter.stange@tu-dresden.de" }
]
keywords = ["optimization", "energy systems", "numerical analysis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    # Core scientific computing
    "numpy >= 1.21.5, < 3",
    "pandas >= 2.0.0, < 3",
    "xarray >= 2024.2.0, < 2026.0", # CalVer: allow through next calendar year
    # Optimization and data handling
    "linopy >= 0.5.1, < 0.6", # Widened from patch pin to minor range
    "h5netcdf>=1.0.0, < 2",
    # Utilities
    "pyyaml >= 6.0.0, < 7",
    "rich >= 13.0.0, < 15",
    "tomli >= 2.0.1, < 3; python_version < '3.11'", # Only needed with python 3.10 or earlier
    # Default solver
    "highspy >= 1.5.3, < 2",
    # Visualization
    "matplotlib >= 3.5.2, < 4",
    "plotly >= 5.15.0, < 7",
    # Fix for numexpr compatibility issue with numpy 1.26.4 on Python 3.10
    "numexpr >= 2.8.4, < 2.14; python_version < '3.11'", # Avoid 2.14.0 on older Python
]

[project.optional-dependencies]
# Interactive network visualization with enhanced color picker
network_viz = [
    "dash >= 3.0.0, < 4",
    "dash-cytoscape >= 1.0.0, < 2",
    "dash-daq >= 0.6.0, < 1",
    "networkx >= 3.0.0, < 4",
    "werkzeug >= 3.0.0, < 4",
    "flask >= 3.0.0, < 4",  # Explicit Flask cap to prevent transitive major bumps
]

# Full feature set (everything except dev tools)
full = [
    "pyvis==0.3.2",  # Visualizing FlowSystem Network
    "tsam >= 2.3.1, < 3",   # Time series aggregation
    "scipy >= 1.15.1, < 2", # Used by tsam. Prior versions have conflict with highspy. See https://github.com/scipy/scipy/issues/22257
    "gurobipy >= 10.0.0, < 13",
    "dash >= 3.0.0, < 4",  # Visualizing FlowSystem Network as app
    "dash-cytoscape >= 1.0.0, < 2",  # Visualizing FlowSystem Network as app
    "dash-daq >= 0.6.0, < 1",  # Visualizing FlowSystem Network as app
    "networkx >= 3.0.0, < 4",  # Visualizing FlowSystem Network as app
    "werkzeug >= 3.0.0, < 4",  # Visualizing FlowSystem Network as app
    "flask >= 3.0.0, < 4",  # Explicit Flask cap to prevent transitive major bumps
]

# Development tools and testing
dev = [
    "pytest==8.4.2",
    "pytest-xdist==3.8.0",
    "nbformat==5.10.4",
    "ruff==0.13.3",
    "pre-commit==4.3.0",
    "pyvis==0.3.2",
    "tsam==2.3.9",
    "scipy==1.15.1",
    "gurobipy==12.0.3",
    "dash==3.0.0",
    "dash-cytoscape==1.0.2",
    "dash-daq==0.6.0",
    "networkx==3.0.0",
    "werkzeug==3.0.0",
]

# Documentation building
docs = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.6.21",
    "mkdocstrings-python==1.18.2",
    "mkdocs-table-reader-plugin==3.1.0",
    "mkdocs-gen-files==0.5.0",
    "mkdocs-include-markdown-plugin==7.1.7",
    "mkdocs-literate-nav==0.6.2",
    "markdown-include==0.8.1",
    "pymdown-extensions==10.16.1",
    "pygments==2.19.2",
    "mike==2.1.3",
    "mkdocs-git-revision-date-localized-plugin==1.4.7",
    "mkdocs-minify-plugin==0.8.0",
]

[project.urls]
homepage = "https://tu-dresden.de/ing/maschinenwesen/iet/gewv/forschung/forschungsprojekte/flixopt"
repository = "https://github.com/flixOpt/flixopt"
documentation = "https://flixopt.github.io/flixopt/"

[tool.setuptools.packages.find]
where = ["."]
include = ["flixopt*"]
exclude = ["tests*", "docs*", "examples*", "Tutorials*"]
[tool.setuptools]
include-package-data = true

[tool.setuptools.exclude-package-data]
"*" = ["*.md", ".git*", "*.ipynb", "renovate.json"]

[tool.setuptools_scm]
version_scheme = "post-release"

[tool.ruff]
target-version = "py310"  # Adjust to your minimum version
# Files or directories to exclude (e.g., virtual environments, cache, build artifacts)
exclude = [
    "venv",  # Virtual environments
    "build",  # Build artifacts
    "dist",  # Distribution files
    "__pycache__",  # Bytecode cache
    ".git",  # Git folder
    ".mypy_cache",  # MyPy cache
]

line-length = 120

[tool.ruff.lint]
select = [
    # Core Python issues
    "E",     # pycodestyle errors (PEP 8 violations)
    "F",     # Pyflakes (undefined names, unused imports, etc.)
    "W",     # pycodestyle warnings (whitespace, line length, etc.)

    # Code organization
    "I",     # isort (import sorting and organization)
    "B",     # flake8-bugbear (likely bugs and design problems)
    "N",     # pep8-naming (naming convention violations)

    # Modern Python upgrades
    "UP",    # pyupgrade (modernize syntax for target Python version)
    "FA",    # flake8-future-annotations (enforce `from __future__ import annotations`)
    "TCH",   # flake8-type-checking (optimize imports for type checking)
]
ignore = [  # Ignore specific rules
    "F401",  # Allow unused imports in some cases (use __all__)
    "UP038",
    "E501"  # ignore long lines
]

extend-fixable = ["B"]   # Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.

# Apply rule exceptions to specific files or directories
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101"]  # Ignore assertions in test files
"tests/test_integration.py" = ["N806"]  # Ignore NOT lowercase names in test files
"flixopt/linear_converters.py" = ["N803"]  # Parameters with NOT lowercase names

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false  # Allow pyupgrade to drop runtime typing; prefer postponed annotations

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow",
    "examples: marks example tests (run only on releases)",
]
addopts = '-m "not examples"'  # Skip examples by default

# Warning filter configuration for pytest
# Filters are processed in order; first match wins
# Format: "action:message:category:module"
filterwarnings = [
    # === Default behavior: show all warnings ===
    "default",

    # === Treat flixopt warnings as errors (strict mode for our code) ===
    # This ensures we catch deprecations, future changes, and user warnings in our own code
    "error::DeprecationWarning:flixopt",
    "error::FutureWarning:flixopt",
    "error::UserWarning:flixopt",

    # === Third-party warnings (mirrored from __init__.py) ===
    "ignore:.*minimal value.*exceeds.*:UserWarning:tsam",
    "ignore:Coordinates across variables not equal:UserWarning:linopy",
    "ignore:.*join will change from join='outer' to join='exact'.*:FutureWarning:linopy",
    "ignore:numpy\\.ndarray size changed:RuntimeWarning",
    "ignore:.*network visualization is still experimental.*:UserWarning:flixopt",
]

[tool.bandit]
skips = ["B101", "B506"]  # assert_used and yaml_load
exclude_dirs = ["tests/"]
