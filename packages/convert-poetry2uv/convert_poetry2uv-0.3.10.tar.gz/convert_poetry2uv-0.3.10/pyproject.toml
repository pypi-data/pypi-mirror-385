[project]
name = "convert-poetry2uv"
dynamic = ["version"]
description = "Poetry to uv tool. To migrate from a poetry managed repo to uv."
authors = [{ "name" = "Bart", "email" = "bart@bamweb.nl" }]
readme = "README.md"
requires-python = ">=3.10"

dependencies = ["tomlkit>=0.13.2"]

[tool.setuptools.dynamic]
version = { attr = "convert_poetry2uv.__version__" }
readme = { file = ["README.md"] }

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "python-semantic-release>=9.21.0",
    "ruff>=0.11.10",
]

[project.scripts]
convert-poetry2uv = "convert_poetry2uv:main"
convert_poetry2uv = "convert_poetry2uv:main"

[tool.uv]
package = true

[project.urls]
"Pull Requests" = "https://github.com/bartdorlandt/convert_poetry2uv/pulls"
"Bug Tracker" = "https://github.com/bartdorlandt/convert_poetry2uv/issues"
"Changelog" = "https://github.com/bartdorlandt/convert_poetry2uv/blob/main/CHANGELOG.md"
"Repository" = "https://github.com/bartdorlandt/convert_poetry2uv"


[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "{version}"
version_variables = ["convert_poetry2uv.py:__version__"]
build_command = "curl -LsSf https://astral.sh/uv/install.sh | sh && source $HOME/.local/bin/env && uv build"

[tool.semantic_release.branches.main]
match = "(main)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.other]
match = "(.*)"
prerelease_token = "rc"
prerelease = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "style", "refactor", "chore"]
default_bump_level = 0

[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = [".git", "__pycache__", "dist", "build", ".venv", "noxfile.py"]

[tool.ruff.lint]
extend-ignore = ["D203", "D213", "PLR2004", "PLW0603"]
extend-select = [
    # pycodestyle Google style
    "D",
    # pycodestyle errors and warnings
    "E",
    "W",
    # mccabe
    "C90",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # pylint
    "PL",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # flake8-bandit
    "S",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "S101"]
