#  SPDX-License-Identifier: Apache-2.0
#  SPDX-FileCopyrightText: Copyright the Vortex contributors

from typing import final

import numpy as np
import pandas as pd
import polars as pl
import pyarrow as pa

from .dtype import DType, PType
from .scalar import Scalar, ScalarPyType
from .serde import ArrayContext

class Array:
    def __lt__(self, other: Array) -> Array: ...
    def __le__(self, other: Array) -> Array: ...
    def __gt__(self, other: Array) -> Array: ...
    def __ge__(self, other: Array) -> Array: ...
    def __len__(self) -> int: ...
    @staticmethod
    def from_arrow(
        obj: pa.Array[pa.Scalar[pa.DataType]] | pa.ChunkedArray[pa.Scalar[pa.DataType]] | pa.Table,
    ) -> Array: ...
    @staticmethod
    def from_range(obj: range) -> Array: ...
    def to_arrow_array(self) -> pa.Array[pa.Scalar[pa.DataType]]: ...
    @property
    def id(self) -> str: ...
    @property
    def nbytes(self) -> int: ...
    @property
    def dtype(self) -> DType: ...
    def filter(self, mask: Array) -> Array: ...
    def scalar_at(self, index: int) -> Scalar: ...
    def take(self, indices: Array) -> Array: ...
    def slice(self, start: int, end: int) -> Array: ...
    def display_tree(self) -> str: ...
    def to_arrow_table(self) -> pa.Table: ...
    def to_numpy(self, *, zero_copy_only: bool = True) -> np.ndarray: ...
    def to_pandas_df(self) -> pd.DataFrame: ...
    def to_polars_dataframe(self) -> pl.DataFrame: ...
    def to_polars_series(self) -> pl.Series: ...
    def to_pylist(self) -> list[ScalarPyType]: ...
    def serialize(self, ctx: ArrayContext) -> bytes: ...

class NativeArray(Array): ...

class PythonArray(Array):
    def __init__(self, len: int, dtype: DType) -> None: ...

@final
class NullArray(Array): ...

@final
class BoolArray(Array): ...

@final
class PrimitiveArray(Array):
    @property
    def ptype(self) -> PType: ...

# TODO(connor): Is this missing a `DecimalArray`?

@final
class VarBinArray(Array): ...

@final
class VarBinViewArray(Array): ...

@final
class StructArray(Array):
    def field(self, name: str) -> Array: ...
    def names(self) -> list[str]: ...

@final
class ListArray(Array): ...

@final
class FixedSizeListArray(Array): ...

@final
class ExtensionArray(Array): ...

@final
class ConstantArray(Array):
    def scalar(self) -> Scalar: ...

@final
class ChunkedArray(Array):
    def chunks(self) -> list[Array]: ...

@final
class ByteBoolArray(Array): ...

@final
class SequenceArray(Array): ...

@final
class SparseArray(Array): ...

@final
class AlpArray(Array): ...

@final
class AlpRdArray(Array): ...

@final
class DateTimePartsArray(Array): ...

@final
class DictArray(Array): ...

@final
class FsstArray(Array): ...

@final
class RunEndArray(Array): ...

@final
class ZigZagArray(Array):
    @staticmethod
    def encode(array: Array) -> Array: ...

@final
class FastLanesBitPackedArray(Array):
    @property
    def bit_width(self) -> int: ...

@final
class FastLanesDeltaArray(Array): ...

@final
class FastLanesFoRArray(Array): ...
