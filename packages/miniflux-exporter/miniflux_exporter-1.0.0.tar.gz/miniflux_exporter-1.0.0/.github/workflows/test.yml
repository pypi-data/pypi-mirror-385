name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Python 3.6 is not available on macos-latest
          - os: macos-latest
            python-version: "3.6"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install package
        run: |
          pip install -e .
          echo "Package installed, checking..."
          pip show miniflux-exporter
          echo "Checking for console scripts..."
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import sys; import os; print('Scripts dir:', os.path.join(os.path.dirname(sys.executable), 'Scripts' if sys.platform == 'win32' else ''))"

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 miniflux_exporter --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 miniflux_exporter --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check miniflux_exporter/

      - name: Type check with mypy
        run: |
          mypy miniflux_exporter --ignore-missing-imports || true

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=miniflux_exporter --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Test CLI commands
        run: |
          # Test using python -m (this should always work)
          python -m miniflux_exporter --version
          python -m miniflux_exporter --help
          # Verify package can be imported
          python -c "import miniflux_exporter; print('Package imported successfully')"
          python -c "from miniflux_exporter.cli import main; print('CLI main function accessible')"

      - name: Archive coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}-py${{ matrix.python-version }}
          path: htmlcov/
          retention-days: 7

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Lint with pylint
        run: |
          pylint miniflux_exporter --exit-zero --max-line-length=127

      - name: Check imports with isort
        run: |
          isort --check-only miniflux_exporter/

      - name: Security check with bandit
        run: |
          pip install bandit
          bandit -r miniflux_exporter -ll || true

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check README
        run: |
          test -f README.md
          test -f README_CN.md
          echo "README files exist ✓"

      - name: Check documentation files
        run: |
          test -f LICENSE
          test -f setup.py
          test -f requirements.txt
          echo "Required files exist ✓"
