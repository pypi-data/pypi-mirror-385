name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Is this a prerelease?"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install UV
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync

      - name: Install dev dependencies
        run: uv pip install -e ".[dev]"

      - name: Run tests
        run: uv run pytest

      - name: Build package
        run: uv build

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi

          # Save to file
          echo "$CHANGELOG" > CHANGELOG.md

          # Set output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          name: Release ${{ github.ref_name || github.event.inputs.version }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Installation
            ```bash
            pip install nuha==${{ github.ref_name || github.event.inputs.version }}
            ```

            ## Verification
            ```bash
            nuha --version
            ```
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          files: |
            dist/*
          fail_on_unmatched_files: false

      - name: Upload build artifacts for PyPI job
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Build and upload to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/nuha

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install UV
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync

      - name: Install dev dependencies
        run: uv pip install -e ".[dev]"

      - name: Run tests
        run: uv run pytest

      - name: Build package
        run: uv build

      - name: Publish to PyPI (Trusted Publishing or Token)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: false
          verbose: true

  # Build binaries
  build-binaries:
    name: Build Binary ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            arch: x86_64
            binary_name: nuha-linux-x86_64
          - os: macos-latest
            arch: x86_64
            binary_name: nuha-macos-x86_64
          - os: macos-latest
            arch: arm64
            binary_name: nuha-macos-arm64
          - os: windows-latest
            arch: x86_64
            binary_name: nuha-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install UV (Unix)
        if: runner.os != 'Windows'
        uses: astral-sh/setup-uv@v7

      - name: Install UV (Windows)
        if: runner.os == 'Windows'
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync

      - name: Install dev dependencies
        run: uv pip install -e ".[dev]"

      - name: Build binary
        run: python setup_binary.py production
        env:
          TARGET_ARCH: ${{ matrix.arch }}

      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          files: |
            dist/${{ matrix.binary_name }}

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install UV
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync

      - name: Update version in docs
        run: |
          # Update version in README if needed
          sed -i "s/latest version: .*/latest version: ${{ github.ref_name }}/" README.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: update version for release ${{ github.ref_name }}"
            git push
          fi

  # Notify team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi, build-binaries]
    if: always()
    steps:
      - name: Send notification
        if: needs.create-release.result == 'success'
        run: |
          echo "ðŸŽ‰ Release ${{ github.ref_name || github.event.inputs.version }} created successfully!"
          echo "ðŸ“¦ PyPI: https://pypi.org/p/nuha"
          echo "ðŸš€ GitHub Release: ${{ github.event.repository.html_url }}/releases/tag/${{ github.ref_name || github.event.inputs.version }}"

          # You can add Slack/Discord/webhook notifications here
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"ðŸŽ‰ Nuha ${{ github.ref_name || github.event.inputs.version }} has been released!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
