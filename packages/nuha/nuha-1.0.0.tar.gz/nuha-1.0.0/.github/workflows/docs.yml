name: Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - "**.md"
      - "docs/**"
      - ".github/workflows/docs.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "**.md"
      - "docs/**"
  schedule:
    # Run weekly on Sundays at 4 AM UTC
    - cron: "0 4 * * 0"
  workflow_dispatch:

jobs:
  # Documentation linting and validation
  docs-lint:
    name: Documentation Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: uv sync

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install documentation tools
        run: |
          # Install markdownlint via npm
          npm install -g markdownlint-cli
          # Install Python tools
          uv pip install mdformat-gfm

      - name: Lint markdown files
        run: |
          echo "## Documentation Linting" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Find all markdown files
          find . -name "*.md" -type f | head -10

          # Run markdownlint
          echo "### MarkdownLint Results" >> $GITHUB_STEP_SUMMARY
          markdownlint "**/*.md" >> $GITHUB_STEP_SUMMARY || echo "Some markdown issues found" >> $GITHUB_STEP_SUMMARY

      - name: Check markdown formatting
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Markdown Formatting Check" >> $GITHUB_STEP_SUMMARY

          # Check formatting
          uv run mdformat --check **/*.md >> $GITHUB_STEP_SUMMARY || echo "Formatting issues detected" >> $GITHUB_STEP_SUMMARY

      - name: Validate links
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Link Validation" >> $GITHUB_STEP_SUMMARY

          # Install link checker
          uv pip install lychee

          # Check links in README
          uv run lychee --verbose --no-progress README.md 2>&1 | tee -a $GITHUB_STEP_SUMMARY || echo "Some link issues found" >> $GITHUB_STEP_SUMMARY

  # README quality check
  readme-quality:
    name: README Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check README quality
        run: |
          echo "## README Quality Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          README_FILE="README.md"

          if [ ! -f "$README_FILE" ]; then
            echo "❌ README.md not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check README size
          README_SIZE=$(wc -l < "$README_FILE")
          echo "- **Lines**: $README_SIZE" >> $GITHUB_STEP_SUMMARY

          if [ $README_SIZE -lt 50 ]; then
            echo "- ⚠️ README is quite short" >> $GITHUB_STEP_SUMMARY
          elif [ $README_SIZE -gt 500 ]; then
            echo "- ✅ README is comprehensive" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ README has good length" >> $GITHUB_STEP_SUMMARY
          fi

          # Check required sections
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Required Sections" >> $GITHUB_STEP_SUMMARY

          declare -A sections=(
            ["Installation"]="## 🚀 Quick Start"
            ["Usage"]="## 💡 Usage Examples"
            ["Description"]="^# "
            ["Contributing"]="## 🤝 Contributing"
            ["License"]="## 📄 License"
          )

          for section in "${!sections[@]}"; do
            pattern="${sections[$section]}"
            if grep -q "$pattern" "$README_FILE"; then
              echo "- ✅ $section section found" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ $section section missing" >> $GITHUB_STEP_SUMMARY
            fi
          done

          # Check for badges
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Badges" >> $GITHUB_STEP_SUMMARY

          if grep -q "!\[.*\](.*badge.*)" "$README_FILE"; then
            BADGE_COUNT=$(grep -c "!\[.*\](.*badge.*)" "$README_FILE")
            echo "- ✅ Found $BADGE_COUNT badge(s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ No badges found" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for code examples
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Examples" >> $GITHUB_STEP_SUMMARY

          if grep -q '```' "$README_FILE"; then
            CODE_BLOCK_COUNT=$(grep -c '```' "$README_FILE")
            echo "- ✅ Found $((CODE_BLOCK_COUNT / 2)) code block(s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ No code blocks found" >> $GITHUB_STEP_SUMMARY
          fi

  # Changelog generation
  changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        run: |
          echo "## Changelog Update" >> $GITHUB_STEP_SUMMARY

          # Get last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "### Changes since $LAST_TAG" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Generate changelog entries
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> $GITHUB_STEP_SUMMARY

            # Update CHANGELOG.md if it exists
            if [ -f CHANGELOG.md ]; then
              # Create temporary file with new entries
              TEMP_FILE=$(mktemp)
              echo "# Changelog" > $TEMP_FILE
              echo "" >> $TEMP_FILE
              echo "## [Unreleased]" >> $TEMP_FILE
              git log --pretty=format:"- %s" $LAST_TAG..HEAD >> $TEMP_FILE
              echo "" >> $TEMP_FILE
              tail -n +2 CHANGELOG.md >> $TEMP_FILE

              # Replace original
              mv $TEMP_FILE CHANGELOG.md

              echo "✅ CHANGELOG.md updated" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ CHANGELOG.md not found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No previous tags found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit changelog updates
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -f CHANGELOG.md ] && git diff --quiet CHANGELOG.md; then
            echo "No changelog updates needed"
          elif [ -f CHANGELOG.md ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add CHANGELOG.md
            git commit -m "docs: update changelog [skip ci]"
            git push || echo "Push failed (may need permissions)"
          fi

  # Documentation summary
  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [docs-lint, readme-quality, changelog]
    if: always()
    steps:
      - name: Documentation Summary
        run: |
          echo "## 📚 Documentation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Collect results
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Linting | ${{ needs.docs-lint.result }} | Markdown quality and formatting |" >> $GITHUB_STEP_SUMMARY
          echo "| README Quality | ${{ needs.readme-quality.result }} | README structure and content |" >> $GITHUB_STEP_SUMMARY
          echo "| Changelog Update | ${{ needs.changelog.result }} | Auto-generate changelog |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall assessment
          FAILED_CHECKS=0
          if [[ "${{ needs.docs-lint.result }}" != "success" ]]; then ((FAILED_CHECKS++)); fi
          if [[ "${{ needs.readme-quality.result }}" != "success" ]]; then ((FAILED_CHECKS++)); fi

          if [ $FAILED_CHECKS -eq 0 ]; then
            echo "🎉 **All documentation checks passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The documentation is high quality and ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **$FAILED_CHECKS documentation check(s) failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed checks and improve the documentation." >> $GITHUB_STEP_SUMMARY
          fi
