[project]
name = "nuha"
version = "1.0.0"
description = "AI-Powered Terminal Assistant That Understands Your Commands"
authors = [
    {name = "Nuha Team", email = "support@nuha.ai"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["cli", "terminal", "ai", "assistant", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "zhipuai>=2.0.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "toml>=0.10.2",
    "cryptography>=41.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pyrefly>=0.37.0",
    "ruff>=0.14.1",
    "types-toml>=0.10.8",
]

[project.scripts]
nuha = "nuha.cli.main:app"

[project.urls]
Homepage = "https://github.com/u3n-ai/nuha"
Documentation = "https://docs.nuha.ai"
Repository = "https://github.com/u3n-ai/nuha"
Issues = "https://github.com/u3n-ai/nuha/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from e
]

[tool.pyrefly]
project-includes = ["**/*"]
project-excludes = [
    "**/node_modules",
    "**/__pycache__",
    "**/*venv/**/*",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["nuha"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=nuha",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["nuha"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
