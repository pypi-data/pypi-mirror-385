# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class IqConnectionXo(BaseModel):
    """
    IqConnectionXo
    """ # noqa: E501
    authentication_type: StrictStr = Field(description="Authentication method", alias="authenticationType")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether to use Sonatype Repository Firewall")
    fail_open_mode_enabled: Optional[StrictBool] = Field(default=None, description="Allow by default when quarantine is enabled and the IQ connection fails", alias="failOpenModeEnabled")
    password: Optional[StrictStr] = Field(default=None, description="Credentials for the Sonatype Repository Firewall User")
    properties: Optional[StrictStr] = Field(default=None, description="Additional properties to configure for Sonatype Repository Firewall")
    show_link: Optional[StrictBool] = Field(default=None, description="Show Sonatype Repository Firewall link in Browse menu when server is enabled", alias="showLink")
    timeout_seconds: Optional[Annotated[int, Field(le=3600, strict=True, ge=1)]] = Field(default=None, description="Seconds to wait for activity before stopping and retrying the connection. Leave blank to use the globally defined HTTP timeout.", alias="timeoutSeconds")
    url: Optional[StrictStr] = Field(default=None, description="The address of your Sonatype Repository Firewall")
    use_trust_store_for_url: Optional[StrictBool] = Field(default=None, description="Use certificates stored in the Nexus Repository Manager truststore to connect to Sonatype Repository Firewall", alias="useTrustStoreForUrl")
    username: Optional[StrictStr] = Field(default=None, description="User with access to Sonatype Repository Firewall")
    __properties: ClassVar[List[str]] = ["authenticationType", "enabled", "failOpenModeEnabled", "password", "properties", "showLink", "timeoutSeconds", "url", "useTrustStoreForUrl", "username"]

    @field_validator('authentication_type')
    def authentication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['USER', 'PKI']):
            raise ValueError("must be one of enum values ('USER', 'PKI')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IqConnectionXo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IqConnectionXo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationType": obj.get("authenticationType"),
            "enabled": obj.get("enabled"),
            "failOpenModeEnabled": obj.get("failOpenModeEnabled"),
            "password": obj.get("password"),
            "properties": obj.get("properties"),
            "showLink": obj.get("showLink"),
            "timeoutSeconds": obj.get("timeoutSeconds"),
            "url": obj.get("url"),
            "useTrustStoreForUrl": obj.get("useTrustStoreForUrl"),
            "username": obj.get("username")
        })
        return _obj


