# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nexus_api_client.models.s3_blob_store_api_advanced_bucket_connection import S3BlobStoreApiAdvancedBucketConnection
from nexus_api_client.models.s3_blob_store_api_bucket import S3BlobStoreApiBucket
from nexus_api_client.models.s3_blob_store_api_bucket_security import S3BlobStoreApiBucketSecurity
from nexus_api_client.models.s3_blob_store_api_encryption import S3BlobStoreApiEncryption
from nexus_api_client.models.s3_blob_store_api_failover_bucket import S3BlobStoreApiFailoverBucket
from typing import Optional, Set
from typing_extensions import Self

class S3BlobStoreApiBucketConfiguration(BaseModel):
    """
    S3BlobStoreApiBucketConfiguration
    """ # noqa: E501
    active_region: Optional[StrictStr] = Field(default=None, description="The active region based on bucket configuration, failover buckets, and EC2 region Nexus is running.", alias="activeRegion")
    advanced_bucket_connection: Optional[S3BlobStoreApiAdvancedBucketConnection] = Field(default=None, alias="advancedBucketConnection")
    bucket: S3BlobStoreApiBucket
    bucket_security: Optional[S3BlobStoreApiBucketSecurity] = Field(default=None, alias="bucketSecurity")
    encryption: Optional[S3BlobStoreApiEncryption] = None
    failover_buckets: Optional[List[S3BlobStoreApiFailoverBucket]] = Field(default=None, description="A list of secondary buckets which have bidirectional replication enabled and should be used when Nexus is running in the region", alias="failoverBuckets")
    pre_signed_url_enabled: Optional[StrictBool] = Field(default=None, description="Whether pre assigned URL is enabled or not.", alias="preSignedUrlEnabled")
    __properties: ClassVar[List[str]] = ["activeRegion", "advancedBucketConnection", "bucket", "bucketSecurity", "encryption", "failoverBuckets", "preSignedUrlEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of S3BlobStoreApiBucketConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active_region",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_bucket_connection
        if self.advanced_bucket_connection:
            _dict['advancedBucketConnection'] = self.advanced_bucket_connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bucket
        if self.bucket:
            _dict['bucket'] = self.bucket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bucket_security
        if self.bucket_security:
            _dict['bucketSecurity'] = self.bucket_security.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in failover_buckets (list)
        _items = []
        if self.failover_buckets:
            for _item_failover_buckets in self.failover_buckets:
                if _item_failover_buckets:
                    _items.append(_item_failover_buckets.to_dict())
            _dict['failoverBuckets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of S3BlobStoreApiBucketConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeRegion": obj.get("activeRegion"),
            "advancedBucketConnection": S3BlobStoreApiAdvancedBucketConnection.from_dict(obj["advancedBucketConnection"]) if obj.get("advancedBucketConnection") is not None else None,
            "bucket": S3BlobStoreApiBucket.from_dict(obj["bucket"]) if obj.get("bucket") is not None else None,
            "bucketSecurity": S3BlobStoreApiBucketSecurity.from_dict(obj["bucketSecurity"]) if obj.get("bucketSecurity") is not None else None,
            "encryption": S3BlobStoreApiEncryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "failoverBuckets": [S3BlobStoreApiFailoverBucket.from_dict(_item) for _item in obj["failoverBuckets"]] if obj.get("failoverBuckets") is not None else None,
            "preSignedUrlEnabled": obj.get("preSignedUrlEnabled")
        })
        return _obj


