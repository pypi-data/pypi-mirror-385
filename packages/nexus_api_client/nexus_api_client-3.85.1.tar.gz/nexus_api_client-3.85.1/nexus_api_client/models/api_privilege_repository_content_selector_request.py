# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ApiPrivilegeRepositoryContentSelectorRequest(BaseModel):
    """
    ApiPrivilegeRepositoryContentSelectorRequest
    """ # noqa: E501
    actions: Optional[List[StrictStr]] = Field(default=None, description="A collection of actions to associate with the privilege, using BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script privileges.")
    content_selector: Optional[StrictStr] = Field(default=None, description="The name of a content selector that will be used to grant access to content via this privilege.", alias="contentSelector")
    description: Optional[StrictStr] = None
    format: Optional[StrictStr] = Field(default=None, description="The repository format (i.e 'nuget', 'npm') this privilege will grant access to (or * for all).")
    name: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The name of the privilege.  This value cannot be changed.")
    repository: Optional[StrictStr] = Field(default=None, description="The name of the repository this privilege will grant access to (or * for all).")
    __properties: ClassVar[List[str]] = ["actions", "contentSelector", "description", "format", "name", "repository"]

    @field_validator('actions')
    def actions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['READ', 'BROWSE', 'EDIT', 'ADD', 'DELETE', 'RUN', 'START', 'STOP', 'ASSOCIATE', 'DISASSOCIATE', 'ALL']):
                raise ValueError("each list item must be one of ('READ', 'BROWSE', 'EDIT', 'ADD', 'DELETE', 'RUN', 'START', 'STOP', 'ASSOCIATE', 'DISASSOCIATE', 'ALL')")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiPrivilegeRepositoryContentSelectorRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiPrivilegeRepositoryContentSelectorRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": obj.get("actions"),
            "contentSelector": obj.get("contentSelector"),
            "description": obj.get("description"),
            "format": obj.get("format"),
            "name": obj.get("name"),
            "repository": obj.get("repository")
        })
        return _obj


