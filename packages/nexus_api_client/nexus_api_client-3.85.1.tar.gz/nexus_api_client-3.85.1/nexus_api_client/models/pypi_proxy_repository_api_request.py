# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from nexus_api_client.models.cleanup_policy_attributes import CleanupPolicyAttributes
from nexus_api_client.models.http_client_attributes import HttpClientAttributes
from nexus_api_client.models.negative_cache_attributes import NegativeCacheAttributes
from nexus_api_client.models.proxy_attributes import ProxyAttributes
from nexus_api_client.models.py_pi_proxy_attributes import PyPiProxyAttributes
from nexus_api_client.models.replication_attributes import ReplicationAttributes
from nexus_api_client.models.storage_attributes import StorageAttributes
from typing import Optional, Set
from typing_extensions import Self

class PypiProxyRepositoryApiRequest(BaseModel):
    """
    PypiProxyRepositoryApiRequest
    """ # noqa: E501
    cleanup: Optional[CleanupPolicyAttributes] = None
    http_client: HttpClientAttributes = Field(alias="httpClient")
    name: Annotated[str, Field(strict=True)] = Field(description="A unique identifier for this repository")
    negative_cache: NegativeCacheAttributes = Field(alias="negativeCache")
    online: StrictBool = Field(description="Whether this repository accepts incoming requests")
    proxy: ProxyAttributes
    pypi: Optional[PyPiProxyAttributes] = None
    replication: Optional[ReplicationAttributes] = None
    routing_rule: Optional[StrictStr] = Field(default=None, alias="routingRule")
    storage: StorageAttributes
    __properties: ClassVar[List[str]] = ["cleanup", "httpClient", "name", "negativeCache", "online", "proxy", "pypi", "replication", "routingRule", "storage"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PypiProxyRepositoryApiRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cleanup
        if self.cleanup:
            _dict['cleanup'] = self.cleanup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_client
        if self.http_client:
            _dict['httpClient'] = self.http_client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of negative_cache
        if self.negative_cache:
            _dict['negativeCache'] = self.negative_cache.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pypi
        if self.pypi:
            _dict['pypi'] = self.pypi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replication
        if self.replication:
            _dict['replication'] = self.replication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PypiProxyRepositoryApiRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cleanup": CleanupPolicyAttributes.from_dict(obj["cleanup"]) if obj.get("cleanup") is not None else None,
            "httpClient": HttpClientAttributes.from_dict(obj["httpClient"]) if obj.get("httpClient") is not None else None,
            "name": obj.get("name"),
            "negativeCache": NegativeCacheAttributes.from_dict(obj["negativeCache"]) if obj.get("negativeCache") is not None else None,
            "online": obj.get("online"),
            "proxy": ProxyAttributes.from_dict(obj["proxy"]) if obj.get("proxy") is not None else None,
            "pypi": PyPiProxyAttributes.from_dict(obj["pypi"]) if obj.get("pypi") is not None else None,
            "replication": ReplicationAttributes.from_dict(obj["replication"]) if obj.get("replication") is not None else None,
            "routingRule": obj.get("routingRule"),
            "storage": StorageAttributes.from_dict(obj["storage"]) if obj.get("storage") is not None else None
        })
        return _obj


