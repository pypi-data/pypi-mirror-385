# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiUser(BaseModel):
    """
    ApiUser
    """ # noqa: E501
    email_address: Optional[StrictStr] = Field(default=None, description="The email address associated with the user.", alias="emailAddress")
    external_roles: Optional[List[StrictStr]] = Field(default=None, description="The roles which the user has been assigned in an external source, e.g. LDAP group. These cannot be changed within the Nexus Repository Manager.", alias="externalRoles")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the user.", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the user.", alias="lastName")
    read_only: Optional[StrictBool] = Field(default=None, description="Indicates whether the user's properties could be modified by the Nexus Repository Manager. When false only roles are considered during update.", alias="readOnly")
    roles: Optional[List[StrictStr]] = Field(default=None, description="The roles which the user has been assigned within Nexus.")
    source: Optional[StrictStr] = Field(default=None, description="The user source which is the origin of this user. This value cannot be changed.")
    status: StrictStr = Field(description="The user's status, e.g. active or disabled.")
    user_id: Optional[StrictStr] = Field(default=None, description="The userid which is required for login. This value cannot be changed.", alias="userId")
    __properties: ClassVar[List[str]] = ["emailAddress", "externalRoles", "firstName", "lastName", "readOnly", "roles", "source", "status", "userId"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'locked', 'disabled', 'changepassword']):
            raise ValueError("must be one of enum values ('active', 'locked', 'disabled', 'changepassword')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emailAddress": obj.get("emailAddress"),
            "externalRoles": obj.get("externalRoles"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "readOnly": obj.get("readOnly"),
            "roles": obj.get("roles"),
            "source": obj.get("source"),
            "status": obj.get("status"),
            "userId": obj.get("userId")
        })
        return _obj


