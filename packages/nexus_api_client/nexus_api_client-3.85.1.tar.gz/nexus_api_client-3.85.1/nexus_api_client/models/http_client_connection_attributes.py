# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HttpClientConnectionAttributes(BaseModel):
    """
    HttpClientConnectionAttributes
    """ # noqa: E501
    enable_circular_redirects: Optional[StrictBool] = Field(default=None, description="Whether to enable redirects to the same location (may be required by some servers)", alias="enableCircularRedirects")
    enable_cookies: Optional[StrictBool] = Field(default=None, description="Whether to allow cookies to be stored and used", alias="enableCookies")
    retries: Optional[Annotated[int, Field(le=10, strict=True, ge=0)]] = Field(default=None, description="Total retries if the initial connection attempt suffers a timeout")
    timeout: Optional[Annotated[int, Field(le=3600, strict=True, ge=1)]] = Field(default=None, description="Seconds to wait for activity before stopping and retrying the connection")
    use_trust_store: Optional[StrictBool] = Field(default=None, description="Use certificates stored in the Nexus Repository Manager truststore to connect to external systems", alias="useTrustStore")
    user_agent_suffix: Optional[StrictStr] = Field(default=None, description="Custom fragment to append to User-Agent header in HTTP requests", alias="userAgentSuffix")
    __properties: ClassVar[List[str]] = ["enableCircularRedirects", "enableCookies", "retries", "timeout", "useTrustStore", "userAgentSuffix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpClientConnectionAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpClientConnectionAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableCircularRedirects": obj.get("enableCircularRedirects"),
            "enableCookies": obj.get("enableCookies"),
            "retries": obj.get("retries"),
            "timeout": obj.get("timeout"),
            "useTrustStore": obj.get("useTrustStore"),
            "userAgentSuffix": obj.get("userAgentSuffix")
        })
        return _obj


