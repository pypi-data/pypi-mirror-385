# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DockerProxyAttributes(BaseModel):
    """
    DockerProxyAttributes
    """ # noqa: E501
    cache_foreign_layers: Optional[StrictBool] = Field(default=None, description="Allow Nexus Repository Manager to download and cache foreign layers", alias="cacheForeignLayers")
    foreign_layer_url_whitelist: Optional[List[StrictStr]] = Field(default=None, description="Regular expressions used to identify URLs that are allowed for foreign layer requests", alias="foreignLayerUrlWhitelist")
    index_type: Optional[StrictStr] = Field(default=None, description="Type of Docker Index", alias="indexType")
    index_url: Optional[StrictStr] = Field(default=None, description="Url of Docker Index to use", alias="indexUrl")
    __properties: ClassVar[List[str]] = ["cacheForeignLayers", "foreignLayerUrlWhitelist", "indexType", "indexUrl"]

    @field_validator('index_type')
    def index_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HUB', 'REGISTRY', 'CUSTOM']):
            raise ValueError("must be one of enum values ('HUB', 'REGISTRY', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DockerProxyAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DockerProxyAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheForeignLayers": obj.get("cacheForeignLayers"),
            "foreignLayerUrlWhitelist": obj.get("foreignLayerUrlWhitelist"),
            "indexType": obj.get("indexType"),
            "indexUrl": obj.get("indexUrl")
        })
        return _obj


