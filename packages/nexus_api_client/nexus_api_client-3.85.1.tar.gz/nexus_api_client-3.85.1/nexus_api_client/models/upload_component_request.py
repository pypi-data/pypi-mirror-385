# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from typing import Optional, Set
from typing_extensions import Self

class UploadComponentRequest(BaseModel):
    """
    UploadComponentRequest
    """ # noqa: E501
    apt_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="apt Asset ", alias="apt.asset")
    apt_tag: Optional[StrictStr] = Field(default=None, description="apt Tag", alias="apt.tag")
    docker_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="docker Asset ", alias="docker.asset")
    docker_tag: Optional[StrictStr] = Field(default=None, description="docker Tag", alias="docker.tag")
    helm_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="helm Asset ", alias="helm.asset")
    helm_tag: Optional[StrictStr] = Field(default=None, description="helm Tag", alias="helm.tag")
    maven2_artifact_id: Optional[StrictStr] = Field(default=None, description="maven2 Artifact ID", alias="maven2.artifactId")
    maven2_asset1: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="maven2 Asset 1", alias="maven2.asset1")
    maven2_asset1_classifier: Optional[StrictStr] = Field(default=None, description="maven2 Asset 1 Classifier", alias="maven2.asset1.classifier")
    maven2_asset1_extension: Optional[StrictStr] = Field(default=None, description="maven2 Asset 1 Extension", alias="maven2.asset1.extension")
    maven2_asset2: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="maven2 Asset 2", alias="maven2.asset2")
    maven2_asset2_classifier: Optional[StrictStr] = Field(default=None, description="maven2 Asset 2 Classifier", alias="maven2.asset2.classifier")
    maven2_asset2_extension: Optional[StrictStr] = Field(default=None, description="maven2 Asset 2 Extension", alias="maven2.asset2.extension")
    maven2_asset3: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="maven2 Asset 3", alias="maven2.asset3")
    maven2_asset3_classifier: Optional[StrictStr] = Field(default=None, description="maven2 Asset 3 Classifier", alias="maven2.asset3.classifier")
    maven2_asset3_extension: Optional[StrictStr] = Field(default=None, description="maven2 Asset 3 Extension", alias="maven2.asset3.extension")
    maven2_generate_pom: Optional[StrictBool] = Field(default=None, description="maven2 Generate a POM file with these coordinates", alias="maven2.generate-pom")
    maven2_group_id: Optional[StrictStr] = Field(default=None, description="maven2 Group ID", alias="maven2.groupId")
    maven2_packaging: Optional[StrictStr] = Field(default=None, description="maven2 Packaging", alias="maven2.packaging")
    maven2_tag: Optional[StrictStr] = Field(default=None, description="maven2 Tag", alias="maven2.tag")
    maven2_version: Optional[StrictStr] = Field(default=None, description="maven2 Version", alias="maven2.version")
    npm_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="npm Asset ", alias="npm.asset")
    npm_tag: Optional[StrictStr] = Field(default=None, description="npm Tag", alias="npm.tag")
    nuget_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="nuget Asset ", alias="nuget.asset")
    nuget_tag: Optional[StrictStr] = Field(default=None, description="nuget Tag", alias="nuget.tag")
    pypi_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="pypi Asset ", alias="pypi.asset")
    pypi_tag: Optional[StrictStr] = Field(default=None, description="pypi Tag", alias="pypi.tag")
    r_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="r Asset ", alias="r.asset")
    r_asset_path_id: Optional[StrictStr] = Field(default=None, description="r Asset  Package Path", alias="r.asset.pathId")
    r_tag: Optional[StrictStr] = Field(default=None, description="r Tag", alias="r.tag")
    raw_asset1: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="raw Asset 1", alias="raw.asset1")
    raw_asset1_filename: Optional[StrictStr] = Field(default=None, description="raw Asset 1 Filename", alias="raw.asset1.filename")
    raw_asset2: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="raw Asset 2", alias="raw.asset2")
    raw_asset2_filename: Optional[StrictStr] = Field(default=None, description="raw Asset 2 Filename", alias="raw.asset2.filename")
    raw_asset3: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="raw Asset 3", alias="raw.asset3")
    raw_asset3_filename: Optional[StrictStr] = Field(default=None, description="raw Asset 3 Filename", alias="raw.asset3.filename")
    raw_directory: Optional[StrictStr] = Field(default=None, description="raw Directory", alias="raw.directory")
    raw_tag: Optional[StrictStr] = Field(default=None, description="raw Tag", alias="raw.tag")
    rubygems_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="rubygems Asset ", alias="rubygems.asset")
    rubygems_tag: Optional[StrictStr] = Field(default=None, description="rubygems Tag", alias="rubygems.tag")
    yum_asset: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="yum Asset ", alias="yum.asset")
    yum_asset_filename: Optional[StrictStr] = Field(default=None, description="yum Asset  Filename", alias="yum.asset.filename")
    yum_directory: Optional[StrictStr] = Field(default=None, description="yum Directory", alias="yum.directory")
    yum_tag: Optional[StrictStr] = Field(default=None, description="yum Tag", alias="yum.tag")
    __properties: ClassVar[List[str]] = ["apt.asset", "apt.tag", "docker.asset", "docker.tag", "helm.asset", "helm.tag", "maven2.artifactId", "maven2.asset1", "maven2.asset1.classifier", "maven2.asset1.extension", "maven2.asset2", "maven2.asset2.classifier", "maven2.asset2.extension", "maven2.asset3", "maven2.asset3.classifier", "maven2.asset3.extension", "maven2.generate-pom", "maven2.groupId", "maven2.packaging", "maven2.tag", "maven2.version", "npm.asset", "npm.tag", "nuget.asset", "nuget.tag", "pypi.asset", "pypi.tag", "r.asset", "r.asset.pathId", "r.tag", "raw.asset1", "raw.asset1.filename", "raw.asset2", "raw.asset2.filename", "raw.asset3", "raw.asset3.filename", "raw.directory", "raw.tag", "rubygems.asset", "rubygems.tag", "yum.asset", "yum.asset.filename", "yum.directory", "yum.tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadComponentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadComponentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apt.asset": obj.get("apt.asset"),
            "apt.tag": obj.get("apt.tag"),
            "docker.asset": obj.get("docker.asset"),
            "docker.tag": obj.get("docker.tag"),
            "helm.asset": obj.get("helm.asset"),
            "helm.tag": obj.get("helm.tag"),
            "maven2.artifactId": obj.get("maven2.artifactId"),
            "maven2.asset1": obj.get("maven2.asset1"),
            "maven2.asset1.classifier": obj.get("maven2.asset1.classifier"),
            "maven2.asset1.extension": obj.get("maven2.asset1.extension"),
            "maven2.asset2": obj.get("maven2.asset2"),
            "maven2.asset2.classifier": obj.get("maven2.asset2.classifier"),
            "maven2.asset2.extension": obj.get("maven2.asset2.extension"),
            "maven2.asset3": obj.get("maven2.asset3"),
            "maven2.asset3.classifier": obj.get("maven2.asset3.classifier"),
            "maven2.asset3.extension": obj.get("maven2.asset3.extension"),
            "maven2.generate-pom": obj.get("maven2.generate-pom"),
            "maven2.groupId": obj.get("maven2.groupId"),
            "maven2.packaging": obj.get("maven2.packaging"),
            "maven2.tag": obj.get("maven2.tag"),
            "maven2.version": obj.get("maven2.version"),
            "npm.asset": obj.get("npm.asset"),
            "npm.tag": obj.get("npm.tag"),
            "nuget.asset": obj.get("nuget.asset"),
            "nuget.tag": obj.get("nuget.tag"),
            "pypi.asset": obj.get("pypi.asset"),
            "pypi.tag": obj.get("pypi.tag"),
            "r.asset": obj.get("r.asset"),
            "r.asset.pathId": obj.get("r.asset.pathId"),
            "r.tag": obj.get("r.tag"),
            "raw.asset1": obj.get("raw.asset1"),
            "raw.asset1.filename": obj.get("raw.asset1.filename"),
            "raw.asset2": obj.get("raw.asset2"),
            "raw.asset2.filename": obj.get("raw.asset2.filename"),
            "raw.asset3": obj.get("raw.asset3"),
            "raw.asset3.filename": obj.get("raw.asset3.filename"),
            "raw.directory": obj.get("raw.directory"),
            "raw.tag": obj.get("raw.tag"),
            "rubygems.asset": obj.get("rubygems.asset"),
            "rubygems.tag": obj.get("rubygems.tag"),
            "yum.asset": obj.get("yum.asset"),
            "yum.asset.filename": obj.get("yum.asset.filename"),
            "yum.directory": obj.get("yum.directory"),
            "yum.tag": obj.get("yum.tag")
        })
        return _obj


