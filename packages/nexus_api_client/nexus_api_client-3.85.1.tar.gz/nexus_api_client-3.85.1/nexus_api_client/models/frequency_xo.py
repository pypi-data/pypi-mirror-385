# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FrequencyXO(BaseModel):
    """
    FrequencyXO
    """ # noqa: E501
    cron_expression: Optional[StrictStr] = Field(default=None, description="Cron expression for the task. Only applies for for \"cron\" schedule.", alias="cronExpression")
    recurring_days: Optional[List[StrictInt]] = Field(default=None, description="Array with the number of the days the task must run. For \"weekly\" schedule allowed values, 1 to 7. For \"monthly\" schedule allowed values, 1 to 31.", alias="recurringDays")
    schedule: StrictStr = Field(description="Type of schedule (\"manual\", \"once\", \"hourly\", \"daily\", \"weekly\", \"monthly\", \"cron\")")
    start_date: Optional[StrictInt] = Field(default=None, description="Start date of the task represented in unix timestamp. Does not apply for \"manual\" schedule.", alias="startDate")
    time_zone_offset: Optional[StrictStr] = Field(default=None, description="The offset time zone of the client. Example: ", alias="timeZoneOffset")
    __properties: ClassVar[List[str]] = ["cronExpression", "recurringDays", "schedule", "startDate", "timeZoneOffset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FrequencyXO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FrequencyXO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cronExpression": obj.get("cronExpression"),
            "recurringDays": obj.get("recurringDays"),
            "schedule": obj.get("schedule"),
            "startDate": obj.get("startDate"),
            "timeZoneOffset": obj.get("timeZoneOffset")
        })
        return _obj


