# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from nexus_api_client.models.s3_blob_store_api_model import S3BlobStoreApiModel

class TestS3BlobStoreApiModel(unittest.TestCase):
    """S3BlobStoreApiModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> S3BlobStoreApiModel:
        """Test S3BlobStoreApiModel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `S3BlobStoreApiModel`
        """
        model = S3BlobStoreApiModel()
        if include_optional:
            return S3BlobStoreApiModel(
                bucket_configuration = nexus_api_client.models.s3_blob_store_api_bucket_configuration.S3BlobStoreApiBucketConfiguration(
                    active_region = '', 
                    advanced_bucket_connection = nexus_api_client.models.s3_blob_store_api_advanced_bucket_connection.S3BlobStoreApiAdvancedBucketConnection(
                        endpoint = '', 
                        force_path_style = True, 
                        max_connection_pool_size = 56, 
                        signer_type = '', ), 
                    bucket = nexus_api_client.models.s3_blob_store_api_bucket.S3BlobStoreApiBucket(
                        name = '', 
                        prefix = '', 
                        region = 'DEFAULT', ), 
                    bucket_security = nexus_api_client.models.s3_blob_store_api_bucket_security.S3BlobStoreApiBucketSecurity(
                        access_key_id = '', 
                        role = '', 
                        secret_access_key = '', 
                        session_token = '', ), 
                    encryption = nexus_api_client.models.s3_blob_store_api_encryption.S3BlobStoreApiEncryption(
                        encryption_key = '', 
                        encryption_type = 's3ManagedEncryption', ), 
                    failover_buckets = [
                        nexus_api_client.models.s3_blob_store_api_failover_bucket.S3BlobStoreApiFailoverBucket(
                            bucket_name = '', 
                            region = '', )
                        ], 
                    pre_signed_url_enabled = True, ),
                name = 's3',
                soft_quota = nexus_api_client.models.blob_store_api_soft_quota.BlobStoreApiSoftQuota(
                    limit = 0, 
                    type = 'spaceRemainingQuota', ),
                type = 'S3'
            )
        else:
            return S3BlobStoreApiModel(
                bucket_configuration = nexus_api_client.models.s3_blob_store_api_bucket_configuration.S3BlobStoreApiBucketConfiguration(
                    active_region = '', 
                    advanced_bucket_connection = nexus_api_client.models.s3_blob_store_api_advanced_bucket_connection.S3BlobStoreApiAdvancedBucketConnection(
                        endpoint = '', 
                        force_path_style = True, 
                        max_connection_pool_size = 56, 
                        signer_type = '', ), 
                    bucket = nexus_api_client.models.s3_blob_store_api_bucket.S3BlobStoreApiBucket(
                        name = '', 
                        prefix = '', 
                        region = 'DEFAULT', ), 
                    bucket_security = nexus_api_client.models.s3_blob_store_api_bucket_security.S3BlobStoreApiBucketSecurity(
                        access_key_id = '', 
                        role = '', 
                        secret_access_key = '', 
                        session_token = '', ), 
                    encryption = nexus_api_client.models.s3_blob_store_api_encryption.S3BlobStoreApiEncryption(
                        encryption_key = '', 
                        encryption_type = 's3ManagedEncryption', ), 
                    failover_buckets = [
                        nexus_api_client.models.s3_blob_store_api_failover_bucket.S3BlobStoreApiFailoverBucket(
                            bucket_name = '', 
                            region = '', )
                        ], 
                    pre_signed_url_enabled = True, ),
                name = 's3',
        )
        """

    def testS3BlobStoreApiModel(self):
        """Test S3BlobStoreApiModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
