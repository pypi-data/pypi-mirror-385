# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from nexus_api_client.api.blob_store_api import BlobStoreApi


class TestBlobStoreApi(unittest.TestCase):
    """BlobStoreApi unit test stubs"""

    def setUp(self) -> None:
        self.api = BlobStoreApi()

    def tearDown(self) -> None:
        pass

    def test_convert_blob_store_to_group(self) -> None:
        """Test case for convert_blob_store_to_group

        Convert a blob store to a group blob store
        """
        pass

    def test_create_blob_store1(self) -> None:
        """Test case for create_blob_store1

        Create an Azure blob store
        """
        pass

    def test_create_blob_store2(self) -> None:
        """Test case for create_blob_store2

        Create a Google Cloud blob store
        """
        pass

    def test_create_file_blob_store(self) -> None:
        """Test case for create_file_blob_store

        Create a file blob store
        """
        pass

    def test_create_group_blob_store(self) -> None:
        """Test case for create_group_blob_store

        Create a group blob store
        """
        pass

    def test_create_s3_blob_store(self) -> None:
        """Test case for create_s3_blob_store

        Create an S3 blob store
        """
        pass

    def test_delete_blob_store(self) -> None:
        """Test case for delete_blob_store

        Delete a blob store by name
        """
        pass

    def test_get_blob_store1(self) -> None:
        """Test case for get_blob_store1

        Get an Azure blob store configuration by name
        """
        pass

    def test_get_blob_store2(self) -> None:
        """Test case for get_blob_store2

        Get the configuration for a Google Cloud blob store
        """
        pass

    def test_get_file_blob_store_configuration(self) -> None:
        """Test case for get_file_blob_store_configuration

        Get a file blob store configuration by name
        """
        pass

    def test_get_group_blob_store_configuration(self) -> None:
        """Test case for get_group_blob_store_configuration

        Get a group blob store configuration by name
        """
        pass

    def test_get_regions_by_project_id(self) -> None:
        """Test case for get_regions_by_project_id

        Get the project regions by project's id
        """
        pass

    def test_get_s3_blob_store(self) -> None:
        """Test case for get_s3_blob_store

        Get a S3 blob store configuration by name
        """
        pass

    def test_list_blob_stores(self) -> None:
        """Test case for list_blob_stores

        List the blob stores
        """
        pass

    def test_quota_status(self) -> None:
        """Test case for quota_status

        Get quota status for a given blob store
        """
        pass

    def test_update_blob_store1(self) -> None:
        """Test case for update_blob_store1

        Update an Azure blob store configuration by name
        """
        pass

    def test_update_blob_store2(self) -> None:
        """Test case for update_blob_store2

        Update a Google Cloud blob store
        """
        pass

    def test_update_file_blob_store(self) -> None:
        """Test case for update_file_blob_store

        Update a file blob store configuration by name
        """
        pass

    def test_update_group_blob_store(self) -> None:
        """Test case for update_group_blob_store

        Update a group blob store configuration by name
        """
        pass

    def test_update_s3_blob_store(self) -> None:
        """Test case for update_s3_blob_store

        Update an S3 blob store configuration by name
        """
        pass


if __name__ == '__main__':
    unittest.main()
