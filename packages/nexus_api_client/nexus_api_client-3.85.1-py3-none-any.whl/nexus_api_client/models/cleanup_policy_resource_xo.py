# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CleanupPolicyResourceXO(BaseModel):
    """
    CleanupPolicyResourceXO
    """ # noqa: E501
    criteria_asset_regex: Optional[StrictStr] = Field(default=None, description="asset name matcher (Remove components that have at least one asset name matching the following regular expression pattern:)", alias="criteriaAssetRegex")
    criteria_last_blob_updated: Optional[StrictInt] = Field(default=None, description="component age (Components published over “x” days ago (e.g 1-999))", alias="criteriaLastBlobUpdated")
    criteria_last_downloaded: Optional[StrictInt] = Field(default=None, description="component usage (Components downloaded in “x” amount of days (e.g 1-999))", alias="criteriaLastDownloaded")
    criteria_release_type: Optional[StrictStr] = Field(default=None, description="release type (Remove components that are of the following release type:)", alias="criteriaReleaseType")
    format: StrictStr = Field(description="repository format")
    name: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="policy name")
    notes: Optional[StrictStr] = Field(default=None, description="description")
    retain: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="keep the latest \"x\" number of versions")
    __properties: ClassVar[List[str]] = ["criteriaAssetRegex", "criteriaLastBlobUpdated", "criteriaLastDownloaded", "criteriaReleaseType", "format", "name", "notes", "retain"]

    @field_validator('criteria_release_type')
    def criteria_release_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RELEASES', 'PRERELEASES', 'RELEASES_AND_PRERELEASES']):
            raise ValueError("must be one of enum values ('RELEASES', 'PRERELEASES', 'RELEASES_AND_PRERELEASES')")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9\-]{1}[a-zA-Z0-9_\-\.]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CleanupPolicyResourceXO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CleanupPolicyResourceXO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "criteriaAssetRegex": obj.get("criteriaAssetRegex"),
            "criteriaLastBlobUpdated": obj.get("criteriaLastBlobUpdated"),
            "criteriaLastDownloaded": obj.get("criteriaLastDownloaded"),
            "criteriaReleaseType": obj.get("criteriaReleaseType"),
            "format": obj.get("format"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "retain": obj.get("retain")
        })
        return _obj


