# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiEmailConfiguration(BaseModel):
    """
    ApiEmailConfiguration
    """ # noqa: E501
    enabled: Optional[StrictBool] = None
    from_address: Optional[StrictStr] = Field(default=None, alias="fromAddress")
    host: Optional[StrictStr] = None
    nexus_trust_store_enabled: Optional[StrictBool] = Field(default=None, description="Use the Nexus Repository Manager's certificate truststore", alias="nexusTrustStoreEnabled")
    password: Optional[StrictStr] = None
    port: StrictInt
    ssl_on_connect_enabled: Optional[StrictBool] = Field(default=None, description="Enable SSL/TLS Encryption upon Connection", alias="sslOnConnectEnabled")
    ssl_server_identity_check_enabled: Optional[StrictBool] = Field(default=None, description="Verify the server certificate when using TLS or SSL", alias="sslServerIdentityCheckEnabled")
    start_tls_enabled: Optional[StrictBool] = Field(default=None, description="Enable STARTTLS Support for Insecure Connections", alias="startTlsEnabled")
    start_tls_required: Optional[StrictBool] = Field(default=None, description="Require STARTTLS Support", alias="startTlsRequired")
    subject_prefix: Optional[StrictStr] = Field(default=None, description="A prefix to add to all email subjects to aid in identifying automated emails", alias="subjectPrefix")
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["enabled", "fromAddress", "host", "nexusTrustStoreEnabled", "password", "port", "sslOnConnectEnabled", "sslServerIdentityCheckEnabled", "startTlsEnabled", "startTlsRequired", "subjectPrefix", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiEmailConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiEmailConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "fromAddress": obj.get("fromAddress"),
            "host": obj.get("host"),
            "nexusTrustStoreEnabled": obj.get("nexusTrustStoreEnabled"),
            "password": obj.get("password"),
            "port": obj.get("port"),
            "sslOnConnectEnabled": obj.get("sslOnConnectEnabled"),
            "sslServerIdentityCheckEnabled": obj.get("sslServerIdentityCheckEnabled"),
            "startTlsEnabled": obj.get("startTlsEnabled"),
            "startTlsRequired": obj.get("startTlsRequired"),
            "subjectPrefix": obj.get("subjectPrefix"),
            "username": obj.get("username")
        })
        return _obj


