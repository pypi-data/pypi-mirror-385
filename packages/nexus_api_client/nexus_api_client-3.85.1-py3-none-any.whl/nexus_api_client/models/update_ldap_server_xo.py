# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UpdateLdapServerXo(BaseModel):
    """
    UpdateLdapServerXo
    """ # noqa: E501
    auth_password: StrictStr = Field(description="The password to bind with. Required if authScheme other than none.", alias="authPassword")
    auth_realm: Optional[StrictStr] = Field(default=None, description="The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5", alias="authRealm")
    auth_scheme: StrictStr = Field(description="Authentication scheme used for connecting to LDAP server", alias="authScheme")
    auth_username: Optional[StrictStr] = Field(default=None, description="This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.", alias="authUsername")
    connection_retry_delay_seconds: Annotated[int, Field(strict=True, ge=0)] = Field(description="How long to wait before retrying", alias="connectionRetryDelaySeconds")
    connection_timeout_seconds: Annotated[int, Field(le=3600, strict=True, ge=1)] = Field(description="How long to wait before timeout", alias="connectionTimeoutSeconds")
    group_base_dn: Optional[StrictStr] = Field(default=None, description="The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to form the full Group search base DN.", alias="groupBaseDn")
    group_id_attribute: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=0)]] = Field(default=None, description="This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static", alias="groupIdAttribute")
    group_member_attribute: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=0)]] = Field(default=None, description="LDAP attribute containing the usernames for the group. Required if groupType is static", alias="groupMemberAttribute")
    group_member_format: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=0)]] = Field(default=None, description="The format of user ID stored in the group member attribute. Required if groupType is static", alias="groupMemberFormat")
    group_object_class: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=0)]] = Field(default=None, description="LDAP class for group objects. Required if groupType is static", alias="groupObjectClass")
    group_subtree: Optional[StrictBool] = Field(default=None, description="Are groups located in structures below the group base DN", alias="groupSubtree")
    group_type: Optional[StrictStr] = Field(default=None, description="Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups). Required if ldapGroupsAsRoles is true.", alias="groupType")
    host: StrictStr = Field(description="LDAP server connection hostname")
    id: Optional[StrictStr] = Field(default=None, description="LDAP server ID")
    ldap_groups_as_roles: Optional[StrictBool] = Field(default=None, description="Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles", alias="ldapGroupsAsRoles")
    max_incidents_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="How many retry attempts", alias="maxIncidentsCount")
    name: StrictStr = Field(description="LDAP server name")
    port: StrictInt = Field(description="LDAP server connection port to use")
    protocol: StrictStr = Field(description="LDAP server connection Protocol to use")
    search_base: StrictStr = Field(description="LDAP location to be added to the connection URL", alias="searchBase")
    use_trust_store: Optional[StrictBool] = Field(default=None, description="Whether to use certificates stored in Nexus Repository Manager's truststore", alias="useTrustStore")
    user_base_dn: Optional[StrictStr] = Field(default=None, description="The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to form the full User search base DN.", alias="userBaseDn")
    user_email_address_attribute: Optional[StrictStr] = Field(default=None, description="This is used to find an email address given the user ID", alias="userEmailAddressAttribute")
    user_id_attribute: Optional[StrictStr] = Field(default=None, description="This is used to find a user given its user ID", alias="userIdAttribute")
    user_ldap_filter: Optional[StrictStr] = Field(default=None, description="LDAP search filter to limit user search", alias="userLdapFilter")
    user_member_of_attribute: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=0)]] = Field(default=None, description="Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is dynamic", alias="userMemberOfAttribute")
    user_object_class: Optional[StrictStr] = Field(default=None, description="LDAP class for user objects", alias="userObjectClass")
    user_password_attribute: Optional[StrictStr] = Field(default=None, description="If this field is blank the user will be authenticated against a bind with the LDAP server", alias="userPasswordAttribute")
    user_real_name_attribute: Optional[StrictStr] = Field(default=None, description="This is used to find a real name given the user ID", alias="userRealNameAttribute")
    user_subtree: Optional[StrictBool] = Field(default=None, description="Are users located in structures below the user base DN?", alias="userSubtree")
    __properties: ClassVar[List[str]] = ["authPassword", "authRealm", "authScheme", "authUsername", "connectionRetryDelaySeconds", "connectionTimeoutSeconds", "groupBaseDn", "groupIdAttribute", "groupMemberAttribute", "groupMemberFormat", "groupObjectClass", "groupSubtree", "groupType", "host", "id", "ldapGroupsAsRoles", "maxIncidentsCount", "name", "port", "protocol", "searchBase", "useTrustStore", "userBaseDn", "userEmailAddressAttribute", "userIdAttribute", "userLdapFilter", "userMemberOfAttribute", "userObjectClass", "userPasswordAttribute", "userRealNameAttribute", "userSubtree"]

    @field_validator('auth_scheme')
    def auth_scheme_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NONE', 'SIMPLE', 'DIGEST_MD5', 'CRAM_MD5']):
            raise ValueError("must be one of enum values ('NONE', 'SIMPLE', 'DIGEST_MD5', 'CRAM_MD5')")
        return value

    @field_validator('group_type')
    def group_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['static', 'dynamic']):
            raise ValueError("must be one of enum values ('static', 'dynamic')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ldap', 'ldaps']):
            raise ValueError("must be one of enum values ('ldap', 'ldaps')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateLdapServerXo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateLdapServerXo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authPassword": obj.get("authPassword"),
            "authRealm": obj.get("authRealm"),
            "authScheme": obj.get("authScheme"),
            "authUsername": obj.get("authUsername"),
            "connectionRetryDelaySeconds": obj.get("connectionRetryDelaySeconds"),
            "connectionTimeoutSeconds": obj.get("connectionTimeoutSeconds"),
            "groupBaseDn": obj.get("groupBaseDn"),
            "groupIdAttribute": obj.get("groupIdAttribute"),
            "groupMemberAttribute": obj.get("groupMemberAttribute"),
            "groupMemberFormat": obj.get("groupMemberFormat"),
            "groupObjectClass": obj.get("groupObjectClass"),
            "groupSubtree": obj.get("groupSubtree"),
            "groupType": obj.get("groupType"),
            "host": obj.get("host"),
            "id": obj.get("id"),
            "ldapGroupsAsRoles": obj.get("ldapGroupsAsRoles"),
            "maxIncidentsCount": obj.get("maxIncidentsCount"),
            "name": obj.get("name"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "searchBase": obj.get("searchBase"),
            "useTrustStore": obj.get("useTrustStore"),
            "userBaseDn": obj.get("userBaseDn"),
            "userEmailAddressAttribute": obj.get("userEmailAddressAttribute"),
            "userIdAttribute": obj.get("userIdAttribute"),
            "userLdapFilter": obj.get("userLdapFilter"),
            "userMemberOfAttribute": obj.get("userMemberOfAttribute"),
            "userObjectClass": obj.get("userObjectClass"),
            "userPasswordAttribute": obj.get("userPasswordAttribute"),
            "userRealNameAttribute": obj.get("userRealNameAttribute"),
            "userSubtree": obj.get("userSubtree")
        })
        return _obj


