# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from nexus_api_client.models.frequency_xo import FrequencyXO
from typing import Optional, Set
from typing_extensions import Self

class TaskTemplateXO(BaseModel):
    """
    TaskTemplateXO
    """ # noqa: E501
    alert_email: Optional[StrictStr] = Field(default=None, description="e-mail for task notifications.", alias="alertEmail")
    enabled: StrictBool = Field(description="Indicates if the task would be enabled.")
    frequency: FrequencyXO
    name: StrictStr = Field(description="The name of the task template.")
    notification_condition: StrictStr = Field(description="Condition required to notify a task execution.", alias="notificationCondition")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional properties for the task")
    type: StrictStr = Field(description="The type of task to be created.")
    __properties: ClassVar[List[str]] = ["alertEmail", "enabled", "frequency", "name", "notificationCondition", "properties", "type"]

    @field_validator('notification_condition')
    def notification_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['FAILURE', 'SUCCESS_FAILURE']):
            raise ValueError("must be one of enum values ('FAILURE', 'SUCCESS_FAILURE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskTemplateXO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of frequency
        if self.frequency:
            _dict['frequency'] = self.frequency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskTemplateXO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertEmail": obj.get("alertEmail"),
            "enabled": obj.get("enabled"),
            "frequency": FrequencyXO.from_dict(obj["frequency"]) if obj.get("frequency") is not None else None,
            "name": obj.get("name"),
            "notificationCondition": obj.get("notificationCondition"),
            "properties": obj.get("properties"),
            "type": obj.get("type")
        })
        return _obj


