# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DockerAttributes(BaseModel):
    """
    DockerAttributes
    """ # noqa: E501
    force_basic_auth: StrictBool = Field(description="Whether to force authentication (Docker Bearer Token Realm required if false)", alias="forceBasicAuth")
    http_port: Optional[StrictInt] = Field(default=None, description="Create an HTTP connector at specified port", alias="httpPort")
    https_port: Optional[StrictInt] = Field(default=None, description="Create an HTTPS connector at specified port", alias="httpsPort")
    path_enabled: Optional[StrictBool] = Field(default=None, description="Allows to use repository name in Docker image paths", alias="pathEnabled")
    subdomain: Optional[StrictStr] = Field(default=None, description="Allows to use subdomain")
    v1_enabled: StrictBool = Field(description="Whether to allow clients to use the V1 API to interact with this repository", alias="v1Enabled")
    __properties: ClassVar[List[str]] = ["forceBasicAuth", "httpPort", "httpsPort", "pathEnabled", "subdomain", "v1Enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DockerAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DockerAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "forceBasicAuth": obj.get("forceBasicAuth"),
            "httpPort": obj.get("httpPort"),
            "httpsPort": obj.get("httpsPort"),
            "pathEnabled": obj.get("pathEnabled"),
            "subdomain": obj.get("subdomain"),
            "v1Enabled": obj.get("v1Enabled")
        })
        return _obj


