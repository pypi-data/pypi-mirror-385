# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from nexus_api_client.models.proxy_settings_xo import ProxySettingsXo
from typing import Optional, Set
from typing_extensions import Self

class HttpSettingsXo(BaseModel):
    """
    HttpSettingsXo
    """ # noqa: E501
    http_proxy: ProxySettingsXo = Field(alias="httpProxy")
    https_proxy: ProxySettingsXo = Field(alias="httpsProxy")
    non_proxy_hosts: Optional[List[StrictStr]] = Field(default=None, alias="nonProxyHosts")
    retries: Annotated[int, Field(le=10, strict=True, ge=0)] = Field(description="Connection/Socket Retry Attempts")
    timeout: Annotated[int, Field(le=3600, strict=True, ge=1)] = Field(description="Connection/Socket Timeout")
    user_agent: StrictStr = Field(description="User-Agent Customization", alias="userAgent")
    __properties: ClassVar[List[str]] = ["httpProxy", "httpsProxy", "nonProxyHosts", "retries", "timeout", "userAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpSettingsXo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of http_proxy
        if self.http_proxy:
            _dict['httpProxy'] = self.http_proxy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of https_proxy
        if self.https_proxy:
            _dict['httpsProxy'] = self.https_proxy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpSettingsXo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "httpProxy": ProxySettingsXo.from_dict(obj["httpProxy"]) if obj.get("httpProxy") is not None else None,
            "httpsProxy": ProxySettingsXo.from_dict(obj["httpsProxy"]) if obj.get("httpsProxy") is not None else None,
            "nonProxyHosts": obj.get("nonProxyHosts"),
            "retries": obj.get("retries"),
            "timeout": obj.get("timeout"),
            "userAgent": obj.get("userAgent")
        })
        return _obj


