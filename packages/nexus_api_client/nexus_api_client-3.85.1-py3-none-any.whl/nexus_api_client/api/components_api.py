# coding: utf-8

"""
    Sonatype Nexus Repository Manager

    This documents the available APIs into [Sonatype Nexus Repository Manager](https://www.sonatype.com/products/sonatype-nexus-repository) as of version 3.85.0-03.

    The version of the OpenAPI document: 3.85.0-03
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictStr
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from nexus_api_client.models.component_xo import ComponentXO
from nexus_api_client.models.page_component_xo import PageComponentXO

from nexus_api_client.api_client import ApiClient, RequestSerialized
from nexus_api_client.api_response import ApiResponse
from nexus_api_client.rest import RESTResponseType


class ComponentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_component(
        self,
        id: Annotated[StrictStr, Field(description="ID of the component to delete")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a single component


        :param id: ID of the component to delete (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_component_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_component_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the component to delete")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a single component


        :param id: ID of the component to delete (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_component_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_component_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the component to delete")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a single component


        :param id: ID of the component to delete (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_component_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_component_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/components/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_component_by_id(
        self,
        id: Annotated[StrictStr, Field(description="ID of the component to retrieve")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ComponentXO:
        """Get a single component


        :param id: ID of the component to retrieve (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComponentXO",
            '403': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_component_by_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the component to retrieve")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ComponentXO]:
        """Get a single component


        :param id: ID of the component to retrieve (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComponentXO",
            '403': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_component_by_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the component to retrieve")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a single component


        :param id: ID of the component to retrieve (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_component_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComponentXO",
            '403': None,
            '404': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_component_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/components/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_components(
        self,
        repository: Annotated[StrictStr, Field(description="Repository from which you would like to retrieve components")],
        continuation_token: Annotated[Optional[StrictStr], Field(description="A token returned by a prior request. If present, the next page of results are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PageComponentXO:
        """List components


        :param repository: Repository from which you would like to retrieve components (required)
        :type repository: str
        :param continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_components_serialize(
            repository=repository,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageComponentXO",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_components_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="Repository from which you would like to retrieve components")],
        continuation_token: Annotated[Optional[StrictStr], Field(description="A token returned by a prior request. If present, the next page of results are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PageComponentXO]:
        """List components


        :param repository: Repository from which you would like to retrieve components (required)
        :type repository: str
        :param continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_components_serialize(
            repository=repository,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageComponentXO",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_components_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="Repository from which you would like to retrieve components")],
        continuation_token: Annotated[Optional[StrictStr], Field(description="A token returned by a prior request. If present, the next page of results are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List components


        :param repository: Repository from which you would like to retrieve components (required)
        :type repository: str
        :param continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_components_serialize(
            repository=repository,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageComponentXO",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_components_serialize(
        self,
        repository,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if continuation_token is not None:
            
            _query_params.append(('continuationToken', continuation_token))
            
        if repository is not None:
            
            _query_params.append(('repository', repository))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/components',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def upload_component(
        self,
        repository: Annotated[StrictStr, Field(description="Name of the repository to which you would like to upload the component")],
        apt_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="apt Asset ")] = None,
        apt_tag: Annotated[Optional[StrictStr], Field(description="apt Tag")] = None,
        docker_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="docker Asset ")] = None,
        docker_tag: Annotated[Optional[StrictStr], Field(description="docker Tag")] = None,
        helm_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="helm Asset ")] = None,
        helm_tag: Annotated[Optional[StrictStr], Field(description="helm Tag")] = None,
        maven2_artifact_id: Annotated[Optional[StrictStr], Field(description="maven2 Artifact ID")] = None,
        maven2_asset1: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 1")] = None,
        maven2_asset1_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 1 Classifier")] = None,
        maven2_asset1_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 1 Extension")] = None,
        maven2_asset2: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 2")] = None,
        maven2_asset2_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 2 Classifier")] = None,
        maven2_asset2_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 2 Extension")] = None,
        maven2_asset3: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 3")] = None,
        maven2_asset3_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 3 Classifier")] = None,
        maven2_asset3_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 3 Extension")] = None,
        maven2_generate_pom: Annotated[Optional[StrictBool], Field(description="maven2 Generate a POM file with these coordinates")] = None,
        maven2_group_id: Annotated[Optional[StrictStr], Field(description="maven2 Group ID")] = None,
        maven2_packaging: Annotated[Optional[StrictStr], Field(description="maven2 Packaging")] = None,
        maven2_tag: Annotated[Optional[StrictStr], Field(description="maven2 Tag")] = None,
        maven2_version: Annotated[Optional[StrictStr], Field(description="maven2 Version")] = None,
        npm_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="npm Asset ")] = None,
        npm_tag: Annotated[Optional[StrictStr], Field(description="npm Tag")] = None,
        nuget_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="nuget Asset ")] = None,
        nuget_tag: Annotated[Optional[StrictStr], Field(description="nuget Tag")] = None,
        pypi_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="pypi Asset ")] = None,
        pypi_tag: Annotated[Optional[StrictStr], Field(description="pypi Tag")] = None,
        r_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="r Asset ")] = None,
        r_asset_path_id: Annotated[Optional[StrictStr], Field(description="r Asset  Package Path")] = None,
        r_tag: Annotated[Optional[StrictStr], Field(description="r Tag")] = None,
        raw_asset1: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 1")] = None,
        raw_asset1_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 1 Filename")] = None,
        raw_asset2: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 2")] = None,
        raw_asset2_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 2 Filename")] = None,
        raw_asset3: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 3")] = None,
        raw_asset3_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 3 Filename")] = None,
        raw_directory: Annotated[Optional[StrictStr], Field(description="raw Directory")] = None,
        raw_tag: Annotated[Optional[StrictStr], Field(description="raw Tag")] = None,
        rubygems_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="rubygems Asset ")] = None,
        rubygems_tag: Annotated[Optional[StrictStr], Field(description="rubygems Tag")] = None,
        yum_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="yum Asset ")] = None,
        yum_asset_filename: Annotated[Optional[StrictStr], Field(description="yum Asset  Filename")] = None,
        yum_directory: Annotated[Optional[StrictStr], Field(description="yum Directory")] = None,
        yum_tag: Annotated[Optional[StrictStr], Field(description="yum Tag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Upload a single component


        :param repository: Name of the repository to which you would like to upload the component (required)
        :type repository: str
        :param apt_asset: apt Asset 
        :type apt_asset: bytearray
        :param apt_tag: apt Tag
        :type apt_tag: str
        :param docker_asset: docker Asset 
        :type docker_asset: bytearray
        :param docker_tag: docker Tag
        :type docker_tag: str
        :param helm_asset: helm Asset 
        :type helm_asset: bytearray
        :param helm_tag: helm Tag
        :type helm_tag: str
        :param maven2_artifact_id: maven2 Artifact ID
        :type maven2_artifact_id: str
        :param maven2_asset1: maven2 Asset 1
        :type maven2_asset1: bytearray
        :param maven2_asset1_classifier: maven2 Asset 1 Classifier
        :type maven2_asset1_classifier: str
        :param maven2_asset1_extension: maven2 Asset 1 Extension
        :type maven2_asset1_extension: str
        :param maven2_asset2: maven2 Asset 2
        :type maven2_asset2: bytearray
        :param maven2_asset2_classifier: maven2 Asset 2 Classifier
        :type maven2_asset2_classifier: str
        :param maven2_asset2_extension: maven2 Asset 2 Extension
        :type maven2_asset2_extension: str
        :param maven2_asset3: maven2 Asset 3
        :type maven2_asset3: bytearray
        :param maven2_asset3_classifier: maven2 Asset 3 Classifier
        :type maven2_asset3_classifier: str
        :param maven2_asset3_extension: maven2 Asset 3 Extension
        :type maven2_asset3_extension: str
        :param maven2_generate_pom: maven2 Generate a POM file with these coordinates
        :type maven2_generate_pom: bool
        :param maven2_group_id: maven2 Group ID
        :type maven2_group_id: str
        :param maven2_packaging: maven2 Packaging
        :type maven2_packaging: str
        :param maven2_tag: maven2 Tag
        :type maven2_tag: str
        :param maven2_version: maven2 Version
        :type maven2_version: str
        :param npm_asset: npm Asset 
        :type npm_asset: bytearray
        :param npm_tag: npm Tag
        :type npm_tag: str
        :param nuget_asset: nuget Asset 
        :type nuget_asset: bytearray
        :param nuget_tag: nuget Tag
        :type nuget_tag: str
        :param pypi_asset: pypi Asset 
        :type pypi_asset: bytearray
        :param pypi_tag: pypi Tag
        :type pypi_tag: str
        :param r_asset: r Asset 
        :type r_asset: bytearray
        :param r_asset_path_id: r Asset  Package Path
        :type r_asset_path_id: str
        :param r_tag: r Tag
        :type r_tag: str
        :param raw_asset1: raw Asset 1
        :type raw_asset1: bytearray
        :param raw_asset1_filename: raw Asset 1 Filename
        :type raw_asset1_filename: str
        :param raw_asset2: raw Asset 2
        :type raw_asset2: bytearray
        :param raw_asset2_filename: raw Asset 2 Filename
        :type raw_asset2_filename: str
        :param raw_asset3: raw Asset 3
        :type raw_asset3: bytearray
        :param raw_asset3_filename: raw Asset 3 Filename
        :type raw_asset3_filename: str
        :param raw_directory: raw Directory
        :type raw_directory: str
        :param raw_tag: raw Tag
        :type raw_tag: str
        :param rubygems_asset: rubygems Asset 
        :type rubygems_asset: bytearray
        :param rubygems_tag: rubygems Tag
        :type rubygems_tag: str
        :param yum_asset: yum Asset 
        :type yum_asset: bytearray
        :param yum_asset_filename: yum Asset  Filename
        :type yum_asset_filename: str
        :param yum_directory: yum Directory
        :type yum_directory: str
        :param yum_tag: yum Tag
        :type yum_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_component_serialize(
            repository=repository,
            apt_asset=apt_asset,
            apt_tag=apt_tag,
            docker_asset=docker_asset,
            docker_tag=docker_tag,
            helm_asset=helm_asset,
            helm_tag=helm_tag,
            maven2_artifact_id=maven2_artifact_id,
            maven2_asset1=maven2_asset1,
            maven2_asset1_classifier=maven2_asset1_classifier,
            maven2_asset1_extension=maven2_asset1_extension,
            maven2_asset2=maven2_asset2,
            maven2_asset2_classifier=maven2_asset2_classifier,
            maven2_asset2_extension=maven2_asset2_extension,
            maven2_asset3=maven2_asset3,
            maven2_asset3_classifier=maven2_asset3_classifier,
            maven2_asset3_extension=maven2_asset3_extension,
            maven2_generate_pom=maven2_generate_pom,
            maven2_group_id=maven2_group_id,
            maven2_packaging=maven2_packaging,
            maven2_tag=maven2_tag,
            maven2_version=maven2_version,
            npm_asset=npm_asset,
            npm_tag=npm_tag,
            nuget_asset=nuget_asset,
            nuget_tag=nuget_tag,
            pypi_asset=pypi_asset,
            pypi_tag=pypi_tag,
            r_asset=r_asset,
            r_asset_path_id=r_asset_path_id,
            r_tag=r_tag,
            raw_asset1=raw_asset1,
            raw_asset1_filename=raw_asset1_filename,
            raw_asset2=raw_asset2,
            raw_asset2_filename=raw_asset2_filename,
            raw_asset3=raw_asset3,
            raw_asset3_filename=raw_asset3_filename,
            raw_directory=raw_directory,
            raw_tag=raw_tag,
            rubygems_asset=rubygems_asset,
            rubygems_tag=rubygems_tag,
            yum_asset=yum_asset,
            yum_asset_filename=yum_asset_filename,
            yum_directory=yum_directory,
            yum_tag=yum_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def upload_component_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="Name of the repository to which you would like to upload the component")],
        apt_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="apt Asset ")] = None,
        apt_tag: Annotated[Optional[StrictStr], Field(description="apt Tag")] = None,
        docker_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="docker Asset ")] = None,
        docker_tag: Annotated[Optional[StrictStr], Field(description="docker Tag")] = None,
        helm_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="helm Asset ")] = None,
        helm_tag: Annotated[Optional[StrictStr], Field(description="helm Tag")] = None,
        maven2_artifact_id: Annotated[Optional[StrictStr], Field(description="maven2 Artifact ID")] = None,
        maven2_asset1: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 1")] = None,
        maven2_asset1_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 1 Classifier")] = None,
        maven2_asset1_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 1 Extension")] = None,
        maven2_asset2: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 2")] = None,
        maven2_asset2_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 2 Classifier")] = None,
        maven2_asset2_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 2 Extension")] = None,
        maven2_asset3: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 3")] = None,
        maven2_asset3_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 3 Classifier")] = None,
        maven2_asset3_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 3 Extension")] = None,
        maven2_generate_pom: Annotated[Optional[StrictBool], Field(description="maven2 Generate a POM file with these coordinates")] = None,
        maven2_group_id: Annotated[Optional[StrictStr], Field(description="maven2 Group ID")] = None,
        maven2_packaging: Annotated[Optional[StrictStr], Field(description="maven2 Packaging")] = None,
        maven2_tag: Annotated[Optional[StrictStr], Field(description="maven2 Tag")] = None,
        maven2_version: Annotated[Optional[StrictStr], Field(description="maven2 Version")] = None,
        npm_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="npm Asset ")] = None,
        npm_tag: Annotated[Optional[StrictStr], Field(description="npm Tag")] = None,
        nuget_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="nuget Asset ")] = None,
        nuget_tag: Annotated[Optional[StrictStr], Field(description="nuget Tag")] = None,
        pypi_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="pypi Asset ")] = None,
        pypi_tag: Annotated[Optional[StrictStr], Field(description="pypi Tag")] = None,
        r_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="r Asset ")] = None,
        r_asset_path_id: Annotated[Optional[StrictStr], Field(description="r Asset  Package Path")] = None,
        r_tag: Annotated[Optional[StrictStr], Field(description="r Tag")] = None,
        raw_asset1: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 1")] = None,
        raw_asset1_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 1 Filename")] = None,
        raw_asset2: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 2")] = None,
        raw_asset2_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 2 Filename")] = None,
        raw_asset3: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 3")] = None,
        raw_asset3_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 3 Filename")] = None,
        raw_directory: Annotated[Optional[StrictStr], Field(description="raw Directory")] = None,
        raw_tag: Annotated[Optional[StrictStr], Field(description="raw Tag")] = None,
        rubygems_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="rubygems Asset ")] = None,
        rubygems_tag: Annotated[Optional[StrictStr], Field(description="rubygems Tag")] = None,
        yum_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="yum Asset ")] = None,
        yum_asset_filename: Annotated[Optional[StrictStr], Field(description="yum Asset  Filename")] = None,
        yum_directory: Annotated[Optional[StrictStr], Field(description="yum Directory")] = None,
        yum_tag: Annotated[Optional[StrictStr], Field(description="yum Tag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Upload a single component


        :param repository: Name of the repository to which you would like to upload the component (required)
        :type repository: str
        :param apt_asset: apt Asset 
        :type apt_asset: bytearray
        :param apt_tag: apt Tag
        :type apt_tag: str
        :param docker_asset: docker Asset 
        :type docker_asset: bytearray
        :param docker_tag: docker Tag
        :type docker_tag: str
        :param helm_asset: helm Asset 
        :type helm_asset: bytearray
        :param helm_tag: helm Tag
        :type helm_tag: str
        :param maven2_artifact_id: maven2 Artifact ID
        :type maven2_artifact_id: str
        :param maven2_asset1: maven2 Asset 1
        :type maven2_asset1: bytearray
        :param maven2_asset1_classifier: maven2 Asset 1 Classifier
        :type maven2_asset1_classifier: str
        :param maven2_asset1_extension: maven2 Asset 1 Extension
        :type maven2_asset1_extension: str
        :param maven2_asset2: maven2 Asset 2
        :type maven2_asset2: bytearray
        :param maven2_asset2_classifier: maven2 Asset 2 Classifier
        :type maven2_asset2_classifier: str
        :param maven2_asset2_extension: maven2 Asset 2 Extension
        :type maven2_asset2_extension: str
        :param maven2_asset3: maven2 Asset 3
        :type maven2_asset3: bytearray
        :param maven2_asset3_classifier: maven2 Asset 3 Classifier
        :type maven2_asset3_classifier: str
        :param maven2_asset3_extension: maven2 Asset 3 Extension
        :type maven2_asset3_extension: str
        :param maven2_generate_pom: maven2 Generate a POM file with these coordinates
        :type maven2_generate_pom: bool
        :param maven2_group_id: maven2 Group ID
        :type maven2_group_id: str
        :param maven2_packaging: maven2 Packaging
        :type maven2_packaging: str
        :param maven2_tag: maven2 Tag
        :type maven2_tag: str
        :param maven2_version: maven2 Version
        :type maven2_version: str
        :param npm_asset: npm Asset 
        :type npm_asset: bytearray
        :param npm_tag: npm Tag
        :type npm_tag: str
        :param nuget_asset: nuget Asset 
        :type nuget_asset: bytearray
        :param nuget_tag: nuget Tag
        :type nuget_tag: str
        :param pypi_asset: pypi Asset 
        :type pypi_asset: bytearray
        :param pypi_tag: pypi Tag
        :type pypi_tag: str
        :param r_asset: r Asset 
        :type r_asset: bytearray
        :param r_asset_path_id: r Asset  Package Path
        :type r_asset_path_id: str
        :param r_tag: r Tag
        :type r_tag: str
        :param raw_asset1: raw Asset 1
        :type raw_asset1: bytearray
        :param raw_asset1_filename: raw Asset 1 Filename
        :type raw_asset1_filename: str
        :param raw_asset2: raw Asset 2
        :type raw_asset2: bytearray
        :param raw_asset2_filename: raw Asset 2 Filename
        :type raw_asset2_filename: str
        :param raw_asset3: raw Asset 3
        :type raw_asset3: bytearray
        :param raw_asset3_filename: raw Asset 3 Filename
        :type raw_asset3_filename: str
        :param raw_directory: raw Directory
        :type raw_directory: str
        :param raw_tag: raw Tag
        :type raw_tag: str
        :param rubygems_asset: rubygems Asset 
        :type rubygems_asset: bytearray
        :param rubygems_tag: rubygems Tag
        :type rubygems_tag: str
        :param yum_asset: yum Asset 
        :type yum_asset: bytearray
        :param yum_asset_filename: yum Asset  Filename
        :type yum_asset_filename: str
        :param yum_directory: yum Directory
        :type yum_directory: str
        :param yum_tag: yum Tag
        :type yum_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_component_serialize(
            repository=repository,
            apt_asset=apt_asset,
            apt_tag=apt_tag,
            docker_asset=docker_asset,
            docker_tag=docker_tag,
            helm_asset=helm_asset,
            helm_tag=helm_tag,
            maven2_artifact_id=maven2_artifact_id,
            maven2_asset1=maven2_asset1,
            maven2_asset1_classifier=maven2_asset1_classifier,
            maven2_asset1_extension=maven2_asset1_extension,
            maven2_asset2=maven2_asset2,
            maven2_asset2_classifier=maven2_asset2_classifier,
            maven2_asset2_extension=maven2_asset2_extension,
            maven2_asset3=maven2_asset3,
            maven2_asset3_classifier=maven2_asset3_classifier,
            maven2_asset3_extension=maven2_asset3_extension,
            maven2_generate_pom=maven2_generate_pom,
            maven2_group_id=maven2_group_id,
            maven2_packaging=maven2_packaging,
            maven2_tag=maven2_tag,
            maven2_version=maven2_version,
            npm_asset=npm_asset,
            npm_tag=npm_tag,
            nuget_asset=nuget_asset,
            nuget_tag=nuget_tag,
            pypi_asset=pypi_asset,
            pypi_tag=pypi_tag,
            r_asset=r_asset,
            r_asset_path_id=r_asset_path_id,
            r_tag=r_tag,
            raw_asset1=raw_asset1,
            raw_asset1_filename=raw_asset1_filename,
            raw_asset2=raw_asset2,
            raw_asset2_filename=raw_asset2_filename,
            raw_asset3=raw_asset3,
            raw_asset3_filename=raw_asset3_filename,
            raw_directory=raw_directory,
            raw_tag=raw_tag,
            rubygems_asset=rubygems_asset,
            rubygems_tag=rubygems_tag,
            yum_asset=yum_asset,
            yum_asset_filename=yum_asset_filename,
            yum_directory=yum_directory,
            yum_tag=yum_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def upload_component_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="Name of the repository to which you would like to upload the component")],
        apt_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="apt Asset ")] = None,
        apt_tag: Annotated[Optional[StrictStr], Field(description="apt Tag")] = None,
        docker_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="docker Asset ")] = None,
        docker_tag: Annotated[Optional[StrictStr], Field(description="docker Tag")] = None,
        helm_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="helm Asset ")] = None,
        helm_tag: Annotated[Optional[StrictStr], Field(description="helm Tag")] = None,
        maven2_artifact_id: Annotated[Optional[StrictStr], Field(description="maven2 Artifact ID")] = None,
        maven2_asset1: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 1")] = None,
        maven2_asset1_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 1 Classifier")] = None,
        maven2_asset1_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 1 Extension")] = None,
        maven2_asset2: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 2")] = None,
        maven2_asset2_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 2 Classifier")] = None,
        maven2_asset2_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 2 Extension")] = None,
        maven2_asset3: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="maven2 Asset 3")] = None,
        maven2_asset3_classifier: Annotated[Optional[StrictStr], Field(description="maven2 Asset 3 Classifier")] = None,
        maven2_asset3_extension: Annotated[Optional[StrictStr], Field(description="maven2 Asset 3 Extension")] = None,
        maven2_generate_pom: Annotated[Optional[StrictBool], Field(description="maven2 Generate a POM file with these coordinates")] = None,
        maven2_group_id: Annotated[Optional[StrictStr], Field(description="maven2 Group ID")] = None,
        maven2_packaging: Annotated[Optional[StrictStr], Field(description="maven2 Packaging")] = None,
        maven2_tag: Annotated[Optional[StrictStr], Field(description="maven2 Tag")] = None,
        maven2_version: Annotated[Optional[StrictStr], Field(description="maven2 Version")] = None,
        npm_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="npm Asset ")] = None,
        npm_tag: Annotated[Optional[StrictStr], Field(description="npm Tag")] = None,
        nuget_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="nuget Asset ")] = None,
        nuget_tag: Annotated[Optional[StrictStr], Field(description="nuget Tag")] = None,
        pypi_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="pypi Asset ")] = None,
        pypi_tag: Annotated[Optional[StrictStr], Field(description="pypi Tag")] = None,
        r_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="r Asset ")] = None,
        r_asset_path_id: Annotated[Optional[StrictStr], Field(description="r Asset  Package Path")] = None,
        r_tag: Annotated[Optional[StrictStr], Field(description="r Tag")] = None,
        raw_asset1: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 1")] = None,
        raw_asset1_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 1 Filename")] = None,
        raw_asset2: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 2")] = None,
        raw_asset2_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 2 Filename")] = None,
        raw_asset3: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="raw Asset 3")] = None,
        raw_asset3_filename: Annotated[Optional[StrictStr], Field(description="raw Asset 3 Filename")] = None,
        raw_directory: Annotated[Optional[StrictStr], Field(description="raw Directory")] = None,
        raw_tag: Annotated[Optional[StrictStr], Field(description="raw Tag")] = None,
        rubygems_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="rubygems Asset ")] = None,
        rubygems_tag: Annotated[Optional[StrictStr], Field(description="rubygems Tag")] = None,
        yum_asset: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="yum Asset ")] = None,
        yum_asset_filename: Annotated[Optional[StrictStr], Field(description="yum Asset  Filename")] = None,
        yum_directory: Annotated[Optional[StrictStr], Field(description="yum Directory")] = None,
        yum_tag: Annotated[Optional[StrictStr], Field(description="yum Tag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a single component


        :param repository: Name of the repository to which you would like to upload the component (required)
        :type repository: str
        :param apt_asset: apt Asset 
        :type apt_asset: bytearray
        :param apt_tag: apt Tag
        :type apt_tag: str
        :param docker_asset: docker Asset 
        :type docker_asset: bytearray
        :param docker_tag: docker Tag
        :type docker_tag: str
        :param helm_asset: helm Asset 
        :type helm_asset: bytearray
        :param helm_tag: helm Tag
        :type helm_tag: str
        :param maven2_artifact_id: maven2 Artifact ID
        :type maven2_artifact_id: str
        :param maven2_asset1: maven2 Asset 1
        :type maven2_asset1: bytearray
        :param maven2_asset1_classifier: maven2 Asset 1 Classifier
        :type maven2_asset1_classifier: str
        :param maven2_asset1_extension: maven2 Asset 1 Extension
        :type maven2_asset1_extension: str
        :param maven2_asset2: maven2 Asset 2
        :type maven2_asset2: bytearray
        :param maven2_asset2_classifier: maven2 Asset 2 Classifier
        :type maven2_asset2_classifier: str
        :param maven2_asset2_extension: maven2 Asset 2 Extension
        :type maven2_asset2_extension: str
        :param maven2_asset3: maven2 Asset 3
        :type maven2_asset3: bytearray
        :param maven2_asset3_classifier: maven2 Asset 3 Classifier
        :type maven2_asset3_classifier: str
        :param maven2_asset3_extension: maven2 Asset 3 Extension
        :type maven2_asset3_extension: str
        :param maven2_generate_pom: maven2 Generate a POM file with these coordinates
        :type maven2_generate_pom: bool
        :param maven2_group_id: maven2 Group ID
        :type maven2_group_id: str
        :param maven2_packaging: maven2 Packaging
        :type maven2_packaging: str
        :param maven2_tag: maven2 Tag
        :type maven2_tag: str
        :param maven2_version: maven2 Version
        :type maven2_version: str
        :param npm_asset: npm Asset 
        :type npm_asset: bytearray
        :param npm_tag: npm Tag
        :type npm_tag: str
        :param nuget_asset: nuget Asset 
        :type nuget_asset: bytearray
        :param nuget_tag: nuget Tag
        :type nuget_tag: str
        :param pypi_asset: pypi Asset 
        :type pypi_asset: bytearray
        :param pypi_tag: pypi Tag
        :type pypi_tag: str
        :param r_asset: r Asset 
        :type r_asset: bytearray
        :param r_asset_path_id: r Asset  Package Path
        :type r_asset_path_id: str
        :param r_tag: r Tag
        :type r_tag: str
        :param raw_asset1: raw Asset 1
        :type raw_asset1: bytearray
        :param raw_asset1_filename: raw Asset 1 Filename
        :type raw_asset1_filename: str
        :param raw_asset2: raw Asset 2
        :type raw_asset2: bytearray
        :param raw_asset2_filename: raw Asset 2 Filename
        :type raw_asset2_filename: str
        :param raw_asset3: raw Asset 3
        :type raw_asset3: bytearray
        :param raw_asset3_filename: raw Asset 3 Filename
        :type raw_asset3_filename: str
        :param raw_directory: raw Directory
        :type raw_directory: str
        :param raw_tag: raw Tag
        :type raw_tag: str
        :param rubygems_asset: rubygems Asset 
        :type rubygems_asset: bytearray
        :param rubygems_tag: rubygems Tag
        :type rubygems_tag: str
        :param yum_asset: yum Asset 
        :type yum_asset: bytearray
        :param yum_asset_filename: yum Asset  Filename
        :type yum_asset_filename: str
        :param yum_directory: yum Directory
        :type yum_directory: str
        :param yum_tag: yum Tag
        :type yum_tag: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_component_serialize(
            repository=repository,
            apt_asset=apt_asset,
            apt_tag=apt_tag,
            docker_asset=docker_asset,
            docker_tag=docker_tag,
            helm_asset=helm_asset,
            helm_tag=helm_tag,
            maven2_artifact_id=maven2_artifact_id,
            maven2_asset1=maven2_asset1,
            maven2_asset1_classifier=maven2_asset1_classifier,
            maven2_asset1_extension=maven2_asset1_extension,
            maven2_asset2=maven2_asset2,
            maven2_asset2_classifier=maven2_asset2_classifier,
            maven2_asset2_extension=maven2_asset2_extension,
            maven2_asset3=maven2_asset3,
            maven2_asset3_classifier=maven2_asset3_classifier,
            maven2_asset3_extension=maven2_asset3_extension,
            maven2_generate_pom=maven2_generate_pom,
            maven2_group_id=maven2_group_id,
            maven2_packaging=maven2_packaging,
            maven2_tag=maven2_tag,
            maven2_version=maven2_version,
            npm_asset=npm_asset,
            npm_tag=npm_tag,
            nuget_asset=nuget_asset,
            nuget_tag=nuget_tag,
            pypi_asset=pypi_asset,
            pypi_tag=pypi_tag,
            r_asset=r_asset,
            r_asset_path_id=r_asset_path_id,
            r_tag=r_tag,
            raw_asset1=raw_asset1,
            raw_asset1_filename=raw_asset1_filename,
            raw_asset2=raw_asset2,
            raw_asset2_filename=raw_asset2_filename,
            raw_asset3=raw_asset3,
            raw_asset3_filename=raw_asset3_filename,
            raw_directory=raw_directory,
            raw_tag=raw_tag,
            rubygems_asset=rubygems_asset,
            rubygems_tag=rubygems_tag,
            yum_asset=yum_asset,
            yum_asset_filename=yum_asset_filename,
            yum_directory=yum_directory,
            yum_tag=yum_tag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _upload_component_serialize(
        self,
        repository,
        apt_asset,
        apt_tag,
        docker_asset,
        docker_tag,
        helm_asset,
        helm_tag,
        maven2_artifact_id,
        maven2_asset1,
        maven2_asset1_classifier,
        maven2_asset1_extension,
        maven2_asset2,
        maven2_asset2_classifier,
        maven2_asset2_extension,
        maven2_asset3,
        maven2_asset3_classifier,
        maven2_asset3_extension,
        maven2_generate_pom,
        maven2_group_id,
        maven2_packaging,
        maven2_tag,
        maven2_version,
        npm_asset,
        npm_tag,
        nuget_asset,
        nuget_tag,
        pypi_asset,
        pypi_tag,
        r_asset,
        r_asset_path_id,
        r_tag,
        raw_asset1,
        raw_asset1_filename,
        raw_asset2,
        raw_asset2_filename,
        raw_asset3,
        raw_asset3_filename,
        raw_directory,
        raw_tag,
        rubygems_asset,
        rubygems_tag,
        yum_asset,
        yum_asset_filename,
        yum_directory,
        yum_tag,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if repository is not None:
            
            _query_params.append(('repository', repository))
            
        # process the header parameters
        # process the form parameters
        if apt_asset is not None:
            _files['apt.asset'] = apt_asset
        if apt_tag is not None:
            _form_params.append(('apt.tag', apt_tag))
        if docker_asset is not None:
            _files['docker.asset'] = docker_asset
        if docker_tag is not None:
            _form_params.append(('docker.tag', docker_tag))
        if helm_asset is not None:
            _files['helm.asset'] = helm_asset
        if helm_tag is not None:
            _form_params.append(('helm.tag', helm_tag))
        if maven2_artifact_id is not None:
            _form_params.append(('maven2.artifactId', maven2_artifact_id))
        if maven2_asset1 is not None:
            _files['maven2.asset1'] = maven2_asset1
        if maven2_asset1_classifier is not None:
            _form_params.append(('maven2.asset1.classifier', maven2_asset1_classifier))
        if maven2_asset1_extension is not None:
            _form_params.append(('maven2.asset1.extension', maven2_asset1_extension))
        if maven2_asset2 is not None:
            _files['maven2.asset2'] = maven2_asset2
        if maven2_asset2_classifier is not None:
            _form_params.append(('maven2.asset2.classifier', maven2_asset2_classifier))
        if maven2_asset2_extension is not None:
            _form_params.append(('maven2.asset2.extension', maven2_asset2_extension))
        if maven2_asset3 is not None:
            _files['maven2.asset3'] = maven2_asset3
        if maven2_asset3_classifier is not None:
            _form_params.append(('maven2.asset3.classifier', maven2_asset3_classifier))
        if maven2_asset3_extension is not None:
            _form_params.append(('maven2.asset3.extension', maven2_asset3_extension))
        if maven2_generate_pom is not None:
            _form_params.append(('maven2.generate-pom', maven2_generate_pom))
        if maven2_group_id is not None:
            _form_params.append(('maven2.groupId', maven2_group_id))
        if maven2_packaging is not None:
            _form_params.append(('maven2.packaging', maven2_packaging))
        if maven2_tag is not None:
            _form_params.append(('maven2.tag', maven2_tag))
        if maven2_version is not None:
            _form_params.append(('maven2.version', maven2_version))
        if npm_asset is not None:
            _files['npm.asset'] = npm_asset
        if npm_tag is not None:
            _form_params.append(('npm.tag', npm_tag))
        if nuget_asset is not None:
            _files['nuget.asset'] = nuget_asset
        if nuget_tag is not None:
            _form_params.append(('nuget.tag', nuget_tag))
        if pypi_asset is not None:
            _files['pypi.asset'] = pypi_asset
        if pypi_tag is not None:
            _form_params.append(('pypi.tag', pypi_tag))
        if r_asset is not None:
            _files['r.asset'] = r_asset
        if r_asset_path_id is not None:
            _form_params.append(('r.asset.pathId', r_asset_path_id))
        if r_tag is not None:
            _form_params.append(('r.tag', r_tag))
        if raw_asset1 is not None:
            _files['raw.asset1'] = raw_asset1
        if raw_asset1_filename is not None:
            _form_params.append(('raw.asset1.filename', raw_asset1_filename))
        if raw_asset2 is not None:
            _files['raw.asset2'] = raw_asset2
        if raw_asset2_filename is not None:
            _form_params.append(('raw.asset2.filename', raw_asset2_filename))
        if raw_asset3 is not None:
            _files['raw.asset3'] = raw_asset3
        if raw_asset3_filename is not None:
            _form_params.append(('raw.asset3.filename', raw_asset3_filename))
        if raw_directory is not None:
            _form_params.append(('raw.directory', raw_directory))
        if raw_tag is not None:
            _form_params.append(('raw.tag', raw_tag))
        if rubygems_asset is not None:
            _files['rubygems.asset'] = rubygems_asset
        if rubygems_tag is not None:
            _form_params.append(('rubygems.tag', rubygems_tag))
        if yum_asset is not None:
            _files['yum.asset'] = yum_asset
        if yum_asset_filename is not None:
            _form_params.append(('yum.asset.filename', yum_asset_filename))
        if yum_directory is not None:
            _form_params.append(('yum.directory', yum_directory))
        if yum_tag is not None:
            _form_params.append(('yum.tag', yum_tag))
        # process the body parameter



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/components',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


