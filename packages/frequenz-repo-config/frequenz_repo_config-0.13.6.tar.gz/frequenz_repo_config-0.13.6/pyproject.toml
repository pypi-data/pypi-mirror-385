# License: MIT
# Copyright Â© 2023 Frequenz Energy-as-a-Service GmbH

[build-system]
requires = ["setuptools == 80.3.1", "setuptools_scm[toml] == 8.3.1"]
build-backend = "setuptools.build_meta"

[project]
name = "frequenz-repo-config"
description = "Frequenz repository setup tools and common configuration"
readme = "README.md"
license = { text = "MIT" }
keywords = [
  "config",
  "frequenz",
  "grpc",
  "lib",
  "library",
  "mkdocs",
  "nox",
  "project",
  "protobuf",
  "python",
  "repo-config",
  "repository",
  "setuptools",
  "tool",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries",
  "Typing :: Typed",
]
requires-python = ">= 3.11, < 4"
dependencies = [
  "nox >= 2022.11.21",
  "mkdocs-gen-files >= 0.4.0, < 0.6.0",
  "semver >= 3.0.1, < 4",
  "github-action-utils >= 1.1.0, < 2",
  "mkdocstrings-python >= 1.14.6, < 2",
]
dynamic = ["version"]

[[project.authors]]
name = "Frequenz Energy-as-a-Service GmbH"
email = "floss@frequenz.com"

[project.entry-points."distutils.commands"]
compile_proto = "frequenz.repo.config.setuptools.grpc_tools:CompileProto"

[project.optional-dependencies]
actor = []
api = [
  "grpcio-tools >= 1.47.0, < 2",
  "mypy-protobuf >= 3.0.0, < 4",
  "setuptools >= 67.6.0, < 81",
]
app = []
lib = []
model = []
extra-lint-examples = [
  "pylint >= 2.17.3, < 5",
  "pytest >= 7.3.0, < 9",
  "sybil >= 6.1.1, < 10",
]
dev-flake8 = [
  "flake8 == 7.2.0",
  "flake8-docstrings == 1.7.0",
  "flake8-pyproject == 1.2.3", # For reading the flake8 config from pyproject.toml
  "pydoclint == 0.6.6",
  "pydocstyle == 6.3.0",
]
dev-formatting = ["black == 25.1.0", "isort == 6.0.1"]
dev-mkdocs = [
  "black == 25.1.0",
  "Markdown == 3.8",
  "mike == 2.1.3",
  "mkdocs-gen-files == 0.5.0",
  "mkdocs-literate-nav == 0.6.2",
  "mkdocs-macros-plugin == 1.3.7",
  "mkdocs-material == 9.6.12",
  "mkdocstrings[python] == 0.29.1",
  "mkdocstrings-python == 1.16.10",
]
dev-mypy = [
  "mypy == 1.15.0",
  "types-setuptools >= 67.6.0, < 81", # Should match the api dependency
  "types-Markdown == 3.8.0.20250415",
  "types-PyYAML == 6.0.12.20250402",
  "types-babel == 2.11.0.15",
  "types-colorama == 0.4.15.20240311",
  # For checking the noxfile, docs/ script, and tests
  "frequenz-repo-config[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-noxfile = ["nox == 2025.5.1"]
dev-pylint = [
  # dev-pytest already defines a dependency to pylint because of the examples
  # For checking the noxfile, docs/ script, and tests
  "frequenz-repo-config[dev-mkdocs,dev-noxfile,dev-pytest]",
  "setuptools >= 67.6.0, < 81", # Should match the api dependency
]
dev-pytest = [
  "pytest == 8.3.5",
  "pylint == 4.0.0", # We need this to check for the examples
  "cookiecutter == 2.6.0", # For checking the cookiecutter scripts
  "jinja2 == 3.1.6", # For checking the cookiecutter scripts
  "sybil >= 6.1.1, < 10", # Should be consistent with the extra-lint-examples dependency
]
dev = [
  "frequenz-repo-config[dev-mkdocs,dev-flake8,dev-formatting,dev-mkdocs,dev-mypy,dev-noxfile,dev-pylint,dev-pytest]",
]

[project.urls]
Documentation = "https://frequenz-floss.github.io/frequenz-repo-config-python/"
Changelog = "https://github.com/frequenz-floss/frequenz-repo-config-python/releases"
Issues = "https://github.com/frequenz-floss/frequenz-repo-config-python/issues"
Repository = "https://github.com/frequenz-floss/frequenz-repo-config-python"
Support = "https://github.com/frequenz-floss/frequenz-repo-config-python/discussions/categories/support"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
src_paths = [
  "benchmarks",
  "examples",
  "src",
  "tests",
  "cookiecutter/migrate.py",
]

[tool.flake8]
# We give some flexibility to go over 88, there are cases like long URLs or
# code in documenation that have extra indentation. Black will still take care
# of making everything that can be 88 wide, 88 wide.
max-line-length = 100
extend-ignore = [
  "E203", # Whitespace before ':' (conflicts with black)
  "W503", # Line break before binary operator (conflicts with black)
]
# pydoclint options
style = "google"
check-return-types = false
check-yield-types = false
arg-type-hints-in-docstring = false
arg-type-hints-in-signature = true
allow-init-docstring = true
check-class-attributes = false

[tool.pylint.similarities]
ignore-comments = ['yes']
ignore-docstrings = ['yes']
ignore-imports = ['no']
min-similarity-lines = 40

[tool.pylint.messages_control]
disable = [
  "too-few-public-methods",
  "too-many-return-statements",
  # disabled because it conflicts with isort
  "wrong-import-order",
  "ungrouped-imports",
  # Checked by mypy (and pylint is very flaky checking these)
  "unsubscriptable-object",
  "no-member",
  "no-name-in-module",
  "possibly-used-before-assignment",
  # Checked by flake8
  "f-string-without-interpolation",
  "line-too-long",
  "missing-function-docstring",
  "redefined-outer-name",
  "unnecessary-lambda-assignment",
  "unused-import",
  "unused-variable",
]

[tool.mypy]
explicit_package_bases = true
namespace_packages = true
# This option disables mypy cache, and it is sometimes useful to enable it if
# you are getting weird intermittent error, or error in the CI but not locally
# (or vice versa). In particular errors saying that type: ignore is not
# used but getting the original ignored error when removing the type: ignore.
# See for example: https://github.com/python/mypy/issues/2960
#no_incremental = true
packages = ["frequenz.repo.config"]
strict = true

[[tool.mypy.overrides]]
module = [
  "cookiecutter",
  "cookiecutter.*",
  "github_action_utils",
  "mkdocs_macros.*",
  "semver.version",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-W=all -Werror -Wdefault::DeprecationWarning -Wdefault::PendingDeprecationWarning -vv"
testpaths = ["src", "tests"]
markers = [
  "integration: integration tests (deselect with '-m \"not integration\"')",
  "cookiecutter: integration tests (deselect with '-m \"not cookiecutter\"')",
]

[tool.setuptools_scm]
version_scheme = "post-release"
