# mcp-n8n task automation
# Install just: https://github.com/casey/just

# Default recipe (show help)
default:
    @just help

# Show common development workflows
help:
    @echo "Common workflows:"
    @echo ""
    @echo "  just install      - Install all dependencies"
    @echo "  just setup        - Complete setup (install + hooks + check)"
    @echo "  just test         - Run full test suite"
    @echo "  just smoke        - Quick validation tests"
    @echo "  just verify       - Run all quality checks (pre-commit + smoke + test)"
    @echo "  just pre-merge    - Pre-push checks before merging"
    @echo ""
    @echo "  just run          - Start the gateway server"
    @echo "  just run-debug    - Start gateway with debug logging"
    @echo ""
    @echo "  just lint         - Run linting (ruff)"
    @echo "  just typecheck    - Run type checking (mypy)"
    @echo "  just format       - Run code formatting (black)"
    @echo "  just check        - Run all quality checks"
    @echo ""
    @echo "  just release TYPE - Full automated release (TYPE: major/minor/patch)"
    @echo ""
    @echo "  just --list       - Show all available commands"
    @echo "  just docs         - Show documentation links"
    @echo "  just info         - Show environment info"

# Install all dependencies (including dev)
install:
    pip install -e ".[dev]"

# Install pre-commit hooks
setup-hooks:
    pre-commit install

# Environment management
venv-create:
    ./scripts/venv-create.sh

venv-clean:
    ./scripts/venv-clean.sh

check-env:
    ./scripts/check-env.sh

# Run all tests
test:
    pytest

# Run smoke tests (quick validation)
smoke:
    ./scripts/smoke-test.sh

# Safety & Recovery (Phase 2)
rollback:
    ./scripts/rollback-dev.sh

verify-stable:
    ./scripts/verify-stable.sh

pre-merge:
    ./scripts/pre-merge.sh

# Version Management (Phase 3)
bump-major:
    ./scripts/bump-version.sh major

bump-minor:
    ./scripts/bump-version.sh minor

bump-patch:
    ./scripts/bump-version.sh patch

prepare-release TYPE:
    ./scripts/prepare-release.sh {{TYPE}}

# Draft release (prepare locally without pushing)
release-draft TYPE:
    ./scripts/prepare-release.sh {{TYPE}}

# Run tests with coverage
test-coverage:
    pytest --cov=mcp_n8n --cov-report=html --cov-report=term

# Run linting (ruff)
lint:
    ruff check src/mcp_n8n tests

# Run linting with auto-fix
lint-fix:
    ruff check --fix src/mcp_n8n tests

# Run code formatting (black)
format:
    black src/mcp_n8n tests

# Run type checking (mypy)
typecheck:
    mypy src/mcp_n8n

# Run all quality checks (lint + typecheck + format check)
check: lint typecheck
    black --check src/mcp_n8n tests

# Run pre-commit on all files
pre-commit:
    pre-commit run --all-files

# Start the gateway server
run:
    mcp-n8n

# Start the gateway with debug logging
run-debug:
    MCP_N8N_LOG_LEVEL=DEBUG MCP_N8N_DEBUG=1 mcp-n8n

# Clean build artifacts
clean:
    rm -rf build/
    rm -rf dist/
    rm -rf *.egg-info/
    rm -rf .pytest_cache/
    rm -rf .mypy_cache/
    rm -rf .ruff_cache/
    rm -rf htmlcov/
    find . -type d -name __pycache__ -exec rm -rf {} +

# Full setup (install + hooks + check)
setup: install setup-hooks
    @echo "âœ“ Setup complete! Run 'just test' to verify."

# Pre-push checks (run before committing)
verify: pre-commit smoke test
    @echo "âœ“ All checks passed!"

# Build & Release (Phase 3)
build:
    ./scripts/build-dist.sh

publish-test:
    ./scripts/publish-test.sh

publish-prod:
    ./scripts/publish-prod.sh

# Full automated release (prepare, tag, and push)
release TYPE:
    ./scripts/prepare-release.sh {{TYPE}} --auto-push

# Developer Tools (Phase 4)
diagnose:
    ./scripts/diagnose.sh

dev-server:
    ./scripts/dev-server.sh

# Documentation Tools (v1.7.0 Advanced Features)

# Generate documentation health metrics
docs-metrics:
    python scripts/docs_metrics.py
    @echo ""
    @echo "ðŸ“Š Metrics report: DOCUMENTATION_METRICS.md"

# Search documentation by topic
docs-search QUERY:
    python scripts/query_docs.py --topic "{{QUERY}}"

# Query docs by tag
docs-tag TAG:
    python scripts/query_docs.py --tag "{{TAG}}"

# Query docs with JSON output (for AI agents)
docs-query QUERY:
    python scripts/query_docs.py --topic "{{QUERY}}" --format json

docs:
    @echo "Opening documentation..."
    @echo ""
    @echo "Available documentation:"
    @echo "  - README.md - Project overview"
    @echo "  - CONTRIBUTING.md - Contribution guidelines"
    @echo "  - dev-docs/ARCHITECTURE.md - System architecture"
    @echo "  - dev-docs/DEVELOPMENT.md - Developer guide"
    @echo "  - docs/how-to/troubleshoot.md - Problem solving"
    @echo "  - dev-docs/RELEASE.md - Release process"

# Show environment info
info:
    @echo "Python version:"
    @python --version
    @echo ""
    @echo "Package info:"
    @pip show mcp-n8n || echo "Package not installed"
    @echo ""
    @echo "Environment variables:"
    @env | grep MCP_N8N || echo "No MCP_N8N_* variables set"
