r"""
HGS Algorithm for TSP
"""

# Copyright (c) 2024 Thinklab@SJTU
# ML4CO-Kit is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
# http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.


import os
import tempfile
import numpy as np
from ml4co_kit.task.routing.tsp import TSPTask
from ml4co_kit.solver.lib.ga_eax.c_ga_eax_normal import GA_EAX_NORMAL_SOLVER_PATH
from ml4co_kit.solver.lib.ga_eax.c_ga_eax_large import GA_EAX_LARGE_SOLVER_PATH


def tsp_ga_eax(
    task_data: TSPTask,
    ga_eax_scale: int = 1e5,
    ga_eax_max_trials: int = 1,
    ga_eax_population_num: int = 100,
    ga_eax_offspring_num: int = 30,
    ga_eax_show_info: bool = False,
    use_large_solver: bool = False,
):
    # Preparation 
    points = (task_data.points * ga_eax_scale).astype(np.int32)
    tsp_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    sol_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    sol_abs_path_1 = sol_file.name + "_BestSol"
    sol_abs_path_2 = sol_file.name + "_Result"
    solver_path = GA_EAX_LARGE_SOLVER_PATH if use_large_solver else GA_EAX_NORMAL_SOLVER_PATH
    
    # Write TSP Data to TSPLIB File
    with open(tsp_file.name, "w") as f:
        f.write(f"NAME : {tsp_file.name}\n")
        f.write(f"COMMENT : Generated by ML4CO-Kit\n")
        f.write("TYPE : TSP\n")
        f.write(f"DIMENSION : {task_data.nodes_num}\n")
        f.write(f"EDGE_WEIGHT_TYPE : {task_data.distance_type.value}\n")
        f.write("NODE_COORD_SECTION\n")
        for i in range(task_data.nodes_num):
            x, y = points[i]
            f.write(f"{i+1} {x} {y}\n")
        f.write("EOF\n")

    # Call GA-EAX Solver
    show_info = 1 if ga_eax_show_info else 0
    command = (
        f"{solver_path} {ga_eax_max_trials} {sol_file.name} "
        f"{ga_eax_population_num} {ga_eax_offspring_num} "
        f"{tsp_file.name} {show_info}"
    )
    os.system(command)
    
    # Read solution
    with open(sol_abs_path_1, 'r') as file:
        lines = file.readlines()
    tour_list = list()
    for idx in range(len(lines) // 2):
        tour_str = lines[idx * 2 + 1]
        tour_split = tour_str.split(" ")[:-1]
        tour = [int(node) - 1 for node in  tour_split]
        tour.append(0)
        tour_list.append(tour)
    costs = np.array([task_data.evaluate(tour) for tour in tour_list])
    min_cost_idx = np.argmin(costs)
    best_tour = np.array(tour_list[min_cost_idx])
    task_data.from_data(sol=best_tour, ref=False)
    
    # Clean
    intermediate_files = [tsp_file.name, sol_abs_path_1, sol_abs_path_2]
    for file_path in intermediate_files:
        if os.path.exists(file_path):
            os.remove(file_path)
    return best_tour