r"""
LKH Algorithm for CVRP
"""

# Copyright (c) 2024 Thinklab@SJTU
# ML4CO-Kit is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
# http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.


import os
import pathlib
import tempfile
import subprocess
import numpy as np
from ml4co_kit.extension import tsplib95
from ml4co_kit.task.routing.cvrp import CVRPTask


def cvrp_lkh(
    task_data: CVRPTask,
    lkh_scale: int = 1e6,
    lkh_max_trials: int = 500,
    lkh_path: pathlib.Path = "LKH",
    lkh_runs: int = 1,
    lkh_seed: int = 1234,
    lkh_special: bool = True,
):
    # Preparation 
    depots = (task_data.depots * lkh_scale).astype(np.int32)
    points = (task_data.points * lkh_scale).astype(np.int32)
    demands = (task_data.norm_demands * lkh_scale).astype(np.int64)
    capacity = int(lkh_scale)
    vrp_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    par_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    tour_file = tempfile.NamedTemporaryFile(mode="w", delete=False)

    # Write CVRP Data to VRPLIB File
    with open(vrp_file.name, "w") as f:
        f.write(f"NAME : {vrp_file.name}\n")
        f.write(f"COMMENT : Generated by ML4CO-Kit\n")
        f.write("TYPE : CVRP\n")
        f.write(f"DIMENSION : {task_data.nodes_num + 1}\n")
        f.write(f"EDGE_WEIGHT_TYPE : {task_data.distance_type.value}\n")
        f.write(f"CAPACITY : {capacity}\n")
        f.write("NODE_COORD_SECTION\n")
        x, y = depots
        f.write(f"1 {x} {y}\n")
        for i in range(task_data.nodes_num):
            x, y = points[i]
            f.write(f"{i+2} {x} {y}\n")
        f.write("DEMAND_SECTION \n")
        f.write(f"1 0\n")
        for i in range(task_data.nodes_num):
            f.write(f"{i+2} {demands[i]}\n")
        f.write("DEPOT_SECTION \n")
        f.write("	1\n")
        f.write("	-1\n")
        f.write("EOF\n")
    
    # Write Parameters
    params = dict()
    params["PROBLEM_FILE"] = vrp_file.name
    params["MAX_TRIALS"] = lkh_max_trials
    params["RUNS"] = lkh_runs
    params["SEED"] = lkh_seed
    params["TOUR_FILE"] = tour_file.name
    if lkh_special:
        par_file.write("SPECIAL\n")
    for k, v in params.items():
        par_file.write(f"{k} = {v}\n")
    par_file.close()    
    
    try:
        # stdin=DEVNULL for preventing a "Press any key" pause at the end of execution
        subprocess.check_output(
            [lkh_path, par_file.name], stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL
        )
    except subprocess.CalledProcessError as e:
        raise Exception(e.output.decode())
    
    # Read the tour from the tour file
    tour = tsplib95.load(tour_file.name).tours[0]
    np_tour = np.array(tour) - 1
    over_index = np.where(np_tour > task_data.nodes_num)[0]
    np_tour[over_index] = 0
    tour: list = np_tour.tolist()
    tour.append(0)
    sol = np.array(tour)

    # Store the tour in the task_data
    task_data.from_data(sol=sol, ref=False)
    
    # Clean files
    os.remove(par_file.name)
    if "vrp_file" in locals():
        os.remove(vrp_file.name)
    if "tour_file" in locals():
        os.remove(tour_file.name)