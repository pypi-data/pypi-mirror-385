r"""
TSP Wrapper Tester.
"""

# Copyright (c) 2024 Thinklab@SJTU
# ML4CO-Kit is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
# http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.


import os
import shutil
import pathlib
from ml4co_kit import get_md5
from ml4co_kit import TSPTask, TSPWrapper, TSPGenerator, LKHSolver, NeuroLKHSolver
from tests.wrapper_test.base import WrapperTesterBase


class TSPWrapperTester(WrapperTesterBase):
    def __init__(self):
        super(TSPWrapperTester, self).__init__(
            test_wrapper_class=TSPWrapper,
            generator=TSPGenerator(),
            solver=LKHSolver(),
            pickle_files_list=[
                pathlib.Path("test_dataset/tsp/wrapper/tsp50_uniform_16ins.pkl"),
                pathlib.Path("test_dataset/tsp/wrapper/tsp500_uniform_4ins.pkl"),
            ],
            txt_files_list=[
                pathlib.Path("test_dataset/tsp/wrapper/tsp50_uniform_16ins.txt"),
                pathlib.Path("test_dataset/tsp/wrapper/tsp500_uniform_4ins.txt"),
            ],
        )
        
    def _test_other_rw_methods(self):
        
        ###############################################################
        #   Test-1: Solve the TSPLIB data and evaluate the solution   #
        ###############################################################
        
        # 1.1 Read Real-World TSPLIB data using ``from_tsplib_folder``
        wrapper = TSPWrapper()
        wrapper.from_tsplib_folder(
            tsp_folder_path=pathlib.Path("test_dataset/tsp/tsplib/problem"),
            tour_folder_path=pathlib.Path("test_dataset/tsp/tsplib/solution"),
            ref=True,
            overwrite=True,
            normalize=True
        )
        
        # 1.2 Using LKHSolver to solve
        solver = LKHSolver()
        wrapper.solve(solver=solver, show_time=True)
        
        # 1.3 Evaluate the solution under the normalized data
        eval_result = wrapper.evaluate_w_gap()
        print(f"TSPLIB for TSP (normalize=True): {eval_result}")
        
        # 1.4 Using ``overwrite`` to evaluate solution under the original data
        wrapper.from_tsplib_folder(
            tsp_folder_path=pathlib.Path("test_dataset/tsp/tsplib/problem"),
            tour_folder_path=pathlib.Path("test_dataset/tsp/tsplib/solution"),
            ref=True,
            overwrite=False,
            normalize=False
        )
        eval_result = wrapper.evaluate_w_gap()
        print(f"TSPLIB for TSP (normalize=False): {eval_result}")
        

        ###############################################################
        #    Test-2: Transfer data in TXT format to TSPLIB format     #
        ###############################################################
        
        # 2.1 Read txt data and transfer it to TSPLIB format
        wrapper = TSPWrapper()
        txt_path = pathlib.Path("test_dataset/tsp/wrapper/tsp50_uniform_16ins.txt")
        wrapper.from_txt(txt_path)
        tmp_name = self._make_tmp_file()
        tmp_tsp_folder_path = pathlib.Path(tmp_name + "_tsp")
        tmp_tour_folder_path = pathlib.Path(tmp_name + "_tour")
        wrapper.to_tsplib_folder(
            tsp_folder_path=tmp_tsp_folder_path,
            tour_folder_path=tmp_tour_folder_path,
        )
        
        # 2.2 Verify conversion consistency
        wrapper.from_tsplib_folder(
            tsp_folder_path=tmp_tsp_folder_path,
            tour_folder_path=tmp_tour_folder_path,
            ref=False,
            overwrite=True,
        )
        tmp_txt_path = pathlib.Path(tmp_name + ".txt")
        wrapper.to_txt(tmp_txt_path)
        if get_md5(txt_path) != get_md5(tmp_txt_path):
            raise ValueError("Inconsistent txt data.")
        
        # 2.3 Clean up
        shutil.rmtree(tmp_tsp_folder_path)
        shutil.rmtree(tmp_tour_folder_path)
        os.remove(tmp_txt_path)
        
        
        ###############################################################
        #           Test-3: Generate Data using bacth_solve           #
        ###############################################################
        
        # 3.1 Generate data using batch_solve
        wrapper = TSPWrapper()
        wrapper.generate(
            generator=TSPGenerator(), 
            solver=NeuroLKHSolver(), 
            num_samples=4, 
            num_threads=1, 
            batch_size=2
        )
        
        # 3.2 Evaluate the generated data
        eval_result = wrapper.evaluate()
        print(f"TSP-50 Generated by NeuroLKHSolver: {eval_result}")
        
        
        ###############################################################
        #          Test-4: Read task data (pickle) in folder          #
        ###############################################################
        
        # 4.1 Read task data (pickle) in folder
        wrapper = TSPWrapper()
        wrapper.from_task_pickle_folder(
            task_class=TSPTask, folder_path=pathlib.Path("test_dataset/tsp/task")
        )
        
        # 4.2 Evaluate
        wrapper.swap_sol_and_ref_sol()
        eval_result = wrapper.evaluate()
        print(f"TSPTask Pickle Folder (after swap): {eval_result}")
        
        # 4.3 Using ``to_task_pickle_folder`` to transfer data to pickle format
        wrapper.to_task_pickle_folder(pathlib.Path("tmp/new_tsp_task"))
        
        # 4.3 Check the consistency
        ori_task_path_list = [
            pathlib.Path("test_dataset/tsp/task/tsp50_cluster_task.pkl"),
            pathlib.Path("test_dataset/tsp/task/tsp50_gaussian_task.pkl"),
            pathlib.Path("test_dataset/tsp/task/tsp50_uniform_task.pkl"),
            pathlib.Path("test_dataset/tsp/task/tsp500_uniform_task.pkl"),
        ]
        for ori_task_path in ori_task_path_list:
            task_ori = TSPTask()
            task_ori.from_pickle(ori_task_path)
            task_new = TSPTask()
            tmp_pkl_path = pathlib.Path("tmp/new_tsp_task") / f"{task_ori.name}.pkl"
            task_new.from_pickle(tmp_pkl_path)
            if task_ori.get_data_md5() != task_new.get_data_md5():
                raise ValueError("Inconsistent task pickle folder.")
        shutil.rmtree(pathlib.Path("tmp/new_tsp_task"))