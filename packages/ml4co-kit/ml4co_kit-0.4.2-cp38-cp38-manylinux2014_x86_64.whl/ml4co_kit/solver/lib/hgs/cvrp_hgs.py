r"""
HGS Algorithm for CVRP
"""

# Copyright (c) 2024 Thinklab@SJTU
# ML4CO-Kit is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
# http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.


import os
import tempfile
import numpy as np
from ml4co_kit.task.routing.cvrp import CVRPTask
from ml4co_kit.solver.lib.hgs.c_hgs import HGS_SOLVER_PATH


def cvrp_hgs(
    task_data: CVRPTask,
    hgs_scale: int = 2e4,
    hgs_demands_scale: int = 1e5,
    hgs_time_limit: float = 1.0,
    hgs_show_info: bool = False,
):
    # Preparation 
    depots = (task_data.depots * hgs_scale).astype(np.int32)
    points = (task_data.points * hgs_scale).astype(np.int32)
    demands = (task_data.norm_demands * hgs_demands_scale).astype(np.int32)
    capacity = int(hgs_demands_scale)
    vrp_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    tour_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    pg_abs_path = tour_file.name + ".PG.csv"
    
    # Write CVRP Data to VRPLIB File
    with open(vrp_file.name, "w") as f:
        f.write(f"NAME : {vrp_file.name}\n")
        f.write(f"COMMENT : Generated by ML4CO-Kit\n")
        f.write("TYPE : CVRP\n")
        f.write(f"DIMENSION : {task_data.nodes_num + 1}\n")
        f.write(f"EDGE_WEIGHT_TYPE : {task_data.distance_type.value}\n")
        f.write(f"CAPACITY : {capacity}\n")
        f.write("NODE_COORD_SECTION\n")
        x, y = depots
        f.write(f"1 {x} {y}\n")
        for i in range(task_data.nodes_num):
            x, y = points[i]
            f.write(f"{i+2} {x} {y}\n")
        f.write("DEMAND_SECTION \n")
        f.write(f"1 0\n")
        for i in range(task_data.nodes_num):
            f.write(f"{i+2} {demands[i]}\n")
        f.write("DEPOT_SECTION \n")
        f.write("	1\n")
        f.write("	-1\n")
        f.write("EOF\n")
      
    # Call HGS Solver
    command = f"{HGS_SOLVER_PATH} {vrp_file.name} {tour_file.name} -t {hgs_time_limit} "
    command += ("-si 1" if hgs_show_info else "-si 0")
    os.system(command)
    
    # Read the tour from the tour file
    task_data.from_vrplib(sol_file_path=tour_file.name, ref=False)
    
    # Clean files
    if "vrp_file" in locals():
        os.remove(vrp_file.name)
    if "tour_file" in locals():
        os.remove(tour_file.name)
    if os.path.exists(pg_abs_path):
        os.remove(pg_abs_path)