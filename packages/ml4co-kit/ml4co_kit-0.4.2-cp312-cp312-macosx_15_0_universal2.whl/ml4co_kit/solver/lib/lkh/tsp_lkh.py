r"""
LKH Algorithm for TSP
"""

# Copyright (c) 2024 Thinklab@SJTU
# ML4CO-Kit is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
# http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.


import os
import pathlib
import tempfile
import subprocess
import numpy as np
from ml4co_kit.task.routing.tsp import TSPTask


def tsp_lkh(
    task_data: TSPTask,
    lkh_scale: int = 1e6,
    lkh_max_trials: int = 500,
    lkh_path: pathlib.Path = "LKH",
    lkh_runs: int = 1,
    lkh_seed: int = 1234,
    lkh_special: bool = False,
):
    # Preparation 
    points = (task_data.points * lkh_scale).astype(np.int32)
    tsp_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    par_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    tour_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    
    # Write TSP Data to TSPLIB File
    with open(tsp_file.name, "w") as f:
        f.write(f"NAME : {tsp_file.name}\n")
        f.write(f"COMMENT : Generated by ML4CO-Kit\n")
        f.write("TYPE : TSP\n")
        f.write(f"DIMENSION : {task_data.nodes_num}\n")
        f.write(f"EDGE_WEIGHT_TYPE : {task_data.distance_type.value}\n")
        f.write("NODE_COORD_SECTION\n")
        for i in range(task_data.nodes_num):
            x, y = points[i]
            f.write(f"{i+1} {x} {y}\n")
        f.write("EOF\n")
    
    # Write Parameters
    params = dict()
    params["PROBLEM_FILE"] = tsp_file.name
    params["MAX_TRIALS"] = lkh_max_trials
    params["RUNS"] = lkh_runs
    params["SEED"] = lkh_seed
    params["TOUR_FILE"] = tour_file.name
    if lkh_special:
        par_file.write("SPECIAL\n")
    for k, v in params.items():
        par_file.write(f"{k} = {v}\n")
    par_file.close()    
    
    try:
        # stdin=DEVNULL for preventing a "Press any key" pause at the end of execution
        subprocess.check_output(
            [lkh_path, par_file.name], stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL
        )
    except subprocess.CalledProcessError as e:
        raise Exception(e.output.decode())
    
    # Store the tour in the task_data
    task_data.from_tsplib(tour_file_path=tour_file.name, ref=False)
    
    # Clean files
    os.remove(par_file.name)
    if "tsp_file" in locals():
        os.remove(tsp_file.name)
    if "tour_file" in locals():
        os.remove(tour_file.name)