Metadata-Version: 2.1
Name: qark-behave
Version: 0.1.2
Summary: QArk formatter for Behave
Author-email: Pablo Gibaja <gibajapablo.dev@gmail.com>
Project-URL: Homepage, https://github.com/PabloGibaja/qark-behave
Project-URL: Repository, https://github.com/PabloGibaja/qark-behave
Project-URL: Issues, https://github.com/PabloGibaja/qark-behave/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: behave >=1.2.6
Requires-Dist: allure-behave >=2.9.0
Provides-Extra: dev
Requires-Dist: pytest >=6.0 ; extra == 'dev'
Requires-Dist: pytest-cov ; extra == 'dev'
Requires-Dist: black ; extra == 'dev'
Requires-Dist: flake8 ; extra == 'dev'

# QArk Behave

QArk Behave es un formatter personalizado para Behave, proporcionando resultados de pruebas personalizados para QArk

## Características

- 🎯 **Formatter personalizado**: Saca todo la información posible de tus tests en behave
- 📁 **Directorio por defecto**: Genera resultados en `qark-results` automáticamente
- 🚀 **Fácil de usar**: Invocación simple desde línea de comandos

## Instalación

### Desde el código fuente

```bash
# Clonar el repositorio
git clone https://github.com/PabloGibaja/qark-behave.git
cd qark-behave

# Instalar en modo desarrollo
pip install -e .
```

### Usando pip (cuando esté publicado)

```bash
pip install qark-behave
```

## Uso

### Uso básico

Ejecuta tus pruebas de Behave con el formatter QArk:

```bash
python -m behave -f qark_behave.formatter:QArkFormatter
```

Esto generará los resultados en el directorio `qark-results` por defecto.

### Especificar directorio de salida

Puedes especificar un directorio personalizado para los resultados:

```bash
python -m behave -f qark_behave.formatter:QArkFormatter -o ./mi-directorio-resultados
```

### Ejemplo completo

```bash
# Ejecutar todas las features con el formatter QArk
python -m behave -f qark_behave.formatter:QArkFormatter -o ./qark-results features/

# Ejecutar una feature específica
python -m behave -f qark_behave.formatter:QArkFormatter -o ./resultados features/login.feature
```

## Estructura del proyecto
