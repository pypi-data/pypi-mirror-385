[project]
name = "PyAthena"
description = "Python DB API 2.0 (PEP 249) client for Amazon Athena"
authors = [
    {name = "laughingman7743", email = "laughingman7743@gmail.com"},
]
dependencies = [
    "boto3>=1.26.4",
    "botocore>=1.29.4",
    "tenacity>=4.1.0",
    "fsspec",
    "python-dateutil",
]
requires-python = ">=3.9"
readme = "README.rst"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Database :: Front-Ends",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = ["version"]

[project.urls]
homepage = "https://github.com/laughingman7743/PyAthena/"
repository = "https://github.com/laughingman7743/PyAthena/"

[project.entry-points."sqlalchemy.dialects"]
awsathena = "pyathena.sqlalchemy.base:AthenaDialect"
"awsathena.rest" = "pyathena.sqlalchemy.rest:AthenaRestDialect"
"awsathena.pandas" = "pyathena.sqlalchemy.pandas:AthenaPandasDialect"
"awsathena.arrow" = "pyathena.sqlalchemy.arrow:AthenaArrowDialect"

[project.optional-dependencies]
sqlalchemy = ["sqlalchemy>=1.0.0"]
pandas = ["pandas>=1.3.0"]
arrow = ["pyarrow>=10.0.0"]
fastparquet = ["fastparquet>=0.4.0"]

[dependency-groups]
dev = [
    "sqlalchemy>=1.0.0",
    "pandas>=1.3.0",
    "numpy>=1.26.0",
    "pyarrow>=10.0.0",
    "fastparquet>=0.4.0",
    "Jinja2>=3.1.0",
    "mypy>=0.900",
    "pytest>=3.5",
    "pytest-cov",
    "pytest-xdist",
    "pytest-dependency",
    "sphinx",
    "furo",
    "types-python-dateutil",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
ignore-vcs = true
only-include = [
    "pyathena/",
    "LICENSE",
    "pyproject.toml",
    "README.rst"
]

[tool.hatch.build.targets.wheel]
packages = ["pyathena"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "pyathena/_version.py"

[tool.pytest.ini_options]
norecursedirs = [
    "benchmarks",
    ".venv",
    ".tox",
    "docs.*",
]

[tool.sqla_testing]
requirement_cls = "pyathena.sqlalchemy.requirements:Requirements"
profile_file = "tests/sqlalchemy/profiles.txt"

[tool.ruff]
line-length = 100
exclude = [
    ".venv",
    ".tox",
    "docs",
]
target-version = "py39"

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
    # "UP",  # pyupgrade
]

[tool.mypy]
python_version = 3.9
follow_imports = "silent"
disallow_any_generics = true
strict_optional = true
check_untyped_defs = true
allow_redefinition = true
ignore_missing_imports = true
warn_redundant_casts = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
exclude = [
    "benchmarks.*",
    "tests.*",
    ".venv.*",
    ".tox.*",
    "docs.*",
]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py{39,310,311,312,313}

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[testenv]
allowlist_externals =
    uv
    uvx
    make
commands =
    uv sync --group dev
    make test
    make test-sqla
passenv =
    TOXENV
    AWS_*
    GITHUB_*
"""
