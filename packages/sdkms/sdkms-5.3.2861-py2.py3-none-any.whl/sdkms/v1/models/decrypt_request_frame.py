# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class DecryptRequestFrame(object):


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'init': 'DecryptRequestFrameInit',
        'ad': 'str',
        'cipher': 'str',
        'final': 'DecryptRequestFrameFinal'
    }

    attribute_map = {
        'init': 'init',
        'ad': 'ad',
        'cipher': 'cipher',
        'final': 'final'
    }

    def __init__(self, init=None, ad=None, cipher=None, final=None):
        """
        DecryptRequestFrame - a model defined in Swagger
        """

        self._init = None
        self._ad = None
        self._cipher = None
        self._final = None

        if init is not None:
          self.init = init
        if ad is not None:
          self.ad = ad
        if cipher is not None:
          self.cipher = cipher
        if final is not None:
          self.final = final

    @property
    def init(self):
        """
        Gets the init of this DecryptRequestFrame.

        Type: `DecryptRequestFrameInit`

        :setter: Sets the init of this DecryptRequestFrame.
        """
        return self._init

    @init.setter
    def init(self, init):
        """
        Sets the init of this DecryptRequestFrame.
        """

        self._init = init

    @property
    def ad(self):
        """
        Gets the ad of this DecryptRequestFrame.
        A chunk of additional data for authentication in AEAD modes.  In CBOR, this is encoded directly as a byte string, *not* a UTF-8 string.  All \"ad\" frames must come before any \"cipher\" frames. 

        Type: `str`

        :setter: Sets the ad of this DecryptRequestFrame.
        """
        return self._ad

    @ad.setter
    def ad(self, ad):
        """
        Sets the ad of this DecryptRequestFrame.
        A chunk of additional data for authentication in AEAD modes.  In CBOR, this is encoded directly as a byte string, *not* a UTF-8 string.  All \"ad\" frames must come before any \"cipher\" frames. 
        """

        self._ad = ad

    @property
    def cipher(self):
        """
        Gets the cipher of this DecryptRequestFrame.
        A chunk of ciphertext.  In CBOR, this is encoded directly as a byte string, *not* a UTF-8 string.  In addition to the 512 KiB limit on the total size of all frames, the content of this field may be at most 511 KiB. 

        Type: `str`

        :setter: Sets the cipher of this DecryptRequestFrame.
        """
        return self._cipher

    @cipher.setter
    def cipher(self, cipher):
        """
        Sets the cipher of this DecryptRequestFrame.
        A chunk of ciphertext.  In CBOR, this is encoded directly as a byte string, *not* a UTF-8 string.  In addition to the 512 KiB limit on the total size of all frames, the content of this field may be at most 511 KiB. 
        """

        self._cipher = cipher

    @property
    def final(self):
        """
        Gets the final of this DecryptRequestFrame.

        Type: `DecryptRequestFrameFinal`

        :setter: Sets the final of this DecryptRequestFrame.
        """
        return self._final

    @final.setter
    def final(self, final):
        """
        Sets the final of this DecryptRequestFrame.
        """

        self._final = final

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DecryptRequestFrame):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

