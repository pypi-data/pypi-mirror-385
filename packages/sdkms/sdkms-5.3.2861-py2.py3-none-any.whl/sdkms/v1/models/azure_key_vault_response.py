# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class AzureKeyVaultResponse(object):


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'vault_type': 'AzureKeyVaultType',
        'location': 'str',
        'tags': 'dict(str, str)',
        'retention': 'int',
        'uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'vault_type': 'vault_type',
        'location': 'location',
        'tags': 'tags',
        'retention': 'retention',
        'uri': 'uri'
    }

    def __init__(self, id=None, name=None, vault_type=None, location=None, tags=None, retention=None, uri=None):
        """
        AzureKeyVaultResponse - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._vault_type = None
        self._location = None
        self._tags = None
        self._retention = None
        self._uri = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if vault_type is not None:
          self.vault_type = vault_type
        if location is not None:
          self.location = location
        if tags is not None:
          self.tags = tags
        if retention is not None:
          self.retention = retention
        if uri is not None:
          self.uri = uri

    @property
    def id(self):
        """
        Gets the id of this AzureKeyVaultResponse.

        Type: `str`

        :setter: Sets the id of this AzureKeyVaultResponse.
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AzureKeyVaultResponse.
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this AzureKeyVaultResponse.

        Type: `str`

        :setter: Sets the name of this AzureKeyVaultResponse.
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AzureKeyVaultResponse.
        """

        self._name = name

    @property
    def vault_type(self):
        """
        Gets the vault_type of this AzureKeyVaultResponse.

        Type: `AzureKeyVaultType`

        :setter: Sets the vault_type of this AzureKeyVaultResponse.
        """
        return self._vault_type

    @vault_type.setter
    def vault_type(self, vault_type):
        """
        Sets the vault_type of this AzureKeyVaultResponse.
        """

        self._vault_type = vault_type

    @property
    def location(self):
        """
        Gets the location of this AzureKeyVaultResponse.

        Type: `str`

        :setter: Sets the location of this AzureKeyVaultResponse.
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this AzureKeyVaultResponse.
        """

        self._location = location

    @property
    def tags(self):
        """
        Gets the tags of this AzureKeyVaultResponse.
        Map from tag keys to tag values

        Type: map[`str`]

        :setter: Sets the tags of this AzureKeyVaultResponse.
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this AzureKeyVaultResponse.
        Map from tag keys to tag values
        """

        self._tags = tags

    @property
    def retention(self):
        """
        Gets the retention of this AzureKeyVaultResponse.

        Type: `int`

        :setter: Sets the retention of this AzureKeyVaultResponse.
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """
        Sets the retention of this AzureKeyVaultResponse.
        """

        self._retention = retention

    @property
    def uri(self):
        """
        Gets the uri of this AzureKeyVaultResponse.

        Type: `str`

        :setter: Sets the uri of this AzureKeyVaultResponse.
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this AzureKeyVaultResponse.
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AzureKeyVaultResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

