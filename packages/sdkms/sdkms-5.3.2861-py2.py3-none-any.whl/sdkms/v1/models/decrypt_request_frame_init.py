# coding: utf-8

"""
    Fortanix SDKMS REST API

    This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 

    OpenAPI spec version: 1.0.0-20200608
    Contact: support@fortanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re




# NOTE: This class is auto generated by the swagger code generator program.
# Do not edit the class manually.
class DecryptRequestFrameInit(object):


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'SobjectDescriptor',
        'mode': 'CipherMode',
        'iv': 'str'
    }

    attribute_map = {
        'key': 'key',
        'mode': 'mode',
        'iv': 'iv'
    }

    def __init__(self, key=None, mode=None, iv=None):
        """
        DecryptRequestFrameInit - a model defined in Swagger
        """

        self._key = None
        self._mode = None
        self._iv = None

        self.key = key
        self.mode = mode
        if iv is not None:
          self.iv = iv

    @property
    def key(self):
        """
        Gets the key of this DecryptRequestFrameInit.

        Type: `SobjectDescriptor`

        :setter: Sets the key of this DecryptRequestFrameInit.
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this DecryptRequestFrameInit.
        """

        self._key = key

    @property
    def mode(self):
        """
        Gets the mode of this DecryptRequestFrameInit.

        Type: `CipherMode`

        :setter: Sets the mode of this DecryptRequestFrameInit.
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this DecryptRequestFrameInit.
        """

        self._mode = mode

    @property
    def iv(self):
        """
        Gets the iv of this DecryptRequestFrameInit.
        The initialization vector used to encrypt this ciphertext.  In CBOR, this is encoded directly as a byte string, *not* a UTF-8 string.  This field is required for all modes except ECB, where it is forbidden. 

        Type: `str`

        :setter: Sets the iv of this DecryptRequestFrameInit.
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """
        Sets the iv of this DecryptRequestFrameInit.
        The initialization vector used to encrypt this ciphertext.  In CBOR, this is encoded directly as a byte string, *not* a UTF-8 string.  This field is required for all modes except ECB, where it is forbidden. 
        """

        self._iv = iv

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DecryptRequestFrameInit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

