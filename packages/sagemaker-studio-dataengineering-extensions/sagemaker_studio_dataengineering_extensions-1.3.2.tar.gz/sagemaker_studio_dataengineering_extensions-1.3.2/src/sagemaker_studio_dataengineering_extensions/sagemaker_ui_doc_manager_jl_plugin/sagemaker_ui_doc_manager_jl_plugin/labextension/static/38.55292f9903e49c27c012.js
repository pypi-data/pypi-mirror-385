"use strict";(self.webpackChunk_amzn_sagemaker_ui_doc_manager_jl_plugin=self.webpackChunk_amzn_sagemaker_ui_doc_manager_jl_plugin||[]).push([[38],{38:(e,t,n)=>{n.r(t),n.d(t,{default:()=>c}),n(219);var a=n(722);const o="docmanager:open",s="docmanager:show-in-file-browser";n(296);const r=async(e,t)=>{var n;try{return await e.serviceManager.contents.get(t,{content:!1}),!0}catch(e){if(404===(null===(n=null==e?void 0:e.response)||void 0===n?void 0:n.status))return!1;throw e}},c={id:"@amzn/sagemaker-ui-doc-manager-jl-plugin:plugin",description:"A JupyterLab extension for handling notebook documents.",autoStart:!0,requires:[a.INotebookTracker],activate:(e,t)=>{console.log("sagemaker-ui-doc-manager-jl-plugin is activated!");let n=!1;const a=async t=>{if(!n)return;const a="shared/jobs/.jobsIndex.json";try{if(!await r(e,a))return;const n=await e.serviceManager.contents.get(a),o=JSON.parse(n.content)[t];if(!o)return;const s=await e.serviceManager.contents.get(t),c=function(e){try{const t="string"==typeof e?JSON.parse(e):e,{codeBlocks:n}=function(e){const t=[];for(const n of(null==e?void 0:e.cells)||[]){if("code"!==n.cell_type)continue;let e=n.source;Array.isArray(e)&&(e=e.join("")),e.trim()&&t.push(e)}return{codeBlocks:t}}(t),{processedBlocks:a,isFilePolyglot:o}=function(e){const t=[];let n=!1;for(const a of e)if(!a.startsWith("%%configure"))if(a.startsWith("%%pyspark")){const e=a.split("\n"),n=e.length>1?e.slice(1).join("\n"):"";t.push(n)}else if(a.startsWith("%%")&&!a.includes("project.spark"))n=!0;else{const e=a.split("\n").filter((e=>!e.startsWith("%"))).join("\n");t.push(e)}return{processedBlocks:t,isFilePolyglot:n}}(n);return{script:a.map((e=>`\n${e}\n`)).join(""),isFilePolyglot:o}}catch(e){return{script:"",isFilePolyglot:!1,error:e instanceof Error?e.message:String(e)}}}("string"==typeof s.content?JSON.parse(s.content):s.content);if(c.error)return;await e.serviceManager.contents.save(o,{type:"file",content:c.script,format:"text"})}catch(e){console.log("Could not update Python file:",e)}};t.widgetAdded.connect(((e,t)=>{const n=t.context,o=n.model;o&&(o.stateChanged.connect((async(e,t)=>{"dirty"===t.name&&!0===t.oldValue&&!1===t.newValue&&await a(n.path)})),t.disposed.connect((async()=>{await a(n.path)})))})),window.addEventListener("message",(async t=>{const a=t.data;if((e=>{const t=e.data;return"sagemaker:mdevent:isExpressDomain"===t.type&&!0===t.payload.value})(t)&&(n=!0),(e=>{const t=e.data;return"sagemaker:nbevent:OpenFile"===t.type&&""!==t.payload.path})(t)&&(await e.commands.execute(o,{path:a.payload.path}),await e.commands.execute(s)),"sagemaker:nbevent:OpenUntitledFile"===t.data.type){const{type:t,ext:n,path:r,content:c,format:i}=a.payload;await e.serviceManager.contents.newUntitled({type:t,ext:n,path:r}).then((async t=>{c&&await e.serviceManager.contents.save(t.path,{type:t.type,content:c,format:i||"text"}),await e.commands.execute(o,{path:t.path}),await e.commands.execute(s)}))}else if("sagemaker:nbevent:OpenOrCreateFile"===t.data.type){const{type:n,path:c,content:i,format:l}=a.payload;if(!i)return void console.error("Missing content",t);if(!c)return void console.error("Missing path",t);try{await r(e,c)||await e.serviceManager.contents.save(c,{type:n,content:i,format:l||"text"})}catch(t){return void console.error("Unable to check if file exists",t)}await e.commands.execute(o,{path:c}),await e.commands.execute(s)}}))}}}}]);