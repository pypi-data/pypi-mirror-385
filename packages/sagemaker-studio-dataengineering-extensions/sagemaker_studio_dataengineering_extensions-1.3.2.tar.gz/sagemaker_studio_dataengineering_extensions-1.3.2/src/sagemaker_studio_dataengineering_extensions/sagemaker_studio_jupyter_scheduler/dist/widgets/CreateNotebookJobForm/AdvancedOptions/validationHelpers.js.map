{"version":3,"file":"validationHelpers.js","sourceRoot":"","sources":["../../../../src/widgets/CreateNotebookJobForm/AdvancedOptions/validationHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { i18nStrings } from '../../../constants/common';\n\nconst s3PathPattern = new RegExp('^(https|s3)://([^/]+)/?(.*)$');\nconst securityGroupAndSubnetPattern = new RegExp('[-0-9a-zA-Z]+');\nconst roleArnPattern = new RegExp('^arn:aws[a-z\\\\-]*:iam::\\\\d{12}:role/?[a-zA-Z_0-9+=,.@\\\\-_/]+$');\nconst keyArnPattern = new RegExp('^arn:aws:kms:\\\\w+(?:-\\\\w+)+:\\\\d{12}:key\\\\/[A-Za-z0-9]+(?:-[A-Za-z0-9]+)+$');\nconst keyIDPattern = new RegExp('^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$');\n\nconst errorStrings = i18nStrings.ScheduleNoteBook.MainPanel.ErrorMessages;\nconst vpcErrorStrings = errorStrings.VPCErrors;\nconst maxRetryAttemptsMinValue = 0;\nconst maxRetryAttemptsMaxValue = 30;\nconst maxRunTimeMinValue = 0;\n\nexport const validateImage = (image: string): string => {\n  return image.length <= 0 ? errorStrings.AdvancedOptions.ImageError : '';\n}\n\nexport const validateKernel = (kernel: string): string => {\n  return kernel.length <= 0 ? errorStrings.AdvancedOptions.KernelError : '';\n}\n\nexport const validateRoleArn = (roleArn: string): string => {\n  if (roleArn.length < 20 || roleArn.length > 2048) {\n    return errorStrings.AdvancedOptions.RoleArnLengthError;\n  }\n\n  if (!roleArnPattern.test(roleArn)) {\n    return errorStrings.AdvancedOptions.RoleArnFormatError;\n  }\n\n  return '';\n};\n\n// Reference: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DebugRuleConfiguration.html#sagemaker-Type-DebugRuleConfiguration-S3OutputPath\nexport const validateS3Url = (s3Path: string): string => {\n  if (s3Path.trim().length === 0) {\n    return errorStrings.AdvancedOptions.S3LengthError;\n  }\n\n  if (!s3PathPattern.test(s3Path)) {\n    return errorStrings.AdvancedOptions.S3FormatError;\n  }\n\n  return '';\n};\n\nexport const validateMaxRetryAttempts = (maxRetryAttemptsString: string): string => {\n  const maxRetryAttempts = parseInt(maxRetryAttemptsString)\n  if (isNaN(maxRetryAttempts) || maxRetryAttempts < maxRetryAttemptsMinValue || maxRetryAttempts > maxRetryAttemptsMaxValue){\n    return errorStrings.AdvancedOptions.MaxRetryAttemptsError;\n  }\n  return '';\n};\n\nexport const validateMaxRunTimeInSeconds = (maxRuntTimeInSecondsString: string): string => {\n  const maxRuntTimeInSeconds = parseInt(maxRuntTimeInSecondsString)\n  if (isNaN(maxRuntTimeInSeconds) || maxRuntTimeInSeconds < maxRunTimeMinValue){\n    return errorStrings.AdvancedOptions.MaxRunTimeInSecondsError;\n  }\n  return '';\n};\n\nexport const validateSubnetOptions = (subnetOptions: string[]): string => {\n  if (subnetOptions) {\n    if (subnetOptions.length === 0) {\n      return `${vpcErrorStrings.RequiresPrivateSubnet} ${vpcErrorStrings.NoPrivateSubnetsInSageMakerDomain}`\n    }\n  }\n\n  return '';\n}\n\nexport const validateInitialSubnets = (initialSubnetValues: string[]): string => {\n  if (initialSubnetValues) {\n    if (initialSubnetValues.length === 0) {\n      return `${vpcErrorStrings.RequiresPrivateSubnet} ${vpcErrorStrings.NoPrivateSubnetsInSageMakerDomain}. ${vpcErrorStrings.YouMayChooseOtherSubnets}`;\n    }\n  }\n  return '';\n}\n\n// Reference: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html#sagemaker-Type-VpcConfig-SecurityGroupIds\nexport const validateSecurityGroups = (securityGroups: string[], subnets: string[]): (string | undefined)[] => {\n  if (securityGroups.length === 0) {\n    if (subnets.length === 0) {\n      return ['', ''];\n    }\n    return [errorStrings.AdvancedOptions.SecurityGroupMinError, undefined];\n  }\n\n  if (securityGroups.length > 0) {\n    if (securityGroups.length > 5) {\n      return [errorStrings.AdvancedOptions.SecurityGroupsMaxError, undefined];\n    }\n\n    for (const securityGroup of securityGroups) {\n      if (!securityGroup.startsWith('sg-')) {\n        return [errorStrings.AdvancedOptions.SecurityGroupSGError, undefined];\n      }\n\n      if (securityGroup.length > 32) {\n        return [errorStrings.AdvancedOptions.SecurityGroupLengthError, undefined];\n      }\n\n      if (!securityGroupAndSubnetPattern.test(securityGroup)) {\n        return [errorStrings.AdvancedOptions.SecurityGroupFormatError, undefined];\n      }\n    }\n\n    if (subnets.length === 0) {\n      return ['', errorStrings.AdvancedOptions.SubnetMinError];\n    }\n  }\n  return ['', undefined];\n};\n\n// Reference: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html#sagemaker-Type-VpcConfig-Subnets\nexport const validateSubnets = (subnets: string[], securityGroups: string[]): (string | undefined)[] => {\n  if (subnets.length === 0) {\n    if (securityGroups.length === 0) {\n      return ['', ''];\n    }\n    return [errorStrings.AdvancedOptions.SubnetMinError, undefined];\n  }\n\n  if (subnets && subnets.length > 0) {\n    if (subnets.length > 16) {\n      return [errorStrings.AdvancedOptions.SubnetsMaxError, undefined];\n    }\n\n    for (const subnet of subnets) {\n      if (subnet.length > 32) {\n        return [errorStrings.AdvancedOptions.SubnetLengthError, undefined];\n      }\n\n      if (!securityGroupAndSubnetPattern.test(subnet)) {\n        return [errorStrings.AdvancedOptions.SubnetsFormatError, undefined];\n      }\n    }\n\n    if (securityGroups.length === 0) {\n      return ['', errorStrings.AdvancedOptions.SecurityGroupMinError];\n    }\n  }\n  return ['', undefined];\n};\n\n//Reference: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputDataConfig.html#sagemaker-Type-OutputDataConfig-KmsKeyId\nexport const validateKMS = (KMS: string): string => {\n  if (KMS.length === 0) {\n    return '';\n  }\n  if (!keyArnPattern.test(KMS) && !keyIDPattern.test(KMS)) {\n    return errorStrings.AdvancedOptions.KMSKeyError;\n  }\n  return '';\n};\n"]}