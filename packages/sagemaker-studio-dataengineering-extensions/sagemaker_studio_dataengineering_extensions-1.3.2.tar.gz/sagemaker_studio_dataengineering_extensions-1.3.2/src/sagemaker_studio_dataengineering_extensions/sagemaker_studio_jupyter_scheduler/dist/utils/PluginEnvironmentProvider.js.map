{"version":3,"file":"PluginEnvironmentProvider.js","sourceRoot":"","sources":["../../src/utils/PluginEnvironmentProvider.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEnE,MAAM,CAAC,MAAM,6BAA6B,GAAG,4BAA4B,CAAC;AAC1E,MAAM,CAAC,MAAM,iCAAiC,GAAG,yDAAyD,CAAC;AAE3G,IAAK,qBAIJ;AAJD,WAAK,qBAAqB;IACxB,sDAA6B,CAAA;IAC7B,kDAAyB,CAAA;IACzB,0CAAiB,CAAA;AACnB,CAAC,EAJI,qBAAqB,KAArB,qBAAqB,QAIzB;AAED,MAAM,iBAAiB;IAErB,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,IAAI,KAAK,qBAAqB,CAAC,MAAM,CAAC;IACpD,CAAC;IAED,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,IAAI,KAAK,qBAAqB,CAAC,OAAO,CAAC;IACrD,CAAC;IAED,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,IAAI,KAAK,qBAAqB,CAAC,UAAU,CAAC;IACxD,CAAC;IAED,IAAW,oBAAoB;QAC7B,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,CAAC;IAC5C,CAAC;IAED,YACkB,IAA2B;QAA3B,SAAI,GAAJ,IAAI,CAAuB;QAE3C,OAAO,CAAC,KAAK,CAAC,wCAAwC,IAAI,EAAE,CAAC,CAAC;IAC/D,CAAC;CAEH;AAED,SAAS,oBAAoB,CAAC,GAAoB;IAChD,IAAI,GAAG,CAAC,SAAS,CAAC,6BAA6B,CAAC,EAAE;QAChD,OAAO,IAAI,iBAAiB,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;KAC5D;IAED,IAAI,GAAG,CAAC,SAAS,CAAC,iCAAiC,CAAC;WAC7C,GAAG,CAAC,SAAS,CAAC,4CAA4C,CAAC,EAAE;QAClE,OAAO,IAAI,iBAAiB,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;KAChE;IAED,OAAO,IAAI,iBAAiB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;AAC9D,CAAC;AAOD,MAAM,wBAAwB,GAAG,aAAa,CAAqC,SAAS,CAAC,CAAC;AAO9F,SAAS,yBAAyB,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAkC;IAClF,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,QAAQ,CAAoB,GAAG,EAAE;QACjF,OAAO,oBAAoB,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IACH,MAAM,KAAK,GAAG,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,CAAC;IAC1D,OAAO,oBAAC,wBAAwB,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,IAAG,QAAQ,CAAqC,CAAA;AACxG,CAAC;AAED,SAAS,oBAAoB;IAC3B,MAAM,OAAO,GAAG,UAAU,CAAC,wBAAwB,CAAC,CAAC;IACrD,IAAI,OAAO,KAAK,SAAS,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;KACzF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,OAAO,EAAE,yBAAyB,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,CAAC","sourcesContent":["import { JupyterFrontEnd } from '@jupyterlab/application';\nimport React, { createContext, useContext, useState } from 'react';\n\nexport const STUDIO_SAGEMAKER_UI_PLUGIN_ID = '@amzn/sagemaker-ui:project';\nexport const JUPYTERLAB_SAGEMAKER_UI_PLUGIN_ID = '@amzn/sagemaker-jupyterlab-extensions:sessionmanagement';\n\nenum PluginEnvironmentType {\n  LocalJL = 'local-jupyter-lab',\n  JupyterLab = 'jupyterlab',\n  Studio = 'studio',\n}\n\nclass PluginEnvironment {\n\n  public get isStudio(): boolean {\n    return this.type === PluginEnvironmentType.Studio;\n  }\n\n  public get isLocalJL(): boolean {\n    return this.type === PluginEnvironmentType.LocalJL;\n  }\n\n  public get isJupyterLab(): boolean {\n    return this.type === PluginEnvironmentType.JupyterLab;\n  }\n\n  public get isStudioOrJupyterLab(): boolean {\n    return this.isStudio || this.isJupyterLab;\n  }\n\n  constructor(\n    public readonly type: PluginEnvironmentType,\n  ) {\n    console.debug(`PluginEnvironment created with type: ${type}`);\n   }\n\n}\n\nfunction getPluginEnvironment(app: JupyterFrontEnd): PluginEnvironment {\n  if (app.hasPlugin(STUDIO_SAGEMAKER_UI_PLUGIN_ID)) {\n    return new PluginEnvironment(PluginEnvironmentType.Studio);\n  }\n\n  if (app.hasPlugin(JUPYTERLAB_SAGEMAKER_UI_PLUGIN_ID)\n      || app.hasPlugin('@amzn/sagemaker-studio-scheduler:scheduler')) {\n    return new PluginEnvironment(PluginEnvironmentType.JupyterLab);\n  }\n\n  return new PluginEnvironment(PluginEnvironmentType.LocalJL);\n}\n\ntype PluginEnvironmentValue = {\n  pluginEnvironment: PluginEnvironment;\n  setPluginEnvironment: (state: PluginEnvironment) => void;\n}\n\nconst PluginEnvironmentContext = createContext<PluginEnvironmentValue | undefined>(undefined);\n\ntype PluginEnvironmentProviderProps = {\n  app: JupyterFrontEnd;\n  children: React.ReactNode;\n};\n\nfunction PluginEnvironmentProvider({ app, children }: PluginEnvironmentProviderProps) {\n  const [pluginEnvironment, setPluginEnvironment] = useState<PluginEnvironment>(() => {\n    return getPluginEnvironment(app);\n  });\n  const value = { pluginEnvironment, setPluginEnvironment };\n  return <PluginEnvironmentContext.Provider value={value}>{children}</PluginEnvironmentContext.Provider>\n}\n\nfunction usePluginEnvironment(): PluginEnvironmentValue {\n  const context = useContext(PluginEnvironmentContext);\n  if (context === undefined) {\n    throw new Error('usePluginEnvironment must be used within a PluginEnvironmentProvider');\n  }\n  return context;\n}\n\nexport { PluginEnvironmentProvider, usePluginEnvironment, PluginEnvironment, PluginEnvironmentType };\n"]}