{"version":3,"file":"initialValueHelpers.js","sourceRoot":"","sources":["../../../src/widgets/CreateNotebookJobForm/initialValueHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { JobsView } from '@jupyterlab/scheduler';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport { parseSpecName, strHasLength } from '../../utils';\nimport { FormState, IAutoDetectedConfig } from './CreateNotebookJobform';\nimport { IEnvironmentVariable } from './AdvancedOptions/EnvironmentVariables/EnvironmentVariable';\n\nexport const NO_SCRIPT = 'No script';\n\nconst DEFAULT_ENV_VARIABLES_LIST = new Set<string>([\n  'sm_kernel',\n  'sm_image',\n  'sm_lcc_init_script_arn',\n  'role_arn',\n  'vpc_security_group_ids',\n  'vpc_subnets',\n  's3_input',\n  's3_output',\n  'sm_init_script',\n  'sm_output_kms_key',\n  'sm_volume_kms_key',\n  'max_run_time_in_seconds',\n  'max_retry_attempts',\n  'enable_network_isolation',\n  // DataZone environment variables that are automatically added for SMUS environments\n  'DataZoneDomainId',\n  'DataZoneProjectId',\n  'DataZoneEndpoint',\n  'DataZoneDomainRegion',\n  'DataZoneStage',\n  'DataZoneEnvironmentId',\n  'ProjectS3Path'\n]);\n\nconst SETTING_REGISTRY_PLUGIN = '@amzn/sagemaker-studio-jupyter-scheduler:advanced-options';\nconst SETTING_REGISTRY_ADVANCED_OPTIONS_KEY = 'advancedOptions';\n\nexport interface ISubnetSecurityGroupShape {\n  name: string;\n  is_selected: boolean;\n}\n\nexport type ISubnetSecurityGroupValues = ISubnetSecurityGroupShape[];\n\nexport type RuntimeEnvParams =\n  | {\n    [key: string]: number | string | boolean;\n  }\n  | undefined;\n\nexport const getInitialSubnetOrSecurityGroupValues = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  autoDetectedConfig: IAutoDetectedConfig[],\n  view: JobsView,\n  key: 'vpc_security_group_ids' | 'vpc_subnets',\n): string[] => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    // these are comma separated values\n    if (runtimeEnvironmentParameters) {\n      if (!runtimeEnvironmentParameters[key]) {\n        return [];\n      }\n\n      const asString = runtimeEnvironmentParameters[key] as string;\n      return asString.split(',');\n    }\n  } else if (view === JobsView.CreateForm) {\n    return autoDetectedConfig?.find((c) => c.name === key)?.value;\n  }\n\n  return [];\n};\n\nexport const getInitialLCCValue = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  view: JobsView\n): string => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      const val = runtimeEnvironmentParameters[\n        'sm_lcc_init_script_arn'\n      ] as string;\n\n      if (!val) {\n        return NO_SCRIPT;\n      }\n\n      return val;\n    }\n\n    return NO_SCRIPT;\n  }\n\n  return NO_SCRIPT;\n};\n\nexport const getInitialRoleArnValues = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  autoDetectedConfig: IAutoDetectedConfig[],\n  view: JobsView,\n): string => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters['role_arn'] as string;\n    }\n  } else if (view === JobsView.CreateForm) {\n    if (runtimeEnvironmentParameters && 'role_arn' in runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters['role_arn'] as string;\n    }\n\n    const autoDetectedValue = autoDetectedConfig?.find((c) => c.name === 'role_arn')?.value;\n\n    if (autoDetectedValue?.length > 0) {\n      return autoDetectedValue[0];\n    }\n  }\n\n  return '';\n};\n\nexport const getInitialImageValue = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  autoDetectedConfig: IAutoDetectedConfig[],\n) => {\n  if (runtimeEnvironmentParameters) {\n    const { sm_kernel, sm_image } = runtimeEnvironmentParameters;\n    const KERNEL_IMAGE_KEY = `${sm_kernel}__SAGEMAKER_INTERNAL__${sm_image}`;\n    return parseSpecName(KERNEL_IMAGE_KEY);\n  }\n\n  const autoDetectedImageValues = autoDetectedConfig?.find((c) => c.name === 'image')?.value;\n  const autoDetectedKernelValues = autoDetectedConfig?.find((c) => c.name === 'kernel')?.value;\n\n  if (strHasLength(autoDetectedImageValues) && strHasLength(autoDetectedKernelValues)) {\n    return parseSpecName(`${autoDetectedKernelValues}__SAGEMAKER_INTERNAL__${autoDetectedImageValues}`);\n  }\n\n  return {\n    kernel: null,\n    arnEnvironment: null,\n    version: null,\n  };\n};\n\nexport const getInitialInitScriptValue = (runtimeEnvironmentParameters: RuntimeEnvParams, view: JobsView): string => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters['sm_init_script'] as string;\n    }\n  } else if (view === JobsView.CreateForm) {\n    if (runtimeEnvironmentParameters && 'sm_init_script' in runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters['sm_init_script'] as string;\n    }\n  }\n\n  return '';\n};\n\nexport const getInitialS3Values = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  autoDetectedConfig: IAutoDetectedConfig[],\n  view: JobsView,\n  key: 's3_output' | 's3_input',\n): string => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters[key] as string;\n    }\n  } else if (view === JobsView.CreateForm) {\n    if (runtimeEnvironmentParameters && key in runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters[key] as string;\n    }\n\n    return autoDetectedConfig?.find((c) => c.name === key)?.value || '';\n  }\n\n  return '';\n};\n\nexport const getInitialKeyValueAsBoolean = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  view: JobsView,\n  key: 'enable_network_isolation',\n): boolean => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      return Boolean(runtimeEnvironmentParameters[key]);\n    }\n  } else if (view === JobsView.CreateForm) {\n    if (runtimeEnvironmentParameters && key in runtimeEnvironmentParameters) {\n      return Boolean(runtimeEnvironmentParameters[key]);\n    }\n  }\n\n  return false;\n};\n\nexport const getInitialKeyValue = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  view: JobsView,\n  defaultValue: number,\n  key: 'max_retry_attempts' | 'max_run_time_in_seconds',\n): number => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters[key] as number;\n    }\n  } else if (view === JobsView.CreateForm) {\n    if (runtimeEnvironmentParameters && key in runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters[key] as number;\n    }\n  }\n\n  return defaultValue;\n};\n\nexport const getInitialKMSKeys = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  view: JobsView,\n  key: 'sm_output_kms_key' | 'sm_volume_kms_key',\n): string => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters[key] as string;\n    }\n  } else if (view === JobsView.CreateForm) {\n    if (runtimeEnvironmentParameters && key in runtimeEnvironmentParameters) {\n      return runtimeEnvironmentParameters[key] as string;\n    }\n  }\n\n  return '';\n};\n\nexport const getInitialEnvironmentVariables = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n): IEnvironmentVariable[] => {\n  const initialEnvironmentVariables: IEnvironmentVariable[] = [];\n\n  // get all key/value pairs that are not part of default set => these are the env variables\n  if (runtimeEnvironmentParameters) {\n    for (const envVar in runtimeEnvironmentParameters) {\n      if (!DEFAULT_ENV_VARIABLES_LIST.has(envVar)) {\n        const entry = {\n          key: envVar,\n          value: runtimeEnvironmentParameters[envVar] as string,\n        };\n\n        initialEnvironmentVariables.push(entry);\n      }\n    }\n  }\n\n  return initialEnvironmentVariables;\n};\n\nexport const getNetworkAccessType = (autoDetectedConfig: IAutoDetectedConfig[], view: JobsView): string => {\n  if (view === JobsView.CreateForm) {\n    return (autoDetectedConfig?.find((c) => c.name === 'app_network_access_type')?.value as string) || '';\n  }\n\n  return '';\n};\n\n/**\n * Get the most recently cached value of the advanced options from the setting registry.\n * @returns Partial representation of advanced options\n */\nexport async function getAdvancedOptionsFromSettingRegistry(settingRegistry: ISettingRegistry):\n  Promise<Partial<FormState> | undefined> {\n  const state = await settingRegistry.get(SETTING_REGISTRY_PLUGIN, SETTING_REGISTRY_ADVANCED_OPTIONS_KEY);\n  return state.composite as Partial<FormState> | undefined;\n}\n"]}