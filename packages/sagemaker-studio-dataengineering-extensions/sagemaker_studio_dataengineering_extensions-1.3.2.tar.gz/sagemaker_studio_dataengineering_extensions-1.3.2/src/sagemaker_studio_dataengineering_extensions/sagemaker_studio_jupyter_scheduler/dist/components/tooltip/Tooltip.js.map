{"version":3,"file":"Tooltip.js","sourceRoot":"","sources":["../../../src/components/tooltip/Tooltip.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,UAAU,CAAC;AAC9D,OAAO,UAAgE,MAAM,uBAAuB,CAAC;AAErG,OAAO,EAAE,EAAE,EAAE,MAAM,cAAc,CAAC;AAElC,IAAK,iBAaJ;AAbD,WAAK,iBAAiB;IACpB,2CAAsB,CAAA;IACtB,gCAAW,CAAA;IACX,uCAAkB,CAAA;IAClB,+CAA0B,CAAA;IAC1B,oCAAe,CAAA;IACf,2CAAsB,CAAA;IACtB,iDAA4B,CAAA;IAC5B,sCAAiB,CAAA;IACjB,6CAAwB,CAAA;IACxB,6CAAwB,CAAA;IACxB,kCAAa,CAAA;IACb,yCAAoB,CAAA;AACtB,CAAC,EAbI,iBAAiB,KAAjB,iBAAiB,QAarB;AAQD,MAAM,OAAO,GAA0C,CAAC,EACtD,QAAQ,EACR,OAAO,EACP,SAAS,EACT,SAAS,GAAG,iBAAiB,CAAC,KAAK,EACnC,GAAG,oBAAoB,EACxB,EAAE,EAAE;IACH,MAAM,UAAU,GAAG,EAAE,CAAC,SAAS,EAAE,mBAAmB,EAAE,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC,CAAC;IACzE,OAAO,CACL,oBAAC,UAAU,OACL,oBAAoB,EACxB,KAAK,QACL,OAAO,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,aAAa,EAAE,EAAE,EACzD,SAAS,EAAE,SAAS,iBACP,SAAS,IAErB,QAAQ,CACE,CACd,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC","sourcesContent":["import React from 'react';\nimport { toolTipStyles, toolTipPopperStyles } from './styles';\nimport MuiTooltip, { TooltipClassKey, TooltipProps as MuiTooltipProps } from '@mui/material/Tooltip';\nimport { ClassNameMap } from '@mui/material';\nimport { cx } from '@emotion/css';\n\nenum TooltipPlacements {\n  TopStart = 'top-start',\n  Top = 'top',\n  TopEnd = 'top-end',\n  RightStart = 'right-start',\n  Right = 'right',\n  RightEnd = 'right-end',\n  BottomStart = 'bottom-start',\n  Bottom = 'bottom',\n  BottomEnd = 'bottom-end',\n  LeftStart = 'left-start',\n  Left = 'left',\n  LeftEnd = 'left-end',\n}\n\nexport interface TooltipProps extends Omit<MuiTooltipProps, 'className' | 'classes' | 'arrow' | 'placement'> {\n  readonly className?: string;\n  readonly classes?: Partial<ClassNameMap<TooltipClassKey>>;\n  readonly placement?: TooltipPlacements;\n}\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({\n  children,\n  classes,\n  className,\n  placement = TooltipPlacements.Right,\n  ...materialTooltipProps\n}) => {\n  const classNames = cx(className, toolTipPopperStyles(), classes?.popper);\n  return (\n    <MuiTooltip\n      {...materialTooltipProps}\n      arrow\n      classes={{ popper: classNames, tooltip: toolTipStyles() }}\n      placement={placement}\n      data-testid={'toolTip'}\n    >\n      {children}\n    </MuiTooltip>\n  );\n};\n\nexport { Tooltip, TooltipPlacements };\n"]}