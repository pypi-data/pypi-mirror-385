{"version":3,"file":"CreateNotebookJob.js","sourceRoot":"","sources":["../../src/widgets/CreateNotebookJob.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Dialog } from '@jupyterlab/apputils';\nimport { StyledEngineProvider, ThemeProvider } from '@mui/material/styles';\n\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection, ContentsManager } from '@jupyterlab/services';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { JobsView, Scheduler } from '@jupyterlab/scheduler';\nimport { CommandRegistry } from '@lumino/commands';\n\nimport { CreateNotebookJobForm } from './CreateNotebookJobForm';\nimport { errorCodes, i18nStrings, JUPYTER_COMMAND_IDS } from '../constants';\nimport { renderTextWithLinks } from '../utils';\nimport * as Styles from './styles';\n\nimport { getJupyterLabTheme } from '../themeProvider';\nimport { Theme } from '@mui/material/styles';\nimport { usePluginEnvironment } from '../utils/PluginEnvironmentProvider';\n\ndeclare module '@mui/material' {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface DefaultTheme extends Theme { }\n}\n\n\ntype CreateNotebookJobProps = Scheduler.IAdvancedOptionsProps & {\n  requestClient: ServerConnection.ISettings;\n  contentsManager: ContentsManager;\n  commands: CommandRegistry;\n  settingRegistry: ISettingRegistry;\n};\n\nconst showCredentialsErrorDialog = async (commands: CommandRegistry) => {\n  const body = (\n    <>\n      {i18nStrings.Dialog.awsCredentialsError.body.text.map((text, idx) => (\n        <p key={idx} className={Styles.CredentialsErrorDialogParagraph}>\n          {renderTextWithLinks(text, i18nStrings.Dialog.awsCredentialsError.body.links)}\n        </p>\n      ))}\n    </>\n  );\n  const dialog = new Dialog({\n    title: i18nStrings.Dialog.awsCredentialsError.title,\n    body,\n    buttons: [\n      Dialog.cancelButton(),\n      Dialog.okButton({ label: i18nStrings.Dialog.awsCredentialsError.buttons.enterKeysInTerminal }),\n    ],\n  });\n  const result = await dialog.launch();\n  if (result.button.label === i18nStrings.Dialog.awsCredentialsError.buttons.enterKeysInTerminal) {\n    commands.execute(JUPYTER_COMMAND_IDS.terminal.createNew);\n  }\n};\n\nconst CreateNotebookJob: React.FC<CreateNotebookJobProps> = ({\n  requestClient,\n  contentsManager,\n  commands,\n  jobsView,\n  errors,\n  handleErrorsChange,\n  ...rest\n}) => {\n  const { pluginEnvironment } = usePluginEnvironment();\n  const [apiError, setApiError] = useState<string>('');\n\n  const fetchExecutionEnvironments = async () => {\n    const url = URLExt.join(requestClient.baseUrl, '/sagemaker_studio_jupyter_scheduler/advanced_environments');\n    const response = await ServerConnection.makeRequest(url, {}, requestClient);\n\n    if (response.status !== 200 && pluginEnvironment.isLocalJL) {\n      const responseJson = await response.json();\n      const responseErrorCode = responseJson.error_code;\n      const awsCredentialsErrors = Object.values(errorCodes.awsCredentials);\n      if (awsCredentialsErrors.indexOf(responseErrorCode) >= 0) {\n        showCredentialsErrorDialog(commands);\n      }\n      throw new Error(response.statusText);\n    } else {\n      const executionEnvironmentsResponse = await response.json();\n      return executionEnvironmentsResponse;\n    }\n  };\n\n  useEffect(() => {\n    const loadingErrors = {\n      ...errors,\n      environmentsStillLoading: 'EnvironmentsStillLoadingError',\n      kernelsStillLoading: 'KernelsStillLoadingError',\n    };\n\n    handleErrorsChange(loadingErrors);\n\n    if (jobsView === JobsView.CreateForm) {\n      fetchExecutionEnvironments()\n        .then(async (executionEnvironments: any) => {\n          setEnvironmentsLoading(false);\n          setExecutionEnvironments(executionEnvironments);\n        })\n        .catch(error => {\n          setApiError(error.message);\n        });\n    } else {\n      setEnvironmentsLoading(false);\n    }\n  }, [jobsView, rest.model.inputFile]);\n\n  const [executionEnvironments, setExecutionEnvironments] = useState<any>({});\n\n  const [environmentsLoading, setEnvironmentsLoading] = useState<boolean>(true);\n\n  if (apiError) {\n    return <div className={Styles.ErrorMessageBlock}>{apiError}</div>\n  }\n\n  const loading = environmentsLoading;\n\n  if (loading) {\n    return null;\n  }\n\n  if (jobsView === JobsView.CreateForm && !executionEnvironments?.auto_detected_config) {\n    return null;\n  }\n\n  return (\n    <ThemeProvider theme={getJupyterLabTheme()}>\n      <StyledEngineProvider injectFirst>\n        <CreateNotebookJobForm\n          executionEnvironments={executionEnvironments}\n          requestClient={requestClient}\n          contentsManager={contentsManager}\n          jobsView={jobsView as any}\n          errors={errors}\n          handleErrorsChange={handleErrorsChange}\n          {...rest}\n        />\n      </StyledEngineProvider>\n    </ThemeProvider>\n  );\n};\n\nexport { CreateNotebookJob };\n"]}