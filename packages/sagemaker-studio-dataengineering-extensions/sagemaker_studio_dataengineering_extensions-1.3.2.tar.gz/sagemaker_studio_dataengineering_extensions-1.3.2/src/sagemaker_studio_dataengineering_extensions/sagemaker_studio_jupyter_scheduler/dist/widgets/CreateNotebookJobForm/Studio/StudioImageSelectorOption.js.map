{"version":3,"file":"StudioImageSelectorOption.js","sourceRoot":"","sources":["../../../../src/widgets/CreateNotebookJobForm/Studio/StudioImageSelectorOption.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AAE5D,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EACL,0BAA0B,EAC1B,uBAAuB,EACvB,wBAAwB,EACxB,uBAAuB,EACvB,uBAAuB,GACxB,MAAM,gBAAgB,CAAC;AAExB,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,MAAoB,EAAE,KAA4B,EAAE,QAAkB,EAAE,EAAE;IAClH,OAAO,CACL,8BAAM,SAAS,EAAE,uBAAuB;QACtC,6BAAK,SAAS,EAAE,wBAAwB,mBAAiB,QAAQ;YAC/D,+BAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAK,CACjC;QACL,uBAAuB,CAAC,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAC/E,CACR,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,CAAC,WAAmB,EAAkC,EAAE;IACtF,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,YAAY,GAAG,kCAAkC,CAAC;IACxD,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC9C,IAAI,KAAK,EAAE;QACT,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC5B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SAC9C;KACF;IAED,MAAM,kBAAkB,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC;IAE9C,OAAO,CACL,6BAAK,SAAS,EAAE,0BAA0B;QACxC,8BAAM,SAAS,EAAE,uBAAuB,IAAG,kBAAkB,CAAQ;QACpE,KAAK;YACJ,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAClB,oBAAC,IAAI,IAAC,SAAS,EAAE,uBAAuB,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,QAAQ,IACzF,WAAW,CAAC,cAAc,CAAC,mBAAmB,CAAC,QAAQ,CACnD,CACR,CAAC,CACA,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React from 'react';\nimport { Link, LinkTarget } from '../../../components/link';\nimport { DropdownItem } from '../../../components/selectinput';\nimport { i18nStrings } from '../../../constants';\nimport {\n  imageDropdownDescContainer,\n  imageDropdownOptionDesc,\n  imageDropdownOptionLabel,\n  imageDropdownOptionLink,\n  imageDropdownOptionSpan,\n} from './studioStyles';\n\nexport const StudioImageSelectorOption = (option: DropdownItem, label?: string | JSX.Element, selected?: boolean) => {\n  return (\n    <span className={imageDropdownOptionSpan}>\n      <div className={imageDropdownOptionLabel} data-selected={selected}>\n        <p>{label ? label : option.label}</p>\n      </div>\n      {renderLinkInDescription(option.optionMetadata && option.optionMetadata.description)}\n    </span>\n  );\n};\n\nconst renderLinkInDescription = (description: string): React.ReactElement | undefined => {\n  if (!description) {\n    return undefined;\n  }\n  const linkRegexExp = /(((https?:\\/\\/)|(www\\.))[^\\s]+)/g;\n  const links = description.match(linkRegexExp);\n  if (links) {\n    console.log('links', links);\n    for (const link of links) {\n      description = description.replace(link, ' ');\n    }\n  }\n\n  const trimmedDescription = description.trim();\n\n  return (\n    <div className={imageDropdownDescContainer}>\n      <span className={imageDropdownOptionDesc}>{trimmedDescription}</span>\n      {links &&\n        links.map((link) => (\n          <Link className={imageDropdownOptionLink} key={link} href={link} target={LinkTarget.External}>\n            {i18nStrings.KernelSelector.imageSelectorOption.linkText}\n          </Link>\n        ))}\n    </div>\n  );\n};\n"]}