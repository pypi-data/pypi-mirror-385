{"version":3,"file":"studioHelpers.js","sourceRoot":"","sources":["../../../../src/widgets/CreateNotebookJobForm/Studio/studioHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISessionContext, SessionContext } from '@jupyterlab/apputils';\nimport { JobsView } from '@jupyterlab/scheduler';\nimport { ContentsManager, KernelSpec, Session } from '@jupyterlab/services';\nimport { retro, toArray } from '@lumino/algorithm';\nimport { JSONObject } from '@lumino/coreutils';\nimport isString from 'lodash/isString';\nimport { DropdownItem } from '../../../components/selectinput';\nimport { KERNELSPEC_NAME_SEPARATOR } from '../../../constants';\nimport { parseSpecName } from '../../../utils';\nimport { RuntimeEnvParams } from '../initialValueHelpers';\n\nconst constructArnName = (env: string, kernel: string, version: string | null) => {\n  const scrubbedVersion = version ? `/${version}` : '';\n\n  return `${kernel}${KERNELSPEC_NAME_SEPARATOR}${env}${scrubbedVersion}`;\n};\n\nconst AXIS_IMAGE_NAME = 'Geospatial';\n\nconst EMR_COMPATIBLE_IMAGES_LIST = [\n  'datascience-1.0',\n  'sagemaker-data-science-38',\n  '1.8.1-cpu-py36',\n  'pytorch-1.8-gpu-py36',\n  'sagemaker-sparkmagic',\n  'tensorflow-2.6-cpu-py38-ubuntu20.04-v1',\n  'tensorflow-2.6-gpu-py38-cu112-ubuntu20.04-v1',\n  'sagemaker-sparkanalytics-v1',\n];\n\nenum ImageGroup {\n  Custom = 'customImage',\n  Sagemaker = 'smeImage',\n  Session = 'session',\n}\n\ninterface ImageMapValue {\n  kernelOptions: DropdownItem[];\n  versionOptions: DropdownItem[];\n  arnEnvironment: string;\n  label: string;\n  group: ImageGroup;\n  description?: string;\n}\n\nconst createImageMap = (options: SessionContext.IKernelSearch) => {\n  const { specs, sessions } = options;\n  const imageMap: { [key: string]: ImageMapValue } = {};\n\n  const kernelspecs = specs ? specs.kernelspecs : {};\n\n  Object.values(kernelspecs).forEach((spec) => {\n    if (!spec) {\n      return;\n    }\n\n    const smeMetadata = spec.metadata ? (spec.metadata.sme_metadata as JSONObject) : null;\n\n    const { imageName, kernelName } = parseSpecDisplayName(spec.display_name);\n    const { kernel, arnEnvironment, version } = parseSpecName(spec.name);\n\n    // If parsing failed, something is wrong, so skip. Only version can be null after parsing.\n    if (!kernel || !arnEnvironment || !imageName || !kernelName) {\n      return;\n    }\n\n    const specMetaData: ImageMapValue = {\n      arnEnvironment,\n      kernelOptions: [{ label: kernelName, value: kernel }],\n      versionOptions: version ? [{ label: `v${version}`, value: version }] : undefined,\n      label: imageName,\n      description: smeMetadata?.description ? (smeMetadata.description as string) : undefined,\n      group: smeMetadata && smeMetadata.is_template ? ImageGroup.Sagemaker : ImageGroup.Custom,\n    } as ImageMapValue;\n\n    if (!imageMap[arnEnvironment]) {\n      imageMap[arnEnvironment] = specMetaData;\n    } else {\n      const { kernelOptions } = imageMap[arnEnvironment];\n      if (!kernelOptions.some((opt) => opt.value === kernel)) {\n        const newKernelOptions = [...kernelOptions, { label: kernelName, value: kernel } as DropdownItem];\n        imageMap[arnEnvironment].kernelOptions = newKernelOptions;\n      }\n\n      if (version) {\n        const { versionOptions } = imageMap[arnEnvironment];\n        if (!versionOptions.some((opt) => opt.value === version)) {\n          const optionToAdd = {\n            label: `v${version}`,\n            value: version.toString(),\n          };\n          const newVersionOptions = Array.isArray(versionOptions) ? [...versionOptions, optionToAdd] : [optionToAdd];\n          imageMap[arnEnvironment].versionOptions = newVersionOptions;\n        }\n      }\n    }\n  });\n\n  const sessionData = retro(sessions as unknown as ArrayLike<Session.IModel>);\n  const sessionList = toArray(sessionData);\n\n  // Loop over all sessions, so that we can populate the \"Image from other session\" selection\n  // We need to loop everytime in case more notebooks have been opened that we'd like to add to this list\n  sessionList.forEach((sess) => {\n    if (!sess?.name || !sess.kernel?.name) {\n      return;\n    }\n\n    const sessionLabel = sess.name;\n    const { kernel, arnEnvironment, version } = parseSpecName(sess.kernel.name);\n\n    // If parsing failed, something is wrong or this session isn't relevant, so skip. Only version can be null after parsing.\n    if (!kernel || !arnEnvironment) {\n      return;\n    }\n\n    const environmentName = version ? `${arnEnvironment}/${version}` : arnEnvironment;\n\n    let kernelOptions: DropdownItem[] = [];\n    if (imageMap && imageMap[arnEnvironment]?.kernelOptions) {\n      const options = imageMap[arnEnvironment].kernelOptions?.find((o) => o.value === kernel);\n      kernelOptions = options ? [options] : [];\n    }\n\n    const sessionMetaData: ImageMapValue = {\n      arnEnvironment: environmentName,\n      kernelOptions: kernelOptions,\n      label: sessionLabel,\n      group: ImageGroup.Session,\n      versionOptions: [],\n    };\n\n    imageMap[sessionLabel] = sessionMetaData;\n  });\n\n  return imageMap;\n};\n\nexport async function getPreSelectedNotebookKernelSpec(filePath: string,\n  contentsManager: ContentsManager): Promise<string> {\n  if (filePath.endsWith('.ipynb')) {\n    try {\n      const notebookContent = await contentsManager.get(filePath);\n      return notebookContent.content.metadata.kernelspec.name;\n    } catch (e) {\n      return '';\n    }\n  }\n  return '';\n};\n\ninterface ParsedSpecDisplayName {\n  imageName: string | null;\n  kernelName: string | null;\n}\n\nfunction parseSpecDisplayName(displayName: string | undefined): ParsedSpecDisplayName {\n  try {\n    if (!isString(displayName) || displayName.length === 0) {\n      return { imageName: null, kernelName: null };\n    }\n\n    const [kernelPart, imagePart] = displayName.split('(');\n    const imageName = imagePart && imagePart.slice(0, -1).split('/')[0];\n    const kernelName = kernelPart && kernelPart.slice(0, -1);\n\n    return { imageName, kernelName };\n  } catch (e) {\n    // TODO @mgoguen add logging here if / when possible\n    return { imageName: null, kernelName: null };\n  }\n}\n\nconst OPTION_GROUP_LABELS: { [key: string]: string } = {\n  smeImage: 'Sagemaker Image',\n  customImage: 'Custom Image',\n  prefered: 'Use image from preferred session',\n  session: 'Use image from other session',\n};\n\nfunction getImageOptionsFromMap(\n  imageMap: { [key: string]: ImageMapValue },\n  group: ImageGroup,\n  isFromCluster?: boolean,\n): DropdownItem {\n  const filteredImages = Object.values(imageMap).filter((img) => {\n    const env = img.arnEnvironment.split('/')[1];\n    // If notebook is open from a cluster, only show EMR compatible images\n    if (isFromCluster) {\n      return img?.group === group && EMR_COMPATIBLE_IMAGES_LIST.includes(env);\n    }\n\n    // filter out axis image\n    if (img?.group === ImageGroup.Sagemaker && img.label.includes(AXIS_IMAGE_NAME)) {\n      return false;\n    }\n\n    // Show the image if the group matches\n    return img?.group === group;\n  });\n\n  return {\n    label: OPTION_GROUP_LABELS[group],\n    value: '',\n    options: filteredImages.map((img) => ({\n      label: img.label,\n      value: group === ImageGroup.Session ? img.label : img.arnEnvironment,\n      group: OPTION_GROUP_LABELS[group],\n      optionMetadata: img,\n      options: img.versionOptions,\n    })),\n  };\n}\n\nfunction getSessionOptionsFromMap(\n  imageMap: { [key: string]: ImageMapValue },\n  prefered: ISessionContext.IKernelPreference,\n): DropdownItem[] {\n  if (!imageMap) {\n    return [];\n  }\n\n  const filteredSessions = Object.values(imageMap).filter((img) => img?.group === ImageGroup.Session);\n\n  let preferedSession: ImageMapValue | undefined;\n  if (prefered?.name?.includes(KERNELSPEC_NAME_SEPARATOR)) {\n    const { kernel, arnEnvironment, version } = parseSpecName(prefered.name);\n    if (kernel && arnEnvironment) {\n      const environmentName = version ? `${arnEnvironment}/${version}` : arnEnvironment;\n      preferedSession = filteredSessions.find(\n        (sess) => sess.arnEnvironment === environmentName && sess.kernelOptions?.some((s) => s.value === kernel),\n      );\n    }\n  }\n\n  const preferedOption = preferedSession\n    ? [\n      {\n        label: preferedSession.label,\n        value: preferedSession.label,\n        optionMetadata: preferedSession,\n        options: preferedSession.versionOptions,\n      },\n    ]\n    : [];\n\n  return [\n    { label: OPTION_GROUP_LABELS.prefered, value: '', options: preferedOption },\n    {\n      label: OPTION_GROUP_LABELS.session,\n      value: '',\n      options: filteredSessions.map((sess) => ({\n        label: sess.label,\n        value: sess.label,\n        optionMetadata: sess,\n        options: sess.versionOptions,\n      })),\n    },\n  ];\n}\n\nexport const getInitialImageValueForStudio = (\n  runtimeEnvironmentParameters: RuntimeEnvParams,\n  preSelectedKernelFromNotebook: string | undefined,\n  view: JobsView\n) => {\n  if (view === JobsView.JobDetail || view === JobsView.JobDefinitionDetail) {\n    if (runtimeEnvironmentParameters) {\n      const { sm_kernel, sm_image } = runtimeEnvironmentParameters;\n      const KERNEL_IMAGE_KEY = `${sm_kernel}__SAGEMAKER_INTERNAL__${sm_image}`;\n\n      return parseSpecName(KERNEL_IMAGE_KEY);\n    }\n\n    return {\n      kernel: null,\n      arnEnvironment: null,\n      version: null\n    };\n  } else if (view === JobsView.CreateForm) {\n    if (\n      runtimeEnvironmentParameters &&\n      'sm_image' in runtimeEnvironmentParameters\n    ) {\n      const { sm_kernel, sm_image } = runtimeEnvironmentParameters;\n      const KERNEL_IMAGE_KEY = `${sm_kernel}__SAGEMAKER_INTERNAL__${sm_image}`;\n      return parseSpecName(KERNEL_IMAGE_KEY);\n    }\n\n    return (\n      parseSpecName(preSelectedKernelFromNotebook) || {\n        kernel: null,\n        arnEnvironment: null,\n        version: null\n      }\n    );\n  }\n\n  return (\n    parseSpecName(preSelectedKernelFromNotebook) || {\n      kernel: null,\n      arnEnvironment: null,\n      version: null\n    }\n  );\n};\n\n\nexport function getImagesFromMap(options: KernelSpec.ISpecModels): Record<string, ImageMapValue> {\n  const imageMap: { [key: string]: ImageMapValue } = {};\n  const specs = options.kernelspecs;\n\n  Object.values(specs).forEach((spec: any) => {\n    if (!spec) {\n      return;\n    }\n\n    const smeMetadata = spec.spec?.metadata\n      ? (spec.spec.metadata.sme_metadata as JSONObject)\n      : null;\n\n    const { imageName, kernelName } = parseSpecDisplayName(\n      spec.spec.display_name\n    );\n    const { kernel, arnEnvironment, version } = parseSpecName(spec.name);\n\n    // If parsing failed, something is wrong, so skip. Only version can be null after parsing.\n    if (!kernel || !arnEnvironment || !imageName || !kernelName) {\n      return;\n    }\n\n    const imageLabel = version ? `${imageName} v${version}` : imageName;\n\n    const specMetaData: ImageMapValue = {\n      arnEnvironment,\n      kernelOptions: [{ label: kernelName, value: kernel }],\n      versionOptions: version\n        ? [{ label: `v${version}`, value: version }]\n        : undefined,\n      label: imageLabel,\n      description: smeMetadata?.description\n        ? (smeMetadata.description as string)\n        : undefined,\n      group: smeMetadata && smeMetadata.is_template ? ImageGroup.Sagemaker : ImageGroup.Custom,\n    } as ImageMapValue;\n\n    if (!imageMap[arnEnvironment]) {\n      imageMap[arnEnvironment] = specMetaData;\n    } else {\n      const { kernelOptions } = imageMap[arnEnvironment];\n      if (!kernelOptions.some(opt => opt.value === kernel)) {\n        const newKernelOptions = [\n          ...kernelOptions,\n          { label: kernelName, value: kernel } as DropdownItem\n        ];\n        imageMap[arnEnvironment].kernelOptions = newKernelOptions;\n      }\n\n      if (version) {\n        const { versionOptions } = imageMap[arnEnvironment];\n        if (!versionOptions.some(opt => opt.value === version)) {\n          const optionToAdd = {\n            label: `v${version}`,\n            value: version.toString()\n          };\n\n          const newVersionOptions = Array.isArray(versionOptions)\n            ? [...versionOptions, optionToAdd]\n            : [optionToAdd];\n\n          imageMap[arnEnvironment].versionOptions = newVersionOptions;\n        }\n      }\n    }\n  });\n\n  return imageMap;\n}\n\nexport {\n  constructArnName,\n  createImageMap,\n  parseSpecName,\n  parseSpecDisplayName,\n  getImageOptionsFromMap,\n  getSessionOptionsFromMap,\n  ImageGroup,\n  ImageMapValue,\n};\n"]}