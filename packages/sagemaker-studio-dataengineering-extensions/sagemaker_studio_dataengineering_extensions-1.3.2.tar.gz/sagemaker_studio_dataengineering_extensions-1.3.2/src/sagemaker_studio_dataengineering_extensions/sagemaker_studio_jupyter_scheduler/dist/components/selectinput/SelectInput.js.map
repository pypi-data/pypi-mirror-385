{"version":3,"file":"SelectInput.js","sourceRoot":"","sources":["../../../src/components/selectinput/SelectInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,eAAe,MAAM,4BAA4B,CAAC;AACzD,OAAO,SAAS,MAAM,yBAAyB,CAAC;AAGhD,MAAM,WAAW,GAA8C,CAAC,EAC9D,KAAK,EACL,KAAK,EACL,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,oBAAoB,EACpB,WAAW,EACX,GAAG,KAAK,EACS,EAAE,EAAE;;IACrB,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IACvF,IAAI,eAAe,GAAG,KAAK,CAAC;IAC5B,IAAI,CAAC,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAI,UAAU,EAAE;QACjE,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;KACrC;IACD,OAAO,CACL;QACE,oBAAC,eAAe,OACV,KAAK,EACT,EAAE,EAAE,GAAG,KAAK,cAAc,EAC1B,YAAY,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CACvC,+BAAQ,KAAK,IAAG,oBAAoB,CAAC,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAM,CAC1H,EACD,eAAe,EAAE;gBACf,GAAG,KAAK,CAAC,eAAe;gBACxB,cAAc,EAAE;oBACd,GAAG,MAAA,KAAK,CAAC,eAAe,0CAAE,cAAc;oBACxC,IAAI,EAAE,OAAO;iBACd;aACF,EACD,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;gBAC7B,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,IAAI,QAAQ,EAAE;oBACvD,QAAQ,IAAI,QAAQ,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;iBACnC;YACH,CAAC,EACD,KAAK,EAAE,eAAe,EACtB,WAAW,EACT,WAAW,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,oBAAC,SAAS,OAAK,MAAM,EAAE,OAAO,EAAC,UAAU,EAAC,IAAI,EAAC,OAAO,EAAC,MAAM,EAAC,OAAO,GAAG,CAAC,GAEvG,CACD,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import React from 'react';\nimport MuiAutocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { DropdownItem, SelectInputProps } from './types';\n\nconst SelectInput: React.FunctionComponent<SelectInputProps> = ({\n  label,\n  value,\n  options,\n  onChange,\n  freeSolo,\n  customListItemRender,\n  renderInput,\n  ...props\n}: SelectInputProps) => {\n  const optionsMap = Object.fromEntries(options.map((option) => [option.value, option]));\n  let normalizedValue = value;\n  if (!freeSolo && typeof value === 'string' && value in optionsMap) {\n    normalizedValue = optionsMap[value];\n  }\n  return (\n    <>\n      <MuiAutocomplete<DropdownItem, false, boolean, boolean>\n        {...props}\n        id={`${label}-selectinput`}\n        renderOption={(props, options, state) => (\n          <li {...props}>{customListItemRender ? customListItemRender(options, options.label, state.selected) : options.label}</li>\n        )}\n        componentsProps={{\n          ...props.componentsProps,\n          popupIndicator: {\n            ...props.componentsProps?.popupIndicator,\n            size: 'small',\n          },\n        }}\n        options={options}\n        onChange={(_, value, reason) => {\n          if ((value && !(typeof value === 'string')) || freeSolo) {\n            onChange && onChange(value || '');\n          }\n        }}\n        value={normalizedValue}\n        renderInput={\n          renderInput || ((params) => <TextField {...params} variant=\"outlined\" size=\"small\" margin=\"dense\" />)\n        }\n      />\n    </>\n  );\n};\n\nexport { SelectInput };\n"]}