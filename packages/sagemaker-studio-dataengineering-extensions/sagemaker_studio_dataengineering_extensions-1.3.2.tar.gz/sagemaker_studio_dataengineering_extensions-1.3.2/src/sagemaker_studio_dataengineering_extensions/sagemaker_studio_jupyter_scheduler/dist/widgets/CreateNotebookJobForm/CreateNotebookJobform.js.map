{"version":3,"file":"CreateNotebookJobform.js","sourceRoot":"","sources":["../../../src/widgets/CreateNotebookJobForm/CreateNotebookJobform.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { JobsView, Scheduler } from '@jupyterlab/scheduler';\nimport { AppNetworkAccessType } from '../../types';\nimport { IEnvironmentVariable } from './AdvancedOptions/EnvironmentVariables';\nimport AdvancedOptions from './AdvancedOptions/AdvancedOptions';\nimport { getAdditionalOptionsContainerStyles } from './styles';\nimport {\n  getInitialEnvironmentVariables,\n  getInitialInitScriptValue,\n  getInitialLCCValue,\n  getInitialRoleArnValues,\n  getInitialS3Values,\n  getInitialSubnetOrSecurityGroupValues,\n  getNetworkAccessType,\n  ISubnetSecurityGroupValues,\n  getInitialKMSKeys,\n  getAdvancedOptionsFromSettingRegistry,\n  NO_SCRIPT,\n  getInitialKeyValue,\n  getInitialKeyValueAsBoolean,\n} from './initialValueHelpers';\nimport * as validationHelpers from './AdvancedOptions/validationHelpers';\nimport { ContentsManager, ServerConnection } from '@jupyterlab/services';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { JobEnvironmentContainer } from './JobEnvironment/JobEnvironmentContainer';\nimport { IAutoDetectedConfig } from './JobEnvironment';\n\ninterface FormState {\n  sm_lcc_init_script_arn: string;\n  sm_init_script: string;\n  role_arn: string;\n  vpc_security_group_ids: string[];\n  vpc_subnets: string[];\n  sm_kernel: string;\n  sm_image: string;\n  s3_input: string;\n  s3_input_account_id: string;\n  s3_output: string;\n  s3_output_account_id: string;\n  sm_output_kms_key: string;\n  sm_volume_kms_key: string;\n  max_retry_attempts: number;\n  max_run_time_in_seconds: number;\n  enable_network_isolation: boolean;\n}\n\nexport type CreateNotebookJobFormProps = Scheduler.IAdvancedOptionsProps & {\n  requestClient: ServerConnection.ISettings;\n  settingRegistry: ISettingRegistry;\n  executionEnvironments: {\n    environment_configs: IAutoDetectedConfig[] | null;\n    auto_detected_config: IAutoDetectedConfig[];\n  };\n  contentsManager: ContentsManager;\n};\n\nconst CreateNotebookJobForm: React.FunctionComponent<CreateNotebookJobFormProps> = (props) => {\n  const {\n    executionEnvironments,\n    settingRegistry,\n    jobsView,\n    requestClient,\n    errors: formErrors,\n    handleErrorsChange: setFormErrors,\n    model,\n    handleModelChange,\n  } = props;\n  const networkAccessType = useMemo(() => {\n    return getNetworkAccessType(executionEnvironments?.auto_detected_config, jobsView);\n  }, []);\n\n  const areFieldsDisabled = jobsView === JobsView.JobDefinitionDetail || jobsView === JobsView.JobDetail;\n\n  const initialLccValues = useMemo(() => {\n    const ALL_LCC_OPTIONS: string[] = [];\n\n    const PRE_DEFINED_LCC_OPTIONS =\n      (executionEnvironments.auto_detected_config?.find(\n        c => c.name === 'lcc_arn'\n      )?.value as string[]) || [];\n\n    ALL_LCC_OPTIONS.push(NO_SCRIPT);\n    ALL_LCC_OPTIONS.push(...PRE_DEFINED_LCC_OPTIONS);\n\n    const selectedLccValue = getInitialLCCValue(\n      model.runtimeEnvironmentParameters,\n      jobsView\n    );\n\n    if (model.runtimeEnvironmentParameters && selectedLccValue !== NO_SCRIPT) {\n      ALL_LCC_OPTIONS.push(selectedLccValue);\n    }\n\n    return {\n      allLCCOptions: ALL_LCC_OPTIONS,\n      selectedLccValue\n    };\n  }, []);\n\n  const initialRoleArnValue = useMemo(() => {\n    return getInitialRoleArnValues(\n      model.runtimeEnvironmentParameters,\n      executionEnvironments.auto_detected_config,\n      jobsView,\n    );\n  }, []);\n\n  const initialS3OutputValue = useMemo(() => {\n    return getInitialS3Values(\n      model.runtimeEnvironmentParameters,\n      executionEnvironments.auto_detected_config,\n      jobsView,\n      's3_output',\n    );\n  }, []);\n\n  const initialS3InputValue = useMemo(() => {\n    return getInitialS3Values(\n      model.runtimeEnvironmentParameters,\n      executionEnvironments.auto_detected_config,\n      jobsView,\n      's3_input',\n    );\n  }, []);\n\n  const initialMaxRetryAttemtpsValue = useMemo(() => {\n    return getInitialKeyValue(\n      model.runtimeEnvironmentParameters,\n      jobsView,\n      1,\n      'max_retry_attempts',\n    );\n  }, []);\n\n  // get initial value from runtime environment\n  const initialNetworkIsolationValue = useMemo(() => {\n    return getInitialKeyValueAsBoolean(\n      model.runtimeEnvironmentParameters,\n      jobsView,\n      'enable_network_isolation'\n    )\n  }, []);\n\n  const initialMaxRunTimeInSecondsValue = useMemo(() => {\n    return getInitialKeyValue(\n      model.runtimeEnvironmentParameters,\n      jobsView,\n      172800,\n      'max_run_time_in_seconds',\n    );\n  }, []);\n\n  const securityGroupOptions = useMemo(() => {\n    const ALL_SECURITY_GROUPS =\n      (executionEnvironments.auto_detected_config?.find((c) => c.name === 'vpc_security_group_ids')\n        ?.value as ISubnetSecurityGroupValues) || [];\n\n    return ALL_SECURITY_GROUPS?.map((item: { name: any }) => item.name);\n  }, []);\n\n  const subnetOptions = useMemo(() => {\n    const ALL_SUBNETS =\n      (executionEnvironments.auto_detected_config?.find((c) => c.name === 'vpc_subnets')\n        ?.value as ISubnetSecurityGroupValues) || [];\n    return ALL_SUBNETS?.map((item: { name: any }) => item.name);\n  }, []);\n\n  const initialSecurityGroupAndSubnetValues = useMemo(() => {\n    if (networkAccessType === AppNetworkAccessType.PublicInternetOnly) {\n      return {\n        securityGroups: [],\n        subnets: [],\n      };\n    }\n\n    // if no private subnets then users can't create a job with a VPC, so switch to empty list for security groups\n    const securityGroups =\n      subnetOptions.length === 0 && jobsView === JobsView.CreateForm\n        ? []\n        : getInitialSubnetOrSecurityGroupValues(\n          model.runtimeEnvironmentParameters,\n          executionEnvironments.auto_detected_config,\n          jobsView,\n          'vpc_security_group_ids',\n        );\n\n    const subnets = getInitialSubnetOrSecurityGroupValues(\n      model.runtimeEnvironmentParameters,\n      executionEnvironments.auto_detected_config,\n      jobsView,\n      'vpc_subnets',\n    );\n\n    return { securityGroups, subnets };\n  }, []);\n\n  const initialInitScriptValue = useMemo(() => {\n    return getInitialInitScriptValue(model.runtimeEnvironmentParameters, jobsView);\n  }, []);\n\n  const initialEnvironmentVariables = useMemo(() => {\n    return getInitialEnvironmentVariables(model.runtimeEnvironmentParameters);\n  }, []);\n\n  const initialOutputKMSKey = useMemo(() => {\n    return getInitialKMSKeys(model.runtimeEnvironmentParameters, jobsView, 'sm_output_kms_key');\n  }, []);\n\n  const initialVolumeKMSKey = useMemo(() => {\n    return getInitialKMSKeys(model.runtimeEnvironmentParameters, jobsView, 'sm_volume_kms_key');\n  }, []);\n\n  const initialCheckedState = useMemo(() => {\n    return false;\n  }, []);\n\n  // user default values object is the combination of the auto detected configs and the user default advanced options\n  const [userDefaultValues, setUserDefaultValues] = useState<FormState>({\n    sm_lcc_init_script_arn: initialLccValues.selectedLccValue || '',\n    role_arn: initialRoleArnValue || '',\n    vpc_security_group_ids: initialSecurityGroupAndSubnetValues.securityGroups || [],\n    vpc_subnets: initialSecurityGroupAndSubnetValues.subnets || [],\n    s3_input: initialS3InputValue || '',\n    s3_input_account_id: '',\n    s3_output: initialS3OutputValue || '',\n    s3_output_account_id: '',\n    sm_kernel: '',\n    sm_image: '',\n    sm_init_script: initialInitScriptValue || '',\n    sm_output_kms_key: initialOutputKMSKey || '',\n    sm_volume_kms_key: initialVolumeKMSKey || '',\n    max_retry_attempts: initialMaxRetryAttemtpsValue,\n    max_run_time_in_seconds: initialMaxRunTimeInSecondsValue,\n    enable_network_isolation: initialNetworkIsolationValue,\n  });\n\n  // initially output and volume kms keys should be empty even if we have the initial values coming from the user defaults,\n  // because initially the kms encryption is disabled. When the kms encryption gets enabled the user default values will get picked up.\n  const [formState, setFormState] = useState<FormState>({\n    ...userDefaultValues,\n    sm_output_kms_key: '',\n    sm_volume_kms_key: '',\n  });\n\n  // validate initial form values to be safe\n  useEffect(() => {\n    const initialSubnetOptionsError = validationHelpers.validateSubnetOptions(subnetOptions);\n\n    const initialNoCompatibleSubnetsError = validationHelpers.validateInitialSubnets(\n      initialSecurityGroupAndSubnetValues.subnets,\n    );\n\n    const newFormErrors = {\n      ...formErrors,\n      roleError: validationHelpers.validateRoleArn(initialRoleArnValue),\n      s3InputFolderError: validationHelpers.validateS3Url(initialS3InputValue),\n      s3OutputFolderError: validationHelpers.validateS3Url(initialS3OutputValue),\n      environmentsStillLoading: '',\n      kernelsStillLoading: '',\n      subnetError: initialCheckedState ? initialSubnetOptionsError || initialNoCompatibleSubnetsError || '' : '',\n    }\n\n    setFormErrors(newFormErrors);\n  }, []);\n\n  const [userDefaultAdvancedOptions, setUserDefaultAdvancedOptions] = useState<Partial<FormState>>();\n\n  useEffect(() => {\n    getAdvancedOptionsFromSettingRegistry(settingRegistry).then((advancedOptions) => {\n      setUserDefaultAdvancedOptions(advancedOptions);\n    });\n  }, []);\n\n  useEffect(() => {\n    let newFormState = {};\n    let newFormErrors = {};\n    let newUserDefaults = {};\n\n    // we want to use the value from user settings always\n    const enableNetworkIsolation = userDefaultAdvancedOptions?.enable_network_isolation ?? false;\n    newFormState = { ...newFormState, enable_network_isolation: enableNetworkIsolation };\n\n    const roleArn = userDefaultAdvancedOptions?.role_arn ?? '';\n    if (roleArn && roleArn !== initialRoleArnValue) {\n      newFormState = { ...newFormState, role_arn: roleArn };\n      newFormErrors = {\n        ...newFormErrors,\n        roleError: validationHelpers.validateRoleArn(roleArn),\n      };\n    }\n\n    const s3Input = userDefaultAdvancedOptions?.s3_input ?? '';\n    if (s3Input && s3Input !== initialS3InputValue) {\n      newFormState = { ...newFormState, s3_input: s3Input };\n      newFormErrors = {\n        ...newFormErrors,\n        s3InputFolderError: validationHelpers.validateS3Url(s3Input),\n      };\n    }\n\n    const s3Output = userDefaultAdvancedOptions?.s3_output ?? '';\n    if (s3Output && s3Output !== initialS3OutputValue) {\n      newFormState = { ...newFormState, s3_output: s3Output };\n      newFormErrors = {\n        ...newFormErrors,\n        s3OutputFolderError: validationHelpers.validateS3Url(s3Output),\n      };\n    }\n\n    const outputKMSKey = userDefaultAdvancedOptions?.sm_output_kms_key ?? '';\n    if (outputKMSKey && outputKMSKey !== initialOutputKMSKey) {\n      // only update the user default values, the kms key value will get picked up\n      // from the user default values object whenever the user enables the kms key encryption\n      newUserDefaults = { ...newUserDefaults, sm_output_kms_key: outputKMSKey };\n    }\n\n    const volumeKMSKey = userDefaultAdvancedOptions?.sm_volume_kms_key ?? '';\n    if (volumeKMSKey && volumeKMSKey !== initialVolumeKMSKey) {\n      // only update the user default values, the kms key value will get picked up\n      // from the user default values object whenever the user enables the kms key encryption\n      newUserDefaults = { ...newUserDefaults, sm_volume_kms_key: volumeKMSKey };\n    }\n\n    newUserDefaults = { ...newFormState, ...newUserDefaults };\n\n    // we don't need the defaults if on the detail page\n    if (Object.keys(newFormState).length > 0 && !areFieldsDisabled) {\n      setFormState({ ...formState, ...newFormState });\n    }\n    if (Object.keys(newUserDefaults).length > 0) {\n      // update the user default values object which contains the auto detected configs with\n      // the values coming from the user default advanced options\n      setUserDefaultValues({ ...userDefaultValues, ...newUserDefaults });\n    }\n    if (Object.keys(newFormErrors).length > 0) {\n      setFormErrors({ ...formErrors, ...newFormErrors });\n    }\n  }, [userDefaultAdvancedOptions]);\n\n  const [environmentVariables, setEnvironmentVariables] = useState<IEnvironmentVariable[]>(initialEnvironmentVariables);\n\n  const [enableVPCSetting, setEnableVPCSetting] = useState(initialCheckedState);\n\n  const environmentVariablesAsMap = useMemo(() => {\n    const map: { [key: string]: string } = {};\n    environmentVariables?.map((environmentVariable) => {\n      const { key, value } = environmentVariable;\n\n      // if key and value are empty, do not add to the map\n      // TODO: modify this code to handle non string values as well\n      if (key.trim().length !== 0 && value.trim().length !== 0) {\n        map[key] = value;\n      }\n    });\n\n    return map;\n  }, [environmentVariables]);\n\n  useEffect(() => {\n    const commaSeparatedVpcGroupIds = formState.vpc_security_group_ids?.join(',') || '';\n    const commaSeparatedVpcSubnets = formState.vpc_subnets?.join(',') || '';\n\n    handleModelChange({\n      ...(model as any),\n      runtimeEnvironmentParameters: {\n        ...formState,\n        vpc_security_group_ids: commaSeparatedVpcGroupIds,\n        vpc_subnets: commaSeparatedVpcSubnets,\n        ...environmentVariablesAsMap,\n      },\n    });\n  }, [formState, environmentVariablesAsMap]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleNumberValueChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const name = e.target.name;\n    const value = parseInt(e.target.value);\n    setFormState({ ...formState, [name]: isNaN(value) ? '' : value });\n  };\n\n  const onSelectLCCScript = (startupScript: string) => {\n    setFormState({\n      ...formState,\n      sm_lcc_init_script_arn: startupScript\n    });\n  };\n\n  const setSecurityGroups = (securityGroups: string[]) => {\n    setFormState({\n      ...formState,\n      vpc_security_group_ids: securityGroups,\n    });\n  };\n\n  const setRoleArn = (roleArn: string) => {\n    setFormState({ ...formState, role_arn: roleArn });\n  };\n\n  const setSubnets = (subnets: string[]) => {\n    console.log('setSubnets called with:', subnets);\n    setFormState({ ...formState, vpc_subnets: subnets });\n  };\n\n  return (\n    <div className={getAdditionalOptionsContainerStyles(areFieldsDisabled)}>\n      <JobEnvironmentContainer\n        isDisabled={areFieldsDisabled}\n        formState={formState}\n        setFormState={setFormState}\n        formErrors={formErrors}\n        setFormErrors={setFormErrors}\n        {...props} />\n\n      <AdvancedOptions\n        isDisabled={areFieldsDisabled}\n        formState={formState}\n        setFormState={setFormState}\n        handleChange={handleChange}\n        handleNumberValueChange={handleNumberValueChange}\n        requestClient={requestClient}\n        formErrors={formErrors}\n        setFormValidationErrors={setFormErrors}\n        environmentVariables={environmentVariables}\n        userDefaultValues={userDefaultValues}\n        setEnvironmentVariables={setEnvironmentVariables}\n        lccOptions={initialLccValues.allLCCOptions}\n        availableSecurityGroups={securityGroupOptions}\n        availableSubnets={subnetOptions}\n        initialSecurityGroups={initialSecurityGroupAndSubnetValues.securityGroups}\n        initialSubnets={initialSecurityGroupAndSubnetValues.subnets}\n        setSubnets={setSubnets}\n        setRoleArn={setRoleArn}\n        setSecurityGroups={setSecurityGroups}\n        onSelectLCCScript={onSelectLCCScript}\n        isVPCDomain={networkAccessType === AppNetworkAccessType.VpcOnly}\n        enableVPCSetting={enableVPCSetting}\n        setEnableVPCSetting={setEnableVPCSetting}\n      />\n    </div>\n  );\n};\n\nexport { CreateNotebookJobForm, FormState, IAutoDetectedConfig };\n"]}