from __future__ import annotations

from typing import TYPE_CHECKING, Annotated

from pydantic import BaseModel, ConfigDict, Field

# This file is based on autogenerated code from: https://static.ionq.co/schemas/circuit-v0.json using
# https://pydantic-docs.helpmanual.io/datamodel_code_generator/
# Run: datamodel-codegen --url https://static.ionq.co/schemas/circuit-v0.json

if TYPE_CHECKING:
    PydanticGateName = str
else:
    PydanticGateName = Annotated[
        str,
        Field(
            pattern=r"^\w+$",
            min_length=1,
        ),
    ]


class Gate(BaseModel):
    gate: PydanticGateName
    target: int | None = None
    control: int | None = None
    targets: list[int] | None = None
    controls: list[int] | None = None
    model_config = ConfigDict(extra="allow")


class IonqQuantumCircuit(BaseModel):
    qubits: int
    circuit: list[Gate]
    model_config = ConfigDict(extra="allow")

    @classmethod
    def from_string(cls, code: str) -> IonqQuantumCircuit:
        code_lines = code.split(sep="\n")
        commentless_code = "\n".join(
            line for line in code_lines if not line.startswith("//")
        )
        return cls.model_validate_json(commentless_code)
