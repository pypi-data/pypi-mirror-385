
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class AddressSpace(IntEnum):
    """Address spaces for CuTe memrefs and pointers"""

    generic = 0
    gmem = 1
    smem = 3
    rmem = 5
    tmem = 6

    def __str__(self):
        if self is AddressSpace.generic:
            return "generic"
        if self is AddressSpace.gmem:
            return "gmem"
        if self is AddressSpace.smem:
            return "smem"
        if self is AddressSpace.rmem:
            return "rmem"
        if self is AddressSpace.tmem:
            return "tmem"
        raise ValueError("Unknown AddressSpace enum entry.")



@register_attribute_builder("CuteAddressSpaceEnum")
def _cuteaddressspaceenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class BinaryOp(IntEnum):
    """Binary operation for single-bit MMA operations"""

    none = 0
    xor_popc = 1
    and_popc = 2

    def __str__(self):
        if self is BinaryOp.none:
            return "none"
        if self is BinaryOp.xor_popc:
            return "xor_popc"
        if self is BinaryOp.and_popc:
            return "and_popc"
        raise ValueError("Unknown BinaryOp enum entry.")



@register_attribute_builder("CuteArchBinaryOpEnum")
def _cutearchbinaryopenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldBulkCopyG2S(IntEnum):
    """Fields stored in Bulk Load Copy Atom type"""

    tma_bar = 1
    mcast_mask = 2

    def __str__(self):
        if self is AtomCopyFieldBulkCopyG2S.tma_bar:
            return "tma_bar"
        if self is AtomCopyFieldBulkCopyG2S.mcast_mask:
            return "mcast_mask"
        raise ValueError("Unknown AtomCopyFieldBulkCopyG2S enum entry.")



@register_attribute_builder("CuteAtomCopyFieldBulkCopyG2SEnum")
def _cuteatomcopyfieldbulkcopyg2senum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldBulkCopyS2G(IntEnum):
    """Fields stored in Bulk Store Copy Atom type"""

    byte_mask = 4

    def __str__(self):
        if self is AtomCopyFieldBulkCopyS2G.byte_mask:
            return "byte_mask"
        raise ValueError("Unknown AtomCopyFieldBulkCopyS2G enum entry.")



@register_attribute_builder("CuteAtomCopyFieldBulkCopyS2GEnum")
def _cuteatomcopyfieldbulkcopys2genum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldNonExecIm2ColTmaLoad(IntEnum):
    """Fields stored in CopyAtomNonExecIm2ColTmaLoadType"""

    im2col_tma_desc = 4

    def __str__(self):
        if self is AtomCopyFieldNonExecIm2ColTmaLoad.im2col_tma_desc:
            return "im2col_tma_desc"
        raise ValueError("Unknown AtomCopyFieldNonExecIm2ColTmaLoad enum entry.")



@register_attribute_builder("CuteAtomCopyFieldNonExecIm2ColTmaLoadEnum")
def _cuteatomcopyfieldnonexecim2coltmaloadenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldNonExecIm2ColTmaStore(IntEnum):
    """Fields stored in CopyAtomNonExecIm2ColTmaStoreType"""

    im2col_tma_desc = 4

    def __str__(self):
        if self is AtomCopyFieldNonExecIm2ColTmaStore.im2col_tma_desc:
            return "im2col_tma_desc"
        raise ValueError("Unknown AtomCopyFieldNonExecIm2ColTmaStore enum entry.")



@register_attribute_builder("CuteAtomCopyFieldNonExecIm2ColTmaStoreEnum")
def _cuteatomcopyfieldnonexecim2coltmastoreenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldNonExecTiledTmaLoad(IntEnum):
    """Fields stored in CopyAtomNonExecTiledTmaLoadType"""

    tma_desc = 3

    def __str__(self):
        if self is AtomCopyFieldNonExecTiledTmaLoad.tma_desc:
            return "tma_desc"
        raise ValueError("Unknown AtomCopyFieldNonExecTiledTmaLoad enum entry.")



@register_attribute_builder("CuteAtomCopyFieldNonExecTiledTmaLoadEnum")
def _cuteatomcopyfieldnonexectiledtmaloadenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldNonExecTiledTmaReduce(IntEnum):
    """Fields stored in CopyAtomNonExecTiledTmaReduceType"""

    tma_desc = 3

    def __str__(self):
        if self is AtomCopyFieldNonExecTiledTmaReduce.tma_desc:
            return "tma_desc"
        raise ValueError("Unknown AtomCopyFieldNonExecTiledTmaReduce enum entry.")



@register_attribute_builder("CuteAtomCopyFieldNonExecTiledTmaReduceEnum")
def _cuteatomcopyfieldnonexectiledtmareduceenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldNonExecTiledTmaStore(IntEnum):
    """Fields stored in CopyAtomNonExecTiledTmaStoreType"""

    tma_desc = 3

    def __str__(self):
        if self is AtomCopyFieldNonExecTiledTmaStore.tma_desc:
            return "tma_desc"
        raise ValueError("Unknown AtomCopyFieldNonExecTiledTmaStore enum entry.")



@register_attribute_builder("CuteAtomCopyFieldNonExecTiledTmaStoreEnum")
def _cuteatomcopyfieldnonexectiledtmastoreenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldTmaLoad(IntEnum):
    """Fields stored in Tma Load Copy Atom type"""

    tma_descriptor_ptr = 0
    tma_bar = 1
    mcast_mask = 2

    def __str__(self):
        if self is AtomCopyFieldTmaLoad.tma_descriptor_ptr:
            return "tma_descriptor_ptr"
        if self is AtomCopyFieldTmaLoad.tma_bar:
            return "tma_bar"
        if self is AtomCopyFieldTmaLoad.mcast_mask:
            return "mcast_mask"
        raise ValueError("Unknown AtomCopyFieldTmaLoad enum entry.")



@register_attribute_builder("CuteAtomCopyFieldTmaLoadEnum")
def _cuteatomcopyfieldtmaloadenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldTmaReduce(IntEnum):
    """Fields stored in Tma Reduce Copy Atom type"""

    tma_descriptor_ptr = 0

    def __str__(self):
        if self is AtomCopyFieldTmaReduce.tma_descriptor_ptr:
            return "tma_descriptor_ptr"
        raise ValueError("Unknown AtomCopyFieldTmaReduce enum entry.")



@register_attribute_builder("CuteAtomCopyFieldTmaReduceEnum")
def _cuteatomcopyfieldtmareduceenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomCopyFieldTmaStore(IntEnum):
    """Fields stored in Tma Store Copy Atom type"""

    tma_descriptor_ptr = 0

    def __str__(self):
        if self is AtomCopyFieldTmaStore.tma_descriptor_ptr:
            return "tma_descriptor_ptr"
        raise ValueError("Unknown AtomCopyFieldTmaStore enum entry.")



@register_attribute_builder("CuteAtomCopyFieldTmaStoreEnum")
def _cuteatomcopyfieldtmastoreenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomMmaFieldSM80Sparse(IntEnum):
    """Fields stored in MMA Atom types for SM80"""

    e = 0

    def __str__(self):
        if self is AtomMmaFieldSM80Sparse.e:
            return "e"
        raise ValueError("Unknown AtomMmaFieldSM80Sparse enum entry.")



@register_attribute_builder("CuteAtomMmaFieldSM80SparseEnum")
def _cuteatommmafieldsm80sparseenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomMmaFieldSM90(IntEnum):
    """Fields stored in MMA Atom types for SM90"""

    accum_c = 0

    def __str__(self):
        if self is AtomMmaFieldSM90.accum_c:
            return "accum_c"
        raise ValueError("Unknown AtomMmaFieldSM90 enum entry.")



@register_attribute_builder("CuteAtomMmaFieldSM90Enum")
def _cuteatommmafieldsm90enum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomMmaFieldSM100BlockScaled(IntEnum):
    """Fields stored in MMA Atom types for SM100 (block scaled)"""

    accum_c = 0
    neg_a = 1
    neg_b = 2
    sf_a = 3
    sf_b = 4

    def __str__(self):
        if self is AtomMmaFieldSM100BlockScaled.accum_c:
            return "accum_c"
        if self is AtomMmaFieldSM100BlockScaled.neg_a:
            return "neg_a"
        if self is AtomMmaFieldSM100BlockScaled.neg_b:
            return "neg_b"
        if self is AtomMmaFieldSM100BlockScaled.sf_a:
            return "sf_a"
        if self is AtomMmaFieldSM100BlockScaled.sf_b:
            return "sf_b"
        raise ValueError("Unknown AtomMmaFieldSM100BlockScaled enum entry.")



@register_attribute_builder("CuteAtomMmaFieldSM100BlockScaledEnum")
def _cuteatommmafieldsm100blockscaledenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomMmaFieldSM100BlockScaledSparse(IntEnum):
    """Fields stored in MMA Atom types for SM100 (block scaled)"""

    accum_c = 0
    neg_a = 1
    neg_b = 2
    sf_a = 3
    sf_b = 4
    e = 5

    def __str__(self):
        if self is AtomMmaFieldSM100BlockScaledSparse.accum_c:
            return "accum_c"
        if self is AtomMmaFieldSM100BlockScaledSparse.neg_a:
            return "neg_a"
        if self is AtomMmaFieldSM100BlockScaledSparse.neg_b:
            return "neg_b"
        if self is AtomMmaFieldSM100BlockScaledSparse.sf_a:
            return "sf_a"
        if self is AtomMmaFieldSM100BlockScaledSparse.sf_b:
            return "sf_b"
        if self is AtomMmaFieldSM100BlockScaledSparse.e:
            return "e"
        raise ValueError("Unknown AtomMmaFieldSM100BlockScaledSparse enum entry.")



@register_attribute_builder("CuteAtomMmaFieldSM100BlockScaledSparseEnum")
def _cuteatommmafieldsm100blockscaledsparseenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomMmaFieldSM100(IntEnum):
    """Fields stored in MMA Atom types for SM100"""

    accum_c = 0
    neg_a = 1
    neg_b = 2

    def __str__(self):
        if self is AtomMmaFieldSM100.accum_c:
            return "accum_c"
        if self is AtomMmaFieldSM100.neg_a:
            return "neg_a"
        if self is AtomMmaFieldSM100.neg_b:
            return "neg_b"
        raise ValueError("Unknown AtomMmaFieldSM100 enum entry.")



@register_attribute_builder("CuteAtomMmaFieldSM100Enum")
def _cuteatommmafieldsm100enum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomMmaFieldSM100Sparse(IntEnum):
    """Fields stored in sparse MMA Atom types for SM100"""

    accum_c = 0
    neg_a = 1
    neg_b = 2
    e = 5

    def __str__(self):
        if self is AtomMmaFieldSM100Sparse.accum_c:
            return "accum_c"
        if self is AtomMmaFieldSM100Sparse.neg_a:
            return "neg_a"
        if self is AtomMmaFieldSM100Sparse.neg_b:
            return "neg_b"
        if self is AtomMmaFieldSM100Sparse.e:
            return "e"
        raise ValueError("Unknown AtomMmaFieldSM100Sparse enum entry.")



@register_attribute_builder("CuteAtomMmaFieldSM100SparseEnum")
def _cuteatommmafieldsm100sparseenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class AtomMmaFieldSM120BlockScaled(IntEnum):
    """Fields stored in MMA Atom types for SM120 (block scaled)"""

    sf_a = 0
    sf_b = 1

    def __str__(self):
        if self is AtomMmaFieldSM120BlockScaled.sf_a:
            return "sf_a"
        if self is AtomMmaFieldSM120BlockScaled.sf_b:
            return "sf_b"
        raise ValueError("Unknown AtomMmaFieldSM120BlockScaled enum entry.")



@register_attribute_builder("CuteAtomMmaFieldSM120BlockScaledEnum")
def _cuteatommmafieldsm120blockscaledenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CopyOperand(IntEnum):
    """Copy operand ID"""

    src = 0
    dst = 1

    def __str__(self):
        if self is CopyOperand.src:
            return "src"
        if self is CopyOperand.dst:
            return "dst"
        raise ValueError("Unknown CopyOperand enum entry.")



@register_attribute_builder("CuteCopyOperandEnum")
def _cutecopyoperandenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CopyS2TBroadcast(IntEnum):
    """Broadcast modes for the different utccp instructions"""

    none = 0
    lw_0213 = 1
    lw_0123 = 2
    x4 = 3

    def __str__(self):
        if self is CopyS2TBroadcast.none:
            return "none"
        if self is CopyS2TBroadcast.lw_0213:
            return "lw_0213"
        if self is CopyS2TBroadcast.lw_0123:
            return "lw_0123"
        if self is CopyS2TBroadcast.x4:
            return "x4"
        raise ValueError("Unknown CopyS2TBroadcast enum entry.")



@register_attribute_builder("CuteCopyS2TBroadcastEnum")
def _cutecopys2tbroadcastenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Arch(IntEnum):
    """NVGpu arch number like sm_103"""

    sm_52 = 520
    sm_70 = 700
    sm_75 = 750
    sm_80 = 800
    sm_86 = 860
    sm_90 = 900
    sm_100 = 1000
    sm_102 = 1020
    sm_103 = 1030
    sm_107 = 1070

    def __str__(self):
        if self is Arch.sm_52:
            return "sm_52"
        if self is Arch.sm_70:
            return "sm_70"
        if self is Arch.sm_75:
            return "sm_75"
        if self is Arch.sm_80:
            return "sm_80"
        if self is Arch.sm_86:
            return "sm_86"
        if self is Arch.sm_90:
            return "sm_90"
        if self is Arch.sm_100:
            return "sm_100"
        if self is Arch.sm_102:
            return "sm_102"
        if self is Arch.sm_103:
            return "sm_103"
        if self is Arch.sm_107:
            return "sm_107"
        raise ValueError("Unknown Arch enum entry.")



@register_attribute_builder("CuteGpuArchEnum")
def _cutegpuarchenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Im2ColTmaLoadEnum(IntEnum):
    """The various kinds of TMA loads in im2col mode"""

    sm_90 = 0
    sm_90_multicast = 1
    sm_100_2sm = 2
    sm_100_2sm_multicast = 3

    def __str__(self):
        if self is Im2ColTmaLoadEnum.sm_90:
            return "sm_90"
        if self is Im2ColTmaLoadEnum.sm_90_multicast:
            return "sm_90_multicast"
        if self is Im2ColTmaLoadEnum.sm_100_2sm:
            return "sm_100_2sm"
        if self is Im2ColTmaLoadEnum.sm_100_2sm_multicast:
            return "sm_100_2sm_multicast"
        raise ValueError("Unknown Im2ColTmaLoadEnum enum entry.")



@register_attribute_builder("CuteIm2ColTmaLoadEnum")
def _cuteim2coltmaloadenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class LdsmSzPattern(IntEnum):
    """LDSM's sz pattern, describing the bit size"""

    u16 = 0
    u4to8 = 1
    s4to8 = 2
    u2to4 = 3
    s2to4 = 4
    u4x16p64to8 = 5
    u6x16p32to8 = 6
    u8 = 7

    def __str__(self):
        if self is LdsmSzPattern.u16:
            return "u16"
        if self is LdsmSzPattern.u4to8:
            return "u4to8"
        if self is LdsmSzPattern.s4to8:
            return "s4to8"
        if self is LdsmSzPattern.u2to4:
            return "u2to4"
        if self is LdsmSzPattern.s2to4:
            return "s2to4"
        if self is LdsmSzPattern.u4x16p64to8:
            return "u4x16p64to8"
        if self is LdsmSzPattern.u6x16p32to8:
            return "u6x16p32to8"
        if self is LdsmSzPattern.u8:
            return "u8"
        raise ValueError("Unknown LdsmSzPattern enum entry.")



@register_attribute_builder("CuteLdsmSzPatternEnum")
def _cuteldsmszpatternenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class LoadCacheMode(IntEnum):
    """Cache modes for the load instructions"""

    always = 0
    global_ = 1
    streaming = 2
    last_use = 3
    none = 4

    def __str__(self):
        if self is LoadCacheMode.always:
            return "always"
        if self is LoadCacheMode.global_:
            return "global"
        if self is LoadCacheMode.streaming:
            return "streaming"
        if self is LoadCacheMode.last_use:
            return "last_use"
        if self is LoadCacheMode.none:
            return "none"
        raise ValueError("Unknown LoadCacheMode enum entry.")



@register_attribute_builder("CuteLoadCacheModeEnum")
def _cuteloadcachemodeenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MMAIntOverflow(IntEnum):
    """MMA overflow options"""

    satfinite = 1
    wrapped = 0

    def __str__(self):
        if self is MMAIntOverflow.satfinite:
            return "satfinite"
        if self is MMAIntOverflow.wrapped:
            return "wrapped"
        raise ValueError("Unknown MMAIntOverflow enum entry.")



@register_attribute_builder("CuteMMAIntOverflow")
def _cutemmaintoverflow(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MajorMode(IntEnum):
    """Major mode for MMA operations"""

    k = 0
    mn = 1

    def __str__(self):
        if self is MajorMode.k:
            return "k"
        if self is MajorMode.mn:
            return "mn"
        raise ValueError("Unknown MajorMode enum entry.")



@register_attribute_builder("CuteMajorModeEnum")
def _cutemajormodeenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemOrderKind(IntEnum):
    """Memory Ordering kind"""

    WEAK = 0
    RELAXED = 1
    ACQUIRE = 2
    RELEASE = 3
    ACQ_REL = 4
    SC = 5
    MMIO = 6
    CONSTANT = 7
    VOLATILE = 8

    def __str__(self):
        if self is MemOrderKind.WEAK:
            return "weak"
        if self is MemOrderKind.RELAXED:
            return "relaxed"
        if self is MemOrderKind.ACQUIRE:
            return "acquire"
        if self is MemOrderKind.RELEASE:
            return "release"
        if self is MemOrderKind.ACQ_REL:
            return "acq_rel"
        if self is MemOrderKind.SC:
            return "sc"
        if self is MemOrderKind.MMIO:
            return "mmio"
        if self is MemOrderKind.CONSTANT:
            return "constant"
        if self is MemOrderKind.VOLATILE:
            return "volatile"
        raise ValueError("Unknown MemOrderKind enum entry.")



@register_attribute_builder("CuteMemOrderKindEnum")
def _cutememorderkindenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemScopeKind(IntEnum):
    """Cute Memory Scope kind"""

    CTA = 0
    CLUSTER = 1
    GPU = 2
    SYS = 3

    def __str__(self):
        if self is MemScopeKind.CTA:
            return "cta"
        if self is MemScopeKind.CLUSTER:
            return "cluster"
        if self is MemScopeKind.GPU:
            return "gpu"
        if self is MemScopeKind.SYS:
            return "sys"
        raise ValueError("Unknown MemScopeKind enum entry.")



@register_attribute_builder("CuteMemScopeKindEnum")
def _cutememscopekindenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MmaFragKind(IntEnum):
    """Enums for the mma frag type"""

    smem_desc = 0
    sparse_smem_desc = 1
    tmem = 2
    tmem_ws = 3
    tmem_e = 4
    tmem_sf = 5
    rmem = 6

    def __str__(self):
        if self is MmaFragKind.smem_desc:
            return "smem_desc"
        if self is MmaFragKind.sparse_smem_desc:
            return "sparse_smem_desc"
        if self is MmaFragKind.tmem:
            return "tmem"
        if self is MmaFragKind.tmem_ws:
            return "tmem_ws"
        if self is MmaFragKind.tmem_e:
            return "tmem_e"
        if self is MmaFragKind.tmem_sf:
            return "tmem_sf"
        if self is MmaFragKind.rmem:
            return "rmem"
        raise ValueError("Unknown MmaFragKind enum entry.")



@register_attribute_builder("CuteMmaFragKindEnum")
def _cutemmafragkindenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MmaOperand(IntEnum):
    """MMA operand ID"""

    A = 0
    B = 1
    C = 2
    D = 3
    SFA = 4
    SFB = 5
    E = 6
    LUTB = 7

    def __str__(self):
        if self is MmaOperand.A:
            return "A"
        if self is MmaOperand.B:
            return "B"
        if self is MmaOperand.C:
            return "C"
        if self is MmaOperand.D:
            return "D"
        if self is MmaOperand.SFA:
            return "SFA"
        if self is MmaOperand.SFB:
            return "SFB"
        if self is MmaOperand.E:
            return "E"
        if self is MmaOperand.LUTB:
            return "LUTB"
        raise ValueError("Unknown MmaOperand enum entry.")



@register_attribute_builder("CuteMmaOperandEnum")
def _cutemmaoperandenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ReductionKind(IntEnum):
    """Op for the TMASTORE instruction"""

    ADD = 0
    MIN = 1
    MAX = 2
    INC = 3
    DEC = 4
    AND = 5
    OR = 6
    XOR = 7

    def __str__(self):
        if self is ReductionKind.ADD:
            return "ADD"
        if self is ReductionKind.MIN:
            return "MIN"
        if self is ReductionKind.MAX:
            return "MAX"
        if self is ReductionKind.INC:
            return "INC"
        if self is ReductionKind.DEC:
            return "DEC"
        if self is ReductionKind.AND:
            return "AND"
        if self is ReductionKind.OR:
            return "OR"
        if self is ReductionKind.XOR:
            return "XOR"
        raise ValueError("Unknown ReductionKind enum entry.")



@register_attribute_builder("CuteReductionKindEnum")
def _cutereductionkindenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ReductionOp(IntEnum):
    """Op for cute reduce operations"""

    ADD = 0
    MUL = 1
    MIN = 2
    MAX = 3

    def __str__(self):
        if self is ReductionOp.ADD:
            return "ADD"
        if self is ReductionOp.MUL:
            return "MUL"
        if self is ReductionOp.MIN:
            return "MIN"
        if self is ReductionOp.MAX:
            return "MAX"
        raise ValueError("Unknown ReductionOp enum entry.")



@register_attribute_builder("CuteReductionOpEnum")
def _cutereductionopenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class SparseMetadataFormat(IntEnum):
    """Metadata format used in sparse MMA"""

    tid = 0

    def __str__(self):
        if self is SparseMetadataFormat.tid:
            return "tid"
        raise ValueError("Unknown SparseMetadataFormat enum entry.")



@register_attribute_builder("CuteSparseMetadataFormatEnum")
def _cutesparsemetadataformatenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TiledTmaLoadEnum(IntEnum):
    """The various kinds of TMA loads in tiled mode"""

    sm_90 = 0
    sm_90_multicast = 1
    sm_100_2sm = 2
    sm_100_2sm_multicast = 3

    def __str__(self):
        if self is TiledTmaLoadEnum.sm_90:
            return "sm_90"
        if self is TiledTmaLoadEnum.sm_90_multicast:
            return "sm_90_multicast"
        if self is TiledTmaLoadEnum.sm_100_2sm:
            return "sm_100_2sm"
        if self is TiledTmaLoadEnum.sm_100_2sm_multicast:
            return "sm_100_2sm_multicast"
        raise ValueError("Unknown TiledTmaLoadEnum enum entry.")



@register_attribute_builder("CuteTiledTmaLoadEnum")
def _cutetiledtmaloadenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TmaDataFormat(IntEnum):
    """Bits 74-71 of the TMA descriptor"""

    U8 = 0
    U16 = 1
    U32 = 2
    S32 = 3
    U64 = 4
    S64 = 5
    F16_RN = 6
    F32_RN = 7
    F32_FTZ_RN = 8
    F64_RN = 9
    BF16_RN = 10
    U4 = 11
    U4_UNPACK_U8 = 12
    U6_UNPACK_U8 = 13
    TF32_RN = 14
    TF32_FTZ_RN = 15

    def __str__(self):
        if self is TmaDataFormat.U8:
            return "U8"
        if self is TmaDataFormat.U16:
            return "U16"
        if self is TmaDataFormat.U32:
            return "U32"
        if self is TmaDataFormat.S32:
            return "S32"
        if self is TmaDataFormat.U64:
            return "U64"
        if self is TmaDataFormat.S64:
            return "S64"
        if self is TmaDataFormat.F16_RN:
            return "F16_RN"
        if self is TmaDataFormat.F32_RN:
            return "F32_RN"
        if self is TmaDataFormat.F32_FTZ_RN:
            return "F32_FTZ_RN"
        if self is TmaDataFormat.F64_RN:
            return "F64_RN"
        if self is TmaDataFormat.BF16_RN:
            return "BF16_RN"
        if self is TmaDataFormat.U4:
            return "U4"
        if self is TmaDataFormat.U4_UNPACK_U8:
            return "U4_UNPACK_U8"
        if self is TmaDataFormat.U6_UNPACK_U8:
            return "U6_UNPACK_U8"
        if self is TmaDataFormat.TF32_RN:
            return "TF32_RN"
        if self is TmaDataFormat.TF32_FTZ_RN:
            return "TF32_FTZ_RN"
        raise ValueError("Unknown TmaDataFormat enum entry.")



@register_attribute_builder("CuteTmaDataFormatEnum")
def _cutetmadataformatenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TmaLoadMode(IntEnum):
    """Modes for the TMA load instruction"""

    tiled = 0
    im2col = 1
    w128 = 2
    w = 3
    gather4 = 4

    def __str__(self):
        if self is TmaLoadMode.tiled:
            return "tiled"
        if self is TmaLoadMode.im2col:
            return "im2col"
        if self is TmaLoadMode.w128:
            return "w128"
        if self is TmaLoadMode.w:
            return "w"
        if self is TmaLoadMode.gather4:
            return "gather4"
        raise ValueError("Unknown TmaLoadMode enum entry.")



@register_attribute_builder("CuteTmaLoadModeEnum")
def _cutetmaloadmodeenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TmaStoreMode(IntEnum):
    """Modes for the TMA store instruction"""

    tiled = 0
    im2col = 1
    scatter4 = 2

    def __str__(self):
        if self is TmaStoreMode.tiled:
            return "tiled"
        if self is TmaStoreMode.im2col:
            return "im2col"
        if self is TmaStoreMode.scatter4:
            return "scatter4"
        raise ValueError("Unknown TmaStoreMode enum entry.")



@register_attribute_builder("CuteTmaStoreModeEnum")
def _cutetmastoremodeenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TmemAllocMode(IntEnum):
    """Modes for the Tmem allocation"""

    Interleaved = 0
    NonInterleaved = 1
    Duplicated = 2
    SfDuplicated_4x1 = 3
    SfDuplicated_2x2 = 4

    def __str__(self):
        if self is TmemAllocMode.Interleaved:
            return "Interleaved"
        if self is TmemAllocMode.NonInterleaved:
            return "NonInterleaved"
        if self is TmemAllocMode.Duplicated:
            return "Duplicated"
        if self is TmemAllocMode.SfDuplicated_4x1:
            return "SfDuplicated_4x1"
        if self is TmemAllocMode.SfDuplicated_2x2:
            return "SfDuplicated_2x2"
        raise ValueError("Unknown TmemAllocMode enum entry.")



@register_attribute_builder("CuteTmemAllocModeEnum")
def _cutetmemallocmodeenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

@register_attribute_builder("CuteArchCopySM100CopyS2TBroadcastEnumAttr")
def _cutearchcopysm100copys2tbroadcastenumattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.copy_s2t_broadcast_mode<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldBulkCopyG2SAttr")
def _cuteatomcopyfieldbulkcopyg2sattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_bulkg2s<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldBulkCopyS2GAttr")
def _cuteatomcopyfieldbulkcopys2gattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_bulks2g<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldNonExecIm2ColTmaLoadAttr")
def _cuteatomcopyfieldnonexecim2coltmaloadattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_non_exec_im2col_tma_load<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldNonExecIm2ColTmaStoreAttr")
def _cuteatomcopyfieldnonexecim2coltmastoreattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_non_exec_im2col_tma_store<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldNonExecTiledTmaLoadAttr")
def _cuteatomcopyfieldnonexectiledtmaloadattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_non_exec_tma_load<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldNonExecTiledTmaReduceAttr")
def _cuteatomcopyfieldnonexectiledtmareduceattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_non_exec_tma_reduce<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldNonExecTiledTmaStoreAttr")
def _cuteatomcopyfieldnonexectiledtmastoreattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_non_exec_tma_store<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldTmaLoadAttr")
def _cuteatomcopyfieldtmaloadattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_tmaload<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldTmaReduceAttr")
def _cuteatomcopyfieldtmareduceattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_tmareduce<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomCopyFieldTmaStoreAttr")
def _cuteatomcopyfieldtmastoreattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_copy_field_tmastore<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomMmaFieldSM80SparseAttr")
def _cuteatommmafieldsm80sparseattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_mma_field_sm80_sparse<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomMmaFieldSM90Attr")
def _cuteatommmafieldsm90attr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_mma_field_sm90<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomMmaFieldSM100Attr")
def _cuteatommmafieldsm100attr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_mma_field_sm100<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomMmaFieldSM100BlockScaledAttr")
def _cuteatommmafieldsm100blockscaledattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_mma_field_sm100_block_scaled<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomMmaFieldSM100BlockScaledSparseAttr")
def _cuteatommmafieldsm100blockscaledsparseattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_mma_field_sm100_block_scaled_sparse<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomMmaFieldSM100SparseAttr")
def _cuteatommmafieldsm100sparseattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_mma_field_sm100_sparse<{str(x)}>', context=context)

@register_attribute_builder("CuteAtomMmaFieldSM120BlockScaledAttr")
def _cuteatommmafieldsm120blockscaledattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.atom_mma_field_sm120_block_scaled<{str(x)}>', context=context)

@register_attribute_builder("CuteBinaryOpAttr")
def _cutebinaryopattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.bin_op<{str(x)}>', context=context)

@register_attribute_builder("CuteIm2ColTmaLoadEnumAttr")
def _cuteim2coltmaloadenumattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.im2col_tma_load<{str(x)}>', context=context)

@register_attribute_builder("CuteLdsmSzPatternEnumAttr")
def _cuteldsmszpatternenumattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.ldsm_sz_pattern<{str(x)}>', context=context)

@register_attribute_builder("CuteLoadCacheModeEnumAttr")
def _cuteloadcachemodeenumattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.load_cache_mode<{str(x)}>', context=context)

@register_attribute_builder("CuteMMAIntOverflowAttr")
def _cutemmaintoverflowattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.mma_int_overflow<{str(x)}>', context=context)

@register_attribute_builder("CuteMajorModeAttr")
def _cutemajormodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.major<{str(x)}>', context=context)

@register_attribute_builder("CuteMmaFragKindAttr")
def _cutemmafragkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.mma_frag_kind<{str(x)}>', context=context)

@register_attribute_builder("CuteReductionKindAttr")
def _cutereductionkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.tma_reduce_kind<{str(x)}>', context=context)

@register_attribute_builder("CuteReductionOpAttr")
def _cutereductionopattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute.reduction_op<{str(x)}>', context=context)

@register_attribute_builder("CuteTiledTmaLoadEnumAttr")
def _cutetiledtmaloadenumattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.tiled_tma_load<{str(x)}>', context=context)

@register_attribute_builder("CuteTmaDataFormatAttr")
def _cutetmadataformatattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.tma_data_format<{str(x)}>', context=context)

@register_attribute_builder("CuteTmaLoadModeAttr")
def _cutetmaloadmodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.tma_load_mode<{str(x)}>', context=context)

@register_attribute_builder("CuteTmaStoreModeAttr")
def _cutetmastoremodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.tma_store_mode<{str(x)}>', context=context)

@register_attribute_builder("CuteTmemAllocModeAttr")
def _cutetmemallocmodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute_nvgpu.tmem_alloc_mode<{str(x)}>', context=context)

