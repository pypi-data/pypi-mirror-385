
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class AtomicOpKind(IntEnum):
    """operations supported by atom instruction"""

    AND = 0
    OR = 1
    XOR = 2
    CAS = 3
    EXCH = 4
    ADD = 5
    INC = 6
    DEC = 7
    MIN = 8
    MAX = 9
    UMIN = 10
    UMAX = 11
    FADD = 12
    SUB = 13

    def __str__(self):
        if self is AtomicOpKind.AND:
            return "and"
        if self is AtomicOpKind.OR:
            return "or"
        if self is AtomicOpKind.XOR:
            return "xor"
        if self is AtomicOpKind.CAS:
            return "cas"
        if self is AtomicOpKind.EXCH:
            return "exch"
        if self is AtomicOpKind.ADD:
            return "add"
        if self is AtomicOpKind.INC:
            return "inc"
        if self is AtomicOpKind.DEC:
            return "dec"
        if self is AtomicOpKind.MIN:
            return "min"
        if self is AtomicOpKind.MAX:
            return "max"
        if self is AtomicOpKind.UMIN:
            return "umin"
        if self is AtomicOpKind.UMAX:
            return "umax"
        if self is AtomicOpKind.FADD:
            return "fadd"
        if self is AtomicOpKind.SUB:
            return "sub"
        raise ValueError("Unknown AtomicOpKind enum entry.")



@register_attribute_builder("AtomicOpKind")
def _atomicopkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class BarrierReduxKind(IntEnum):
    """NVVM barrier redux kind"""

    AND = 0
    OR = 1
    POPC = 2

    def __str__(self):
        if self is BarrierReduxKind.AND:
            return "and"
        if self is BarrierReduxKind.OR:
            return "or"
        if self is BarrierReduxKind.POPC:
            return "popc"
        raise ValueError("Unknown BarrierReduxKind enum entry.")



@register_attribute_builder("BarrierReduxKind")
def _barrierreduxkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class BlockScaleFormat(IntEnum):
    """MMA Block Scale Format"""

    UE8M0 = 0
    UE4M3 = 1

    def __str__(self):
        if self is BlockScaleFormat.UE8M0:
            return "ue8m0"
        if self is BlockScaleFormat.UE4M3:
            return "ue4m3"
        raise ValueError("Unknown BlockScaleFormat enum entry.")



@register_attribute_builder("BlockScaleFormat")
def _blockscaleformat(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CVTPackFloatKind(IntEnum):
    """NVVM CVT Pack Float kind"""

    F32 = 0
    F16x2 = 1
    E4M3x2 = 2
    E5M2x2 = 3
    BF16x2 = 4
    E2M1x2 = 5
    E2M3x2 = 6
    E3M2x2 = 7
    UE8M0x2 = 8

    def __str__(self):
        if self is CVTPackFloatKind.F32:
            return "f32"
        if self is CVTPackFloatKind.F16x2:
            return "f16x2"
        if self is CVTPackFloatKind.E4M3x2:
            return "e4m3x2"
        if self is CVTPackFloatKind.E5M2x2:
            return "e5m2x2"
        if self is CVTPackFloatKind.BF16x2:
            return "bf16x2"
        if self is CVTPackFloatKind.E2M1x2:
            return "e2m1x2"
        if self is CVTPackFloatKind.E2M3x2:
            return "e2m3x2"
        if self is CVTPackFloatKind.E3M2x2:
            return "e3m2x2"
        if self is CVTPackFloatKind.UE8M0x2:
            return "ue8m0x2"
        raise ValueError("Unknown CVTPackFloatKind enum entry.")



@register_attribute_builder("CVTPackFloatKind")
def _cvtpackfloatkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CpAsyncBulkTensorLoadMode(IntEnum):
    """allowed 32-bit signless integer cases: 0, 1, 2, 3"""

    TILE = 0
    IM2COL = 1
    IM2COL_W = 2
    IM2COL_W128 = 3

    def __str__(self):
        if self is CpAsyncBulkTensorLoadMode.TILE:
            return "tile"
        if self is CpAsyncBulkTensorLoadMode.IM2COL:
            return "im2col"
        if self is CpAsyncBulkTensorLoadMode.IM2COL_W:
            return "im2col_w"
        if self is CpAsyncBulkTensorLoadMode.IM2COL_W128:
            return "im2col_w128"
        raise ValueError("Unknown CpAsyncBulkTensorLoadMode enum entry.")



@register_attribute_builder("CpAsyncBulkTensorLoadMode")
def _cpasyncbulktensorloadmode(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class EvictKind(IntEnum):
    """NVVM L2 Prefetch Size"""

    NORMAL = 0
    FIRST = 1
    LAST = 2
    UNCHANGED = 3
    NOALLOCATE = 4
    NONE = 5

    def __str__(self):
        if self is EvictKind.NORMAL:
            return "evict_normal"
        if self is EvictKind.FIRST:
            return "evict_first"
        if self is EvictKind.LAST:
            return "evict_last"
        if self is EvictKind.UNCHANGED:
            return "evict_unchanged"
        if self is EvictKind.NOALLOCATE:
            return "evict_no_allocate"
        if self is EvictKind.NONE:
            return "none"
        raise ValueError("Unknown EvictKind enum entry.")



@register_attribute_builder("EvictKind")
def _evictkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class FPRoundingMode(IntEnum):
    """NVVM FPRoundingMode kind"""

    NONE = 0
    RN = 1
    RM = 2
    RP = 3
    RZ = 4
    RNA = 5

    def __str__(self):
        if self is FPRoundingMode.NONE:
            return "none"
        if self is FPRoundingMode.RN:
            return "rn"
        if self is FPRoundingMode.RM:
            return "rm"
        if self is FPRoundingMode.RP:
            return "rp"
        if self is FPRoundingMode.RZ:
            return "rz"
        if self is FPRoundingMode.RNA:
            return "rna"
        raise ValueError("Unknown FPRoundingMode enum entry.")



@register_attribute_builder("FPRoundingMode")
def _fproundingmode(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class L2PrefetchSize(IntEnum):
    """NVVM L2 Prefetch Size"""

    NONE = 0
    RESERVED = 1
    SIZE_64B = 2
    SIZE_128B = 3
    SIZE_256B = 4

    def __str__(self):
        if self is L2PrefetchSize.NONE:
            return "none"
        if self is L2PrefetchSize.RESERVED:
            return "reserved"
        if self is L2PrefetchSize.SIZE_64B:
            return "size_64b"
        if self is L2PrefetchSize.SIZE_128B:
            return "size_128b"
        if self is L2PrefetchSize.SIZE_256B:
            return "size_256b"
        raise ValueError("Unknown L2PrefetchSize enum entry.")



@register_attribute_builder("L2PrefetchSize")
def _l2prefetchsize(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class LoadCacheModifierExtKind(IntEnum):
    """NVVM load cache modifier kind(Ext)"""

    CA = 0
    CG = 1
    CS = 2
    LU = 3
    CV = 4
    NONE = 5

    def __str__(self):
        if self is LoadCacheModifierExtKind.CA:
            return "ca"
        if self is LoadCacheModifierExtKind.CG:
            return "cg"
        if self is LoadCacheModifierExtKind.CS:
            return "cs"
        if self is LoadCacheModifierExtKind.LU:
            return "lu"
        if self is LoadCacheModifierExtKind.CV:
            return "cv"
        if self is LoadCacheModifierExtKind.NONE:
            return "none"
        raise ValueError("Unknown LoadCacheModifierExtKind enum entry.")



@register_attribute_builder("LoadCacheModifierExtKind")
def _loadcachemodifierextkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class LoadCacheModifierKind(IntEnum):
    """NVVM load cache modifier kind"""

    CA = 0
    CG = 1
    CS = 2
    LU = 3
    CV = 4

    def __str__(self):
        if self is LoadCacheModifierKind.CA:
            return "ca"
        if self is LoadCacheModifierKind.CG:
            return "cg"
        if self is LoadCacheModifierKind.CS:
            return "cs"
        if self is LoadCacheModifierKind.LU:
            return "lu"
        if self is LoadCacheModifierKind.CV:
            return "cv"
        raise ValueError("Unknown LoadCacheModifierKind enum entry.")



@register_attribute_builder("LoadCacheModifierKind")
def _loadcachemodifierkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class LoadShape(IntEnum):
    """shape attribute for ldmatrix"""

    M8N8 = 0
    M8N16 = 1
    M16N16 = 3

    def __str__(self):
        if self is LoadShape.M8N8:
            return "m8n8"
        if self is LoadShape.M8N16:
            return "m8n16"
        if self is LoadShape.M16N16:
            return "m16n16"
        raise ValueError("Unknown LoadShape enum entry.")



@register_attribute_builder("LoadShape")
def _loadshape(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class LoadSrcFormat(IntEnum):
    """source format for ldmatrix"""

    B6x16_P32 = 0
    B4x16_P64 = 1
    B8 = 2

    def __str__(self):
        if self is LoadSrcFormat.B6x16_P32:
            return "b6x16_p32"
        if self is LoadSrcFormat.B4x16_P64:
            return "b4x16_p64"
        if self is LoadSrcFormat.B8:
            return "b8"
        raise ValueError("Unknown LoadSrcFormat enum entry.")



@register_attribute_builder("LoadSrcFormat")
def _loadsrcformat(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MBarrierScopeKind(IntEnum):
    """NVVM MBarrier scope kind"""

    CTA = 0
    CLUSTER = 1

    def __str__(self):
        if self is MBarrierScopeKind.CTA:
            return "cta"
        if self is MBarrierScopeKind.CLUSTER:
            return "cluster"
        raise ValueError("Unknown MBarrierScopeKind enum entry.")



@register_attribute_builder("MBarrierScopeKind")
def _mbarrierscopekind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MBarrierSpaceKind(IntEnum):
    """NVVM MBarrier space kind"""

    CTA = 0
    CLUSTER = 1

    def __str__(self):
        if self is MBarrierSpaceKind.CTA:
            return "cta"
        if self is MBarrierSpaceKind.CLUSTER:
            return "cluster"
        raise ValueError("Unknown MBarrierSpaceKind enum entry.")



@register_attribute_builder("MBarrierSpaceKind")
def _mbarrierspacekind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MBarrierTxnKind(IntEnum):
    """NVVM MBarrier Transaction kind"""

    ARRIVE = 0
    ARRIVE_DROP = 1
    ARRIVE_EXPECT_TX = 2
    ARRIVE_DROP_EXPECT_TX = 3
    EXPECT_TX = 4
    COMPLETE_TX = 5

    def __str__(self):
        if self is MBarrierTxnKind.ARRIVE:
            return "arrive"
        if self is MBarrierTxnKind.ARRIVE_DROP:
            return "arrive_drop"
        if self is MBarrierTxnKind.ARRIVE_EXPECT_TX:
            return "arrive_expect_tx"
        if self is MBarrierTxnKind.ARRIVE_DROP_EXPECT_TX:
            return "arrive_drop_expect_tx"
        if self is MBarrierTxnKind.EXPECT_TX:
            return "expect_tx"
        if self is MBarrierTxnKind.COMPLETE_TX:
            return "complete_tx"
        raise ValueError("Unknown MBarrierTxnKind enum entry.")



@register_attribute_builder("MBarrierTxnKind")
def _mbarriertxnkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MBarrierWaitKind(IntEnum):
    """NVVM MBarrier wait kind"""

    TEST = 0
    TRY = 1

    def __str__(self):
        if self is MBarrierWaitKind.TEST:
            return "test"
        if self is MBarrierWaitKind.TRY:
            return "try"
        raise ValueError("Unknown MBarrierWaitKind enum entry.")



@register_attribute_builder("MBarrierWaitKind")
def _mbarrierwaitkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MMAB1Op(IntEnum):
    """MMA binary operations"""

    none = 0
    xor_popc = 1
    and_popc = 2

    def __str__(self):
        if self is MMAB1Op.none:
            return "none"
        if self is MMAB1Op.xor_popc:
            return "xor_popc"
        if self is MMAB1Op.and_popc:
            return "and_popc"
        raise ValueError("Unknown MMAB1Op enum entry.")



@register_attribute_builder("MMAB1Op")
def _mmab1op(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MMACtaCount(IntEnum):
    """MMA CTA count"""

    cta1 = 1
    cta2 = 2

    def __str__(self):
        if self is MMACtaCount.cta1:
            return "cta1"
        if self is MMACtaCount.cta2:
            return "cta2"
        raise ValueError("Unknown MMACtaCount enum entry.")



@register_attribute_builder("MMACtaCount")
def _mmactacount(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MMAFrag(IntEnum):
    """NVVM MMA frag type"""

    a = 0
    b = 1
    c = 2

    def __str__(self):
        if self is MMAFrag.a:
            return "a"
        if self is MMAFrag.b:
            return "b"
        if self is MMAFrag.c:
            return "c"
        raise ValueError("Unknown MMAFrag enum entry.")



@register_attribute_builder("MMAFrag")
def _mmafrag(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MMAIntOverflow(IntEnum):
    """MMA overflow options"""

    satfinite = 1
    wrapped = 0

    def __str__(self):
        if self is MMAIntOverflow.satfinite:
            return "satfinite"
        if self is MMAIntOverflow.wrapped:
            return "wrapped"
        raise ValueError("Unknown MMAIntOverflow enum entry.")



@register_attribute_builder("MMAIntOverflow")
def _mmaintoverflow(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MMALayout(IntEnum):
    """NVVM MMA layout"""

    row = 0
    col = 1

    def __str__(self):
        if self is MMALayout.row:
            return "row"
        if self is MMALayout.col:
            return "col"
        raise ValueError("Unknown MMALayout enum entry.")



@register_attribute_builder("MMALayout")
def _mmalayout(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MMATypes(IntEnum):
    """NVVM MMA types"""

    f16 = 0
    f32 = 1
    tf32 = 2
    bf16 = 9
    s8 = 4
    u8 = 3
    s32 = 5
    s4 = 8
    u4 = 7
    b1 = 6
    f64 = 10
    e4m3 = 11
    e5m2 = 12
    e2m3 = 14
    e3m2 = 15
    e2m1 = 16

    def __str__(self):
        if self is MMATypes.f16:
            return "f16"
        if self is MMATypes.f32:
            return "f32"
        if self is MMATypes.tf32:
            return "tf32"
        if self is MMATypes.bf16:
            return "bf16"
        if self is MMATypes.s8:
            return "s8"
        if self is MMATypes.u8:
            return "u8"
        if self is MMATypes.s32:
            return "s32"
        if self is MMATypes.s4:
            return "s4"
        if self is MMATypes.u4:
            return "u4"
        if self is MMATypes.b1:
            return "b1"
        if self is MMATypes.f64:
            return "f64"
        if self is MMATypes.e4m3:
            return "e4m3"
        if self is MMATypes.e5m2:
            return "e5m2"
        if self is MMATypes.e2m3:
            return "e2m3"
        if self is MMATypes.e3m2:
            return "e3m2"
        if self is MMATypes.e2m1:
            return "e2m1"
        raise ValueError("Unknown MMATypes enum entry.")



@register_attribute_builder("MMATypes")
def _mmatypes(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemOrderKind(IntEnum):
    """NVVM Memory Ordering kind"""

    WEAK = 0
    RELAXED = 1
    ACQUIRE = 2
    RELEASE = 3
    ACQ_REL = 4
    SC = 5
    MMIO = 6
    CONSTANT = 7
    VOLATILE = 8

    def __str__(self):
        if self is MemOrderKind.WEAK:
            return "weak"
        if self is MemOrderKind.RELAXED:
            return "relaxed"
        if self is MemOrderKind.ACQUIRE:
            return "acquire"
        if self is MemOrderKind.RELEASE:
            return "release"
        if self is MemOrderKind.ACQ_REL:
            return "acq_rel"
        if self is MemOrderKind.SC:
            return "sc"
        if self is MemOrderKind.MMIO:
            return "mmio"
        if self is MemOrderKind.CONSTANT:
            return "constant"
        if self is MemOrderKind.VOLATILE:
            return "volatile"
        raise ValueError("Unknown MemOrderKind enum entry.")



@register_attribute_builder("MemOrderKind")
def _memorderkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MemScopeKind(IntEnum):
    """NVVM Memory Scope kind"""

    CTA = 0
    CLUSTER = 1
    GPU = 2
    SYS = 3

    def __str__(self):
        if self is MemScopeKind.CTA:
            return "cta"
        if self is MemScopeKind.CLUSTER:
            return "cluster"
        if self is MemScopeKind.GPU:
            return "gpu"
        if self is MemScopeKind.SYS:
            return "sys"
        raise ValueError("Unknown MemScopeKind enum entry.")



@register_attribute_builder("MemScopeKind")
def _memscopekind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MulMode(IntEnum):
    """multiply mode attribute"""

    HI = 0
    LO = 1
    WIDE = 2

    def __str__(self):
        if self is MulMode.HI:
            return "hi"
        if self is MulMode.LO:
            return "lo"
        if self is MulMode.WIDE:
            return "wide"
        raise ValueError("Unknown MulMode enum entry.")



@register_attribute_builder("MulMode")
def _mulmode(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ProxyKind(IntEnum):
    """Proxy kind"""

    alias = 0
    async_ = 1
    async_global = 2
    async_shared = 3
    TENSORMAP = 4
    GENERIC = 5

    def __str__(self):
        if self is ProxyKind.alias:
            return "alias"
        if self is ProxyKind.async_:
            return "async"
        if self is ProxyKind.async_global:
            return "async.global"
        if self is ProxyKind.async_shared:
            return "async.shared"
        if self is ProxyKind.TENSORMAP:
            return "tensormap"
        if self is ProxyKind.GENERIC:
            return "generic"
        raise ValueError("Unknown ProxyKind enum entry.")



@register_attribute_builder("ProxyKind")
def _proxykind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ReductionOp(IntEnum):
    """Ops supported by red instruction"""

    AND = 0
    OR = 1
    XOR = 2
    ADD = 3
    INC = 4
    DEC = 5
    MIN = 6
    MAX = 7

    def __str__(self):
        if self is ReductionOp.AND:
            return "and"
        if self is ReductionOp.OR:
            return "or"
        if self is ReductionOp.XOR:
            return "xor"
        if self is ReductionOp.ADD:
            return "add"
        if self is ReductionOp.INC:
            return "inc"
        if self is ReductionOp.DEC:
            return "dec"
        if self is ReductionOp.MIN:
            return "min"
        if self is ReductionOp.MAX:
            return "max"
        raise ValueError("Unknown ReductionOp enum entry.")



@register_attribute_builder("ReductionOp")
def _reductionop(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ReductionType(IntEnum):
    """types supported by red instruction"""

    B32 = 0
    B64 = 1
    U32 = 2
    U64 = 3
    S32 = 4
    S64 = 5
    F32 = 6
    F64 = 7
    F16 = 8
    F16X2 = 9
    BF16 = 10
    BF16X2 = 11

    def __str__(self):
        if self is ReductionType.B32:
            return "b32"
        if self is ReductionType.B64:
            return "b64"
        if self is ReductionType.U32:
            return "u32"
        if self is ReductionType.U64:
            return "u64"
        if self is ReductionType.S32:
            return "s32"
        if self is ReductionType.S64:
            return "s64"
        if self is ReductionType.F32:
            return "f32"
        if self is ReductionType.F64:
            return "f64"
        if self is ReductionType.F16:
            return "f16"
        if self is ReductionType.F16X2:
            return "f16x2"
        if self is ReductionType.BF16:
            return "bf16"
        if self is ReductionType.BF16X2:
            return "bf16x2"
        raise ValueError("Unknown ReductionType enum entry.")



@register_attribute_builder("ReductionType")
def _reductiontype(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ReduxKind(IntEnum):
    """NVVM redux kind"""

    ADD = 1
    AND = 2
    MAX = 3
    MIN = 4
    OR = 5
    UMAX = 6
    UMIN = 7
    XOR = 8

    def __str__(self):
        if self is ReduxKind.ADD:
            return "add"
        if self is ReduxKind.AND:
            return "and"
        if self is ReduxKind.MAX:
            return "max"
        if self is ReduxKind.MIN:
            return "min"
        if self is ReduxKind.OR:
            return "or"
        if self is ReduxKind.UMAX:
            return "umax"
        if self is ReduxKind.UMIN:
            return "umin"
        if self is ReduxKind.XOR:
            return "xor"
        raise ValueError("Unknown ReduxKind enum entry.")



@register_attribute_builder("ReduxKind")
def _reduxkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class RoundingModeKind(IntEnum):
    """NVVM RoundingMode kind"""

    NONE = 0
    RN = 1
    RM = 2
    RP = 3
    RZ = 4

    def __str__(self):
        if self is RoundingModeKind.NONE:
            return "none"
        if self is RoundingModeKind.RN:
            return "rn"
        if self is RoundingModeKind.RM:
            return "rm"
        if self is RoundingModeKind.RP:
            return "rp"
        if self is RoundingModeKind.RZ:
            return "rz"
        raise ValueError("Unknown RoundingModeKind enum entry.")



@register_attribute_builder("RoundingModeKind")
def _roundingmodekind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class SaturationMode(IntEnum):
    """NVVM SaturationMode kind"""

    NONE = 0
    SATFINITE = 1

    def __str__(self):
        if self is SaturationMode.NONE:
            return "none"
        if self is SaturationMode.SATFINITE:
            return "satfinite"
        raise ValueError("Unknown SaturationMode enum entry.")



@register_attribute_builder("SaturationMode")
def _saturationmode(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class SaturationModeKind(IntEnum):
    """NVVM SaturationMode kind"""

    NONE = 0
    SATFINITE = 1

    def __str__(self):
        if self is SaturationModeKind.NONE:
            return "none"
        if self is SaturationModeKind.SATFINITE:
            return "satfinite"
        raise ValueError("Unknown SaturationModeKind enum entry.")



@register_attribute_builder("SaturationModeKind")
def _saturationmodekind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ScaleVecSize(IntEnum):
    """MMA Scale Vector Sizes"""

    X1 = 0
    X2 = 1
    X4 = 2

    def __str__(self):
        if self is ScaleVecSize.X1:
            return "x1"
        if self is ScaleVecSize.X2:
            return "x2"
        if self is ScaleVecSize.X4:
            return "x4"
        raise ValueError("Unknown ScaleVecSize enum entry.")



@register_attribute_builder("ScaleVecSize")
def _scalevecsize(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class SetMaxRegisterAction(IntEnum):
    """NVVM set max register action"""

    decrease = 1
    increase = 0

    def __str__(self):
        if self is SetMaxRegisterAction.decrease:
            return "decrease"
        if self is SetMaxRegisterAction.increase:
            return "increase"
        raise ValueError("Unknown SetMaxRegisterAction enum entry.")



@register_attribute_builder("SetMaxRegisterAction")
def _setmaxregisteraction(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class SharedSpace(IntEnum):
    """Shared memory space"""

    shared_cta = 0
    shared_cluster = 1

    def __str__(self):
        if self is SharedSpace.shared_cta:
            return "cta"
        if self is SharedSpace.shared_cluster:
            return "cluster"
        raise ValueError("Unknown SharedSpace enum entry.")



@register_attribute_builder("SharedSpace")
def _sharedspace(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ShflKind(IntEnum):
    """NVVM shuffle kind"""

    bfly = 0
    up = 1
    down = 2
    idx = 3

    def __str__(self):
        if self is ShflKind.bfly:
            return "bfly"
        if self is ShflKind.up:
            return "up"
        if self is ShflKind.down:
            return "down"
        if self is ShflKind.idx:
            return "idx"
        raise ValueError("Unknown ShflKind enum entry.")



@register_attribute_builder("ShflKind")
def _shflkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class SparsityFormat(IntEnum):
    """MMA Sparsity Format"""

    THREAD = 0

    def __str__(self):
        if self is SparsityFormat.THREAD:
            return "thread"
        raise ValueError("Unknown SparsityFormat enum entry.")



@register_attribute_builder("SparsityFormat")
def _sparsityformat(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class StateSpace(IntEnum):
    """NVVM State Space"""

    GENERIC = 0
    GLOBAL = 1
    SHARED_CTA = 2
    SHARED_CLUSTER = 3
    CONSTANT = 4
    LOCAL = 5
    TENSOR = 6

    def __str__(self):
        if self is StateSpace.GENERIC:
            return "generic"
        if self is StateSpace.GLOBAL:
            return "global"
        if self is StateSpace.SHARED_CTA:
            return "shared_cta"
        if self is StateSpace.SHARED_CLUSTER:
            return "shared_cluster"
        if self is StateSpace.CONSTANT:
            return "constant"
        if self is StateSpace.LOCAL:
            return "local"
        if self is StateSpace.TENSOR:
            return "tensor"
        raise ValueError("Unknown StateSpace enum entry.")



@register_attribute_builder("StateSpace")
def _statespace(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class StoreCacheModifierKind(IntEnum):
    """NVVM store cache modifier kind"""

    WB = 0
    CG = 1
    CS = 2
    WT = 3
    NONE = 4

    def __str__(self):
        if self is StoreCacheModifierKind.WB:
            return "wb"
        if self is StoreCacheModifierKind.CG:
            return "cg"
        if self is StoreCacheModifierKind.CS:
            return "cs"
        if self is StoreCacheModifierKind.WT:
            return "wt"
        if self is StoreCacheModifierKind.NONE:
            return "none"
        raise ValueError("Unknown StoreCacheModifierKind enum entry.")



@register_attribute_builder("StoreCacheModifierKind")
def _storecachemodifierkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class StoreShape(IntEnum):
    """shape attribute for stmatrix"""

    M8N8 = 0
    M16N8 = 2

    def __str__(self):
        if self is StoreShape.M8N8:
            return "m8n8"
        if self is StoreShape.M16N8:
            return "m16n8"
        raise ValueError("Unknown StoreShape enum entry.")



@register_attribute_builder("StoreShape")
def _storeshape(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TCBarParam(IntEnum):
    """Cluster MMA Barrier Parameter Type"""

    a1t0 = 0
    a0tx = 1

    def __str__(self):
        if self is TCBarParam.a1t0:
            return "a1t0"
        if self is TCBarParam.a0tx:
            return "a0tx"
        raise ValueError("Unknown TCBarParam enum entry.")



@register_attribute_builder("TCBarParam")
def _tcbarparam(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TMAReduxKind(IntEnum):
    """NVVM TMA redux kind"""

    ADD = 0
    MAX = 2
    MIN = 1
    INC = 3
    DEC = 4
    AND = 5
    OR = 6
    XOR = 7

    def __str__(self):
        if self is TMAReduxKind.ADD:
            return "add"
        if self is TMAReduxKind.MAX:
            return "max"
        if self is TMAReduxKind.MIN:
            return "min"
        if self is TMAReduxKind.INC:
            return "inc"
        if self is TMAReduxKind.DEC:
            return "dec"
        if self is TMAReduxKind.AND:
            return "and"
        if self is TMAReduxKind.OR:
            return "or"
        if self is TMAReduxKind.XOR:
            return "xor"
        raise ValueError("Unknown TMAReduxKind enum entry.")



@register_attribute_builder("TMAReduxKind")
def _tmareduxkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TMAStoreMode(IntEnum):
    """NVVM TMA Store Mode"""

    TILE = 0
    IM2COL = 1

    def __str__(self):
        if self is TMAStoreMode.TILE:
            return "tile"
        if self is TMAStoreMode.IM2COL:
            return "im2col"
        raise ValueError("Unknown TMAStoreMode enum entry.")



@register_attribute_builder("TMAStoreMode")
def _tmastoremode(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05CpMulticast(IntEnum):
    """tcgen05.cp source format"""

    NONE = 0
    WARPX2_02_13 = 1
    WARPX2_01_23 = 2
    WARPX4 = 3

    def __str__(self):
        if self is Tcgen05CpMulticast.NONE:
            return "none"
        if self is Tcgen05CpMulticast.WARPX2_02_13:
            return "warpx2_02_13"
        if self is Tcgen05CpMulticast.WARPX2_01_23:
            return "warpx2_01_23"
        if self is Tcgen05CpMulticast.WARPX4:
            return "warpx4"
        raise ValueError("Unknown Tcgen05CpMulticast enum entry.")



@register_attribute_builder("Tcgen05CpMulticast")
def _tcgen05cpmulticast(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05CpShape(IntEnum):
    """tcgen05.cp Shapes"""

    SHAPE_128x256b = 0
    SHAPE_4x256b = 1
    SHAPE_128x128b = 2
    SHAPE_64x128b = 3
    SHAPE_32x128b = 4

    def __str__(self):
        if self is Tcgen05CpShape.SHAPE_128x256b:
            return "shape_128x256b"
        if self is Tcgen05CpShape.SHAPE_4x256b:
            return "shape_4x256b"
        if self is Tcgen05CpShape.SHAPE_128x128b:
            return "shape_128x128b"
        if self is Tcgen05CpShape.SHAPE_64x128b:
            return "shape_64x128b"
        if self is Tcgen05CpShape.SHAPE_32x128b:
            return "shape_32x128b"
        raise ValueError("Unknown Tcgen05CpShape enum entry.")



@register_attribute_builder("Tcgen05CpShape")
def _tcgen05cpshape(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05CpSrcFormat(IntEnum):
    """tcgen05.cp source format"""

    B6x16_P32 = 0
    B4x16_P64 = 1

    def __str__(self):
        if self is Tcgen05CpSrcFormat.B6x16_P32:
            return "b6x16_p32"
        if self is Tcgen05CpSrcFormat.B4x16_P64:
            return "b4x16_p64"
        raise ValueError("Unknown Tcgen05CpSrcFormat enum entry.")



@register_attribute_builder("Tcgen05CpSrcFormat")
def _tcgen05cpsrcformat(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05FenceKind(IntEnum):
    """NVVM Tcgen05 fence kind"""

    BEFORE_THREAD_SYNC = 0
    AFTER_THREAD_SYNC = 1

    def __str__(self):
        if self is Tcgen05FenceKind.BEFORE_THREAD_SYNC:
            return "before"
        if self is Tcgen05FenceKind.AFTER_THREAD_SYNC:
            return "after"
        raise ValueError("Unknown Tcgen05FenceKind enum entry.")



@register_attribute_builder("Tcgen05FenceKind")
def _tcgen05fencekind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05GroupKind(IntEnum):
    """NVVM Tcgen05 group kind"""

    CTA_1 = 0
    CTA_2 = 1

    def __str__(self):
        if self is Tcgen05GroupKind.CTA_1:
            return "cta_1"
        if self is Tcgen05GroupKind.CTA_2:
            return "cta_2"
        raise ValueError("Unknown Tcgen05GroupKind enum entry.")



@register_attribute_builder("Tcgen05GroupKind")
def _tcgen05groupkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05LdStShape(IntEnum):
    """allowed 32-bit signless integer cases: 0, 1, 2, 3, 4"""

    SHAPE_16X64B = 0
    SHAPE_16X128B = 1
    SHAPE_16X256B = 2
    SHAPE_32X32B = 3
    SHAPE_16X32BX2 = 4

    def __str__(self):
        if self is Tcgen05LdStShape.SHAPE_16X64B:
            return "shape_16x64b"
        if self is Tcgen05LdStShape.SHAPE_16X128B:
            return "shape_16x128b"
        if self is Tcgen05LdStShape.SHAPE_16X256B:
            return "shape_16x256b"
        if self is Tcgen05LdStShape.SHAPE_32X32B:
            return "shape_32x32b"
        if self is Tcgen05LdStShape.SHAPE_16X32BX2:
            return "shape_16x32bx2"
        raise ValueError("Unknown Tcgen05LdStShape enum entry.")



@register_attribute_builder("Tcgen05LdStShape")
def _tcgen05ldstshape(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05MMACollectorBBuffer(IntEnum):
    """tcgen05 MMA Collector Usage Operations"""

    B0 = 0
    B1 = 1
    B2 = 2
    B3 = 3

    def __str__(self):
        if self is Tcgen05MMACollectorBBuffer.B0:
            return "b0"
        if self is Tcgen05MMACollectorBBuffer.B1:
            return "b1"
        if self is Tcgen05MMACollectorBBuffer.B2:
            return "b2"
        if self is Tcgen05MMACollectorBBuffer.B3:
            return "b3"
        raise ValueError("Unknown Tcgen05MMACollectorBBuffer enum entry.")



@register_attribute_builder("Tcgen05MMACollectorBBuffer")
def _tcgen05mmacollectorbbuffer(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05MMACollectorOp(IntEnum):
    """tcgen05 MMA Collector Usage Operations"""

    DISCARD = 0
    LASTUSE = 1
    FILL = 2
    USE = 3

    def __str__(self):
        if self is Tcgen05MMACollectorOp.DISCARD:
            return "discard"
        if self is Tcgen05MMACollectorOp.LASTUSE:
            return "lastuse"
        if self is Tcgen05MMACollectorOp.FILL:
            return "fill"
        if self is Tcgen05MMACollectorOp.USE:
            return "use"
        raise ValueError("Unknown Tcgen05MMACollectorOp enum entry.")



@register_attribute_builder("Tcgen05MMACollectorOp")
def _tcgen05mmacollectorop(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05MMAKind(IntEnum):
    """tcgen05 MMA Supported Types"""

    MXF4NVF4 = 0
    F8F6F4 = 1
    MXF8F6F4 = 2
    INT8 = 4
    F16 = 3
    TF32 = 5
    MXF4 = 7

    def __str__(self):
        if self is Tcgen05MMAKind.MXF4NVF4:
            return "mxf4nvf4"
        if self is Tcgen05MMAKind.F8F6F4:
            return "f8f6f4"
        if self is Tcgen05MMAKind.MXF8F6F4:
            return "mxf8f6f4"
        if self is Tcgen05MMAKind.INT8:
            return "int8"
        if self is Tcgen05MMAKind.F16:
            return "f16"
        if self is Tcgen05MMAKind.TF32:
            return "tf32"
        if self is Tcgen05MMAKind.MXF4:
            return "mxf4"
        raise ValueError("Unknown Tcgen05MMAKind enum entry.")



@register_attribute_builder("Tcgen05MMAKind")
def _tcgen05mmakind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05MMAScaleVecSize(IntEnum):
    """tcgen05.mma.block_scale Scale Vector Sizes"""

    Default = 0
    X1 = 1
    X2 = 2
    X4 = 3

    def __str__(self):
        if self is Tcgen05MMAScaleVecSize.Default:
            return "default"
        if self is Tcgen05MMAScaleVecSize.X1:
            return "x1"
        if self is Tcgen05MMAScaleVecSize.X2:
            return "x2"
        if self is Tcgen05MMAScaleVecSize.X4:
            return "x4"
        raise ValueError("Unknown Tcgen05MMAScaleVecSize enum entry.")



@register_attribute_builder("Tcgen05MMAScaleVecSize")
def _tcgen05mmascalevecsize(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class Tcgen05WaitKind(IntEnum):
    """NVVM Tcgen05 wait kind"""

    LOAD = 0
    STORE = 1

    def __str__(self):
        if self is Tcgen05WaitKind.LOAD:
            return "load"
        if self is Tcgen05WaitKind.STORE:
            return "store"
        raise ValueError("Unknown Tcgen05WaitKind enum entry.")



@register_attribute_builder("Tcgen05WaitKind")
def _tcgen05waitkind(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class TmemLayout(IntEnum):
    """Tensor Memory Layout Enumerated Type"""

    tmem_16dp_128bit = 0
    tmem_16dp_256bit = 1
    tmem_32dp_32bit = 2
    tmem_16dp_64bit = 3
    tmem_16dp_32bit_t0_t15 = 4
    tmem_16dp_32bit_t16_t31 = 5

    def __str__(self):
        if self is TmemLayout.tmem_16dp_128bit:
            return "tmem_16dp_128bit"
        if self is TmemLayout.tmem_16dp_256bit:
            return "tmem_16dp_256bit"
        if self is TmemLayout.tmem_32dp_32bit:
            return "tmem_32dp_32bit"
        if self is TmemLayout.tmem_16dp_64bit:
            return "tmem_16dp_64bit"
        if self is TmemLayout.tmem_16dp_32bit_t0_t15:
            return "tmem_16dp_32bit_t0_t15"
        if self is TmemLayout.tmem_16dp_32bit_t16_t31:
            return "tmem_16dp_32bit_t16_t31"
        raise ValueError("Unknown TmemLayout enum entry.")



@register_attribute_builder("TmemLayout")
def _tmemlayout(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class WGMMAScaleIn(IntEnum):
    """WGMMA overflow options"""

    one = 1
    neg = auto()

    def __str__(self):
        if self is WGMMAScaleIn.one:
            return "one"
        if self is WGMMAScaleIn.neg:
            return "neg"
        raise ValueError("Unknown WGMMAScaleIn enum entry.")



@register_attribute_builder("WGMMAScaleIn")
def _wgmmascalein(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class WGMMAScaleOut(IntEnum):
    """WGMMA input predicate"""

    zero = 0
    one = 1

    def __str__(self):
        if self is WGMMAScaleOut.zero:
            return "zero"
        if self is WGMMAScaleOut.one:
            return "one"
        raise ValueError("Unknown WGMMAScaleOut enum entry.")



@register_attribute_builder("WGMMAScaleOut")
def _wgmmascaleout(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class WGMMATypes(IntEnum):
    """NVVM WGMMA types"""

    f16 = 0
    tf32 = 1
    u8 = 2
    s8 = 3
    b1 = 4
    bf16 = 5
    e4m3 = 6
    e5m2 = 7
    f32 = 8
    s32 = 9

    def __str__(self):
        if self is WGMMATypes.f16:
            return "f16"
        if self is WGMMATypes.tf32:
            return "tf32"
        if self is WGMMATypes.u8:
            return "u8"
        if self is WGMMATypes.s8:
            return "s8"
        if self is WGMMATypes.b1:
            return "b1"
        if self is WGMMATypes.bf16:
            return "bf16"
        if self is WGMMATypes.e4m3:
            return "e4m3"
        if self is WGMMATypes.e5m2:
            return "e5m2"
        if self is WGMMATypes.f32:
            return "f32"
        if self is WGMMATypes.s32:
            return "s32"
        raise ValueError("Unknown WGMMATypes enum entry.")



@register_attribute_builder("WGMMATypes")
def _wgmmatypes(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

@register_attribute_builder("AtomicOpKindAttr")
def _atomicopkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm<atomic_op {str(x)}>', context=context)

@register_attribute_builder("BarrierReduxKindAttr")
def _barrierreduxkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.barrier_redux_kind<{str(x)}>', context=context)

@register_attribute_builder("BlockScaleFormatAttr")
def _blockscaleformatattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.block_scale_format<{str(x)}>', context=context)

@register_attribute_builder("CVTPackFloatKindAttr")
def _cvtpackfloatkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.packfloat_type<{str(x)}>', context=context)

@register_attribute_builder("CpAsyncBulkTensorLoadModeAttr")
def _cpasyncbulktensorloadmodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.load_mode<{str(x)}>', context=context)

@register_attribute_builder("EvictKindAttr")
def _evictkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.evict_kind<{str(x)}>', context=context)

@register_attribute_builder("FPRoundingModeAttr")
def _fproundingmodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.fp_rnd_mode<{str(x)}>', context=context)

@register_attribute_builder("L2PrefetchSizeAttr")
def _l2prefetchsizeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.l2_prefetch<{str(x)}>', context=context)

@register_attribute_builder("LoadCacheModifierAttr")
def _loadcachemodifierattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm<load_cache_modifier {str(x)}>', context=context)

@register_attribute_builder("LoadCacheModifierAttrExt")
def _loadcachemodifierattrext(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.load_cache_modifier_ext<{str(x)}>', context=context)

@register_attribute_builder("LoadShapeAttr")
def _loadshapeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.load_shape<{str(x)}>', context=context)

@register_attribute_builder("LoadSrcFormatAttr")
def _loadsrcformatattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.load_src_format<{str(x)}>', context=context)

@register_attribute_builder("MBarrierScopeKindAttr")
def _mbarrierscopekindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mbar_scope<{str(x)}>', context=context)

@register_attribute_builder("MBarrierSpaceKindAttr")
def _mbarrierspacekindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mbar_space<{str(x)}>', context=context)

@register_attribute_builder("MBarrierTxnKindAttr")
def _mbarriertxnkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mbar_txn_kind<{str(x)}>', context=context)

@register_attribute_builder("MBarrierWaitKindAttr")
def _mbarrierwaitkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mbar_wait<{str(x)}>', context=context)

@register_attribute_builder("MMAB1OpAttr")
def _mmab1opattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mma_b1op<{str(x)}>', context=context)

@register_attribute_builder("MMACtaCountAttr")
def _mmactacountattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mma_cta_count<{str(x)}>', context=context)

@register_attribute_builder("MMAFragAttr")
def _mmafragattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mma_frag<{str(x)}>', context=context)

@register_attribute_builder("MMAIntOverflowAttr")
def _mmaintoverflowattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mma_int_overflow<{str(x)}>', context=context)

@register_attribute_builder("MMALayoutAttr")
def _mmalayoutattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mma_layout<{str(x)}>', context=context)

@register_attribute_builder("MMATypesAttr")
def _mmatypesattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mma_type<{str(x)}>', context=context)

@register_attribute_builder("MemOrderKindAttr")
def _memorderkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mem_order<{str(x)}>', context=context)

@register_attribute_builder("MemScopeKindAttr")
def _memscopekindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.mem_scope<{str(x)}>', context=context)

@register_attribute_builder("MulModeAttr")
def _mulmodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm<mul_mode {str(x)}>', context=context)

@register_attribute_builder("ProxyKindAttr")
def _proxykindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.proxy_kind<{str(x)}>', context=context)

@register_attribute_builder("ReductionOpAttr")
def _reductionopattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.red_op<{str(x)}>', context=context)

@register_attribute_builder("ReductionTypeAttr")
def _reductiontypeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.red_type<{str(x)}>', context=context)

@register_attribute_builder("ReduxKindAttr")
def _reduxkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm<redux_kind {str(x)}>', context=context)

@register_attribute_builder("RoundingModeKindAttr")
def _roundingmodekindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.rnd<{str(x)}>', context=context)

@register_attribute_builder("SaturationModeAttr")
def _saturationmodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.sat_mode<{str(x)}>', context=context)

@register_attribute_builder("SaturationModeKindAttr")
def _saturationmodekindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.sat<{str(x)}>', context=context)

@register_attribute_builder("ScaleVecSizeAttr")
def _scalevecsizeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.scale_vec_size<{str(x)}>', context=context)

@register_attribute_builder("SetMaxRegisterActionAttr")
def _setmaxregisteractionattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm<action {str(x)}>', context=context)

@register_attribute_builder("SharedSpaceAttr")
def _sharedspaceattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.shared_space<{str(x)}>', context=context)

@register_attribute_builder("ShflKindAttr")
def _shflkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm<shfl_kind {str(x)}>', context=context)

@register_attribute_builder("SparsityFormatAttr")
def _sparsityformatattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.sparsity_format<{str(x)}>', context=context)

@register_attribute_builder("StateSpaceAttr")
def _statespaceattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.state_space<{str(x)}>', context=context)

@register_attribute_builder("StoreCacheModifierAttr")
def _storecachemodifierattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.store_cache_modifier<{str(x)}>', context=context)

@register_attribute_builder("StoreShapeAttr")
def _storeshapeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.store_shape<{str(x)}>', context=context)

@register_attribute_builder("TCBarParamEnumAttr")
def _tcbarparamenumattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.TCBarParam<{str(x)}>', context=context)

@register_attribute_builder("TMAReduxKindAttr")
def _tmareduxkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tma_redux_kind<{str(x)}>', context=context)

@register_attribute_builder("TMAStoreModeAttr")
def _tmastoremodeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tma_store_mode<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05CpMulticastAttr")
def _tcgen05cpmulticastattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_cp_multicast<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05CpShapeAttr")
def _tcgen05cpshapeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_cp_shape<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05CpSrcFormatAttr")
def _tcgen05cpsrcformatattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_cp_format<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05FenceKindAttr")
def _tcgen05fencekindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_fence<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05GroupKindAttr")
def _tcgen05groupkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_group<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05LdStShapeAttr")
def _tcgen05ldstshapeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_ldst_shape<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05MMACollectorBBufferAttr")
def _tcgen05mmacollectorbbufferattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_mma_collectorb<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05MMACollectorOpAttr")
def _tcgen05mmacollectoropattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_mma_collectorop<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05MMAKindAttr")
def _tcgen05mmakindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_mma_kind<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05MMAScaleVecSizeAttr")
def _tcgen05mmascalevecsizeattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_mma_scale_vec<{str(x)}>', context=context)

@register_attribute_builder("Tcgen05WaitKindAttr")
def _tcgen05waitkindattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.tcgen05_wait<{str(x)}>', context=context)

@register_attribute_builder("TmemLayoutEnumAttr")
def _tmemlayoutenumattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.TmemLayout<{str(x)}>', context=context)

@register_attribute_builder("WGMMAScaleInAttr")
def _wgmmascaleinattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.wgmma_scale_in<{str(x)}>', context=context)

@register_attribute_builder("WGMMAScaleOutAttr")
def _wgmmascaleoutattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.wgmma_scale_out<{str(x)}>', context=context)

@register_attribute_builder("WGMMATypesAttr")
def _wgmmatypesattr(x, context):
    return _ods_ir.Attribute.parse(f'#nvvm.wgmma_type<{str(x)}>', context=context)

