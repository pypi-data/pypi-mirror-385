
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class AddressSpace(IntEnum):
    """Address spaces for CuTe memrefs and pointers"""

    generic = 0
    gmem = 1
    smem = 3
    rmem = 5
    tmem = 6

    def __str__(self):
        if self is AddressSpace.generic:
            return "generic"
        if self is AddressSpace.gmem:
            return "gmem"
        if self is AddressSpace.smem:
            return "smem"
        if self is AddressSpace.rmem:
            return "rmem"
        if self is AddressSpace.tmem:
            return "tmem"
        raise ValueError("Unknown AddressSpace enum entry.")



@register_attribute_builder("CuteAddressSpaceEnum")
def _cuteaddressspaceenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class CopyOperand(IntEnum):
    """Copy operand ID"""

    src = 0
    dst = 1

    def __str__(self):
        if self is CopyOperand.src:
            return "src"
        if self is CopyOperand.dst:
            return "dst"
        raise ValueError("Unknown CopyOperand enum entry.")



@register_attribute_builder("CuteCopyOperandEnum")
def _cutecopyoperandenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MajorMode(IntEnum):
    """Major mode for MMA operations"""

    k = 0
    mn = 1

    def __str__(self):
        if self is MajorMode.k:
            return "k"
        if self is MajorMode.mn:
            return "mn"
        raise ValueError("Unknown MajorMode enum entry.")



@register_attribute_builder("CuteMajorModeEnum")
def _cutemajormodeenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class MmaOperand(IntEnum):
    """MMA operand ID"""

    A = 0
    B = 1
    C = 2
    D = 3
    SFA = 4
    SFB = 5
    E = 6
    LUTB = 7

    def __str__(self):
        if self is MmaOperand.A:
            return "A"
        if self is MmaOperand.B:
            return "B"
        if self is MmaOperand.C:
            return "C"
        if self is MmaOperand.D:
            return "D"
        if self is MmaOperand.SFA:
            return "SFA"
        if self is MmaOperand.SFB:
            return "SFB"
        if self is MmaOperand.E:
            return "E"
        if self is MmaOperand.LUTB:
            return "LUTB"
        raise ValueError("Unknown MmaOperand enum entry.")



@register_attribute_builder("CuteMmaOperandEnum")
def _cutemmaoperandenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

class ReductionOp(IntEnum):
    """Op for cute reduce operations"""

    ADD = 0
    MUL = 1
    MIN = 2
    MAX = 3

    def __str__(self):
        if self is ReductionOp.ADD:
            return "ADD"
        if self is ReductionOp.MUL:
            return "MUL"
        if self is ReductionOp.MIN:
            return "MIN"
        if self is ReductionOp.MAX:
            return "MAX"
        raise ValueError("Unknown ReductionOp enum entry.")



@register_attribute_builder("CuteReductionOpEnum")
def _cutereductionopenum(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

@register_attribute_builder("CuteReductionOpAttr")
def _cutereductionopattr(x, context):
    return _ods_ir.Attribute.parse(f'#cute.reduction_op<{str(x)}>', context=context)

