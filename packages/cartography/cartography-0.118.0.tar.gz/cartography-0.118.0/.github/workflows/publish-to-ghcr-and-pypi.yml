name: Publish Docker üê≥ images üì¶ to GitHub Container Registry

on:
  release:
    types: [created]
  workflow_dispatch: {}

# Explicitly grant the `secrets.GITHUB_TOKEN` no permissions.
permissions: {}

jobs:
  # 1. Publish to PyPI
  build-and-publish-to-pypi:
    name: Build and publish Python üêç distributions üì¶ to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.10"
      - name: Install uv
        uses: astral-sh/setup-uv@3259c6206f993105e3a61b142c2d97bf4b9ef83d # v7.1.0
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Build a binary wheel and a source tarball
        run: uv build
      - name: Publish distribution üì¶ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        run: uv publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}

  # 2. Publish to GHCR
  build-and-publish-to-ghcr:
    # Explicitly grant the `secrets.GITHUB_TOKEN` permissions.
    name: Build and publish Docker üê≥ images üì¶ to GitHub Container Registry
    needs: build-and-publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      # Grant the ability to write to GitHub Packages (push Docker images to
      # GitHub Container Registry).
      packages: write
    steps:
      # See: https://docs.docker.com/build/ci/github-actions/multi-platform/#build-and-load-multi-platform-images
      - name: Set up Docker
        uses: docker/setup-docker-action@b60f85385d03ac8acfca6d9996982511d8620a19 # v4.3.0
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ghcr.io/${{ github.repository }}

      # Install QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          # This is the user that triggered the Workflow. In this case, it will
          # either be the user whom created the Release or manually triggered
          # the workflow_dispatch.
          username: ${{ github.actor }}
          # `secrets.GITHUB_TOKEN` is a secret that's automatically generated by
          # GitHub Actions at the start of a workflow run to identify the job.
          # This is used to authenticate against GitHub Container Registry.
          # See https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret
          # for more detailed information.
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get the cartography version from the GitHub release event metadata and verify it's available on PyPI
      - name: Extract version and verify PyPI availability
        id: version
        run: |
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          VERSION="${{ github.event.release.tag_name }}"
          echo "Waiting for cartography==$VERSION to be available on PyPI..."

          # Poll PyPI for up to 5 minutes
          MAX_ATTEMPTS=30
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if pip index versions cartography 2>&1 | grep -q "$VERSION"; then
              echo "‚úÖ cartography==$VERSION is now available on PyPI"
              exit 0
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Package not yet available, waiting 10 seconds..."
            sleep 10
          done

          echo "‚ùå Failed to verify cartography==$VERSION on PyPI after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: Dockerfile
          context: .
          push: true # push the image to ghcr
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          # e.g. '==0.98.0'
          build-args: VERSION_SPECIFIER===${{ env.VERSION }}
