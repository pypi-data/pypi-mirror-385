[build-system]
requires = ["setuptools>=78.1.1", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "pynxtools-spm"
dynamic = ["version"]
authors = [
    { name = "The NOMAD Authors" },
]
description = "pynxtools-spm: A pynxtools plugin for SPM (Scanning Probe Microscopy) data readers"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies = [
    "pynxtools>=0.12.0",
    "findiff>=0.11.1",
    # "pySPM==0.6.2",  # SPM file reader for Bruker files use it when you have Bruker files
    "matplotlib",
    "scipy",
    "hvplot",
    "spym>=0.9.2", # tested version `spym==0.9.2`
    "tzlocal",
]

[project.urls]
"Homepage" = "https://github.com/FAIRmat-NFDI/pynxtools-spm"
"Parent Project" = "https://github.com/FAIRmat-NFDI"

[project.optional-dependencies]
dev = [
    "mypy",
    "ruff>=0.14.0",
    "pytest",
    "pre-commit"
]

docs = [
    "mkdocs",
    "mkdocs-mermaid2-plugin",
    "mkdocstrings",
    "mkdocs-material",
    "mkdocs-macros-plugin",
    "mkdocs-simple-hooks",
]

[project.entry-points."pynxtools.reader"]
spm = "pynxtools_spm.reader:SPMReader"

[project.entry-points."nomad.plugin"]
sts_example = "pynxtools_spm.nomad.entrypoints:sts_example"
stm_example = "pynxtools_spm.nomad.entrypoints:stm_example"
afm_example = "pynxtools_spm.nomad.entrypoints:afm_example"


[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"

[tool.ruff]
include = ["src/pynxtools_spm/*.py", "tests/*.py"]
lint.select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "PL", # pylint
    "NPY201", # upgrade to numpy>2
]
lint.ignore = [
    "E501", # Line too long ({width} > {limit} characters)
    "E701", # Multiple statements on one line (colon)
    "E731", # Do not assign a lambda expression, use a def
    "E402",  # Module level import not at top of file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used instead of constant
    "PLW0603", # Using the global statement
    "PLW2901", # redefined-loop-name
    "PLR1714", # consider-using-in
    "PLR5501", # else-if-used
    "PLC0415", # import outside-toplevel
]
lint.fixable = ["ALL"]

[tool.mypy]
strict = false
ignore_missing_imports = true
follow_imports = "silent"
no_strict_optional = true
disable_error_code = "import, annotation-unchecked"
