# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _shared
else:
    import _shared

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _shared.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _shared.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _shared.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _shared.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _shared.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _shared.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _shared.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _shared.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _shared.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _shared.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _shared.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _shared.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _shared.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _shared.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _shared.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _shared.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _shared.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _shared:
_shared.SwigPyIterator_swigregister(SwigPyIterator)
class ErrorStatus(object):
    r"""Describes the types of errors."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MMIND_STATUS_SUCCESS = _shared.ErrorStatus_MMIND_STATUS_SUCCESS
    r""" Success."""
    MMIND_STATUS_INVALID_DEVICE = _shared.ErrorStatus_MMIND_STATUS_INVALID_DEVICE
    r"""
    A Camera or Profiler object not connected to an actual device is used, or an IP
    address of a non Mech-Eye device is input to the connect() method.
    """
    MMIND_STATUS_DEVICE_OFFLINE = _shared.ErrorStatus_MMIND_STATUS_DEVICE_OFFLINE
    r""" Device is offline. Network issue may be present."""
    MMIND_STATUS_NO_SUPPORT_ERROR = _shared.ErrorStatus_MMIND_STATUS_NO_SUPPORT_ERROR
    r"""
    The operation is not supported. Possible reasons include: 1. The firmware
    version is inconsistent with the version of Mech-Eye API; 2. The device model
    does not provide the corresponding function.
    """
    MMIND_STATUS_OUT_OF_RANGE_ERROR = _shared.ErrorStatus_MMIND_STATUS_OUT_OF_RANGE_ERROR
    r"""
    The input device parameter value exceeds the
    settable value range.
    """
    MMIND_STATUS_PARAMETER_ERROR = _shared.ErrorStatus_MMIND_STATUS_PARAMETER_ERROR
    r"""
    The input device parameter name does not exist, or the data type of the device
    parameter does not match the method.
    """
    MMIND_STATUS_NO_DATA_ERROR = _shared.ErrorStatus_MMIND_STATUS_NO_DATA_ERROR
    r""" The image data is empty. Some error may have occurred on the device."""
    MMIND_STATUS_INVALID_INPUT_ERROR = _shared.ErrorStatus_MMIND_STATUS_INVALID_INPUT_ERROR
    r"""
    An invalid input not covered by other error types is provided, such as a
    nonexisting name of device user set.
    """
    MMIND_STATUS_FILE_IO_ERROR = _shared.ErrorStatus_MMIND_STATUS_FILE_IO_ERROR
    r"""
    An error occurred when an operation related to reading or writing a file was
    executed, such as invalid filename and incorrect file type.
    """
    MMIND_STATUS_TIMEOUT_ERROR = _shared.ErrorStatus_MMIND_STATUS_TIMEOUT_ERROR
    r"""
    The set timeout period exceeded when an operation such as connecting
    to the device and retrieving data was performed.
    """
    MMIND_HANDEYE_CALIBRATION_EXECUTION_ERROR = _shared.ErrorStatus_MMIND_HANDEYE_CALIBRATION_EXECUTION_ERROR
    r""" An error occurred while executing the hand-eye calibration."""
    MMIND_STATUS_REPLY_WITH_ERROR = _shared.ErrorStatus_MMIND_STATUS_REPLY_WITH_ERROR
    r""" The reply from the device contains errors."""
    MMIND_STATUS_ACQUISITION_TRIGGER_WAIT = _shared.ErrorStatus_MMIND_STATUS_ACQUISITION_TRIGGER_WAIT
    r""" Data acquisition has not been started."""
    MMIND_STATUS_DEVICE_BUSY = _shared.ErrorStatus_MMIND_STATUS_DEVICE_BUSY
    r"""
    The callback function was registered again
    before the ongoing data acquisition stopped.
    """
    MMIND_STATUS_INVALID_CALLBACKFUNC = _shared.ErrorStatus_MMIND_STATUS_INVALID_CALLBACKFUNC
    r""" The registered callback function is invalid."""
    MMIND_STATUS_RESPONSE_PARSE_ERROR = _shared.ErrorStatus_MMIND_STATUS_RESPONSE_PARSE_ERROR
    r""" It is error to parse the response from device."""
    MMIND_STATUS_PROFILE_POST_PROCESS_ERROR = _shared.ErrorStatus_MMIND_STATUS_PROFILE_POST_PROCESS_ERROR
    r""" An error occurred while profile post process."""
    MMIND_STATUS_MESSAGE_CHANNEL_ERROR = _shared.ErrorStatus_MMIND_STATUS_MESSAGE_CHANNEL_ERROR
    r"""
    An error occurred when the device was trying
    to establish/close the message channel.
    """
    MMIND_STATUS_DUPLICATE_REGISTRATION = _shared.ErrorStatus_MMIND_STATUS_DUPLICATE_REGISTRATION
    r"""
    A callback function for the specific event has already been registered. The
    same event cannot have more than one callback function registered
    simultaneously.
    """
    MMIND_STATUS_MESSAGE_CHANNEL_OCCUPPIED = _shared.ErrorStatus_MMIND_STATUS_MESSAGE_CHANNEL_OCCUPPIED
    r"""
    Another client program has already established a message channel with the
    device.
    """
    MMIND_STATUS_BUFFER_FULL = _shared.ErrorStatus_MMIND_STATUS_BUFFER_FULL
    r""" The image buffer is full."""

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor.

        |

        *Overload 2:*

        Constructor.
        """
        _shared.ErrorStatus_swiginit(self, _shared.new_ErrorStatus(*args))

    def is_ok(self):
        r"""Returns true if the operation succeeded."""
        return _shared.ErrorStatus_is_ok(self)
    error_code = property(_shared.ErrorStatus_error_code_get, _shared.ErrorStatus_error_code_set, doc=r"""Error code.""")
    error_description = property(_shared.ErrorStatus_error_description_get, _shared.ErrorStatus_error_description_set, doc=r"""Detailed error message.""")
    __swig_destroy__ = _shared.delete_ErrorStatus

# Register ErrorStatus in _shared:
_shared.ErrorStatus_swigregister(ErrorStatus)

def show_error(*args):
    r"""Prints the error code and its description."""
    return _shared.show_error(*args)
PI = _shared.PI

CoordinateUnit_Millimeter = _shared.CoordinateUnit_Millimeter

CoordinateUnit_Meter = _shared.CoordinateUnit_Meter

FileFormat_PLY = _shared.FileFormat_PLY

FileFormat_PCD = _shared.FileFormat_PCD

FileFormat_CSV = _shared.FileFormat_CSV

class Size(object):
    r"""Describes a two-dimensional size with a width and a height."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Size self) -> Size
        __init__(Size self, size_t width, size_t height) -> Size
        """
        _shared.Size_swiginit(self, _shared.new_Size(*args))

    def __eq__(self, other):
        r"""__eq__(Size self, Size other) -> bool"""
        return _shared.Size___eq__(self, other)
    width = property(_shared.Size_width_get, _shared.Size_width_set, doc=r"""width : size_t""")
    height = property(_shared.Size_height_get, _shared.Size_height_set, doc=r"""height : size_t""")
    __swig_destroy__ = _shared.delete_Size

# Register Size in _shared:
_shared.Size_swigregister(Size)
class SizeF(object):
    r"""
    Describes a two-dimensional size with a width and a height using double-precision
    floating-point numbers.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SizeF self) -> SizeF
        __init__(SizeF self, double width, double height) -> SizeF
        """
        _shared.SizeF_swiginit(self, _shared.new_SizeF(*args))

    def __eq__(self, other):
        r"""__eq__(SizeF self, SizeF other) -> bool"""
        return _shared.SizeF___eq__(self, other)
    width = property(_shared.SizeF_width_get, _shared.SizeF_width_set, doc=r"""width : double""")
    height = property(_shared.SizeF_height_get, _shared.SizeF_height_set, doc=r"""height : double""")
    __swig_destroy__ = _shared.delete_SizeF

# Register SizeF in _shared:
_shared.SizeF_swigregister(SizeF)
class ROI(object):
    r"""Describes a region of interest (ROI)."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ROI self) -> ROI
        __init__(ROI self, unsigned int upperLeftX, unsigned int upperLeftY, size_t width, size_t height) -> ROI
        """
        _shared.ROI_swiginit(self, _shared.new_ROI(*args))

    def __eq__(self, other):
        r"""__eq__(ROI self, ROI other) -> bool"""
        return _shared.ROI___eq__(self, other)
    upper_left_x = property(_shared.ROI_upper_left_x_get, _shared.ROI_upper_left_x_set, doc=r""" The column coordinate of the upper-left corner of the ROI.""")
    upper_left_y = property(_shared.ROI_upper_left_y_get, _shared.ROI_upper_left_y_set, doc=r""" The row coordinate of the upper-left corner of the ROI.""")
    width = property(_shared.ROI_width_get, _shared.ROI_width_set, doc=r"""width : size_t""")
    height = property(_shared.ROI_height_get, _shared.ROI_height_set, doc=r"""height : size_t""")
    __swig_destroy__ = _shared.delete_ROI

# Register ROI in _shared:
_shared.ROI_swigregister(ROI)
class ProfileROI(object):
    r"""Describes the region of interest (ROI) of a laser profiler."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProfileROI self) -> ProfileROI
        __init__(ProfileROI self, double xAxisCenter, double width, double height) -> ProfileROI
        """
        _shared.ProfileROI_swiginit(self, _shared.new_ProfileROI(*args))

    def __eq__(self, other):
        r"""__eq__(ProfileROI self, ProfileROI other) -> bool"""
        return _shared.ProfileROI___eq__(self, other)
    x_axis_center = property(_shared.ProfileROI_x_axis_center_get, _shared.ProfileROI_x_axis_center_set, doc=r""" The position (in mm) of the ROI's center on the X-axis.""")
    width = property(_shared.ProfileROI_width_get, _shared.ProfileROI_width_set, doc=r""" The X-axis width (in mm) of the ROI.""")
    height = property(_shared.ProfileROI_height_get, _shared.ProfileROI_height_set, doc=r""" The Z-axis height (in mm) of the ROI.""")
    __swig_destroy__ = _shared.delete_ProfileROI

# Register ProfileROI in _shared:
_shared.ProfileROI_swigregister(ProfileROI)
class PointXYZ(object):
    r"""Represents a point in 'UntexturedPointCloud' with the coordinate (x, y, z) information."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_shared.PointXYZ_x_get, _shared.PointXYZ_x_set, doc=r"""x : float""")
    y = property(_shared.PointXYZ_y_get, _shared.PointXYZ_y_set, doc=r"""y : float""")
    z = property(_shared.PointXYZ_z_get, _shared.PointXYZ_z_set, doc=r"""z : float""")

    def __init__(self):
        r"""__init__(PointXYZ self) -> PointXYZ"""
        _shared.PointXYZ_swiginit(self, _shared.new_PointXYZ())
    __swig_destroy__ = _shared.delete_PointXYZ

# Register PointXYZ in _shared:
_shared.PointXYZ_swigregister(PointXYZ)
class FrameTransformation(object):
    r"""
    Defines the rigid body transformations from one reference frame to another, including the
    rotation matrix and translation vector.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FrameTransformation self) -> FrameTransformation
        __init__(FrameTransformation self, double rotateX, double rotateY, double rotateZ, double translateX, double translateY, double translateZ) -> FrameTransformation
        __init__(FrameTransformation self, FrameTransformation rhs) -> FrameTransformation
        """
        _shared.FrameTransformation_swiginit(self, _shared.new_FrameTransformation(*args))
    Axis_X = _shared.FrameTransformation_Axis_X
    
    Axis_Y = _shared.FrameTransformation_Axis_Y
    
    Axis_Z = _shared.FrameTransformation_Axis_Z
    

    def rotate(self, theta, rotationAxis):
        r"""
        Rotates the reference frame of the point cloud.
        :param [in]:  theta The amount of rotation.
        :param [in]:  rotationAxis  The axis around which the rotation is
            performed. X-, Y-, and Z-Axes can be input.
        """
        return _shared.FrameTransformation_rotate(self, theta, rotationAxis)

    def translate(self, x, y, z):
        r"""
        Translates the reference frame of the point cloud.
        :param [in]: x The amount of translation (in mm) along the X-axis.
        :param [in]: y The amount of translation (in mm) along the Y-axis.
        :param [in]: z The amount of translation (in mm) along the Z-axis.
        """
        return _shared.FrameTransformation_translate(self, x, y, z)

    def is_valid(self):
        r"""Check if a custom reference frame has been set using Mech-Eye Viewer"""
        return _shared.FrameTransformation_is_valid(self)
    rotation = property(_shared.FrameTransformation_rotation_get, _shared.FrameTransformation_rotation_set, doc=r""" 3*3 rotation matrix.""")
    translation = property(_shared.FrameTransformation_translation_get, _shared.FrameTransformation_translation_set, doc=r""" 3*1 translation vector in [x(mm), y(mm), z(mm)].""")
    __swig_destroy__ = _shared.delete_FrameTransformation

# Register FrameTransformation in _shared:
_shared.FrameTransformation_swigregister(FrameTransformation)
IpAssignmentMethod_Unknown = _shared.IpAssignmentMethod_Unknown

IpAssignmentMethod_DHCP = _shared.IpAssignmentMethod_DHCP

IpAssignmentMethod_Static = _shared.IpAssignmentMethod_Static

IpAssignmentMethod_LLA = _shared.IpAssignmentMethod_LLA

Platform_PLATFORM_A = _shared.Platform_PLATFORM_A

Platform_PLATFORM_B = _shared.Platform_PLATFORM_B

Platform_PLATFORM_C = _shared.Platform_PLATFORM_C

Platform_PLATFORM_D = _shared.Platform_PLATFORM_D

Platform_PLATFORM_E = _shared.Platform_PLATFORM_E

Platform_PLATFORM_F = _shared.Platform_PLATFORM_F

Platform_PLATFORM_G = _shared.Platform_PLATFORM_G

Platform_PLATFORM_H = _shared.Platform_PLATFORM_H


def ip_assignment_method_to_string(type):
    r"""ip_assignment_method_to_string(mmind::eye::IpAssignmentMethod type) -> std::string"""
    return _shared.ip_assignment_method_to_string(type)
class RangeFloat(object):
    r"""Describes a value range."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangeFloat self) -> RangeFloat
        __init__(RangeFloat self, float min, float max) -> RangeFloat
        """
        _shared.RangeFloat_swiginit(self, _shared.new_RangeFloat(*args))
    min = property(_shared.RangeFloat_min_get, _shared.RangeFloat_min_set, doc=r"""min : float""")
    max = property(_shared.RangeFloat_max_get, _shared.RangeFloat_max_set, doc=r"""max : float""")
    __swig_destroy__ = _shared.delete_RangeFloat

# Register RangeFloat in _shared:
_shared.RangeFloat_swigregister(RangeFloat)
class RangeInt(object):
    r"""Describes a value range."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangeInt self) -> RangeInt
        __init__(RangeInt self, int min, int max) -> RangeInt
        """
        _shared.RangeInt_swiginit(self, _shared.new_RangeInt(*args))
    min = property(_shared.RangeInt_min_get, _shared.RangeInt_min_set, doc=r"""min : int""")
    max = property(_shared.RangeInt_max_get, _shared.RangeInt_max_set, doc=r"""max : int""")
    __swig_destroy__ = _shared.delete_RangeInt

# Register RangeInt in _shared:
_shared.RangeInt_swigregister(RangeInt)
class RangeDouble(object):
    r"""Describes a value range."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangeDouble self) -> RangeDouble
        __init__(RangeDouble self, double min, double max) -> RangeDouble
        """
        _shared.RangeDouble_swiginit(self, _shared.new_RangeDouble(*args))
    min = property(_shared.RangeDouble_min_get, _shared.RangeDouble_min_set, doc=r"""min : double""")
    max = property(_shared.RangeDouble_max_get, _shared.RangeDouble_max_set, doc=r"""max : double""")
    __swig_destroy__ = _shared.delete_RangeDouble

# Register RangeDouble in _shared:
_shared.RangeDouble_swigregister(RangeDouble)
class Parameter(object):
    r"""Represents a parameter of the device."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    _Int = _shared.Parameter__Int
    r""" Integer type."""
    _Float = _shared.Parameter__Float
    r""" Double type."""
    _Bool = _shared.Parameter__Bool
    r""" Boolean type."""
    _Enum = _shared.Parameter__Enum
    r""" Enumeration type."""
    _Roi = _shared.Parameter__Roi
    r""" %ROI type. See 'ROI' for details."""
    _Range = _shared.Parameter__Range
    r""" %Range type. See 'Range' for details."""
    _FloatArray = _shared.Parameter__FloatArray
    r""" Vector of double types."""
    _RoiArray = _shared.Parameter__RoiArray
    r""" Vector of ROI types."""
    _ProfileRoi = _shared.Parameter__ProfileRoi
    r""" Profile ROI type. See 'ProfileROI' for details."""
    __swig_destroy__ = _shared.delete_Parameter

    def name(self):
        r"""Returns the name of the device parameter."""
        return _shared.Parameter_name(self)

    def type(self):
        r"""Returns the data type of the device parameter."""
        return _shared.Parameter_type(self)

    def description(self):
        r"""Returns the description of the device parameter."""
        return _shared.Parameter_description(self)

    def is_writable(self):
        r"""Returns a Boolean value that indicates the write permission of the device parameter."""
        return _shared.Parameter_is_writable(self)

    def is_readable(self):
        r"""Returns a Boolean value that indicates the read permission of the device parameter."""
        return _shared.Parameter_is_readable(self)

# Register Parameter in _shared:
_shared.Parameter_swigregister(Parameter)
class IntParameter(Parameter):
    r"""Represents an _Int-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        r"""Gets the current value of the device parameter."""
        return _shared.IntParameter_get_value(self)

    def set_value(self, value):
        r"""Sets the value of the device parameter."""
        return _shared.IntParameter_set_value(self, value)

    def get_min(self):
        r"""Gets the minimum settable value of the device parameter."""
        return _shared.IntParameter_get_min(self)

    def get_max(self):
        r"""Gets the maximum settable value of the device parameter."""
        return _shared.IntParameter_get_max(self)

    def get_step(self):
        r"""Gets the adjustment step size of the device parameter."""
        return _shared.IntParameter_get_step(self)

    def get_unit(self):
        r"""Gets the unit of the device parameter."""
        return _shared.IntParameter_get_unit(self)

    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> IntParameter"""
        return _shared.IntParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_IntParameter

# Register IntParameter in _shared:
_shared.IntParameter_swigregister(IntParameter)
class FloatParameter(Parameter):
    r"""Represents a _Float-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        r"""Gets the current value of the device parameter."""
        return _shared.FloatParameter_get_value(self)

    def set_value(self, value):
        r"""Sets the value of the device parameter."""
        return _shared.FloatParameter_set_value(self, value)

    def get_min(self):
        r"""Gets the minimum settable value of the device parameter."""
        return _shared.FloatParameter_get_min(self)

    def get_max(self):
        r"""Gets the maximum settable value of the device parameter."""
        return _shared.FloatParameter_get_max(self)

    def get_step(self):
        r"""Gets the adjustment step size of the device parameter."""
        return _shared.FloatParameter_get_step(self)

    def get_unit(self):
        r"""Gets the unit of the device parameter."""
        return _shared.FloatParameter_get_unit(self)

    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> FloatParameter"""
        return _shared.FloatParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_FloatParameter

# Register FloatParameter in _shared:
_shared.FloatParameter_swigregister(FloatParameter)
class EnumParameter(Parameter):
    r"""Represents an _Enum-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        r"""Gets the current value of the device parameter in the form of the integer value."""
        return _shared.EnumParameter_get_value(self)

    def get_value_string(self):
        r"""Gets the current value of the device parameter in the form of a string."""
        return _shared.EnumParameter_get_value_string(self)

    def set_value(self, *args):
        r"""
        *Overload 1:*

        Sets the value of the device parameter by inputting the integer value of an
        enumerator.

        |

        *Overload 2:*

        Sets the value of the device parameter by inputting a string.
        """
        return _shared.EnumParameter_set_value(self, *args)

    def get_values(self):
        map = MapStringInt()
        error = _shared.EnumParameter_get_values(self, map)
        values = {}
        for key in map.keys():
            values[key] = map[key]
        return error, values



    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> EnumParameter"""
        return _shared.EnumParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_EnumParameter

# Register EnumParameter in _shared:
_shared.EnumParameter_swigregister(EnumParameter)
class BoolParameter(Parameter):
    r"""Represents a _Bool-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        r"""Gets the current value of the device parameter."""
        return _shared.BoolParameter_get_value(self)

    def set_value(self, value):
        r"""Sets the value of the device parameter."""
        return _shared.BoolParameter_set_value(self, value)

    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> BoolParameter"""
        return _shared.BoolParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_BoolParameter

# Register BoolParameter in _shared:
_shared.BoolParameter_swigregister(BoolParameter)
class RoiParameter(Parameter):
    r"""Represents an _Roi-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        roi = ROI()
        error = _shared.RoiParameter_get_value(self, roi)
        return error, roi



    def set_value(self, value):
        r"""Sets the value of the device parameter."""
        return _shared.RoiParameter_set_value(self, value)

    def get_max_roi_size(self, maxSize):
        r"""Gets the maximum settable value of the device parameter."""
        return _shared.RoiParameter_get_max_roi_size(self, maxSize)

    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> RoiParameter"""
        return _shared.RoiParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_RoiParameter

# Register RoiParameter in _shared:
_shared.RoiParameter_swigregister(RoiParameter)
class ProfileRoiParameter(Parameter):
    r"""Represents an _ProfileRoi-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        roi = ProfileROI()
        error = _shared.ProfileRoiParameter_get_value(self, roi)
        return error, roi



    def set_value(self, value):
        r"""Sets the value of the device parameter."""
        return _shared.ProfileRoiParameter_set_value(self, value)

    def get_max_roi_size(self, maxSize):
        r"""Gets the maximum settable value of the device parameter."""
        return _shared.ProfileRoiParameter_get_max_roi_size(self, maxSize)

    def get_min_roi_size(self, minSize):
        r"""Gets the minimum settable value of the device parameter."""
        return _shared.ProfileRoiParameter_get_min_roi_size(self, minSize)

    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> ProfileRoiParameter"""
        return _shared.ProfileRoiParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_ProfileRoiParameter

# Register ProfileRoiParameter in _shared:
_shared.ProfileRoiParameter_swigregister(ProfileRoiParameter)
class RoiArrayParameter(Parameter):
    r"""Represents an _RoiArray-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        vector = VectorROI()
        error = _shared.RoiArrayParameter_get_value(self, vector)
        value = []
        for i in range(vector.size()):
            value.append(vector[i])
        return error, value



    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> RoiArrayParameter"""
        return _shared.RoiArrayParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_RoiArrayParameter

# Register RoiArrayParameter in _shared:
_shared.RoiArrayParameter_swigregister(RoiArrayParameter)
class RangeParameter(Parameter):
    r"""Represents a _Range-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        range = CommonTypes.RangeInt()
        error = _shared.RangeParameter_get_value(self, range)
        return error, range



    def set_value(self, value):
        r"""Sets the value of the device parameter."""
        return _shared.RangeParameter_set_value(self, value)

    def get_min(self):
        r"""Gets the minimum settable value of the device parameter."""
        return _shared.RangeParameter_get_min(self)

    def get_max(self):
        r"""Gets the maximum settable value of the device parameter."""
        return _shared.RangeParameter_get_max(self)

    def get_step(self):
        r"""Gets the adjustment step size of the device parameter."""
        return _shared.RangeParameter_get_step(self)

    def get_unit(self):
        r"""Gets the unit of the device parameter."""
        return _shared.RangeParameter_get_unit(self)

    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> RangeParameter"""
        return _shared.RangeParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_RangeParameter

# Register RangeParameter in _shared:
_shared.RangeParameter_swigregister(RangeParameter)
class FloatArrayParameter(Parameter):
    r"""Represents a _FloatArray-type device parameter."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_value(self):
        vector = VectorDouble()
        error = _shared.FloatArrayParameter_get_value(self, vector)
        value = []
        for i in range(vector.size()):
            value.append(vector[i])
        return error, value



    def set_value(self, value):
        vector = VectorDouble()
        for i in value:
            vector.push_back(i)
        return _shared.FloatArrayParameter_set_value(self, vector)



    def get_min(self):
        r"""Gets the minimum settable value of the device parameter."""
        return _shared.FloatArrayParameter_get_min(self)

    def get_max(self):
        r"""Gets the maximum settable value of the device parameter."""
        return _shared.FloatArrayParameter_get_max(self)

    def get_max_array_size(self, maxSize):
        r"""Gets the maximum settable size of the vector."""
        return _shared.FloatArrayParameter_get_max_array_size(self, maxSize)

    def get_step(self):
        r"""Gets the adjustment step size of the device parameter."""
        return _shared.FloatArrayParameter_get_step(self)

    def get_unit(self):
        r"""Gets the unit of the device parameter."""
        return _shared.FloatArrayParameter_get_unit(self)

    @staticmethod
    def convert_from_parameter(param):
        r"""convert_from_parameter(Parameter param) -> FloatArrayParameter"""
        return _shared.FloatArrayParameter_convert_from_parameter(param)
    __swig_destroy__ = _shared.delete_FloatArrayParameter

# Register FloatArrayParameter in _shared:
_shared.FloatArrayParameter_swigregister(FloatArrayParameter)
class VectorDouble(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorDouble self) -> SwigPyIterator"""
        return _shared.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorDouble self) -> bool"""
        return _shared.VectorDouble___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorDouble self) -> bool"""
        return _shared.VectorDouble___bool__(self)

    def __len__(self):
        r"""__len__(VectorDouble self) -> std::vector< double >::size_type"""
        return _shared.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> VectorDouble"""
        return _shared.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, VectorDouble v)
        """
        return _shared.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _shared.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorDouble self, std::vector< double >::difference_type i)
        __delitem__(VectorDouble self, SWIGPY_SLICEOBJECT * slice)
        """
        return _shared.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorDouble self, SWIGPY_SLICEOBJECT * slice) -> VectorDouble
        __getitem__(VectorDouble self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _shared.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorDouble self, SWIGPY_SLICEOBJECT * slice, VectorDouble v)
        __setitem__(VectorDouble self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(VectorDouble self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _shared.VectorDouble___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorDouble self) -> std::vector< double >::value_type"""
        return _shared.VectorDouble_pop(self)

    def append(self, x):
        r"""append(VectorDouble self, std::vector< double >::value_type const & x)"""
        return _shared.VectorDouble_append(self, x)

    def empty(self):
        r"""empty(VectorDouble self) -> bool"""
        return _shared.VectorDouble_empty(self)

    def size(self):
        r"""size(VectorDouble self) -> std::vector< double >::size_type"""
        return _shared.VectorDouble_size(self)

    def swap(self, v):
        r"""swap(VectorDouble self, VectorDouble v)"""
        return _shared.VectorDouble_swap(self, v)

    def begin(self):
        r"""begin(VectorDouble self) -> std::vector< double >::iterator"""
        return _shared.VectorDouble_begin(self)

    def end(self):
        r"""end(VectorDouble self) -> std::vector< double >::iterator"""
        return _shared.VectorDouble_end(self)

    def rbegin(self):
        r"""rbegin(VectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _shared.VectorDouble_rbegin(self)

    def rend(self):
        r"""rend(VectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _shared.VectorDouble_rend(self)

    def clear(self):
        r"""clear(VectorDouble self)"""
        return _shared.VectorDouble_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorDouble self) -> std::vector< double >::allocator_type"""
        return _shared.VectorDouble_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorDouble self)"""
        return _shared.VectorDouble_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorDouble self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(VectorDouble self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _shared.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorDouble self) -> VectorDouble
        __init__(VectorDouble self, VectorDouble other) -> VectorDouble
        __init__(VectorDouble self, std::vector< double >::size_type size) -> VectorDouble
        __init__(VectorDouble self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> VectorDouble
        """
        _shared.VectorDouble_swiginit(self, _shared.new_VectorDouble(*args))

    def push_back(self, x):
        r"""push_back(VectorDouble self, std::vector< double >::value_type const & x)"""
        return _shared.VectorDouble_push_back(self, x)

    def front(self):
        r"""front(VectorDouble self) -> std::vector< double >::value_type const &"""
        return _shared.VectorDouble_front(self)

    def back(self):
        r"""back(VectorDouble self) -> std::vector< double >::value_type const &"""
        return _shared.VectorDouble_back(self)

    def assign(self, n, x):
        r"""assign(VectorDouble self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _shared.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorDouble self, std::vector< double >::size_type new_size)
        resize(VectorDouble self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _shared.VectorDouble_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorDouble self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(VectorDouble self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _shared.VectorDouble_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorDouble self, std::vector< double >::size_type n)"""
        return _shared.VectorDouble_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorDouble self) -> std::vector< double >::size_type"""
        return _shared.VectorDouble_capacity(self)
    __swig_destroy__ = _shared.delete_VectorDouble

# Register VectorDouble in _shared:
_shared.VectorDouble_swigregister(VectorDouble)
class VectorROI(object):
    r"""Proxy of C++ std::vector< mmind::eye::ROI > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorROI self) -> SwigPyIterator"""
        return _shared.VectorROI_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorROI self) -> bool"""
        return _shared.VectorROI___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorROI self) -> bool"""
        return _shared.VectorROI___bool__(self)

    def __len__(self):
        r"""__len__(VectorROI self) -> std::vector< mmind::eye::ROI >::size_type"""
        return _shared.VectorROI___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorROI self, std::vector< mmind::eye::ROI >::difference_type i, std::vector< mmind::eye::ROI >::difference_type j) -> VectorROI"""
        return _shared.VectorROI___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorROI self, std::vector< mmind::eye::ROI >::difference_type i, std::vector< mmind::eye::ROI >::difference_type j)
        __setslice__(VectorROI self, std::vector< mmind::eye::ROI >::difference_type i, std::vector< mmind::eye::ROI >::difference_type j, VectorROI v)
        """
        return _shared.VectorROI___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorROI self, std::vector< mmind::eye::ROI >::difference_type i, std::vector< mmind::eye::ROI >::difference_type j)"""
        return _shared.VectorROI___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorROI self, std::vector< mmind::eye::ROI >::difference_type i)
        __delitem__(VectorROI self, SWIGPY_SLICEOBJECT * slice)
        """
        return _shared.VectorROI___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorROI self, SWIGPY_SLICEOBJECT * slice) -> VectorROI
        __getitem__(VectorROI self, std::vector< mmind::eye::ROI >::difference_type i) -> ROI
        """
        return _shared.VectorROI___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorROI self, SWIGPY_SLICEOBJECT * slice, VectorROI v)
        __setitem__(VectorROI self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(VectorROI self, std::vector< mmind::eye::ROI >::difference_type i, ROI x)
        """
        return _shared.VectorROI___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorROI self) -> ROI"""
        return _shared.VectorROI_pop(self)

    def append(self, x):
        r"""append(VectorROI self, ROI x)"""
        return _shared.VectorROI_append(self, x)

    def empty(self):
        r"""empty(VectorROI self) -> bool"""
        return _shared.VectorROI_empty(self)

    def size(self):
        r"""size(VectorROI self) -> std::vector< mmind::eye::ROI >::size_type"""
        return _shared.VectorROI_size(self)

    def swap(self, v):
        r"""swap(VectorROI self, VectorROI v)"""
        return _shared.VectorROI_swap(self, v)

    def begin(self):
        r"""begin(VectorROI self) -> std::vector< mmind::eye::ROI >::iterator"""
        return _shared.VectorROI_begin(self)

    def end(self):
        r"""end(VectorROI self) -> std::vector< mmind::eye::ROI >::iterator"""
        return _shared.VectorROI_end(self)

    def rbegin(self):
        r"""rbegin(VectorROI self) -> std::vector< mmind::eye::ROI >::reverse_iterator"""
        return _shared.VectorROI_rbegin(self)

    def rend(self):
        r"""rend(VectorROI self) -> std::vector< mmind::eye::ROI >::reverse_iterator"""
        return _shared.VectorROI_rend(self)

    def clear(self):
        r"""clear(VectorROI self)"""
        return _shared.VectorROI_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorROI self) -> std::vector< mmind::eye::ROI >::allocator_type"""
        return _shared.VectorROI_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorROI self)"""
        return _shared.VectorROI_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorROI self, std::vector< mmind::eye::ROI >::iterator pos) -> std::vector< mmind::eye::ROI >::iterator
        erase(VectorROI self, std::vector< mmind::eye::ROI >::iterator first, std::vector< mmind::eye::ROI >::iterator last) -> std::vector< mmind::eye::ROI >::iterator
        """
        return _shared.VectorROI_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorROI self) -> VectorROI
        __init__(VectorROI self, VectorROI other) -> VectorROI
        __init__(VectorROI self, std::vector< mmind::eye::ROI >::size_type size) -> VectorROI
        __init__(VectorROI self, std::vector< mmind::eye::ROI >::size_type size, ROI value) -> VectorROI
        """
        _shared.VectorROI_swiginit(self, _shared.new_VectorROI(*args))

    def push_back(self, x):
        r"""push_back(VectorROI self, ROI x)"""
        return _shared.VectorROI_push_back(self, x)

    def front(self):
        r"""front(VectorROI self) -> ROI"""
        return _shared.VectorROI_front(self)

    def back(self):
        r"""back(VectorROI self) -> ROI"""
        return _shared.VectorROI_back(self)

    def assign(self, n, x):
        r"""assign(VectorROI self, std::vector< mmind::eye::ROI >::size_type n, ROI x)"""
        return _shared.VectorROI_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorROI self, std::vector< mmind::eye::ROI >::size_type new_size)
        resize(VectorROI self, std::vector< mmind::eye::ROI >::size_type new_size, ROI x)
        """
        return _shared.VectorROI_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorROI self, std::vector< mmind::eye::ROI >::iterator pos, ROI x) -> std::vector< mmind::eye::ROI >::iterator
        insert(VectorROI self, std::vector< mmind::eye::ROI >::iterator pos, std::vector< mmind::eye::ROI >::size_type n, ROI x)
        """
        return _shared.VectorROI_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorROI self, std::vector< mmind::eye::ROI >::size_type n)"""
        return _shared.VectorROI_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorROI self) -> std::vector< mmind::eye::ROI >::size_type"""
        return _shared.VectorROI_capacity(self)
    __swig_destroy__ = _shared.delete_VectorROI

# Register VectorROI in _shared:
_shared.VectorROI_swigregister(VectorROI)
class MapStringInt(object):
    r"""Proxy of C++ std::map< std::string,int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(MapStringInt self) -> SwigPyIterator"""
        return _shared.MapStringInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(MapStringInt self) -> bool"""
        return _shared.MapStringInt___nonzero__(self)

    def __bool__(self):
        r"""__bool__(MapStringInt self) -> bool"""
        return _shared.MapStringInt___bool__(self)

    def __len__(self):
        r"""__len__(MapStringInt self) -> std::map< std::string,int >::size_type"""
        return _shared.MapStringInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(MapStringInt self, std::map< std::string,int >::key_type const & key) -> std::map< std::string,int >::mapped_type const &"""
        return _shared.MapStringInt___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(MapStringInt self, std::map< std::string,int >::key_type const & key)"""
        return _shared.MapStringInt___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(MapStringInt self, std::map< std::string,int >::key_type const & key) -> bool"""
        return _shared.MapStringInt_has_key(self, key)

    def keys(self):
        r"""keys(MapStringInt self) -> PyObject *"""
        return _shared.MapStringInt_keys(self)

    def values(self):
        r"""values(MapStringInt self) -> PyObject *"""
        return _shared.MapStringInt_values(self)

    def items(self):
        r"""items(MapStringInt self) -> PyObject *"""
        return _shared.MapStringInt_items(self)

    def __contains__(self, key):
        r"""__contains__(MapStringInt self, std::map< std::string,int >::key_type const & key) -> bool"""
        return _shared.MapStringInt___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(MapStringInt self) -> SwigPyIterator"""
        return _shared.MapStringInt_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(MapStringInt self) -> SwigPyIterator"""
        return _shared.MapStringInt_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(MapStringInt self, std::map< std::string,int >::key_type const & key)
        __setitem__(MapStringInt self, std::map< std::string,int >::key_type const & key, std::map< std::string,int >::mapped_type const & x)
        """
        return _shared.MapStringInt___setitem__(self, *args)

    def asdict(self):
        r"""asdict(MapStringInt self) -> PyObject *"""
        return _shared.MapStringInt_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(MapStringInt self, std::less< std::string > const & other) -> MapStringInt
        __init__(MapStringInt self) -> MapStringInt
        __init__(MapStringInt self, MapStringInt other) -> MapStringInt
        """
        _shared.MapStringInt_swiginit(self, _shared.new_MapStringInt(*args))

    def empty(self):
        r"""empty(MapStringInt self) -> bool"""
        return _shared.MapStringInt_empty(self)

    def size(self):
        r"""size(MapStringInt self) -> std::map< std::string,int >::size_type"""
        return _shared.MapStringInt_size(self)

    def swap(self, v):
        r"""swap(MapStringInt self, MapStringInt v)"""
        return _shared.MapStringInt_swap(self, v)

    def begin(self):
        r"""begin(MapStringInt self) -> std::map< std::string,int >::iterator"""
        return _shared.MapStringInt_begin(self)

    def end(self):
        r"""end(MapStringInt self) -> std::map< std::string,int >::iterator"""
        return _shared.MapStringInt_end(self)

    def rbegin(self):
        r"""rbegin(MapStringInt self) -> std::map< std::string,int >::reverse_iterator"""
        return _shared.MapStringInt_rbegin(self)

    def rend(self):
        r"""rend(MapStringInt self) -> std::map< std::string,int >::reverse_iterator"""
        return _shared.MapStringInt_rend(self)

    def clear(self):
        r"""clear(MapStringInt self)"""
        return _shared.MapStringInt_clear(self)

    def get_allocator(self):
        r"""get_allocator(MapStringInt self) -> std::map< std::string,int >::allocator_type"""
        return _shared.MapStringInt_get_allocator(self)

    def count(self, x):
        r"""count(MapStringInt self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type"""
        return _shared.MapStringInt_count(self, x)

    def erase(self, *args):
        r"""
        erase(MapStringInt self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type
        erase(MapStringInt self, std::map< std::string,int >::iterator position)
        erase(MapStringInt self, std::map< std::string,int >::iterator first, std::map< std::string,int >::iterator last)
        """
        return _shared.MapStringInt_erase(self, *args)

    def find(self, x):
        r"""find(MapStringInt self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _shared.MapStringInt_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(MapStringInt self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _shared.MapStringInt_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(MapStringInt self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _shared.MapStringInt_upper_bound(self, x)
    __swig_destroy__ = _shared.delete_MapStringInt

# Register MapStringInt in _shared:
_shared.MapStringInt_swigregister(MapStringInt)
class UserSet(object):
    r"""Proxy of C++ mmind::eye::UserSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _shared.delete_UserSet

    def get_name(self):
        r"""
        Gets the name of the current device user set.
        :param [out]: userSetName The current user set name.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.
        """
        return _shared.UserSet_get_name(self)

    def rename(self, newName):
        r"""
        Renames the current device user set.
        :param [in]: newName The new user set name.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_INVALID_INPUT_ERROR' The user set name entered is empty or too
             long.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.
        """
        return _shared.UserSet_rename(self, newName)

    def get_available_parameter_names(self):
        vector = VectorString()
        error = _shared.UserSet_get_available_parameter_names(self, vector)
        names = []
        for i in range(vector.size()):
            names.append(vector[i])
        return error, names



    def reset_all_parameters_to_default_values(self):
        r"""
        Resets all device parameters in the current device user set to default values.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.
        """
        return _shared.UserSet_reset_all_parameters_to_default_values(self)

    def save_all_parameters_to_device(self):
        r"""
        Saves the values of all device parameters in the current device user set to the
        device.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.
        """
        return _shared.UserSet_save_all_parameters_to_device(self)

    def get_available_parameters(self):
        return list(_shared.UserSet_get_available_parameters(self))



    def get_parameter(self, parameterName):
        r"""Gets the pointer to the specified device parameter."""
        return _shared.UserSet_get_parameter(self, parameterName)

    def get_int_value(self, parameterName):
        r"""
        Gets the current value of an _Int-type device parameter. See 'Parameter' for
        details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.UserSet_get_int_value(self, parameterName)

    def set_int_value(self, parameterName, value):
        r"""
        Sets the value of an _Int-type device parameter. See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only,
             please check the input parameter name.

             'ErrorStatus.MMIND_STATUS_OUT_OF_RANGE_ERROR' Invalid parameter input.
        """
        return _shared.UserSet_set_int_value(self, parameterName, value)

    def get_float_value(self, parameterName):
        r"""
        Gets the current value of a _Float-type device parameter. See 'Parameter' for
        details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.UserSet_get_float_value(self, parameterName)

    def set_float_value(self, parameterName, value):
        r"""
        Sets the value of a _Float-type device parameter. See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only,
             please check the input parameter name.

             'ErrorStatus.MMIND_STATUS_OUT_OF_RANGE_ERROR' Invalid parameter input.
        """
        return _shared.UserSet_set_float_value(self, parameterName, value)

    def get_bool_value(self, parameterName):
        r"""
        Gets the current value of a _Bool-type device parameter. See 'Parameter' for
        details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.UserSet_get_bool_value(self, parameterName)

    def set_bool_value(self, parameterName, value):
        r"""
        Sets the value of a _Bool-type device parameter. See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only,
             please check the input parameter name.
        """
        return _shared.UserSet_set_bool_value(self, parameterName, value)

    def get_enum_value(self, parameterName):
        r"""
        Gets the current value of an _Enum-type device parameter in the form of the integer
        value. See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.UserSet_get_enum_value(self, parameterName)

    def get_enum_value_string(self, parameterName):
        value = ""
        return _shared.UserSet_get_enum_value_string(self, parameterName)



    def set_enum_value(self, *args):
        r"""
        *Overload 1:*

        Sets the value of an _Enum-type device parameter by inputting the integer value.
        See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only,
             please check the input parameter name.

             'ErrorStatus.MMIND_STATUS_OUT_OF_RANGE_ERROR' Invalid enum input.


        |

        *Overload 2:*

        Sets the value of an _Enum-type device parameter by inputting a string. See
        Parameter for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only, please
             check the input parameter name.

             'ErrorStatus.MMIND_STATUS_OUT_OF_RANGE_ERROR' Invalid enum input.
        """
        return _shared.UserSet_set_enum_value(self, *args)

    def get_roi_value(self, parameterName):
        roi = ROI()
        error = _shared.UserSet_get_roi_value(self, parameterName, roi)
        return error, roi



    def set_roi_value(self, parameterName, value):
        r"""
        Sets the value of an _Roi-type device parameter. See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only, please
             check the input parameter name.

             'ErrorStatus.MMIND_STATUS_OUT_OF_RANGE_ERROR' Invalid parameter input.
        """
        return _shared.UserSet_set_roi_value(self, parameterName, value)

    def get_profile_roi_value(self, parameterName):
        roi = ProfileROI()
        error = _shared.UserSet_get_profile_roi_value(self, parameterName, roi)
        return error, roi



    def set_profile_roi_value(self, parameterName, value):
        r"""
        Sets the value of an _ProfileRoi-type device parameter. See 'Parameter' for
        details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only, please
             check the input parameter name.

             'ErrorStatus.MMIND_STATUS_OUT_OF_RANGE_ERROR' Invalid parameter input.
        """
        return _shared.UserSet_set_profile_roi_value(self, parameterName, value)

    def get_roi_array_value(self, parameterName):
        vector = VectorROI()
        error = _shared.UserSet_get_roi_array_value(self, parameterName, vector)
        value = []
        for i in range(vector.size()):
            value.append(vector[i])
        return error, value



    def get_float_array_value(self, parameterName):
        vector = VectorDouble()
        error = _shared.UserSet_get_float_array_value(self, parameterName, vector)
        value = []
        for i in range(vector.size()):
            value.append(vector[i])
        return error, value



    def set_float_array_value(self, parameterName, value):
        vector = VectorDouble()
        for i in value:
            vector.push_back(i)
        return _shared.UserSet_set_float_array_value(self, parameterName, vector)



    def get_range_value(self, parameterName):
        range = RangeInt()
        error = _shared.UserSet_get_range_value(self, parameterName, range)
        return error, range



    def set_range_value(self, parameterName, value):
        r"""
        Sets the value of a _Range-type device parameter. See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found or read only, please
             check the input parameter name.

             'ErrorStatus.MMIND_STATUS_OUT_OF_RANGE_ERROR' Invalid parameter input.
        """
        return _shared.UserSet_set_range_value(self, parameterName, value)

    def __getitem__(self, parameterName):
        r"""__getitem__(UserSet self, std::string & parameterName) -> Parameter"""
        return _shared.UserSet___getitem__(self, parameterName)

# Register UserSet in _shared:
_shared.UserSet_swigregister(UserSet)
class VirtualUserSet(object):
    r"""Proxy of C++ mmind::eye::VirtualUserSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _shared.delete_VirtualUserSet

    def get_name(self):
        r"""
        Gets the name of the parameter group used when the virtual device was saved.
        :param [out]: userSetName The name of the parameter group.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.
        """
        return _shared.VirtualUserSet_get_name(self)

    def get_available_parameter_names(self):
        vector = VectorString()
        error = _shared.VirtualUserSet_get_available_parameter_names(self, vector)
        names = []
        for i in range(vector.size()):
            names.append(vector[i])
        return error, names



    def get_available_parameters(self):
        return list(_shared.VirtualUserSet_get_available_parameters(self))



    def get_parameter(self, parameterName):
        r"""Gets the pointer to the elements of a specific parameter."""
        return _shared.VirtualUserSet_get_parameter(self, parameterName)

    def get_int_value(self, parameterName):
        r"""
        Gets the current value of an _Int-type parameter. See 'Parameter' for
        details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.VirtualUserSet_get_int_value(self, parameterName)

    def get_float_value(self, parameterName):
        r"""
        Gets the current value of a _Float-type parameter. See 'Parameter' for
        details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.VirtualUserSet_get_float_value(self, parameterName)

    def get_bool_value(self, parameterName):
        r"""
        Gets the current value of a _Bool-type parameter. See 'Parameter' for
        details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.VirtualUserSet_get_bool_value(self, parameterName)

    def get_enum_value(self, parameterName):
        r"""
        Gets the current value of an _Enum-type parameter in the form of the integer
        value. See 'Parameter' for details.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_PARAMETER_ERROR' Parameter not found, please check the
             input parameter name.
        """
        return _shared.VirtualUserSet_get_enum_value(self, parameterName)

    def get_enum_value_string(self, parameterName):
        value = ""
        return _shared.VirtualUserSet_get_enum_value_string(self, parameterName)



    def get_roi_value(self, parameterName):
        roi = ROI()
        error = _shared.VirtualUserSet_get_roi_value(self, parameterName, roi)
        return error, roi



    def get_profile_roi_value(self, parameterName):
        roi = ProfileROI()
        error = _shared.VirtualUserSet_get_profile_roi_value(self, parameterName, roi)
        return error, roi



    def get_float_array_value(self, parameterName):
        vector = VectorDouble()
        error = _shared.VirtualUserSet_get_float_array_value(self, parameterName, vector)
        value = []
        for i in range(vector.size()):
            value.append(vector[i])
        return error, value



    def get_range_value(self, parameterName):
        range = RangeInt()
        error = _shared.VirtualUserSet_get_range_value(self, parameterName, range)
        return error, range



    def __getitem__(self, parameterName):
        r"""__getitem__(VirtualUserSet self, std::string & parameterName) -> Parameter"""
        return _shared.VirtualUserSet___getitem__(self, parameterName)

# Register VirtualUserSet in _shared:
_shared.VirtualUserSet_swigregister(VirtualUserSet)
class VectorString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorString self) -> SwigPyIterator"""
        return _shared.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorString self) -> bool"""
        return _shared.VectorString___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorString self) -> bool"""
        return _shared.VectorString___bool__(self)

    def __len__(self):
        r"""__len__(VectorString self) -> std::vector< std::string >::size_type"""
        return _shared.VectorString___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> VectorString"""
        return _shared.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, VectorString v)
        """
        return _shared.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _shared.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorString self, std::vector< std::string >::difference_type i)
        __delitem__(VectorString self, SWIGPY_SLICEOBJECT * slice)
        """
        return _shared.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorString self, SWIGPY_SLICEOBJECT * slice) -> VectorString
        __getitem__(VectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _shared.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorString self, SWIGPY_SLICEOBJECT * slice, VectorString v)
        __setitem__(VectorString self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _shared.VectorString___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorString self) -> std::vector< std::string >::value_type"""
        return _shared.VectorString_pop(self)

    def append(self, x):
        r"""append(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _shared.VectorString_append(self, x)

    def empty(self):
        r"""empty(VectorString self) -> bool"""
        return _shared.VectorString_empty(self)

    def size(self):
        r"""size(VectorString self) -> std::vector< std::string >::size_type"""
        return _shared.VectorString_size(self)

    def swap(self, v):
        r"""swap(VectorString self, VectorString v)"""
        return _shared.VectorString_swap(self, v)

    def begin(self):
        r"""begin(VectorString self) -> std::vector< std::string >::iterator"""
        return _shared.VectorString_begin(self)

    def end(self):
        r"""end(VectorString self) -> std::vector< std::string >::iterator"""
        return _shared.VectorString_end(self)

    def rbegin(self):
        r"""rbegin(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _shared.VectorString_rbegin(self)

    def rend(self):
        r"""rend(VectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _shared.VectorString_rend(self)

    def clear(self):
        r"""clear(VectorString self)"""
        return _shared.VectorString_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorString self) -> std::vector< std::string >::allocator_type"""
        return _shared.VectorString_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorString self)"""
        return _shared.VectorString_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(VectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _shared.VectorString_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorString self) -> VectorString
        __init__(VectorString self, VectorString other) -> VectorString
        __init__(VectorString self, std::vector< std::string >::size_type size) -> VectorString
        __init__(VectorString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> VectorString
        """
        _shared.VectorString_swiginit(self, _shared.new_VectorString(*args))

    def push_back(self, x):
        r"""push_back(VectorString self, std::vector< std::string >::value_type const & x)"""
        return _shared.VectorString_push_back(self, x)

    def front(self):
        r"""front(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _shared.VectorString_front(self)

    def back(self):
        r"""back(VectorString self) -> std::vector< std::string >::value_type const &"""
        return _shared.VectorString_back(self)

    def assign(self, n, x):
        r"""assign(VectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _shared.VectorString_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorString self, std::vector< std::string >::size_type new_size)
        resize(VectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _shared.VectorString_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _shared.VectorString_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorString self, std::vector< std::string >::size_type n)"""
        return _shared.VectorString_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorString self) -> std::vector< std::string >::size_type"""
        return _shared.VectorString_capacity(self)
    __swig_destroy__ = _shared.delete_VectorString

# Register VectorString in _shared:
_shared.VectorString_swigregister(VectorString)
class VectorParameterPointer(object):
    r"""Proxy of C++ std::vector< mmind::eye::Parameter * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorParameterPointer self) -> SwigPyIterator"""
        return _shared.VectorParameterPointer_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorParameterPointer self) -> bool"""
        return _shared.VectorParameterPointer___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorParameterPointer self) -> bool"""
        return _shared.VectorParameterPointer___bool__(self)

    def __len__(self):
        r"""__len__(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::size_type"""
        return _shared.VectorParameterPointer___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::difference_type i, std::vector< mmind::eye::Parameter * >::difference_type j) -> VectorParameterPointer"""
        return _shared.VectorParameterPointer___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::difference_type i, std::vector< mmind::eye::Parameter * >::difference_type j)
        __setslice__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::difference_type i, std::vector< mmind::eye::Parameter * >::difference_type j, VectorParameterPointer v)
        """
        return _shared.VectorParameterPointer___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::difference_type i, std::vector< mmind::eye::Parameter * >::difference_type j)"""
        return _shared.VectorParameterPointer___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::difference_type i)
        __delitem__(VectorParameterPointer self, SWIGPY_SLICEOBJECT * slice)
        """
        return _shared.VectorParameterPointer___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorParameterPointer self, SWIGPY_SLICEOBJECT * slice) -> VectorParameterPointer
        __getitem__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::difference_type i) -> Parameter
        """
        return _shared.VectorParameterPointer___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorParameterPointer self, SWIGPY_SLICEOBJECT * slice, VectorParameterPointer v)
        __setitem__(VectorParameterPointer self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::difference_type i, Parameter x)
        """
        return _shared.VectorParameterPointer___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorParameterPointer self) -> Parameter"""
        return _shared.VectorParameterPointer_pop(self)

    def append(self, x):
        r"""append(VectorParameterPointer self, Parameter x)"""
        return _shared.VectorParameterPointer_append(self, x)

    def empty(self):
        r"""empty(VectorParameterPointer self) -> bool"""
        return _shared.VectorParameterPointer_empty(self)

    def size(self):
        r"""size(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::size_type"""
        return _shared.VectorParameterPointer_size(self)

    def swap(self, v):
        r"""swap(VectorParameterPointer self, VectorParameterPointer v)"""
        return _shared.VectorParameterPointer_swap(self, v)

    def begin(self):
        r"""begin(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::iterator"""
        return _shared.VectorParameterPointer_begin(self)

    def end(self):
        r"""end(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::iterator"""
        return _shared.VectorParameterPointer_end(self)

    def rbegin(self):
        r"""rbegin(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::reverse_iterator"""
        return _shared.VectorParameterPointer_rbegin(self)

    def rend(self):
        r"""rend(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::reverse_iterator"""
        return _shared.VectorParameterPointer_rend(self)

    def clear(self):
        r"""clear(VectorParameterPointer self)"""
        return _shared.VectorParameterPointer_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::allocator_type"""
        return _shared.VectorParameterPointer_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorParameterPointer self)"""
        return _shared.VectorParameterPointer_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::iterator pos) -> std::vector< mmind::eye::Parameter * >::iterator
        erase(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::iterator first, std::vector< mmind::eye::Parameter * >::iterator last) -> std::vector< mmind::eye::Parameter * >::iterator
        """
        return _shared.VectorParameterPointer_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorParameterPointer self) -> VectorParameterPointer
        __init__(VectorParameterPointer self, VectorParameterPointer other) -> VectorParameterPointer
        __init__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::size_type size) -> VectorParameterPointer
        __init__(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::size_type size, Parameter value) -> VectorParameterPointer
        """
        _shared.VectorParameterPointer_swiginit(self, _shared.new_VectorParameterPointer(*args))

    def push_back(self, x):
        r"""push_back(VectorParameterPointer self, Parameter x)"""
        return _shared.VectorParameterPointer_push_back(self, x)

    def front(self):
        r"""front(VectorParameterPointer self) -> Parameter"""
        return _shared.VectorParameterPointer_front(self)

    def back(self):
        r"""back(VectorParameterPointer self) -> Parameter"""
        return _shared.VectorParameterPointer_back(self)

    def assign(self, n, x):
        r"""assign(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::size_type n, Parameter x)"""
        return _shared.VectorParameterPointer_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::size_type new_size)
        resize(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::size_type new_size, Parameter x)
        """
        return _shared.VectorParameterPointer_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::iterator pos, Parameter x) -> std::vector< mmind::eye::Parameter * >::iterator
        insert(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::iterator pos, std::vector< mmind::eye::Parameter * >::size_type n, Parameter x)
        """
        return _shared.VectorParameterPointer_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorParameterPointer self, std::vector< mmind::eye::Parameter * >::size_type n)"""
        return _shared.VectorParameterPointer_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorParameterPointer self) -> std::vector< mmind::eye::Parameter * >::size_type"""
        return _shared.VectorParameterPointer_capacity(self)
    __swig_destroy__ = _shared.delete_VectorParameterPointer

# Register VectorParameterPointer in _shared:
_shared.VectorParameterPointer_swigregister(VectorParameterPointer)
class UserSetManager(object):
    r"""Manages device user sets."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _shared.delete_UserSetManager

    def current_user_set(self):
        r"""
        Returns a reference to the UserSet object.
        :rtype: :py:class:`UserSet`
        :return: See 'UserSet' for details.
        """
        return _shared.UserSetManager_current_user_set(self)

    def get_all_user_set_names(self):
        vector = VectorString()
        error = _shared.UserSetManager_get_all_user_set_names(self, vector)
        userSets = []
        for i in range(vector.size()):
            userSets.append(vector[i])
        return error, userSets



    def select_user_set(self, userSetName):
        r"""
        Selects a device user set to be associated with unsaved parameter adjustments.
        :param [in]: userSetName The name of the user set to be selected.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_INVALID_INPUT_ERROR' The user set name entered is empty or too
             long.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.
        """
        return _shared.UserSetManager_select_user_set(self, userSetName)

    def add_user_set(self, userSetName):
        r"""
        Adds a user set to the device.
        :param [in]: userSetName The name of the user set to be added.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_INVALID_INPUT_ERROR' The user set name entered is empty or too
             long.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.
        """
        return _shared.UserSetManager_add_user_set(self, userSetName)

    def delete_user_set(self, userSetName):
        r"""
        Deletes the specified device user set.
        :param [in]: userSetName The name of the user set to be deleted.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_INVALID_INPUT_ERROR' The user set name entered does not
            exist.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.
        """
        return _shared.UserSetManager_delete_user_set(self, userSetName)

    def save_to_file(self, fileName):
        r"""
        Exports all device user sets to a JSON file.
        :param [in]: fileName The name of the JSON file.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_FILE_IO_ERROR' Failed to save the JSON file.
        """
        return _shared.UserSetManager_save_to_file(self, fileName)

    def load_from_file(self, fileName):
        r"""
        Imports device user sets from a JSON file and overwrites existing
        user sets on the device.
        :param [in]: fileName The name of the JSON file.
        :rtype: :py:class:`ErrorStatus`
        :return: 
             'ErrorStatus.MMIND_STATUS_SUCCESS' Success.

             'ErrorStatus.MMIND_STATUS_INVALID_DEVICE' Invalid device handle.

             'ErrorStatus.MMIND_STATUS_DEVICE_OFFLINE' Device disconnected.

             'ErrorStatus.MMIND_STATUS_TIMEOUT_ERROR' Timeout error.

             'ErrorStatus.MMIND_STATUS_RESPONSE_PARSE_ERROR' Response parsing error.

             'ErrorStatus.MMIND_STATUS_REPLY_WITH_ERROR' The reply from the device contains errors.

             'ErrorStatus.MMIND_STATUS_FILE_IO_ERROR' Wrong file name passed, failed to save or open
            the JSON file, or incorrect file format.
        """
        return _shared.UserSetManager_load_from_file(self, fileName)

# Register UserSetManager in _shared:
_shared.UserSetManager_swigregister(UserSetManager)

def get_api_version_info():
    r"""Gets the version of Mech-Eye API."""
    return _shared.get_api_version_info()
class Version(object):
    r"""Describes the version information."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor.

        |

        *Overload 2:*

        Constructor.

        |

        *Overload 3:*

        Constructor.
        """
        _shared.Version_swiginit(self, _shared.new_Version(*args))

    def __eq__(self, other):
        r"""Overloads the == operator to determine if two Version objects are equal."""
        return _shared.Version___eq__(self, other)

    def __ne__(self, other):
        r"""Overloads the != operator to determine if two Version objects are unequal."""
        return _shared.Version___ne__(self, other)

    def __ge__(self, other):
        r"""
        Overloads the >= operator to determine if one Version object is greater than or equal
        to the other.
        """
        return _shared.Version___ge__(self, other)

    def __lt__(self, other):
        r"""Overloads the < operator to determine if one Version object is smaller than the other."""
        return _shared.Version___lt__(self, other)

    def __le__(self, other):
        r"""
        Overloads the <= operator to determine if one Version object is smaller than or equal
        to the other.
        """
        return _shared.Version___le__(self, other)

    def to_string(self):
        r"""Converts a Version object to a string."""
        return _shared.Version_to_string(self)

    def from_string(self, version):
        r"""Converts a version in the string format to a Version object."""
        return _shared.Version_from_string(self, version)

    def is_empty(self):
        r"""Checks if a Version object is empty."""
        return _shared.Version_is_empty(self)
    __swig_destroy__ = _shared.delete_Version

# Register Version in _shared:
_shared.Version_swigregister(Version)

def export_logs(dstPath, coverIfExist):
    r"""
    Exports the API logs
    :param [in]: The folder path used to store the exported logs.
    :param [in]: Whether to overwrite an existing file with the same name.
    :rtype: :py:class:`ErrorStatus`
    :return: 
         'ErrorStatus.MMIND_STATUS_SUCCESS' Log export successful.

         'ErrorStatus.MMIND_STATUS_FILE_IO_ERROR'. Failed to save the logs.
    """
    return _shared.export_logs(dstPath, coverIfExist)

