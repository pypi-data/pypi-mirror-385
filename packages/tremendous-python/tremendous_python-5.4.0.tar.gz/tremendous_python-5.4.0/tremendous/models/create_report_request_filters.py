# coding: utf-8

"""
    API Endpoints

    Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and its members within Tremendous, please see the Tremendous Organizational API.

    The version of the OpenAPI document: 2
    Contact: developers@tremendous.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from tremendous.models.create_report_request_filters_digital_rewards import CreateReportRequestFiltersDigitalRewards
from typing import Optional, Set
from typing_extensions import Self

class CreateReportRequestFilters(BaseModel):
    """
    Filters to apply to the report. Corresponds to the filters provided in the dashboard 
    """ # noqa: E501
    digital_rewards: Optional[CreateReportRequestFiltersDigitalRewards] = None
    __properties: ClassVar[List[str]] = ["digital_rewards"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateReportRequestFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of digital_rewards
        if self.digital_rewards:
            _dict['digital_rewards'] = self.digital_rewards.to_dict()
        # set to None if digital_rewards (nullable) is None
        # and model_fields_set contains the field
        if self.digital_rewards is None and "digital_rewards" in self.model_fields_set:
            _dict['digital_rewards'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateReportRequestFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "digital_rewards": CreateReportRequestFiltersDigitalRewards.from_dict(obj["digital_rewards"]) if obj.get("digital_rewards") is not None else None
        })
        return _obj


