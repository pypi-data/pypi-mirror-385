# This code is part of Qiskit.
#
# (C) Copyright IBM 2025.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""Synchronous wrappers for async QCA functions.

This module provides synchronous versions of the async functions for use with
frameworks that don't support async operations (like DSPy).
"""

import asyncio
from typing import Any, Dict

from qiskit_code_assistant_mcp_server.qca import (
    qca_list_models,
    qca_get_model,
    qca_get_model_disclaimer,
    qca_accept_model_disclaimer,
    qca_get_completion,
    qca_get_rag_completion,
    qca_accept_completion,
    qca_get_service_status,
)

# Apply nest_asyncio to allow running async code in environments with existing event loops
try:
    import nest_asyncio  # type: ignore[import-untyped]

    nest_asyncio.apply()
except ImportError:
    pass


def _run_async(coro):
    """Helper to run async functions synchronously.

    This handles both cases:
    - Running in a Jupyter notebook or other environment with an existing event loop
    - Running in a standard Python script without an event loop
    """
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # We're in a running loop (e.g., Jupyter), use run_until_complete
            # This works because nest_asyncio allows nested loops
            return loop.run_until_complete(coro)
        else:
            return loop.run_until_complete(coro)
    except RuntimeError:
        # No event loop exists, create one
        return asyncio.run(coro)


def qca_list_models_sync() -> Dict[str, Any]:
    """List the available models from the Qiskit Code Assistant.

    Synchronous version of qca_list_models.
    """
    return _run_async(qca_list_models())


def qca_get_model_sync(model_id: str) -> Dict[str, Any]:
    """Get the info for a model from the Qiskit Code Assistant.

    Synchronous version of qca_get_model.

    Args:
        model_id: The ID of the model to retrieve
    """
    return _run_async(qca_get_model(model_id))


def qca_get_model_disclaimer_sync(model_id: str) -> Dict[str, Any]:
    """Get the disclaimer for a model from the Qiskit Code Assistant.

    Synchronous version of qca_get_model_disclaimer.

    Args:
        model_id: The ID of the model for which we want to retrieve the disclaimer
    """
    return _run_async(qca_get_model_disclaimer(model_id))


def qca_accept_model_disclaimer_sync(
    model_id: str, disclaimer_id: str
) -> Dict[str, Any]:
    """Accept the disclaimer for an available model from the Qiskit Code Assistant.

    Synchronous version of qca_accept_model_disclaimer.

    Args:
        model_id: The ID of the model for which we want to accept the disclaimer
        disclaimer_id: The ID of the disclaimer we want to accept

    Returns:
        Disclaimer acceptance status
    """
    return _run_async(qca_accept_model_disclaimer(model_id, disclaimer_id))


def qca_get_completion_sync(prompt: str) -> Dict[str, Any]:
    """Get completion for writing, completing, and optimizing quantum code using Qiskit.

    Synchronous version of qca_get_completion.

    Args:
        prompt: The prompt for code completion

    Returns:
        Code completion choices and metadata
    """
    return _run_async(qca_get_completion(prompt))


def qca_get_rag_completion_sync(prompt: str) -> Dict[str, Any]:
    """Get RAG completion for answering conceptual or descriptive questions about Qiskit or Quantum.

    Synchronous version of qca_get_rag_completion.

    Args:
        prompt: The prompt for RAG-based completion

    Returns:
        RAG completion choices and metadata
    """
    return _run_async(qca_get_rag_completion(prompt))


def qca_accept_completion_sync(completion_id: str) -> Dict[str, Any]:
    """Accept a suggestion generated by the Qiskit Code Assistant.

    Synchronous version of qca_accept_completion.

    Args:
        completion_id: The ID of the completion to accept

    Returns:
        Completion acceptance status
    """
    return _run_async(qca_accept_completion(completion_id))


def qca_get_service_status_sync() -> str:
    """Get current Qiskit Code Assistant service status.

    Synchronous version of qca_get_service_status.

    Returns:
        Service connection status and basic information
    """
    return _run_async(qca_get_service_status())


# Assisted by watsonx Code Assistant
