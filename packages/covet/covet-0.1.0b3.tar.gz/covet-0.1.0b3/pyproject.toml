[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "covet"
version = "0.1.0b3"
description = "A high-performance Python web framework with Rust-optimized components for modern async applications"
readme = "README.PyPI.md"
license = {text = "Proprietary"}
authors = [
    {name = "Vipin Kumar"}
]
maintainers = [
    {name = "Vipin Kumar"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Rust",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
keywords = [
    "rest-api", "http", "api", "python-rust", "async", "asgi",
    "web-framework", "graphql", "websocket", "high-performance",
    "rust-extensions", "orm", "database", "jwt-auth"
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.12.0",
    "prometheus-client>=0.23.1",
    "psutil>=7.1.0",
    "PyJWT>=2.8.0"
]

[project.optional-dependencies]
# Development dependencies (completely optional)
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "pytest-benchmark>=5.1.0",
    "black>=25.9.0",
    "ruff>=0.14.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    "httpx>=0.28.1",
    "maturin>=1.9.4"
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.32",
    "mkdocstrings[python]>=0.24.0"
]

# Testing only
test = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "pytest-benchmark>=5.1.0",
    "httpx>=0.28.1"
]

# Security libraries (critical for production)
security = [
    "pyotp>=2.9.0",                      # MFA/TOTP support
    # SECURITY FIX: Removed python-jose (unused, causes ecdsa CVE-2024-23342) - code uses PyJWT instead
    "passlib[bcrypt]>=1.7.4",           # Secure password hashing
    "validators>=0.22.0",               # Input validation
    "bleach>=6.2.0",                    # HTML sanitization
    "limits>=3.7.0",                    # Rate limiting
    "python-multipart>=0.0.6",         # Secure file uploads
    "email-validator>=2.1.0"           # Email validation
]

# Web framework integration (optional)
web = [
    "fastapi>=0.118.2",
    "uvicorn[standard]>=0.37.0",
    "pydantic>=2.12.0",
    "pydantic-settings>=2.11.0"
]

# Database integration (optional)
database = [
    "sqlalchemy>=2.0.43",
    "alembic>=1.16.5",
    "asyncpg>=0.30.0",
    "aiomysql>=0.2.0"
]

# Production dependencies
production = [
    "uvicorn[standard]>=0.37.0",
    "asyncpg>=0.30.0",
    "aiomysql>=0.2.0",
    "redis>=6.4.0",
    "aiomemcache>=0.8.0",
    # SECURITY FIX: Removed python-jose (unused, causes ecdsa CVE-2024-23342) - code uses PyJWT instead
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.1.1"
]

# Optional: GraphQL support
graphql = [
    "strawberry-graphql>=0.209.0"
]

# Optional: Advanced ORM
orm = [
    "sqlalchemy>=2.0.43",
    "alembic>=1.16.5"
]

# Optional: Rust extensions for performance
rust = [
    "maturin>=1.9.4"
]

# Optional: Monitoring and observability
monitoring = [
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "structlog>=23.2.0"
]

# Full feature set (all optional dependencies)
full = [
    "uvicorn[standard]>=0.37.0",
    "pydantic>=2.12.0",
    "pydantic-settings>=2.11.0",
    "httpx>=0.28.1",
    "sqlalchemy>=2.0.43",
    "alembic>=1.16.5",
    "asyncpg>=0.30.0",
    "aiomysql>=0.2.0",
    "redis>=6.4.0",
    "aiomemcache>=0.8.0",
    "strawberry-graphql>=0.283.2",
    # SECURITY FIX: Removed python-jose (unused, causes ecdsa CVE-2024-23342) - code uses PyJWT instead
    "passlib[bcrypt]>=1.7.4",
    "validators>=0.22.0",
    "bleach>=6.2.0",
    "limits>=5.5.0",
    "python-multipart>=0.0.20",
    "email-validator>=2.3.0",
    "click>=8.3.0",
    "rich>=14.2.0",
    "prometheus-client>=0.23.1",
    "opentelemetry-api>=1.37.0",
    "opentelemetry-sdk>=1.37.0",
    "structlog>=25.4.0",
    "python-dotenv>=1.1.1",
    "pyyaml>=6.0.3",
    "jinja2>=3.1.6",
    "maturin>=1.9.4"
]

[project.urls]
"Author" = "https://github.com/vipin08"
Documentation = "https://github.com/vipin08/Covet-doc"

[project.scripts]
covet = "covet.cli:main"

# Setuptools configuration
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"covet" = ["py.typed", "*.pyi", "**/*.pyi"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*.py" = ["B011"]   # Allow assert statements in tests

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "covet._core.*",
    "sqlalchemy.*",
    "alembic.*",
    "celery.*",
    "strawberry.*",
    "grpc.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "structlog.*",
    "motor.*",
    "uvicorn.*",
    "gunicorn.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/covet",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--benchmark-skip"
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*"
]

[tool.coverage.report] 
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["covet", "covetpy"]

