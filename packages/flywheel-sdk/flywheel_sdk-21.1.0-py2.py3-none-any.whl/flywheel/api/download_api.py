# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models
from flywheel.util import check_filename_params

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class DownloadApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_download_ticket(self, body, **kwargs):  # noqa: E501
        """Create a download ticket

        Use filters in the payload to exclude/include files. To pass a single filter, each of its conditions should be satisfied. If a file pass at least one filter, it is included in the targets.
        This method makes a synchronous HTTP request by default.

        :param DownloadInput body: Specification for the download to be performed (required)
        :param DownloadStrategy type: The download type, one of: bulk, classic or full. Default is classic.
        :param bool bulk:
        :param bool metadata: For \"full\" download, whether or not to include metadata sidecars. Default is false.
        :param bool analyses: For \"full\" download, whether or not to include analyses. Default is false.
        :param str prefix: A string to customize the name of the download in the format <prefix>_<timestamp>.tar. Defaults to \"scitran\".
        :param bool async_: Perform the request asynchronously
        :return: DownloadTicketStub
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.create_download_ticket_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_download_ticket_with_http_info(body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def create_download_ticket_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a download ticket

        Use filters in the payload to exclude/include files. To pass a single filter, each of its conditions should be satisfied. If a file pass at least one filter, it is included in the targets.
        This method makes a synchronous HTTP request by default.

        :param DownloadInput body: Specification for the download to be performed (required)
        :param DownloadStrategy type: The download type, one of: bulk, classic or full. Default is classic.
        :param bool bulk:
        :param bool metadata: For \"full\" download, whether or not to include metadata sidecars. Default is false.
        :param bool analyses: For \"full\" download, whether or not to include analyses. Default is false.
        :param str prefix: A string to customize the name of the download in the format <prefix>_<timestamp>.tar. Defaults to \"scitran\".
        :param bool async_: Perform the request asynchronously
        :return: DownloadTicketStub
        """

        all_params = ['body','type','bulk','metadata','analyses','prefix',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_download_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_download_ticket`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'bulk' in params:
            query_params.append(('bulk', params['bulk']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'analyses' in params:
            query_params.append(('analyses', params['analyses']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'DownloadInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.DownloadInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadTicketStub',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_ticket(self, ticket, dest_file, **kwargs):  # noqa: E501
        """Download files listed in the given ticket.

        You can use POST to create a download ticket The files listed in the ticket are put into a tar archive
        This method makes a synchronous HTTP request by default.

        :param str ticket: ID of the download ticket (required)
        :param DownloadFormat format:
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        kwargs['_preload_content'] = False
        # Stream response to file
        with open(dest_file, 'wb') as out_file:
            (resp) = self.download_ticket_with_http_info(ticket, **kwargs)  # noqa: E501
            if resp:
                try:
                    for chunk in resp.iter_content(chunk_size=65536):
                        out_file.write(chunk)
                finally:
                    resp.close()


    def download_ticket_with_http_info(self, ticket, **kwargs):  # noqa: E501
        """Download files listed in the given ticket.

        You can use POST to create a download ticket The files listed in the ticket are put into a tar archive
        This method makes a synchronous HTTP request by default.

        :param str ticket: ID of the download ticket (required)
        :param DownloadFormat format:
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['ticket','format',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket' is set
        if ('ticket' not in params or
                params['ticket'] is None):
            raise ValueError("Missing the required parameter `ticket` when calling `download_ticket`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
