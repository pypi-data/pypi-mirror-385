# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models
from flywheel.util import check_filename_params

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class FormResponsesApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_task_response(self, task_id, body, **kwargs):  # noqa: E501
        """Create a new response for a task using its protocol&#x27;s form schema

        Create a new response for a task using its protocol's form schema.  Responses can be saved multiple times before submission. Each response is validated against the form schema defined in the protocol.
        This method makes a synchronous HTTP request by default.

        :param str task_id: (required)
        :param FormResponseCreate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.create_task_response_with_http_info(task_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_task_response_with_http_info(task_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def create_task_response_with_http_info(self, task_id, body, **kwargs):  # noqa: E501
        """Create a new response for a task using its protocol&#x27;s form schema

        Create a new response for a task using its protocol's form schema.  Responses can be saved multiple times before submission. Each response is validated against the form schema defined in the protocol.
        This method makes a synchronous HTTP request by default.

        :param str task_id: (required)
        :param FormResponseCreate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """

        all_params = ['task_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_task_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `create_task_response`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_task_response`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'FormResponseCreate'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.FormResponseCreate.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/responses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreWorkflowsFormResponsesModelsFormResponseOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_response(self, response_id, **kwargs):  # noqa: E501
        """Retrieve a specific response

        Retrieve a specific response.
        This method makes a synchronous HTTP request by default.

        :param str response_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_response_with_http_info(response_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_response_with_http_info(response_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_response_with_http_info(self, response_id, **kwargs):  # noqa: E501
        """Retrieve a specific response

        Retrieve a specific response.
        This method makes a synchronous HTTP request by default.

        :param str response_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """

        all_params = ['response_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params or
                params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `get_response`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'response_id' in params:
            path_params['response_id'] = params['response_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/responses/{response_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreWorkflowsFormResponsesModelsFormResponseOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def list_task_responses(self, task_id, **kwargs):  # noqa: E501
        """List all responses for a given task

        List all responses for a given task.
        This method makes a synchronous HTTP request by default.

        :param str task_id: (required)
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: PageGenericFormResponseOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.list_task_responses_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_task_responses_with_http_info(task_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def list_task_responses_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """List all responses for a given task

        List all responses for a given task.
        This method makes a synchronous HTTP request by default.

        :param str task_id: (required)
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool async_: Perform the request asynchronously
        :return: PageGenericFormResponseOutput
        """

        all_params = ['task_id','filter','sort','limit','skip','page','after_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_task_responses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `list_task_responses`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{task_id}/responses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageGenericFormResponseOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def submit_response(self, response_id, **kwargs):  # noqa: E501
        """Submit a response. Validate against form schema and lock it

        Submit a response. Validate against form schema and lock it.  Once submitted: - submitted flag is set to true - submitted_at timestamp is recorded - origin is set to the submitting user - further edits are disabled
        This method makes a synchronous HTTP request by default.

        :param str response_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.submit_response_with_http_info(response_id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_response_with_http_info(response_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def submit_response_with_http_info(self, response_id, **kwargs):  # noqa: E501
        """Submit a response. Validate against form schema and lock it

        Submit a response. Validate against form schema and lock it.  Once submitted: - submitted flag is set to true - submitted_at timestamp is recorded - origin is set to the submitting user - further edits are disabled
        This method makes a synchronous HTTP request by default.

        :param str response_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """

        all_params = ['response_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params or
                params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `submit_response`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'response_id' in params:
            path_params['response_id'] = params['response_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/responses/{response_id}/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreWorkflowsFormResponsesModelsFormResponseOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def update_response(self, response_id, body, **kwargs):  # noqa: E501
        """Update a response only if not submitted

        Update a response only if not submitted.  Responses can be saved multiple times before submission. Once submitted, further edits are disabled.
        This method makes a synchronous HTTP request by default.

        :param str response_id: (required)
        :param FormResponseBase body: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.update_response_with_http_info(response_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_response_with_http_info(response_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def update_response_with_http_info(self, response_id, body, **kwargs):  # noqa: E501
        """Update a response only if not submitted

        Update a response only if not submitted.  Responses can be saved multiple times before submission. Once submitted, further edits are disabled.
        This method makes a synchronous HTTP request by default.

        :param str response_id: (required)
        :param FormResponseBase body: (required)
        :param bool async_: Perform the request asynchronously
        :return: CoreWorkflowsFormResponsesModelsFormResponseOutput
        """

        all_params = ['response_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params or
                params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `update_response`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_response`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'response_id' in params:
            path_params['response_id'] = params['response_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'FormResponseBase'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.FormResponseBase.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/responses/{response_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreWorkflowsFormResponsesModelsFormResponseOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
