# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models
from flywheel.util import check_filename_params

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class DimseApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_project_aet(self, body, **kwargs):  # noqa: E501
        """Create a new DIMSE project AET

        Will create a new DIMSE AET that refers to a Flywheel project. AETs can only be created by admins and use drone access via DIMSE.
        This method makes a synchronous HTTP request by default.

        :param ProjectAETInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: BaseAET
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.create_project_aet_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_project_aet_with_http_info(body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def create_project_aet_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new DIMSE project AET

        Will create a new DIMSE AET that refers to a Flywheel project. AETs can only be created by admins and use drone access via DIMSE.
        This method makes a synchronous HTTP request by default.

        :param ProjectAETInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: BaseAET
        """

        all_params = ['body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_aet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_project_aet`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'ProjectAETInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.ProjectAETInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseAET',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def create_service_aet(self, body, **kwargs):  # noqa: E501
        """Create a new DIMSE service AET

        Will create a new DIMSE AET that refers to an external DICOM node. Service AETs can be used to issue C-MOVEs to from project AETs. Requires login. AETs can only be created by admins.
        This method makes a synchronous HTTP request by default.

        :param union[ProjectAETInput,ServiceAETInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.create_service_aet_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_service_aet_with_http_info(body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def create_service_aet_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new DIMSE service AET

        Will create a new DIMSE AET that refers to an external DICOM node. Service AETs can be used to issue C-MOVEs to from project AETs. Requires login. AETs can only be created by admins.
        This method makes a synchronous HTTP request by default.

        :param union[ProjectAETInput,ServiceAETInput] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """

        all_params = ['body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_service_aet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_service_aet`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'union[ProjectAETInput,ServiceAETInput]'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.union[ProjectAETInput,ServiceAETInput].positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/services', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceAET',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_aet(self, project_aet, **kwargs):  # noqa: E501
        """Delete a DIMSE project AET

        Delete DIMSE project by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_aet_with_http_info(project_aet, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_aet_with_http_info(project_aet, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_aet_with_http_info(self, project_aet, **kwargs):  # noqa: E501
        """Delete a DIMSE project AET

        Delete DIMSE project by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """

        all_params = ['project_aet',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_aet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_aet' is set
        if ('project_aet' not in params or
                params['project_aet'] is None):
            raise ValueError("Missing the required parameter `project_aet` when calling `delete_project_aet`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_aet' in params:
            path_params['project_aet'] = params['project_aet']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/projects/{project_aet}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, int)',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_service_aet(self, service_aet, **kwargs):  # noqa: E501
        """Delete a DIMSE service AET

        Delete DIMSE service by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_service_aet_with_http_info(service_aet, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_aet_with_http_info(service_aet, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_service_aet_with_http_info(self, service_aet, **kwargs):  # noqa: E501
        """Delete a DIMSE service AET

        Delete DIMSE service by AET. AETs can only be deleted by admins.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, int)
        """

        all_params = ['service_aet',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_aet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_aet' is set
        if ('service_aet' not in params or
                params['service_aet'] is None):
            raise ValueError("Missing the required parameter `service_aet` when calling `delete_service_aet`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'service_aet' in params:
            path_params['service_aet'] = params['service_aet']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/services/{service_aet}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, int)',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_all_project_aets(self, **kwargs):  # noqa: E501
        """List all DIMSE project AETs

        Will list all DIMSE AETs referring to a Flywheel project. Project AETs can be used to issue C-FIND and C-MOVE on Flywheel projects. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ProjectAET]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_all_project_aets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_project_aets_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_all_project_aets_with_http_info(self, **kwargs):  # noqa: E501
        """List all DIMSE project AETs

        Will list all DIMSE AETs referring to a Flywheel project. Project AETs can be used to issue C-FIND and C-MOVE on Flywheel projects. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ProjectAET]
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_project_aets" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectAET]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_all_service_aets(self, **kwargs):  # noqa: E501
        """List all DIMSE services AETs

        Will list all DIMSE AETs referring to external DICOM nodes. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ServiceAET]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_all_service_aets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_service_aets_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_all_service_aets_with_http_info(self, **kwargs):  # noqa: E501
        """List all DIMSE services AETs

        Will list all DIMSE AETs referring to external DICOM nodes. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[ServiceAET]
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_service_aets" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceAET]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_aet(self, project_aet, **kwargs):  # noqa: E501
        """Get DIMSE project AET

        Get DIMSE project by AET, id or project id. Requires admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectAET
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_aet_with_http_info(project_aet, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_aet_with_http_info(project_aet, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_aet_with_http_info(self, project_aet, **kwargs):  # noqa: E501
        """Get DIMSE project AET

        Get DIMSE project by AET, id or project id. Requires admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str project_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectAET
        """

        all_params = ['project_aet',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_aet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_aet' is set
        if ('project_aet' not in params or
                params['project_aet'] is None):
            raise ValueError("Missing the required parameter `project_aet` when calling `get_project_aet`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_aet' in params:
            path_params['project_aet'] = params['project_aet']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/projects/{project_aet}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectAET',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_service_aet(self, service_aet, **kwargs):  # noqa: E501
        """Get DIMSE service by AET or id

        Get a DIMSE service. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_service_aet_with_http_info(service_aet, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_aet_with_http_info(service_aet, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_service_aet_with_http_info(self, service_aet, **kwargs):  # noqa: E501
        """Get DIMSE service by AET or id

        Get a DIMSE service. Requires login and admin privilege.
        This method makes a synchronous HTTP request by default.

        :param str service_aet: (required)
        :param bool async_: Perform the request asynchronously
        :return: ServiceAET
        """

        all_params = ['service_aet',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_aet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_aet' is set
        if ('service_aet' not in params or
                params['service_aet'] is None):
            raise ValueError("Missing the required parameter `service_aet` when calling `get_service_aet`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'service_aet' in params:
            path_params['service_aet'] = params['service_aet']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/dimse/services/{service_aet}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceAET',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
