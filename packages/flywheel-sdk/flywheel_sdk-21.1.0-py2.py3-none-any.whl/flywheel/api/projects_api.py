# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models
from flywheel.util import check_filename_params

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class ProjectsApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_project(self, body, **kwargs):  # noqa: E501
        """Create a new project

        This method makes a synchronous HTTP request by default.

        :param ProjectInput body: (required)
        :param bool inherit: Inherit permissions from the group permission template
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_with_http_info(body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new project

        This method makes a synchronous HTTP request by default.

        :param ProjectInput body: (required)
        :param bool inherit: Inherit permissions from the group permission template
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """

        all_params = ['body','inherit',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'inherit' in params:
            query_params.append(('inherit', params['inherit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'ProjectInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.ProjectInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsertedId',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_project_analysis(self, cid, body, **kwargs):  # noqa: E501
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_analysis_with_http_info(cid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_analysis_with_http_info(cid, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_analysis_with_http_info(self, cid, body, **kwargs):  # noqa: E501
        """Create an analysis and upload files.

        When query param \"job\" is \"true\", send JSON to create an analysis and job.  Otherwise, multipart/form-data to upload files and create an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param union[AdhocAnalysisInput,JobAnalysisInput] body: (required)
        :param bool job: returns job_id instead of analysis.id
        :param bool job: returns job_id instead of analysis.id
        :param bool async_: Perform the request asynchronously
        :return: InsertedId
        """

        all_params = ['cid','body','job','job',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `add_project_analysis`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project_analysis`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'job' in params:
            query_params.append(('job', params['job']))  # noqa: E501
        if 'job' in params:
            query_params.append(('job', params['job']))  # noqa: E501
        else:
            query_params.append(('job', 'true'))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'union[AdhocAnalysisInput,JobAnalysisInput]'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.union[AdhocAnalysisInput,JobAnalysisInput].positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/analyses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsertedId',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_project_analysis_note(self, container_id, analysis_id, body, **kwargs):  # noqa: E501
        """Add a note to a(n) project analysis.

        Add a note to a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_analysis_note_with_http_info(container_id, analysis_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_analysis_note_with_http_info(container_id, analysis_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_analysis_note_with_http_info(self, container_id, analysis_id, body, **kwargs):  # noqa: E501
        """Add a note to a(n) project analysis.

        Add a note to a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str container_id: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param NoteInput body: note content (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """

        all_params = ['container_id','analysis_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_analysis_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `add_project_analysis_note`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `add_project_analysis_note`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project_analysis_note`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'NoteInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.NoteInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{container_id}/analyses/{analysis_id}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Note',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_project_note(self, container_id, body, **kwargs):  # noqa: E501
        """Add a note to a(n) project.

        Add a note to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_note_with_http_info(container_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_note_with_http_info(container_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_note_with_http_info(self, container_id, body, **kwargs):  # noqa: E501
        """Add a note to a(n) project.

        Add a note to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """

        all_params = ['container_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `add_project_note`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project_note`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'NoteInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.NoteInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{container_id}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Note',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_project_permission(self, project_id, body, **kwargs):  # noqa: E501
        """Add a permission

        Add user to a project  Args:     project_id: The id of the project     permission: The permission to add     auth_session: The auth session  Returns:     RolePermissionOutput: The added permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param RolePermission body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_permission_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_permission_with_http_info(project_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_permission_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Add a permission

        Add user to a project  Args:     project_id: The id of the project     permission: The permission to add     auth_session: The auth session  Returns:     RolePermissionOutput: The added permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param RolePermission body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """

        all_params = ['project_id','body','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `add_project_permission`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project_permission`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'RolePermission'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.RolePermission.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RolePermissionOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_project_rule(self, project_id, body, **kwargs):  # noqa: E501
        """Create a new rule for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param GearRuleInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_rule_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_rule_with_http_info(project_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_rule_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create a new rule for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param GearRuleInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """

        all_params = ['project_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `add_project_rule`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project_rule`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearRuleInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearRuleInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearRuleOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_project_tag(self, cid, body, **kwargs):  # noqa: E501
        """Add a tag to a(n) project.

        Propagates changes to projects, sessions and acquisitions
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_tag_with_http_info(cid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_tag_with_http_info(cid, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_tag_with_http_info(self, cid, body, **kwargs):  # noqa: E501
        """Add a tag to a(n) project.

        Propagates changes to projects, sessions and acquisitions
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['cid','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `add_project_tag`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project_tag`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'Tag'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.Tag.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_project_tags(self, cid, body, **kwargs):  # noqa: E501
        """Add multiple tags to a(n) project

        Add multiple tags to a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_project_tags_with_http_info(cid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_tags_with_http_info(cid, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_project_tags_with_http_info(self, cid, body, **kwargs):  # noqa: E501
        """Add multiple tags to a(n) project

        Add multiple tags to a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['cid','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `add_project_tags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_project_tags`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/tags', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def catalog_list(self, **kwargs):  # noqa: E501
        """Catalog List

        This method makes a synchronous HTTP request by default.

        :param str search_string: Include only results containing the search string
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[CatalogListOutput],Page]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.catalog_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.catalog_list_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def catalog_list_with_http_info(self, **kwargs):  # noqa: E501
        """Catalog List

        This method makes a synchronous HTTP request by default.

        :param str search_string: Include only results containing the search string
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[CatalogListOutput],Page]
        """

        all_params = ['search_string','filter','sort','limit','skip','page','after_id','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalog_list" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_string' in params:
            query_params.append(('search_string', params['search_string']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/catalog-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[list[CatalogListOutput],Page]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project(self, project_id, **kwargs):  # noqa: E501
        """Delete a project

        Only site admins and users with \"admin\" project permissions may delete a project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Delete a project

        Only site admins and users with \"admin\" project permissions may delete a project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['project_id','delete_reason',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_project`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'delete_reason' in params:
            query_params.append(('delete_reason', params['delete_reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_analysis(self, cid, analysis_id, **kwargs):  # noqa: E501
        """Delete an analysis

        Delete an analysis for a container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_analysis_with_http_info(cid, analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_analysis_with_http_info(cid, analysis_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_analysis_with_http_info(self, cid, analysis_id, **kwargs):  # noqa: E501
        """Delete an analysis

        Delete an analysis for a container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param ContainerDeleteReason delete_reason: Provide a reason for the deletion
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['cid','analysis_id','delete_reason',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_project_analysis`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `delete_project_analysis`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'delete_reason' in params:
            query_params.append(('delete_reason', params['delete_reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/analyses/{analysis_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_analysis_note(self, cid, analysis_id, note_id, **kwargs):  # noqa: E501
        """Remove a note from a(n) project analysis.

        Remove a note from a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_analysis_note_with_http_info(cid, analysis_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_analysis_note_with_http_info(cid, analysis_id, note_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_analysis_note_with_http_info(self, cid, analysis_id, note_id, **kwargs):  # noqa: E501
        """Remove a note from a(n) project analysis.

        Remove a note from a(n) project analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: 24-char hex id (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str note_id: 24-char hex note id (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['cid','analysis_id','note_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_analysis_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_project_analysis_note`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `delete_project_analysis_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `delete_project_analysis_note`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/analyses/{analysis_id}/notes/{note_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_file(self, cid, filename, **kwargs):  # noqa: E501
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_file_with_http_info(cid, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_file_with_http_info(cid, filename, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_file_with_http_info(self, cid, filename, **kwargs):  # noqa: E501
        """Delete a file

        A user with read-write or higher permissions on the container may delete files that were uploaded by users or were the output of jobs. (Specifically, files whose `origin.type` is either `job` or `user`.) <br/> A user with admin permissions on the container may delete any file.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param ContainerDeleteReason delete_reason: A reason for deletion when audit-trail is enabled
        :param bool force: Force deletion of the file even if some checks fail. Deprecated, will be removed in a future release.
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['cid','filename','delete_reason','force',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_project_file`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `delete_project_file`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'delete_reason' in params:
            query_params.append(('delete_reason', params['delete_reason']))  # noqa: E501
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/files/{filename}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_note(self, cid, note_id, **kwargs):  # noqa: E501
        """Remove a note from a(n) project

        Remove a note from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_note_with_http_info(cid, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_note_with_http_info(cid, note_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_note_with_http_info(self, cid, note_id, **kwargs):  # noqa: E501
        """Remove a note from a(n) project

        Remove a note from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['cid','note_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_project_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `delete_project_note`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/notes/{note_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_tag(self, cid, value, **kwargs):  # noqa: E501
        """Delete a tag

        Delete a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_tag_with_http_info(cid, value, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_tag_with_http_info(cid, value, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_tag_with_http_info(self, cid, value, **kwargs):  # noqa: E501
        """Delete a tag

        Delete a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['cid','value',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_project_tag`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `delete_project_tag`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/tags/{value}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_tags(self, cid, body, **kwargs):  # noqa: E501
        """Delete multiple tags from a(n) project

        Delete multiple tags from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_tags_with_http_info(cid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_tags_with_http_info(cid, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_tags_with_http_info(self, cid, body, **kwargs):  # noqa: E501
        """Delete multiple tags from a(n) project

        Delete multiple tags from a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param list[str] body: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['cid','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_project_tags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_project_tags`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_project_user_permission(self, project_id, uid, **kwargs):  # noqa: E501
        """Delete a permission

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_project_user_permission_with_http_info(project_id, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_user_permission_with_http_info(project_id, uid, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_project_user_permission_with_http_info(self, project_id, uid, **kwargs):  # noqa: E501
        """Delete a permission

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['project_id','uid','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_user_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_project_user_permission`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `delete_project_user_permission`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/permissions/{uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_projects_by_ids(self, body, **kwargs):  # noqa: E501
        """Delete multiple projects by ID list

        Delete multiple projects by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_projects_by_ids_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_projects_by_ids_with_http_info(body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_projects_by_ids_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete multiple projects by ID list

        Delete multiple projects by ID list
        This method makes a synchronous HTTP request by default.

        :param list[str] body: List of IDs to delete (required)
        :param ContainerDeleteReason delete_reason:
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['body','delete_reason',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_projects_by_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_projects_by_ids`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delete_reason' in params:
            query_params.append(('delete_reason', params['delete_reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_file_from_project(self, project_id, file_name, dest_file, **kwargs):  # noqa: E501
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        kwargs['_preload_content'] = False
        # Stream response to file
        with open(dest_file, 'wb') as out_file:
            (resp) = self.download_file_from_project_with_http_info(project_id, file_name, **kwargs)  # noqa: E501
            if resp:
                try:
                    for chunk in resp.iter_content(chunk_size=65536):
                        out_file.write(chunk)
                finally:
                    resp.close()


    def download_file_from_project_with_http_info(self, project_id, file_name, **kwargs):  # noqa: E501
        """Download a file.

        Files can be downloaded directly from this endpoint with a valid \"Authorization\" header or via a ticket id.  To generate a ticket:   - Make a request with an empty \"ticket\" parameter and a valid \"Authorization\" header. The server will respond with a generated ticket id.   - Make another request with the received ticket id in the \"ticket\" parameter. A valid \"Authorization\" header is no longer required.  When \"view\" is true, [RFC7233](https://tools.ietf.org/html/rfc7233) range request headers are supported.  When virus_scan feature is enabled the quarantined files only can be downloaded using signed urls otherwise it will return with a HTTP 400 response.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """

        all_params = ['project_id','file_name','info','member','view','version','hash','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file_from_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `download_file_from_project`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `download_file_from_project`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'file_name' in params:
            path_params['file_name'] = params['file_name']  # noqa: E501

        query_params = []
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/files/{file_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[DownloadTicketStub,ZipfileInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_file_zip_info(self, project_id, file_name, **kwargs):  # noqa: E501
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_file_zip_info_with_http_info(project_id, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_file_zip_info_with_http_info(project_id, file_name, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_file_zip_info_with_http_info(self, project_id, file_name, **kwargs):  # noqa: E501
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """

        all_params = ['project_id','file_name','ticket','info','member','view','version','hash','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_file_zip_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_file_zip_info`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `get_project_file_zip_info`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'file_name' in params:
            path_params['file_name'] = params['file_name']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        else:
            query_params.append(('info', 'true'))
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/files/{file_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileZipInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_download_ticket(self, project_id, file_name, **kwargs):  # noqa: E501
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_download_ticket_with_http_info(project_id, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_download_ticket_with_http_info(project_id, file_name, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_download_ticket_with_http_info(self, project_id, file_name, **kwargs):  # noqa: E501
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str file_name: output file name (required)
        :param str ticket: The generated ticket id for the download, or present but empty to generate a ticket id
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
        :param int version: version of the file to download
        :param str hash: file hash for comparison
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """

        all_params = ['project_id','file_name','ticket','info','member','view','version','hash','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_download_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_download_ticket`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `get_project_download_ticket`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'file_name' in params:
            path_params['file_name'] = params['file_name']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/files/{file_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[DownloadTicketStub,ZipfileInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_input_from_project_analysis(self, project_id, analysis_id, filename, dest_file, **kwargs):  # noqa: E501
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        kwargs['_preload_content'] = False
        # Stream response to file
        with open(dest_file, 'wb') as out_file:
            (resp) = self.download_input_from_project_analysis_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
            if resp:
                try:
                    for chunk in resp.iter_content(chunk_size=65536):
                        out_file.write(chunk)
                finally:
                    resp.close()


    def download_input_from_project_analysis_with_http_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Download analysis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the analysis. If no \"ticket\" query param is included, inputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """

        all_params = ['project_id','analysis_id','filename','info','member','view','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_input_from_project_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `download_input_from_project_analysis`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `download_input_from_project_analysis`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `download_input_from_project_analysis`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/analyses/{analysis_id}/inputs/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[DownloadTicketStub,ZipfileInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_analysis_input_zip_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_analysis_input_zip_info_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_analysis_input_zip_info_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_analysis_input_zip_info_with_http_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """

        all_params = ['project_id','analysis_id','filename','ticket','info','member','view','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_analysis_input_zip_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_analysis_input_zip_info`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `get_project_analysis_input_zip_info`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `get_project_analysis_input_zip_info`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        else:
            query_params.append(('info', 'true'))
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/analyses/{analysis_id}/inputs/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileZipInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_analysis_input_download_ticket(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_analysis_input_download_ticket_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_analysis_input_download_ticket_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_analysis_input_download_ticket_with_http_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: 24-char hex ticket id
        :param bool info: get file info only
        :param str member: get zipfile member
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """

        all_params = ['project_id','analysis_id','filename','ticket','info','member','view','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_analysis_input_download_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_analysis_input_download_ticket`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `get_project_analysis_input_download_ticket`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `get_project_analysis_input_download_ticket`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/analyses/{analysis_id}/inputs/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[DownloadTicketStub,ZipfileInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_output_from_project_analysis(self, project_id, analysis_id, filename, dest_file, **kwargs):  # noqa: E501
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param str dest_file: Destination file path
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        kwargs['_preload_content'] = False
        # Stream response to file
        with open(dest_file, 'wb') as out_file:
            (resp) = self.download_output_from_project_analysis_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
            if resp:
                try:
                    for chunk in resp.iter_content(chunk_size=65536):
                        out_file.write(chunk)
                finally:
                    resp.close()


    def download_output_from_project_analysis_with_http_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Download analysis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the analysis. If no \"ticket\" query param is included, outputs will be downloaded directly.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """

        all_params = ['project_id','analysis_id','filename','info','member','view','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_output_from_project_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `download_output_from_project_analysis`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `download_output_from_project_analysis`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `download_output_from_project_analysis`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/analyses/{analysis_id}/files/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[DownloadTicketStub,ZipfileInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_analysis_output_zip_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_analysis_output_zip_info_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_analysis_output_zip_info_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_analysis_output_zip_info_with_http_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Retrieve the zip info of a child file by name.

        Does not work on files whose names contain a forward slash.
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: FileZipInfo
        """

        all_params = ['project_id','analysis_id','filename','ticket','info','member','view','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_analysis_output_zip_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_analysis_output_zip_info`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `get_project_analysis_output_zip_info`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `get_project_analysis_output_zip_info`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        else:
            query_params.append(('info', 'true'))
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/analyses/{analysis_id}/files/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileZipInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_analysis_output_download_ticket(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_analysis_output_download_ticket_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_analysis_output_download_ticket_with_http_info(project_id, analysis_id, filename, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_analysis_output_download_ticket_with_http_info(self, project_id, analysis_id, filename, **kwargs):  # noqa: E501
        """Get a signed URL to download a named child file.

        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-character hex ID (required)
        :param str analysis_id: 24-char hex analysis id (required)
        :param str filename: filename to download (get tar of all if empty) (required)
        :param str ticket: ticket id of the outputs to download
        :param bool info: If the file is a zipfile, return a json response of zipfile member information
        :param str member: The filename of a zipfile member to download rather than the entire file
        :param bool view: feature flag for view/download
        :param str range: byte ranges to return
        :param list[str] x_accept_feature: redirect header
        :param bool async_: Perform the request asynchronously
        :return: union[DownloadTicketStub,ZipfileInfo]
        """

        all_params = ['project_id','analysis_id','filename','ticket','info','member','view','range','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_analysis_output_download_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_analysis_output_download_ticket`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `get_project_analysis_output_download_ticket`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `get_project_analysis_output_download_ticket`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'info' in params:
            query_params.append(('info', params['info']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'view' in params:
            query_params.append(('view', params['view']))  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/analyses/{analysis_id}/files/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[DownloadTicketStub,ZipfileInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def end_project_packfile_upload(self, token, metadata, file_count, project_id, **kwargs):  # noqa: E501
        """End a packfile upload

        This method makes a synchronous HTTP request by default.

        :param str token: (required)
        :param str metadata: Metadata object as a JSON-encoded string (required)
        :param int file_count: Number of files uploaded into this packfile. (required)
        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.end_project_packfile_upload_with_http_info(token, metadata, file_count, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.end_project_packfile_upload_with_http_info(token, metadata, file_count, project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def end_project_packfile_upload_with_http_info(self, token, metadata, file_count, project_id, **kwargs):  # noqa: E501
        """End a packfile upload

        This method makes a synchronous HTTP request by default.

        :param str token: (required)
        :param str metadata: Metadata object as a JSON-encoded string (required)
        :param int file_count: Number of files uploaded into this packfile. (required)
        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['token','metadata','file_count','project_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method end_project_packfile_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `end_project_packfile_upload`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `end_project_packfile_upload`")  # noqa: E501
        # verify the required parameter 'file_count' is set
        if ('file_count' not in params or
                params['file_count'] is None):
            raise ValueError("Missing the required parameter `file_count` when calling `end_project_packfile_upload`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `end_project_packfile_upload`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'file_count' in params:
            query_params.append(('file_count', params['file_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/packfile-end', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_all_projects(self, **kwargs):  # noqa: E501
        """Get a list of projects

        This method makes a synchronous HTTP request by default.

        :param bool counts: Append the count of subjects in each project
        :param bool stats: Return the status of subjects and sessions in each project
        :param bool join_avatars: Return the joined avatars of the permissions
        :param JoinType join:
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[ProjectListOutput],Page]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_all_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_projects_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_all_projects_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of projects

        This method makes a synchronous HTTP request by default.

        :param bool counts: Append the count of subjects in each project
        :param bool stats: Return the status of subjects and sessions in each project
        :param bool join_avatars: Return the joined avatars of the permissions
        :param JoinType join:
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[ProjectListOutput],Page]
        """

        all_params = ['counts','stats','join_avatars','join','exhaustive','include_all_info','filter','sort','limit','skip','page','after_id','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_projects" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'counts' in params:
            query_params.append(('counts', params['counts']))  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
        if 'join_avatars' in params:
            query_params.append(('join_avatars', params['join_avatars']))  # noqa: E501
        if 'join' in params:
            query_params.append(('join', params['join']))  # noqa: E501
        if 'exhaustive' in params:
            query_params.append(('exhaustive', params['exhaustive']))  # noqa: E501
        if 'include_all_info' in params:
            query_params.append(('include_all_info', params['include_all_info']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[list[ProjectListOutput],Page]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_all_projects_groups(self, **kwargs):  # noqa: E501
        """List all groups which have a project in them

        This method makes a synchronous HTTP request by default.

        :param bool exhaustive: returns exhaustive list if correct permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[GroupOutput]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_all_projects_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_projects_groups_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_all_projects_groups_with_http_info(self, **kwargs):  # noqa: E501
        """List all groups which have a project in them

        This method makes a synchronous HTTP request by default.

        :param bool exhaustive: returns exhaustive list if correct permissions
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: list[GroupOutput]
        """

        all_params = ['exhaustive','filter','sort','limit','skip','page','after_id','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_projects_groups" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exhaustive' in params:
            query_params.append(('exhaustive', params['exhaustive']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupOutput]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_catalog_list_filter_options(self, **kwargs):  # noqa: E501
        """Get all filter options for sharing a project

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SharingFilterOptions
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_catalog_list_filter_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_catalog_list_filter_options_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_catalog_list_filter_options_with_http_info(self, **kwargs):  # noqa: E501
        """Get all filter options for sharing a project

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SharingFilterOptions
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog_list_filter_options" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/catalog-list-filter-options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SharingFilterOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project(self, project_id, **kwargs):  # noqa: E501
        """Get a single project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get a single project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool join_avatars: add name and avatar to notes
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectOutput
        """

        all_params = ['project_id','join','join_avatars','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'join' in params:
            query_params.append(('join', params['join']))  # noqa: E501
        if 'join_avatars' in params:
            query_params.append(('join_avatars', params['join_avatars']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_acquisitions(self, project_id, **kwargs):  # noqa: E501
        """List all acquisitions for the given project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str collection_id:
        :param bool exhaustive:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_acquisitions_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_acquisitions_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_acquisitions_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """List all acquisitions for the given project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str collection_id:
        :param bool exhaustive:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[AcquisitionListOutput],Page]
        """

        all_params = ['project_id','collection_id','exhaustive','join','include_all_info','filter','sort','limit','skip','page','after_id','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_acquisitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_acquisitions`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'collection_id' in params:
            query_params.append(('collection_id', params['collection_id']))  # noqa: E501
        if 'exhaustive' in params:
            query_params.append(('exhaustive', params['exhaustive']))  # noqa: E501
        if 'join' in params:
            query_params.append(('join', params['join']))  # noqa: E501
        if 'include_all_info' in params:
            query_params.append(('include_all_info', params['include_all_info']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/acquisitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[list[AcquisitionListOutput],Page]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_analyses(self, cid, **kwargs):  # noqa: E501
        """Get analyses for a(n) project.

        Returns analyses that directly belong to this resource.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_analyses_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_analyses_with_http_info(cid, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_analyses_with_http_info(self, cid, **kwargs):  # noqa: E501
        """Get analyses for a(n) project.

        Returns analyses that directly belong to this resource.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param bool inflate_job:
        :param bool join_avatars:
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]
        """

        all_params = ['cid','inflate_job','join_avatars','join','include_all_info','filter','sort','limit','skip','page','after_id','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_analyses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_project_analyses`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'inflate_job' in params:
            query_params.append(('inflate_job', params['inflate_job']))  # noqa: E501
        if 'join_avatars' in params:
            query_params.append(('join_avatars', params['join_avatars']))  # noqa: E501
        if 'join' in params:
            query_params.append(('join', params['join']))  # noqa: E501
        if 'include_all_info' in params:
            query_params.append(('include_all_info', params['include_all_info']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/analyses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[Page,list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_analysis(self, cid, analysis_id, **kwargs):  # noqa: E501
        """Get an analysis.

        Get an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_analysis_with_http_info(cid, analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_analysis_with_http_info(cid, analysis_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_analysis_with_http_info(self, cid, analysis_id, **kwargs):  # noqa: E501
        """Get an analysis.

        Get an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool join_avatars:
        :param JoinType join:
        :param bool async_: Perform the request asynchronously
        :return: union[AnalysisOutputInflatedJob,AnalysisOutput]
        """

        all_params = ['cid','analysis_id','inflate_job','join_avatars','join',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_project_analysis`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `get_project_analysis`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'inflate_job' in params:
            query_params.append(('inflate_job', params['inflate_job']))  # noqa: E501
        if 'join_avatars' in params:
            query_params.append(('join_avatars', params['join_avatars']))  # noqa: E501
        if 'join' in params:
            query_params.append(('join', params['join']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/analyses/{analysis_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[AnalysisOutputInflatedJob,AnalysisOutput]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_file_info(self, cid, filename, **kwargs):  # noqa: E501
        """Get info for a particular file.

        Get info for a particular file.
        This method makes a synchronous HTTP request by default.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_file_info_with_http_info(cid, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_file_info_with_http_info(cid, filename, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_file_info_with_http_info(self, cid, filename, **kwargs):  # noqa: E501
        """Get info for a particular file.

        Get info for a particular file.
        This method makes a synchronous HTTP request by default.

        :param str cid: Container Id (required)
        :param str filename: (required)
        :param bool async_: Perform the request asynchronously
        :return: FileOutput
        """

        all_params = ['cid','filename',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_file_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_project_file_info`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `get_project_file_info`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/files/{filename}/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_note(self, cid, note_id, **kwargs):  # noqa: E501
        """Get a note of a(n) project.

        Get a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_note_with_http_info(cid, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_note_with_http_info(cid, note_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_note_with_http_info(self, cid, note_id, **kwargs):  # noqa: E501
        """Get a note of a(n) project.

        Get a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: Note
        """

        all_params = ['cid','note_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_project_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `get_project_note`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/notes/{note_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Note',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_rule(self, project_id, rule_id, **kwargs):  # noqa: E501
        """Get a project rule.

        Get a project rule.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_rule_with_http_info(project_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_rule_with_http_info(project_id, rule_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_rule_with_http_info(self, project_id, rule_id, **kwargs):  # noqa: E501
        """Get a project rule.

        Get a project rule.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """

        all_params = ['project_id','rule_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `get_project_rule`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule_id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/rules/{rule_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearRuleOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_rules(self, project_id, **kwargs):  # noqa: E501
        """List all rules for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[GearRuleOutput]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_rules_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_rules_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_rules_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """List all rules for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[GearRuleOutput]
        """

        all_params = ['project_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_rules`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GearRuleOutput]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_sessions(self, project_id, **kwargs):  # noqa: E501
        """List all sessions for the given project.

        Returns a page of sessions by their parent
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_sessions_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_sessions_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_sessions_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """List all sessions for the given project.

        Returns a page of sessions by their parent
        This method makes a synchronous HTTP request by default.

        :param str project_id: 24-char hex subject id (required)
        :param JoinType join: join file origins
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SessionListOutput]]
        """

        all_params = ['project_id','join','include_all_info','filter','sort','limit','skip','page','after_id','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_sessions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_sessions`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'join' in params:
            query_params.append(('join', params['join']))  # noqa: E501
        if 'include_all_info' in params:
            query_params.append(('include_all_info', params['include_all_info']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[Page,list[SessionListOutput]]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_settings(self, project_id, **kwargs):  # noqa: E501
        """Get a(n) project settings

        Route for getting settings from a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_settings_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_settings_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_settings_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get a(n) project settings

        Route for getting settings from a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """

        all_params = ['project_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_settings`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectSettingsOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_subjects(self, project_id, **kwargs):  # noqa: E501
        """List all subjects for the given project.

        List all subjects for the given project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_subjects_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_subjects_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_subjects_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """List all subjects for the given project.

        List all subjects for the given project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param JoinType join:
        :param bool include_all_info: Include all info in returned objects
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param list[str] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[Page,list[SubjectOutputForList]]
        """

        all_params = ['project_id','join','include_all_info','filter','sort','limit','skip','page','after_id','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_subjects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_subjects`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'join' in params:
            query_params.append(('join', params['join']))  # noqa: E501
        if 'include_all_info' in params:
            query_params.append(('include_all_info', params['include_all_info']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/subjects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[Page,list[SubjectOutputForList]]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_tag(self, cid, value, **kwargs):  # noqa: E501
        """Get the value of a tag, by name.

        Get the value of a tag, by name
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_tag_with_http_info(cid, value, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_tag_with_http_info(cid, value, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_tag_with_http_info(self, cid, value, **kwargs):  # noqa: E501
        """Get the value of a tag, by name.

        Get the value of a tag, by name
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """

        all_params = ['cid','value',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_project_tag`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `get_project_tag`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/tags/{value}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_project_user_permission(self, project_id, uid, **kwargs):  # noqa: E501
        """List a user&#x27;s permissions for this project.

        Get a user's permission from a project  Args:     project_id: The id of the project     uid: The id of the user     auth_session: The auth session  Returns:     RolePermissionOutput: The permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_project_user_permission_with_http_info(project_id, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_user_permission_with_http_info(project_id, uid, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_project_user_permission_with_http_info(self, project_id, uid, **kwargs):  # noqa: E501
        """List a user&#x27;s permissions for this project.

        Get a user's permission from a project  Args:     project_id: The id of the project     uid: The id of the user     auth_session: The auth session  Returns:     RolePermissionOutput: The permission
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """

        all_params = ['project_id','uid',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_user_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_user_permission`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `get_project_user_permission`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/permissions/{uid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RolePermissionOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project(self, project_id, body, **kwargs):  # noqa: E501
        """Update a project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectModify body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_with_http_info(project_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Update a project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectModify body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['project_id','body','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `modify_project`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'ProjectModify'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.ProjectModify.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_analysis(self, cid, analysis_id, body, **kwargs):  # noqa: E501
        """Modify an analysis.

        Modify an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_analysis_with_http_info(cid, analysis_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_analysis_with_http_info(cid, analysis_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_analysis_with_http_info(self, cid, analysis_id, body, **kwargs):  # noqa: E501
        """Modify an analysis.

        Modify an analysis.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param AnalysisModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['cid','analysis_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_project_analysis`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `modify_project_analysis`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_analysis`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'AnalysisModifyInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.AnalysisModifyInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/analyses/{analysis_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_file(self, cid, filename, body, **kwargs):  # noqa: E501
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_file_with_http_info(cid, filename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_file_with_http_info(cid, filename, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_file_with_http_info(self, cid, filename, body, **kwargs):  # noqa: E501
        """Modify a file&#x27;s attributes

        Note: If modifying a file's modality, the current classification will be cleared (except for items in the \"Custom\" list)
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['cid','filename','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_project_file`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `modify_project_file`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_file`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'FileModifyInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.FileModifyInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/files/{filename}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_file_classification(self, cid, filename, body, **kwargs):  # noqa: E501
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_file_classification_with_http_info(cid, filename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_file_classification_with_http_info(cid, filename, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_file_classification_with_http_info(self, cid, filename, body, **kwargs):  # noqa: E501
        """Update classification for a particular file.

        If replacing a file's classification, the modality can optionally be modified as well.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param FileClassificationDelta body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['cid','filename','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_file_classification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_project_file_classification`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `modify_project_file_classification`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_file_classification`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'FileClassificationDelta'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.FileClassificationDelta.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/files/{filename}/classification', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_file_info(self, cid, filename, body, **kwargs):  # noqa: E501
        """Update info for a particular file.

        Modify and return the file 'info' field
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_file_info_with_http_info(cid, filename, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_file_info_with_http_info(cid, filename, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_file_info_with_http_info(self, cid, filename, body, **kwargs):  # noqa: E501
        """Update info for a particular file.

        Modify and return the file 'info' field
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str filename: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['cid','filename','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_file_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_project_file_info`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `modify_project_file_info`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_file_info`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'Info'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.Info.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/files/{filename}/info', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_info(self, cid, body, **kwargs):  # noqa: E501
        """Update or replace info for a(n) project.

        Update or replace info for a(n) project. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_info_with_http_info(cid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_info_with_http_info(cid, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_info_with_http_info(self, cid, body, **kwargs):  # noqa: E501
        """Update or replace info for a(n) project.

        Update or replace info for a(n) project. Keys that contain '$' or '.' will be sanitized in the process of being updated on the container.
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param Info body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['cid','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_project_info`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_info`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'Info'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.Info.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/info', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_note(self, cid, note_id, body, **kwargs):  # noqa: E501
        """Update a note of a(n) project.

        Update a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_note_with_http_info(cid, note_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_note_with_http_info(cid, note_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_note_with_http_info(self, cid, note_id, body, **kwargs):  # noqa: E501
        """Update a note of a(n) project.

        Update a note of a(n) project
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str note_id: (required)
        :param NoteInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: int
        """

        all_params = ['cid','note_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_project_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `modify_project_note`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_note`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'NoteInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.NoteInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/notes/{note_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_rule(self, project_id, rule_id, body, **kwargs):  # noqa: E501
        """Update a rule on a project.

        Update a rule on a project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param GearRuleModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_rule_with_http_info(project_id, rule_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_rule_with_http_info(project_id, rule_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_rule_with_http_info(self, project_id, rule_id, body, **kwargs):  # noqa: E501
        """Update a rule on a project.

        Update a rule on a project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param GearRuleModifyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearRuleOutput
        """

        all_params = ['project_id','rule_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `modify_project_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `modify_project_rule`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_rule`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule_id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearRuleModifyInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearRuleModifyInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/rules/{rule_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearRuleOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_settings(self, project_id, body, **kwargs):  # noqa: E501
        """Modify a(n) project settings

        Route for modifying settings for a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectSettingsInput body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_settings_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_settings_with_http_info(project_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_settings_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Modify a(n) project settings

        Route for modifying settings for a a(n) project
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectSettingsInput body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: ProjectSettingsOutput
        """

        all_params = ['project_id','body','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `modify_project_settings`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_settings`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'ProjectSettingsInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.ProjectSettingsInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectSettingsOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_project_user_permission(self, project_id, uid, body, **kwargs):  # noqa: E501
        """Update a user&#x27;s permission for this project.

        Update a user's permission for this project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param RolePermissionUpdate body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_project_user_permission_with_http_info(project_id, uid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_project_user_permission_with_http_info(project_id, uid, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_project_user_permission_with_http_info(self, project_id, uid, body, **kwargs):  # noqa: E501
        """Update a user&#x27;s permission for this project.

        Update a user's permission for this project.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str uid: (required)
        :param RolePermissionUpdate body: (required)
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: RolePermissionOutput
        """

        all_params = ['project_id','uid','body','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_project_user_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `modify_project_user_permission`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if ('uid' not in params or
                params['uid'] is None):
            raise ValueError("Missing the required parameter `uid` when calling `modify_project_user_permission`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_project_user_permission`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'RolePermissionUpdate'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.RolePermissionUpdate.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/permissions/{uid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RolePermissionOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def project_copy(self, project_id, body, **kwargs):  # noqa: E501
        """Copy By Reference

        Copy a project and its descendants to a new project tree
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectCopyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectCopyOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.project_copy_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.project_copy_with_http_info(project_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def project_copy_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Copy By Reference

        Copy a project and its descendants to a new project tree
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectCopyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ProjectCopyOutput
        """

        all_params = ['project_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `project_copy`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `project_copy`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'ProjectCopyInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.ProjectCopyInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectCopyOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def project_packfile_upload(self, project_id, token, file, **kwargs):  # noqa: E501
        """Add files to an in-progress packfile

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str token: (required)
        :param str file: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.project_packfile_upload_with_http_info(project_id, token, file, **kwargs)  # noqa: E501
        else:
            (data) = self.project_packfile_upload_with_http_info(project_id, token, file, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def project_packfile_upload_with_http_info(self, project_id, token, file, **kwargs):  # noqa: E501
        """Add files to an in-progress packfile

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str token: (required)
        :param str file: (required)
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """

        all_params = ['project_id','token','file',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_packfile_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `project_packfile_upload`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `project_packfile_upload`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `project_packfile_upload`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/packfile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileOutput]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def recalc_all_projects(self, **kwargs):  # noqa: E501
        """Recalculate all sessions against their project templates.

        Iterates all projects that have a session template. Recalculate if projects' sessions satisfy the template. Returns list of modified session ids.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.recalc_all_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recalc_all_projects_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def recalc_all_projects_with_http_info(self, **kwargs):  # noqa: E501
        """Recalculate all sessions against their project templates.

        Iterates all projects that have a session template. Recalculate if projects' sessions satisfy the template. Returns list of modified session ids.
        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recalc_all_projects" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/recalc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SessionTemplateRecalcOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def recalc_project(self, project_id, **kwargs):  # noqa: E501
        """Currently does nothing--will eventually calculate if sessions in the project satisfy the template.

        Currently does nothing--will eventually calculate if sessions in the project satisfy the template.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.recalc_project_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.recalc_project_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def recalc_project_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Currently does nothing--will eventually calculate if sessions in the project satisfy the template.

        Currently does nothing--will eventually calculate if sessions in the project satisfy the template.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: SessionTemplateRecalcOutput
        """

        all_params = ['project_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recalc_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `recalc_project`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/recalc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SessionTemplateRecalcOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def remove_project_rule(self, project_id, rule_id, **kwargs):  # noqa: E501
        """Remove a project rule.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.remove_project_rule_with_http_info(project_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_project_rule_with_http_info(project_id, rule_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def remove_project_rule_with_http_info(self, project_id, rule_id, **kwargs):  # noqa: E501
        """Remove a project rule.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param str rule_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['project_id','rule_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_project_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `remove_project_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `remove_project_rule`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule_id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/rules/{rule_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def remove_project_template(self, project_id, **kwargs):  # noqa: E501
        """Remove the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.remove_project_template_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_project_template_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def remove_project_template_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Remove the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: DeletedResult
        """

        all_params = ['project_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_project_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `remove_project_template`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/template', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def rename_project_tag(self, cid, value, body, **kwargs):  # noqa: E501
        """Rename a tag.

        Rename a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.rename_project_tag_with_http_info(cid, value, body, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_project_tag_with_http_info(cid, value, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def rename_project_tag_with_http_info(self, cid, value, body, **kwargs):  # noqa: E501
        """Rename a tag.

        Rename a tag
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str value: The tag to interact with (required)
        :param Tag body: (required)
        :param bool async_: Perform the request asynchronously
        :return: str
        """

        all_params = ['cid','value','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_project_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `rename_project_tag`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `rename_project_tag`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rename_project_tag`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'Tag'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.Tag.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/tags/{value}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def set_project_template(self, project_id, body, **kwargs):  # noqa: E501
        """Set the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectTemplateListInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.set_project_template_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_project_template_with_http_info(project_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def set_project_template_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Set the session template for a project.

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectTemplateListInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: ModifiedResult
        """

        all_params = ['project_id','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_project_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `set_project_template`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_project_template`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'ProjectTemplateListInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.ProjectTemplateListInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModifiedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def start_project_packfile_upload(self, project_id, **kwargs):  # noqa: E501
        """Start a packfile upload to project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: UploadTokenOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.start_project_packfile_upload_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_project_packfile_upload_with_http_info(project_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def start_project_packfile_upload_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Start a packfile upload to project

        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: UploadTokenOutput
        """

        all_params = ['project_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_project_packfile_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `start_project_packfile_upload`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/packfile-start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadTokenOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def upload_file_to_project(self, container_id, file, **kwargs):  # noqa: E501
        """Upload a file to a(n) project.

        Upload a file to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.upload_file_to_project_with_http_info(container_id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_to_project_with_http_info(container_id, file, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def upload_file_to_project_with_http_info(self, container_id, file, **kwargs):  # noqa: E501
        """Upload a file to a(n) project.

        Upload a file to a(n) project.
        This method makes a synchronous HTTP request by default.

        :param str container_id: (required)
        :param str file: The file to upload (required)
        :param bool preserve_metadata:
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str metadata: Metadata object as a JSON-encoded string
        :param list[str] x_accept_feature: redirect header
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: union[list[FileOutput],UploadTicketOutput]
        """

        all_params = ['container_id','file','preserve_metadata','ticket','id','level','job','metadata','x_accept_feature','content_type',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_to_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `upload_file_to_project`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_file_to_project`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501

        query_params = []
        if 'preserve_metadata' in params:
            query_params.append(('preserve_metadata', params['preserve_metadata']))  # noqa: E501
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'job' in params:
            query_params.append(('job', params['job']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501
        if 'content_type' in params:
            header_params['content-type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{container_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[list[FileOutput],UploadTicketOutput]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def upload_output_to_project_analysis(self, cid, analysis_id, file, **kwargs):  # noqa: E501
        """Upload an output file to an analysis.

        Upload an output file to an analysis
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.upload_output_to_project_analysis_with_http_info(cid, analysis_id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_output_to_project_analysis_with_http_info(cid, analysis_id, file, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def upload_output_to_project_analysis_with_http_info(self, cid, analysis_id, file, **kwargs):  # noqa: E501
        """Upload an output file to an analysis.

        Upload an output file to an analysis
        This method makes a synchronous HTTP request by default.

        :param str cid: (required)
        :param str analysis_id: (required)
        :param str file: The file to upload (required)
        :param str ticket:
        :param str id:
        :param ContainerType level:
        :param str job:
        :param str content_type:
        :param bool async_: Perform the request asynchronously
        :return: list[FileOutput]
        """

        all_params = ['cid','analysis_id','file','ticket','id','level','job','content_type',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_output_to_project_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `upload_output_to_project_analysis`")  # noqa: E501
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `upload_output_to_project_analysis`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_output_to_project_analysis`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'job' in params:
            query_params.append(('job', params['job']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['content-type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{cid}/analyses/{analysis_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileOutput]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def upsert_project_hierarchy(self, project_id, body, **kwargs):  # noqa: E501
        """Create or update subject, session and acquisition containers in the project.

        Create, update or just return an existing container sub-hierarchy as-is for the given project. Useful for efficient and highly parallel automated imports using device authN, based on common routing fields such as id, uid and label.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectHierarchyInput body: (required)
        :param str uid_scope:
        :param bool async_: Perform the request asynchronously
        :return: ProjectHierarchyOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.upsert_project_hierarchy_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_project_hierarchy_with_http_info(project_id, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def upsert_project_hierarchy_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create or update subject, session and acquisition containers in the project.

        Create, update or just return an existing container sub-hierarchy as-is for the given project. Useful for efficient and highly parallel automated imports using device authN, based on common routing fields such as id, uid and label.
        This method makes a synchronous HTTP request by default.

        :param str project_id: (required)
        :param ProjectHierarchyInput body: (required)
        :param str uid_scope:
        :param bool async_: Perform the request asynchronously
        :return: ProjectHierarchyOutput
        """

        all_params = ['project_id','body','uid_scope',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_project_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `upsert_project_hierarchy`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upsert_project_hierarchy`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'uid_scope' in params:
            query_params.append(('uid_scope', params['uid_scope']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'ProjectHierarchyInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.ProjectHierarchyInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/upsert-hierarchy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectHierarchyOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
