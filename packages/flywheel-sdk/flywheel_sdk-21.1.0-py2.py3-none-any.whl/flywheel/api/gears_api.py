# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models
from flywheel.util import check_filename_params

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class GearsApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_gear(self, gear_name, body, **kwargs):  # noqa: E501
        """Create or update a gear.

        If no existing gear is found, one will be created Otherwise, the specified gear will be updated
        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearDocumentLegacyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearIdOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_gear_with_http_info(gear_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_gear_with_http_info(gear_name, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_gear_with_http_info(self, gear_name, body, **kwargs):  # noqa: E501
        """Create or update a gear.

        If no existing gear is found, one will be created Otherwise, the specified gear will be updated
        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearDocumentLegacyInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearIdOutput
        """

        all_params = ['gear_name','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_name' is set
        if ('gear_name' not in params or
                params['gear_name'] is None):
            raise ValueError("Missing the required parameter `gear_name` when calling `add_gear`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_gear`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_name' in params:
            path_params['gear_name'] = params['gear_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearDocumentLegacyInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearDocumentLegacyInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearIdOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def add_gear_permission(self, gear_name, permission_type, body, **kwargs):  # noqa: E501
        """Add an individual permission to the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissionsType permission_type: (required)
        :param GearPermissionsInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.add_gear_permission_with_http_info(gear_name, permission_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_gear_permission_with_http_info(gear_name, permission_type, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def add_gear_permission_with_http_info(self, gear_name, permission_type, body, **kwargs):  # noqa: E501
        """Add an individual permission to the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissionsType permission_type: (required)
        :param GearPermissionsInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """

        all_params = ['gear_name','permission_type','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_gear_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_name' is set
        if ('gear_name' not in params or
                params['gear_name'] is None):
            raise ValueError("Missing the required parameter `gear_name` when calling `add_gear_permission`")  # noqa: E501
        # verify the required parameter 'permission_type' is set
        if ('permission_type' not in params or
                params['permission_type'] is None):
            raise ValueError("Missing the required parameter `permission_type` when calling `add_gear_permission`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_gear_permission`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_name' in params:
            path_params['gear_name'] = params['gear_name']  # noqa: E501
        if 'permission_type' in params:
            path_params['permission_type'] = params['permission_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearPermissionsInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearPermissionsInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_name}/permissions/{permission_type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_gear(self, gear_id, **kwargs):  # noqa: E501
        """Delete a gear (not recommended)

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_gear_with_http_info(gear_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_gear_with_http_info(gear_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_gear_with_http_info(self, gear_id, **kwargs):  # noqa: E501
        """Delete a gear (not recommended)

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['gear_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `delete_gear`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['gear_id'] = params['gear_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_gear_permission(self, gear_name, permission_type, permission_id, **kwargs):  # noqa: E501
        """Delete an individual permission of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param GearPermissionsType permission_type: (required)
        :param str permission_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_gear_permission_with_http_info(gear_name, permission_type, permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_gear_permission_with_http_info(gear_name, permission_type, permission_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_gear_permission_with_http_info(self, gear_name, permission_type, permission_id, **kwargs):  # noqa: E501
        """Delete an individual permission of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param GearPermissionsType permission_type: (required)
        :param str permission_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['gear_name','permission_type','permission_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gear_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_name' is set
        if ('gear_name' not in params or
                params['gear_name'] is None):
            raise ValueError("Missing the required parameter `gear_name` when calling `delete_gear_permission`")  # noqa: E501
        # verify the required parameter 'permission_type' is set
        if ('permission_type' not in params or
                params['permission_type'] is None):
            raise ValueError("Missing the required parameter `permission_type` when calling `delete_gear_permission`")  # noqa: E501
        # verify the required parameter 'permission_id' is set
        if ('permission_id' not in params or
                params['permission_id'] is None):
            raise ValueError("Missing the required parameter `permission_id` when calling `delete_gear_permission`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_name' in params:
            path_params['gear_name'] = params['gear_name']  # noqa: E501
        if 'permission_type' in params:
            path_params['permission_type'] = params['permission_type']  # noqa: E501
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_name}/permissions/{permission_type}/{permission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_gear_permissions(self, gear_name, **kwargs):  # noqa: E501
        """Delete permissions of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.delete_gear_permissions_with_http_info(gear_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_gear_permissions_with_http_info(gear_name, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def delete_gear_permissions_with_http_info(self, gear_name, **kwargs):  # noqa: E501
        """Delete permissions of the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: None
        """

        all_params = ['gear_name',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gear_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_name' is set
        if ('gear_name' not in params or
                params['gear_name'] is None):
            raise ValueError("Missing the required parameter `gear_name` when calling `delete_gear_permissions`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_name' in params:
            path_params['gear_name'] = params['gear_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_name}/permissions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_all_gears(self, **kwargs):  # noqa: E501
        """List all gears

        List all gears
        This method makes a synchronous HTTP request by default.

        :param str project_id:
        :param bool all_versions: return all versions of each gear
        :param bool include_invalid: return gears with the 'invalid' flag set
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[GearDocument],Page]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_all_gears_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_gears_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_all_gears_with_http_info(self, **kwargs):  # noqa: E501
        """List all gears

        List all gears
        This method makes a synchronous HTTP request by default.

        :param str project_id:
        :param bool all_versions: return all versions of each gear
        :param bool include_invalid: return gears with the 'invalid' flag set
        :param str filter: The filter to apply. (e.g. label=my-label,created>2018-09-22)
        :param str sort: The sort fields and order. (e.g. label:asc,created:desc)
        :param int limit: The maximum number of entries to return.
        :param int skip: The number of entries to skip.
        :param int page: The page number (i.e. skip limit*page entries)
        :param str after_id: Paginate after the given id. (Cannot be used with sort, page or skip)
        :param bool exhaustive: Set to return a complete list regardless of permissions
        :param list[union[HeaderFeature,str]] x_accept_feature:
        :param bool async_: Perform the request asynchronously
        :return: union[list[GearDocument],Page]
        """

        all_params = ['project_id','all_versions','include_invalid','filter','sort','limit','skip','page','after_id','exhaustive','x_accept_feature',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_gears" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('project_id', params['project_id']))  # noqa: E501
        if 'all_versions' in params:
            query_params.append(('all_versions', params['all_versions']))  # noqa: E501
        if 'include_invalid' in params:
            query_params.append(('include_invalid', params['include_invalid']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501
        if 'exhaustive' in params:
            query_params.append(('exhaustive', params['exhaustive']))  # noqa: E501

        header_params = {}
        if 'x_accept_feature' in params:
            header_params['x-accept-feature'] = params['x_accept_feature']  # noqa: E501
            collection_formats['x-accept-feature'] = ''  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='union[list[GearDocument],Page]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear(self, gear_id, **kwargs):  # noqa: E501
        """Retrieve details about a specific gear

        Retrieve details about a specific gear
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_gear_with_http_info(gear_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_with_http_info(gear_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_gear_with_http_info(self, gear_id, **kwargs):  # noqa: E501
        """Retrieve details about a specific gear

        Retrieve details about a specific gear
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """

        all_params = ['gear_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `get_gear`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['gear_id'] = params['gear_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_context(self, gear_id, container_name, container_id, **kwargs):  # noqa: E501
        """Get context values for the given gear and container.

        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param str container_name: (required)
        :param str container_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, union[GearContextValueOutput,GearContextValueOutputUnfound])
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_gear_context_with_http_info(gear_id, container_name, container_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_context_with_http_info(gear_id, container_name, container_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_gear_context_with_http_info(self, gear_id, container_name, container_id, **kwargs):  # noqa: E501
        """Get context values for the given gear and container.

        Ref: https://github.com/flywheel-io/gears/tree/master/spec#contextual-values
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param str container_name: (required)
        :param str container_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: dict(str, union[GearContextValueOutput,GearContextValueOutputUnfound])
        """

        all_params = ['gear_id','container_name','container_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_context" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `get_gear_context`")  # noqa: E501
        # verify the required parameter 'container_name' is set
        if ('container_name' not in params or
                params['container_name'] is None):
            raise ValueError("Missing the required parameter `container_name` when calling `get_gear_context`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_gear_context`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['gear_id'] = params['gear_id']  # noqa: E501
        if 'container_name' in params:
            path_params['container_name'] = params['container_name']  # noqa: E501
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_id}/context/{container_name}/{container_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, union[GearContextValueOutput,GearContextValueOutputUnfound])',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_invocation(self, gear_id, **kwargs):  # noqa: E501
        """Get a schema for invoking a gear

        Get a schema for invoking a gear.
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_gear_invocation_with_http_info(gear_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_invocation_with_http_info(gear_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_gear_invocation_with_http_info(self, gear_id, **kwargs):  # noqa: E501
        """Get a schema for invoking a gear

        Get a schema for invoking a gear.
        This method makes a synchronous HTTP request by default.

        :param str gear_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: object
        """

        all_params = ['gear_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_invocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `get_gear_invocation`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['gear_id'] = params['gear_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_id}/invocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_series(self, gear_name, **kwargs):  # noqa: E501
        """Get gear series.

        Gets the series for the gear by its name
        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_gear_series_with_http_info(gear_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_series_with_http_info(gear_name, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_gear_series_with_http_info(self, gear_name, **kwargs):  # noqa: E501
        """Get gear series.

        Gets the series for the gear by its name
        This method makes a synchronous HTTP request by default.

        :param str gear_name: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """

        all_params = ['gear_name',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_name' is set
        if ('gear_name' not in params or
                params['gear_name'] is None):
            raise ValueError("Missing the required parameter `gear_name` when calling `get_gear_series`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_name' in params:
            path_params['gear_name'] = params['gear_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_name}/series', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_suggest(self, gear_id, container_name, container_id, **kwargs):  # noqa: E501
        """Get files with input suggestions, parent containers, and child containers for the given container.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_name: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param str filter:
        :param str sort:
        :param int limit:
        :param int skip:
        :param int page:
        :param list[str] include: Include only \"children\" or \"files\"
        :param str collection: Get suggestions for a collection
        :param bool async_: Perform the request asynchronously
        :return: GearSuggestionOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_gear_suggest_with_http_info(gear_id, container_name, container_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_suggest_with_http_info(gear_id, container_name, container_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_gear_suggest_with_http_info(self, gear_id, container_name, container_id, **kwargs):  # noqa: E501
        """Get files with input suggestions, parent containers, and child containers for the given container.

        This method makes a synchronous HTTP request by default.

        :param str gear_id: Id of the gear to interact with (required)
        :param str container_name: Type of the container to interact with (required)
        :param str container_id: Id of the container to interact with (required)
        :param str filter:
        :param str sort:
        :param int limit:
        :param int skip:
        :param int page:
        :param list[str] include: Include only \"children\" or \"files\"
        :param str collection: Get suggestions for a collection
        :param bool async_: Perform the request asynchronously
        :return: GearSuggestionOutput
        """

        all_params = ['gear_id','container_name','container_id','filter','sort','limit','skip','page','include','collection',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_suggest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_id' is set
        if ('gear_id' not in params or
                params['gear_id'] is None):
            raise ValueError("Missing the required parameter `gear_id` when calling `get_gear_suggest`")  # noqa: E501
        # verify the required parameter 'container_name' is set
        if ('container_name' not in params or
                params['container_name'] is None):
            raise ValueError("Missing the required parameter `container_name` when calling `get_gear_suggest`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_gear_suggest`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_id' in params:
            path_params['gear_id'] = params['gear_id']  # noqa: E501
        if 'container_name' in params:
            path_params['container_name'] = params['container_name']  # noqa: E501
        if 'container_id' in params:
            path_params['container_id'] = params['container_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'collection' in params:
            query_params.append(('collection', params['collection']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_id}/suggest/{container_name}/{container_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearSuggestionOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_gear_ticket(self, ticket_id, **kwargs):  # noqa: E501
        """Retrieve a specific gear ticket

        This method makes a synchronous HTTP request by default.

        :param str ticket_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicket
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_gear_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gear_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_gear_ticket_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Retrieve a specific gear ticket

        This method makes a synchronous HTTP request by default.

        :param str ticket_id: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicket
        """

        all_params = ['ticket_id',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gear_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if ('ticket_id' not in params or
                params['ticket_id'] is None):
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_gear_ticket`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticket_id'] = params['ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/ticket/{ticket_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearTicket',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_my_gear_tickets(self, **kwargs):  # noqa: E501
        """Retrieve all gear tickets for the current user

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_my_gear_tickets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_my_gear_tickets_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_my_gear_tickets_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all gear tickets for the current user

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: list[str]
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_gear_tickets" % key
                )
            params[key] = val
        del params['kwargs']
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/my-tickets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_gear_series(self, gear_name, body, **kwargs):  # noqa: E501
        """Update a gear series

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear series to modify (required)
        :param GearSeriesUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.modify_gear_series_with_http_info(gear_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_gear_series_with_http_info(gear_name, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def modify_gear_series_with_http_info(self, gear_name, body, **kwargs):  # noqa: E501
        """Update a gear series

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear series to modify (required)
        :param GearSeriesUpdate body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """

        all_params = ['gear_name','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_gear_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_name' is set
        if ('gear_name' not in params or
                params['gear_name'] is None):
            raise ValueError("Missing the required parameter `gear_name` when calling `modify_gear_series`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_gear_series`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_name' in params:
            path_params['gear_name'] = params['gear_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearSeriesUpdate'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearSeriesUpdate.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_name}/series', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def prepare_add_gear(self, body, **kwargs):  # noqa: E501
        """Prepare a gear upload

        Prepare a gear upload
        This method makes a synchronous HTTP request by default.

        :param GearDocumentInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicketOutput
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.prepare_add_gear_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.prepare_add_gear_with_http_info(body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def prepare_add_gear_with_http_info(self, body, **kwargs):  # noqa: E501
        """Prepare a gear upload

        Prepare a gear upload
        This method makes a synchronous HTTP request by default.

        :param GearDocumentInput body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearTicketOutput
        """

        all_params = ['body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prepare_add_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `prepare_add_gear`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearDocumentInput'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearDocumentInput.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/prepare-add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearTicketOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def replace_gear_permissions(self, gear_name, body, **kwargs):  # noqa: E501
        """Replace permissions for the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissions body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.replace_gear_permissions_with_http_info(gear_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_gear_permissions_with_http_info(gear_name, body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def replace_gear_permissions_with_http_info(self, gear_name, body, **kwargs):  # noqa: E501
        """Replace permissions for the given gear

        This method makes a synchronous HTTP request by default.

        :param str gear_name: Name of the gear to interact with (required)
        :param GearPermissions body: (required)
        :param bool async_: Perform the request asynchronously
        :return: GearSeries
        """

        all_params = ['gear_name','body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_gear_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gear_name' is set
        if ('gear_name' not in params or
                params['gear_name'] is None):
            raise ValueError("Missing the required parameter `gear_name` when calling `replace_gear_permissions`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_gear_permissions`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}
        if 'gear_name' in params:
            path_params['gear_name'] = params['gear_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearPermissions'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearPermissions.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/{gear_name}/permissions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def save_gear(self, body, **kwargs):  # noqa: E501
        """Report the result of a gear upload and save the ticket

        Report the result of a gear upload and save the ticket
        This method makes a synchronous HTTP request by default.

        :param GearSaveSubmission body: The ticket, repo and pointer (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.save_gear_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.save_gear_with_http_info(body, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def save_gear_with_http_info(self, body, **kwargs):  # noqa: E501
        """Report the result of a gear upload and save the ticket

        Report the result of a gear upload and save the ticket
        This method makes a synchronous HTTP request by default.

        :param GearSaveSubmission body: The ticket, repo and pointer (required)
        :param bool async_: Perform the request asynchronously
        :return: GearDocument
        """

        all_params = ['body',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_gear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_gear`")  # noqa: E501
        check_filename_params(params)

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            if 'GearSaveSubmission'.startswith('union'):
                body_type = type(params['body'])
                if getattr(body_type, 'positional_to_model', None):
                    body_params = body_type.positional_to_model(params['body'])
                else:
                    body_params = params['body']
            else:
                body_params = flywheel.models.GearSaveSubmission.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/gears/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GearDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
