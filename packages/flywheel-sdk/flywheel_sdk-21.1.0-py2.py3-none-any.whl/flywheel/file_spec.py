# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import mimetypes, os.path

class FileSpec:
    """A file or file-like object to be uploaded.

    Wrapper class providing a file-like interface to upload methods, for uploading files
    via the SDK.

    :param name: The name of the file being uploaded.
    :type name: str
    :param contents: If name is not the path to the file, this should be a file-like
        object from which the contents will be read.
    :type contents: io.IOBase
    :param content_type: The mimetype of the file.
    :type content_type: str
    :param size: The file size, in bytes. If the FileSpec is initialized with a file path,
        this will be looked up automatically from the file system. If not, it must be
        provided.
    :type size: int
    """
    def __init__(self, name, contents=None, content_type=None, size=None):
        self.name = name
        self.contents = contents
        self.content_type = content_type
        if size is not None:
            self.size = size
        elif isinstance(name, str) and os.path.isfile(name):
            self.size = os.path.getsize(name)
        else:
            self.size = None

    def to_file_tuple(self):
        """Returns a (filename, readable file-like object, mimetype) for this file.

        :rtype: (str, io.IOBase, str) 3-tuple
        """
        if self.contents is None:
            if not self.name:
                raise RuntimeError('FileSpec is invalid, file or content is required!')
            # TODO: Switch to library that supports file streaming
            f = open(self.name, 'rb')
            filename = os.path.basename(f.name)
            filedata = f
        else:
            filename = self.name
            filedata = self.contents

        if self.content_type is None:
            mimetype = (mimetypes.guess_type(filename)[0] or 'application/octet-stream')
        else:
            mimetype = self.content_type

        return tuple([filename, filedata, mimetype])

