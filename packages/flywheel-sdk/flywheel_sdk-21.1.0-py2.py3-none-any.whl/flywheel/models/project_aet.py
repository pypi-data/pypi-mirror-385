# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class ProjectAET(object):

    swagger_types = {
        'id': 'str',
        'created': 'datetime',
        'aet': 'str',
        'creator': 'str',
        'host': 'str',
        'port': 'int',
        'project_id': 'str'
    }

    attribute_map = {
        'id': '_id',
        'created': 'created',
        'aet': 'aet',
        'creator': 'creator',
        'host': 'host',
        'port': 'port',
        'project_id': 'project_id'
    }

    rattribute_map = {
        '_id': 'id',
        'created': 'created',
        'aet': 'aet',
        'creator': 'creator',
        'host': 'host',
        'port': 'port',
        'project_id': 'project_id'
    }

    def __init__(self, id=None, created=None, aet=None, creator=None, host=None, port=None, project_id=None):  # noqa: E501
        """ProjectAET - a model defined in Swagger"""
        super(ProjectAET, self).__init__()

        self._id = None
        self._created = None
        self._aet = None
        self._creator = None
        self._host = None
        self._port = None
        self._project_id = None
        self.discriminator = None
        self.alt_discriminator = None

        self.id = id
        self.created = created
        self.aet = aet
        self.creator = creator
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        self.project_id = project_id

    @property
    def id(self):
        """Gets the id of this ProjectAET.


        :return: The id of this ProjectAET.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectAET.


        :param id: The id of this ProjectAET.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this ProjectAET.


        :return: The created of this ProjectAET.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProjectAET.


        :param created: The created of this ProjectAET.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def aet(self):
        """Gets the aet of this ProjectAET.

        DICOM Application Entity Title

        :return: The aet of this ProjectAET.
        :rtype: str
        """
        return self._aet

    @aet.setter
    def aet(self, aet):
        """Sets the aet of this ProjectAET.

        DICOM Application Entity Title

        :param aet: The aet of this ProjectAET.  # noqa: E501
        :type: str
        """

        self._aet = aet

    @property
    def creator(self):
        """Gets the creator of this ProjectAET.

        Database ID of a user

        :return: The creator of this ProjectAET.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ProjectAET.

        Database ID of a user

        :param creator: The creator of this ProjectAET.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def host(self):
        """Gets the host of this ProjectAET.

        DICOM service hostname or IP

        :return: The host of this ProjectAET.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ProjectAET.

        DICOM service hostname or IP

        :param host: The host of this ProjectAET.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this ProjectAET.

        DICOM service port number

        :return: The port of this ProjectAET.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ProjectAET.

        DICOM service port number

        :param port: The port of this ProjectAET.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def project_id(self):
        """Gets the project_id of this ProjectAET.

        Unique database ID

        :return: The project_id of this ProjectAET.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectAET.

        Unique database ID

        :param project_id: The project_id of this ProjectAET.  # noqa: E501
        :type: str
        """

        self._project_id = project_id


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectAET):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
