# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.container_reference import ContainerReference  # noqa: F401,E501
from flywheel.models.core_models_common_source import CoreModelsCommonSource  # noqa: F401,E501
from flywheel.models.cvat_info import CVATInfo  # noqa: F401,E501
from flywheel.models.deid_log_skip_reason import DeidLogSkipReason  # noqa: F401,E501
from flywheel.models.file_gear_info import FileGearInfo  # noqa: F401,E501
from flywheel.models.file_parents import FileParents  # noqa: F401,E501
from flywheel.models.file_version import FileVersion  # noqa: F401,E501
from flywheel.models.file_version_copy_of import FileVersionCopyOf  # noqa: F401,E501
from flywheel.models.origin import Origin  # noqa: F401,E501
from flywheel.models.virus_scan import VirusScan  # noqa: F401,E501

from .mixins import FileMixin
class File(FileMixin):

    swagger_types = {
        'id': 'FileVersion',
        'parent_ref': 'ContainerReference',
        'name': 'str',
        'file_group': 'FileGroup',
        'provider_id': 'str',
        'uuid': 'str',
        'path': 'str',
        'reference': 'bool',
        'size': 'int',
        'hash': 'str',
        'client_hash': 'str',
        'zip_member_count': 'int',
        'virus_scan': 'VirusScan',
        'source_file_id': 'FileVersion',
        'restored_from': 'int',
        'restored_by': 'Origin',
        'parents': 'FileParents',
        'revision': 'int',
        'origin': 'Origin',
        'source': 'CoreModelsCommonSource',
        'type': 'str',
        'mimetype': 'str',
        'modality': 'str',
        'classification': 'dict(str, list[str])',
        'tags': 'list[str]',
        'info': 'object',
        'cvat': 'CVATInfo',
        'info_exists': 'bool',
        'deid_log_id': 'str',
        'deid_log_skip_reason': 'DeidLogSkipReason',
        'gear_info': 'FileGearInfo',
        'created': 'datetime',
        'modified': 'datetime',
        'replaced': 'datetime',
        'deleted': 'datetime',
        'copy_of': 'FileVersionCopyOf',
        'original_copy_of': 'FileVersion'
    }

    attribute_map = {
        'id': '_id',
        'parent_ref': 'parent_ref',
        'name': 'name',
        'file_group': 'file_group',
        'provider_id': 'provider_id',
        'uuid': 'uuid',
        'path': 'path',
        'reference': 'reference',
        'size': 'size',
        'hash': 'hash',
        'client_hash': 'client_hash',
        'zip_member_count': 'zip_member_count',
        'virus_scan': 'virus_scan',
        'source_file_id': 'source_file_id',
        'restored_from': 'restored_from',
        'restored_by': 'restored_by',
        'parents': 'parents',
        'revision': 'revision',
        'origin': 'origin',
        'source': 'source',
        'type': 'type',
        'mimetype': 'mimetype',
        'modality': 'modality',
        'classification': 'classification',
        'tags': 'tags',
        'info': 'info',
        'cvat': 'cvat',
        'info_exists': 'info_exists',
        'deid_log_id': 'deid_log_id',
        'deid_log_skip_reason': 'deid_log_skip_reason',
        'gear_info': 'gear_info',
        'created': 'created',
        'modified': 'modified',
        'replaced': 'replaced',
        'deleted': 'deleted',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of'
    }

    rattribute_map = {
        '_id': 'id',
        'parent_ref': 'parent_ref',
        'name': 'name',
        'file_group': 'file_group',
        'provider_id': 'provider_id',
        'uuid': 'uuid',
        'path': 'path',
        'reference': 'reference',
        'size': 'size',
        'hash': 'hash',
        'client_hash': 'client_hash',
        'zip_member_count': 'zip_member_count',
        'virus_scan': 'virus_scan',
        'source_file_id': 'source_file_id',
        'restored_from': 'restored_from',
        'restored_by': 'restored_by',
        'parents': 'parents',
        'revision': 'revision',
        'origin': 'origin',
        'source': 'source',
        'type': 'type',
        'mimetype': 'mimetype',
        'modality': 'modality',
        'classification': 'classification',
        'tags': 'tags',
        'info': 'info',
        'cvat': 'cvat',
        'info_exists': 'info_exists',
        'deid_log_id': 'deid_log_id',
        'deid_log_skip_reason': 'deid_log_skip_reason',
        'gear_info': 'gear_info',
        'created': 'created',
        'modified': 'modified',
        'replaced': 'replaced',
        'deleted': 'deleted',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of'
    }

    def __init__(self, id=None, parent_ref=None, name=None, file_group=None, provider_id=None, uuid=None, path=None, reference=None, size=None, hash=None, client_hash=None, zip_member_count=None, virus_scan=None, source_file_id=None, restored_from=None, restored_by=None, parents=None, revision=None, origin=None, source=None, type=None, mimetype='application/octet-stream', modality=None, classification=None, tags=None, info=None, cvat=None, info_exists=False, deid_log_id=None, deid_log_skip_reason=None, gear_info=None, created=None, modified=None, replaced=None, deleted=None, copy_of=None, original_copy_of=None):  # noqa: E501
        """File - a model defined in Swagger"""
        super(File, self).__init__()

        self._id = None
        self._parent_ref = None
        self._name = None
        self._file_group = None
        self._provider_id = None
        self._uuid = None
        self._path = None
        self._reference = None
        self._size = None
        self._hash = None
        self._client_hash = None
        self._zip_member_count = None
        self._virus_scan = None
        self._source_file_id = None
        self._restored_from = None
        self._restored_by = None
        self._parents = None
        self._revision = None
        self._origin = None
        self._source = None
        self._type = None
        self._mimetype = None
        self._modality = None
        self._classification = None
        self._tags = None
        self._info = None
        self._cvat = None
        self._info_exists = None
        self._deid_log_id = None
        self._deid_log_skip_reason = None
        self._gear_info = None
        self._created = None
        self._modified = None
        self._replaced = None
        self._deleted = None
        self._copy_of = None
        self._original_copy_of = None
        self.discriminator = None
        self.alt_discriminator = None

        self.id = id
        self.parent_ref = parent_ref
        self.name = name
        if file_group is not None:
            self.file_group = file_group
        self.provider_id = provider_id
        self.uuid = uuid
        if path is not None:
            self.path = path
        if reference is not None:
            self.reference = reference
        self.size = size
        if hash is not None:
            self.hash = hash
        if client_hash is not None:
            self.client_hash = client_hash
        if zip_member_count is not None:
            self.zip_member_count = zip_member_count
        if virus_scan is not None:
            self.virus_scan = virus_scan
        if source_file_id is not None:
            self.source_file_id = source_file_id
        if restored_from is not None:
            self.restored_from = restored_from
        if restored_by is not None:
            self.restored_by = restored_by
        if parents is not None:
            self.parents = parents
        self.revision = revision
        self.origin = origin
        if source is not None:
            self.source = source
        if type is not None:
            self.type = type
        if mimetype is not None:
            self.mimetype = mimetype
        if modality is not None:
            self.modality = modality
        self.classification = classification
        self.tags = tags
        self.info = info
        if cvat is not None:
            self.cvat = cvat
        if info_exists is not None:
            self.info_exists = info_exists
        if deid_log_id is not None:
            self.deid_log_id = deid_log_id
        if deid_log_skip_reason is not None:
            self.deid_log_skip_reason = deid_log_skip_reason
        if gear_info is not None:
            self.gear_info = gear_info
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if replaced is not None:
            self.replaced = replaced
        if deleted is not None:
            self.deleted = deleted
        if copy_of is not None:
            self.copy_of = copy_of
        if original_copy_of is not None:
            self.original_copy_of = original_copy_of

    @property
    def id(self):
        """Gets the id of this File.


        :return: The id of this File.
        :rtype: FileVersion
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.


        :param id: The id of this File.  # noqa: E501
        :type: FileVersion
        """

        self._id = id

    @property
    def parent_ref(self):
        """Gets the parent_ref of this File.


        :return: The parent_ref of this File.
        :rtype: ContainerReference
        """
        return self._parent_ref

    @parent_ref.setter
    def parent_ref(self, parent_ref):
        """Sets the parent_ref of this File.


        :param parent_ref: The parent_ref of this File.  # noqa: E501
        :type: ContainerReference
        """

        self._parent_ref = parent_ref

    @property
    def name(self):
        """Gets the name of this File.


        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.


        :param name: The name of this File.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def file_group(self):
        """Gets the file_group of this File.


        :return: The file_group of this File.
        :rtype: FileGroup
        """
        return self._file_group

    @file_group.setter
    def file_group(self, file_group):
        """Sets the file_group of this File.


        :param file_group: The file_group of this File.  # noqa: E501
        :type: FileGroup
        """

        self._file_group = file_group

    @property
    def provider_id(self):
        """Gets the provider_id of this File.


        :return: The provider_id of this File.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this File.


        :param provider_id: The provider_id of this File.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def uuid(self):
        """Gets the uuid of this File.


        :return: The uuid of this File.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this File.


        :param uuid: The uuid of this File.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def path(self):
        """Gets the path of this File.


        :return: The path of this File.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this File.


        :param path: The path of this File.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def reference(self):
        """Gets the reference of this File.


        :return: The reference of this File.
        :rtype: bool
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this File.


        :param reference: The reference of this File.  # noqa: E501
        :type: bool
        """

        self._reference = reference

    @property
    def size(self):
        """Gets the size of this File.


        :return: The size of this File.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.


        :param size: The size of this File.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def hash(self):
        """Gets the hash of this File.


        :return: The hash of this File.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this File.


        :param hash: The hash of this File.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def client_hash(self):
        """Gets the client_hash of this File.


        :return: The client_hash of this File.
        :rtype: str
        """
        return self._client_hash

    @client_hash.setter
    def client_hash(self, client_hash):
        """Sets the client_hash of this File.


        :param client_hash: The client_hash of this File.  # noqa: E501
        :type: str
        """

        self._client_hash = client_hash

    @property
    def zip_member_count(self):
        """Gets the zip_member_count of this File.


        :return: The zip_member_count of this File.
        :rtype: int
        """
        return self._zip_member_count

    @zip_member_count.setter
    def zip_member_count(self, zip_member_count):
        """Sets the zip_member_count of this File.


        :param zip_member_count: The zip_member_count of this File.  # noqa: E501
        :type: int
        """

        self._zip_member_count = zip_member_count

    @property
    def virus_scan(self):
        """Gets the virus_scan of this File.


        :return: The virus_scan of this File.
        :rtype: VirusScan
        """
        return self._virus_scan

    @virus_scan.setter
    def virus_scan(self, virus_scan):
        """Sets the virus_scan of this File.


        :param virus_scan: The virus_scan of this File.  # noqa: E501
        :type: VirusScan
        """

        self._virus_scan = virus_scan

    @property
    def source_file_id(self):
        """Gets the source_file_id of this File.


        :return: The source_file_id of this File.
        :rtype: FileVersion
        """
        return self._source_file_id

    @source_file_id.setter
    def source_file_id(self, source_file_id):
        """Sets the source_file_id of this File.


        :param source_file_id: The source_file_id of this File.  # noqa: E501
        :type: FileVersion
        """

        self._source_file_id = source_file_id

    @property
    def restored_from(self):
        """Gets the restored_from of this File.


        :return: The restored_from of this File.
        :rtype: int
        """
        return self._restored_from

    @restored_from.setter
    def restored_from(self, restored_from):
        """Sets the restored_from of this File.


        :param restored_from: The restored_from of this File.  # noqa: E501
        :type: int
        """

        self._restored_from = restored_from

    @property
    def restored_by(self):
        """Gets the restored_by of this File.


        :return: The restored_by of this File.
        :rtype: Origin
        """
        return self._restored_by

    @restored_by.setter
    def restored_by(self, restored_by):
        """Sets the restored_by of this File.


        :param restored_by: The restored_by of this File.  # noqa: E501
        :type: Origin
        """

        self._restored_by = restored_by

    @property
    def parents(self):
        """Gets the parents of this File.


        :return: The parents of this File.
        :rtype: FileParents
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this File.


        :param parents: The parents of this File.  # noqa: E501
        :type: FileParents
        """

        self._parents = parents

    @property
    def revision(self):
        """Gets the revision of this File.


        :return: The revision of this File.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this File.


        :param revision: The revision of this File.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def origin(self):
        """Gets the origin of this File.


        :return: The origin of this File.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this File.


        :param origin: The origin of this File.  # noqa: E501
        :type: Origin
        """

        self._origin = origin

    @property
    def source(self):
        """Gets the source of this File.


        :return: The source of this File.
        :rtype: CoreModelsCommonSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this File.


        :param source: The source of this File.  # noqa: E501
        :type: CoreModelsCommonSource
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this File.


        :return: The type of this File.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this File.


        :param type: The type of this File.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def mimetype(self):
        """Gets the mimetype of this File.


        :return: The mimetype of this File.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this File.


        :param mimetype: The mimetype of this File.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def modality(self):
        """Gets the modality of this File.


        :return: The modality of this File.
        :rtype: str
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this File.


        :param modality: The modality of this File.  # noqa: E501
        :type: str
        """

        self._modality = modality

    @property
    def classification(self):
        """Gets the classification of this File.


        :return: The classification of this File.
        :rtype: dict(str, list[str])
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this File.


        :param classification: The classification of this File.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._classification = classification

    @property
    def tags(self):
        """Gets the tags of this File.


        :return: The tags of this File.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this File.


        :param tags: The tags of this File.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def info(self):
        """Gets the info of this File.


        :return: The info of this File.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this File.


        :param info: The info of this File.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def cvat(self):
        """Gets the cvat of this File.


        :return: The cvat of this File.
        :rtype: CVATInfo
        """
        return self._cvat

    @cvat.setter
    def cvat(self, cvat):
        """Sets the cvat of this File.


        :param cvat: The cvat of this File.  # noqa: E501
        :type: CVATInfo
        """

        self._cvat = cvat

    @property
    def info_exists(self):
        """Gets the info_exists of this File.


        :return: The info_exists of this File.
        :rtype: bool
        """
        return self._info_exists

    @info_exists.setter
    def info_exists(self, info_exists):
        """Sets the info_exists of this File.


        :param info_exists: The info_exists of this File.  # noqa: E501
        :type: bool
        """

        self._info_exists = info_exists

    @property
    def deid_log_id(self):
        """Gets the deid_log_id of this File.


        :return: The deid_log_id of this File.
        :rtype: str
        """
        return self._deid_log_id

    @deid_log_id.setter
    def deid_log_id(self, deid_log_id):
        """Sets the deid_log_id of this File.


        :param deid_log_id: The deid_log_id of this File.  # noqa: E501
        :type: str
        """

        self._deid_log_id = deid_log_id

    @property
    def deid_log_skip_reason(self):
        """Gets the deid_log_skip_reason of this File.


        :return: The deid_log_skip_reason of this File.
        :rtype: DeidLogSkipReason
        """
        return self._deid_log_skip_reason

    @deid_log_skip_reason.setter
    def deid_log_skip_reason(self, deid_log_skip_reason):
        """Sets the deid_log_skip_reason of this File.


        :param deid_log_skip_reason: The deid_log_skip_reason of this File.  # noqa: E501
        :type: DeidLogSkipReason
        """

        self._deid_log_skip_reason = deid_log_skip_reason

    @property
    def gear_info(self):
        """Gets the gear_info of this File.


        :return: The gear_info of this File.
        :rtype: FileGearInfo
        """
        return self._gear_info

    @gear_info.setter
    def gear_info(self, gear_info):
        """Sets the gear_info of this File.


        :param gear_info: The gear_info of this File.  # noqa: E501
        :type: FileGearInfo
        """

        self._gear_info = gear_info

    @property
    def created(self):
        """Gets the created of this File.


        :return: The created of this File.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this File.


        :param created: The created of this File.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this File.


        :return: The modified of this File.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this File.


        :param modified: The modified of this File.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def replaced(self):
        """Gets the replaced of this File.


        :return: The replaced of this File.
        :rtype: datetime
        """
        return self._replaced

    @replaced.setter
    def replaced(self, replaced):
        """Sets the replaced of this File.


        :param replaced: The replaced of this File.  # noqa: E501
        :type: datetime
        """

        self._replaced = replaced

    @property
    def deleted(self):
        """Gets the deleted of this File.


        :return: The deleted of this File.
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this File.


        :param deleted: The deleted of this File.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def copy_of(self):
        """Gets the copy_of of this File.


        :return: The copy_of of this File.
        :rtype: FileVersionCopyOf
        """
        return self._copy_of

    @copy_of.setter
    def copy_of(self, copy_of):
        """Sets the copy_of of this File.


        :param copy_of: The copy_of of this File.  # noqa: E501
        :type: FileVersionCopyOf
        """

        self._copy_of = copy_of

    @property
    def original_copy_of(self):
        """Gets the original_copy_of of this File.


        :return: The original_copy_of of this File.
        :rtype: FileVersion
        """
        return self._original_copy_of

    @original_copy_of.setter
    def original_copy_of(self, original_copy_of):
        """Sets the original_copy_of of this File.


        :param original_copy_of: The original_copy_of of this File.  # noqa: E501
        :type: FileVersion
        """

        self._original_copy_of = original_copy_of


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
