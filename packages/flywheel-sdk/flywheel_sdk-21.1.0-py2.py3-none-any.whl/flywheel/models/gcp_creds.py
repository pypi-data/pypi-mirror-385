# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class GcpCreds(object):

    swagger_types = {
        'client_email': 'str',
        'client_id': 'str',
        'private_key_id': 'str',
        'private_key': 'str',
        'client_x509_cert_url': 'str',
        'project_id': 'str',
        'auth_uri': 'str',
        'token_uri': 'str',
        'auth_provider_x509_cert_url': 'str',
        'type': 'str'
    }

    attribute_map = {
        'client_email': 'client_email',
        'client_id': 'client_id',
        'private_key_id': 'private_key_id',
        'private_key': 'private_key',
        'client_x509_cert_url': 'client_x509_cert_url',
        'project_id': 'project_id',
        'auth_uri': 'auth_uri',
        'token_uri': 'token_uri',
        'auth_provider_x509_cert_url': 'auth_provider_x509_cert_url',
        'type': 'type'
    }

    rattribute_map = {
        'client_email': 'client_email',
        'client_id': 'client_id',
        'private_key_id': 'private_key_id',
        'private_key': 'private_key',
        'client_x509_cert_url': 'client_x509_cert_url',
        'project_id': 'project_id',
        'auth_uri': 'auth_uri',
        'token_uri': 'token_uri',
        'auth_provider_x509_cert_url': 'auth_provider_x509_cert_url',
        'type': 'type'
    }

    def __init__(self, client_email=None, client_id=None, private_key_id=None, private_key=None, client_x509_cert_url=None, project_id=None, auth_uri=None, token_uri=None, auth_provider_x509_cert_url=None, type=None):  # noqa: E501
        """GcpCreds - a model defined in Swagger"""
        super(GcpCreds, self).__init__()

        self._client_email = None
        self._client_id = None
        self._private_key_id = None
        self._private_key = None
        self._client_x509_cert_url = None
        self._project_id = None
        self._auth_uri = None
        self._token_uri = None
        self._auth_provider_x509_cert_url = None
        self._type = None
        self.discriminator = None
        self.alt_discriminator = None

        self.client_email = client_email
        self.client_id = client_id
        self.private_key_id = private_key_id
        self.private_key = private_key
        self.client_x509_cert_url = client_x509_cert_url
        self.project_id = project_id
        self.auth_uri = auth_uri
        self.token_uri = token_uri
        self.auth_provider_x509_cert_url = auth_provider_x509_cert_url
        self.type = type

    @property
    def client_email(self):
        """Gets the client_email of this GcpCreds.


        :return: The client_email of this GcpCreds.
        :rtype: str
        """
        return self._client_email

    @client_email.setter
    def client_email(self, client_email):
        """Sets the client_email of this GcpCreds.


        :param client_email: The client_email of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._client_email = client_email

    @property
    def client_id(self):
        """Gets the client_id of this GcpCreds.


        :return: The client_id of this GcpCreds.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GcpCreds.


        :param client_id: The client_id of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def private_key_id(self):
        """Gets the private_key_id of this GcpCreds.


        :return: The private_key_id of this GcpCreds.
        :rtype: str
        """
        return self._private_key_id

    @private_key_id.setter
    def private_key_id(self, private_key_id):
        """Sets the private_key_id of this GcpCreds.


        :param private_key_id: The private_key_id of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._private_key_id = private_key_id

    @property
    def private_key(self):
        """Gets the private_key of this GcpCreds.


        :return: The private_key of this GcpCreds.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this GcpCreds.


        :param private_key: The private_key of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def client_x509_cert_url(self):
        """Gets the client_x509_cert_url of this GcpCreds.


        :return: The client_x509_cert_url of this GcpCreds.
        :rtype: str
        """
        return self._client_x509_cert_url

    @client_x509_cert_url.setter
    def client_x509_cert_url(self, client_x509_cert_url):
        """Sets the client_x509_cert_url of this GcpCreds.


        :param client_x509_cert_url: The client_x509_cert_url of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._client_x509_cert_url = client_x509_cert_url

    @property
    def project_id(self):
        """Gets the project_id of this GcpCreds.


        :return: The project_id of this GcpCreds.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GcpCreds.


        :param project_id: The project_id of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def auth_uri(self):
        """Gets the auth_uri of this GcpCreds.


        :return: The auth_uri of this GcpCreds.
        :rtype: str
        """
        return self._auth_uri

    @auth_uri.setter
    def auth_uri(self, auth_uri):
        """Sets the auth_uri of this GcpCreds.


        :param auth_uri: The auth_uri of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._auth_uri = auth_uri

    @property
    def token_uri(self):
        """Gets the token_uri of this GcpCreds.


        :return: The token_uri of this GcpCreds.
        :rtype: str
        """
        return self._token_uri

    @token_uri.setter
    def token_uri(self, token_uri):
        """Sets the token_uri of this GcpCreds.


        :param token_uri: The token_uri of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._token_uri = token_uri

    @property
    def auth_provider_x509_cert_url(self):
        """Gets the auth_provider_x509_cert_url of this GcpCreds.


        :return: The auth_provider_x509_cert_url of this GcpCreds.
        :rtype: str
        """
        return self._auth_provider_x509_cert_url

    @auth_provider_x509_cert_url.setter
    def auth_provider_x509_cert_url(self, auth_provider_x509_cert_url):
        """Sets the auth_provider_x509_cert_url of this GcpCreds.


        :param auth_provider_x509_cert_url: The auth_provider_x509_cert_url of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._auth_provider_x509_cert_url = auth_provider_x509_cert_url

    @property
    def type(self):
        """Gets the type of this GcpCreds.


        :return: The type of this GcpCreds.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GcpCreds.


        :param type: The type of this GcpCreds.  # noqa: E501
        :type: str
        """

        self._type = type


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GcpCreds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
