# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.batch_job_analysis_input import BatchJobAnalysisInput  # noqa: F401,E501
from flywheel.models.container_reference import ContainerReference  # noqa: F401,E501
from flywheel.models.optional_input_policy import OptionalInputPolicy  # noqa: F401,E501

class ClassicBatchProposalInput(object):

    swagger_types = {
        'gear_id': 'str',
        'targets': 'list[ContainerReference]',
        'target_context': 'ContainerReference',
        'priority': 'JobPriority',
        'config': 'object',
        'tags': 'list[str]',
        'analysis': 'BatchJobAnalysisInput',
        'optional_input_policy': 'OptionalInputPolicy',
        'compute_provider_id': 'str'
    }

    attribute_map = {
        'gear_id': 'gear_id',
        'targets': 'targets',
        'target_context': 'target_context',
        'priority': 'priority',
        'config': 'config',
        'tags': 'tags',
        'analysis': 'analysis',
        'optional_input_policy': 'optional_input_policy',
        'compute_provider_id': 'compute_provider_id'
    }

    rattribute_map = {
        'gear_id': 'gear_id',
        'targets': 'targets',
        'target_context': 'target_context',
        'priority': 'priority',
        'config': 'config',
        'tags': 'tags',
        'analysis': 'analysis',
        'optional_input_policy': 'optional_input_policy',
        'compute_provider_id': 'compute_provider_id'
    }

    def __init__(self, gear_id=None, targets=None, target_context=None, priority=None, config=None, tags=None, analysis=None, optional_input_policy=None, compute_provider_id=None):  # noqa: E501
        """ClassicBatchProposalInput - a model defined in Swagger"""
        super(ClassicBatchProposalInput, self).__init__()

        self._gear_id = None
        self._targets = None
        self._target_context = None
        self._priority = None
        self._config = None
        self._tags = None
        self._analysis = None
        self._optional_input_policy = None
        self._compute_provider_id = None
        self.discriminator = None
        self.alt_discriminator = None

        self.gear_id = gear_id
        self.targets = targets
        if target_context is not None:
            self.target_context = target_context
        if priority is not None:
            self.priority = priority
        if config is not None:
            self.config = config
        if tags is not None:
            self.tags = tags
        if analysis is not None:
            self.analysis = analysis
        if optional_input_policy is not None:
            self.optional_input_policy = optional_input_policy
        if compute_provider_id is not None:
            self.compute_provider_id = compute_provider_id

    @property
    def gear_id(self):
        """Gets the gear_id of this ClassicBatchProposalInput.


        :return: The gear_id of this ClassicBatchProposalInput.
        :rtype: str
        """
        return self._gear_id

    @gear_id.setter
    def gear_id(self, gear_id):
        """Sets the gear_id of this ClassicBatchProposalInput.


        :param gear_id: The gear_id of this ClassicBatchProposalInput.  # noqa: E501
        :type: str
        """

        self._gear_id = gear_id

    @property
    def targets(self):
        """Gets the targets of this ClassicBatchProposalInput.


        :return: The targets of this ClassicBatchProposalInput.
        :rtype: list[ContainerReference]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this ClassicBatchProposalInput.


        :param targets: The targets of this ClassicBatchProposalInput.  # noqa: E501
        :type: list[ContainerReference]
        """

        self._targets = targets

    @property
    def target_context(self):
        """Gets the target_context of this ClassicBatchProposalInput.


        :return: The target_context of this ClassicBatchProposalInput.
        :rtype: ContainerReference
        """
        return self._target_context

    @target_context.setter
    def target_context(self, target_context):
        """Sets the target_context of this ClassicBatchProposalInput.


        :param target_context: The target_context of this ClassicBatchProposalInput.  # noqa: E501
        :type: ContainerReference
        """

        self._target_context = target_context

    @property
    def priority(self):
        """Gets the priority of this ClassicBatchProposalInput.


        :return: The priority of this ClassicBatchProposalInput.
        :rtype: JobPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ClassicBatchProposalInput.


        :param priority: The priority of this ClassicBatchProposalInput.  # noqa: E501
        :type: JobPriority
        """

        self._priority = priority

    @property
    def config(self):
        """Gets the config of this ClassicBatchProposalInput.


        :return: The config of this ClassicBatchProposalInput.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ClassicBatchProposalInput.


        :param config: The config of this ClassicBatchProposalInput.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def tags(self):
        """Gets the tags of this ClassicBatchProposalInput.

        Array of application-specific tags

        :return: The tags of this ClassicBatchProposalInput.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ClassicBatchProposalInput.

        Array of application-specific tags

        :param tags: The tags of this ClassicBatchProposalInput.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def analysis(self):
        """Gets the analysis of this ClassicBatchProposalInput.


        :return: The analysis of this ClassicBatchProposalInput.
        :rtype: BatchJobAnalysisInput
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this ClassicBatchProposalInput.


        :param analysis: The analysis of this ClassicBatchProposalInput.  # noqa: E501
        :type: BatchJobAnalysisInput
        """

        self._analysis = analysis

    @property
    def optional_input_policy(self):
        """Gets the optional_input_policy of this ClassicBatchProposalInput.


        :return: The optional_input_policy of this ClassicBatchProposalInput.
        :rtype: OptionalInputPolicy
        """
        return self._optional_input_policy

    @optional_input_policy.setter
    def optional_input_policy(self, optional_input_policy):
        """Sets the optional_input_policy of this ClassicBatchProposalInput.


        :param optional_input_policy: The optional_input_policy of this ClassicBatchProposalInput.  # noqa: E501
        :type: OptionalInputPolicy
        """

        self._optional_input_policy = optional_input_policy

    @property
    def compute_provider_id(self):
        """Gets the compute_provider_id of this ClassicBatchProposalInput.

        Unique database ID

        :return: The compute_provider_id of this ClassicBatchProposalInput.
        :rtype: str
        """
        return self._compute_provider_id

    @compute_provider_id.setter
    def compute_provider_id(self, compute_provider_id):
        """Sets the compute_provider_id of this ClassicBatchProposalInput.

        Unique database ID

        :param compute_provider_id: The compute_provider_id of this ClassicBatchProposalInput.  # noqa: E501
        :type: str
        """

        self._compute_provider_id = compute_provider_id


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassicBatchProposalInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
