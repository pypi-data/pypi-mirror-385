# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.cohort import Cohort  # noqa: F401,E501
from flywheel.models.file_list_output import FileListOutput  # noqa: F401,E501
from flywheel.models.join_origins import JoinOrigins  # noqa: F401,E501
from flywheel.models.ml_type import MLType  # noqa: F401,E501
from flywheel.models.note import Note  # noqa: F401,E501
from flywheel.models.role_permission import RolePermission  # noqa: F401,E501
from flywheel.models.subject_parents import SubjectParents  # noqa: F401,E501
from flywheel.models.subject_state import SubjectState  # noqa: F401,E501

from .mixins import SubjectMixin
class SubjectOutputForList(SubjectMixin):

    swagger_types = {
        'id': 'str',
        'project': 'str',
        'created': 'datetime',
        'date_of_birth': 'datetime',
        'modified': 'datetime',
        'revision': 'int',
        'parents': 'SubjectParents',
        'permissions': 'list[RolePermission]',
        'cohort': 'Cohort',
        'mlset': 'MLType',
        'type': 'str',
        'species': 'str',
        'strain': 'str',
        'label': 'str',
        'code': 'str',
        'master_code': 'str',
        'notes': 'list[Note]',
        'tags': 'list[str]',
        'info': 'object',
        'info_exists': 'bool',
        'state': 'SubjectState',
        'files': 'list[FileListOutput]',
        'analyses': 'list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]',
        'join_origin': 'JoinOrigins',
        'copy_of': 'str',
        'original_copy_of': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'sex': 'str',
        'age': 'int',
        'race': 'str',
        'ethnicity': 'str'
    }

    attribute_map = {
        'id': '_id',
        'project': 'project',
        'created': 'created',
        'date_of_birth': 'date_of_birth',
        'modified': 'modified',
        'revision': 'revision',
        'parents': 'parents',
        'permissions': 'permissions',
        'cohort': 'cohort',
        'mlset': 'mlset',
        'type': 'type',
        'species': 'species',
        'strain': 'strain',
        'label': 'label',
        'code': 'code',
        'master_code': 'master_code',
        'notes': 'notes',
        'tags': 'tags',
        'info': 'info',
        'info_exists': 'info_exists',
        'state': 'state',
        'files': 'files',
        'analyses': 'analyses',
        'join_origin': 'join-origin',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'sex': 'sex',
        'age': 'age',
        'race': 'race',
        'ethnicity': 'ethnicity'
    }

    rattribute_map = {
        '_id': 'id',
        'project': 'project',
        'created': 'created',
        'date_of_birth': 'date_of_birth',
        'modified': 'modified',
        'revision': 'revision',
        'parents': 'parents',
        'permissions': 'permissions',
        'cohort': 'cohort',
        'mlset': 'mlset',
        'type': 'type',
        'species': 'species',
        'strain': 'strain',
        'label': 'label',
        'code': 'code',
        'master_code': 'master_code',
        'notes': 'notes',
        'tags': 'tags',
        'info': 'info',
        'info_exists': 'info_exists',
        'state': 'state',
        'files': 'files',
        'analyses': 'analyses',
        'join-origin': 'join_origin',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'sex': 'sex',
        'age': 'age',
        'race': 'race',
        'ethnicity': 'ethnicity'
    }

    def __init__(self, id=None, project=None, created=None, date_of_birth=None, modified=None, revision=None, parents=None, permissions=None, cohort=None, mlset=None, type=None, species=None, strain=None, label=None, code=None, master_code=None, notes=None, tags=None, info=None, info_exists=None, state=None, files=None, analyses=None, join_origin=None, copy_of=None, original_copy_of=None, firstname=None, lastname=None, sex=None, age=None, race=None, ethnicity=None):  # noqa: E501
        """SubjectOutputForList - a model defined in Swagger"""
        super(SubjectOutputForList, self).__init__()

        self._id = None
        self._project = None
        self._created = None
        self._date_of_birth = None
        self._modified = None
        self._revision = None
        self._parents = None
        self._permissions = None
        self._cohort = None
        self._mlset = None
        self._type = None
        self._species = None
        self._strain = None
        self._label = None
        self._code = None
        self._master_code = None
        self._notes = None
        self._tags = None
        self._info = None
        self._info_exists = None
        self._state = None
        self._files = None
        self._analyses = None
        self._join_origin = None
        self._copy_of = None
        self._original_copy_of = None
        self._firstname = None
        self._lastname = None
        self._sex = None
        self._age = None
        self._race = None
        self._ethnicity = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        self.project = project
        self.created = created
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        self.modified = modified
        self.revision = revision
        self.parents = parents
        self.permissions = permissions
        if cohort is not None:
            self.cohort = cohort
        if mlset is not None:
            self.mlset = mlset
        if type is not None:
            self.type = type
        if species is not None:
            self.species = species
        if strain is not None:
            self.strain = strain
        if label is not None:
            self.label = label
        if code is not None:
            self.code = code
        if master_code is not None:
            self.master_code = master_code
        if notes is not None:
            self.notes = notes
        self.tags = tags
        self.info = info
        self.info_exists = info_exists
        if state is not None:
            self.state = state
        self.files = files
        if analyses is not None:
            self.analyses = analyses
        if join_origin is not None:
            self.join_origin = join_origin
        self.copy_of = copy_of
        self.original_copy_of = original_copy_of
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if sex is not None:
            self.sex = sex
        if age is not None:
            self.age = age
        if race is not None:
            self.race = race
        if ethnicity is not None:
            self.ethnicity = ethnicity

    @property
    def id(self):
        """Gets the id of this SubjectOutputForList.


        :return: The id of this SubjectOutputForList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubjectOutputForList.


        :param id: The id of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project(self):
        """Gets the project of this SubjectOutputForList.


        :return: The project of this SubjectOutputForList.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this SubjectOutputForList.


        :param project: The project of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def created(self):
        """Gets the created of this SubjectOutputForList.


        :return: The created of this SubjectOutputForList.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SubjectOutputForList.


        :param created: The created of this SubjectOutputForList.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this SubjectOutputForList.


        :return: The date_of_birth of this SubjectOutputForList.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this SubjectOutputForList.


        :param date_of_birth: The date_of_birth of this SubjectOutputForList.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def modified(self):
        """Gets the modified of this SubjectOutputForList.


        :return: The modified of this SubjectOutputForList.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SubjectOutputForList.


        :param modified: The modified of this SubjectOutputForList.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def revision(self):
        """Gets the revision of this SubjectOutputForList.


        :return: The revision of this SubjectOutputForList.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SubjectOutputForList.


        :param revision: The revision of this SubjectOutputForList.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def parents(self):
        """Gets the parents of this SubjectOutputForList.


        :return: The parents of this SubjectOutputForList.
        :rtype: SubjectParents
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this SubjectOutputForList.


        :param parents: The parents of this SubjectOutputForList.  # noqa: E501
        :type: SubjectParents
        """

        self._parents = parents

    @property
    def permissions(self):
        """Gets the permissions of this SubjectOutputForList.


        :return: The permissions of this SubjectOutputForList.
        :rtype: list[RolePermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this SubjectOutputForList.


        :param permissions: The permissions of this SubjectOutputForList.  # noqa: E501
        :type: list[RolePermission]
        """

        self._permissions = permissions

    @property
    def cohort(self):
        """Gets the cohort of this SubjectOutputForList.


        :return: The cohort of this SubjectOutputForList.
        :rtype: Cohort
        """
        return self._cohort

    @cohort.setter
    def cohort(self, cohort):
        """Sets the cohort of this SubjectOutputForList.


        :param cohort: The cohort of this SubjectOutputForList.  # noqa: E501
        :type: Cohort
        """

        self._cohort = cohort

    @property
    def mlset(self):
        """Gets the mlset of this SubjectOutputForList.


        :return: The mlset of this SubjectOutputForList.
        :rtype: MLType
        """
        return self._mlset

    @mlset.setter
    def mlset(self, mlset):
        """Sets the mlset of this SubjectOutputForList.


        :param mlset: The mlset of this SubjectOutputForList.  # noqa: E501
        :type: MLType
        """

        self._mlset = mlset

    @property
    def type(self):
        """Gets the type of this SubjectOutputForList.


        :return: The type of this SubjectOutputForList.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubjectOutputForList.


        :param type: The type of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def species(self):
        """Gets the species of this SubjectOutputForList.


        :return: The species of this SubjectOutputForList.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this SubjectOutputForList.


        :param species: The species of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._species = species

    @property
    def strain(self):
        """Gets the strain of this SubjectOutputForList.


        :return: The strain of this SubjectOutputForList.
        :rtype: str
        """
        return self._strain

    @strain.setter
    def strain(self, strain):
        """Sets the strain of this SubjectOutputForList.


        :param strain: The strain of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._strain = strain

    @property
    def label(self):
        """Gets the label of this SubjectOutputForList.


        :return: The label of this SubjectOutputForList.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SubjectOutputForList.


        :param label: The label of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def code(self):
        """Gets the code of this SubjectOutputForList.


        :return: The code of this SubjectOutputForList.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SubjectOutputForList.


        :param code: The code of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def master_code(self):
        """Gets the master_code of this SubjectOutputForList.


        :return: The master_code of this SubjectOutputForList.
        :rtype: str
        """
        return self._master_code

    @master_code.setter
    def master_code(self, master_code):
        """Sets the master_code of this SubjectOutputForList.


        :param master_code: The master_code of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._master_code = master_code

    @property
    def notes(self):
        """Gets the notes of this SubjectOutputForList.


        :return: The notes of this SubjectOutputForList.
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SubjectOutputForList.


        :param notes: The notes of this SubjectOutputForList.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def tags(self):
        """Gets the tags of this SubjectOutputForList.


        :return: The tags of this SubjectOutputForList.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SubjectOutputForList.


        :param tags: The tags of this SubjectOutputForList.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def info(self):
        """Gets the info of this SubjectOutputForList.


        :return: The info of this SubjectOutputForList.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SubjectOutputForList.


        :param info: The info of this SubjectOutputForList.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def info_exists(self):
        """Gets the info_exists of this SubjectOutputForList.


        :return: The info_exists of this SubjectOutputForList.
        :rtype: bool
        """
        return self._info_exists

    @info_exists.setter
    def info_exists(self, info_exists):
        """Sets the info_exists of this SubjectOutputForList.


        :param info_exists: The info_exists of this SubjectOutputForList.  # noqa: E501
        :type: bool
        """

        self._info_exists = info_exists

    @property
    def state(self):
        """Gets the state of this SubjectOutputForList.


        :return: The state of this SubjectOutputForList.
        :rtype: SubjectState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubjectOutputForList.


        :param state: The state of this SubjectOutputForList.  # noqa: E501
        :type: SubjectState
        """

        self._state = state

    @property
    def files(self):
        """Gets the files of this SubjectOutputForList.


        :return: The files of this SubjectOutputForList.
        :rtype: list[FileListOutput]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SubjectOutputForList.


        :param files: The files of this SubjectOutputForList.  # noqa: E501
        :type: list[FileListOutput]
        """

        self._files = files

    @property
    def analyses(self):
        """Gets the analyses of this SubjectOutputForList.


        :return: The analyses of this SubjectOutputForList.
        :rtype: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this SubjectOutputForList.


        :param analyses: The analyses of this SubjectOutputForList.  # noqa: E501
        :type: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """

        self._analyses = analyses

    @property
    def join_origin(self):
        """Gets the join_origin of this SubjectOutputForList.


        :return: The join_origin of this SubjectOutputForList.
        :rtype: JoinOrigins
        """
        return self._join_origin

    @join_origin.setter
    def join_origin(self, join_origin):
        """Sets the join_origin of this SubjectOutputForList.


        :param join_origin: The join_origin of this SubjectOutputForList.  # noqa: E501
        :type: JoinOrigins
        """

        self._join_origin = join_origin

    @property
    def copy_of(self):
        """Gets the copy_of of this SubjectOutputForList.


        :return: The copy_of of this SubjectOutputForList.
        :rtype: str
        """
        return self._copy_of

    @copy_of.setter
    def copy_of(self, copy_of):
        """Sets the copy_of of this SubjectOutputForList.


        :param copy_of: The copy_of of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._copy_of = copy_of

    @property
    def original_copy_of(self):
        """Gets the original_copy_of of this SubjectOutputForList.


        :return: The original_copy_of of this SubjectOutputForList.
        :rtype: str
        """
        return self._original_copy_of

    @original_copy_of.setter
    def original_copy_of(self, original_copy_of):
        """Sets the original_copy_of of this SubjectOutputForList.


        :param original_copy_of: The original_copy_of of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._original_copy_of = original_copy_of

    @property
    def firstname(self):
        """Gets the firstname of this SubjectOutputForList.


        :return: The firstname of this SubjectOutputForList.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this SubjectOutputForList.


        :param firstname: The firstname of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this SubjectOutputForList.


        :return: The lastname of this SubjectOutputForList.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this SubjectOutputForList.


        :param lastname: The lastname of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def sex(self):
        """Gets the sex of this SubjectOutputForList.


        :return: The sex of this SubjectOutputForList.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this SubjectOutputForList.


        :param sex: The sex of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._sex = sex

    @property
    def age(self):
        """Gets the age of this SubjectOutputForList.


        :return: The age of this SubjectOutputForList.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this SubjectOutputForList.


        :param age: The age of this SubjectOutputForList.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def race(self):
        """Gets the race of this SubjectOutputForList.


        :return: The race of this SubjectOutputForList.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this SubjectOutputForList.


        :param race: The race of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._race = race

    @property
    def ethnicity(self):
        """Gets the ethnicity of this SubjectOutputForList.


        :return: The ethnicity of this SubjectOutputForList.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this SubjectOutputForList.


        :param ethnicity: The ethnicity of this SubjectOutputForList.  # noqa: E501
        :type: str
        """

        self._ethnicity = ethnicity


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        # Import relatives
        from flywheel.models.subject_output import SubjectOutput
        relatives = (
            SubjectOutput,
        )
        if not isinstance(other, relatives + (SubjectOutputForList,)):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
