# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.data_view_execution_state import DataViewExecutionState  # noqa: F401,E501

class DataViewExecution(object):

    swagger_types = {
        'id': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'timestamp_ran': 'datetime',
        'user_id': 'str',
        'project_id': 'str',
        'state': 'DataViewExecutionState',
        'data_view_label': 'str',
        'data_view_id': 'str',
        'storage_file_id': 'str',
        'task_id': 'str',
        'expires_on': 'datetime',
        'revision': 'int'
    }

    attribute_map = {
        'id': '_id',
        'created': 'created',
        'modified': 'modified',
        'timestamp_ran': 'timestamp_ran',
        'user_id': 'user_id',
        'project_id': 'project_id',
        'state': 'state',
        'data_view_label': 'data_view_label',
        'data_view_id': 'data_view_id',
        'storage_file_id': 'storage_file_id',
        'task_id': 'task_id',
        'expires_on': 'expires_on',
        'revision': 'revision'
    }

    rattribute_map = {
        '_id': 'id',
        'created': 'created',
        'modified': 'modified',
        'timestamp_ran': 'timestamp_ran',
        'user_id': 'user_id',
        'project_id': 'project_id',
        'state': 'state',
        'data_view_label': 'data_view_label',
        'data_view_id': 'data_view_id',
        'storage_file_id': 'storage_file_id',
        'task_id': 'task_id',
        'expires_on': 'expires_on',
        'revision': 'revision'
    }

    def __init__(self, id=None, created=None, modified=None, timestamp_ran=None, user_id=None, project_id=None, state=None, data_view_label='UNKNOWN', data_view_id=None, storage_file_id=None, task_id=None, expires_on=None, revision=1):  # noqa: E501
        """DataViewExecution - a model defined in Swagger"""
        super(DataViewExecution, self).__init__()

        self._id = None
        self._created = None
        self._modified = None
        self._timestamp_ran = None
        self._user_id = None
        self._project_id = None
        self._state = None
        self._data_view_label = None
        self._data_view_id = None
        self._storage_file_id = None
        self._task_id = None
        self._expires_on = None
        self._revision = None
        self.discriminator = None
        self.alt_discriminator = None

        self.id = id
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if timestamp_ran is not None:
            self.timestamp_ran = timestamp_ran
        self.user_id = user_id
        self.project_id = project_id
        if state is not None:
            self.state = state
        if data_view_label is not None:
            self.data_view_label = data_view_label
        if data_view_id is not None:
            self.data_view_id = data_view_id
        if storage_file_id is not None:
            self.storage_file_id = storage_file_id
        if task_id is not None:
            self.task_id = task_id
        self.expires_on = expires_on
        if revision is not None:
            self.revision = revision

    @property
    def id(self):
        """Gets the id of this DataViewExecution.

        Unique database ID

        :return: The id of this DataViewExecution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataViewExecution.

        Unique database ID

        :param id: The id of this DataViewExecution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this DataViewExecution.

        Creation time (automatically set)

        :return: The created of this DataViewExecution.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DataViewExecution.

        Creation time (automatically set)

        :param created: The created of this DataViewExecution.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this DataViewExecution.

        Last modification time (automatically updated)

        :return: The modified of this DataViewExecution.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this DataViewExecution.

        Last modification time (automatically updated)

        :param modified: The modified of this DataViewExecution.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def timestamp_ran(self):
        """Gets the timestamp_ran of this DataViewExecution.


        :return: The timestamp_ran of this DataViewExecution.
        :rtype: datetime
        """
        return self._timestamp_ran

    @timestamp_ran.setter
    def timestamp_ran(self, timestamp_ran):
        """Sets the timestamp_ran of this DataViewExecution.


        :param timestamp_ran: The timestamp_ran of this DataViewExecution.  # noqa: E501
        :type: datetime
        """

        self._timestamp_ran = timestamp_ran

    @property
    def user_id(self):
        """Gets the user_id of this DataViewExecution.

        Database ID of a user

        :return: The user_id of this DataViewExecution.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataViewExecution.

        Database ID of a user

        :param user_id: The user_id of this DataViewExecution.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def project_id(self):
        """Gets the project_id of this DataViewExecution.

        Unique database ID

        :return: The project_id of this DataViewExecution.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DataViewExecution.

        Unique database ID

        :param project_id: The project_id of this DataViewExecution.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def state(self):
        """Gets the state of this DataViewExecution.


        :return: The state of this DataViewExecution.
        :rtype: DataViewExecutionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataViewExecution.


        :param state: The state of this DataViewExecution.  # noqa: E501
        :type: DataViewExecutionState
        """

        self._state = state

    @property
    def data_view_label(self):
        """Gets the data_view_label of this DataViewExecution.


        :return: The data_view_label of this DataViewExecution.
        :rtype: str
        """
        return self._data_view_label

    @data_view_label.setter
    def data_view_label(self, data_view_label):
        """Sets the data_view_label of this DataViewExecution.


        :param data_view_label: The data_view_label of this DataViewExecution.  # noqa: E501
        :type: str
        """

        self._data_view_label = data_view_label

    @property
    def data_view_id(self):
        """Gets the data_view_id of this DataViewExecution.

        Unique database ID

        :return: The data_view_id of this DataViewExecution.
        :rtype: str
        """
        return self._data_view_id

    @data_view_id.setter
    def data_view_id(self, data_view_id):
        """Sets the data_view_id of this DataViewExecution.

        Unique database ID

        :param data_view_id: The data_view_id of this DataViewExecution.  # noqa: E501
        :type: str
        """

        self._data_view_id = data_view_id

    @property
    def storage_file_id(self):
        """Gets the storage_file_id of this DataViewExecution.

        Unique database ID

        :return: The storage_file_id of this DataViewExecution.
        :rtype: str
        """
        return self._storage_file_id

    @storage_file_id.setter
    def storage_file_id(self, storage_file_id):
        """Sets the storage_file_id of this DataViewExecution.

        Unique database ID

        :param storage_file_id: The storage_file_id of this DataViewExecution.  # noqa: E501
        :type: str
        """

        self._storage_file_id = storage_file_id

    @property
    def task_id(self):
        """Gets the task_id of this DataViewExecution.

        Hyphen-separated universally unique identifier

        :return: The task_id of this DataViewExecution.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this DataViewExecution.

        Hyphen-separated universally unique identifier

        :param task_id: The task_id of this DataViewExecution.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def expires_on(self):
        """Gets the expires_on of this DataViewExecution.


        :return: The expires_on of this DataViewExecution.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this DataViewExecution.


        :param expires_on: The expires_on of this DataViewExecution.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    @property
    def revision(self):
        """Gets the revision of this DataViewExecution.

        An incremental document revision number

        :return: The revision of this DataViewExecution.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this DataViewExecution.

        An incremental document revision number

        :param revision: The revision of this DataViewExecution.  # noqa: E501
        :type: int
        """

        self._revision = revision


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataViewExecution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
