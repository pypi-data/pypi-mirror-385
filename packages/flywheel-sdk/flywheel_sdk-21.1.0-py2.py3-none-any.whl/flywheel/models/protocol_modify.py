# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.custom_form import CustomForm  # noqa: F401,E501
from flywheel.models.protocol_e_signature_config import ProtocolESignatureConfig  # noqa: F401,E501
from flywheel.models.reader_task_config import ReaderTaskConfig  # noqa: F401,E501

class ProtocolModify(object):

    swagger_types = {
        'form': 'CustomForm',
        'protocol_config': 'ReaderTaskConfig',
        'completion_tags': 'list[str]',
        'notes': 'str',
        'esignature_config': 'ProtocolESignatureConfig'
    }

    attribute_map = {
        'form': 'form',
        'protocol_config': 'protocol_config',
        'completion_tags': 'completion_tags',
        'notes': 'notes',
        'esignature_config': 'esignature_config'
    }

    rattribute_map = {
        'form': 'form',
        'protocol_config': 'protocol_config',
        'completion_tags': 'completion_tags',
        'notes': 'notes',
        'esignature_config': 'esignature_config'
    }

    def __init__(self, form=None, protocol_config=None, completion_tags=None, notes=None, esignature_config=None):  # noqa: E501
        """ProtocolModify - a model defined in Swagger"""
        super(ProtocolModify, self).__init__()

        self._form = None
        self._protocol_config = None
        self._completion_tags = None
        self._notes = None
        self._esignature_config = None
        self.discriminator = None
        self.alt_discriminator = None

        if form is not None:
            self.form = form
        if protocol_config is not None:
            self.protocol_config = protocol_config
        if completion_tags is not None:
            self.completion_tags = completion_tags
        if notes is not None:
            self.notes = notes
        if esignature_config is not None:
            self.esignature_config = esignature_config

    @property
    def form(self):
        """Gets the form of this ProtocolModify.


        :return: The form of this ProtocolModify.
        :rtype: CustomForm
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this ProtocolModify.


        :param form: The form of this ProtocolModify.  # noqa: E501
        :type: CustomForm
        """

        self._form = form

    @property
    def protocol_config(self):
        """Gets the protocol_config of this ProtocolModify.


        :return: The protocol_config of this ProtocolModify.
        :rtype: ReaderTaskConfig
        """
        return self._protocol_config

    @protocol_config.setter
    def protocol_config(self, protocol_config):
        """Sets the protocol_config of this ProtocolModify.


        :param protocol_config: The protocol_config of this ProtocolModify.  # noqa: E501
        :type: ReaderTaskConfig
        """

        self._protocol_config = protocol_config

    @property
    def completion_tags(self):
        """Gets the completion_tags of this ProtocolModify.


        :return: The completion_tags of this ProtocolModify.
        :rtype: list[str]
        """
        return self._completion_tags

    @completion_tags.setter
    def completion_tags(self, completion_tags):
        """Sets the completion_tags of this ProtocolModify.


        :param completion_tags: The completion_tags of this ProtocolModify.  # noqa: E501
        :type: list[str]
        """

        self._completion_tags = completion_tags

    @property
    def notes(self):
        """Gets the notes of this ProtocolModify.


        :return: The notes of this ProtocolModify.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ProtocolModify.


        :param notes: The notes of this ProtocolModify.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def esignature_config(self):
        """Gets the esignature_config of this ProtocolModify.


        :return: The esignature_config of this ProtocolModify.
        :rtype: ProtocolESignatureConfig
        """
        return self._esignature_config

    @esignature_config.setter
    def esignature_config(self, esignature_config):
        """Sets the esignature_config of this ProtocolModify.


        :param esignature_config: The esignature_config of this ProtocolModify.  # noqa: E501
        :type: ProtocolESignatureConfig
        """

        self._esignature_config = esignature_config


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtocolModify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
