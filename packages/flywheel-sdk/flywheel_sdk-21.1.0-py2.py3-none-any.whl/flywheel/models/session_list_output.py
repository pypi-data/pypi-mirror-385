# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.copy_status import CopyStatus  # noqa: F401,E501
from flywheel.models.file_list_output import FileListOutput  # noqa: F401,E501
from flywheel.models.join_origins import JoinOrigins  # noqa: F401,E501
from flywheel.models.note import Note  # noqa: F401,E501
from flywheel.models.role_permission import RolePermission  # noqa: F401,E501
from flywheel.models.session_parents import SessionParents  # noqa: F401,E501
from flywheel.models.subject_output_for_list import SubjectOutputForList  # noqa: F401,E501

from .mixins import SessionMixin
class SessionListOutput(SessionMixin):

    swagger_types = {
        'id': 'str',
        'group': 'str',
        'project': 'str',
        'parents': 'SessionParents',
        'label': 'str',
        'uid': 'str',
        'timestamp': 'datetime',
        'timezone': 'str',
        'permissions': 'list[RolePermission]',
        'tags': 'list[str]',
        'notes': 'list[Note]',
        'subject': 'SubjectOutputForList',
        'age': 'int',
        'weight': 'float',
        'operator': 'str',
        'files': 'list[FileListOutput]',
        'info': 'object',
        'info_exists': 'bool',
        'created': 'datetime',
        'modified': 'datetime',
        'revision': 'int',
        'satisfies_template': 'bool',
        'project_has_template': 'bool',
        'join_origin': 'JoinOrigins',
        'analyses': 'list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]',
        'copy_of': 'object',
        'original_copy_of': 'object',
        'copy_status': 'CopyStatus'
    }

    attribute_map = {
        'id': '_id',
        'group': 'group',
        'project': 'project',
        'parents': 'parents',
        'label': 'label',
        'uid': 'uid',
        'timestamp': 'timestamp',
        'timezone': 'timezone',
        'permissions': 'permissions',
        'tags': 'tags',
        'notes': 'notes',
        'subject': 'subject',
        'age': 'age',
        'weight': 'weight',
        'operator': 'operator',
        'files': 'files',
        'info': 'info',
        'info_exists': 'info_exists',
        'created': 'created',
        'modified': 'modified',
        'revision': 'revision',
        'satisfies_template': 'satisfies_template',
        'project_has_template': 'project_has_template',
        'join_origin': 'join-origin',
        'analyses': 'analyses',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of',
        'copy_status': 'copy_status'
    }

    rattribute_map = {
        '_id': 'id',
        'group': 'group',
        'project': 'project',
        'parents': 'parents',
        'label': 'label',
        'uid': 'uid',
        'timestamp': 'timestamp',
        'timezone': 'timezone',
        'permissions': 'permissions',
        'tags': 'tags',
        'notes': 'notes',
        'subject': 'subject',
        'age': 'age',
        'weight': 'weight',
        'operator': 'operator',
        'files': 'files',
        'info': 'info',
        'info_exists': 'info_exists',
        'created': 'created',
        'modified': 'modified',
        'revision': 'revision',
        'satisfies_template': 'satisfies_template',
        'project_has_template': 'project_has_template',
        'join-origin': 'join_origin',
        'analyses': 'analyses',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of',
        'copy_status': 'copy_status'
    }

    def __init__(self, id=None, group=None, project=None, parents=None, label=None, uid=None, timestamp=None, timezone=None, permissions=None, tags=None, notes=None, subject=None, age=None, weight=None, operator=None, files=None, info=None, info_exists=None, created=None, modified=None, revision=None, satisfies_template=None, project_has_template=False, join_origin=None, analyses=None, copy_of=None, original_copy_of=None, copy_status=None):  # noqa: E501
        """SessionListOutput - a model defined in Swagger"""
        super(SessionListOutput, self).__init__()

        self._id = None
        self._group = None
        self._project = None
        self._parents = None
        self._label = None
        self._uid = None
        self._timestamp = None
        self._timezone = None
        self._permissions = None
        self._tags = None
        self._notes = None
        self._subject = None
        self._age = None
        self._weight = None
        self._operator = None
        self._files = None
        self._info = None
        self._info_exists = None
        self._created = None
        self._modified = None
        self._revision = None
        self._satisfies_template = None
        self._project_has_template = None
        self._join_origin = None
        self._analyses = None
        self._copy_of = None
        self._original_copy_of = None
        self._copy_status = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        self.group = group
        self.project = project
        self.parents = parents
        if label is not None:
            self.label = label
        if uid is not None:
            self.uid = uid
        if timestamp is not None:
            self.timestamp = timestamp
        if timezone is not None:
            self.timezone = timezone
        self.permissions = permissions
        if tags is not None:
            self.tags = tags
        if notes is not None:
            self.notes = notes
        self.subject = subject
        if age is not None:
            self.age = age
        if weight is not None:
            self.weight = weight
        if operator is not None:
            self.operator = operator
        self.files = files
        self.info = info
        self.info_exists = info_exists
        self.created = created
        self.modified = modified
        self.revision = revision
        if satisfies_template is not None:
            self.satisfies_template = satisfies_template
        if project_has_template is not None:
            self.project_has_template = project_has_template
        if join_origin is not None:
            self.join_origin = join_origin
        if analyses is not None:
            self.analyses = analyses
        self.copy_of = copy_of
        self.original_copy_of = original_copy_of
        if copy_status is not None:
            self.copy_status = copy_status

    @property
    def id(self):
        """Gets the id of this SessionListOutput.


        :return: The id of this SessionListOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionListOutput.


        :param id: The id of this SessionListOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def group(self):
        """Gets the group of this SessionListOutput.


        :return: The group of this SessionListOutput.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SessionListOutput.


        :param group: The group of this SessionListOutput.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def project(self):
        """Gets the project of this SessionListOutput.


        :return: The project of this SessionListOutput.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this SessionListOutput.


        :param project: The project of this SessionListOutput.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def parents(self):
        """Gets the parents of this SessionListOutput.


        :return: The parents of this SessionListOutput.
        :rtype: SessionParents
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this SessionListOutput.


        :param parents: The parents of this SessionListOutput.  # noqa: E501
        :type: SessionParents
        """

        self._parents = parents

    @property
    def label(self):
        """Gets the label of this SessionListOutput.


        :return: The label of this SessionListOutput.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SessionListOutput.


        :param label: The label of this SessionListOutput.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def uid(self):
        """Gets the uid of this SessionListOutput.


        :return: The uid of this SessionListOutput.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SessionListOutput.


        :param uid: The uid of this SessionListOutput.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def timestamp(self):
        """Gets the timestamp of this SessionListOutput.


        :return: The timestamp of this SessionListOutput.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SessionListOutput.


        :param timestamp: The timestamp of this SessionListOutput.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def timezone(self):
        """Gets the timezone of this SessionListOutput.


        :return: The timezone of this SessionListOutput.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SessionListOutput.


        :param timezone: The timezone of this SessionListOutput.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def permissions(self):
        """Gets the permissions of this SessionListOutput.


        :return: The permissions of this SessionListOutput.
        :rtype: list[RolePermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this SessionListOutput.


        :param permissions: The permissions of this SessionListOutput.  # noqa: E501
        :type: list[RolePermission]
        """

        self._permissions = permissions

    @property
    def tags(self):
        """Gets the tags of this SessionListOutput.


        :return: The tags of this SessionListOutput.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SessionListOutput.


        :param tags: The tags of this SessionListOutput.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def notes(self):
        """Gets the notes of this SessionListOutput.


        :return: The notes of this SessionListOutput.
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SessionListOutput.


        :param notes: The notes of this SessionListOutput.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def subject(self):
        """Gets the subject of this SessionListOutput.


        :return: The subject of this SessionListOutput.
        :rtype: SubjectOutputForList
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SessionListOutput.


        :param subject: The subject of this SessionListOutput.  # noqa: E501
        :type: SubjectOutputForList
        """

        self._subject = subject

    @property
    def age(self):
        """Gets the age of this SessionListOutput.


        :return: The age of this SessionListOutput.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this SessionListOutput.


        :param age: The age of this SessionListOutput.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def weight(self):
        """Gets the weight of this SessionListOutput.


        :return: The weight of this SessionListOutput.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SessionListOutput.


        :param weight: The weight of this SessionListOutput.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def operator(self):
        """Gets the operator of this SessionListOutput.


        :return: The operator of this SessionListOutput.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SessionListOutput.


        :param operator: The operator of this SessionListOutput.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def files(self):
        """Gets the files of this SessionListOutput.


        :return: The files of this SessionListOutput.
        :rtype: list[FileListOutput]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SessionListOutput.


        :param files: The files of this SessionListOutput.  # noqa: E501
        :type: list[FileListOutput]
        """

        self._files = files

    @property
    def info(self):
        """Gets the info of this SessionListOutput.


        :return: The info of this SessionListOutput.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SessionListOutput.


        :param info: The info of this SessionListOutput.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def info_exists(self):
        """Gets the info_exists of this SessionListOutput.


        :return: The info_exists of this SessionListOutput.
        :rtype: bool
        """
        return self._info_exists

    @info_exists.setter
    def info_exists(self, info_exists):
        """Sets the info_exists of this SessionListOutput.


        :param info_exists: The info_exists of this SessionListOutput.  # noqa: E501
        :type: bool
        """

        self._info_exists = info_exists

    @property
    def created(self):
        """Gets the created of this SessionListOutput.


        :return: The created of this SessionListOutput.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SessionListOutput.


        :param created: The created of this SessionListOutput.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this SessionListOutput.


        :return: The modified of this SessionListOutput.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SessionListOutput.


        :param modified: The modified of this SessionListOutput.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def revision(self):
        """Gets the revision of this SessionListOutput.


        :return: The revision of this SessionListOutput.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SessionListOutput.


        :param revision: The revision of this SessionListOutput.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def satisfies_template(self):
        """Gets the satisfies_template of this SessionListOutput.


        :return: The satisfies_template of this SessionListOutput.
        :rtype: bool
        """
        return self._satisfies_template

    @satisfies_template.setter
    def satisfies_template(self, satisfies_template):
        """Sets the satisfies_template of this SessionListOutput.


        :param satisfies_template: The satisfies_template of this SessionListOutput.  # noqa: E501
        :type: bool
        """

        self._satisfies_template = satisfies_template

    @property
    def project_has_template(self):
        """Gets the project_has_template of this SessionListOutput.


        :return: The project_has_template of this SessionListOutput.
        :rtype: bool
        """
        return self._project_has_template

    @project_has_template.setter
    def project_has_template(self, project_has_template):
        """Sets the project_has_template of this SessionListOutput.


        :param project_has_template: The project_has_template of this SessionListOutput.  # noqa: E501
        :type: bool
        """

        self._project_has_template = project_has_template

    @property
    def join_origin(self):
        """Gets the join_origin of this SessionListOutput.


        :return: The join_origin of this SessionListOutput.
        :rtype: JoinOrigins
        """
        return self._join_origin

    @join_origin.setter
    def join_origin(self, join_origin):
        """Sets the join_origin of this SessionListOutput.


        :param join_origin: The join_origin of this SessionListOutput.  # noqa: E501
        :type: JoinOrigins
        """

        self._join_origin = join_origin

    @property
    def analyses(self):
        """Gets the analyses of this SessionListOutput.


        :return: The analyses of this SessionListOutput.
        :rtype: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this SessionListOutput.


        :param analyses: The analyses of this SessionListOutput.  # noqa: E501
        :type: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """

        self._analyses = analyses

    @property
    def copy_of(self):
        """Gets the copy_of of this SessionListOutput.


        :return: The copy_of of this SessionListOutput.
        :rtype: object
        """
        return self._copy_of

    @copy_of.setter
    def copy_of(self, copy_of):
        """Sets the copy_of of this SessionListOutput.


        :param copy_of: The copy_of of this SessionListOutput.  # noqa: E501
        :type: object
        """

        self._copy_of = copy_of

    @property
    def original_copy_of(self):
        """Gets the original_copy_of of this SessionListOutput.


        :return: The original_copy_of of this SessionListOutput.
        :rtype: object
        """
        return self._original_copy_of

    @original_copy_of.setter
    def original_copy_of(self, original_copy_of):
        """Sets the original_copy_of of this SessionListOutput.


        :param original_copy_of: The original_copy_of of this SessionListOutput.  # noqa: E501
        :type: object
        """

        self._original_copy_of = original_copy_of

    @property
    def copy_status(self):
        """Gets the copy_status of this SessionListOutput.


        :return: The copy_status of this SessionListOutput.
        :rtype: CopyStatus
        """
        return self._copy_status

    @copy_status.setter
    def copy_status(self, copy_status):
        """Sets the copy_status of this SessionListOutput.


        :param copy_status: The copy_status of this SessionListOutput.  # noqa: E501
        :type: CopyStatus
        """

        self._copy_status = copy_status


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        # Import relatives
        from flywheel.models.session import Session
        from flywheel.models.session_output import SessionOutput
        relatives = (
            Session,
            SessionOutput,
        )
        if not isinstance(other, relatives + (SessionListOutput,)):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
