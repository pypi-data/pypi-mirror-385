# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class CentralOut(object):

    swagger_types = {
        'enabled': 'bool',
        'manager_url': 'str',
        'app_url': 'str',
        'tenant_id': 'str',
        'tenant_path': 'str',
        'organization_id': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'manager_url': 'manager_url',
        'app_url': 'app_url',
        'tenant_id': 'tenant_id',
        'tenant_path': 'tenant_path',
        'organization_id': 'organization_id'
    }

    rattribute_map = {
        'enabled': 'enabled',
        'manager_url': 'manager_url',
        'app_url': 'app_url',
        'tenant_id': 'tenant_id',
        'tenant_path': 'tenant_path',
        'organization_id': 'organization_id'
    }

    def __init__(self, enabled=False, manager_url='', app_url='', tenant_id='', tenant_path='', organization_id=''):  # noqa: E501
        """CentralOut - a model defined in Swagger"""
        super(CentralOut, self).__init__()

        self._enabled = None
        self._manager_url = None
        self._app_url = None
        self._tenant_id = None
        self._tenant_path = None
        self._organization_id = None
        self.discriminator = None
        self.alt_discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if manager_url is not None:
            self.manager_url = manager_url
        if app_url is not None:
            self.app_url = app_url
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_path is not None:
            self.tenant_path = tenant_path
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def enabled(self):
        """Gets the enabled of this CentralOut.


        :return: The enabled of this CentralOut.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CentralOut.


        :param enabled: The enabled of this CentralOut.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def manager_url(self):
        """Gets the manager_url of this CentralOut.


        :return: The manager_url of this CentralOut.
        :rtype: str
        """
        return self._manager_url

    @manager_url.setter
    def manager_url(self, manager_url):
        """Sets the manager_url of this CentralOut.


        :param manager_url: The manager_url of this CentralOut.  # noqa: E501
        :type: str
        """

        self._manager_url = manager_url

    @property
    def app_url(self):
        """Gets the app_url of this CentralOut.


        :return: The app_url of this CentralOut.
        :rtype: str
        """
        return self._app_url

    @app_url.setter
    def app_url(self, app_url):
        """Sets the app_url of this CentralOut.


        :param app_url: The app_url of this CentralOut.  # noqa: E501
        :type: str
        """

        self._app_url = app_url

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CentralOut.


        :return: The tenant_id of this CentralOut.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CentralOut.


        :param tenant_id: The tenant_id of this CentralOut.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_path(self):
        """Gets the tenant_path of this CentralOut.


        :return: The tenant_path of this CentralOut.
        :rtype: str
        """
        return self._tenant_path

    @tenant_path.setter
    def tenant_path(self, tenant_path):
        """Sets the tenant_path of this CentralOut.


        :param tenant_path: The tenant_path of this CentralOut.  # noqa: E501
        :type: str
        """

        self._tenant_path = tenant_path

    @property
    def organization_id(self):
        """Gets the organization_id of this CentralOut.


        :return: The organization_id of this CentralOut.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CentralOut.


        :param organization_id: The organization_id of this CentralOut.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CentralOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
