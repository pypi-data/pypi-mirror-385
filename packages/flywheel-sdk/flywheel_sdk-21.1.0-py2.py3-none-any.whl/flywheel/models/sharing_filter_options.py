# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class SharingFilterOptions(object):

    swagger_types = {
        'therapeutic_areas': 'list[str]',
        'body_regions': 'list[str]',
        'organ_systems': 'list[str]',
        'age_groups': 'list[str]',
        'measurements': 'list[str]',
        'modalities': 'list[str]',
        'file_types': 'list[str]',
        'tags': 'list[str]'
    }

    attribute_map = {
        'therapeutic_areas': 'therapeutic_areas',
        'body_regions': 'body_regions',
        'organ_systems': 'organ_systems',
        'age_groups': 'age_groups',
        'measurements': 'measurements',
        'modalities': 'modalities',
        'file_types': 'file_types',
        'tags': 'tags'
    }

    rattribute_map = {
        'therapeutic_areas': 'therapeutic_areas',
        'body_regions': 'body_regions',
        'organ_systems': 'organ_systems',
        'age_groups': 'age_groups',
        'measurements': 'measurements',
        'modalities': 'modalities',
        'file_types': 'file_types',
        'tags': 'tags'
    }

    def __init__(self, therapeutic_areas=None, body_regions=None, organ_systems=None, age_groups=None, measurements=None, modalities=None, file_types=None, tags=None):  # noqa: E501
        """SharingFilterOptions - a model defined in Swagger"""
        super(SharingFilterOptions, self).__init__()

        self._therapeutic_areas = None
        self._body_regions = None
        self._organ_systems = None
        self._age_groups = None
        self._measurements = None
        self._modalities = None
        self._file_types = None
        self._tags = None
        self.discriminator = None
        self.alt_discriminator = None

        self.therapeutic_areas = therapeutic_areas
        self.body_regions = body_regions
        self.organ_systems = organ_systems
        self.age_groups = age_groups
        self.measurements = measurements
        self.modalities = modalities
        self.file_types = file_types
        self.tags = tags

    @property
    def therapeutic_areas(self):
        """Gets the therapeutic_areas of this SharingFilterOptions.


        :return: The therapeutic_areas of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._therapeutic_areas

    @therapeutic_areas.setter
    def therapeutic_areas(self, therapeutic_areas):
        """Sets the therapeutic_areas of this SharingFilterOptions.


        :param therapeutic_areas: The therapeutic_areas of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._therapeutic_areas = therapeutic_areas

    @property
    def body_regions(self):
        """Gets the body_regions of this SharingFilterOptions.


        :return: The body_regions of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._body_regions

    @body_regions.setter
    def body_regions(self, body_regions):
        """Sets the body_regions of this SharingFilterOptions.


        :param body_regions: The body_regions of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._body_regions = body_regions

    @property
    def organ_systems(self):
        """Gets the organ_systems of this SharingFilterOptions.


        :return: The organ_systems of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._organ_systems

    @organ_systems.setter
    def organ_systems(self, organ_systems):
        """Sets the organ_systems of this SharingFilterOptions.


        :param organ_systems: The organ_systems of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._organ_systems = organ_systems

    @property
    def age_groups(self):
        """Gets the age_groups of this SharingFilterOptions.


        :return: The age_groups of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._age_groups

    @age_groups.setter
    def age_groups(self, age_groups):
        """Sets the age_groups of this SharingFilterOptions.


        :param age_groups: The age_groups of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._age_groups = age_groups

    @property
    def measurements(self):
        """Gets the measurements of this SharingFilterOptions.


        :return: The measurements of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this SharingFilterOptions.


        :param measurements: The measurements of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._measurements = measurements

    @property
    def modalities(self):
        """Gets the modalities of this SharingFilterOptions.


        :return: The modalities of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._modalities

    @modalities.setter
    def modalities(self, modalities):
        """Sets the modalities of this SharingFilterOptions.


        :param modalities: The modalities of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._modalities = modalities

    @property
    def file_types(self):
        """Gets the file_types of this SharingFilterOptions.


        :return: The file_types of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._file_types

    @file_types.setter
    def file_types(self, file_types):
        """Sets the file_types of this SharingFilterOptions.


        :param file_types: The file_types of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._file_types = file_types

    @property
    def tags(self):
        """Gets the tags of this SharingFilterOptions.


        :return: The tags of this SharingFilterOptions.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SharingFilterOptions.


        :param tags: The tags of this SharingFilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharingFilterOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
