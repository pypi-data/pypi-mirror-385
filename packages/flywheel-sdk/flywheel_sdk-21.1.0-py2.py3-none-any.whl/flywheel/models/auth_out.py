# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.auth0_auth_out import Auth0AuthOut  # noqa: F401,E501
from flywheel.models.google_auth_out import GoogleAuthOut  # noqa: F401,E501

class AuthOut(object):

    swagger_types = {
        'google': 'GoogleAuthOut',
        'auth0': 'Auth0AuthOut',
        'basic': 'object',
        'cas': 'object',
        'ldap': 'object',
        'mail': 'object',
        'saml': 'object',
        'wechat': 'object'
    }

    attribute_map = {
        'google': 'google',
        'auth0': 'auth0',
        'basic': 'basic',
        'cas': 'cas',
        'ldap': 'ldap',
        'mail': 'mail',
        'saml': 'saml',
        'wechat': 'wechat'
    }

    rattribute_map = {
        'google': 'google',
        'auth0': 'auth0',
        'basic': 'basic',
        'cas': 'cas',
        'ldap': 'ldap',
        'mail': 'mail',
        'saml': 'saml',
        'wechat': 'wechat'
    }

    def __init__(self, google=None, auth0=None, basic=None, cas=None, ldap=None, mail=None, saml=None, wechat=None):  # noqa: E501
        """AuthOut - a model defined in Swagger"""
        super(AuthOut, self).__init__()

        self._google = None
        self._auth0 = None
        self._basic = None
        self._cas = None
        self._ldap = None
        self._mail = None
        self._saml = None
        self._wechat = None
        self.discriminator = None
        self.alt_discriminator = None

        if google is not None:
            self.google = google
        if auth0 is not None:
            self.auth0 = auth0
        if basic is not None:
            self.basic = basic
        if cas is not None:
            self.cas = cas
        if ldap is not None:
            self.ldap = ldap
        if mail is not None:
            self.mail = mail
        if saml is not None:
            self.saml = saml
        if wechat is not None:
            self.wechat = wechat

    @property
    def google(self):
        """Gets the google of this AuthOut.


        :return: The google of this AuthOut.
        :rtype: GoogleAuthOut
        """
        return self._google

    @google.setter
    def google(self, google):
        """Sets the google of this AuthOut.


        :param google: The google of this AuthOut.  # noqa: E501
        :type: GoogleAuthOut
        """

        self._google = google

    @property
    def auth0(self):
        """Gets the auth0 of this AuthOut.


        :return: The auth0 of this AuthOut.
        :rtype: Auth0AuthOut
        """
        return self._auth0

    @auth0.setter
    def auth0(self, auth0):
        """Sets the auth0 of this AuthOut.


        :param auth0: The auth0 of this AuthOut.  # noqa: E501
        :type: Auth0AuthOut
        """

        self._auth0 = auth0

    @property
    def basic(self):
        """Gets the basic of this AuthOut.


        :return: The basic of this AuthOut.
        :rtype: object
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this AuthOut.


        :param basic: The basic of this AuthOut.  # noqa: E501
        :type: object
        """

        self._basic = basic

    @property
    def cas(self):
        """Gets the cas of this AuthOut.


        :return: The cas of this AuthOut.
        :rtype: object
        """
        return self._cas

    @cas.setter
    def cas(self, cas):
        """Sets the cas of this AuthOut.


        :param cas: The cas of this AuthOut.  # noqa: E501
        :type: object
        """

        self._cas = cas

    @property
    def ldap(self):
        """Gets the ldap of this AuthOut.


        :return: The ldap of this AuthOut.
        :rtype: object
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this AuthOut.


        :param ldap: The ldap of this AuthOut.  # noqa: E501
        :type: object
        """

        self._ldap = ldap

    @property
    def mail(self):
        """Gets the mail of this AuthOut.


        :return: The mail of this AuthOut.
        :rtype: object
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this AuthOut.


        :param mail: The mail of this AuthOut.  # noqa: E501
        :type: object
        """

        self._mail = mail

    @property
    def saml(self):
        """Gets the saml of this AuthOut.


        :return: The saml of this AuthOut.
        :rtype: object
        """
        return self._saml

    @saml.setter
    def saml(self, saml):
        """Sets the saml of this AuthOut.


        :param saml: The saml of this AuthOut.  # noqa: E501
        :type: object
        """

        self._saml = saml

    @property
    def wechat(self):
        """Gets the wechat of this AuthOut.


        :return: The wechat of this AuthOut.
        :rtype: object
        """
        return self._wechat

    @wechat.setter
    def wechat(self, wechat):
        """Sets the wechat of this AuthOut.


        :param wechat: The wechat of this AuthOut.  # noqa: E501
        :type: object
        """

        self._wechat = wechat


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
