# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.access_permission import AccessPermission  # noqa: F401,E501
from flywheel.models.file_list_output import FileListOutput  # noqa: F401,E501
from flywheel.models.join_origins import JoinOrigins  # noqa: F401,E501
from flywheel.models.note import Note  # noqa: F401,E501

from .mixins import CollectionMixin
class CollectionWithStats(CollectionMixin):

    swagger_types = {
        'id': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'label': 'str',
        'description': 'str',
        'info': 'object',
        'curator': 'str',
        'revision': 'int',
        'notes': 'list[Note]',
        'tags': 'list[str]',
        'analyses': 'list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]',
        'permissions': 'list[AccessPermission]',
        'join_origin': 'JoinOrigins',
        'files': 'list[FileListOutput]',
        'attachment_count': 'int',
        'session_count': 'int',
        'noncompliant_session_count': 'int',
        'subject_count': 'int'
    }

    attribute_map = {
        'id': '_id',
        'created': 'created',
        'modified': 'modified',
        'label': 'label',
        'description': 'description',
        'info': 'info',
        'curator': 'curator',
        'revision': 'revision',
        'notes': 'notes',
        'tags': 'tags',
        'analyses': 'analyses',
        'permissions': 'permissions',
        'join_origin': 'join-origin',
        'files': 'files',
        'attachment_count': 'attachment_count',
        'session_count': 'session_count',
        'noncompliant_session_count': 'noncompliant_session_count',
        'subject_count': 'subject_count'
    }

    rattribute_map = {
        '_id': 'id',
        'created': 'created',
        'modified': 'modified',
        'label': 'label',
        'description': 'description',
        'info': 'info',
        'curator': 'curator',
        'revision': 'revision',
        'notes': 'notes',
        'tags': 'tags',
        'analyses': 'analyses',
        'permissions': 'permissions',
        'join-origin': 'join_origin',
        'files': 'files',
        'attachment_count': 'attachment_count',
        'session_count': 'session_count',
        'noncompliant_session_count': 'noncompliant_session_count',
        'subject_count': 'subject_count'
    }

    def __init__(self, id=None, created=None, modified=None, label=None, description=None, info=None, curator=None, revision=1, notes=None, tags=None, analyses=None, permissions=None, join_origin=None, files=None, attachment_count=0, session_count=0, noncompliant_session_count=0, subject_count=0):  # noqa: E501
        """CollectionWithStats - a model defined in Swagger"""
        super(CollectionWithStats, self).__init__()

        self._id = None
        self._created = None
        self._modified = None
        self._label = None
        self._description = None
        self._info = None
        self._curator = None
        self._revision = None
        self._notes = None
        self._tags = None
        self._analyses = None
        self._permissions = None
        self._join_origin = None
        self._files = None
        self._attachment_count = None
        self._session_count = None
        self._noncompliant_session_count = None
        self._subject_count = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        self.info = info
        if curator is not None:
            self.curator = curator
        if revision is not None:
            self.revision = revision
        if notes is not None:
            self.notes = notes
        if tags is not None:
            self.tags = tags
        if analyses is not None:
            self.analyses = analyses
        if permissions is not None:
            self.permissions = permissions
        if join_origin is not None:
            self.join_origin = join_origin
        self.files = files
        if attachment_count is not None:
            self.attachment_count = attachment_count
        if session_count is not None:
            self.session_count = session_count
        if noncompliant_session_count is not None:
            self.noncompliant_session_count = noncompliant_session_count
        if subject_count is not None:
            self.subject_count = subject_count

    @property
    def id(self):
        """Gets the id of this CollectionWithStats.


        :return: The id of this CollectionWithStats.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionWithStats.


        :param id: The id of this CollectionWithStats.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this CollectionWithStats.


        :return: The created of this CollectionWithStats.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CollectionWithStats.


        :param created: The created of this CollectionWithStats.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this CollectionWithStats.


        :return: The modified of this CollectionWithStats.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this CollectionWithStats.


        :param modified: The modified of this CollectionWithStats.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def label(self):
        """Gets the label of this CollectionWithStats.


        :return: The label of this CollectionWithStats.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CollectionWithStats.


        :param label: The label of this CollectionWithStats.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this CollectionWithStats.


        :return: The description of this CollectionWithStats.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionWithStats.


        :param description: The description of this CollectionWithStats.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def info(self):
        """Gets the info of this CollectionWithStats.


        :return: The info of this CollectionWithStats.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this CollectionWithStats.


        :param info: The info of this CollectionWithStats.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def curator(self):
        """Gets the curator of this CollectionWithStats.


        :return: The curator of this CollectionWithStats.
        :rtype: str
        """
        return self._curator

    @curator.setter
    def curator(self, curator):
        """Sets the curator of this CollectionWithStats.


        :param curator: The curator of this CollectionWithStats.  # noqa: E501
        :type: str
        """

        self._curator = curator

    @property
    def revision(self):
        """Gets the revision of this CollectionWithStats.


        :return: The revision of this CollectionWithStats.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this CollectionWithStats.


        :param revision: The revision of this CollectionWithStats.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def notes(self):
        """Gets the notes of this CollectionWithStats.


        :return: The notes of this CollectionWithStats.
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CollectionWithStats.


        :param notes: The notes of this CollectionWithStats.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def tags(self):
        """Gets the tags of this CollectionWithStats.


        :return: The tags of this CollectionWithStats.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CollectionWithStats.


        :param tags: The tags of this CollectionWithStats.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def analyses(self):
        """Gets the analyses of this CollectionWithStats.


        :return: The analyses of this CollectionWithStats.
        :rtype: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this CollectionWithStats.


        :param analyses: The analyses of this CollectionWithStats.  # noqa: E501
        :type: list[union[AnalysisListOutput,AnalysisListOutputInflatedJob]]
        """

        self._analyses = analyses

    @property
    def permissions(self):
        """Gets the permissions of this CollectionWithStats.


        :return: The permissions of this CollectionWithStats.
        :rtype: list[AccessPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CollectionWithStats.


        :param permissions: The permissions of this CollectionWithStats.  # noqa: E501
        :type: list[AccessPermission]
        """

        self._permissions = permissions

    @property
    def join_origin(self):
        """Gets the join_origin of this CollectionWithStats.


        :return: The join_origin of this CollectionWithStats.
        :rtype: JoinOrigins
        """
        return self._join_origin

    @join_origin.setter
    def join_origin(self, join_origin):
        """Sets the join_origin of this CollectionWithStats.


        :param join_origin: The join_origin of this CollectionWithStats.  # noqa: E501
        :type: JoinOrigins
        """

        self._join_origin = join_origin

    @property
    def files(self):
        """Gets the files of this CollectionWithStats.


        :return: The files of this CollectionWithStats.
        :rtype: list[FileListOutput]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CollectionWithStats.


        :param files: The files of this CollectionWithStats.  # noqa: E501
        :type: list[FileListOutput]
        """

        self._files = files

    @property
    def attachment_count(self):
        """Gets the attachment_count of this CollectionWithStats.


        :return: The attachment_count of this CollectionWithStats.
        :rtype: int
        """
        return self._attachment_count

    @attachment_count.setter
    def attachment_count(self, attachment_count):
        """Sets the attachment_count of this CollectionWithStats.


        :param attachment_count: The attachment_count of this CollectionWithStats.  # noqa: E501
        :type: int
        """

        self._attachment_count = attachment_count

    @property
    def session_count(self):
        """Gets the session_count of this CollectionWithStats.


        :return: The session_count of this CollectionWithStats.
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this CollectionWithStats.


        :param session_count: The session_count of this CollectionWithStats.  # noqa: E501
        :type: int
        """

        self._session_count = session_count

    @property
    def noncompliant_session_count(self):
        """Gets the noncompliant_session_count of this CollectionWithStats.


        :return: The noncompliant_session_count of this CollectionWithStats.
        :rtype: int
        """
        return self._noncompliant_session_count

    @noncompliant_session_count.setter
    def noncompliant_session_count(self, noncompliant_session_count):
        """Sets the noncompliant_session_count of this CollectionWithStats.


        :param noncompliant_session_count: The noncompliant_session_count of this CollectionWithStats.  # noqa: E501
        :type: int
        """

        self._noncompliant_session_count = noncompliant_session_count

    @property
    def subject_count(self):
        """Gets the subject_count of this CollectionWithStats.


        :return: The subject_count of this CollectionWithStats.
        :rtype: int
        """
        return self._subject_count

    @subject_count.setter
    def subject_count(self, subject_count):
        """Sets the subject_count of this CollectionWithStats.


        :param subject_count: The subject_count of this CollectionWithStats.  # noqa: E501
        :type: int
        """

        self._subject_count = subject_count


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        # Import relatives
        from flywheel.models.collection import Collection
        from flywheel.models.collection_container_output import CollectionContainerOutput
        from flywheel.models.collection_output import CollectionOutput
        relatives = (
            Collection,
            CollectionContainerOutput,
            CollectionOutput,
        )
        if not isinstance(other, relatives + (CollectionWithStats,)):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
