# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class AsStorage(object):

    swagger_types = {
        'bucket': 'str',
        'path': 'str',
        'signed_urls': 'bool',
        'region': 'str',
        'config_type': 'str',
        'config_class': 'str'
    }

    attribute_map = {
        'bucket': 'bucket',
        'path': 'path',
        'signed_urls': 'signed_urls',
        'region': 'region',
        'config_type': 'config_type',
        'config_class': 'config_class'
    }

    rattribute_map = {
        'bucket': 'bucket',
        'path': 'path',
        'signed_urls': 'signed_urls',
        'region': 'region',
        'config_type': 'config_type',
        'config_class': 'config_class'
    }

    def __init__(self, bucket=None, path='', signed_urls=True, region=None, config_type='azure', config_class='storage'):  # noqa: E501
        """AsStorage - a model defined in Swagger"""
        super(AsStorage, self).__init__()

        self._bucket = None
        self._path = None
        self._signed_urls = None
        self._region = None
        self._config_type = None
        self._config_class = None
        self.discriminator = None
        self.alt_discriminator = None

        self.bucket = bucket
        if path is not None:
            self.path = path
        if signed_urls is not None:
            self.signed_urls = signed_urls
        if region is not None:
            self.region = region
        if config_type is not None:
            self.config_type = config_type
        if config_class is not None:
            self.config_class = config_class

    @property
    def bucket(self):
        """Gets the bucket of this AsStorage.


        :return: The bucket of this AsStorage.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this AsStorage.


        :param bucket: The bucket of this AsStorage.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def path(self):
        """Gets the path of this AsStorage.


        :return: The path of this AsStorage.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AsStorage.


        :param path: The path of this AsStorage.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def signed_urls(self):
        """Gets the signed_urls of this AsStorage.


        :return: The signed_urls of this AsStorage.
        :rtype: bool
        """
        return self._signed_urls

    @signed_urls.setter
    def signed_urls(self, signed_urls):
        """Sets the signed_urls of this AsStorage.


        :param signed_urls: The signed_urls of this AsStorage.  # noqa: E501
        :type: bool
        """

        self._signed_urls = signed_urls

    @property
    def region(self):
        """Gets the region of this AsStorage.


        :return: The region of this AsStorage.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AsStorage.


        :param region: The region of this AsStorage.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def config_type(self):
        """Gets the config_type of this AsStorage.


        :return: The config_type of this AsStorage.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this AsStorage.


        :param config_type: The config_type of this AsStorage.  # noqa: E501
        :type: str
        """

        self._config_type = config_type

    @property
    def config_class(self):
        """Gets the config_class of this AsStorage.


        :return: The config_class of this AsStorage.
        :rtype: str
        """
        return self._config_class

    @config_class.setter
    def config_class(self, config_class):
        """Sets the config_class of this AsStorage.


        :param config_class: The config_class of this AsStorage.  # noqa: E501
        :type: str
        """

        self._config_class = config_class


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
