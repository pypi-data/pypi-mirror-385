# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class Auth0OptionsOut(object):

    swagger_types = {
        'onboarding': 'bool',
        'onboarding_eppn': 'bool',
        'fetch_profile': 'bool',
        'limit_social_domains': 'bool',
        'social_domain_whitelist': 'list[str]',
        'academic_idp_whitelist': 'list[str]',
        'federated_logout_subs': 'list[str]'
    }

    attribute_map = {
        'onboarding': 'onboarding',
        'onboarding_eppn': 'onboarding-eppn',
        'fetch_profile': 'fetch-profile',
        'limit_social_domains': 'limit-social-domains',
        'social_domain_whitelist': 'social_domain_whitelist',
        'academic_idp_whitelist': 'academic_idp_whitelist',
        'federated_logout_subs': 'federated_logout_subs'
    }

    rattribute_map = {
        'onboarding': 'onboarding',
        'onboarding-eppn': 'onboarding_eppn',
        'fetch-profile': 'fetch_profile',
        'limit-social-domains': 'limit_social_domains',
        'social_domain_whitelist': 'social_domain_whitelist',
        'academic_idp_whitelist': 'academic_idp_whitelist',
        'federated_logout_subs': 'federated_logout_subs'
    }

    def __init__(self, onboarding=None, onboarding_eppn=None, fetch_profile=None, limit_social_domains=None, social_domain_whitelist=None, academic_idp_whitelist=None, federated_logout_subs=None):  # noqa: E501
        """Auth0OptionsOut - a model defined in Swagger"""
        super(Auth0OptionsOut, self).__init__()

        self._onboarding = None
        self._onboarding_eppn = None
        self._fetch_profile = None
        self._limit_social_domains = None
        self._social_domain_whitelist = None
        self._academic_idp_whitelist = None
        self._federated_logout_subs = None
        self.discriminator = None
        self.alt_discriminator = None

        self.onboarding = onboarding
        self.onboarding_eppn = onboarding_eppn
        self.fetch_profile = fetch_profile
        self.limit_social_domains = limit_social_domains
        self.social_domain_whitelist = social_domain_whitelist
        self.academic_idp_whitelist = academic_idp_whitelist
        self.federated_logout_subs = federated_logout_subs

    @property
    def onboarding(self):
        """Gets the onboarding of this Auth0OptionsOut.


        :return: The onboarding of this Auth0OptionsOut.
        :rtype: bool
        """
        return self._onboarding

    @onboarding.setter
    def onboarding(self, onboarding):
        """Sets the onboarding of this Auth0OptionsOut.


        :param onboarding: The onboarding of this Auth0OptionsOut.  # noqa: E501
        :type: bool
        """

        self._onboarding = onboarding

    @property
    def onboarding_eppn(self):
        """Gets the onboarding_eppn of this Auth0OptionsOut.


        :return: The onboarding_eppn of this Auth0OptionsOut.
        :rtype: bool
        """
        return self._onboarding_eppn

    @onboarding_eppn.setter
    def onboarding_eppn(self, onboarding_eppn):
        """Sets the onboarding_eppn of this Auth0OptionsOut.


        :param onboarding_eppn: The onboarding_eppn of this Auth0OptionsOut.  # noqa: E501
        :type: bool
        """

        self._onboarding_eppn = onboarding_eppn

    @property
    def fetch_profile(self):
        """Gets the fetch_profile of this Auth0OptionsOut.


        :return: The fetch_profile of this Auth0OptionsOut.
        :rtype: bool
        """
        return self._fetch_profile

    @fetch_profile.setter
    def fetch_profile(self, fetch_profile):
        """Sets the fetch_profile of this Auth0OptionsOut.


        :param fetch_profile: The fetch_profile of this Auth0OptionsOut.  # noqa: E501
        :type: bool
        """

        self._fetch_profile = fetch_profile

    @property
    def limit_social_domains(self):
        """Gets the limit_social_domains of this Auth0OptionsOut.


        :return: The limit_social_domains of this Auth0OptionsOut.
        :rtype: bool
        """
        return self._limit_social_domains

    @limit_social_domains.setter
    def limit_social_domains(self, limit_social_domains):
        """Sets the limit_social_domains of this Auth0OptionsOut.


        :param limit_social_domains: The limit_social_domains of this Auth0OptionsOut.  # noqa: E501
        :type: bool
        """

        self._limit_social_domains = limit_social_domains

    @property
    def social_domain_whitelist(self):
        """Gets the social_domain_whitelist of this Auth0OptionsOut.


        :return: The social_domain_whitelist of this Auth0OptionsOut.
        :rtype: list[str]
        """
        return self._social_domain_whitelist

    @social_domain_whitelist.setter
    def social_domain_whitelist(self, social_domain_whitelist):
        """Sets the social_domain_whitelist of this Auth0OptionsOut.


        :param social_domain_whitelist: The social_domain_whitelist of this Auth0OptionsOut.  # noqa: E501
        :type: list[str]
        """

        self._social_domain_whitelist = social_domain_whitelist

    @property
    def academic_idp_whitelist(self):
        """Gets the academic_idp_whitelist of this Auth0OptionsOut.


        :return: The academic_idp_whitelist of this Auth0OptionsOut.
        :rtype: list[str]
        """
        return self._academic_idp_whitelist

    @academic_idp_whitelist.setter
    def academic_idp_whitelist(self, academic_idp_whitelist):
        """Sets the academic_idp_whitelist of this Auth0OptionsOut.


        :param academic_idp_whitelist: The academic_idp_whitelist of this Auth0OptionsOut.  # noqa: E501
        :type: list[str]
        """

        self._academic_idp_whitelist = academic_idp_whitelist

    @property
    def federated_logout_subs(self):
        """Gets the federated_logout_subs of this Auth0OptionsOut.


        :return: The federated_logout_subs of this Auth0OptionsOut.
        :rtype: list[str]
        """
        return self._federated_logout_subs

    @federated_logout_subs.setter
    def federated_logout_subs(self, federated_logout_subs):
        """Sets the federated_logout_subs of this Auth0OptionsOut.


        :param federated_logout_subs: The federated_logout_subs of this Auth0OptionsOut.  # noqa: E501
        :type: list[str]
        """

        self._federated_logout_subs = federated_logout_subs


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Auth0OptionsOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
