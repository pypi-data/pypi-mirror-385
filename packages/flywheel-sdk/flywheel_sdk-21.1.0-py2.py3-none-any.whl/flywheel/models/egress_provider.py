# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.provider_access_type import ProviderAccessType  # noqa: F401,E501
from flywheel.models.provider_class import ProviderClass  # noqa: F401,E501
from flywheel.models.provider_deletion_status import ProviderDeletionStatus  # noqa: F401,E501
from flywheel.models.provider_type import ProviderType  # noqa: F401,E501

class EgressProvider(object):

    swagger_types = {
        'id': 'str',
        'label': 'str',
        'deletion_status': 'ProviderDeletionStatus',
        'provider_class': 'ProviderClass',
        'provider_type': 'ProviderType',
        'config': 'object',
        'modified': 'datetime',
        'created': 'datetime',
        'deleted': 'datetime',
        'access_type': 'ProviderAccessType'
    }

    attribute_map = {
        'id': '_id',
        'label': 'label',
        'deletion_status': 'deletion_status',
        'provider_class': 'provider_class',
        'provider_type': 'provider_type',
        'config': 'config',
        'modified': 'modified',
        'created': 'created',
        'deleted': 'deleted',
        'access_type': 'access_type'
    }

    rattribute_map = {
        '_id': 'id',
        'label': 'label',
        'deletion_status': 'deletion_status',
        'provider_class': 'provider_class',
        'provider_type': 'provider_type',
        'config': 'config',
        'modified': 'modified',
        'created': 'created',
        'deleted': 'deleted',
        'access_type': 'access_type'
    }

    def __init__(self, id=None, label=None, deletion_status=None, provider_class=None, provider_type=None, config=None, modified=None, created=None, deleted=None, access_type=None):  # noqa: E501
        """EgressProvider - a model defined in Swagger"""
        super(EgressProvider, self).__init__()

        self._id = None
        self._label = None
        self._deletion_status = None
        self._provider_class = None
        self._provider_type = None
        self._config = None
        self._modified = None
        self._created = None
        self._deleted = None
        self._access_type = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if deletion_status is not None:
            self.deletion_status = deletion_status
        self.provider_class = provider_class
        self.provider_type = provider_type
        self.config = config
        self.modified = modified
        self.created = created
        if deleted is not None:
            self.deleted = deleted
        if access_type is not None:
            self.access_type = access_type

    @property
    def id(self):
        """Gets the id of this EgressProvider.


        :return: The id of this EgressProvider.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EgressProvider.


        :param id: The id of this EgressProvider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this EgressProvider.


        :return: The label of this EgressProvider.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EgressProvider.


        :param label: The label of this EgressProvider.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def deletion_status(self):
        """Gets the deletion_status of this EgressProvider.


        :return: The deletion_status of this EgressProvider.
        :rtype: ProviderDeletionStatus
        """
        return self._deletion_status

    @deletion_status.setter
    def deletion_status(self, deletion_status):
        """Sets the deletion_status of this EgressProvider.


        :param deletion_status: The deletion_status of this EgressProvider.  # noqa: E501
        :type: ProviderDeletionStatus
        """

        self._deletion_status = deletion_status

    @property
    def provider_class(self):
        """Gets the provider_class of this EgressProvider.


        :return: The provider_class of this EgressProvider.
        :rtype: ProviderClass
        """
        return self._provider_class

    @provider_class.setter
    def provider_class(self, provider_class):
        """Sets the provider_class of this EgressProvider.


        :param provider_class: The provider_class of this EgressProvider.  # noqa: E501
        :type: ProviderClass
        """

        self._provider_class = provider_class

    @property
    def provider_type(self):
        """Gets the provider_type of this EgressProvider.


        :return: The provider_type of this EgressProvider.
        :rtype: ProviderType
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this EgressProvider.


        :param provider_type: The provider_type of this EgressProvider.  # noqa: E501
        :type: ProviderType
        """

        self._provider_type = provider_type

    @property
    def config(self):
        """Gets the config of this EgressProvider.


        :return: The config of this EgressProvider.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this EgressProvider.


        :param config: The config of this EgressProvider.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def modified(self):
        """Gets the modified of this EgressProvider.


        :return: The modified of this EgressProvider.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this EgressProvider.


        :param modified: The modified of this EgressProvider.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def created(self):
        """Gets the created of this EgressProvider.


        :return: The created of this EgressProvider.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EgressProvider.


        :param created: The created of this EgressProvider.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def deleted(self):
        """Gets the deleted of this EgressProvider.


        :return: The deleted of this EgressProvider.
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this EgressProvider.


        :param deleted: The deleted of this EgressProvider.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def access_type(self):
        """Gets the access_type of this EgressProvider.


        :return: The access_type of this EgressProvider.
        :rtype: ProviderAccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this EgressProvider.


        :param access_type: The access_type of this EgressProvider.  # noqa: E501
        :type: ProviderAccessType
        """

        self._access_type = access_type


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EgressProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
