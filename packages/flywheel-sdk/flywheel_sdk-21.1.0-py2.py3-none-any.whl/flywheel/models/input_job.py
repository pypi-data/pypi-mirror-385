# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.container_reference import ContainerReference  # noqa: F401,E501
from flywheel.models.job_parents import JobParents  # noqa: F401,E501
from flywheel.models.origin import Origin  # noqa: F401,E501

from .mixins import JobMixin
class InputJob(JobMixin):

    swagger_types = {
        'attempt': 'int',
        'priority': 'JobPriority',
        'batch': 'str',
        'origin': 'Origin',
        'compute_provider_id': 'str',
        'destination': 'ContainerReference',
        'gear_id': 'str',
        'role_id': 'str',
        'inputs': 'dict(str, union[FileReference,FileVersion])',
        'parents': 'JobParents',
        'label': 'str',
        'previous_job_id': 'str',
        'tags': 'list[str]',
        'config': 'object'
    }

    attribute_map = {
        'attempt': 'attempt',
        'priority': 'priority',
        'batch': 'batch',
        'origin': 'origin',
        'compute_provider_id': 'compute_provider_id',
        'destination': 'destination',
        'gear_id': 'gear_id',
        'role_id': 'role_id',
        'inputs': 'inputs',
        'parents': 'parents',
        'label': 'label',
        'previous_job_id': 'previous_job_id',
        'tags': 'tags',
        'config': 'config'
    }

    rattribute_map = {
        'attempt': 'attempt',
        'priority': 'priority',
        'batch': 'batch',
        'origin': 'origin',
        'compute_provider_id': 'compute_provider_id',
        'destination': 'destination',
        'gear_id': 'gear_id',
        'role_id': 'role_id',
        'inputs': 'inputs',
        'parents': 'parents',
        'label': 'label',
        'previous_job_id': 'previous_job_id',
        'tags': 'tags',
        'config': 'config'
    }

    def __init__(self, attempt=1, priority=None, batch=None, origin=None, compute_provider_id=None, destination=None, gear_id=None, role_id=None, inputs=None, parents=None, label='', previous_job_id=None, tags=None, config=None):  # noqa: E501
        """InputJob - a model defined in Swagger"""
        super(InputJob, self).__init__()

        self._attempt = None
        self._priority = None
        self._batch = None
        self._origin = None
        self._compute_provider_id = None
        self._destination = None
        self._gear_id = None
        self._role_id = None
        self._inputs = None
        self._parents = None
        self._label = None
        self._previous_job_id = None
        self._tags = None
        self._config = None
        self.discriminator = None
        self.alt_discriminator = None

        if attempt is not None:
            self.attempt = attempt
        if priority is not None:
            self.priority = priority
        if batch is not None:
            self.batch = batch
        if origin is not None:
            self.origin = origin
        if compute_provider_id is not None:
            self.compute_provider_id = compute_provider_id
        if destination is not None:
            self.destination = destination
        self.gear_id = gear_id
        if role_id is not None:
            self.role_id = role_id
        if inputs is not None:
            self.inputs = inputs
        if parents is not None:
            self.parents = parents
        if label is not None:
            self.label = label
        if previous_job_id is not None:
            self.previous_job_id = previous_job_id
        if tags is not None:
            self.tags = tags
        if config is not None:
            self.config = config

    @property
    def attempt(self):
        """Gets the attempt of this InputJob.


        :return: The attempt of this InputJob.
        :rtype: int
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this InputJob.


        :param attempt: The attempt of this InputJob.  # noqa: E501
        :type: int
        """

        self._attempt = attempt

    @property
    def priority(self):
        """Gets the priority of this InputJob.


        :return: The priority of this InputJob.
        :rtype: JobPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InputJob.


        :param priority: The priority of this InputJob.  # noqa: E501
        :type: JobPriority
        """

        self._priority = priority

    @property
    def batch(self):
        """Gets the batch of this InputJob.


        :return: The batch of this InputJob.
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this InputJob.


        :param batch: The batch of this InputJob.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def origin(self):
        """Gets the origin of this InputJob.


        :return: The origin of this InputJob.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this InputJob.


        :param origin: The origin of this InputJob.  # noqa: E501
        :type: Origin
        """

        self._origin = origin

    @property
    def compute_provider_id(self):
        """Gets the compute_provider_id of this InputJob.


        :return: The compute_provider_id of this InputJob.
        :rtype: str
        """
        return self._compute_provider_id

    @compute_provider_id.setter
    def compute_provider_id(self, compute_provider_id):
        """Sets the compute_provider_id of this InputJob.


        :param compute_provider_id: The compute_provider_id of this InputJob.  # noqa: E501
        :type: str
        """

        self._compute_provider_id = compute_provider_id

    @property
    def destination(self):
        """Gets the destination of this InputJob.


        :return: The destination of this InputJob.
        :rtype: ContainerReference
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this InputJob.


        :param destination: The destination of this InputJob.  # noqa: E501
        :type: ContainerReference
        """

        self._destination = destination

    @property
    def gear_id(self):
        """Gets the gear_id of this InputJob.


        :return: The gear_id of this InputJob.
        :rtype: str
        """
        return self._gear_id

    @gear_id.setter
    def gear_id(self, gear_id):
        """Sets the gear_id of this InputJob.


        :param gear_id: The gear_id of this InputJob.  # noqa: E501
        :type: str
        """

        self._gear_id = gear_id

    @property
    def role_id(self):
        """Gets the role_id of this InputJob.


        :return: The role_id of this InputJob.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this InputJob.


        :param role_id: The role_id of this InputJob.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def inputs(self):
        """Gets the inputs of this InputJob.


        :return: The inputs of this InputJob.
        :rtype: dict(str, union[FileReference,FileVersion])
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this InputJob.


        :param inputs: The inputs of this InputJob.  # noqa: E501
        :type: dict(str, union[FileReference,FileVersion])
        """

        self._inputs = inputs

    @property
    def parents(self):
        """Gets the parents of this InputJob.


        :return: The parents of this InputJob.
        :rtype: JobParents
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this InputJob.


        :param parents: The parents of this InputJob.  # noqa: E501
        :type: JobParents
        """

        self._parents = parents

    @property
    def label(self):
        """Gets the label of this InputJob.


        :return: The label of this InputJob.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InputJob.


        :param label: The label of this InputJob.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def previous_job_id(self):
        """Gets the previous_job_id of this InputJob.


        :return: The previous_job_id of this InputJob.
        :rtype: str
        """
        return self._previous_job_id

    @previous_job_id.setter
    def previous_job_id(self, previous_job_id):
        """Sets the previous_job_id of this InputJob.


        :param previous_job_id: The previous_job_id of this InputJob.  # noqa: E501
        :type: str
        """

        self._previous_job_id = previous_job_id

    @property
    def tags(self):
        """Gets the tags of this InputJob.


        :return: The tags of this InputJob.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InputJob.


        :param tags: The tags of this InputJob.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def config(self):
        """Gets the config of this InputJob.


        :return: The config of this InputJob.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this InputJob.


        :param config: The config of this InputJob.  # noqa: E501
        :type: object
        """

        self._config = config


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InputJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
