# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.auth_out import AuthOut  # noqa: F401,E501
from flywheel.models.central_out import CentralOut  # noqa: F401,E501
from flywheel.models.site import Site  # noqa: F401,E501

class ConfigOut(object):

    swagger_types = {
        'last_updated': 'datetime',
        'site': 'Site',
        'features': 'Features',
        'wip_features': 'WorkInProgressFeatures',
        'signed_url': 'bool',
        'auth': 'AuthOut',
        'created': 'datetime',
        'modified': 'datetime',
        'central': 'CentralOut'
    }

    attribute_map = {
        'last_updated': 'last_updated',
        'site': 'site',
        'features': 'features',
        'wip_features': 'wip_features',
        'signed_url': 'signed_url',
        'auth': 'auth',
        'created': 'created',
        'modified': 'modified',
        'central': 'central'
    }

    rattribute_map = {
        'last_updated': 'last_updated',
        'site': 'site',
        'features': 'features',
        'wip_features': 'wip_features',
        'signed_url': 'signed_url',
        'auth': 'auth',
        'created': 'created',
        'modified': 'modified',
        'central': 'central'
    }

    def __init__(self, last_updated=None, site=None, features=None, wip_features=None, signed_url=False, auth=None, created=None, modified=None, central=None):  # noqa: E501
        """ConfigOut - a model defined in Swagger"""
        super(ConfigOut, self).__init__()

        self._last_updated = None
        self._site = None
        self._features = None
        self._wip_features = None
        self._signed_url = None
        self._auth = None
        self._created = None
        self._modified = None
        self._central = None
        self.discriminator = None
        self.alt_discriminator = None

        self.last_updated = last_updated
        self.site = site
        if features is not None:
            self.features = features
        if wip_features is not None:
            self.wip_features = wip_features
        if signed_url is not None:
            self.signed_url = signed_url
        self.auth = auth
        self.created = created
        self.modified = modified
        self.central = central

    @property
    def last_updated(self):
        """Gets the last_updated of this ConfigOut.


        :return: The last_updated of this ConfigOut.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ConfigOut.


        :param last_updated: The last_updated of this ConfigOut.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def site(self):
        """Gets the site of this ConfigOut.


        :return: The site of this ConfigOut.
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this ConfigOut.


        :param site: The site of this ConfigOut.  # noqa: E501
        :type: Site
        """

        self._site = site

    @property
    def features(self):
        """Gets the features of this ConfigOut.


        :return: The features of this ConfigOut.
        :rtype: Features
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ConfigOut.


        :param features: The features of this ConfigOut.  # noqa: E501
        :type: Features
        """

        self._features = features

    @property
    def wip_features(self):
        """Gets the wip_features of this ConfigOut.


        :return: The wip_features of this ConfigOut.
        :rtype: WorkInProgressFeatures
        """
        return self._wip_features

    @wip_features.setter
    def wip_features(self, wip_features):
        """Sets the wip_features of this ConfigOut.


        :param wip_features: The wip_features of this ConfigOut.  # noqa: E501
        :type: WorkInProgressFeatures
        """

        self._wip_features = wip_features

    @property
    def signed_url(self):
        """Gets the signed_url of this ConfigOut.


        :return: The signed_url of this ConfigOut.
        :rtype: bool
        """
        return self._signed_url

    @signed_url.setter
    def signed_url(self, signed_url):
        """Sets the signed_url of this ConfigOut.


        :param signed_url: The signed_url of this ConfigOut.  # noqa: E501
        :type: bool
        """

        self._signed_url = signed_url

    @property
    def auth(self):
        """Gets the auth of this ConfigOut.


        :return: The auth of this ConfigOut.
        :rtype: AuthOut
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this ConfigOut.


        :param auth: The auth of this ConfigOut.  # noqa: E501
        :type: AuthOut
        """

        self._auth = auth

    @property
    def created(self):
        """Gets the created of this ConfigOut.


        :return: The created of this ConfigOut.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConfigOut.


        :param created: The created of this ConfigOut.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this ConfigOut.


        :return: The modified of this ConfigOut.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ConfigOut.


        :param modified: The modified of this ConfigOut.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def central(self):
        """Gets the central of this ConfigOut.


        :return: The central of this ConfigOut.
        :rtype: CentralOut
        """
        return self._central

    @central.setter
    def central(self, central):
        """Sets the central of this ConfigOut.


        :param central: The central of this ConfigOut.  # noqa: E501
        :type: CentralOut
        """

        self._central = central


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
