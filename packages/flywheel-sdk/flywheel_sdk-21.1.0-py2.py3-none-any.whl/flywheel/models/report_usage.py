# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class ReportUsage(object):

    swagger_types = {
        'project_label': 'str',
        'group': 'str',
        'project': 'str',
        'session_count': 'int',
        'center_job_count': 'int',
        'group_job_count': 'int',
        'total_job_count': 'int',
        'center_compute_ms': 'int',
        'group_compute_ms': 'int',
        'total_compute_ms': 'int',
        'center_storage_byte_day': 'int',
        'center_storage_soft_deleted_byte_day': 'int',
        'group_storage_byte_day': 'int',
        'group_storage_soft_deleted_byte_day': 'int',
        'total_storage_byte_day': 'int',
        'total_storage_soft_deleted_byte_day': 'int',
        'days': 'int'
    }

    attribute_map = {
        'project_label': 'project_label',
        'group': 'group',
        'project': 'project',
        'session_count': 'session_count',
        'center_job_count': 'center_job_count',
        'group_job_count': 'group_job_count',
        'total_job_count': 'total_job_count',
        'center_compute_ms': 'center_compute_ms',
        'group_compute_ms': 'group_compute_ms',
        'total_compute_ms': 'total_compute_ms',
        'center_storage_byte_day': 'center_storage_byte_day',
        'center_storage_soft_deleted_byte_day': 'center_storage_soft_deleted_byte_day',
        'group_storage_byte_day': 'group_storage_byte_day',
        'group_storage_soft_deleted_byte_day': 'group_storage_soft_deleted_byte_day',
        'total_storage_byte_day': 'total_storage_byte_day',
        'total_storage_soft_deleted_byte_day': 'total_storage_soft_deleted_byte_day',
        'days': 'days'
    }

    rattribute_map = {
        'project_label': 'project_label',
        'group': 'group',
        'project': 'project',
        'session_count': 'session_count',
        'center_job_count': 'center_job_count',
        'group_job_count': 'group_job_count',
        'total_job_count': 'total_job_count',
        'center_compute_ms': 'center_compute_ms',
        'group_compute_ms': 'group_compute_ms',
        'total_compute_ms': 'total_compute_ms',
        'center_storage_byte_day': 'center_storage_byte_day',
        'center_storage_soft_deleted_byte_day': 'center_storage_soft_deleted_byte_day',
        'group_storage_byte_day': 'group_storage_byte_day',
        'group_storage_soft_deleted_byte_day': 'group_storage_soft_deleted_byte_day',
        'total_storage_byte_day': 'total_storage_byte_day',
        'total_storage_soft_deleted_byte_day': 'total_storage_soft_deleted_byte_day',
        'days': 'days'
    }

    def __init__(self, project_label=None, group='', project=None, session_count=0, center_job_count=0, group_job_count=0, total_job_count=0, center_compute_ms=0, group_compute_ms=0, total_compute_ms=0, center_storage_byte_day=0, center_storage_soft_deleted_byte_day=0, group_storage_byte_day=0, group_storage_soft_deleted_byte_day=0, total_storage_byte_day=0, total_storage_soft_deleted_byte_day=0, days=0):  # noqa: E501
        """ReportUsage - a model defined in Swagger"""
        super(ReportUsage, self).__init__()

        self._project_label = None
        self._group = None
        self._project = None
        self._session_count = None
        self._center_job_count = None
        self._group_job_count = None
        self._total_job_count = None
        self._center_compute_ms = None
        self._group_compute_ms = None
        self._total_compute_ms = None
        self._center_storage_byte_day = None
        self._center_storage_soft_deleted_byte_day = None
        self._group_storage_byte_day = None
        self._group_storage_soft_deleted_byte_day = None
        self._total_storage_byte_day = None
        self._total_storage_soft_deleted_byte_day = None
        self._days = None
        self.discriminator = None
        self.alt_discriminator = None

        if project_label is not None:
            self.project_label = project_label
        if group is not None:
            self.group = group
        if project is not None:
            self.project = project
        if session_count is not None:
            self.session_count = session_count
        if center_job_count is not None:
            self.center_job_count = center_job_count
        if group_job_count is not None:
            self.group_job_count = group_job_count
        if total_job_count is not None:
            self.total_job_count = total_job_count
        if center_compute_ms is not None:
            self.center_compute_ms = center_compute_ms
        if group_compute_ms is not None:
            self.group_compute_ms = group_compute_ms
        if total_compute_ms is not None:
            self.total_compute_ms = total_compute_ms
        if center_storage_byte_day is not None:
            self.center_storage_byte_day = center_storage_byte_day
        if center_storage_soft_deleted_byte_day is not None:
            self.center_storage_soft_deleted_byte_day = center_storage_soft_deleted_byte_day
        if group_storage_byte_day is not None:
            self.group_storage_byte_day = group_storage_byte_day
        if group_storage_soft_deleted_byte_day is not None:
            self.group_storage_soft_deleted_byte_day = group_storage_soft_deleted_byte_day
        if total_storage_byte_day is not None:
            self.total_storage_byte_day = total_storage_byte_day
        if total_storage_soft_deleted_byte_day is not None:
            self.total_storage_soft_deleted_byte_day = total_storage_soft_deleted_byte_day
        if days is not None:
            self.days = days

    @property
    def project_label(self):
        """Gets the project_label of this ReportUsage.

        The project label

        :return: The project_label of this ReportUsage.
        :rtype: str
        """
        return self._project_label

    @project_label.setter
    def project_label(self, project_label):
        """Sets the project_label of this ReportUsage.

        The project label

        :param project_label: The project_label of this ReportUsage.  # noqa: E501
        :type: str
        """

        self._project_label = project_label

    @property
    def group(self):
        """Gets the group of this ReportUsage.

        The group name/ID

        :return: The group of this ReportUsage.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ReportUsage.

        The group name/ID

        :param group: The group of this ReportUsage.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def project(self):
        """Gets the project of this ReportUsage.

        The project ID

        :return: The project of this ReportUsage.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ReportUsage.

        The project ID

        :param project: The project of this ReportUsage.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def session_count(self):
        """Gets the session_count of this ReportUsage.

        The number of sessions in the project on the last recorded day of the month

        :return: The session_count of this ReportUsage.
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this ReportUsage.

        The number of sessions in the project on the last recorded day of the month

        :param session_count: The session_count of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._session_count = session_count

    @property
    def center_job_count(self):
        """Gets the center_job_count of this ReportUsage.

        The number of center-designated gear jobs run in this project during the month (billable to the center)

        :return: The center_job_count of this ReportUsage.
        :rtype: int
        """
        return self._center_job_count

    @center_job_count.setter
    def center_job_count(self, center_job_count):
        """Sets the center_job_count of this ReportUsage.

        The number of center-designated gear jobs run in this project during the month (billable to the center)

        :param center_job_count: The center_job_count of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._center_job_count = center_job_count

    @property
    def group_job_count(self):
        """Gets the group_job_count of this ReportUsage.

        The number of non-center-designated (lab) gear jobs runin this project during the month (billable to the group)

        :return: The group_job_count of this ReportUsage.
        :rtype: int
        """
        return self._group_job_count

    @group_job_count.setter
    def group_job_count(self, group_job_count):
        """Sets the group_job_count of this ReportUsage.

        The number of non-center-designated (lab) gear jobs runin this project during the month (billable to the group)

        :param group_job_count: The group_job_count of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._group_job_count = group_job_count

    @property
    def total_job_count(self):
        """Gets the total_job_count of this ReportUsage.

        The total number of gear jobs run in this project during the month

        :return: The total_job_count of this ReportUsage.
        :rtype: int
        """
        return self._total_job_count

    @total_job_count.setter
    def total_job_count(self, total_job_count):
        """Sets the total_job_count of this ReportUsage.

        The total number of gear jobs run in this project during the month

        :param total_job_count: The total_job_count of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._total_job_count = total_job_count

    @property
    def center_compute_ms(self):
        """Gets the center_compute_ms of this ReportUsage.

        The compute time (in ms) used by center-designated jobs in this project during the month (billable to the center)

        :return: The center_compute_ms of this ReportUsage.
        :rtype: int
        """
        return self._center_compute_ms

    @center_compute_ms.setter
    def center_compute_ms(self, center_compute_ms):
        """Sets the center_compute_ms of this ReportUsage.

        The compute time (in ms) used by center-designated jobs in this project during the month (billable to the center)

        :param center_compute_ms: The center_compute_ms of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._center_compute_ms = center_compute_ms

    @property
    def group_compute_ms(self):
        """Gets the group_compute_ms of this ReportUsage.

        The compute time (in ms) used by non-center-designated (lab) gear jobs in this project during the month (billable to the group)

        :return: The group_compute_ms of this ReportUsage.
        :rtype: int
        """
        return self._group_compute_ms

    @group_compute_ms.setter
    def group_compute_ms(self, group_compute_ms):
        """Sets the group_compute_ms of this ReportUsage.

        The compute time (in ms) used by non-center-designated (lab) gear jobs in this project during the month (billable to the group)

        :param group_compute_ms: The group_compute_ms of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._group_compute_ms = group_compute_ms

    @property
    def total_compute_ms(self):
        """Gets the total_compute_ms of this ReportUsage.

        The total compute time (in ms) used by gear jobs in this project during the month

        :return: The total_compute_ms of this ReportUsage.
        :rtype: int
        """
        return self._total_compute_ms

    @total_compute_ms.setter
    def total_compute_ms(self, total_compute_ms):
        """Sets the total_compute_ms of this ReportUsage.

        The total compute time (in ms) used by gear jobs in this project during the month

        :param total_compute_ms: The total_compute_ms of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._total_compute_ms = total_compute_ms

    @property
    def center_storage_byte_day(self):
        """Gets the center_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files originating from devices or center-designated gears in this project during the month (billable to the center)

        :return: The center_storage_byte_day of this ReportUsage.
        :rtype: int
        """
        return self._center_storage_byte_day

    @center_storage_byte_day.setter
    def center_storage_byte_day(self, center_storage_byte_day):
        """Sets the center_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files originating from devices or center-designated gears in this project during the month (billable to the center)

        :param center_storage_byte_day: The center_storage_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._center_storage_byte_day = center_storage_byte_day

    @property
    def center_storage_soft_deleted_byte_day(self):
        """Gets the center_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files originating from devices or center-designated gears in this project during the month (billable to the center)

        :return: The center_storage_soft_deleted_byte_day of this ReportUsage.
        :rtype: int
        """
        return self._center_storage_soft_deleted_byte_day

    @center_storage_soft_deleted_byte_day.setter
    def center_storage_soft_deleted_byte_day(self, center_storage_soft_deleted_byte_day):
        """Sets the center_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files originating from devices or center-designated gears in this project during the month (billable to the center)

        :param center_storage_soft_deleted_byte_day: The center_storage_soft_deleted_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._center_storage_soft_deleted_byte_day = center_storage_soft_deleted_byte_day

    @property
    def group_storage_byte_day(self):
        """Gets the group_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :return: The group_storage_byte_day of this ReportUsage.
        :rtype: int
        """
        return self._group_storage_byte_day

    @group_storage_byte_day.setter
    def group_storage_byte_day(self, group_storage_byte_day):
        """Sets the group_storage_byte_day of this ReportUsage.

        The storage, in byte-days, used by files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :param group_storage_byte_day: The group_storage_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._group_storage_byte_day = group_storage_byte_day

    @property
    def group_storage_soft_deleted_byte_day(self):
        """Gets the group_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :return: The group_storage_soft_deleted_byte_day of this ReportUsage.
        :rtype: int
        """
        return self._group_storage_soft_deleted_byte_day

    @group_storage_soft_deleted_byte_day.setter
    def group_storage_soft_deleted_byte_day(self, group_storage_soft_deleted_byte_day):
        """Sets the group_storage_soft_deleted_byte_day of this ReportUsage.

        The storage, in byte-days, used by soft deleted files not originating from devices or non-center-designated (lab) gears in this project during the month (billable to the group)

        :param group_storage_soft_deleted_byte_day: The group_storage_soft_deleted_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._group_storage_soft_deleted_byte_day = group_storage_soft_deleted_byte_day

    @property
    def total_storage_byte_day(self):
        """Gets the total_storage_byte_day of this ReportUsage.

        The total storage, in byte-days, used by files in this project during the month

        :return: The total_storage_byte_day of this ReportUsage.
        :rtype: int
        """
        return self._total_storage_byte_day

    @total_storage_byte_day.setter
    def total_storage_byte_day(self, total_storage_byte_day):
        """Sets the total_storage_byte_day of this ReportUsage.

        The total storage, in byte-days, used by files in this project during the month

        :param total_storage_byte_day: The total_storage_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._total_storage_byte_day = total_storage_byte_day

    @property
    def total_storage_soft_deleted_byte_day(self):
        """Gets the total_storage_soft_deleted_byte_day of this ReportUsage.

        The total storage, in byte-days, used by soft deleted files in this project during the month

        :return: The total_storage_soft_deleted_byte_day of this ReportUsage.
        :rtype: int
        """
        return self._total_storage_soft_deleted_byte_day

    @total_storage_soft_deleted_byte_day.setter
    def total_storage_soft_deleted_byte_day(self, total_storage_soft_deleted_byte_day):
        """Sets the total_storage_soft_deleted_byte_day of this ReportUsage.

        The total storage, in byte-days, used by soft deleted files in this project during the month

        :param total_storage_soft_deleted_byte_day: The total_storage_soft_deleted_byte_day of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._total_storage_soft_deleted_byte_day = total_storage_soft_deleted_byte_day

    @property
    def days(self):
        """Gets the days of this ReportUsage.

        Number of days captured in this entry (normally the number of days in the month, unless the project was created in that month or it is the current month)

        :return: The days of this ReportUsage.
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this ReportUsage.

        Number of days captured in this entry (normally the number of days in the month, unless the project was created in that month or it is the current month)

        :param days: The days of this ReportUsage.  # noqa: E501
        :type: int
        """

        self._days = days


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
