# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.origin import Origin  # noqa: F401,E501
from flywheel.models.viewer_app_type import ViewerAppType  # noqa: F401,E501

class ViewerAppInput(object):

    swagger_types = {
        'id': 'str',
        'type': 'ViewerAppType',
        'name': 'str',
        'description': 'str',
        'url': 'str',
        'origin': 'Origin',
        'options': 'object',
        'files': 'object',
        'containers': 'object'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'url': 'url',
        'origin': 'origin',
        'options': 'options',
        'files': 'files',
        'containers': 'containers'
    }

    rattribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'url': 'url',
        'origin': 'origin',
        'options': 'options',
        'files': 'files',
        'containers': 'containers'
    }

    def __init__(self, id=None, type=None, name=None, description=None, url=None, origin=None, options=None, files=None, containers=None):  # noqa: E501
        """ViewerAppInput - a model defined in Swagger"""
        super(ViewerAppInput, self).__init__()

        self._id = None
        self._type = None
        self._name = None
        self._description = None
        self._url = None
        self._origin = None
        self._options = None
        self._files = None
        self._containers = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        self.name = name
        if description is not None:
            self.description = description
        self.url = url
        if origin is not None:
            self.origin = origin
        if options is not None:
            self.options = options
        if files is not None:
            self.files = files
        if containers is not None:
            self.containers = containers

    @property
    def id(self):
        """Gets the id of this ViewerAppInput.


        :return: The id of this ViewerAppInput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ViewerAppInput.


        :param id: The id of this ViewerAppInput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ViewerAppInput.


        :return: The type of this ViewerAppInput.
        :rtype: ViewerAppType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ViewerAppInput.


        :param type: The type of this ViewerAppInput.  # noqa: E501
        :type: ViewerAppType
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this ViewerAppInput.


        :return: The name of this ViewerAppInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ViewerAppInput.


        :param name: The name of this ViewerAppInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ViewerAppInput.


        :return: The description of this ViewerAppInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ViewerAppInput.


        :param description: The description of this ViewerAppInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this ViewerAppInput.


        :return: The url of this ViewerAppInput.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ViewerAppInput.


        :param url: The url of this ViewerAppInput.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def origin(self):
        """Gets the origin of this ViewerAppInput.


        :return: The origin of this ViewerAppInput.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ViewerAppInput.


        :param origin: The origin of this ViewerAppInput.  # noqa: E501
        :type: Origin
        """

        self._origin = origin

    @property
    def options(self):
        """Gets the options of this ViewerAppInput.


        :return: The options of this ViewerAppInput.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ViewerAppInput.


        :param options: The options of this ViewerAppInput.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def files(self):
        """Gets the files of this ViewerAppInput.


        :return: The files of this ViewerAppInput.
        :rtype: object
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ViewerAppInput.


        :param files: The files of this ViewerAppInput.  # noqa: E501
        :type: object
        """

        self._files = files

    @property
    def containers(self):
        """Gets the containers of this ViewerAppInput.


        :return: The containers of this ViewerAppInput.
        :rtype: object
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ViewerAppInput.


        :param containers: The containers of this ViewerAppInput.  # noqa: E501
        :type: object
        """

        self._containers = containers


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewerAppInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
