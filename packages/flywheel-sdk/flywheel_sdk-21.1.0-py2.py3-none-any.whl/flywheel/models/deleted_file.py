# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.container_reference import ContainerReference  # noqa: F401,E501
from flywheel.models.cvat_info import CVATInfo  # noqa: F401,E501
from flywheel.models.file_parents import FileParents  # noqa: F401,E501
from flywheel.models.file_version import FileVersion  # noqa: F401,E501
from flywheel.models.file_version_copy_of import FileVersionCopyOf  # noqa: F401,E501
from flywheel.models.origin import Origin  # noqa: F401,E501

class DeletedFile(object):

    swagger_types = {
        'id': 'FileVersion',
        'origin': 'Origin',
        'parent_ref': 'ContainerReference',
        'name': 'str',
        'provider_id': 'str',
        'uuid': 'str',
        'size': 'int',
        'copy_of': 'FileVersionCopyOf',
        'cvat': 'CVATInfo',
        'parents': 'FileParents',
        'created': 'datetime',
        'deleted': 'datetime',
        'replaced': 'datetime',
        'hard_deleted': 'datetime'
    }

    attribute_map = {
        'id': '_id',
        'origin': 'origin',
        'parent_ref': 'parent_ref',
        'name': 'name',
        'provider_id': 'provider_id',
        'uuid': 'uuid',
        'size': 'size',
        'copy_of': 'copy_of',
        'cvat': 'cvat',
        'parents': 'parents',
        'created': 'created',
        'deleted': 'deleted',
        'replaced': 'replaced',
        'hard_deleted': 'hard_deleted'
    }

    rattribute_map = {
        '_id': 'id',
        'origin': 'origin',
        'parent_ref': 'parent_ref',
        'name': 'name',
        'provider_id': 'provider_id',
        'uuid': 'uuid',
        'size': 'size',
        'copy_of': 'copy_of',
        'cvat': 'cvat',
        'parents': 'parents',
        'created': 'created',
        'deleted': 'deleted',
        'replaced': 'replaced',
        'hard_deleted': 'hard_deleted'
    }

    def __init__(self, id=None, origin=None, parent_ref=None, name=None, provider_id=None, uuid=None, size=None, copy_of=None, cvat=None, parents=None, created=None, deleted=None, replaced=None, hard_deleted=None):  # noqa: E501
        """DeletedFile - a model defined in Swagger"""
        super(DeletedFile, self).__init__()

        self._id = None
        self._origin = None
        self._parent_ref = None
        self._name = None
        self._provider_id = None
        self._uuid = None
        self._size = None
        self._copy_of = None
        self._cvat = None
        self._parents = None
        self._created = None
        self._deleted = None
        self._replaced = None
        self._hard_deleted = None
        self.discriminator = None
        self.alt_discriminator = None

        self.id = id
        self.origin = origin
        self.parent_ref = parent_ref
        self.name = name
        self.provider_id = provider_id
        self.uuid = uuid
        self.size = size
        if copy_of is not None:
            self.copy_of = copy_of
        if cvat is not None:
            self.cvat = cvat
        if parents is not None:
            self.parents = parents
        self.created = created
        self.deleted = deleted
        if replaced is not None:
            self.replaced = replaced
        if hard_deleted is not None:
            self.hard_deleted = hard_deleted

    @property
    def id(self):
        """Gets the id of this DeletedFile.


        :return: The id of this DeletedFile.
        :rtype: FileVersion
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeletedFile.


        :param id: The id of this DeletedFile.  # noqa: E501
        :type: FileVersion
        """

        self._id = id

    @property
    def origin(self):
        """Gets the origin of this DeletedFile.


        :return: The origin of this DeletedFile.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this DeletedFile.


        :param origin: The origin of this DeletedFile.  # noqa: E501
        :type: Origin
        """

        self._origin = origin

    @property
    def parent_ref(self):
        """Gets the parent_ref of this DeletedFile.


        :return: The parent_ref of this DeletedFile.
        :rtype: ContainerReference
        """
        return self._parent_ref

    @parent_ref.setter
    def parent_ref(self, parent_ref):
        """Sets the parent_ref of this DeletedFile.


        :param parent_ref: The parent_ref of this DeletedFile.  # noqa: E501
        :type: ContainerReference
        """

        self._parent_ref = parent_ref

    @property
    def name(self):
        """Gets the name of this DeletedFile.


        :return: The name of this DeletedFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeletedFile.


        :param name: The name of this DeletedFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider_id(self):
        """Gets the provider_id of this DeletedFile.


        :return: The provider_id of this DeletedFile.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this DeletedFile.


        :param provider_id: The provider_id of this DeletedFile.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def uuid(self):
        """Gets the uuid of this DeletedFile.


        :return: The uuid of this DeletedFile.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeletedFile.


        :param uuid: The uuid of this DeletedFile.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def size(self):
        """Gets the size of this DeletedFile.


        :return: The size of this DeletedFile.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DeletedFile.


        :param size: The size of this DeletedFile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def copy_of(self):
        """Gets the copy_of of this DeletedFile.


        :return: The copy_of of this DeletedFile.
        :rtype: FileVersionCopyOf
        """
        return self._copy_of

    @copy_of.setter
    def copy_of(self, copy_of):
        """Sets the copy_of of this DeletedFile.


        :param copy_of: The copy_of of this DeletedFile.  # noqa: E501
        :type: FileVersionCopyOf
        """

        self._copy_of = copy_of

    @property
    def cvat(self):
        """Gets the cvat of this DeletedFile.


        :return: The cvat of this DeletedFile.
        :rtype: CVATInfo
        """
        return self._cvat

    @cvat.setter
    def cvat(self, cvat):
        """Sets the cvat of this DeletedFile.


        :param cvat: The cvat of this DeletedFile.  # noqa: E501
        :type: CVATInfo
        """

        self._cvat = cvat

    @property
    def parents(self):
        """Gets the parents of this DeletedFile.


        :return: The parents of this DeletedFile.
        :rtype: FileParents
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this DeletedFile.


        :param parents: The parents of this DeletedFile.  # noqa: E501
        :type: FileParents
        """

        self._parents = parents

    @property
    def created(self):
        """Gets the created of this DeletedFile.


        :return: The created of this DeletedFile.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DeletedFile.


        :param created: The created of this DeletedFile.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def deleted(self):
        """Gets the deleted of this DeletedFile.


        :return: The deleted of this DeletedFile.
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this DeletedFile.


        :param deleted: The deleted of this DeletedFile.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def replaced(self):
        """Gets the replaced of this DeletedFile.


        :return: The replaced of this DeletedFile.
        :rtype: datetime
        """
        return self._replaced

    @replaced.setter
    def replaced(self, replaced):
        """Sets the replaced of this DeletedFile.


        :param replaced: The replaced of this DeletedFile.  # noqa: E501
        :type: datetime
        """

        self._replaced = replaced

    @property
    def hard_deleted(self):
        """Gets the hard_deleted of this DeletedFile.


        :return: The hard_deleted of this DeletedFile.
        :rtype: datetime
        """
        return self._hard_deleted

    @hard_deleted.setter
    def hard_deleted(self, hard_deleted):
        """Sets the hard_deleted of this DeletedFile.


        :param hard_deleted: The hard_deleted of this DeletedFile.  # noqa: E501
        :type: datetime
        """

        self._hard_deleted = hard_deleted


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeletedFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
