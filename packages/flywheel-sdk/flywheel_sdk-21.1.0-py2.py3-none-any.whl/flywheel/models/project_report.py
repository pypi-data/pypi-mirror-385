# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class ProjectReport(object):

    swagger_types = {
        'name': 'str',
        'group_name': 'str',
        'admins': 'list[object]',
        'session_count': 'int',
        'subjects_count': 'int',
        'female_count': 'int',
        'male_count': 'int',
        'other_count': 'int',
        'demographics_grid': 'object',
        'demographics_total': 'int',
        'over_18_count': 'int',
        'under_18_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'group_name': 'group_name',
        'admins': 'admins',
        'session_count': 'session_count',
        'subjects_count': 'subjects_count',
        'female_count': 'female_count',
        'male_count': 'male_count',
        'other_count': 'other_count',
        'demographics_grid': 'demographics_grid',
        'demographics_total': 'demographics_total',
        'over_18_count': 'over_18_count',
        'under_18_count': 'under_18_count'
    }

    rattribute_map = {
        'name': 'name',
        'group_name': 'group_name',
        'admins': 'admins',
        'session_count': 'session_count',
        'subjects_count': 'subjects_count',
        'female_count': 'female_count',
        'male_count': 'male_count',
        'other_count': 'other_count',
        'demographics_grid': 'demographics_grid',
        'demographics_total': 'demographics_total',
        'over_18_count': 'over_18_count',
        'under_18_count': 'under_18_count'
    }

    def __init__(self, name='', group_name='', admins=None, session_count=0, subjects_count=0, female_count=0, male_count=0, other_count=0, demographics_grid=None, demographics_total=0, over_18_count=0, under_18_count=0):  # noqa: E501
        """ProjectReport - a model defined in Swagger"""
        super(ProjectReport, self).__init__()

        self._name = None
        self._group_name = None
        self._admins = None
        self._session_count = None
        self._subjects_count = None
        self._female_count = None
        self._male_count = None
        self._other_count = None
        self._demographics_grid = None
        self._demographics_total = None
        self._over_18_count = None
        self._under_18_count = None
        self.discriminator = None
        self.alt_discriminator = None

        if name is not None:
            self.name = name
        if group_name is not None:
            self.group_name = group_name
        if admins is not None:
            self.admins = admins
        if session_count is not None:
            self.session_count = session_count
        if subjects_count is not None:
            self.subjects_count = subjects_count
        if female_count is not None:
            self.female_count = female_count
        if male_count is not None:
            self.male_count = male_count
        if other_count is not None:
            self.other_count = other_count
        if demographics_grid is not None:
            self.demographics_grid = demographics_grid
        if demographics_total is not None:
            self.demographics_total = demographics_total
        if over_18_count is not None:
            self.over_18_count = over_18_count
        if under_18_count is not None:
            self.under_18_count = under_18_count

    @property
    def name(self):
        """Gets the name of this ProjectReport.

        Application-specific label

        :return: The name of this ProjectReport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectReport.

        Application-specific label

        :param name: The name of this ProjectReport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group_name(self):
        """Gets the group_name of this ProjectReport.


        :return: The group_name of this ProjectReport.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ProjectReport.


        :param group_name: The group_name of this ProjectReport.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def admins(self):
        """Gets the admins of this ProjectReport.


        :return: The admins of this ProjectReport.
        :rtype: list[object]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this ProjectReport.


        :param admins: The admins of this ProjectReport.  # noqa: E501
        :type: list[object]
        """

        self._admins = admins

    @property
    def session_count(self):
        """Gets the session_count of this ProjectReport.


        :return: The session_count of this ProjectReport.
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this ProjectReport.


        :param session_count: The session_count of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._session_count = session_count

    @property
    def subjects_count(self):
        """Gets the subjects_count of this ProjectReport.


        :return: The subjects_count of this ProjectReport.
        :rtype: int
        """
        return self._subjects_count

    @subjects_count.setter
    def subjects_count(self, subjects_count):
        """Sets the subjects_count of this ProjectReport.


        :param subjects_count: The subjects_count of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._subjects_count = subjects_count

    @property
    def female_count(self):
        """Gets the female_count of this ProjectReport.


        :return: The female_count of this ProjectReport.
        :rtype: int
        """
        return self._female_count

    @female_count.setter
    def female_count(self, female_count):
        """Sets the female_count of this ProjectReport.


        :param female_count: The female_count of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._female_count = female_count

    @property
    def male_count(self):
        """Gets the male_count of this ProjectReport.


        :return: The male_count of this ProjectReport.
        :rtype: int
        """
        return self._male_count

    @male_count.setter
    def male_count(self, male_count):
        """Sets the male_count of this ProjectReport.


        :param male_count: The male_count of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._male_count = male_count

    @property
    def other_count(self):
        """Gets the other_count of this ProjectReport.


        :return: The other_count of this ProjectReport.
        :rtype: int
        """
        return self._other_count

    @other_count.setter
    def other_count(self, other_count):
        """Sets the other_count of this ProjectReport.


        :param other_count: The other_count of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._other_count = other_count

    @property
    def demographics_grid(self):
        """Gets the demographics_grid of this ProjectReport.


        :return: The demographics_grid of this ProjectReport.
        :rtype: object
        """
        return self._demographics_grid

    @demographics_grid.setter
    def demographics_grid(self, demographics_grid):
        """Sets the demographics_grid of this ProjectReport.


        :param demographics_grid: The demographics_grid of this ProjectReport.  # noqa: E501
        :type: object
        """

        self._demographics_grid = demographics_grid

    @property
    def demographics_total(self):
        """Gets the demographics_total of this ProjectReport.


        :return: The demographics_total of this ProjectReport.
        :rtype: int
        """
        return self._demographics_total

    @demographics_total.setter
    def demographics_total(self, demographics_total):
        """Sets the demographics_total of this ProjectReport.


        :param demographics_total: The demographics_total of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._demographics_total = demographics_total

    @property
    def over_18_count(self):
        """Gets the over_18_count of this ProjectReport.


        :return: The over_18_count of this ProjectReport.
        :rtype: int
        """
        return self._over_18_count

    @over_18_count.setter
    def over_18_count(self, over_18_count):
        """Sets the over_18_count of this ProjectReport.


        :param over_18_count: The over_18_count of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._over_18_count = over_18_count

    @property
    def under_18_count(self):
        """Gets the under_18_count of this ProjectReport.


        :return: The under_18_count of this ProjectReport.
        :rtype: int
        """
        return self._under_18_count

    @under_18_count.setter
    def under_18_count(self, under_18_count):
        """Sets the under_18_count of this ProjectReport.


        :param under_18_count: The under_18_count of this ProjectReport.  # noqa: E501
        :type: int
        """

        self._under_18_count = under_18_count


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
