# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.copy_status import CopyStatus  # noqa: F401,E501
from flywheel.models.edition import Edition  # noqa: F401,E501
from flywheel.models.ldap_sync_status import LdapSyncStatus  # noqa: F401,E501
from flywheel.models.providers import Providers  # noqa: F401,E501

class ProjectModify(object):

    swagger_types = {
        'label': 'str',
        'group': 'str',
        'description': 'str',
        'editions': 'Edition',
        'providers': 'Providers',
        'ldap_sync': 'LdapSyncStatus',
        'info': 'object',
        'copyable': 'bool',
        'copy_status': 'CopyStatus',
        'copy_failure_reason': 'str'
    }

    attribute_map = {
        'label': 'label',
        'group': 'group',
        'description': 'description',
        'editions': 'editions',
        'providers': 'providers',
        'ldap_sync': 'ldap_sync',
        'info': 'info',
        'copyable': 'copyable',
        'copy_status': 'copy_status',
        'copy_failure_reason': 'copy_failure_reason'
    }

    rattribute_map = {
        'label': 'label',
        'group': 'group',
        'description': 'description',
        'editions': 'editions',
        'providers': 'providers',
        'ldap_sync': 'ldap_sync',
        'info': 'info',
        'copyable': 'copyable',
        'copy_status': 'copy_status',
        'copy_failure_reason': 'copy_failure_reason'
    }

    def __init__(self, label=None, group=None, description=None, editions=None, providers=None, ldap_sync=None, info=None, copyable=None, copy_status=None, copy_failure_reason=None):  # noqa: E501
        """ProjectModify - a model defined in Swagger"""
        super(ProjectModify, self).__init__()

        self._label = None
        self._group = None
        self._description = None
        self._editions = None
        self._providers = None
        self._ldap_sync = None
        self._info = None
        self._copyable = None
        self._copy_status = None
        self._copy_failure_reason = None
        self.discriminator = None
        self.alt_discriminator = None

        if label is not None:
            self.label = label
        if group is not None:
            self.group = group
        if description is not None:
            self.description = description
        if editions is not None:
            self.editions = editions
        if providers is not None:
            self.providers = providers
        if ldap_sync is not None:
            self.ldap_sync = ldap_sync
        if info is not None:
            self.info = info
        if copyable is not None:
            self.copyable = copyable
        if copy_status is not None:
            self.copy_status = copy_status
        if copy_failure_reason is not None:
            self.copy_failure_reason = copy_failure_reason

    @property
    def label(self):
        """Gets the label of this ProjectModify.


        :return: The label of this ProjectModify.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ProjectModify.


        :param label: The label of this ProjectModify.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def group(self):
        """Gets the group of this ProjectModify.


        :return: The group of this ProjectModify.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ProjectModify.


        :param group: The group of this ProjectModify.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def description(self):
        """Gets the description of this ProjectModify.


        :return: The description of this ProjectModify.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectModify.


        :param description: The description of this ProjectModify.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def editions(self):
        """Gets the editions of this ProjectModify.


        :return: The editions of this ProjectModify.
        :rtype: Edition
        """
        return self._editions

    @editions.setter
    def editions(self, editions):
        """Sets the editions of this ProjectModify.


        :param editions: The editions of this ProjectModify.  # noqa: E501
        :type: Edition
        """

        self._editions = editions

    @property
    def providers(self):
        """Gets the providers of this ProjectModify.


        :return: The providers of this ProjectModify.
        :rtype: Providers
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this ProjectModify.


        :param providers: The providers of this ProjectModify.  # noqa: E501
        :type: Providers
        """

        self._providers = providers

    @property
    def ldap_sync(self):
        """Gets the ldap_sync of this ProjectModify.


        :return: The ldap_sync of this ProjectModify.
        :rtype: LdapSyncStatus
        """
        return self._ldap_sync

    @ldap_sync.setter
    def ldap_sync(self, ldap_sync):
        """Sets the ldap_sync of this ProjectModify.


        :param ldap_sync: The ldap_sync of this ProjectModify.  # noqa: E501
        :type: LdapSyncStatus
        """

        self._ldap_sync = ldap_sync

    @property
    def info(self):
        """Gets the info of this ProjectModify.


        :return: The info of this ProjectModify.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ProjectModify.


        :param info: The info of this ProjectModify.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def copyable(self):
        """Gets the copyable of this ProjectModify.


        :return: The copyable of this ProjectModify.
        :rtype: bool
        """
        return self._copyable

    @copyable.setter
    def copyable(self, copyable):
        """Sets the copyable of this ProjectModify.


        :param copyable: The copyable of this ProjectModify.  # noqa: E501
        :type: bool
        """

        self._copyable = copyable

    @property
    def copy_status(self):
        """Gets the copy_status of this ProjectModify.


        :return: The copy_status of this ProjectModify.
        :rtype: CopyStatus
        """
        return self._copy_status

    @copy_status.setter
    def copy_status(self, copy_status):
        """Sets the copy_status of this ProjectModify.


        :param copy_status: The copy_status of this ProjectModify.  # noqa: E501
        :type: CopyStatus
        """

        self._copy_status = copy_status

    @property
    def copy_failure_reason(self):
        """Gets the copy_failure_reason of this ProjectModify.


        :return: The copy_failure_reason of this ProjectModify.
        :rtype: str
        """
        return self._copy_failure_reason

    @copy_failure_reason.setter
    def copy_failure_reason(self, copy_failure_reason):
        """Sets the copy_failure_reason of this ProjectModify.


        :param copy_failure_reason: The copy_failure_reason of this ProjectModify.  # noqa: E501
        :type: str
        """

        self._copy_failure_reason = copy_failure_reason


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectModify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
