# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class StructuredQueryValueSuggestion(object):

    swagger_types = {
        'display': 'str',
        'value': 'str',
        'type': 'str',
        'facet': 'bool'
    }

    attribute_map = {
        'display': 'display',
        'value': 'value',
        'type': 'type',
        'facet': 'facet'
    }

    rattribute_map = {
        'display': 'display',
        'value': 'value',
        'type': 'type',
        'facet': 'facet'
    }

    def __init__(self, display=None, value=None, type=None, facet=None):  # noqa: E501
        """StructuredQueryValueSuggestion - a model defined in Swagger"""
        super(StructuredQueryValueSuggestion, self).__init__()

        self._display = None
        self._value = None
        self._type = None
        self._facet = None
        self.discriminator = None
        self.alt_discriminator = None

        self.display = display
        self.value = value
        if type is not None:
            self.type = type
        if facet is not None:
            self.facet = facet

    @property
    def display(self):
        """Gets the display of this StructuredQueryValueSuggestion.

        The display value of the suggestion

        :return: The display of this StructuredQueryValueSuggestion.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this StructuredQueryValueSuggestion.

        The display value of the suggestion

        :param display: The display of this StructuredQueryValueSuggestion.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def value(self):
        """Gets the value of this StructuredQueryValueSuggestion.

        The value to use for replacement

        :return: The value of this StructuredQueryValueSuggestion.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this StructuredQueryValueSuggestion.

        The value to use for replacement

        :param value: The value of this StructuredQueryValueSuggestion.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def type(self):
        """Gets the type of this StructuredQueryValueSuggestion.


        :return: The type of this StructuredQueryValueSuggestion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StructuredQueryValueSuggestion.


        :param type: The type of this StructuredQueryValueSuggestion.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def facet(self):
        """Gets the facet of this StructuredQueryValueSuggestion.


        :return: The facet of this StructuredQueryValueSuggestion.
        :rtype: bool
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this StructuredQueryValueSuggestion.


        :param facet: The facet of this StructuredQueryValueSuggestion.  # noqa: E501
        :type: bool
        """

        self._facet = facet


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructuredQueryValueSuggestion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
