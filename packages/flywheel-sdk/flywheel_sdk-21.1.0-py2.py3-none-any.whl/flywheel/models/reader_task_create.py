# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.assignee import Assignee  # noqa: F401,E501
from flywheel.models.libs_workflows_models_task_status import LibsWorkflowsModelsTaskStatus  # noqa: F401,E501
from flywheel.models.status_transitions import StatusTransitions  # noqa: F401,E501
from flywheel.models.task_parent_ref_input import TaskParentRefInput  # noqa: F401,E501
from flywheel.models.task_priority import TaskPriority  # noqa: F401,E501

class ReaderTaskCreate(object):

    swagger_types = {
        'type': 'str',
        'subcategory': 'str',
        'status': 'LibsWorkflowsModelsTaskStatus',
        'assignee': 'Assignee',
        'creator': 'str',
        'parent_ref': 'TaskParentRefInput',
        'staffing_pool': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'due_date': 'datetime',
        'description': 'str',
        'priority': 'TaskPriority',
        'protocol_id': 'str',
        'tags': 'list[str]',
        'transitions': 'StatusTransitions'
    }

    attribute_map = {
        'type': 'type',
        'subcategory': 'subcategory',
        'status': 'status',
        'assignee': 'assignee',
        'creator': 'creator',
        'parent_ref': 'parent_ref',
        'staffing_pool': 'staffing_pool',
        'created': 'created',
        'modified': 'modified',
        'due_date': 'due_date',
        'description': 'description',
        'priority': 'priority',
        'protocol_id': 'protocol_id',
        'tags': 'tags',
        'transitions': 'transitions'
    }

    rattribute_map = {
        'type': 'type',
        'subcategory': 'subcategory',
        'status': 'status',
        'assignee': 'assignee',
        'creator': 'creator',
        'parent_ref': 'parent_ref',
        'staffing_pool': 'staffing_pool',
        'created': 'created',
        'modified': 'modified',
        'due_date': 'due_date',
        'description': 'description',
        'priority': 'priority',
        'protocol_id': 'protocol_id',
        'tags': 'tags',
        'transitions': 'transitions'
    }

    def __init__(self, type='reader', subcategory=None, status=None, assignee=None, creator=None, parent_ref=None, staffing_pool=None, created=None, modified=None, due_date=None, description=None, priority=None, protocol_id=None, tags=None, transitions=None):  # noqa: E501
        """ReaderTaskCreate - a model defined in Swagger"""
        super(ReaderTaskCreate, self).__init__()

        self._type = None
        self._subcategory = None
        self._status = None
        self._assignee = None
        self._creator = None
        self._parent_ref = None
        self._staffing_pool = None
        self._created = None
        self._modified = None
        self._due_date = None
        self._description = None
        self._priority = None
        self._protocol_id = None
        self._tags = None
        self._transitions = None
        self.discriminator = None
        self.alt_discriminator = None

        if type is not None:
            self.type = type
        self.subcategory = subcategory
        self.status = status
        if assignee is not None:
            self.assignee = assignee
        if creator is not None:
            self.creator = creator
        self.parent_ref = parent_ref
        if staffing_pool is not None:
            self.staffing_pool = staffing_pool
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        self.due_date = due_date
        if description is not None:
            self.description = description
        self.priority = priority
        self.protocol_id = protocol_id
        if tags is not None:
            self.tags = tags
        if transitions is not None:
            self.transitions = transitions

    @property
    def type(self):
        """Gets the type of this ReaderTaskCreate.


        :return: The type of this ReaderTaskCreate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReaderTaskCreate.


        :param type: The type of this ReaderTaskCreate.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def subcategory(self):
        """Gets the subcategory of this ReaderTaskCreate.


        :return: The subcategory of this ReaderTaskCreate.
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this ReaderTaskCreate.


        :param subcategory: The subcategory of this ReaderTaskCreate.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def status(self):
        """Gets the status of this ReaderTaskCreate.


        :return: The status of this ReaderTaskCreate.
        :rtype: LibsWorkflowsModelsTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReaderTaskCreate.


        :param status: The status of this ReaderTaskCreate.  # noqa: E501
        :type: LibsWorkflowsModelsTaskStatus
        """

        self._status = status

    @property
    def assignee(self):
        """Gets the assignee of this ReaderTaskCreate.


        :return: The assignee of this ReaderTaskCreate.
        :rtype: Assignee
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this ReaderTaskCreate.


        :param assignee: The assignee of this ReaderTaskCreate.  # noqa: E501
        :type: Assignee
        """

        self._assignee = assignee

    @property
    def creator(self):
        """Gets the creator of this ReaderTaskCreate.


        :return: The creator of this ReaderTaskCreate.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ReaderTaskCreate.


        :param creator: The creator of this ReaderTaskCreate.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def parent_ref(self):
        """Gets the parent_ref of this ReaderTaskCreate.


        :return: The parent_ref of this ReaderTaskCreate.
        :rtype: TaskParentRefInput
        """
        return self._parent_ref

    @parent_ref.setter
    def parent_ref(self, parent_ref):
        """Sets the parent_ref of this ReaderTaskCreate.


        :param parent_ref: The parent_ref of this ReaderTaskCreate.  # noqa: E501
        :type: TaskParentRefInput
        """

        self._parent_ref = parent_ref

    @property
    def staffing_pool(self):
        """Gets the staffing_pool of this ReaderTaskCreate.


        :return: The staffing_pool of this ReaderTaskCreate.
        :rtype: str
        """
        return self._staffing_pool

    @staffing_pool.setter
    def staffing_pool(self, staffing_pool):
        """Sets the staffing_pool of this ReaderTaskCreate.


        :param staffing_pool: The staffing_pool of this ReaderTaskCreate.  # noqa: E501
        :type: str
        """

        self._staffing_pool = staffing_pool

    @property
    def created(self):
        """Gets the created of this ReaderTaskCreate.


        :return: The created of this ReaderTaskCreate.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ReaderTaskCreate.


        :param created: The created of this ReaderTaskCreate.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this ReaderTaskCreate.


        :return: The modified of this ReaderTaskCreate.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ReaderTaskCreate.


        :param modified: The modified of this ReaderTaskCreate.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def due_date(self):
        """Gets the due_date of this ReaderTaskCreate.


        :return: The due_date of this ReaderTaskCreate.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ReaderTaskCreate.


        :param due_date: The due_date of this ReaderTaskCreate.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def description(self):
        """Gets the description of this ReaderTaskCreate.


        :return: The description of this ReaderTaskCreate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReaderTaskCreate.


        :param description: The description of this ReaderTaskCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this ReaderTaskCreate.


        :return: The priority of this ReaderTaskCreate.
        :rtype: TaskPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ReaderTaskCreate.


        :param priority: The priority of this ReaderTaskCreate.  # noqa: E501
        :type: TaskPriority
        """

        self._priority = priority

    @property
    def protocol_id(self):
        """Gets the protocol_id of this ReaderTaskCreate.


        :return: The protocol_id of this ReaderTaskCreate.
        :rtype: str
        """
        return self._protocol_id

    @protocol_id.setter
    def protocol_id(self, protocol_id):
        """Sets the protocol_id of this ReaderTaskCreate.


        :param protocol_id: The protocol_id of this ReaderTaskCreate.  # noqa: E501
        :type: str
        """

        self._protocol_id = protocol_id

    @property
    def tags(self):
        """Gets the tags of this ReaderTaskCreate.


        :return: The tags of this ReaderTaskCreate.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReaderTaskCreate.


        :param tags: The tags of this ReaderTaskCreate.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def transitions(self):
        """Gets the transitions of this ReaderTaskCreate.


        :return: The transitions of this ReaderTaskCreate.
        :rtype: StatusTransitions
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this ReaderTaskCreate.


        :param transitions: The transitions of this ReaderTaskCreate.  # noqa: E501
        :type: StatusTransitions
        """

        self._transitions = transitions


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReaderTaskCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
