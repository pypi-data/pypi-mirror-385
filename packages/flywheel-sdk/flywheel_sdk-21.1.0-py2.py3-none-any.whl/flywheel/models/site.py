# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class Site(object):

    swagger_types = {
        'id': 'str',
        'api_url': 'str',
        'central_url': 'str',
        'deid_log_url': 'str',
        'dimse_host': 'str',
        'dimse_port': 'int',
        'mfa_code_length': 'int',
        'mfa_delete_totp_batch_size': 'int',
        'inactivity_timeout': 'int',
        'name': 'str',
        'redirect_url': 'str',
        'registered': 'bool',
        'ssl_cert': 'str',
        'upload_maximum_bytes': 'str',
        'proxy_cdn': 'bool',
        'gravatar_address': 'str',
        'pagination_limit': 'int',
        'crawler_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'api_url': 'api_url',
        'central_url': 'central_url',
        'deid_log_url': 'deid_log_url',
        'dimse_host': 'dimse_host',
        'dimse_port': 'dimse_port',
        'mfa_code_length': 'mfa_code_length',
        'mfa_delete_totp_batch_size': 'mfa_delete_totp_batch_size',
        'inactivity_timeout': 'inactivity_timeout',
        'name': 'name',
        'redirect_url': 'redirect_url',
        'registered': 'registered',
        'ssl_cert': 'ssl_cert',
        'upload_maximum_bytes': 'upload_maximum_bytes',
        'proxy_cdn': 'proxy_cdn',
        'gravatar_address': 'gravatar_address',
        'pagination_limit': 'pagination_limit',
        'crawler_url': 'crawler_url'
    }

    rattribute_map = {
        'id': 'id',
        'api_url': 'api_url',
        'central_url': 'central_url',
        'deid_log_url': 'deid_log_url',
        'dimse_host': 'dimse_host',
        'dimse_port': 'dimse_port',
        'mfa_code_length': 'mfa_code_length',
        'mfa_delete_totp_batch_size': 'mfa_delete_totp_batch_size',
        'inactivity_timeout': 'inactivity_timeout',
        'name': 'name',
        'redirect_url': 'redirect_url',
        'registered': 'registered',
        'ssl_cert': 'ssl_cert',
        'upload_maximum_bytes': 'upload_maximum_bytes',
        'proxy_cdn': 'proxy_cdn',
        'gravatar_address': 'gravatar_address',
        'pagination_limit': 'pagination_limit',
        'crawler_url': 'crawler_url'
    }

    def __init__(self, id='local', api_url='https://localhost/api', central_url='https://sdmc.scitran.io/api', deid_log_url=None, dimse_host=None, dimse_port=None, mfa_code_length=6, mfa_delete_totp_batch_size=10, inactivity_timeout=None, name='Local', redirect_url='https://local.flywheel.io', registered=False, ssl_cert=None, upload_maximum_bytes='10737418240', proxy_cdn=False, gravatar_address='https://gravatar.com', pagination_limit=100, crawler_url='flywheel-crawler.flywheel'):  # noqa: E501
        """Site - a model defined in Swagger"""
        super(Site, self).__init__()

        self._id = None
        self._api_url = None
        self._central_url = None
        self._deid_log_url = None
        self._dimse_host = None
        self._dimse_port = None
        self._mfa_code_length = None
        self._mfa_delete_totp_batch_size = None
        self._inactivity_timeout = None
        self._name = None
        self._redirect_url = None
        self._registered = None
        self._ssl_cert = None
        self._upload_maximum_bytes = None
        self._proxy_cdn = None
        self._gravatar_address = None
        self._pagination_limit = None
        self._crawler_url = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        if api_url is not None:
            self.api_url = api_url
        if central_url is not None:
            self.central_url = central_url
        if deid_log_url is not None:
            self.deid_log_url = deid_log_url
        if dimse_host is not None:
            self.dimse_host = dimse_host
        if dimse_port is not None:
            self.dimse_port = dimse_port
        if mfa_code_length is not None:
            self.mfa_code_length = mfa_code_length
        if mfa_delete_totp_batch_size is not None:
            self.mfa_delete_totp_batch_size = mfa_delete_totp_batch_size
        if inactivity_timeout is not None:
            self.inactivity_timeout = inactivity_timeout
        if name is not None:
            self.name = name
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if registered is not None:
            self.registered = registered
        if ssl_cert is not None:
            self.ssl_cert = ssl_cert
        if upload_maximum_bytes is not None:
            self.upload_maximum_bytes = upload_maximum_bytes
        if proxy_cdn is not None:
            self.proxy_cdn = proxy_cdn
        if gravatar_address is not None:
            self.gravatar_address = gravatar_address
        if pagination_limit is not None:
            self.pagination_limit = pagination_limit
        if crawler_url is not None:
            self.crawler_url = crawler_url

    @property
    def id(self):
        """Gets the id of this Site.


        :return: The id of this Site.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Site.


        :param id: The id of this Site.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def api_url(self):
        """Gets the api_url of this Site.


        :return: The api_url of this Site.
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this Site.


        :param api_url: The api_url of this Site.  # noqa: E501
        :type: str
        """

        self._api_url = api_url

    @property
    def central_url(self):
        """Gets the central_url of this Site.


        :return: The central_url of this Site.
        :rtype: str
        """
        return self._central_url

    @central_url.setter
    def central_url(self, central_url):
        """Sets the central_url of this Site.


        :param central_url: The central_url of this Site.  # noqa: E501
        :type: str
        """

        self._central_url = central_url

    @property
    def deid_log_url(self):
        """Gets the deid_log_url of this Site.


        :return: The deid_log_url of this Site.
        :rtype: str
        """
        return self._deid_log_url

    @deid_log_url.setter
    def deid_log_url(self, deid_log_url):
        """Sets the deid_log_url of this Site.


        :param deid_log_url: The deid_log_url of this Site.  # noqa: E501
        :type: str
        """

        self._deid_log_url = deid_log_url

    @property
    def dimse_host(self):
        """Gets the dimse_host of this Site.


        :return: The dimse_host of this Site.
        :rtype: str
        """
        return self._dimse_host

    @dimse_host.setter
    def dimse_host(self, dimse_host):
        """Sets the dimse_host of this Site.


        :param dimse_host: The dimse_host of this Site.  # noqa: E501
        :type: str
        """

        self._dimse_host = dimse_host

    @property
    def dimse_port(self):
        """Gets the dimse_port of this Site.


        :return: The dimse_port of this Site.
        :rtype: int
        """
        return self._dimse_port

    @dimse_port.setter
    def dimse_port(self, dimse_port):
        """Sets the dimse_port of this Site.


        :param dimse_port: The dimse_port of this Site.  # noqa: E501
        :type: int
        """

        self._dimse_port = dimse_port

    @property
    def mfa_code_length(self):
        """Gets the mfa_code_length of this Site.


        :return: The mfa_code_length of this Site.
        :rtype: int
        """
        return self._mfa_code_length

    @mfa_code_length.setter
    def mfa_code_length(self, mfa_code_length):
        """Sets the mfa_code_length of this Site.


        :param mfa_code_length: The mfa_code_length of this Site.  # noqa: E501
        :type: int
        """

        self._mfa_code_length = mfa_code_length

    @property
    def mfa_delete_totp_batch_size(self):
        """Gets the mfa_delete_totp_batch_size of this Site.


        :return: The mfa_delete_totp_batch_size of this Site.
        :rtype: int
        """
        return self._mfa_delete_totp_batch_size

    @mfa_delete_totp_batch_size.setter
    def mfa_delete_totp_batch_size(self, mfa_delete_totp_batch_size):
        """Sets the mfa_delete_totp_batch_size of this Site.


        :param mfa_delete_totp_batch_size: The mfa_delete_totp_batch_size of this Site.  # noqa: E501
        :type: int
        """

        self._mfa_delete_totp_batch_size = mfa_delete_totp_batch_size

    @property
    def inactivity_timeout(self):
        """Gets the inactivity_timeout of this Site.


        :return: The inactivity_timeout of this Site.
        :rtype: int
        """
        return self._inactivity_timeout

    @inactivity_timeout.setter
    def inactivity_timeout(self, inactivity_timeout):
        """Sets the inactivity_timeout of this Site.


        :param inactivity_timeout: The inactivity_timeout of this Site.  # noqa: E501
        :type: int
        """

        self._inactivity_timeout = inactivity_timeout

    @property
    def name(self):
        """Gets the name of this Site.


        :return: The name of this Site.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Site.


        :param name: The name of this Site.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Site.


        :return: The redirect_url of this Site.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Site.


        :param redirect_url: The redirect_url of this Site.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def registered(self):
        """Gets the registered of this Site.


        :return: The registered of this Site.
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this Site.


        :param registered: The registered of this Site.  # noqa: E501
        :type: bool
        """

        self._registered = registered

    @property
    def ssl_cert(self):
        """Gets the ssl_cert of this Site.


        :return: The ssl_cert of this Site.
        :rtype: str
        """
        return self._ssl_cert

    @ssl_cert.setter
    def ssl_cert(self, ssl_cert):
        """Sets the ssl_cert of this Site.


        :param ssl_cert: The ssl_cert of this Site.  # noqa: E501
        :type: str
        """

        self._ssl_cert = ssl_cert

    @property
    def upload_maximum_bytes(self):
        """Gets the upload_maximum_bytes of this Site.


        :return: The upload_maximum_bytes of this Site.
        :rtype: str
        """
        return self._upload_maximum_bytes

    @upload_maximum_bytes.setter
    def upload_maximum_bytes(self, upload_maximum_bytes):
        """Sets the upload_maximum_bytes of this Site.


        :param upload_maximum_bytes: The upload_maximum_bytes of this Site.  # noqa: E501
        :type: str
        """

        self._upload_maximum_bytes = upload_maximum_bytes

    @property
    def proxy_cdn(self):
        """Gets the proxy_cdn of this Site.


        :return: The proxy_cdn of this Site.
        :rtype: bool
        """
        return self._proxy_cdn

    @proxy_cdn.setter
    def proxy_cdn(self, proxy_cdn):
        """Sets the proxy_cdn of this Site.


        :param proxy_cdn: The proxy_cdn of this Site.  # noqa: E501
        :type: bool
        """

        self._proxy_cdn = proxy_cdn

    @property
    def gravatar_address(self):
        """Gets the gravatar_address of this Site.


        :return: The gravatar_address of this Site.
        :rtype: str
        """
        return self._gravatar_address

    @gravatar_address.setter
    def gravatar_address(self, gravatar_address):
        """Sets the gravatar_address of this Site.


        :param gravatar_address: The gravatar_address of this Site.  # noqa: E501
        :type: str
        """

        self._gravatar_address = gravatar_address

    @property
    def pagination_limit(self):
        """Gets the pagination_limit of this Site.


        :return: The pagination_limit of this Site.
        :rtype: int
        """
        return self._pagination_limit

    @pagination_limit.setter
    def pagination_limit(self, pagination_limit):
        """Sets the pagination_limit of this Site.


        :param pagination_limit: The pagination_limit of this Site.  # noqa: E501
        :type: int
        """

        self._pagination_limit = pagination_limit

    @property
    def crawler_url(self):
        """Gets the crawler_url of this Site.


        :return: The crawler_url of this Site.
        :rtype: str
        """
        return self._crawler_url

    @crawler_url.setter
    def crawler_url(self, crawler_url):
        """Sets the crawler_url of this Site.


        :param crawler_url: The crawler_url of this Site.  # noqa: E501
        :type: str
        """

        self._crawler_url = crawler_url


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Site):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
