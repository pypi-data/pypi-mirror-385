# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.api_key_output import ApiKeyOutput  # noqa: F401,E501
from flywheel.models.legacy_api_key_output import LegacyApiKeyOutput  # noqa: F401,E501
from flywheel.models.storage_strategy_config import StorageStrategyConfig  # noqa: F401,E501

class EgressDevice(object):

    swagger_types = {
        'id': 'str',
        'label': 'str',
        'name': 'str',
        'method': 'str',
        'api_keys': 'list[ApiKeyOutput]',
        'api_key': 'LegacyApiKeyOutput',
        'key': 'str',
        'type': 'str',
        'version': 'str',
        'errors': 'list[str]',
        'info': 'object',
        'interval': 'int',
        'last_seen': 'datetime',
        'disabled': 'bool',
        'deleted': 'datetime',
        'storage_config': 'StorageStrategyConfig',
        'modified': 'datetime'
    }

    attribute_map = {
        'id': '_id',
        'label': 'label',
        'name': 'name',
        'method': 'method',
        'api_keys': 'api_keys',
        'api_key': 'api_key',
        'key': 'key',
        'type': 'type',
        'version': 'version',
        'errors': 'errors',
        'info': 'info',
        'interval': 'interval',
        'last_seen': 'last_seen',
        'disabled': 'disabled',
        'deleted': 'deleted',
        'storage_config': 'storage_config',
        'modified': 'modified'
    }

    rattribute_map = {
        '_id': 'id',
        'label': 'label',
        'name': 'name',
        'method': 'method',
        'api_keys': 'api_keys',
        'api_key': 'api_key',
        'key': 'key',
        'type': 'type',
        'version': 'version',
        'errors': 'errors',
        'info': 'info',
        'interval': 'interval',
        'last_seen': 'last_seen',
        'disabled': 'disabled',
        'deleted': 'deleted',
        'storage_config': 'storage_config',
        'modified': 'modified'
    }

    def __init__(self, id=None, label=None, name=None, method=None, api_keys=None, api_key=None, key=None, type=None, version=None, errors=None, info=None, interval=None, last_seen=None, disabled=None, deleted=None, storage_config=None, modified=None):  # noqa: E501
        """EgressDevice - a model defined in Swagger"""
        super(EgressDevice, self).__init__()

        self._id = None
        self._label = None
        self._name = None
        self._method = None
        self._api_keys = None
        self._api_key = None
        self._key = None
        self._type = None
        self._version = None
        self._errors = None
        self._info = None
        self._interval = None
        self._last_seen = None
        self._disabled = None
        self._deleted = None
        self._storage_config = None
        self._modified = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if name is not None:
            self.name = name
        if method is not None:
            self.method = method
        if api_keys is not None:
            self.api_keys = api_keys
        if api_key is not None:
            self.api_key = api_key
        if key is not None:
            self.key = key
        self.type = type
        if version is not None:
            self.version = version
        if errors is not None:
            self.errors = errors
        if info is not None:
            self.info = info
        if interval is not None:
            self.interval = interval
        if last_seen is not None:
            self.last_seen = last_seen
        self.disabled = disabled
        if deleted is not None:
            self.deleted = deleted
        self.storage_config = storage_config
        self.modified = modified

    @property
    def id(self):
        """Gets the id of this EgressDevice.


        :return: The id of this EgressDevice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EgressDevice.


        :param id: The id of this EgressDevice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this EgressDevice.


        :return: The label of this EgressDevice.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EgressDevice.


        :param label: The label of this EgressDevice.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this EgressDevice.


        :return: The name of this EgressDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EgressDevice.


        :param name: The name of this EgressDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def method(self):
        """Gets the method of this EgressDevice.


        :return: The method of this EgressDevice.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EgressDevice.


        :param method: The method of this EgressDevice.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def api_keys(self):
        """Gets the api_keys of this EgressDevice.


        :return: The api_keys of this EgressDevice.
        :rtype: list[ApiKeyOutput]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys):
        """Sets the api_keys of this EgressDevice.


        :param api_keys: The api_keys of this EgressDevice.  # noqa: E501
        :type: list[ApiKeyOutput]
        """

        self._api_keys = api_keys

    @property
    def api_key(self):
        """Gets the api_key of this EgressDevice.


        :return: The api_key of this EgressDevice.
        :rtype: LegacyApiKeyOutput
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this EgressDevice.


        :param api_key: The api_key of this EgressDevice.  # noqa: E501
        :type: LegacyApiKeyOutput
        """

        self._api_key = api_key

    @property
    def key(self):
        """Gets the key of this EgressDevice.


        :return: The key of this EgressDevice.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EgressDevice.


        :param key: The key of this EgressDevice.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def type(self):
        """Gets the type of this EgressDevice.


        :return: The type of this EgressDevice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EgressDevice.


        :param type: The type of this EgressDevice.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this EgressDevice.


        :return: The version of this EgressDevice.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EgressDevice.


        :param version: The version of this EgressDevice.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def errors(self):
        """Gets the errors of this EgressDevice.


        :return: The errors of this EgressDevice.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this EgressDevice.


        :param errors: The errors of this EgressDevice.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def info(self):
        """Gets the info of this EgressDevice.


        :return: The info of this EgressDevice.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this EgressDevice.


        :param info: The info of this EgressDevice.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def interval(self):
        """Gets the interval of this EgressDevice.


        :return: The interval of this EgressDevice.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this EgressDevice.


        :param interval: The interval of this EgressDevice.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def last_seen(self):
        """Gets the last_seen of this EgressDevice.


        :return: The last_seen of this EgressDevice.
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this EgressDevice.


        :param last_seen: The last_seen of this EgressDevice.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def disabled(self):
        """Gets the disabled of this EgressDevice.


        :return: The disabled of this EgressDevice.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this EgressDevice.


        :param disabled: The disabled of this EgressDevice.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def deleted(self):
        """Gets the deleted of this EgressDevice.


        :return: The deleted of this EgressDevice.
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this EgressDevice.


        :param deleted: The deleted of this EgressDevice.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def storage_config(self):
        """Gets the storage_config of this EgressDevice.


        :return: The storage_config of this EgressDevice.
        :rtype: StorageStrategyConfig
        """
        return self._storage_config

    @storage_config.setter
    def storage_config(self, storage_config):
        """Sets the storage_config of this EgressDevice.


        :param storage_config: The storage_config of this EgressDevice.  # noqa: E501
        :type: StorageStrategyConfig
        """

        self._storage_config = storage_config

    @property
    def modified(self):
        """Gets the modified of this EgressDevice.


        :return: The modified of this EgressDevice.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this EgressDevice.


        :param modified: The modified of this EgressDevice.  # noqa: E501
        :type: datetime
        """

        self._modified = modified


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EgressDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
