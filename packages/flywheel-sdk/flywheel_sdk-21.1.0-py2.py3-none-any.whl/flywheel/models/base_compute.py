# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class BaseCompute(object):

    swagger_types = {
        'queue_threshold': 'int',
        'max_compute': 'int',
        'machine_type': 'str',
        'disk_size': 'int',
        'swap_size': 'str',
        'preemptible': 'bool',
        'zone': 'str',
        'region': 'str',
        'tags': 'object',
        'config_type': 'str',
        'config_class': 'str'
    }

    attribute_map = {
        'queue_threshold': 'queue_threshold',
        'max_compute': 'max_compute',
        'machine_type': 'machine_type',
        'disk_size': 'disk_size',
        'swap_size': 'swap_size',
        'preemptible': 'preemptible',
        'zone': 'zone',
        'region': 'region',
        'tags': 'tags',
        'config_type': 'config_type',
        'config_class': 'config_class'
    }

    rattribute_map = {
        'queue_threshold': 'queue_threshold',
        'max_compute': 'max_compute',
        'machine_type': 'machine_type',
        'disk_size': 'disk_size',
        'swap_size': 'swap_size',
        'preemptible': 'preemptible',
        'zone': 'zone',
        'region': 'region',
        'tags': 'tags',
        'config_type': 'config_type',
        'config_class': 'config_class'
    }

    def __init__(self, queue_threshold=None, max_compute=None, machine_type=None, disk_size=None, swap_size='30G', preemptible=None, zone=None, region=None, tags=None, config_type=None, config_class='compute'):  # noqa: E501
        """BaseCompute - a model defined in Swagger"""
        super(BaseCompute, self).__init__()

        self._queue_threshold = None
        self._max_compute = None
        self._machine_type = None
        self._disk_size = None
        self._swap_size = None
        self._preemptible = None
        self._zone = None
        self._region = None
        self._tags = None
        self._config_type = None
        self._config_class = None
        self.discriminator = None
        self.alt_discriminator = None

        self.queue_threshold = queue_threshold
        self.max_compute = max_compute
        self.machine_type = machine_type
        self.disk_size = disk_size
        if swap_size is not None:
            self.swap_size = swap_size
        self.preemptible = preemptible
        self.zone = zone
        self.region = region
        if tags is not None:
            self.tags = tags
        self.config_type = config_type
        if config_class is not None:
            self.config_class = config_class

    @property
    def queue_threshold(self):
        """Gets the queue_threshold of this BaseCompute.


        :return: The queue_threshold of this BaseCompute.
        :rtype: int
        """
        return self._queue_threshold

    @queue_threshold.setter
    def queue_threshold(self, queue_threshold):
        """Sets the queue_threshold of this BaseCompute.


        :param queue_threshold: The queue_threshold of this BaseCompute.  # noqa: E501
        :type: int
        """

        self._queue_threshold = queue_threshold

    @property
    def max_compute(self):
        """Gets the max_compute of this BaseCompute.


        :return: The max_compute of this BaseCompute.
        :rtype: int
        """
        return self._max_compute

    @max_compute.setter
    def max_compute(self, max_compute):
        """Sets the max_compute of this BaseCompute.


        :param max_compute: The max_compute of this BaseCompute.  # noqa: E501
        :type: int
        """

        self._max_compute = max_compute

    @property
    def machine_type(self):
        """Gets the machine_type of this BaseCompute.


        :return: The machine_type of this BaseCompute.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this BaseCompute.


        :param machine_type: The machine_type of this BaseCompute.  # noqa: E501
        :type: str
        """

        self._machine_type = machine_type

    @property
    def disk_size(self):
        """Gets the disk_size of this BaseCompute.


        :return: The disk_size of this BaseCompute.
        :rtype: int
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this BaseCompute.


        :param disk_size: The disk_size of this BaseCompute.  # noqa: E501
        :type: int
        """

        self._disk_size = disk_size

    @property
    def swap_size(self):
        """Gets the swap_size of this BaseCompute.


        :return: The swap_size of this BaseCompute.
        :rtype: str
        """
        return self._swap_size

    @swap_size.setter
    def swap_size(self, swap_size):
        """Sets the swap_size of this BaseCompute.


        :param swap_size: The swap_size of this BaseCompute.  # noqa: E501
        :type: str
        """

        self._swap_size = swap_size

    @property
    def preemptible(self):
        """Gets the preemptible of this BaseCompute.


        :return: The preemptible of this BaseCompute.
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible):
        """Sets the preemptible of this BaseCompute.


        :param preemptible: The preemptible of this BaseCompute.  # noqa: E501
        :type: bool
        """

        self._preemptible = preemptible

    @property
    def zone(self):
        """Gets the zone of this BaseCompute.


        :return: The zone of this BaseCompute.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this BaseCompute.


        :param zone: The zone of this BaseCompute.  # noqa: E501
        :type: str
        """

        self._zone = zone

    @property
    def region(self):
        """Gets the region of this BaseCompute.


        :return: The region of this BaseCompute.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this BaseCompute.


        :param region: The region of this BaseCompute.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def tags(self):
        """Gets the tags of this BaseCompute.


        :return: The tags of this BaseCompute.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BaseCompute.


        :param tags: The tags of this BaseCompute.  # noqa: E501
        :type: object
        """

        self._tags = tags

    @property
    def config_type(self):
        """Gets the config_type of this BaseCompute.


        :return: The config_type of this BaseCompute.
        :rtype: str
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this BaseCompute.


        :param config_type: The config_type of this BaseCompute.  # noqa: E501
        :type: str
        """

        self._config_type = config_type

    @property
    def config_class(self):
        """Gets the config_class of this BaseCompute.


        :return: The config_class of this BaseCompute.
        :rtype: str
        """
        return self._config_class

    @config_class.setter
    def config_class(self, config_class):
        """Sets the config_class of this BaseCompute.


        :param config_class: The config_class of this BaseCompute.  # noqa: E501
        :type: str
        """

        self._config_class = config_class


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseCompute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
