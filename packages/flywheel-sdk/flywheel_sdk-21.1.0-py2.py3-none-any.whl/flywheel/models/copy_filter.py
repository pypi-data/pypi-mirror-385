# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class CopyFilter(object):

    swagger_types = {
        'exclude_analysis': 'bool',
        'exclude_notes': 'bool',
        'exclude_tags': 'bool',
        'include_rules': 'list[str]',
        'exclude_rules': 'list[str]',
        'exclude_empty_containers': 'bool'
    }

    attribute_map = {
        'exclude_analysis': 'exclude_analysis',
        'exclude_notes': 'exclude_notes',
        'exclude_tags': 'exclude_tags',
        'include_rules': 'include_rules',
        'exclude_rules': 'exclude_rules',
        'exclude_empty_containers': 'exclude_empty_containers'
    }

    rattribute_map = {
        'exclude_analysis': 'exclude_analysis',
        'exclude_notes': 'exclude_notes',
        'exclude_tags': 'exclude_tags',
        'include_rules': 'include_rules',
        'exclude_rules': 'exclude_rules',
        'exclude_empty_containers': 'exclude_empty_containers'
    }

    def __init__(self, exclude_analysis=False, exclude_notes=False, exclude_tags=False, include_rules=None, exclude_rules=None, exclude_empty_containers=True):  # noqa: E501
        """CopyFilter - a model defined in Swagger"""
        super(CopyFilter, self).__init__()

        self._exclude_analysis = None
        self._exclude_notes = None
        self._exclude_tags = None
        self._include_rules = None
        self._exclude_rules = None
        self._exclude_empty_containers = None
        self.discriminator = None
        self.alt_discriminator = None

        if exclude_analysis is not None:
            self.exclude_analysis = exclude_analysis
        if exclude_notes is not None:
            self.exclude_notes = exclude_notes
        if exclude_tags is not None:
            self.exclude_tags = exclude_tags
        if include_rules is not None:
            self.include_rules = include_rules
        if exclude_rules is not None:
            self.exclude_rules = exclude_rules
        if exclude_empty_containers is not None:
            self.exclude_empty_containers = exclude_empty_containers

    @property
    def exclude_analysis(self):
        """Gets the exclude_analysis of this CopyFilter.


        :return: The exclude_analysis of this CopyFilter.
        :rtype: bool
        """
        return self._exclude_analysis

    @exclude_analysis.setter
    def exclude_analysis(self, exclude_analysis):
        """Sets the exclude_analysis of this CopyFilter.


        :param exclude_analysis: The exclude_analysis of this CopyFilter.  # noqa: E501
        :type: bool
        """

        self._exclude_analysis = exclude_analysis

    @property
    def exclude_notes(self):
        """Gets the exclude_notes of this CopyFilter.


        :return: The exclude_notes of this CopyFilter.
        :rtype: bool
        """
        return self._exclude_notes

    @exclude_notes.setter
    def exclude_notes(self, exclude_notes):
        """Sets the exclude_notes of this CopyFilter.


        :param exclude_notes: The exclude_notes of this CopyFilter.  # noqa: E501
        :type: bool
        """

        self._exclude_notes = exclude_notes

    @property
    def exclude_tags(self):
        """Gets the exclude_tags of this CopyFilter.


        :return: The exclude_tags of this CopyFilter.
        :rtype: bool
        """
        return self._exclude_tags

    @exclude_tags.setter
    def exclude_tags(self, exclude_tags):
        """Sets the exclude_tags of this CopyFilter.


        :param exclude_tags: The exclude_tags of this CopyFilter.  # noqa: E501
        :type: bool
        """

        self._exclude_tags = exclude_tags

    @property
    def include_rules(self):
        """Gets the include_rules of this CopyFilter.


        :return: The include_rules of this CopyFilter.
        :rtype: list[str]
        """
        return self._include_rules

    @include_rules.setter
    def include_rules(self, include_rules):
        """Sets the include_rules of this CopyFilter.


        :param include_rules: The include_rules of this CopyFilter.  # noqa: E501
        :type: list[str]
        """

        self._include_rules = include_rules

    @property
    def exclude_rules(self):
        """Gets the exclude_rules of this CopyFilter.


        :return: The exclude_rules of this CopyFilter.
        :rtype: list[str]
        """
        return self._exclude_rules

    @exclude_rules.setter
    def exclude_rules(self, exclude_rules):
        """Sets the exclude_rules of this CopyFilter.


        :param exclude_rules: The exclude_rules of this CopyFilter.  # noqa: E501
        :type: list[str]
        """

        self._exclude_rules = exclude_rules

    @property
    def exclude_empty_containers(self):
        """Gets the exclude_empty_containers of this CopyFilter.


        :return: The exclude_empty_containers of this CopyFilter.
        :rtype: bool
        """
        return self._exclude_empty_containers

    @exclude_empty_containers.setter
    def exclude_empty_containers(self, exclude_empty_containers):
        """Sets the exclude_empty_containers of this CopyFilter.


        :param exclude_empty_containers: The exclude_empty_containers of this CopyFilter.  # noqa: E501
        :type: bool
        """

        self._exclude_empty_containers = exclude_empty_containers


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CopyFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
