# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class ProjectCounters(object):

    swagger_types = {
        'subjects': 'int',
        'sessions': 'int',
        'acquisitions': 'int',
        'files': 'int',
        'jobs': 'int',
        'analyses': 'int',
        'acquisition_files': 'int',
        'compliant_sessions': 'int'
    }

    attribute_map = {
        'subjects': 'subjects',
        'sessions': 'sessions',
        'acquisitions': 'acquisitions',
        'files': 'files',
        'jobs': 'jobs',
        'analyses': 'analyses',
        'acquisition_files': 'acquisition_files',
        'compliant_sessions': 'compliant_sessions'
    }

    rattribute_map = {
        'subjects': 'subjects',
        'sessions': 'sessions',
        'acquisitions': 'acquisitions',
        'files': 'files',
        'jobs': 'jobs',
        'analyses': 'analyses',
        'acquisition_files': 'acquisition_files',
        'compliant_sessions': 'compliant_sessions'
    }

    def __init__(self, subjects=None, sessions=None, acquisitions=None, files=None, jobs=None, analyses=None, acquisition_files=None, compliant_sessions=None):  # noqa: E501
        """ProjectCounters - a model defined in Swagger"""
        super(ProjectCounters, self).__init__()

        self._subjects = None
        self._sessions = None
        self._acquisitions = None
        self._files = None
        self._jobs = None
        self._analyses = None
        self._acquisition_files = None
        self._compliant_sessions = None
        self.discriminator = None
        self.alt_discriminator = None

        self.subjects = subjects
        self.sessions = sessions
        self.acquisitions = acquisitions
        self.files = files
        self.jobs = jobs
        self.analyses = analyses
        self.acquisition_files = acquisition_files
        if compliant_sessions is not None:
            self.compliant_sessions = compliant_sessions

    @property
    def subjects(self):
        """Gets the subjects of this ProjectCounters.


        :return: The subjects of this ProjectCounters.
        :rtype: int
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this ProjectCounters.


        :param subjects: The subjects of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._subjects = subjects

    @property
    def sessions(self):
        """Gets the sessions of this ProjectCounters.


        :return: The sessions of this ProjectCounters.
        :rtype: int
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this ProjectCounters.


        :param sessions: The sessions of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._sessions = sessions

    @property
    def acquisitions(self):
        """Gets the acquisitions of this ProjectCounters.


        :return: The acquisitions of this ProjectCounters.
        :rtype: int
        """
        return self._acquisitions

    @acquisitions.setter
    def acquisitions(self, acquisitions):
        """Sets the acquisitions of this ProjectCounters.


        :param acquisitions: The acquisitions of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._acquisitions = acquisitions

    @property
    def files(self):
        """Gets the files of this ProjectCounters.


        :return: The files of this ProjectCounters.
        :rtype: int
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ProjectCounters.


        :param files: The files of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._files = files

    @property
    def jobs(self):
        """Gets the jobs of this ProjectCounters.


        :return: The jobs of this ProjectCounters.
        :rtype: int
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this ProjectCounters.


        :param jobs: The jobs of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._jobs = jobs

    @property
    def analyses(self):
        """Gets the analyses of this ProjectCounters.


        :return: The analyses of this ProjectCounters.
        :rtype: int
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this ProjectCounters.


        :param analyses: The analyses of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._analyses = analyses

    @property
    def acquisition_files(self):
        """Gets the acquisition_files of this ProjectCounters.


        :return: The acquisition_files of this ProjectCounters.
        :rtype: int
        """
        return self._acquisition_files

    @acquisition_files.setter
    def acquisition_files(self, acquisition_files):
        """Sets the acquisition_files of this ProjectCounters.


        :param acquisition_files: The acquisition_files of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._acquisition_files = acquisition_files

    @property
    def compliant_sessions(self):
        """Gets the compliant_sessions of this ProjectCounters.


        :return: The compliant_sessions of this ProjectCounters.
        :rtype: int
        """
        return self._compliant_sessions

    @compliant_sessions.setter
    def compliant_sessions(self, compliant_sessions):
        """Sets the compliant_sessions of this ProjectCounters.


        :param compliant_sessions: The compliant_sessions of this ProjectCounters.  # noqa: E501
        :type: int
        """

        self._compliant_sessions = compliant_sessions


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectCounters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
