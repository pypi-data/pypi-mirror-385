# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.role_type import RoleType  # noqa: F401,E501

class SyncUserInput(object):

    swagger_types = {
        'email': 'str',
        'given_name': 'str',
        'family_name': 'str',
        'disabled': 'bool',
        'auth0id': 'str',
        'revision': 'int',
        'role': 'RoleType'
    }

    attribute_map = {
        'email': 'email',
        'given_name': 'given_name',
        'family_name': 'family_name',
        'disabled': 'disabled',
        'auth0id': 'auth0id',
        'revision': 'revision',
        'role': 'role'
    }

    rattribute_map = {
        'email': 'email',
        'given_name': 'given_name',
        'family_name': 'family_name',
        'disabled': 'disabled',
        'auth0id': 'auth0id',
        'revision': 'revision',
        'role': 'role'
    }

    def __init__(self, email=None, given_name=None, family_name=None, disabled=None, auth0id=None, revision=None, role=None):  # noqa: E501
        """SyncUserInput - a model defined in Swagger"""
        super(SyncUserInput, self).__init__()

        self._email = None
        self._given_name = None
        self._family_name = None
        self._disabled = None
        self._auth0id = None
        self._revision = None
        self._role = None
        self.discriminator = None
        self.alt_discriminator = None

        self.email = email
        self.given_name = given_name
        self.family_name = family_name
        self.disabled = disabled
        self.auth0id = auth0id
        self.revision = revision
        self.role = role

    @property
    def email(self):
        """Gets the email of this SyncUserInput.


        :return: The email of this SyncUserInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SyncUserInput.


        :param email: The email of this SyncUserInput.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def given_name(self):
        """Gets the given_name of this SyncUserInput.


        :return: The given_name of this SyncUserInput.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this SyncUserInput.


        :param given_name: The given_name of this SyncUserInput.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this SyncUserInput.


        :return: The family_name of this SyncUserInput.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this SyncUserInput.


        :param family_name: The family_name of this SyncUserInput.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def disabled(self):
        """Gets the disabled of this SyncUserInput.


        :return: The disabled of this SyncUserInput.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SyncUserInput.


        :param disabled: The disabled of this SyncUserInput.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def auth0id(self):
        """Gets the auth0id of this SyncUserInput.


        :return: The auth0id of this SyncUserInput.
        :rtype: str
        """
        return self._auth0id

    @auth0id.setter
    def auth0id(self, auth0id):
        """Sets the auth0id of this SyncUserInput.


        :param auth0id: The auth0id of this SyncUserInput.  # noqa: E501
        :type: str
        """

        self._auth0id = auth0id

    @property
    def revision(self):
        """Gets the revision of this SyncUserInput.


        :return: The revision of this SyncUserInput.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SyncUserInput.


        :param revision: The revision of this SyncUserInput.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def role(self):
        """Gets the role of this SyncUserInput.


        :return: The role of this SyncUserInput.
        :rtype: RoleType
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SyncUserInput.


        :param role: The role of this SyncUserInput.  # noqa: E501
        :type: RoleType
        """

        self._role = role


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncUserInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
