# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.origin import Origin  # noqa: F401,E501

class JobFileObjectListOutput(object):

    swagger_types = {
        'type': 'str',
        'mimetype': 'str',
        'modality': 'str',
        'classification': 'object',
        'tags': 'list[str]',
        'size': 'int',
        'zip_member_count': 'int',
        'origin': 'Origin',
        'version': 'int',
        'file_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'mimetype': 'mimetype',
        'modality': 'modality',
        'classification': 'classification',
        'tags': 'tags',
        'size': 'size',
        'zip_member_count': 'zip_member_count',
        'origin': 'origin',
        'version': 'version',
        'file_id': 'file_id'
    }

    rattribute_map = {
        'type': 'type',
        'mimetype': 'mimetype',
        'modality': 'modality',
        'classification': 'classification',
        'tags': 'tags',
        'size': 'size',
        'zip_member_count': 'zip_member_count',
        'origin': 'origin',
        'version': 'version',
        'file_id': 'file_id'
    }

    def __init__(self, type=None, mimetype=None, modality=None, classification=None, tags=None, size=None, zip_member_count=None, origin=None, version=None, file_id=None):  # noqa: E501
        """JobFileObjectListOutput - a model defined in Swagger"""
        super(JobFileObjectListOutput, self).__init__()

        self._type = None
        self._mimetype = None
        self._modality = None
        self._classification = None
        self._tags = None
        self._size = None
        self._zip_member_count = None
        self._origin = None
        self._version = None
        self._file_id = None
        self.discriminator = None
        self.alt_discriminator = None

        if type is not None:
            self.type = type
        self.mimetype = mimetype
        if modality is not None:
            self.modality = modality
        if classification is not None:
            self.classification = classification
        if tags is not None:
            self.tags = tags
        if size is not None:
            self.size = size
        if zip_member_count is not None:
            self.zip_member_count = zip_member_count
        if origin is not None:
            self.origin = origin
        self.version = version
        self.file_id = file_id

    @property
    def type(self):
        """Gets the type of this JobFileObjectListOutput.


        :return: The type of this JobFileObjectListOutput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobFileObjectListOutput.


        :param type: The type of this JobFileObjectListOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def mimetype(self):
        """Gets the mimetype of this JobFileObjectListOutput.


        :return: The mimetype of this JobFileObjectListOutput.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this JobFileObjectListOutput.


        :param mimetype: The mimetype of this JobFileObjectListOutput.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def modality(self):
        """Gets the modality of this JobFileObjectListOutput.


        :return: The modality of this JobFileObjectListOutput.
        :rtype: str
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this JobFileObjectListOutput.


        :param modality: The modality of this JobFileObjectListOutput.  # noqa: E501
        :type: str
        """

        self._modality = modality

    @property
    def classification(self):
        """Gets the classification of this JobFileObjectListOutput.


        :return: The classification of this JobFileObjectListOutput.
        :rtype: object
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this JobFileObjectListOutput.


        :param classification: The classification of this JobFileObjectListOutput.  # noqa: E501
        :type: object
        """

        self._classification = classification

    @property
    def tags(self):
        """Gets the tags of this JobFileObjectListOutput.


        :return: The tags of this JobFileObjectListOutput.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JobFileObjectListOutput.


        :param tags: The tags of this JobFileObjectListOutput.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def size(self):
        """Gets the size of this JobFileObjectListOutput.


        :return: The size of this JobFileObjectListOutput.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this JobFileObjectListOutput.


        :param size: The size of this JobFileObjectListOutput.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def zip_member_count(self):
        """Gets the zip_member_count of this JobFileObjectListOutput.


        :return: The zip_member_count of this JobFileObjectListOutput.
        :rtype: int
        """
        return self._zip_member_count

    @zip_member_count.setter
    def zip_member_count(self, zip_member_count):
        """Sets the zip_member_count of this JobFileObjectListOutput.


        :param zip_member_count: The zip_member_count of this JobFileObjectListOutput.  # noqa: E501
        :type: int
        """

        self._zip_member_count = zip_member_count

    @property
    def origin(self):
        """Gets the origin of this JobFileObjectListOutput.


        :return: The origin of this JobFileObjectListOutput.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this JobFileObjectListOutput.


        :param origin: The origin of this JobFileObjectListOutput.  # noqa: E501
        :type: Origin
        """

        self._origin = origin

    @property
    def version(self):
        """Gets the version of this JobFileObjectListOutput.


        :return: The version of this JobFileObjectListOutput.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JobFileObjectListOutput.


        :param version: The version of this JobFileObjectListOutput.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def file_id(self):
        """Gets the file_id of this JobFileObjectListOutput.


        :return: The file_id of this JobFileObjectListOutput.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this JobFileObjectListOutput.


        :param file_id: The file_id of this JobFileObjectListOutput.  # noqa: E501
        :type: str
        """

        self._file_id = file_id


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobFileObjectListOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
