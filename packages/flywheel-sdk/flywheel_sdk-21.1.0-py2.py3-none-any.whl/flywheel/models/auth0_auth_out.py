# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.auth0_options_out import Auth0OptionsOut  # noqa: F401,E501

class Auth0AuthOut(object):

    swagger_types = {
        'client_id': 'str',
        'domain': 'str',
        'audience': 'list[str]',
        'claim_namespace': 'str',
        'jwks': 'dict(str, object)',
        'options': 'Auth0OptionsOut',
        'cookie_domain': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'domain': 'domain',
        'audience': 'audience',
        'claim_namespace': 'claim_namespace',
        'jwks': 'jwks',
        'options': 'options',
        'cookie_domain': 'cookie_domain'
    }

    rattribute_map = {
        'client_id': 'client_id',
        'domain': 'domain',
        'audience': 'audience',
        'claim_namespace': 'claim_namespace',
        'jwks': 'jwks',
        'options': 'options',
        'cookie_domain': 'cookie_domain'
    }

    def __init__(self, client_id=None, domain=None, audience=None, claim_namespace=None, jwks=None, options=None, cookie_domain=None):  # noqa: E501
        """Auth0AuthOut - a model defined in Swagger"""
        super(Auth0AuthOut, self).__init__()

        self._client_id = None
        self._domain = None
        self._audience = None
        self._claim_namespace = None
        self._jwks = None
        self._options = None
        self._cookie_domain = None
        self.discriminator = None
        self.alt_discriminator = None

        self.client_id = client_id
        self.domain = domain
        self.audience = audience
        self.claim_namespace = claim_namespace
        self.jwks = jwks
        self.options = options
        if cookie_domain is not None:
            self.cookie_domain = cookie_domain

    @property
    def client_id(self):
        """Gets the client_id of this Auth0AuthOut.


        :return: The client_id of this Auth0AuthOut.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Auth0AuthOut.


        :param client_id: The client_id of this Auth0AuthOut.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def domain(self):
        """Gets the domain of this Auth0AuthOut.


        :return: The domain of this Auth0AuthOut.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Auth0AuthOut.


        :param domain: The domain of this Auth0AuthOut.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def audience(self):
        """Gets the audience of this Auth0AuthOut.


        :return: The audience of this Auth0AuthOut.
        :rtype: list[str]
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this Auth0AuthOut.


        :param audience: The audience of this Auth0AuthOut.  # noqa: E501
        :type: list[str]
        """

        self._audience = audience

    @property
    def claim_namespace(self):
        """Gets the claim_namespace of this Auth0AuthOut.


        :return: The claim_namespace of this Auth0AuthOut.
        :rtype: str
        """
        return self._claim_namespace

    @claim_namespace.setter
    def claim_namespace(self, claim_namespace):
        """Sets the claim_namespace of this Auth0AuthOut.


        :param claim_namespace: The claim_namespace of this Auth0AuthOut.  # noqa: E501
        :type: str
        """

        self._claim_namespace = claim_namespace

    @property
    def jwks(self):
        """Gets the jwks of this Auth0AuthOut.


        :return: The jwks of this Auth0AuthOut.
        :rtype: dict(str, object)
        """
        return self._jwks

    @jwks.setter
    def jwks(self, jwks):
        """Sets the jwks of this Auth0AuthOut.


        :param jwks: The jwks of this Auth0AuthOut.  # noqa: E501
        :type: dict(str, object)
        """

        self._jwks = jwks

    @property
    def options(self):
        """Gets the options of this Auth0AuthOut.


        :return: The options of this Auth0AuthOut.
        :rtype: Auth0OptionsOut
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Auth0AuthOut.


        :param options: The options of this Auth0AuthOut.  # noqa: E501
        :type: Auth0OptionsOut
        """

        self._options = options

    @property
    def cookie_domain(self):
        """Gets the cookie_domain of this Auth0AuthOut.


        :return: The cookie_domain of this Auth0AuthOut.
        :rtype: str
        """
        return self._cookie_domain

    @cookie_domain.setter
    def cookie_domain(self, cookie_domain):
        """Sets the cookie_domain of this Auth0AuthOut.


        :param cookie_domain: The cookie_domain of this Auth0AuthOut.  # noqa: E501
        :type: str
        """

        self._cookie_domain = cookie_domain


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Auth0AuthOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
