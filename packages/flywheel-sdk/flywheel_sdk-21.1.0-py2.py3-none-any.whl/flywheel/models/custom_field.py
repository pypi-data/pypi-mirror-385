# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.field_type import FieldType  # noqa: F401,E501
from flywheel.models.select_item import SelectItem  # noqa: F401,E501
from flywheel.models.validation_rule import ValidationRule  # noqa: F401,E501

class CustomField(object):

    swagger_types = {
        'type': 'FieldType',
        'label': 'str',
        'description': 'str',
        'placeholder': 'str',
        'key': 'str',
        'helper_text': 'str',
        'error_text': 'str',
        'hide': 'union[boolean,list[object]]',
        'validation': 'list[ValidationRule]',
        'options': 'list[SelectItem]'
    }

    attribute_map = {
        'type': 'type',
        'label': 'label',
        'description': 'description',
        'placeholder': 'placeholder',
        'key': 'key',
        'helper_text': 'helperText',
        'error_text': 'errorText',
        'hide': 'hide',
        'validation': 'validation',
        'options': 'options'
    }

    rattribute_map = {
        'type': 'type',
        'label': 'label',
        'description': 'description',
        'placeholder': 'placeholder',
        'key': 'key',
        'helperText': 'helper_text',
        'errorText': 'error_text',
        'hide': 'hide',
        'validation': 'validation',
        'options': 'options'
    }

    def __init__(self, type=None, label=None, description=None, placeholder=None, key=None, helper_text=None, error_text=None, hide=None, validation=None, options=None):  # noqa: E501
        """CustomField - a model defined in Swagger"""
        super(CustomField, self).__init__()

        self._type = None
        self._label = None
        self._description = None
        self._placeholder = None
        self._key = None
        self._helper_text = None
        self._error_text = None
        self._hide = None
        self._validation = None
        self._options = None
        self.discriminator = None
        self.alt_discriminator = None

        self.type = type
        self.label = label
        self.description = description
        self.placeholder = placeholder
        self.key = key
        self.helper_text = helper_text
        if error_text is not None:
            self.error_text = error_text
        if hide is not None:
            self.hide = hide
        if validation is not None:
            self.validation = validation
        if options is not None:
            self.options = options

    @property
    def type(self):
        """Gets the type of this CustomField.


        :return: The type of this CustomField.
        :rtype: FieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomField.


        :param type: The type of this CustomField.  # noqa: E501
        :type: FieldType
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this CustomField.


        :return: The label of this CustomField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomField.


        :param label: The label of this CustomField.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this CustomField.


        :return: The description of this CustomField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomField.


        :param description: The description of this CustomField.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def placeholder(self):
        """Gets the placeholder of this CustomField.


        :return: The placeholder of this CustomField.
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this CustomField.


        :param placeholder: The placeholder of this CustomField.  # noqa: E501
        :type: str
        """

        self._placeholder = placeholder

    @property
    def key(self):
        """Gets the key of this CustomField.


        :return: The key of this CustomField.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CustomField.


        :param key: The key of this CustomField.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def helper_text(self):
        """Gets the helper_text of this CustomField.


        :return: The helper_text of this CustomField.
        :rtype: str
        """
        return self._helper_text

    @helper_text.setter
    def helper_text(self, helper_text):
        """Sets the helper_text of this CustomField.


        :param helper_text: The helper_text of this CustomField.  # noqa: E501
        :type: str
        """

        self._helper_text = helper_text

    @property
    def error_text(self):
        """Gets the error_text of this CustomField.


        :return: The error_text of this CustomField.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this CustomField.


        :param error_text: The error_text of this CustomField.  # noqa: E501
        :type: str
        """

        self._error_text = error_text

    @property
    def hide(self):
        """Gets the hide of this CustomField.


        :return: The hide of this CustomField.
        :rtype: union[boolean,list[object]]
        """
        return self._hide

    @hide.setter
    def hide(self, hide):
        """Sets the hide of this CustomField.


        :param hide: The hide of this CustomField.  # noqa: E501
        :type: union[boolean,list[object]]
        """

        self._hide = hide

    @property
    def validation(self):
        """Gets the validation of this CustomField.


        :return: The validation of this CustomField.
        :rtype: list[ValidationRule]
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this CustomField.


        :param validation: The validation of this CustomField.  # noqa: E501
        :type: list[ValidationRule]
        """

        self._validation = validation

    @property
    def options(self):
        """Gets the options of this CustomField.


        :return: The options of this CustomField.
        :rtype: list[SelectItem]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CustomField.


        :param options: The options of this CustomField.  # noqa: E501
        :type: list[SelectItem]
        """

        self._options = options


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
