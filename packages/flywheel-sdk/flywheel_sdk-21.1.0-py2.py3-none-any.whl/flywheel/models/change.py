# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.change_method import ChangeMethod  # noqa: F401,E501
from flywheel.models.container_delete_reason import ContainerDeleteReason  # noqa: F401,E501
from flywheel.models.origin import Origin  # noqa: F401,E501

class Change(object):

    swagger_types = {
        'created': 'datetime',
        'origin': 'Origin',
        'container_type': 'union[ContainerType,str]',
        'container_id': 'str',
        'file_version': 'int',
        'method': 'ChangeMethod',
        'patch': 'object',
        'revision': 'int',
        'reason': 'ContainerDeleteReason'
    }

    attribute_map = {
        'created': 'created',
        'origin': 'origin',
        'container_type': 'container_type',
        'container_id': 'container_id',
        'file_version': 'file_version',
        'method': 'method',
        'patch': 'patch',
        'revision': 'revision',
        'reason': 'reason'
    }

    rattribute_map = {
        'created': 'created',
        'origin': 'origin',
        'container_type': 'container_type',
        'container_id': 'container_id',
        'file_version': 'file_version',
        'method': 'method',
        'patch': 'patch',
        'revision': 'revision',
        'reason': 'reason'
    }

    def __init__(self, created=None, origin=None, container_type=None, container_id=None, file_version=None, method=None, patch=None, revision=None, reason=None):  # noqa: E501
        """Change - a model defined in Swagger"""
        super(Change, self).__init__()

        self._created = None
        self._origin = None
        self._container_type = None
        self._container_id = None
        self._file_version = None
        self._method = None
        self._patch = None
        self._revision = None
        self._reason = None
        self.discriminator = None
        self.alt_discriminator = None

        self.created = created
        self.origin = origin
        self.container_type = container_type
        self.container_id = container_id
        if file_version is not None:
            self.file_version = file_version
        self.method = method
        if patch is not None:
            self.patch = patch
        self.revision = revision
        if reason is not None:
            self.reason = reason

    @property
    def created(self):
        """Gets the created of this Change.


        :return: The created of this Change.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Change.


        :param created: The created of this Change.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def origin(self):
        """Gets the origin of this Change.


        :return: The origin of this Change.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Change.


        :param origin: The origin of this Change.  # noqa: E501
        :type: Origin
        """

        self._origin = origin

    @property
    def container_type(self):
        """Gets the container_type of this Change.


        :return: The container_type of this Change.
        :rtype: union[ContainerType,str]
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this Change.


        :param container_type: The container_type of this Change.  # noqa: E501
        :type: union[ContainerType,str]
        """

        self._container_type = container_type

    @property
    def container_id(self):
        """Gets the container_id of this Change.


        :return: The container_id of this Change.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Change.


        :param container_id: The container_id of this Change.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def file_version(self):
        """Gets the file_version of this Change.


        :return: The file_version of this Change.
        :rtype: int
        """
        return self._file_version

    @file_version.setter
    def file_version(self, file_version):
        """Sets the file_version of this Change.


        :param file_version: The file_version of this Change.  # noqa: E501
        :type: int
        """

        self._file_version = file_version

    @property
    def method(self):
        """Gets the method of this Change.


        :return: The method of this Change.
        :rtype: ChangeMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Change.


        :param method: The method of this Change.  # noqa: E501
        :type: ChangeMethod
        """

        self._method = method

    @property
    def patch(self):
        """Gets the patch of this Change.


        :return: The patch of this Change.
        :rtype: object
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this Change.


        :param patch: The patch of this Change.  # noqa: E501
        :type: object
        """

        self._patch = patch

    @property
    def revision(self):
        """Gets the revision of this Change.


        :return: The revision of this Change.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Change.


        :param revision: The revision of this Change.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def reason(self):
        """Gets the reason of this Change.


        :return: The reason of this Change.
        :rtype: ContainerDeleteReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Change.


        :param reason: The reason of this Change.  # noqa: E501
        :type: ContainerDeleteReason
        """

        self._reason = reason


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Change):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
