# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class SignedUrlUploadOutput(object):

    swagger_types = {
        'provider_id': 'str',
        'uuid': 'str',
        'upload_urls': 'list[str]',
        'upload_headers': 'dict(str, str)',
        'block_ids': 'list[str]',
        's3_multipart_upload_id': 'str',
        'az_multipart_upload_id': 'str',
        'note': 'str'
    }

    attribute_map = {
        'provider_id': 'provider_id',
        'uuid': 'uuid',
        'upload_urls': 'upload_urls',
        'upload_headers': 'upload_headers',
        'block_ids': 'block_ids',
        's3_multipart_upload_id': 's3_multipart_upload_id',
        'az_multipart_upload_id': 'az_multipart_upload_id',
        'note': 'note'
    }

    rattribute_map = {
        'provider_id': 'provider_id',
        'uuid': 'uuid',
        'upload_urls': 'upload_urls',
        'upload_headers': 'upload_headers',
        'block_ids': 'block_ids',
        's3_multipart_upload_id': 's3_multipart_upload_id',
        'az_multipart_upload_id': 'az_multipart_upload_id',
        'note': 'note'
    }

    def __init__(self, provider_id=None, uuid=None, upload_urls=None, upload_headers=None, block_ids=None, s3_multipart_upload_id=None, az_multipart_upload_id=None, note=None):  # noqa: E501
        """SignedUrlUploadOutput - a model defined in Swagger"""
        super(SignedUrlUploadOutput, self).__init__()

        self._provider_id = None
        self._uuid = None
        self._upload_urls = None
        self._upload_headers = None
        self._block_ids = None
        self._s3_multipart_upload_id = None
        self._az_multipart_upload_id = None
        self._note = None
        self.discriminator = None
        self.alt_discriminator = None

        self.provider_id = provider_id
        self.uuid = uuid
        self.upload_urls = upload_urls
        self.upload_headers = upload_headers
        if block_ids is not None:
            self.block_ids = block_ids
        if s3_multipart_upload_id is not None:
            self.s3_multipart_upload_id = s3_multipart_upload_id
        if az_multipart_upload_id is not None:
            self.az_multipart_upload_id = az_multipart_upload_id
        if note is not None:
            self.note = note

    @property
    def provider_id(self):
        """Gets the provider_id of this SignedUrlUploadOutput.


        :return: The provider_id of this SignedUrlUploadOutput.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this SignedUrlUploadOutput.


        :param provider_id: The provider_id of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def uuid(self):
        """Gets the uuid of this SignedUrlUploadOutput.


        :return: The uuid of this SignedUrlUploadOutput.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SignedUrlUploadOutput.


        :param uuid: The uuid of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def upload_urls(self):
        """Gets the upload_urls of this SignedUrlUploadOutput.


        :return: The upload_urls of this SignedUrlUploadOutput.
        :rtype: list[str]
        """
        return self._upload_urls

    @upload_urls.setter
    def upload_urls(self, upload_urls):
        """Sets the upload_urls of this SignedUrlUploadOutput.


        :param upload_urls: The upload_urls of this SignedUrlUploadOutput.  # noqa: E501
        :type: list[str]
        """

        self._upload_urls = upload_urls

    @property
    def upload_headers(self):
        """Gets the upload_headers of this SignedUrlUploadOutput.


        :return: The upload_headers of this SignedUrlUploadOutput.
        :rtype: dict(str, str)
        """
        return self._upload_headers

    @upload_headers.setter
    def upload_headers(self, upload_headers):
        """Sets the upload_headers of this SignedUrlUploadOutput.


        :param upload_headers: The upload_headers of this SignedUrlUploadOutput.  # noqa: E501
        :type: dict(str, str)
        """

        self._upload_headers = upload_headers

    @property
    def block_ids(self):
        """Gets the block_ids of this SignedUrlUploadOutput.


        :return: The block_ids of this SignedUrlUploadOutput.
        :rtype: list[str]
        """
        return self._block_ids

    @block_ids.setter
    def block_ids(self, block_ids):
        """Sets the block_ids of this SignedUrlUploadOutput.


        :param block_ids: The block_ids of this SignedUrlUploadOutput.  # noqa: E501
        :type: list[str]
        """

        self._block_ids = block_ids

    @property
    def s3_multipart_upload_id(self):
        """Gets the s3_multipart_upload_id of this SignedUrlUploadOutput.


        :return: The s3_multipart_upload_id of this SignedUrlUploadOutput.
        :rtype: str
        """
        return self._s3_multipart_upload_id

    @s3_multipart_upload_id.setter
    def s3_multipart_upload_id(self, s3_multipart_upload_id):
        """Sets the s3_multipart_upload_id of this SignedUrlUploadOutput.


        :param s3_multipart_upload_id: The s3_multipart_upload_id of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """

        self._s3_multipart_upload_id = s3_multipart_upload_id

    @property
    def az_multipart_upload_id(self):
        """Gets the az_multipart_upload_id of this SignedUrlUploadOutput.


        :return: The az_multipart_upload_id of this SignedUrlUploadOutput.
        :rtype: str
        """
        return self._az_multipart_upload_id

    @az_multipart_upload_id.setter
    def az_multipart_upload_id(self, az_multipart_upload_id):
        """Sets the az_multipart_upload_id of this SignedUrlUploadOutput.


        :param az_multipart_upload_id: The az_multipart_upload_id of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """

        self._az_multipart_upload_id = az_multipart_upload_id

    @property
    def note(self):
        """Gets the note of this SignedUrlUploadOutput.


        :return: The note of this SignedUrlUploadOutput.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SignedUrlUploadOutput.


        :param note: The note of this SignedUrlUploadOutput.  # noqa: E501
        :type: str
        """

        self._note = note


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignedUrlUploadOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
