# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

from flywheel.models.filter_view import FilterView  # noqa: F401,E501
from flywheel.models.origin import Origin  # noqa: F401,E501

class Filter(object):

    swagger_types = {
        'filter': 'union[str,object]',
        'view': 'FilterView',
        'origin': 'Origin',
        'created': 'datetime',
        'modified': 'datetime',
        'deleted': 'datetime',
        'id': 'str',
        'label': 'str'
    }

    attribute_map = {
        'filter': 'filter',
        'view': 'view',
        'origin': 'origin',
        'created': 'created',
        'modified': 'modified',
        'deleted': 'deleted',
        'id': '_id',
        'label': 'label'
    }

    rattribute_map = {
        'filter': 'filter',
        'view': 'view',
        'origin': 'origin',
        'created': 'created',
        'modified': 'modified',
        'deleted': 'deleted',
        '_id': 'id',
        'label': 'label'
    }

    def __init__(self, filter=None, view=None, origin=None, created=None, modified=None, deleted=None, id=None, label=None):  # noqa: E501
        """Filter - a model defined in Swagger"""
        super(Filter, self).__init__()

        self._filter = None
        self._view = None
        self._origin = None
        self._created = None
        self._modified = None
        self._deleted = None
        self._id = None
        self._label = None
        self.discriminator = None
        self.alt_discriminator = None

        self.filter = filter
        self.view = view
        self.origin = origin
        self.created = created
        self.modified = modified
        if deleted is not None:
            self.deleted = deleted
        self.id = id
        self.label = label

    @property
    def filter(self):
        """Gets the filter of this Filter.


        :return: The filter of this Filter.
        :rtype: union[str,object]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Filter.


        :param filter: The filter of this Filter.  # noqa: E501
        :type: union[str,object]
        """

        self._filter = filter

    @property
    def view(self):
        """Gets the view of this Filter.


        :return: The view of this Filter.
        :rtype: FilterView
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Filter.


        :param view: The view of this Filter.  # noqa: E501
        :type: FilterView
        """

        self._view = view

    @property
    def origin(self):
        """Gets the origin of this Filter.


        :return: The origin of this Filter.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Filter.


        :param origin: The origin of this Filter.  # noqa: E501
        :type: Origin
        """

        self._origin = origin

    @property
    def created(self):
        """Gets the created of this Filter.


        :return: The created of this Filter.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Filter.


        :param created: The created of this Filter.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Filter.


        :return: The modified of this Filter.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Filter.


        :param modified: The modified of this Filter.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def deleted(self):
        """Gets the deleted of this Filter.


        :return: The deleted of this Filter.
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Filter.


        :param deleted: The deleted of this Filter.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this Filter.


        :return: The id of this Filter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Filter.


        :param id: The id of this Filter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Filter.


        :return: The label of this Filter.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Filter.


        :param label: The label of this Filter.  # noqa: E501
        :type: str
        """

        self._label = label


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
