# Docker Compose configuration for DevStudio MCP Server
version: '3.8'

services:
  # Main MCP server
  devstudio-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: devstudio-mcp-server
    ports:
      - "3000:3000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
      - RECORDING_OUTPUT_DIR=/app/recordings
      - MAX_RECORDING_DURATION=${MAX_RECORDING_DURATION:-3600}
    volumes:
      # Mount recordings directory for persistence
      - ./recordings:/app/recordings
      - ./config:/app/config
      - ./logs:/app/logs
      # Mount source code for development
      - ./devstudio_mcp:/app/devstudio_mcp
    restart: unless-stopped
    networks:
      - devstudio-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import devstudio_mcp; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: devstudio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - devstudio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: devstudio-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - devstudio-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: devstudio-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - devstudio-network
    depends_on:
      - prometheus

  # File storage service (optional - for cloud deployment)
  minio:
    image: minio/minio:latest
    container_name: devstudio-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - devstudio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  minio-data:
    driver: local

networks:
  devstudio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16