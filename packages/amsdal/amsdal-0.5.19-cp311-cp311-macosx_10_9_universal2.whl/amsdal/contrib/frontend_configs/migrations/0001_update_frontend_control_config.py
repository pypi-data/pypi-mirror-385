from amsdal_models.migration import migrations
from amsdal_utils.models.enums import ModuleType


class Migration(migrations.Migration):
    operations: list[migrations.Operation] = [
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name="Condition",
            new_schema={
                "title": "Condition",
                "type": "FrontendConfigSkipNoneBase",
                "required": ["operation", "conditions"],
                "properties": {
                    "operation": {
                        "type": "string",
                        "options": [
                            {"key": "and", "value": "and"},
                            {"key": "or", "value": "or"},
                            {"key": "not", "value": "not"},
                        ],
                        "title": "Operation",
                        "enum": ["and", "or", "not"],
                    },
                    "conditions": {
                        "type": "array",
                        "items": {"type": "ConditionItem", "title": "ConditionItem"},
                        "title": "Conditions",
                    },
                },
                "meta_class": "TypeMeta",
                "custom_code": "from typing import Any\n\nfrom amsdal.contrib.frontend_configs.models.frontend_activator_config import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_async_validator import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_control_action import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_skip_none_base import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_slider_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_text_mask import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_validator import *\n\n\ndef model_dump(self, **kwargs: Any) -> dict[str, Any]:\n    kwargs['exclude_none'] = True\n    return super().model_dump(**kwargs)\n\ndef model_dump_json(self, **kwargs: Any) -> str:\n    kwargs['exclude_none'] = True\n    return super().model_dump_json(**kwargs)",
                "storage_metadata": {"table_name": "Condition", "db_fields": {}, "foreign_keys": {}},
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name="ConditionItem",
            new_schema={
                "title": "ConditionItem",
                "type": "FrontendConfigSkipNoneBase",
                "required": ["path", "condition"],
                "properties": {
                    "path": {"type": "string", "title": "Path"},
                    "condition": {"type": "string", "title": "Condition"},
                    "value": {"type": "anything", "title": "Value"},
                },
                "meta_class": "TypeMeta",
                "custom_code": "from typing import Any\n\nfrom amsdal.contrib.frontend_configs.models.frontend_activator_config import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_async_validator import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_control_action import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_skip_none_base import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_slider_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_text_mask import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_validator import *\n\n\ndef model_dump(self, **kwargs: Any) -> dict[str, Any]:\n    kwargs['exclude_none'] = True\n    return super().model_dump(**kwargs)\n\ndef model_dump_json(self, **kwargs: Any) -> str:\n    kwargs['exclude_none'] = True\n    return super().model_dump_json(**kwargs)",
                "storage_metadata": {"table_name": "ConditionItem", "db_fields": {}, "foreign_keys": {}},
            },
        ),
        migrations.UpdateClass(
            module_type=ModuleType.CONTRIB,
            class_name="FrontendControlConfig",
            old_schema={
                "title": "FrontendControlConfig",
                "type": "FrontendConfigSkipNoneBase",
                "required": ["type", "name"],
                "properties": {
                    "type": {"type": "string", "title": "Type"},
                    "name": {"type": "string", "title": "Name"},
                    "label": {"type": "string", "title": "Label"},
                    "required": {"type": "boolean", "title": "Required"},
                    "hideLabel": {"type": "boolean", "title": "Hide Label"},
                    "actions": {
                        "type": "array",
                        "items": {"type": "FrontendConfigControlAction", "title": "FrontendConfigControlAction"},
                        "title": "Actions",
                    },
                    "validators": {
                        "type": "array",
                        "items": {"type": "FrontendConfigValidator", "title": "FrontendConfigValidator"},
                        "title": "Validators",
                    },
                    "asyncValidators": {
                        "type": "array",
                        "items": {"type": "FrontendConfigAsyncValidator", "title": "FrontendConfigAsyncValidator"},
                        "title": "Async Validators",
                    },
                    "activators": {
                        "type": "array",
                        "items": {"type": "FrontendActivatorConfig", "title": "FrontendActivatorConfig"},
                        "title": "Activators",
                    },
                    "additionalText": {"type": "string", "title": "Additional Text"},
                    "value": {"type": "anything", "title": "Value"},
                    "placeholder": {"type": "string", "title": "Placeholder"},
                    "options": {
                        "type": "array",
                        "items": {"type": "FrontendConfigOption", "title": "FrontendConfigOption"},
                        "title": "Options",
                    },
                    "mask": {"type": "FrontendConfigTextMask", "title": "Mask"},
                    "controls": {
                        "type": "array",
                        "items": {"type": "FrontendControlConfig", "title": "FrontendControlConfig"},
                        "title": "Controls",
                    },
                    "showSearch": {"type": "boolean", "title": "Show Search"},
                    "sliderOptions": {"type": "FrontendConfigSliderOption", "title": "Slider Option"},
                    "customLabel": {"type": "array", "items": {"type": "string"}, "title": "Custom Label"},
                    "control": {"type": "FrontendControlConfig", "title": "Control"},
                    "entityType": {"type": "string", "title": "Entity Type"},
                },
                "meta_class": "TypeMeta",
                "custom_code": "from typing import Any\n\nfrom amsdal_models.builder.validators.options_validators import validate_options\nfrom pydantic.functional_validators import field_validator\n\nfrom amsdal.contrib.frontend_configs.models.frontend_activator_config import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_async_validator import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_control_action import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_skip_none_base import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_slider_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_text_mask import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_validator import *\n\n\n@field_validator('type')\n@classmethod\ndef validate_value_in_options_type(cls: type, value: Any) -> Any:\n    return validate_options(value, options=['Bytes', 'array', 'checkbox', 'date', 'dateTriplet', 'datetime', 'dict', 'dropzone', 'email', 'file', 'group', 'group_switch', 'group_toggle', 'info-group', 'infoscreen', 'multiselect', 'number', 'number-operations', 'number-slider', 'number_equals', 'number_initial', 'number_minus', 'number_plus', 'object', 'object_group', 'object_latest', 'password', 'phone', 'radio', 'select', 'text', 'textarea', 'time', 'toggle'])\n\ndef model_dump(self, **kwargs: Any) -> dict[str, Any]:\n    kwargs['exclude_none'] = True\n    return super().model_dump(**kwargs)\n\ndef model_dump_json(self, **kwargs: Any) -> str:\n    kwargs['exclude_none'] = True\n    return super().model_dump_json(**kwargs)",
                "storage_metadata": {"table_name": "FrontendControlConfig", "db_fields": {}, "foreign_keys": {}},
            },
            new_schema={
                "title": "FrontendControlConfig",
                "type": "FrontendConfigSkipNoneBase",
                "required": ["type", "name"],
                "properties": {
                    "type": {
                        "type": "string",
                        "options": [
                            {"key": "Bytes", "value": "Bytes"},
                            {"key": "array", "value": "array"},
                            {"key": "checkbox", "value": "checkbox"},
                            {"key": "date", "value": "date"},
                            {"key": "dateTriplet", "value": "dateTriplet"},
                            {"key": "datetime", "value": "datetime"},
                            {"key": "dict", "value": "dict"},
                            {"key": "dropzone", "value": "dropzone"},
                            {"key": "email", "value": "email"},
                            {"key": "file", "value": "file"},
                            {"key": "group", "value": "group"},
                            {"key": "group_switch", "value": "group_switch"},
                            {"key": "group_toggle", "value": "group_toggle"},
                            {"key": "info-group", "value": "info-group"},
                            {"key": "infoscreen", "value": "infoscreen"},
                            {"key": "multiselect", "value": "multiselect"},
                            {"key": "number", "value": "number"},
                            {"key": "number-operations", "value": "number-operations"},
                            {"key": "number-slider", "value": "number-slider"},
                            {"key": "number_equals", "value": "number_equals"},
                            {"key": "number_initial", "value": "number_initial"},
                            {"key": "number_minus", "value": "number_minus"},
                            {"key": "number_plus", "value": "number_plus"},
                            {"key": "object", "value": "object"},
                            {"key": "object_group", "value": "object_group"},
                            {"key": "object_latest", "value": "object_latest"},
                            {"key": "password", "value": "password"},
                            {"key": "phone", "value": "phone"},
                            {"key": "radio", "value": "radio"},
                            {"key": "select", "value": "select"},
                            {"key": "text", "value": "text"},
                            {"key": "textarea", "value": "textarea"},
                            {"key": "time", "value": "time"},
                            {"key": "toggle", "value": "toggle"},
                            {"key": "sections", "value": "sections"},
                            {"key": "section", "value": "section"},
                        ],
                        "title": "Type",
                        "enum": [
                            "Bytes",
                            "array",
                            "checkbox",
                            "date",
                            "dateTriplet",
                            "datetime",
                            "dict",
                            "dropzone",
                            "email",
                            "file",
                            "group",
                            "group_switch",
                            "group_toggle",
                            "info-group",
                            "infoscreen",
                            "multiselect",
                            "number",
                            "number-operations",
                            "number-slider",
                            "number_equals",
                            "number_initial",
                            "number_minus",
                            "number_plus",
                            "object",
                            "object_group",
                            "object_latest",
                            "password",
                            "phone",
                            "radio",
                            "select",
                            "text",
                            "textarea",
                            "time",
                            "toggle",
                            "sections",
                            "section",
                        ],
                    },
                    "name": {"type": "string", "title": "Name"},
                    "label": {"type": "string", "title": "Label"},
                    "required": {"type": "boolean", "title": "Required"},
                    "hideLabel": {"type": "boolean", "title": "Hide Label"},
                    "actions": {
                        "type": "array",
                        "items": {"type": "FrontendConfigControlAction", "title": "FrontendConfigControlAction"},
                        "title": "Actions",
                    },
                    "validators": {
                        "type": "array",
                        "items": {"type": "FrontendConfigValidator", "title": "FrontendConfigValidator"},
                        "title": "Validators",
                    },
                    "asyncValidators": {
                        "type": "array",
                        "items": {"type": "FrontendConfigAsyncValidator", "title": "FrontendConfigAsyncValidator"},
                        "title": "Async Validators",
                    },
                    "activators": {
                        "type": "array",
                        "items": {"type": "FrontendActivatorConfig", "title": "FrontendActivatorConfig"},
                        "title": "Activators",
                    },
                    "additionalText": {"type": "string", "title": "Additional Text"},
                    "value": {"type": "anything", "title": "Value"},
                    "placeholder": {"type": "string", "title": "Placeholder"},
                    "options": {
                        "type": "array",
                        "items": {"type": "FrontendConfigOption", "title": "FrontendConfigOption"},
                        "title": "Options",
                    },
                    "mask": {"type": "FrontendConfigTextMask", "title": "Mask"},
                    "controls": {
                        "type": "array",
                        "items": {"type": "FrontendControlConfig", "title": "FrontendControlConfig"},
                        "title": "Controls",
                    },
                    "showSearch": {"type": "boolean", "title": "Show Search"},
                    "sliderOptions": {"type": "FrontendConfigSliderOption", "title": "Slider Option"},
                    "customLabel": {"type": "array", "items": {"type": "string"}, "title": "Custom Label"},
                    "control": {"type": "FrontendControlConfig", "title": "Control"},
                    "entityType": {"type": "string", "title": "Entity Type"},
                    "condition": {"type": "Condition", "title": "Condition"},
                },
                "meta_class": "TypeMeta",
                "custom_code": "from typing import Any\n\nfrom amsdal.contrib.frontend_configs.models.frontend_activator_config import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_async_validator import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_control_action import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_skip_none_base import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_slider_option import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_text_mask import *\nfrom amsdal.contrib.frontend_configs.models.frontend_config_validator import *\n\n\ndef model_dump(self, **kwargs: Any) -> dict[str, Any]:\n    kwargs['exclude_none'] = True\n    return super().model_dump(**kwargs)\n\ndef model_dump_json(self, **kwargs: Any) -> str:\n    kwargs['exclude_none'] = True\n    return super().model_dump_json(**kwargs)",
                "storage_metadata": {"table_name": "FrontendControlConfig", "db_fields": {}, "foreign_keys": {}},
            },
        ),
    ]
