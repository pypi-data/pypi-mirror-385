import os
from _typeshed import Incomplete
from amsdal_models.storage.base import Storage
from amsdal_models.storage.types import FileProtocol
from pathlib import Path
from typing import Any, BinaryIO, IO

CHUNK_SIZE: Incomplete

class FileSystemStorage(Storage):
    """
    Simple filesystem-based storage backend.

    - base_dir: root directory for stored files
    - base_url: URL prefix for building public URLs (optional)
    """
    keeps_local_copy: bool
    base_dir: Incomplete
    base_url: Incomplete
    serialize_base_dir: Incomplete
    serialize_base_url: Incomplete
    def __init__(self, base_dir: str | os.PathLike[Any] | None = None, base_url: str | None = None, *, serialize_base_dir: bool = True, serialize_base_url: bool = True) -> None: ...
    def save(self, file: FileProtocol, content: BinaryIO) -> str: ...
    def open(self, file: FileProtocol, mode: str = 'rb') -> IO[Any]: ...
    def delete(self, file: FileProtocol) -> None: ...
    def exists(self, file: FileProtocol) -> bool: ...
    def url(self, file: FileProtocol) -> str: ...
    async def asave(self, file: FileProtocol, content: BinaryIO) -> str: ...
    async def aopen(self, file: FileProtocol, mode: str = 'rb') -> Any: ...
    async def adelete(self, file: FileProtocol) -> None: ...
    async def aexists(self, file: FileProtocol) -> bool: ...
    async def aurl(self, file: FileProtocol) -> str: ...
    def _full_path(self, name: str) -> Path: ...
    def _get_available_name(self, name: str) -> str: ...
    def _name_for(self, file: FileProtocol) -> str: ...
    def _export_kwargs(self) -> dict[str, Any]: ...
