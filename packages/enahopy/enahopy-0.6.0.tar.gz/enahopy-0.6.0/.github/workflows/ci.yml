name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Fast quality checks (run first for quick feedback)
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install quality check tools
        run: |
          python -m pip install --upgrade pip
          pip install black==23.12.1 flake8==7.0.0 isort==5.13.2

      - name: Check code formatting with black
        run: |
          black --check --line-length 100 enahopy/ tests/
        continue-on-error: false

      - name: Check import sorting with isort
        run: |
          isort --check-only --profile black --line-length 100 enahopy/ tests/
        continue-on-error: false

      - name: Lint with flake8
        run: |
          # Stop on critical errors
          flake8 enahopy/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Full lint (allow to pass with warnings)
          flake8 enahopy/ --count --max-line-length=100 --extend-ignore=E203,W503 --statistics --exit-zero

  # Test suite with coverage
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce build matrix to speed up CI
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.12"  # Skip Windows + 3.12 (known issues)

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[dev]

      - name: Install optional dependencies (best effort)
        run: |
          pip install pyreadstat || echo "pyreadstat install failed (optional)"
        continue-on-error: true

      - name: Run fast tests (exclude slow tests)
        run: |
          pytest tests/ -v -m "not slow" --tb=short --maxfail=5 --cov=enahopy --cov-report=xml --cov-report=term-missing:skip-covered --cov-branch --cov-fail-under=0
        timeout-minutes: 10

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
            .coverage
          retention-days: 30

  # Coverage validation (enforce minimum threshold)
  coverage:
    name: Coverage Validation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests with coverage enforcement
        run: |
          pytest tests/ -v -m "not slow" --cov=enahopy --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=40 --tb=short
        timeout-minutes: 10

      - name: Generate coverage badge
        run: |
          pip install coverage-badge
          coverage-badge -o coverage.svg -f || echo "Badge generation failed (non-critical)"
        continue-on-error: true

      - name: Coverage summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY || echo "Coverage report generation failed"

  # Integration tests (end-to-end)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run integration tests
        run: |
          pytest tests/test_integration.py -v --tb=long
        timeout-minutes: 15
        continue-on-error: true  # Integration tests currently have failures

  # Performance tests (optional, on main branch only)
  performance:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run performance tests
        run: |
          pytest tests/test_performance_regression.py -v --tb=short
        timeout-minutes: 20
        continue-on-error: true

      - name: Archive performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/benchmark_results.json
          retention-days: 90
        if: always()

  # Build check (ensure package builds correctly)
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, coverage]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest

      - name: Check manifest
        run: |
          check-manifest || echo "Manifest check failed (non-critical)"
        continue-on-error: true

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  # Summary job (final status)
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality, test, coverage, build]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Checks: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.quality.result }}" != "success" ] || [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.coverage.result }}" != "success" ] || [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ CI Pipeline Passed" >> $GITHUB_STEP_SUMMARY
          fi
