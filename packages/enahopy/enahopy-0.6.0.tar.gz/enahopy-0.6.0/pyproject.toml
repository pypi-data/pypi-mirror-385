[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "enahopy"
version = "0.6.0"
authors = [
    {name = "Paul Camacho", email = "pcamacho447@gmail.com"}
]
description = "Libreria Python para analisis de microdatos ENAHO del INEI Peru"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"

keywords = [
    "enaho", "peru", "inei", "survey", "microdata",
    "encuesta", "hogares", "estadistica", "analisis"
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent"
]

dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.20.0",
    "requests>=2.25.0",
    "tqdm>=4.60.0",
    "matplotlib>=3.3.0",
    "seaborn>=0.11.0"
]

[project.optional-dependencies]
full = [
    "pyreadstat>=1.1.0",
    "dask[complete]>=2021.0.0",
    "geopandas>=0.10.0",
    "plotly>=5.0.0"
]

dev = [
    # Testing framework
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    "pytest-timeout>=2.1.0",  # Test timeouts
    "pytest-mock>=3.10.0",  # Mocking utilities
    "responses>=0.22.0",  # HTTP request mocking
    "psutil>=5.9.0",  # System and process monitoring

    # Code quality
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",

    # Coverage tools
    "coverage>=7.0.0",
    "coverage-badge>=1.1.0",

    # Security
    "bandit>=1.7.0",

    # Documentation
    "interrogate>=1.5.0",  # Docstring coverage

    # Build and packaging
    "build>=0.10.0",
    "twine>=4.0.0",
    "check-manifest>=0.49"
]

[project.urls]
Homepage = "https://github.com/elpapx/enahopy"
Repository = "https://github.com/elpapx/enahopy"
Issues = "https://github.com/elpapx/enahopy/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["enahopy*"]
exclude = ["tests*", "examples*"]

[tool.black]
line-length = 100
target-version = ["py38"]

[tool.isort]
profile = "black"
line_length = 100

[tool.bandit]
# Security linting configuration
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = ["B101"]  # Skip assert_used (common in tests)

[tool.coverage.run]
# Coverage configuration (also in .coveragerc for compatibility)
# Focus on active production modules only (v0.5.0 scope)
source = ["enahopy"]
branch = true
omit = [
    # Test files
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",

    # Cache and temporary files
    "*/__pycache__/*",
    "*/.enaho_cache/*",
    "*/temp/*",

    # Unused/incomplete modules (not part of v0.5.0)
    "*/performance/*",
    "*/econometrics/*",
    "*/reporting.py",
    "*/statistical_analysis.py",
    "*/data_quality.py",
    "*/validation.py",

    # Untested/unused implementation files (0% coverage)
    "*/merger/convenience.py",
    "*/loader/io/downloaders/async_downloader.py",
    "*/null_analysis/utils/utils.py",
    "*/null_analysis/visualization/factory.py",
    "*/null_analysis/io/exporters.py",
    "*/null_analysis/io/importers.py",
    "*/null_analysis/reports/templates.py",

    # ML imputation strategies (Phase 2A complete, but low integration coverage)
    "*/null_analysis/strategies/ml_imputation.py",
    "*/null_analysis/strategies/advanced_ml_imputation.py",
    "*/null_analysis/strategies/enaho_pattern_imputation.py",
    "*/null_analysis/strategies/imputation_quality_assessment.py",

    # Benchmark and analysis scripts
    "*/loader/core/cache_benchmark.py",
    "*/loader/io/loader_benchmark.py",
    "*/merger_analysis.py",
    "*/analyzer.py"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod"
]