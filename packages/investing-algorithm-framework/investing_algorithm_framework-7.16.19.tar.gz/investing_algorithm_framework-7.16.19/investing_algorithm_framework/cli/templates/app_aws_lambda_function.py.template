import logging.config
import os
from logging import getLogger

from dotenv import load_dotenv
from finterion_investing_algorithm_framework import FinterionOrderExecutor, \
    FinterionPingAction, FinterionPortfolioProvider
from investing_algorithm_framework import create_app, RESOURCE_DIRECTORY, \
    AWSS3StorageStateHandler, AWS_S3_STATE_BUCKET_NAME, AWS_LAMBDA_LOGGING_CONFIG

from strategies.strategy import MyTradingStrategy


# Make sure to set the resource directory to /tmp because this dir is writable
app = create_app(config={RESOURCE_DIRECTORY: os.path.join("/tmp", "resources")})
logging.config.dictConfig(AWS_LAMBDA_LOGGING_CONFIG)
logger = logging.getLogger(__name__)

# Get the s3 state bucket name from environment variables for database
# state storage, this is set during the deployment
# to AWS Lambda with the `deploy_aws_lambda` cli command.
app.add_state_handler(
    AWSS3StorageStateHandler(bucket_name=os.getenv(AWS_S3_STATE_BUCKET_NAME))
)
app.add_strategy(MyTradingStrategy)
app.add_market(market="BITVAVO", trading_symbol="EUR")


def lambda_handler(event, context):
    """
    AWS Lambda handler function for executing a trading strategy.

    Args:
        event: dict, the event data passed to the Lambda function.
        context: object, the context object provided by AWS Lambda.

    Returns:
        dict: The result of the trading strategy execution.
    """
    try:
        app.run(payload={"ACTION": "RUN_STRATEGY"})
        return {
            "statusCode": 200,
            "body": "Trading strategy executed successfully."
        }
    except Exception as e:
        logger.exception(e)
        return {"statusCode": 500, "body": str(e)}
