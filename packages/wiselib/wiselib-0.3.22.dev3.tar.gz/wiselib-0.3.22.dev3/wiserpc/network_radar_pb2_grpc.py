# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import network_radar_pb2 as network__radar__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in network_radar_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NetworkRadarServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrenchNewBornStream = channel.unary_stream(
                '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchNewBornStream',
                request_serializer=network__radar__pb2.TrenchStreamRequest.SerializeToString,
                response_deserializer=network__radar__pb2.TrenchStreamResponse.FromString,
                _registered_method=True)
        self.TrenchFinalStretchStream = channel.unary_stream(
                '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchFinalStretchStream',
                request_serializer=network__radar__pb2.TrenchStreamRequest.SerializeToString,
                response_deserializer=network__radar__pb2.TrenchStreamResponse.FromString,
                _registered_method=True)
        self.TrenchMigratedStream = channel.unary_stream(
                '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchMigratedStream',
                request_serializer=network__radar__pb2.TrenchStreamRequest.SerializeToString,
                response_deserializer=network__radar__pb2.TrenchStreamResponse.FromString,
                _registered_method=True)
        self.CoinDetailStream = channel.unary_stream(
                '/wisdomise.rpc.network_radar.NetworkRadarService/CoinDetailStream',
                request_serializer=network__radar__pb2.CoinDetailStreamRequest.SerializeToString,
                response_deserializer=network__radar__pb2.CoinDetailStreamResponse.FromString,
                _registered_method=True)
        self.TopTraderStream = channel.unary_stream(
                '/wisdomise.rpc.network_radar.NetworkRadarService/TopTraderStream',
                request_serializer=network__radar__pb2.TopTraderStreamRequest.SerializeToString,
                response_deserializer=network__radar__pb2.TopTraderStreamResponse.FromString,
                _registered_method=True)
        self.TopHolderStream = channel.unary_stream(
                '/wisdomise.rpc.network_radar.NetworkRadarService/TopHolderStream',
                request_serializer=network__radar__pb2.TopHolderStreamRequest.SerializeToString,
                response_deserializer=network__radar__pb2.TopHolderStreamResponse.FromString,
                _registered_method=True)
        self.TokenUpdateStream = channel.unary_stream(
                '/wisdomise.rpc.network_radar.NetworkRadarService/TokenUpdateStream',
                request_serializer=network__radar__pb2.TokenUpdateStreamRequest.SerializeToString,
                response_deserializer=network__radar__pb2.TokenUpdateStreamResponse.FromString,
                _registered_method=True)
        self.TrenchProtocols = channel.unary_unary(
                '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchProtocols',
                request_serializer=network__radar__pb2.Empty.SerializeToString,
                response_deserializer=network__radar__pb2.ProtocolResponse.FromString,
                _registered_method=True)


class NetworkRadarServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrenchNewBornStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrenchFinalStretchStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrenchMigratedStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CoinDetailStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopTraderStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopHolderStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TokenUpdateStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrenchProtocols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkRadarServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrenchNewBornStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TrenchNewBornStream,
                    request_deserializer=network__radar__pb2.TrenchStreamRequest.FromString,
                    response_serializer=network__radar__pb2.TrenchStreamResponse.SerializeToString,
            ),
            'TrenchFinalStretchStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TrenchFinalStretchStream,
                    request_deserializer=network__radar__pb2.TrenchStreamRequest.FromString,
                    response_serializer=network__radar__pb2.TrenchStreamResponse.SerializeToString,
            ),
            'TrenchMigratedStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TrenchMigratedStream,
                    request_deserializer=network__radar__pb2.TrenchStreamRequest.FromString,
                    response_serializer=network__radar__pb2.TrenchStreamResponse.SerializeToString,
            ),
            'CoinDetailStream': grpc.unary_stream_rpc_method_handler(
                    servicer.CoinDetailStream,
                    request_deserializer=network__radar__pb2.CoinDetailStreamRequest.FromString,
                    response_serializer=network__radar__pb2.CoinDetailStreamResponse.SerializeToString,
            ),
            'TopTraderStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TopTraderStream,
                    request_deserializer=network__radar__pb2.TopTraderStreamRequest.FromString,
                    response_serializer=network__radar__pb2.TopTraderStreamResponse.SerializeToString,
            ),
            'TopHolderStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TopHolderStream,
                    request_deserializer=network__radar__pb2.TopHolderStreamRequest.FromString,
                    response_serializer=network__radar__pb2.TopHolderStreamResponse.SerializeToString,
            ),
            'TokenUpdateStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TokenUpdateStream,
                    request_deserializer=network__radar__pb2.TokenUpdateStreamRequest.FromString,
                    response_serializer=network__radar__pb2.TokenUpdateStreamResponse.SerializeToString,
            ),
            'TrenchProtocols': grpc.unary_unary_rpc_method_handler(
                    servicer.TrenchProtocols,
                    request_deserializer=network__radar__pb2.Empty.FromString,
                    response_serializer=network__radar__pb2.ProtocolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wisdomise.rpc.network_radar.NetworkRadarService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('wisdomise.rpc.network_radar.NetworkRadarService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NetworkRadarService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrenchNewBornStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchNewBornStream',
            network__radar__pb2.TrenchStreamRequest.SerializeToString,
            network__radar__pb2.TrenchStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrenchFinalStretchStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchFinalStretchStream',
            network__radar__pb2.TrenchStreamRequest.SerializeToString,
            network__radar__pb2.TrenchStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrenchMigratedStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchMigratedStream',
            network__radar__pb2.TrenchStreamRequest.SerializeToString,
            network__radar__pb2.TrenchStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CoinDetailStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/CoinDetailStream',
            network__radar__pb2.CoinDetailStreamRequest.SerializeToString,
            network__radar__pb2.CoinDetailStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TopTraderStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/TopTraderStream',
            network__radar__pb2.TopTraderStreamRequest.SerializeToString,
            network__radar__pb2.TopTraderStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TopHolderStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/TopHolderStream',
            network__radar__pb2.TopHolderStreamRequest.SerializeToString,
            network__radar__pb2.TopHolderStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TokenUpdateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/TokenUpdateStream',
            network__radar__pb2.TokenUpdateStreamRequest.SerializeToString,
            network__radar__pb2.TokenUpdateStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrenchProtocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wisdomise.rpc.network_radar.NetworkRadarService/TrenchProtocols',
            network__radar__pb2.Empty.SerializeToString,
            network__radar__pb2.ProtocolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
