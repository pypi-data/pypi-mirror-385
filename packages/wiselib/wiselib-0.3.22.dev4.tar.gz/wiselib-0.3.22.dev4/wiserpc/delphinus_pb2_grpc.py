# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import delphinus_pb2 as delphinus__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in delphinus_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DelphinusServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SwapsStream = channel.unary_stream(
                '/wisdomise.rpc.delphinus.DelphinusService/SwapsStream',
                request_serializer=delphinus__pb2.SwapsStreamRequest.SerializeToString,
                response_deserializer=delphinus__pb2.SwapsStreamResponse.FromString,
                _registered_method=True)
        self.SwapsHistory = channel.unary_unary(
                '/wisdomise.rpc.delphinus.DelphinusService/SwapsHistory',
                request_serializer=delphinus__pb2.SwapsHistoryRequest.SerializeToString,
                response_deserializer=delphinus__pb2.SwapsHistoryResponse.FromString,
                _registered_method=True)
        self.GetCandles = channel.unary_unary(
                '/wisdomise.rpc.delphinus.DelphinusService/GetCandles',
                request_serializer=delphinus__pb2.GetCandlesRequest.SerializeToString,
                response_deserializer=delphinus__pb2.GetCandlesResponse.FromString,
                _registered_method=True)
        self.GetLastCandle = channel.unary_unary(
                '/wisdomise.rpc.delphinus.DelphinusService/GetLastCandle',
                request_serializer=delphinus__pb2.GetLastCandleRequest.SerializeToString,
                response_deserializer=delphinus__pb2.GetLastCandleResponse.FromString,
                _registered_method=True)
        self.LastCandleStream = channel.unary_stream(
                '/wisdomise.rpc.delphinus.DelphinusService/LastCandleStream',
                request_serializer=delphinus__pb2.LastCandleStreamRequest.SerializeToString,
                response_deserializer=delphinus__pb2.LastCandleStreamResponse.FromString,
                _registered_method=True)
        self.GetCandlesBatch = channel.unary_unary(
                '/wisdomise.rpc.delphinus.DelphinusService/GetCandlesBatch',
                request_serializer=delphinus__pb2.GetCandlesBatchRequest.SerializeToString,
                response_deserializer=delphinus__pb2.GetCandlesBatchResponse.FromString,
                _registered_method=True)


class DelphinusServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SwapsStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwapsHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCandles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLastCandle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LastCandleStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCandlesBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DelphinusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SwapsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.SwapsStream,
                    request_deserializer=delphinus__pb2.SwapsStreamRequest.FromString,
                    response_serializer=delphinus__pb2.SwapsStreamResponse.SerializeToString,
            ),
            'SwapsHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.SwapsHistory,
                    request_deserializer=delphinus__pb2.SwapsHistoryRequest.FromString,
                    response_serializer=delphinus__pb2.SwapsHistoryResponse.SerializeToString,
            ),
            'GetCandles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCandles,
                    request_deserializer=delphinus__pb2.GetCandlesRequest.FromString,
                    response_serializer=delphinus__pb2.GetCandlesResponse.SerializeToString,
            ),
            'GetLastCandle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLastCandle,
                    request_deserializer=delphinus__pb2.GetLastCandleRequest.FromString,
                    response_serializer=delphinus__pb2.GetLastCandleResponse.SerializeToString,
            ),
            'LastCandleStream': grpc.unary_stream_rpc_method_handler(
                    servicer.LastCandleStream,
                    request_deserializer=delphinus__pb2.LastCandleStreamRequest.FromString,
                    response_serializer=delphinus__pb2.LastCandleStreamResponse.SerializeToString,
            ),
            'GetCandlesBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCandlesBatch,
                    request_deserializer=delphinus__pb2.GetCandlesBatchRequest.FromString,
                    response_serializer=delphinus__pb2.GetCandlesBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wisdomise.rpc.delphinus.DelphinusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('wisdomise.rpc.delphinus.DelphinusService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DelphinusService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SwapsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.delphinus.DelphinusService/SwapsStream',
            delphinus__pb2.SwapsStreamRequest.SerializeToString,
            delphinus__pb2.SwapsStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SwapsHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wisdomise.rpc.delphinus.DelphinusService/SwapsHistory',
            delphinus__pb2.SwapsHistoryRequest.SerializeToString,
            delphinus__pb2.SwapsHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCandles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wisdomise.rpc.delphinus.DelphinusService/GetCandles',
            delphinus__pb2.GetCandlesRequest.SerializeToString,
            delphinus__pb2.GetCandlesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLastCandle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wisdomise.rpc.delphinus.DelphinusService/GetLastCandle',
            delphinus__pb2.GetLastCandleRequest.SerializeToString,
            delphinus__pb2.GetLastCandleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LastCandleStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wisdomise.rpc.delphinus.DelphinusService/LastCandleStream',
            delphinus__pb2.LastCandleStreamRequest.SerializeToString,
            delphinus__pb2.LastCandleStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCandlesBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wisdomise.rpc.delphinus.DelphinusService/GetCandlesBatch',
            delphinus__pb2.GetCandlesBatchRequest.SerializeToString,
            delphinus__pb2.GetCandlesBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
