"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class AssetDetails(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    IMAGE_FIELD_NUMBER: builtins.int
    DETECTED_AT_FIELD_NUMBER: builtins.int
    TOTAL_SUPPLY_FIELD_NUMBER: builtins.int
    name: builtins.str
    image: builtins.str
    total_supply: builtins.str
    @property
    def detected_at(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        image: builtins.str = ...,
        detected_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        total_supply: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["detected_at", b"detected_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["detected_at", b"detected_at", "image", b"image", "name", b"name", "total_supply", b"total_supply"]) -> None: ...

global___AssetDetails = AssetDetails

@typing.final
class SwapsStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NETWORK_FIELD_NUMBER: builtins.int
    ASSET_FIELD_NUMBER: builtins.int
    WALLETS_FIELD_NUMBER: builtins.int
    ENRICH_ASSET_DETAILS_FIELD_NUMBER: builtins.int
    network: builtins.str
    asset: builtins.str
    enrich_asset_details: builtins.bool
    @property
    def wallets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        network: builtins.str = ...,
        asset: builtins.str | None = ...,
        wallets: collections.abc.Iterable[builtins.str] | None = ...,
        enrich_asset_details: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_asset", b"_asset", "asset", b"asset"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_asset", b"_asset", "asset", b"asset", "enrich_asset_details", b"enrich_asset_details", "network", b"network", "wallets", b"wallets"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_asset", b"_asset"]) -> typing.Literal["asset"] | None: ...

global___SwapsStreamRequest = SwapsStreamRequest

@typing.final
class Swap(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SYMBOL_ID_FIELD_NUMBER: builtins.int
    TX_ID_FIELD_NUMBER: builtins.int
    NETWORK_FIELD_NUMBER: builtins.int
    WALLET_FIELD_NUMBER: builtins.int
    FROM_ASSET_FIELD_NUMBER: builtins.int
    TO_ASSET_FIELD_NUMBER: builtins.int
    FROM_AMOUNT_FIELD_NUMBER: builtins.int
    TO_AMOUNT_FIELD_NUMBER: builtins.int
    RELATED_AT_FIELD_NUMBER: builtins.int
    FROM_ASSET_PRICE_FIELD_NUMBER: builtins.int
    TO_ASSET_PRICE_FIELD_NUMBER: builtins.int
    FROM_ASSET_DETAILS_FIELD_NUMBER: builtins.int
    TO_ASSET_DETAILS_FIELD_NUMBER: builtins.int
    id: builtins.str
    symbol_id: builtins.int
    tx_id: builtins.str
    network: builtins.str
    wallet: builtins.str
    from_asset: builtins.str
    to_asset: builtins.str
    from_amount: builtins.str
    to_amount: builtins.str
    related_at: builtins.str
    from_asset_price: builtins.str
    to_asset_price: builtins.str
    @property
    def from_asset_details(self) -> global___AssetDetails: ...
    @property
    def to_asset_details(self) -> global___AssetDetails: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        symbol_id: builtins.int = ...,
        tx_id: builtins.str = ...,
        network: builtins.str = ...,
        wallet: builtins.str = ...,
        from_asset: builtins.str = ...,
        to_asset: builtins.str = ...,
        from_amount: builtins.str = ...,
        to_amount: builtins.str = ...,
        related_at: builtins.str = ...,
        from_asset_price: builtins.str | None = ...,
        to_asset_price: builtins.str | None = ...,
        from_asset_details: global___AssetDetails | None = ...,
        to_asset_details: global___AssetDetails | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_from_asset_details", b"_from_asset_details", "_from_asset_price", b"_from_asset_price", "_to_asset_details", b"_to_asset_details", "_to_asset_price", b"_to_asset_price", "from_asset_details", b"from_asset_details", "from_asset_price", b"from_asset_price", "to_asset_details", b"to_asset_details", "to_asset_price", b"to_asset_price"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_from_asset_details", b"_from_asset_details", "_from_asset_price", b"_from_asset_price", "_to_asset_details", b"_to_asset_details", "_to_asset_price", b"_to_asset_price", "from_amount", b"from_amount", "from_asset", b"from_asset", "from_asset_details", b"from_asset_details", "from_asset_price", b"from_asset_price", "id", b"id", "network", b"network", "related_at", b"related_at", "symbol_id", b"symbol_id", "to_amount", b"to_amount", "to_asset", b"to_asset", "to_asset_details", b"to_asset_details", "to_asset_price", b"to_asset_price", "tx_id", b"tx_id", "wallet", b"wallet"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_from_asset_details", b"_from_asset_details"]) -> typing.Literal["from_asset_details"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_from_asset_price", b"_from_asset_price"]) -> typing.Literal["from_asset_price"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_to_asset_details", b"_to_asset_details"]) -> typing.Literal["to_asset_details"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_to_asset_price", b"_to_asset_price"]) -> typing.Literal["to_asset_price"] | None: ...

global___Swap = Swap

@typing.final
class SwapsStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SWAP_FIELD_NUMBER: builtins.int
    @property
    def swap(self) -> global___Swap: ...
    def __init__(
        self,
        *,
        swap: global___Swap | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["swap", b"swap"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["swap", b"swap"]) -> None: ...

global___SwapsStreamResponse = SwapsStreamResponse

@typing.final
class SwapsHistoryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NETWORK_FIELD_NUMBER: builtins.int
    ASSET_FIELD_NUMBER: builtins.int
    PAGE_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    network: builtins.str
    asset: builtins.str
    page: builtins.int
    page_size: builtins.int
    def __init__(
        self,
        *,
        network: builtins.str = ...,
        asset: builtins.str = ...,
        page: builtins.int | None = ...,
        page_size: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_page", b"_page", "_page_size", b"_page_size", "page", b"page", "page_size", b"page_size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_page", b"_page", "_page_size", b"_page_size", "asset", b"asset", "network", b"network", "page", b"page", "page_size", b"page_size"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_page", b"_page"]) -> typing.Literal["page"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_page_size", b"_page_size"]) -> typing.Literal["page_size"] | None: ...

global___SwapsHistoryRequest = SwapsHistoryRequest

@typing.final
class SwapsHistoryResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SWAPS_FIELD_NUMBER: builtins.int
    @property
    def swaps(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Swap]: ...
    def __init__(
        self,
        *,
        swaps: collections.abc.Iterable[global___Swap] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["swaps", b"swaps"]) -> None: ...

global___SwapsHistoryResponse = SwapsHistoryResponse

@typing.final
class GetCandlesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NETWORK_FIELD_NUMBER: builtins.int
    EXCHANGE_FIELD_NUMBER: builtins.int
    PAIR_NAME_FIELD_NUMBER: builtins.int
    BASE_FIELD_NUMBER: builtins.int
    QUOTE_FIELD_NUMBER: builtins.int
    BASE_SLUG_FIELD_NUMBER: builtins.int
    QUOTE_SLUG_FIELD_NUMBER: builtins.int
    MARKET_FIELD_NUMBER: builtins.int
    CONVERT_TO_USD_FIELD_NUMBER: builtins.int
    RESOLUTION_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SKIP_EMPTY_CANDLES_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    network: builtins.str
    exchange: builtins.str
    pair_name: builtins.str
    base: builtins.str
    quote: builtins.str
    base_slug: builtins.str
    quote_slug: builtins.str
    market: builtins.str
    convert_to_usd: builtins.bool
    resolution: builtins.str
    start_time: builtins.str
    end_time: builtins.str
    skip_empty_candles: builtins.bool
    limit: builtins.int
    def __init__(
        self,
        *,
        network: builtins.str | None = ...,
        exchange: builtins.str | None = ...,
        pair_name: builtins.str | None = ...,
        base: builtins.str | None = ...,
        quote: builtins.str | None = ...,
        base_slug: builtins.str | None = ...,
        quote_slug: builtins.str | None = ...,
        market: builtins.str = ...,
        convert_to_usd: builtins.bool = ...,
        resolution: builtins.str = ...,
        start_time: builtins.str = ...,
        end_time: builtins.str = ...,
        skip_empty_candles: builtins.bool = ...,
        limit: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "exchange", b"exchange", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "convert_to_usd", b"convert_to_usd", "end_time", b"end_time", "exchange", b"exchange", "limit", b"limit", "market", b"market", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug", "resolution", b"resolution", "skip_empty_candles", b"skip_empty_candles", "start_time", b"start_time"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_base", b"_base"]) -> typing.Literal["base"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_base_slug", b"_base_slug"]) -> typing.Literal["base_slug"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_exchange", b"_exchange"]) -> typing.Literal["exchange"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_network", b"_network"]) -> typing.Literal["network"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pair_name", b"_pair_name"]) -> typing.Literal["pair_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_quote", b"_quote"]) -> typing.Literal["quote"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_quote_slug", b"_quote_slug"]) -> typing.Literal["quote_slug"] | None: ...

global___GetCandlesRequest = GetCandlesRequest

@typing.final
class GetCandlesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CANDLES_FIELD_NUMBER: builtins.int
    SYMBOL_FIELD_NUMBER: builtins.int
    @property
    def candles(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Candle]: ...
    @property
    def symbol(self) -> global___Symbol: ...
    def __init__(
        self,
        *,
        candles: collections.abc.Iterable[global___Candle] | None = ...,
        symbol: global___Symbol | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["symbol", b"symbol"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["candles", b"candles", "symbol", b"symbol"]) -> None: ...

global___GetCandlesResponse = GetCandlesResponse

@typing.final
class GetCandlesBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Symbol(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NETWORK_FIELD_NUMBER: builtins.int
        EXCHANGE_FIELD_NUMBER: builtins.int
        PAIR_NAME_FIELD_NUMBER: builtins.int
        BASE_FIELD_NUMBER: builtins.int
        QUOTE_FIELD_NUMBER: builtins.int
        BASE_SLUG_FIELD_NUMBER: builtins.int
        QUOTE_SLUG_FIELD_NUMBER: builtins.int
        MARKET_FIELD_NUMBER: builtins.int
        network: builtins.str
        exchange: builtins.str
        pair_name: builtins.str
        base: builtins.str
        quote: builtins.str
        base_slug: builtins.str
        quote_slug: builtins.str
        market: builtins.str
        def __init__(
            self,
            *,
            network: builtins.str | None = ...,
            exchange: builtins.str | None = ...,
            pair_name: builtins.str | None = ...,
            base: builtins.str | None = ...,
            quote: builtins.str | None = ...,
            base_slug: builtins.str | None = ...,
            quote_slug: builtins.str | None = ...,
            market: builtins.str = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "exchange", b"exchange", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "exchange", b"exchange", "market", b"market", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_base", b"_base"]) -> typing.Literal["base"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_base_slug", b"_base_slug"]) -> typing.Literal["base_slug"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_exchange", b"_exchange"]) -> typing.Literal["exchange"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_network", b"_network"]) -> typing.Literal["network"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_pair_name", b"_pair_name"]) -> typing.Literal["pair_name"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_quote", b"_quote"]) -> typing.Literal["quote"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_quote_slug", b"_quote_slug"]) -> typing.Literal["quote_slug"] | None: ...

    SYMBOLS_FIELD_NUMBER: builtins.int
    CONVERT_TO_USD_FIELD_NUMBER: builtins.int
    RESOLUTION_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SKIP_EMPTY_CANDLES_FIELD_NUMBER: builtins.int
    convert_to_usd: builtins.bool
    resolution: builtins.str
    start_time: builtins.str
    end_time: builtins.str
    skip_empty_candles: builtins.bool
    @property
    def symbols(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GetCandlesBatchRequest.Symbol]: ...
    def __init__(
        self,
        *,
        symbols: collections.abc.Iterable[global___GetCandlesBatchRequest.Symbol] | None = ...,
        convert_to_usd: builtins.bool = ...,
        resolution: builtins.str = ...,
        start_time: builtins.str = ...,
        end_time: builtins.str = ...,
        skip_empty_candles: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["convert_to_usd", b"convert_to_usd", "end_time", b"end_time", "resolution", b"resolution", "skip_empty_candles", b"skip_empty_candles", "start_time", b"start_time", "symbols", b"symbols"]) -> None: ...

global___GetCandlesBatchRequest = GetCandlesBatchRequest

@typing.final
class GetCandlesBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Result(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        CANDLES_FIELD_NUMBER: builtins.int
        SYMBOL_FIELD_NUMBER: builtins.int
        @property
        def candles(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Candle]: ...
        @property
        def symbol(self) -> global___Symbol: ...
        def __init__(
            self,
            *,
            candles: collections.abc.Iterable[global___Candle] | None = ...,
            symbol: global___Symbol | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["symbol", b"symbol"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["candles", b"candles", "symbol", b"symbol"]) -> None: ...

    RESULTS_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GetCandlesBatchResponse.Result]: ...
    def __init__(
        self,
        *,
        results: collections.abc.Iterable[global___GetCandlesBatchResponse.Result] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["results", b"results"]) -> None: ...

global___GetCandlesBatchResponse = GetCandlesBatchResponse

@typing.final
class GetLastCandleRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NETWORK_FIELD_NUMBER: builtins.int
    EXCHANGE_FIELD_NUMBER: builtins.int
    PAIR_NAME_FIELD_NUMBER: builtins.int
    BASE_FIELD_NUMBER: builtins.int
    QUOTE_FIELD_NUMBER: builtins.int
    BASE_SLUG_FIELD_NUMBER: builtins.int
    QUOTE_SLUG_FIELD_NUMBER: builtins.int
    MARKET_FIELD_NUMBER: builtins.int
    CONVERT_TO_USD_FIELD_NUMBER: builtins.int
    network: builtins.str
    exchange: builtins.str
    pair_name: builtins.str
    base: builtins.str
    quote: builtins.str
    base_slug: builtins.str
    quote_slug: builtins.str
    market: builtins.str
    convert_to_usd: builtins.bool
    def __init__(
        self,
        *,
        network: builtins.str | None = ...,
        exchange: builtins.str | None = ...,
        pair_name: builtins.str | None = ...,
        base: builtins.str | None = ...,
        quote: builtins.str | None = ...,
        base_slug: builtins.str | None = ...,
        quote_slug: builtins.str | None = ...,
        market: builtins.str = ...,
        convert_to_usd: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "exchange", b"exchange", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "convert_to_usd", b"convert_to_usd", "exchange", b"exchange", "market", b"market", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_base", b"_base"]) -> typing.Literal["base"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_base_slug", b"_base_slug"]) -> typing.Literal["base_slug"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_exchange", b"_exchange"]) -> typing.Literal["exchange"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_network", b"_network"]) -> typing.Literal["network"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pair_name", b"_pair_name"]) -> typing.Literal["pair_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_quote", b"_quote"]) -> typing.Literal["quote"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_quote_slug", b"_quote_slug"]) -> typing.Literal["quote_slug"] | None: ...

global___GetLastCandleRequest = GetLastCandleRequest

@typing.final
class GetLastCandleResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CANDLE_FIELD_NUMBER: builtins.int
    SYMBOL_FIELD_NUMBER: builtins.int
    @property
    def candle(self) -> global___Candle: ...
    @property
    def symbol(self) -> global___Symbol: ...
    def __init__(
        self,
        *,
        candle: global___Candle | None = ...,
        symbol: global___Symbol | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["candle", b"candle", "symbol", b"symbol"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["candle", b"candle", "symbol", b"symbol"]) -> None: ...

global___GetLastCandleResponse = GetLastCandleResponse

@typing.final
class LastCandleStreamRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NETWORK_FIELD_NUMBER: builtins.int
    EXCHANGE_FIELD_NUMBER: builtins.int
    PAIR_NAME_FIELD_NUMBER: builtins.int
    BASE_FIELD_NUMBER: builtins.int
    QUOTE_FIELD_NUMBER: builtins.int
    BASE_SLUG_FIELD_NUMBER: builtins.int
    QUOTE_SLUG_FIELD_NUMBER: builtins.int
    MARKET_FIELD_NUMBER: builtins.int
    CONVERT_TO_USD_FIELD_NUMBER: builtins.int
    network: builtins.str
    exchange: builtins.str
    pair_name: builtins.str
    base: builtins.str
    quote: builtins.str
    base_slug: builtins.str
    quote_slug: builtins.str
    market: builtins.str
    convert_to_usd: builtins.bool
    def __init__(
        self,
        *,
        network: builtins.str | None = ...,
        exchange: builtins.str | None = ...,
        pair_name: builtins.str | None = ...,
        base: builtins.str | None = ...,
        quote: builtins.str | None = ...,
        base_slug: builtins.str | None = ...,
        quote_slug: builtins.str | None = ...,
        market: builtins.str = ...,
        convert_to_usd: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "exchange", b"exchange", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_base", b"_base", "_base_slug", b"_base_slug", "_exchange", b"_exchange", "_network", b"_network", "_pair_name", b"_pair_name", "_quote", b"_quote", "_quote_slug", b"_quote_slug", "base", b"base", "base_slug", b"base_slug", "convert_to_usd", b"convert_to_usd", "exchange", b"exchange", "market", b"market", "network", b"network", "pair_name", b"pair_name", "quote", b"quote", "quote_slug", b"quote_slug"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_base", b"_base"]) -> typing.Literal["base"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_base_slug", b"_base_slug"]) -> typing.Literal["base_slug"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_exchange", b"_exchange"]) -> typing.Literal["exchange"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_network", b"_network"]) -> typing.Literal["network"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pair_name", b"_pair_name"]) -> typing.Literal["pair_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_quote", b"_quote"]) -> typing.Literal["quote"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_quote_slug", b"_quote_slug"]) -> typing.Literal["quote_slug"] | None: ...

global___LastCandleStreamRequest = LastCandleStreamRequest

@typing.final
class LastCandleStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CANDLE_FIELD_NUMBER: builtins.int
    SYMBOL_FIELD_NUMBER: builtins.int
    @property
    def candle(self) -> global___Candle: ...
    @property
    def symbol(self) -> global___Symbol: ...
    def __init__(
        self,
        *,
        candle: global___Candle | None = ...,
        symbol: global___Symbol | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_symbol", b"_symbol", "candle", b"candle", "symbol", b"symbol"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_symbol", b"_symbol", "candle", b"candle", "symbol", b"symbol"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_symbol", b"_symbol"]) -> typing.Literal["symbol"] | None: ...

global___LastCandleStreamResponse = LastCandleStreamResponse

@typing.final
class Candle(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RELATED_AT_FIELD_NUMBER: builtins.int
    RESOLUTION_FIELD_NUMBER: builtins.int
    OPEN_FIELD_NUMBER: builtins.int
    HIGH_FIELD_NUMBER: builtins.int
    LOW_FIELD_NUMBER: builtins.int
    CLOSE_FIELD_NUMBER: builtins.int
    VOLUME_FIELD_NUMBER: builtins.int
    CANDLE_COUNT_FIELD_NUMBER: builtins.int
    related_at: builtins.str
    resolution: builtins.str
    open: builtins.str
    high: builtins.str
    low: builtins.str
    close: builtins.str
    volume: builtins.str
    candle_count: builtins.int
    def __init__(
        self,
        *,
        related_at: builtins.str = ...,
        resolution: builtins.str = ...,
        open: builtins.str = ...,
        high: builtins.str = ...,
        low: builtins.str = ...,
        close: builtins.str = ...,
        volume: builtins.str = ...,
        candle_count: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["candle_count", b"candle_count", "close", b"close", "high", b"high", "low", b"low", "open", b"open", "related_at", b"related_at", "resolution", b"resolution", "volume", b"volume"]) -> None: ...

global___Candle = Candle

@typing.final
class Symbol(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    NETWORK_FIELD_NUMBER: builtins.int
    EXCHANGE_FIELD_NUMBER: builtins.int
    MARKET_FIELD_NUMBER: builtins.int
    ACTIVE_FIELD_NUMBER: builtins.int
    BASE_FIELD_NUMBER: builtins.int
    QUOTE_FIELD_NUMBER: builtins.int
    REVERSED_FIELD_NUMBER: builtins.int
    BASE_DECIMALS_FIELD_NUMBER: builtins.int
    QUOTE_DECIMALS_FIELD_NUMBER: builtins.int
    POOL_ADDRESS_FIELD_NUMBER: builtins.int
    CREATED_AT_FIELD_NUMBER: builtins.int
    UPDATED_AT_FIELD_NUMBER: builtins.int
    id: builtins.int
    name: builtins.str
    network: builtins.str
    exchange: builtins.str
    market: builtins.str
    active: builtins.bool
    base: builtins.str
    quote: builtins.str
    reversed: builtins.bool
    base_decimals: builtins.int
    quote_decimals: builtins.int
    pool_address: builtins.str
    created_at: builtins.str
    updated_at: builtins.str
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        name: builtins.str = ...,
        network: builtins.str | None = ...,
        exchange: builtins.str = ...,
        market: builtins.str = ...,
        active: builtins.bool = ...,
        base: builtins.str = ...,
        quote: builtins.str = ...,
        reversed: builtins.bool = ...,
        base_decimals: builtins.int | None = ...,
        quote_decimals: builtins.int | None = ...,
        pool_address: builtins.str | None = ...,
        created_at: builtins.str = ...,
        updated_at: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_base_decimals", b"_base_decimals", "_network", b"_network", "_pool_address", b"_pool_address", "_quote_decimals", b"_quote_decimals", "base_decimals", b"base_decimals", "network", b"network", "pool_address", b"pool_address", "quote_decimals", b"quote_decimals"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_base_decimals", b"_base_decimals", "_network", b"_network", "_pool_address", b"_pool_address", "_quote_decimals", b"_quote_decimals", "active", b"active", "base", b"base", "base_decimals", b"base_decimals", "created_at", b"created_at", "exchange", b"exchange", "id", b"id", "market", b"market", "name", b"name", "network", b"network", "pool_address", b"pool_address", "quote", b"quote", "quote_decimals", b"quote_decimals", "reversed", b"reversed", "updated_at", b"updated_at"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_base_decimals", b"_base_decimals"]) -> typing.Literal["base_decimals"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_network", b"_network"]) -> typing.Literal["network"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_pool_address", b"_pool_address"]) -> typing.Literal["pool_address"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_quote_decimals", b"_quote_decimals"]) -> typing.Literal["quote_decimals"] | None: ...

global___Symbol = Symbol
