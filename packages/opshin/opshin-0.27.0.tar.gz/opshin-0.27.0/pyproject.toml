[project]
name = "opshin"
version = "0.27.0"
description = "A simple pythonic programming language for Smart Contracts on Cardano"
authors = [{ name = "nielstron", email = "niels@opshin.dev" }]
requires-python = ">=3.9.0, <4.0"
readme = "README.md"
license = "MIT"
keywords = [
    "python",
    "language",
    "programming-language",
    "compiler",
    "validator",
    "smart-contracts",
    "cardano",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Compilers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "uplc>=1.3.1",
    "pluthon>=1.3.5",
    "pycardano>=0.13.0",
    "frozenlist2>=1.0.0",
    "ordered-set>=4.1.0",
]

[project.urls]
Repository = "https://github.com/opshin/opshin"
Documentation = "https://opshin.opshin.dev/"

[project.scripts]
opshin = "opshin.__main__:main"

[dependency-groups]
dev = [
    "hypothesis>=6.98.2",
    "parameterized>=0.9.0",
    "black>=25.1.0,<26",
    "pre-commit>=3.3.2",
    "coverage>=7.0",
    "pytest>=7.3.1",
    "pyyaml>=6.0.3,<7",
    "pytest-xdist",
]

[tool.hatch.build.targets.sdist]
include = ["opshin"]

[tool.hatch.build.targets.wheel]
include = ["opshin"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.coverage.run]
branch = true
source = ["opshin"]
omit = [
    "opshin/prelude.py", # Prelude is not meant to be run directly
    "opshin/prelude_v3.py", # Prelude is not meant to be run directly
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain about missing type-checking-only code:
    "if typing\\.TYPE_CHECKING:",
    "if TYPE_CHECKING:",

    # Don't complain about wrapped builtins, they aren't run:
    "@wraps_builtin",

    # Don't complain about super-class calls, they mostly just raise
    "return super\\(.*\\)\\.\\w+\\(",
    ]

ignore_errors = true

