[project]
name = "gptme"
version = "0.29.0"
description = "Powerful AI agent for coding and general tasks. Terminal-first with shell, code execution, file editing, web browsing, vision, computer use. Unconstrained."
authors = [
    { name = "Erik BjÃ¤reholt", email = "erik@bjareho.lt" },
]
readme = "README.md"
license = "MIT"
dynamic = ["dependencies"]  # "version"

[project.urls]
Homepage = "https://gptme.org/"
Repository = "https://github.com/gptme/gptme"
Documentation = "https://gptme.org/docs/"
Issues = "https://github.com/gptme/gptme/issues"

[project.scripts]
gptme = "gptme.cli:main"
gptme-server = "gptme.server.cli:main"
gptme-eval = "gptme.eval.main:main"
gptme-util = "gptme.util.cli:main"
gptme-nc = "gptme.ncurses:main"
gptme-wut = "gptme.wut:main"
gptme-dspy = "gptme.eval.dspy:main"

[tool.poetry]
packages = [
    { include = "gptme" },
]
include = ["gptme/server/static/**/*", "media/logo.png"]

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.0"
click-default-group = "^1.2.4"
python-dotenv = "^1.0.0"
rich = "^13.5.2"
tabulate = "*"
pick = "^2.2.0"
tiktoken = ">=0.7"
tomlkit = "*"
typing-extensions = "*"
platformdirs = "^4.3"
lxml = "*"
json-repair = "^0.32.0"
mcp = "^1.13.0"
questionary = "^2.1.0"
deprecated = "^1.2.18"
python-dateutil = "^2.9.0.post0"
pyyaml = "^6.0.3"

# providers
openai = "^1.0"
anthropic = "^0.47"

# tools
ipython = "^8.17.2"
bashlex = "^0.18"
playwright = {version = "1.49.1", optional=true}  # version constrained due to annoying to have to run `playwright install` on every update
youtube_transcript_api = {version = "^0.6.1", optional=true}
python-xlib = {version = "^0.33", optional=true}  # for X11 interaction

# evals
multiprocessing-logging = "^0.3.4"
dspy = {version = "^3.0.2", python = "<=3.13", optional=true}

# datascience essentials
pillow = {version = "*"}  # non-optional, needed for image scaling in vision
matplotlib = {version = "*", optional=true}
pandas = {version = "*", optional=true}
numpy = {version = "*", optional=true}
scipy = {version="*", optional=true}
sounddevice = {version="^0.5.1", optional=true}

# server
flask = {version = "^3.0", optional=true}
flask-cors = {version = ">=4,<6", optional=true}
pydantic = "^2.11.7"

# telemetry
opentelemetry-api = {version = "^1.20.0", optional=true}
opentelemetry-sdk = {version = "^1.20.0", optional=true}
opentelemetry-instrumentation-flask = {version = "^0.55b1", optional=true}
opentelemetry-instrumentation-requests = {version = "^0.55b1", optional=true}
opentelemetry-exporter-otlp = {version = "^1.34.1", optional=true}
opentelemetry-exporter-prometheus = {version = "^0.55b1", optional=true}
opentelemetry-instrumentation-anthropic = {version="^0.47.3", optional=true}
opentelemetry-instrumentation-openai = {version="^0.47.3", optional=true}

[tool.poetry.group.dev.dependencies]
# lint
mypy = "*"
ruff = "*"
pylint = "*"
pre-commit = "*"
radon = "*"
openapi-spec-validator = "^0.7.2"

# test
pytest = "^8.0"
pytest-cov = "*"
pytest-xdist = "^3.5.0"
pytest-profiling = "^1.7.0"
pytest-dotenv = "^0.5.2"
pytest-timeout = "^2.2.0"
pytest-retry = "^1.6.3"
pytest-mock = "*"
greenlet = "*"  # dependency of playwright, but needed for coverage

# build
pyinstaller = {version="^6.15", python=">=3.10,<3.15"}  # not yet compatible with Python 3.15+

# docs
sphinx = "^8.0"
sphinx-click = "^6.0"
sphinx-book-theme = "^1.0.1"
sphinx-sitemap = "^2.6.0"
sphinx-autobuild = "^2024.10.3"
sphinx-llms-txt = "^0.2.4"
sphinxcontrib-programoutput = "*"
sphinxcontrib-asciinema = "*"
sphinxcontrib-mermaid = "^1.0.0"
myst-parser = "*"

# types
types-tabulate = "*"
types-lxml = "*"

# needed for typechecking scripts
tomli = "^2.2.1"

[tool.poetry.extras]
server = ["flask", "flask-cors", "pydantic"]
browser = ["playwright"]
datascience = ["matplotlib", "pandas", "numpy"]  # pillow (non-opt)
computer = []  # pillow (non-opt)
youtube = ["youtube_transcript_api"]
tts = ["sounddevice", "scipy", "numpy"]
pyinstaller = ["pyinstaller"]
telemetry = [
    "opentelemetry-api", "opentelemetry-sdk",
    "opentelemetry-exporter-otlp", "opentelemetry-exporter-prometheus",
    "opentelemetry-instrumentation-flask", "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-anthropic", "opentelemetry-instrumentation-openai",
]
dspy = ["dspy"]
all = [
    # server
    "flask", "flask-cors", "pydantic",
    # browser
    "playwright",
    # datascience
    "matplotlib", "pandas", "numpy", "scipy", # "pillow",
    # computer
    # "pillow",
    # youtube transcript tool
    "youtube_transcript_api",
    # tts
    "sounddevice", "scipy", "numpy",
    # dspy prompt optimization
    "dspy",
    # telemetry
    "opentelemetry-api", "opentelemetry-sdk",
    "opentelemetry-exporter-otlp", "opentelemetry-exporter-prometheus",
    "opentelemetry-instrumentation-flask", "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-anthropic", "opentelemetry-instrumentation-openai",
]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "B", "UP", "I"]
ignore = ["E402", "E501", "B905"]
#fixable = ["ALL"]
#unfixable = ["B"]

[tool.mypy]
check_untyped_defs = true
disable_error_code = "import-untyped"

[[tool.mypy.overrides]]
module = "tomli_w"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "opentelemetry.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "numpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sounddevice.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "flask.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "eval: marks tests as evals (deselect with '-m \"not eval\"'), these may fail, and will not run in CI",
    "serial",
    "timeout: marks tests with timeout value in seconds",
    "requires_api: marks tests that require API access",
]

[tool.coverage.run]
# Needed to get playwright to play nice with coverage
# https://stackoverflow.com/a/28589618/965332
concurrency = ["greenlet"]
#branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain if tests don't hit defensive assertion code
    "raise NotImplementedError",

    # Don't complain about interactive stuff
    "except KeyboardInterrupt:",
    "if interactive:",
    "if ask:",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"
