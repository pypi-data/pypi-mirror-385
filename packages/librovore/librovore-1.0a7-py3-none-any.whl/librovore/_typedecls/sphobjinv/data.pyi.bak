"""
This type stub file was generated by pyright.
"""

import attr
from abc import ABCMeta, abstractmethod
from enum import Enum

r"""``sphobjinv`` *data classes for individual objects*.

``sphobjinv`` is a toolkit for manipulation and inspection of
Sphinx |objects.inv| files.

**Author**
    Brian Skinn (brian.skinn@gmail.com)

**File Created**
    7 Nov 2017

**Copyright**
    \(c) Brian Skinn 2016-2025

**Source Repository**
    https://github.com/bskinn/sphobjinv

**Documentation**
    https://sphobjinv.readthedocs.io/en/stable

**License**
    Code: `MIT License`_

    Docs & Docstrings: |CC BY 4.0|_

    See |license_txt|_ for full license terms.

**Members**

"""
class DataFields(Enum):
    """|Enum| for the fields of |objects.inv| data objects."""
    Name = ...
    Domain = ...
    Role = ...
    Priority = ...
    URI = ...
    DispName = ...


class SuperDataObj(metaclass=ABCMeta):
    """Abstract base superclass defining common methods &c. for data objects.

    Intended only to be subclassed
    by :class:`DataObjBytes` and :class:`DataObjStr`,
    to allow definition of common methods, properties, etc.
    all in one place.

    Where marked with |dag|,
    :class:`DataObjBytes` instances will return |bytes| values, whereas
    :class:`DataObjStr` instances will return |str| values.

    """
    data_line_fmt = ...
    rst_fmt = ...
    def __str__(self) -> str:
        """Return pretty string representation."""
        ...
    
    @property
    @abstractmethod
    def name(self): # -> None:
        r"""Object name, as recognized internally by Sphinx\ |dag|."""
        ...
    
    @property
    @abstractmethod
    def domain(self): # -> None:
        r"""Sphinx domain containing the object\ |dag|."""
        ...
    
    @property
    @abstractmethod
    def role(self): # -> None:
        r"""Sphinx role to be used when referencing the object\ |dag|."""
        ...
    
    @property
    @abstractmethod
    def priority(self): # -> None:
        r"""Object search priority, as handled internally by Sphinx\ |dag|."""
        ...
    
    @property
    @abstractmethod
    def uri(self): # -> None:
        r"""Object URI relative to documentation root\ |dag|.

        Possibly abbreviated; see :ref:`here <syntax_shorthand>`.

        """
        ...
    
    @property
    @abstractmethod
    def dispname(self): # -> None:
        r"""Object default name in rendered documentation\ |dag|.

        Possibly abbreviated; see :ref:`here <syntax_shorthand>`.

        """
        ...
    
    @property
    @abstractmethod
    def uri_abbrev(self): # -> None:
        r"""Abbreviation character(s) for URI tail\ |dag|.

        ``'$'`` or ``b'$'``
        for :doc:`version 2 </syntax>` |objects.inv| files.

        """
        ...
    
    @property
    @abstractmethod
    def dispname_abbrev(self): # -> None:
        r"""Abbreviation character(s) for display name\ |dag|.

        ``'-'`` or ``b'-'``
        for :doc:`version 2 </syntax>` |objects.inv| files.

        """
        ...
    
    @property
    @abstractmethod
    def as_str(self, s): # -> None:
        """:class:`DataObjStr` version of instance."""
        ...
    
    @property
    @abstractmethod
    def as_bytes(self, s): # -> None:
        """:class:`DataObjBytes` version of instance."""
        ...
    
    @property
    def uri_contracted(self): # -> None:
        """Object-relative URI, contracted with `uri_abbrev`."""
        ...
    
    @property
    def uri_expanded(self): # -> None:
        """Object-relative URI, with `uri_abbrev` expanded."""
        ...
    
    @property
    def dispname_contracted(self): # -> None:
        """Object display name, contracted with `dispname_abbrev`."""
        ...
    
    @property
    def dispname_expanded(self): # -> None:
        """Object display name, with `dispname_abbrev` expanded."""
        ...
    
    @property
    def as_rst(self): # -> str:
        r"""|str| reST reference-like object representation.

        Typically will NOT function as a proper reST reference
        in Sphinx source (e.g., a `role` of
        |cour|\ function\ |/cour| must be referenced using
        |cour|\ \:func\:\ |/cour| for the
        |cour|\ py\ |/cour| domain).
        """
        ...
    
    def json_dict(self, *, expand=..., contract=...): # -> dict[str, Any]:
        r"""Return the object data formatted as a flat |dict|.

        The returned |dict| is constructed such that it matches the
        relevant subschema of :data:`sphobjinv.schema.json_schema`, to
        facilitate implementation of
        :meth:`Inventory.json_dict()
        <sphobjinv.inventory.Inventory.json_dict>`.

        The |dict|\ s returned by :class:`~sphobjinv.data.DataObjBytes` and
        :class:`~sphobjinv.data.DataObjStr` both have |str|
        keys, but they have |bytes| and |str| values, respectively.
        The |dict| keys are identical to the |str| values of the
        :data:`~sphobjinv.data.DataFields` |Enum| members.

        Calling with both `expand` and `contract` as |True| is invalid.

        Parameters
        ----------
        expand

            |bool| *(optional)* -- Return |dict| with any
            :data:`~sphobjinv.data.SuperDataObj.uri` or
            :data:`~sphobjinv.data.SuperDataObj.dispname`
            abbreviations expanded

        contract

            |bool| *(optional)* -- Return |dict| with abbreviated
            :data:`~sphobjinv.data.SuperDataObj.uri` and
            :data:`~sphobjinv.data.SuperDataObj.dispname`

        Returns
        -------
        d

            |dict| -- Object data

        Raises
        ------
        ValueError

            If both `expand` and `contract` are |True|

        """
        ...
    
    def data_line(self, *, expand=..., contract=...): # -> None:
        """Compose plaintext |objects.inv| data line from instance contents.

        The format of the resulting data line is given by
        :data:`~sphobjinv.data.SuperDataObj.data_line_fmt`.
        :class:`~sphobjinv.data.DataObjBytes` and
        :class:`~sphobjinv.data.DataObjStr` instances generate data lines
        as |bytes| and |str|, respectively.

        Calling with both `expand` and `contract` as |True| is invalid.

        Parameters
        ----------
        expand

            |bool| *(optional)* -- Return data line with any
            :data:`~sphobjinv.data.SuperDataObj.uri` or
            :data:`~sphobjinv.data.SuperDataObj.dispname`
            abbreviations expanded

        contract

            |bool| *(optional)* -- Return data line with abbreviated
            :data:`~sphobjinv.data.SuperDataObj.uri` and
            :data:`~sphobjinv.data.SuperDataObj.dispname`

        Returns
        -------
        dl

            |bytes| (for :class:`~sphobjinv.data.DataObjBytes`)
            or |str| (for :class:`~sphobjinv.data.DataObjStr`)
            -- Object data line

        Raises
        ------
        ValueError

            If both `expand` and `contract` are |True|

        """
        ...
    
    def evolve(self, **kwargs): # -> Self:
        r"""Create a new instance with changes applied.

        This helper method provides a concise means for creating new
        instances with only a subset of changed data fields.

        The names of any `kwargs` MUST be keys of the |dict|\ s
        generated by :meth:`~sphobjinv.data.SuperDataObj.json_dict`.

        Parameters
        ----------
        kwargs

            |str| or |bytes| -- Revised value(s) to use in the new
            instance for the passed keyword argument(s).

        Returns
        -------
        dobj

            :class:`~sphobjinv.data.DataObjBytes` or
            :class:`~sphobjinv.data.DataObjStr`
            -- New instance with updated data

        """
        ...
    


@attr.s(slots=True)
class DataObjStr(SuperDataObj):
    """:class:`SuperDataObj` subclass generating |str| object data.

    Two :class:`DataObjStr` instances will test equal if all of
    :attr:`~sphobjinv.data.SuperDataObj.name`,
    :attr:`~sphobjinv.data.SuperDataObj.domain`,
    :attr:`~sphobjinv.data.SuperDataObj.role`,
    :attr:`~sphobjinv.data.SuperDataObj.priority`,
    :attr:`~sphobjinv.data.SuperDataObj.uri`,
    and :attr:`~sphobjinv.data.SuperDataObj.dispname`
    are equal between them.

    .. doctest:: dataobjstr

        >>> obj = soi.DataObjStr(
        ...     name="foo",
        ...     domain="py",
        ...     role="method",
        ...     priority="1",
        ...     uri="$",
        ...     dispname="-",
        ... )
        >>> obj == obj
        True
        >>> obj == obj.evolve(name="quux")
        False

    .. versionchanged:: 2.1
        Previously, attempts to compare instances resulted in a
        :exc:`RecursionError`.

    """
    uri_abbrev = ...
    dispname_abbrev = ...
    name = ...
    domain = ...
    role = ...
    priority = ...
    uri = ...
    dispname = ...
    as_bytes = ...
    as_str = ...


@attr.s(slots=True)
class DataObjBytes(SuperDataObj):
    """:class:`SuperDataObj` subclass generating |bytes| object data.

    Two :class:`DataObjBytes` instances will test equal if all of
    :attr:`~sphobjinv.data.SuperDataObj.name`,
    :attr:`~sphobjinv.data.SuperDataObj.domain`,
    :attr:`~sphobjinv.data.SuperDataObj.role`,
    :attr:`~sphobjinv.data.SuperDataObj.priority`,
    :attr:`~sphobjinv.data.SuperDataObj.uri`,
    and :attr:`~sphobjinv.data.SuperDataObj.dispname`
    are equal between them.

    .. doctest:: dataobjbytes

        >>> obj = soi.DataObjBytes(
        ...     name=b"foo",
        ...     domain=b"py",
        ...     role=b"method",
        ...     priority=b"1",
        ...     uri=b"$",
        ...     dispname=b"-",
        ... )
        >>> obj == obj
        True
        >>> obj == obj.evolve(name=b"quux")
        False

    .. versionchanged:: 2.1
        Previously, attempts to compare instances resulted in a
        :exc:`RecursionError`.

    """
    uri_abbrev = ...
    dispname_abbrev = ...
    name = ...
    domain = ...
    role = ...
    priority = ...
    uri = ...
    dispname = ...
    as_str = ...
    as_bytes = ...


