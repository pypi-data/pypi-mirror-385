{
_TestParameters(profile_name='tagless', value=None): _TestOutput(payload='null', round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value=None, tags=(Deprecated(msg='x'),)): _TestOutput(payload='null', round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value=True): _TestOutput(payload='true', round_trip=True, tags=()),
_TestParameters(profile_name='tagless', value=True, tags=(Deprecated(msg='x'),)): _TestOutput(payload='true', round_trip=True, tags=()),
_TestParameters(profile_name='tagless', value=1): _TestOutput(payload='1', round_trip=1, tags=()),
_TestParameters(profile_name='tagless', value=1, tags=(Deprecated(msg='x'),)): _TestOutput(payload='1', round_trip=1, tags=()),
_TestParameters(profile_name='tagless', value=1.1): _TestOutput(payload='1.1', round_trip=1.1, tags=()),
_TestParameters(profile_name='tagless', value=1.1, tags=(Deprecated(msg='x'),)): _TestOutput(payload='1.1', round_trip=1.1, tags=()),
_TestParameters(profile_name='tagless', value='hi'): _TestOutput(payload='"hi"', round_trip='hi', tags=()),
_TestParameters(profile_name='tagless', value='hi', tags=(Deprecated(msg='x'),)): _TestOutput(payload='"hi"', round_trip='hi', tags=()),
_TestParameters(profile_name='tagless', value='汉语'): _TestOutput(payload='"\\u6c49\\u8bed"', round_trip='汉语', tags=()),
_TestParameters(profile_name='tagless', value='汉语', tags=(Deprecated(msg='x'),)): _TestOutput(payload='"\\u6c49\\u8bed"', round_trip='汉语', tags=()),
_TestParameters(profile_name='tagless', value=b'hi'): _TestOutput(payload=TypeError("Object of type 'bytes' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value=b'hi', tags=(Deprecated(msg='x'),)): _TestOutput(payload=TypeError("Object of type '_AnsibleTaggedBytes' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value=datetime.datetime(2024, 1, 2, 3, 4, 5, 6, fold=1, tzinfo=datetime.timezone.utc)): _TestOutput(payload='"2024-01-02T03:04:05.000006+00:00"', round_trip='2024-01-02T03:04:05.000006+00:00', tags=()),
_TestParameters(profile_name='tagless', value=datetime.datetime(2024, 1, 2, 3, 4, 5, 6, fold=1, tzinfo=datetime.timezone.utc), tags=(Deprecated(msg='x'),)): _TestOutput(payload='"2024-01-02T03:04:05.000006+00:00"', round_trip='2024-01-02T03:04:05.000006+00:00', tags=()),
_TestParameters(profile_name='tagless', value=datetime.time(1, 2, 3, 4, tzinfo=datetime.timezone.utc, fold=1)): _TestOutput(payload='"01:02:03.000004+00:00"', round_trip='01:02:03.000004+00:00', tags=()),
_TestParameters(profile_name='tagless', value=datetime.time(1, 2, 3, 4, tzinfo=datetime.timezone.utc, fold=1), tags=(Deprecated(msg='x'),)): _TestOutput(payload='"01:02:03.000004+00:00"', round_trip='01:02:03.000004+00:00', tags=()),
_TestParameters(profile_name='tagless', value=datetime.date(2024, 1, 2)): _TestOutput(payload='"2024-01-02"', round_trip='2024-01-02', tags=()),
_TestParameters(profile_name='tagless', value=datetime.date(2024, 1, 2), tags=(Deprecated(msg='x'),)): _TestOutput(payload='"2024-01-02"', round_trip='2024-01-02', tags=()),
_TestParameters(profile_name='tagless', value=(1,)): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value=(1,), tags=(Deprecated(msg='x'),)): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value=[1]): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value=[1], tags=(Deprecated(msg='x'),)): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value=[1], lazy=True): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value=[1], tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value=CustomSequence([1])): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value=CustomSequence([1]), tags=(Deprecated(msg='x'),)): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value='hello'): _TestOutput(payload='"hello"', round_trip='hello', tags=()),
_TestParameters(profile_name='tagless', value='hello', tags=(Deprecated(msg='x'),)): _TestOutput(payload='"hello"', round_trip='hello', tags=()),
_TestParameters(profile_name='tagless', value=42): _TestOutput(payload='42', round_trip=42, tags=()),
_TestParameters(profile_name='tagless', value=42, tags=(Deprecated(msg='x'),)): _TestOutput(payload='42', round_trip=42, tags=()),
_TestParameters(profile_name='tagless', value=42.0): _TestOutput(payload='42.0', round_trip=42.0, tags=()),
_TestParameters(profile_name='tagless', value=42.0, tags=(Deprecated(msg='x'),)): _TestOutput(payload='42.0', round_trip=42.0, tags=()),
_TestParameters(profile_name='tagless', value={1}): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value={1}, tags=(Deprecated(msg='x'),)): _TestOutput(payload='[1]', round_trip=[1], tags=()),
_TestParameters(profile_name='tagless', value={'a': 1}): _TestOutput(payload='{"a": 1}', round_trip={'a': 1}, tags=()),
_TestParameters(profile_name='tagless', value={'a': 1}, tags=(Deprecated(msg='x'),)): _TestOutput(payload='{"a": 1}', round_trip={'a': 1}, tags=()),
_TestParameters(profile_name='tagless', value={'a': 1}, lazy=True): _TestOutput(payload='{"a": 1}', round_trip={'a': 1}, tags=()),
_TestParameters(profile_name='tagless', value={'a': 1}, tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload='{"a": 1}', round_trip={'a': 1}, tags=()),
_TestParameters(profile_name='tagless', value=CustomMapping({'a': 1})): _TestOutput(payload='{"a": 1}', round_trip={'a': 1}, tags=()),
_TestParameters(profile_name='tagless', value=CustomMapping({'a': 1}), tags=(Deprecated(msg='x'),)): _TestOutput(payload='{"a": 1}', round_trip={'a': 1}, tags=()),
_TestParameters(profile_name='tagless', value={(1, 2): 'three'}): _TestOutput(payload=TypeError("Key of type 'tuple' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={(1, 2): 'three'}, tags=(Deprecated(msg='x'),)): _TestOutput(payload=TypeError("Key of type 'tuple' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={(1, 2): 'three'}, lazy=True): _TestOutput(payload=TypeError("Key of type 'tuple' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={(1, 2): 'three'}, tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload=TypeError("Key of type 'tuple' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={frozenset({1, 2}): 'three'}): _TestOutput(payload=TypeError("Key of type 'frozenset' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={frozenset({1, 2}): 'three'}, tags=(Deprecated(msg='x'),)): _TestOutput(payload=TypeError("Key of type 'frozenset' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={frozenset({1, 2}): 'three'}, lazy=True): _TestOutput(payload=TypeError("Key of type 'frozenset' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={frozenset({1, 2}): 'three'}, tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload=TypeError("Key of type 'frozenset' is not JSON serializable by the 'tagless' profile."), round_trip=None, tags=()),
_TestParameters(profile_name='tagless', value={1: 'two'}): _TestOutput(payload='{"1": "two"}', round_trip={'1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={1: 'two'}, tags=(Deprecated(msg='x'),)): _TestOutput(payload='{"1": "two"}', round_trip={'1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={1: 'two'}, lazy=True): _TestOutput(payload='{"1": "two"}', round_trip={'1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={1: 'two'}, tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload='{"1": "two"}', round_trip={'1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={1.1: 'two'}): _TestOutput(payload='{"1.1": "two"}', round_trip={'1.1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={1.1: 'two'}, tags=(Deprecated(msg='x'),)): _TestOutput(payload='{"1.1": "two"}', round_trip={'1.1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={1.1: 'two'}, lazy=True): _TestOutput(payload='{"1.1": "two"}', round_trip={'1.1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={1.1: 'two'}, tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload='{"1.1": "two"}', round_trip={'1.1': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={True: 'two'}): _TestOutput(payload='{"true": "two"}', round_trip={'true': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={True: 'two'}, tags=(Deprecated(msg='x'),)): _TestOutput(payload='{"true": "two"}', round_trip={'true': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={True: 'two'}, lazy=True): _TestOutput(payload='{"true": "two"}', round_trip={'true': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={True: 'two'}, tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload='{"true": "two"}', round_trip={'true': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={None: 'two'}): _TestOutput(payload='{"null": "two"}', round_trip={'null': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={None: 'two'}, tags=(Deprecated(msg='x'),)): _TestOutput(payload='{"null": "two"}', round_trip={'null': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={None: 'two'}, lazy=True): _TestOutput(payload='{"null": "two"}', round_trip={'null': 'two'}, tags=()),
_TestParameters(profile_name='tagless', value={None: 'two'}, tags=(Deprecated(msg='x'),), lazy=True): _TestOutput(payload='{"null": "two"}', round_trip={'null': 'two'}, tags=()),
}
