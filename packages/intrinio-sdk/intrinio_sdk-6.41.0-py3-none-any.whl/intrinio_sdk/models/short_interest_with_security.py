# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.108.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from intrinio_sdk.models.security_summary import SecuritySummary  # noqa: F401,E501


class ShortInterestWithSecurity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'settlement_date': 'date',
        'current_short_position': 'int',
        'previous_short_position': 'int',
        'change_percent': 'float',
        'days_to_cover': 'float',
        'average_daily_volume': 'int',
        'security': 'SecuritySummary'
    }

    attribute_map = {
        'settlement_date': 'settlement_date',
        'current_short_position': 'current_short_position',
        'previous_short_position': 'previous_short_position',
        'change_percent': 'change_percent',
        'days_to_cover': 'days_to_cover',
        'average_daily_volume': 'average_daily_volume',
        'security': 'security'
    }

    def __init__(self, settlement_date=None, current_short_position=None, previous_short_position=None, change_percent=None, days_to_cover=None, average_daily_volume=None, security=None):  # noqa: E501
        """ShortInterestWithSecurity - a model defined in Swagger"""  # noqa: E501

        self._settlement_date = None
        self._current_short_position = None
        self._previous_short_position = None
        self._change_percent = None
        self._days_to_cover = None
        self._average_daily_volume = None
        self._security = None
        self.discriminator = None

        if settlement_date is not None:
            self.settlement_date = settlement_date
        if current_short_position is not None:
            self.current_short_position = current_short_position
        if previous_short_position is not None:
            self.previous_short_position = previous_short_position
        if change_percent is not None:
            self.change_percent = change_percent
        if days_to_cover is not None:
            self.days_to_cover = days_to_cover
        if average_daily_volume is not None:
            self.average_daily_volume = average_daily_volume
        if security is not None:
            self.security = security

    @property
    def settlement_date(self):
        """Gets the settlement_date of this ShortInterestWithSecurity.  # noqa: E501

        The settlement date of the short interest record  # noqa: E501

        :return: The settlement_date of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: date
        """
        return self._settlement_date
        
    @property
    def settlement_date_dict(self):
        """Gets the settlement_date of this ShortInterestWithSecurity.  # noqa: E501

        The settlement date of the short interest record as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The settlement_date of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: date
        """

        result = None

        value = self.settlement_date
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'settlement_date': value }

        
        return result
        

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this ShortInterestWithSecurity.

        The settlement date of the short interest record  # noqa: E501

        :param settlement_date: The settlement_date of this ShortInterestWithSecurity.  # noqa: E501
        :type: date
        """

        self._settlement_date = settlement_date

    @property
    def current_short_position(self):
        """Gets the current_short_position of this ShortInterestWithSecurity.  # noqa: E501

        The current short position (shares) as of the settlement date  # noqa: E501

        :return: The current_short_position of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: int
        """
        return self._current_short_position
        
    @property
    def current_short_position_dict(self):
        """Gets the current_short_position of this ShortInterestWithSecurity.  # noqa: E501

        The current short position (shares) as of the settlement date as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The current_short_position of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: int
        """

        result = None

        value = self.current_short_position
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'current_short_position': value }

        
        return result
        

    @current_short_position.setter
    def current_short_position(self, current_short_position):
        """Sets the current_short_position of this ShortInterestWithSecurity.

        The current short position (shares) as of the settlement date  # noqa: E501

        :param current_short_position: The current_short_position of this ShortInterestWithSecurity.  # noqa: E501
        :type: int
        """

        self._current_short_position = current_short_position

    @property
    def previous_short_position(self):
        """Gets the previous_short_position of this ShortInterestWithSecurity.  # noqa: E501

        The previous short position (shares) from the prior reporting period  # noqa: E501

        :return: The previous_short_position of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: int
        """
        return self._previous_short_position
        
    @property
    def previous_short_position_dict(self):
        """Gets the previous_short_position of this ShortInterestWithSecurity.  # noqa: E501

        The previous short position (shares) from the prior reporting period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The previous_short_position of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: int
        """

        result = None

        value = self.previous_short_position
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'previous_short_position': value }

        
        return result
        

    @previous_short_position.setter
    def previous_short_position(self, previous_short_position):
        """Sets the previous_short_position of this ShortInterestWithSecurity.

        The previous short position (shares) from the prior reporting period  # noqa: E501

        :param previous_short_position: The previous_short_position of this ShortInterestWithSecurity.  # noqa: E501
        :type: int
        """

        self._previous_short_position = previous_short_position

    @property
    def change_percent(self):
        """Gets the change_percent of this ShortInterestWithSecurity.  # noqa: E501

        The percentage change in short position from the previous reporting period  # noqa: E501

        :return: The change_percent of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: float
        """
        return self._change_percent
        
    @property
    def change_percent_dict(self):
        """Gets the change_percent of this ShortInterestWithSecurity.  # noqa: E501

        The percentage change in short position from the previous reporting period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent': value }

        
        return result
        

    @change_percent.setter
    def change_percent(self, change_percent):
        """Sets the change_percent of this ShortInterestWithSecurity.

        The percentage change in short position from the previous reporting period  # noqa: E501

        :param change_percent: The change_percent of this ShortInterestWithSecurity.  # noqa: E501
        :type: float
        """

        self._change_percent = change_percent

    @property
    def days_to_cover(self):
        """Gets the days_to_cover of this ShortInterestWithSecurity.  # noqa: E501

        The estimated number of days to cover the short position based on average daily volume  # noqa: E501

        :return: The days_to_cover of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: float
        """
        return self._days_to_cover
        
    @property
    def days_to_cover_dict(self):
        """Gets the days_to_cover of this ShortInterestWithSecurity.  # noqa: E501

        The estimated number of days to cover the short position based on average daily volume as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The days_to_cover of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.days_to_cover
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'days_to_cover': value }

        
        return result
        

    @days_to_cover.setter
    def days_to_cover(self, days_to_cover):
        """Sets the days_to_cover of this ShortInterestWithSecurity.

        The estimated number of days to cover the short position based on average daily volume  # noqa: E501

        :param days_to_cover: The days_to_cover of this ShortInterestWithSecurity.  # noqa: E501
        :type: float
        """

        self._days_to_cover = days_to_cover

    @property
    def average_daily_volume(self):
        """Gets the average_daily_volume of this ShortInterestWithSecurity.  # noqa: E501

        The average daily trading volume used to calculate days to cover  # noqa: E501

        :return: The average_daily_volume of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: int
        """
        return self._average_daily_volume
        
    @property
    def average_daily_volume_dict(self):
        """Gets the average_daily_volume of this ShortInterestWithSecurity.  # noqa: E501

        The average daily trading volume used to calculate days to cover as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The average_daily_volume of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: int
        """

        result = None

        value = self.average_daily_volume
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'average_daily_volume': value }

        
        return result
        

    @average_daily_volume.setter
    def average_daily_volume(self, average_daily_volume):
        """Sets the average_daily_volume of this ShortInterestWithSecurity.

        The average daily trading volume used to calculate days to cover  # noqa: E501

        :param average_daily_volume: The average_daily_volume of this ShortInterestWithSecurity.  # noqa: E501
        :type: int
        """

        self._average_daily_volume = average_daily_volume

    @property
    def security(self):
        """Gets the security of this ShortInterestWithSecurity.  # noqa: E501

        The security associated with this short interest record  # noqa: E501

        :return: The security of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: SecuritySummary
        """
        return self._security
        
    @property
    def security_dict(self):
        """Gets the security of this ShortInterestWithSecurity.  # noqa: E501

        The security associated with this short interest record as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The security of this ShortInterestWithSecurity.  # noqa: E501
        :rtype: SecuritySummary
        """

        result = None

        value = self.security
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'security': value }

        
        return result
        

    @security.setter
    def security(self, security):
        """Sets the security of this ShortInterestWithSecurity.

        The security associated with this short interest record  # noqa: E501

        :param security: The security of this ShortInterestWithSecurity.  # noqa: E501
        :type: SecuritySummary
        """

        self._security = security

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShortInterestWithSecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
