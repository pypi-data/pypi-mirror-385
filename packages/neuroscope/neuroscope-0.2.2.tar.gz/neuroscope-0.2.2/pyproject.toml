[tool.poetry]
name = "neuroscope"
version = "0.2.2"
description = "A microscope for informed training of multi-layer perceptron, diagnosing training issues at granular level and accelerating learning and rapid prototyping."
authors = ["Ahmad Raza <ahmadrazacdx@gmail.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://ahmadrazacdx.github.io/neuroscope/"
repository = "https://github.com/ahmadrazacdx/neuro-scope"
keywords = [
    "neural-networks",
    "machine-learning", 
    "deep-learning",
    "mlp",
    "diagnostics",
    "education",
    "research"
]
documentation = "https://ahmadrazacdx.github.io/neuroscope"
packages = [
    { include = "neuroscope", from = "src" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Education",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Natural Language :: English",
]

[tool.poetry.urls]
Changelog = "https://github.com/ahmadrazacdx/neuroscope/releases"
Logo = "https://raw.githubusercontent.com/ahmadrazacdx/neuro-scope/main/docs/_static/logo.webp"
Documentation = "https://ahmadrazacdx.github.io/neuroscope"
Source = "https://github.com/ahmadrazacdx/neuro-scope"
Issues = "https://github.com/ahmadrazacdx/neuro-scope/issues"
[tool.poetry.dependencies]
python = ">=3.12,<4.0"
numpy = ">=1.21.0"
matplotlib = ">=3.5.0"
wcwidth = ">=0.2.0"

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
bandit = ">=1.7.4"
black = ">=21.10b0"
coverage = {extras = ["toml"], version = ">=6.2"}
darglint = { version = "^1.8.1", python = "<4.0" }
flake8 = ">=4.0.1"
flake8-bugbear = ">=21.9.2"
flake8-docstrings = ">=1.6.0"
flake8-rst-docstrings = ">=0.2.5"
furo = ">=2021.11.12"
isort = ">=5.10.1"
mypy = ">=0.930"
pep8-naming = ">=0.12.1"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pytest = ">=6.2.5"
pyupgrade = ">=2.29.1"
safety = ">=1.10.3"
sphinx = ">=4.3.2"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = {extras = ["colors"], version = ">=0.15.10"}
myst-parser = {extras = ["linkify"], version = "^4.0.1"}
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.6.1"
sphinxext-opengraph = "^0.13.0"
nox = "^2025.5.1"
pytest-cov = "^7.0.0"

[tool.poetry.scripts]
neuroscope = "neuroscope.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
source = ["src/neuroscope"]
branch = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/test_*.py"
]

[tool.coverage.report]
show_missing = true
fail_under = 60
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["neuroscope"]

[tool.mypy]
python_version = "3.12"
# Very tolerant MyPy configuration for gradual typing
strict = false
warn_return_any = false
warn_unused_configs = false
warn_unreachable = false
pretty = true
show_column_numbers = true
show_error_context = true
# Allow everything for now
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
strict_equality = false
# Only catch real errors
ignore_missing_imports = true
follow_imports = "silent"
# Disable specific error types that are causing issues
disable_error_code = [
    "assignment",      # Type assignment issues with NumPy
    "type-var",        # Type variable issues
    "call-overload",   # Overload matching issues
    "return-value",    # Return type mismatches
    "operator",        # Operator type issues
    "var-annotated",   # Variable annotation requirements
    "dict-item",       # Dictionary type issues
    "attr-defined",    # Attribute existence checks
]

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "numpy.*", 
    "click.*"
]
ignore_missing_imports = true

# Pytest configuration for NeuroScope
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "-ra",
    "--tb=short"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests that take more than 5 seconds",
    "gpu: Tests requiring GPU",
    "benchmark: Performance benchmark tests"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert statements and shell usage in tests

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
