// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AKIDANPINFO_AKIDA_FB_H_
#define FLATBUFFERS_GENERATED_AKIDANPINFO_AKIDA_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace akida {
namespace fb {

struct NPIdent;

struct SkipDmaIdent;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) NPIdent FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t col_;
  uint8_t row_;
  uint8_t id_;

 public:
  NPIdent()
      : col_(0),
        row_(0),
        id_(0) {
  }
  NPIdent(uint8_t _col, uint8_t _row, uint8_t _id)
      : col_(flatbuffers::EndianScalar(_col)),
        row_(flatbuffers::EndianScalar(_row)),
        id_(flatbuffers::EndianScalar(_id)) {
  }
  uint8_t col() const {
    return flatbuffers::EndianScalar(col_);
  }
  uint8_t row() const {
    return flatbuffers::EndianScalar(row_);
  }
  uint8_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
};
FLATBUFFERS_STRUCT_END(NPIdent, 3);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) SkipDmaIdent FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t col_;
  uint8_t row_;
  uint8_t id_;
  uint8_t channel_idx_;

 public:
  SkipDmaIdent()
      : col_(0),
        row_(0),
        id_(0),
        channel_idx_(0) {
  }
  SkipDmaIdent(uint8_t _col, uint8_t _row, uint8_t _id, uint8_t _channel_idx)
      : col_(flatbuffers::EndianScalar(_col)),
        row_(flatbuffers::EndianScalar(_row)),
        id_(flatbuffers::EndianScalar(_id)),
        channel_idx_(flatbuffers::EndianScalar(_channel_idx)) {
  }
  uint8_t col() const {
    return flatbuffers::EndianScalar(col_);
  }
  uint8_t row() const {
    return flatbuffers::EndianScalar(row_);
  }
  uint8_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
  uint8_t channel_idx() const {
    return flatbuffers::EndianScalar(channel_idx_);
  }
};
FLATBUFFERS_STRUCT_END(SkipDmaIdent, 4);

}  // namespace fb
}  // namespace akida

#endif  // FLATBUFFERS_GENERATED_AKIDANPINFO_AKIDA_FB_H_
