prompt_type: General

instruction:
  format: str
  value: '请根据以下内容生成合理的追问问题：


    - 根据用户和助手的对话内容分析主题和焦点。

    - 确定用户可能需要进一步了解的领域或未解答的问题。

    - 确保生成的问题具有相关性和逻辑性，能够帮助用户进一步深入探索主题。'

step:
  format: f-string
  value: "1. **分析输入内容**  \n   - 提取对话中的主题、上下文和用户需求。\n   - 确定已解决的问题和可能未解决的内容。\n\n2.\
    \ **生成追问问题**  \n   - 基于未解答的内容或可以深入探讨的点，构造逻辑清晰的问题。\n   - 避免重复已有回答的问题，确保问题具有启发性。\n\
    \   - 确保生成`{num}`个问题，覆盖不同角度和深度。\n\n3. **校验问题质量**  \n   - 检查生成问题是否与对话内容高度相关。\n\
    \   - 确保问题表达清晰，便于理解。"

output_format:
  format: dict
  value:
    properties:
      questions:
        description: 生成的追问问题
        items:
          type: string
        title: Questions
        type: array
    required:
    - questions
    title: Questions
    type: object

sample:
  format: str
  value: "**输入示例：**  \n用户问：“如何构建一个简单的推荐系统？”  \n助手答：“推荐系统通常分为基于内容和基于协同过滤的方法，内容推荐分析用户偏好，协同过滤利用用户相似性。可以选择使用Python工具如scikit-learn或TensorFlow。”\n\
    \n**输出示例：**  \n```json\n{\n  \"questions\": [\n    \"如何选择适合自己的推荐系统类型？\",\n   \
    \ \"scikit-learn和TensorFlow分别在构建推荐系统时有哪些优势？\",\n    \"基于协同过滤的方法是否对冷启动问题有解决方案？\"\
    \n    ...\n  ]\n}\n```"

note:
  format: f-string
  value: '- 确保问题符合对话的逻辑和上下文。

    - 避免过于宽泛或含糊不清的问题。

    - 在对话内容不明确时，可以生成具有一定启发性的问题引导用户澄清需求。

    - 确保生成{num}个问题，覆盖不同角度和深度。'

user_input:
  format: f-string
  value: '对话内容:

    {user_input}'
