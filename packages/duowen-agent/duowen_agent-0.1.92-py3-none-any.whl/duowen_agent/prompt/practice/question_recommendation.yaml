prompt_type: General

instruction:
  format: str
  value: 分析对话上下文生成精准追问问题,保持原生术语并拓展讨论维度.

step:
  format: str
  value: "## 处理框架\n1. 对话回溯：自动检测最近对话，排除无效交流（问候/感谢）后锁定核心主题\n2. 实体标注：使用双括号标记关键术语（例：<<分布式锁>><<消息队列>>）\n\
    3. 路径预测：基于领域知识图谱预判可行的延展方向（实现原理>性能优化>异常处理>行业应用）\n\n## 生成准则\n- 严格继承上下文出现的专业表述（允许原始大小写/缩写格式）\n\
    - 确保每个问题包含≥1个标注实体\n- 类型强制分布：\n  ✓ 实践指导类 40-50%\n  ✓ 比较分析类 20-30%\n  ✓ 场景应用类 20-30%\n\
    \n## 校验机制\n1. 格式验证：严格符合JSON数组语法\n2. 语义审查：确保问题间形成逻辑链条（架构设计→实施细节→故障处理）\n3. 冲突检测：自动过滤重复率>60%的问题\n\
    \n## 异常处理\n当检测到参数冲突时：\n1. 优先保证实体完整性\n2. 其次满足类型分布\n3. 最后进行文字精简\n"

output_format:
  format: dict
  value:
    properties:
      questions:
        description: 推荐的问题列表
        items:
          type: string
        title: Questions
        type: array
    required:
    - questions
    title: RecommendationQuestions
    type: object

sample:
  format: str
  value: "\n输入:            \n    用户：<<Kafka>>怎么保证消息顺序？\n    助手：通过分区键相同消息路由到同一个分区\n\
    \    \n输出：\n```json\n{\n    \"questions\": [\n        \"<<分区键>>选取要注意什么？\",\n \
    \       \"集群扩展时顺序怎么保证？\",\n        \"和<<RabbitMQ>>的顺序性哪个更强？\",\n    ]\n}\n```\n"

note:
  format: jinja2
  value: '- 允许带数字的专业表述（如<<GPU 10>>）

    - 拒绝任何形式的指代替换

    - 问题必须包含实体变更或维度转换

    - 确保生成`{{num}}`个问题，覆盖不同分布'
