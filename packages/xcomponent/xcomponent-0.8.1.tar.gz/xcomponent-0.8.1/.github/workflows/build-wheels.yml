# Build wheels xcomponent on all platforms.
#
# Adapted from uv and from pydantic-core CI
name: "Build wheels"

on:
  workflow_call:
    inputs:
      release-version:
        required: true
        type: string
      dry-run:
        required: true
        type: boolean
  pull_request:
    paths:
      # When we change pyproject.toml, we want to ensure that the maturin builds still work.
      - pyproject.toml
      # And when we change this workflow itself...
      - .github/workflows/build-wheels.yml
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: wheels-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:

  build:
    name: build ${{ inputs.release-version }} ${{ inputs.dry-run && ' (dry-run)' || '' }} on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.interpreter || 'all' }} ${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux == 'auto' && 'manylinux' || matrix.manylinux) || '' }})

    strategy:
      fail-fast: false
      matrix:
        os: [linux, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: linux
            manylinux: auto
            target: i686
          - os: linux
            manylinux: auto
            target: aarch64
          - os: linux
            manylinux: auto
            target: armv7
            interpreter: 3.9 3.10 3.11 3.12 3.13
          - os: linux
            manylinux: auto
            target: ppc64le
            interpreter: 3.9 3.10 3.11 3.12 3.13
          - os: linux
            manylinux: auto
            target: s390x
            interpreter: 3.9 3.10 3.11 3.12 3.13
          - os: linux
            manylinux: auto
            target: x86_64
          - os: linux
            manylinux: musllinux_1_1
            target: x86_64
          - os: linux
            manylinux: musllinux_1_1
            target: aarch64
          - os: linux
            manylinux: musllinux_1_1
            target: armv7

          - os: macos
            target: x86_64
          - os: macos
            target: aarch64
            interpreter: 3.9 pypy3.9 pypy3.10

          - os: windows
            target: x86_64
            interpreter: 3.10 3.11 3.12 3.13
          - os: windows
            target: i686
            python-architecture: x86
            interpreter: 3.13
        exclude:
          # Exclude failed build
          - os: windows
            target: aarch64

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          architecture: ${{ matrix.python-architecture || 'x64' }}
      - name: install build deps
        run: pip install twine

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.9 3.10 3.11 3.12 3.13 pypy3.9 pypy3.10' }}
          rust-toolchain: 'stable'
          docker-options: -e CI

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.target }}_${{ matrix.interpreter || 'all' }}_${{ matrix.manylinux }}
          path: dist/*.whl
