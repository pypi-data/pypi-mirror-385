######################################################################################################
#                                 Auto-generated Metaflow stub file                                  #
# MF version: 2.18.13.1+obcheckpoint(0.2.8);ob(v1)                                                   #
# Generated on 2025-10-21T09:01:27.302530                                                            #
######################################################################################################

from __future__ import annotations

import metaflow
import abc
import io
import typing
if typing.TYPE_CHECKING:
    import metaflow.exception
    import abc
    import metaflow.metaflow_environment
    import io

from ...exception import MetaflowException as MetaflowException
from ...metaflow_config import get_pinned_conda_libs as get_pinned_conda_libs
from ...packaging_sys import ContentType as ContentType
from .utils import conda_platform as conda_platform

MAGIC_FILE: str

class CondaEnvironmentException(metaflow.exception.MetaflowException, metaclass=type):
    def __init__(self, msg):
        ...
    ...

class CondaEnvironment(metaflow.metaflow_environment.MetaflowEnvironment, metaclass=type):
    def __init__(self, flow):
        ...
    def set_local_root(self, local_root):
        ...
    def decospecs(self):
        ...
    def validate_environment(self, logger, datastore_type):
        ...
    def init_environment(self, echo, only_steps = None):
        ...
    def executable(self, step_name, default = None):
        ...
    def interpreter(self, step_name):
        ...
    def is_disabled(self, step):
        ...
    def pylint_config(self):
        ...
    @classmethod
    def get_client_info(cls, flow_name, metadata):
        ...
    def add_to_package(self):
        ...
    def bootstrap_commands(self, step_name, datastore_type):
        ...
    def get_environment_manifest_path(self):
        ...
    def read_from_environment_manifest(self, keys):
        ...
    def write_to_environment_manifest(self, keys, value):
        ...
    ...

class LazyOpen(io.BufferedIOBase, metaclass=abc.ABCMeta):
    def __init__(self, filename, mode = 'rb', url = None):
        ...
    def readable(self):
        ...
    def seekable(self):
        ...
    def read(self, size = -1):
        ...
    def seek(self, offset, whence = 0):
        ...
    def tell(self):
        ...
    def close(self):
        ...
    ...

