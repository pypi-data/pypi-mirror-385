######################################################################################################
#                                 Auto-generated Metaflow stub file                                  #
# MF version: 2.18.13.1+obcheckpoint(0.2.8);ob(v1)                                                   #
# Generated on 2025-10-21T09:01:27.292770                                                            #
######################################################################################################

from __future__ import annotations

import typing
if typing.TYPE_CHECKING:
    import metaflow.mf_extensions.outerbounds.plugins.fast_bakery.fast_bakery


class FastBakeryException(Exception, metaclass=type):
    ...

class SolverStats(object, metaclass=type):
    def __init__(self, stats):
        ...
    @property
    def duration_ms(self):
        ...
    @property
    def packages_in_solved_environment(self):
        ...
    ...

class BakingStats(object, metaclass=type):
    def __init__(self, stats):
        ...
    @property
    def solver_stats(self) -> typing.Optional[metaflow.mf_extensions.outerbounds.plugins.fast_bakery.fast_bakery.SolverStats]:
        ...
    ...

class FastBakeryApiResponse(object, metaclass=type):
    def __init__(self, response):
        ...
    @property
    def python_path(self) -> typing.Optional[str]:
        ...
    @property
    def container_image(self) -> typing.Optional[str]:
        ...
    @property
    def success(self) -> bool:
        ...
    @property
    def baking_stats(self) -> typing.Optional[metaflow.mf_extensions.outerbounds.plugins.fast_bakery.fast_bakery.BakingStats]:
        ...
    @property
    def failure(self) -> bool:
        ...
    ...

class FastBakery(object, metaclass=type):
    def __init__(self, url: str):
        ...
    def python_version(self, version: str):
        ...
    def pypi_packages(self, packages: typing.Dict[str, str]):
        ...
    def conda_packages(self, packages: typing.Dict[str, str]):
        ...
    def base_image(self, image: str):
        ...
    def image_kind(self, kind: str):
        ...
    def ignore_cache(self):
        ...
    def bake(self) -> FastBakeryApiResponse:
        ...
    ...

