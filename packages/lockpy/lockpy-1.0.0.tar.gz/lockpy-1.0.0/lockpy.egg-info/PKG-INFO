Metadata-Version: 2.4
Name: lockpy
Version: 1.0.0
Summary: Static typed-style access modifiers and patterns for Python
Author-email: Vibhinn Singhal <vibhinnsinghal@gmail.com>
License: MIT License
        
        Copyright (c) [2025] [strictpy]
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/VibhinnS/lockpy
Project-URL: Bug Tracker, https://github.com/VibhinnS/lockpy/issues
Keywords: python,decorators,access control,singleton,private
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# 🐍 lockpy — Access Control for Python

`lockpy` brings **powerful, enforced access control patterns** to Python — something you normally only get in languages like **Java** or **C#**.

It provides decorators like:
- `@singleton` — ensures only one instance of a class exists.  
- `@private` — prevents external access to methods (enforced at runtime).  
- I'm currently working on modifiers like : `@protected`, `@final`, `@readonly` - will include in other releases

---

## 🚀 Features

- `Lightweight`: no dependencies required  
- `Inspired from static typed languaged`: private/protected/final behavior  
- `Runtime Enforcement`: enfore rules at runtime (no special interpreter required)  
- `Flexible`: works with instance methods, classmethods, and staticmethods  

---

## 📦 Installation

```pip command
pip install lockpy
