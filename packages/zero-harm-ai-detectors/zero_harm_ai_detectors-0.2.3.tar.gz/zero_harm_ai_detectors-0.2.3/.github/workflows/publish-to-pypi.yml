name: Publish to PyPI and Update Backend

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  test-basic:
    runs-on: ubuntu-latest
    name: Basic Tests (Regex Only)
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov build twine setuptools-scm
    
    - name: Install package (base only)
      run: pip install -e .
    
    - name: Run basic tests
      run: |
        # Only run tests that don't require AI
        pytest tests/test_detectors.py --cov=zero_harm_ai_detectors --cov-report=xml
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  test-ai:
    runs-on: ubuntu-latest
    name: AI Tests (With Transformers)
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache models
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-transformers-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-transformers-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
    
    - name: Install package with AI dependencies
      run: pip install -e .[ai]
    
    - name: Run AI tests
      run: |
        pytest tests/test_ai_detectors.py -v

  publish:
    needs: [test-basic, test-ai]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm
    
    - name: Build package
      run: python -m build
    
    - name: Publish to TestPyPI (optional)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* --skip-existing || true
      continue-on-error: true
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.BACKEND_REPO_TOKEN }}
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Installation
          
          ```bash
          pip install zero_harm_ai_detectors==${{ steps.version.outputs.VERSION }}
          ```
        draft: false
        prerelease: false

  trigger-backend-update:
    needs: publish
    runs-on: ubuntu-latest
    
    steps:
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Wait for PyPI propagation
      run: |
        echo "Waiting 2 minutes for PyPI to propagate the new version..."
        sleep 120
    
    - name: Trigger Backend Update
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.BACKEND_REPO_TOKEN }}
        repository: Zero-Harm-AI-LLC/zero-harm-ai-backend
        event-type: library-updated
        client-payload: |
          {
            "library_version": "${{ steps.version.outputs.VERSION }}",
            "library_name": "zero_harm_ai_detectors"
          }