import abc
import numpy as np
from _typeshed import Incomplete

__all__ = ['AssemblyError', 'GenTagMixin', 'IRBase', 'PreIR', 'nsw_config', 'UnfixIR', 'IRFrameRst', 'IRWaitTrig', 'FixIR', 'OverlapIR', 'ReconstitutionIR', 'IRFrame', 'IREnvelope', 'IRNop', 'IRDelay', 'IRProt', 'IRPth', 'IRMov', 'IRJmov', 'IRNsw', 'IRNlw', 'IRPlaceholder', 'IRWaitTrig', 'IRJumpImmediate', 'IRPlayImm', 'IRCapture', 'IRWait', 'IRFrameAdd', 'IRAdd', 'IRPlayDDRImm', 'IRArbWaveform', 'LoadDDRIR', 'IRWaitDDR']

def nsw_config(name, value) -> None: ...

class AssemblyError(RuntimeError): ...

class GenTagMixin:
    @property
    def generate_tag(self): ...

class IRBase(GenTagMixin, abc.ABC, metaclass=abc.ABCMeta):
    tag: Incomplete
    real_wait_time: int
    line: int
    index_map: Incomplete
    def __init__(self) -> None: ...
    @property
    @abc.abstractmethod
    def overhead(self): ...
    @property
    @abc.abstractmethod
    def wait_time(self): ...

class PreIR(IRBase):
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...

class UnfixIR(IRBase):
    ir_sub: Incomplete
    irhead: int
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...
    def fetch_ir(self, ir) -> None: ...

class FixIR(IRBase):
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...

class LoadDDRIR(IRBase):
    wait_trig: bool
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class OverlapIR(IRBase):
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...

class ReconstitutionIR(IRBase):
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...

class IRFrame(PreIR):
    freq: Incomplete
    phase: Incomplete
    idx: Incomplete
    real_wait_time: int
    def __init__(self, freq, phase, idx) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...

class IRArbWaveform(PreIR):
    waveform: Incomplete
    wave_type: Incomplete
    offset: int
    step: Incomplete
    def __init__(self, waveform: np.ndarray) -> None: ...

class IREnvelope(PreIR):
    envelop_slice: Incomplete
    def __init__(self, envelope: np.ndarray | complex, amp: int = 1) -> None: ...
    def __len__(self) -> int: ...
    def __bytes__(self) -> bytes: ...

class IRNop(PreIR):
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRProt(PreIR):
    fre: Incomplete
    rotation_real: Incomplete
    rotation_imag: Incomplete
    real_wait_time: int
    def __init__(self, freq_list, rotation) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...

class IRPth(PreIR):
    fre: Incomplete
    threshold: Incomplete
    real_wait_time: int
    def __init__(self, freq_list, threshold) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self, *args): ...

class IRWaitTrig(UnfixIR):
    irhead: int
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...
    @wait_time.setter
    def wait_time(self, value) -> None: ...

class IRJumpImmediate(UnfixIR):
    idx: Incomplete
    def __init__(self, idx: int) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRPlaceholder(UnfixIR):
    irhead: int
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRJumpConditional(UnfixIR):
    idx: Incomplete
    result: Incomplete
    irhead: int
    jumpaddr: Incomplete
    feedback_chnl: Incomplete
    def __init__(self, register_idx, judge_result, feedback_chnl, jumpaddr: int = 0) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRJumpInside(OverlapIR):
    irhead: int
    jumpaddr: int
    def __init__(self) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRPlayDDRImm(FixIR, LoadDDRIR):
    wave: Incomplete
    wait_trig: bool
    def __init__(self, wave: IRArbWaveform) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRPlayImm(FixIR):
    frame: Incomplete
    freq: Incomplete
    amp: Incomplete
    bias: Incomplete
    envelope: Incomplete
    phase: Incomplete
    def __init__(self, frame, envelope: IREnvelope, amp, bias, freq, phase) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRCapture(FixIR):
    fre: Incomplete
    acq_width: Incomplete
    delay_width: Incomplete
    play_width: Incomplete
    para: Incomplete
    def __init__(self, freq_list: list, acq_width: float, delay_width: float, play_width: float, raw_data_store: bool = True, iq_data_store: bool = True, judge_data_store: bool = True, double_fre_mode: bool = False) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRWait(FixIR):
    width: Incomplete
    def __init__(self, width) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRDelay(FixIR):
    width: Incomplete
    def __init__(self, width) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRFrameAdd(OverlapIR):
    frames: Incomplete
    frequency: Incomplete
    phase: Incomplete
    def __init__(self, frames: list, frequency: float, phase: float) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRFrameRst(OverlapIR):
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRAdd(ReconstitutionIR):
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRMov(PreIR):
    idx: Incomplete
    reg_value: Incomplete
    def __init__(self, register_idx, value) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRNsw(OverlapIR):
    idx: Incomplete
    def __init__(self, register_idx) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRNlw(OverlapIR):
    idx: int
    feedback_rd_chnl: Incomplete
    def __init__(self, feedback_rd_chnl) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...
    def set_idx(self, register_idx) -> None: ...

class IRJmov(OverlapIR):
    idx: Incomplete
    def __init__(self, register_idx) -> None: ...
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...

class IRWaitDDR(OverlapIR):
    @property
    def overhead(self): ...
    @property
    def wait_time(self): ...
