from ._ir import *
from _typeshed import Incomplete

__all__ = ['BaseRule', 'BranchRule', 'TimingRule', 'EnvelopeRule', 'AddJumpRule', 'WitiRule', 'PlaceHolder', 'PreConfigRule', 'WtgAlign', 'PlayDDRRule']

class BaseRule:
    ir_list: Incomplete
    def __init__(self) -> None: ...
    def order_ins(self, ir_list: list, **kwargs) -> list: ...

class BranchRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...

class TimingRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list: list, **kwargs) -> list: ...
    def insert_ir(self, ir_list_ordered) -> list: ...
    def append_preir(self, ir): ...
    def append_unfixir(self, ir): ...
    def append_fixir(self, ir): ...
    def append_overlapir(self, ir): ...
    def append_reconstitutionir(self, ir): ...
    def order_overlap(self, ir_list_ordered) -> list: ...

class PreConfigRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...

class EnvelopeRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list: list, **kwargs): ...

class AddJumpRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...

class JumpRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...

class WitiRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...

class WtgAlign(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...

class PlaceHolder(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...

class PlayDDRRule(BaseRule):
    def __init__(self) -> None: ...
    def order_ins(self, ir_list, **kwargs) -> list: ...
