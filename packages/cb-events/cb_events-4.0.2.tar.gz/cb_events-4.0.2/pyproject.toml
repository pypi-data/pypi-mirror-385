[build-system]
requires = ["hatchling==1.27.0", "hatch-fancy-pypi-readme==25.1.0"]
build-backend = "hatchling.build"

[project]
name = "cb-events"
version = "4.0.2"
description = "An asynchronous client for the Chaturbate Events API."
authors = [{ name = "MountainGod2", email = "admin@reid.ca" }]
maintainers = [{ name = "MountainGod2", email = "admin@reid.ca" }]
license = { text = "MIT" }
requires-python = ">=3.12"
dependencies = ["aiohttp==3.13.0", "aiohttp-retry==2.9.1", "aiolimiter==1.2.1", "pydantic==2.12.2"]
dynamic = ["readme"]
keywords = ["chaturbate", "events", "api", "async", "streaming", "real-time", "webcam", "client"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/MountainGod2/cb-events"
Documentation = "https://github.com/MountainGod2/cb-events#readme"
Repository = "https://github.com/MountainGod2/cb-events.git"
Changelog = "https://github.com/MountainGod2/cb-events/blob/main/CHANGELOG.md"
"Issue Tracker" = "https://github.com/MountainGod2/cb-events/issues"

[dependency-groups]
build = ["python-semantic-release==10.4.1"]

dev = [
    "pytest==8.4.2",
    "pytest-asyncio==1.2.0",
    "pytest-aiohttp==1.1.0",
    "pytest-cov==7.0.0",
    "pytest-mock==3.15.1",
    "aioresponses==0.7.8",
    "ruff==0.14.0",
    "mypy==1.18.2",
    "pyright==1.1.406",
    "pylint==4.0.1",
    "pre-commit==4.3.0",
    "python-semantic-release==10.4.1",
    "pylint-pydantic==0.4.0",
    "bandit==1.8.6",
    "bandit-sarif-formatter==1.1.1",
    "ty==0.0.1a22",
]

docs = [
    "sphinx==8.2.3",
    "sphinx-autoapi==3.6.1",
    "sphinx-autodoc-typehints==3.5.1",
    "furo==2025.9.25",
    "myst-nb==1.3.0",
]

[tool.hatch]
build.targets.wheel.packages = ["src/cb_events"]
metadata.hooks.fancy-pypi-readme.content-type = "text/markdown"
metadata.hooks.fancy-pypi-readme.fragments = [{ path = "README.md" }]

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
# Replace relative links in the README with absolute links to the GitHub repository
pattern = '\[(.+?)\]\(((?!https?://)\.?/?(\S+?))\)'
replacement = '[\1](https://github.com/MountainGod2/cb-events/tree/main/\g<3>)'

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
build_command = """
  uv lock --upgrade-package "cb-events"
  uv build
"""
commit_parser = "conventional"
changelog_file = "CHANGELOG.md"
output_format = "md"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.exclude_commit_patterns]
patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''docs(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]

[tool.ruff]
target-version = "py312"
line-length = 100
indent-width = 4

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = ["COM812", "CPY001", "ISC001"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"examples/*" = [
    "ANN001",
    "ANN202",
    "D100",
    "D103",
    "D104",
    "T201",
    "RUF029",
    "INP001",
    "TRY400",
    "ARG001",
    "C901",
    "PLR0915",
]
"tests/*" = [
    "D",
    "ANN",
    "PLR6301",
    "S101",
    "S105",
    "S106",
    "SLF001",
    "PLR2004",
    "ANN401",
    "ARG001",
    "FBT001",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
strict = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "examples.*"
disallow_untyped_calls = false
disallow_untyped_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_calls = false
disallow_untyped_defs = false
no_implicit_optional = false
strict_optional = false

[tool.pyright]
python-version = "3.12.0"

[[tool.pyright.overrides]]
include = ["examples/**"]
reportUnusedFunction = "none"
reportMissingImports = "none"

[tool.pylint.main]
load-plugins = ["pylint.extensions.typing", "pylint_pydantic"]

[tool.pylint.design]
max-attributes = 12

[tool.pylint.format]
max-line-length = 100

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
    "--cov-report=term-missing:skip-covered",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["src/"]
branch = true
parallel = true
omit = ["**/__init__.py", "examples/*", "tests/*"]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "if __name__ == '__main__':",
    "if typing.TYPE_CHECKING:",
    "pragma: no cover",
    "raise NotImplementedError",
    "raise AssertionError",
    "@abstractmethod",
    "def __repr__",
    "def __str__",
]
show_missing = true
skip_covered = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "examples"]
