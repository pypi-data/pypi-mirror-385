"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2017, OpenCensus Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import opencensus.proto.resource.v1.resource_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Span(google.protobuf.message.Message):
    """A span represents a single operation within a trace. Spans can be
    nested to form a trace tree. Spans may also be linked to other spans
    from the same or different trace. And form graphs. Often, a trace
    contains a root span that describes the end-to-end latency, and one
    or more subspans for its sub-operations. A trace can also contain
    multiple root spans, or none at all. Spans do not need to be
    contiguous - there may be gaps or overlaps between spans in a trace.

    The next id is 17.
    TODO(bdrutu): Add an example.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _SpanKind:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _SpanKindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Span._SpanKind.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        SPAN_KIND_UNSPECIFIED: Span._SpanKind.ValueType  # 0
        """Unspecified."""
        SERVER: Span._SpanKind.ValueType  # 1
        """Indicates that the span covers server-side handling of an RPC or other
        remote network request.
        """
        CLIENT: Span._SpanKind.ValueType  # 2
        """Indicates that the span covers the client-side wrapper around an RPC or
        other remote request.
        """

    class SpanKind(_SpanKind, metaclass=_SpanKindEnumTypeWrapper):
        """Type of span. Can be used to specify additional relationships between spans
        in addition to a parent/child relationship.
        """

    SPAN_KIND_UNSPECIFIED: Span.SpanKind.ValueType  # 0
    """Unspecified."""
    SERVER: Span.SpanKind.ValueType  # 1
    """Indicates that the span covers server-side handling of an RPC or other
    remote network request.
    """
    CLIENT: Span.SpanKind.ValueType  # 2
    """Indicates that the span covers the client-side wrapper around an RPC or
    other remote request.
    """

    @typing.final
    class Tracestate(google.protobuf.message.Message):
        """This field conveys information about request position in multiple distributed tracing graphs.
        It is a list of Tracestate.Entry with a maximum of 32 members in the list.

        See the https://github.com/w3c/distributed-tracing for more details about this field.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class Entry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            """The key must begin with a lowercase letter, and can only contain
            lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
            '-', asterisks '*', and forward slashes '/'.
            """
            value: builtins.str
            """The value is opaque string up to 256 characters printable ASCII
            RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
            Note that this also excludes tabs, newlines, carriage returns, etc.
            """
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

        ENTRIES_FIELD_NUMBER: builtins.int
        @property
        def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Span.Tracestate.Entry]:
            """A list of entries that represent the Tracestate."""

        def __init__(
            self,
            *,
            entries: collections.abc.Iterable[global___Span.Tracestate.Entry] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

    @typing.final
    class Attributes(google.protobuf.message.Message):
        """A set of attributes, each with a key and a value."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class AttributeMapEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            @property
            def value(self) -> global___AttributeValue: ...
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: global___AttributeValue | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

        ATTRIBUTE_MAP_FIELD_NUMBER: builtins.int
        DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER: builtins.int
        dropped_attributes_count: builtins.int
        """The number of attributes that were discarded. Attributes can be discarded
        because their keys are too long or because there are too many attributes.
        If this value is 0, then no attributes were dropped.
        """
        @property
        def attribute_map(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___AttributeValue]:
            """The set of attributes. The value can be a string, an integer, a double
            or the Boolean values `true` or `false`. Note, global attributes like 
            server name can be set as tags using resource API. Examples of attributes:

                "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
                "/http/server_latency": 300
                "abc.com/myattribute": true
                "abc.com/score": 10.239
            """

        def __init__(
            self,
            *,
            attribute_map: collections.abc.Mapping[builtins.str, global___AttributeValue] | None = ...,
            dropped_attributes_count: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["attribute_map", b"attribute_map", "dropped_attributes_count", b"dropped_attributes_count"]) -> None: ...

    @typing.final
    class TimeEvent(google.protobuf.message.Message):
        """A time-stamped annotation or message event in the Span."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class Annotation(google.protobuf.message.Message):
            """A text annotation with a set of attributes."""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            DESCRIPTION_FIELD_NUMBER: builtins.int
            ATTRIBUTES_FIELD_NUMBER: builtins.int
            @property
            def description(self) -> global___TruncatableString:
                """A user-supplied message describing the event."""

            @property
            def attributes(self) -> global___Span.Attributes:
                """A set of attributes on the annotation."""

            def __init__(
                self,
                *,
                description: global___TruncatableString | None = ...,
                attributes: global___Span.Attributes | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["attributes", b"attributes", "description", b"description"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["attributes", b"attributes", "description", b"description"]) -> None: ...

        @typing.final
        class MessageEvent(google.protobuf.message.Message):
            """An event describing a message sent/received between Spans."""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            class _Type:
                ValueType = typing.NewType("ValueType", builtins.int)
                V: typing_extensions.TypeAlias = ValueType

            class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Span.TimeEvent.MessageEvent._Type.ValueType], builtins.type):
                DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
                TYPE_UNSPECIFIED: Span.TimeEvent.MessageEvent._Type.ValueType  # 0
                """Unknown event type."""
                SENT: Span.TimeEvent.MessageEvent._Type.ValueType  # 1
                """Indicates a sent message."""
                RECEIVED: Span.TimeEvent.MessageEvent._Type.ValueType  # 2
                """Indicates a received message."""

            class Type(_Type, metaclass=_TypeEnumTypeWrapper):
                """Indicates whether the message was sent or received."""

            TYPE_UNSPECIFIED: Span.TimeEvent.MessageEvent.Type.ValueType  # 0
            """Unknown event type."""
            SENT: Span.TimeEvent.MessageEvent.Type.ValueType  # 1
            """Indicates a sent message."""
            RECEIVED: Span.TimeEvent.MessageEvent.Type.ValueType  # 2
            """Indicates a received message."""

            TYPE_FIELD_NUMBER: builtins.int
            ID_FIELD_NUMBER: builtins.int
            UNCOMPRESSED_SIZE_FIELD_NUMBER: builtins.int
            COMPRESSED_SIZE_FIELD_NUMBER: builtins.int
            type: global___Span.TimeEvent.MessageEvent.Type.ValueType
            """The type of MessageEvent. Indicates whether the message was sent or
            received.
            """
            id: builtins.int
            """An identifier for the MessageEvent's message that can be used to match
            SENT and RECEIVED MessageEvents. For example, this field could
            represent a sequence ID for a streaming RPC. It is recommended to be
            unique within a Span.
            """
            uncompressed_size: builtins.int
            """The number of uncompressed bytes sent or received."""
            compressed_size: builtins.int
            """The number of compressed bytes sent or received. If zero, assumed to
            be the same size as uncompressed.
            """
            def __init__(
                self,
                *,
                type: global___Span.TimeEvent.MessageEvent.Type.ValueType = ...,
                id: builtins.int = ...,
                uncompressed_size: builtins.int = ...,
                compressed_size: builtins.int = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing.Literal["compressed_size", b"compressed_size", "id", b"id", "type", b"type", "uncompressed_size", b"uncompressed_size"]) -> None: ...

        TIME_FIELD_NUMBER: builtins.int
        ANNOTATION_FIELD_NUMBER: builtins.int
        MESSAGE_EVENT_FIELD_NUMBER: builtins.int
        @property
        def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
            """The time the event occurred."""

        @property
        def annotation(self) -> global___Span.TimeEvent.Annotation:
            """A text annotation with a set of attributes."""

        @property
        def message_event(self) -> global___Span.TimeEvent.MessageEvent:
            """An event describing a message sent/received between Spans."""

        def __init__(
            self,
            *,
            time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
            annotation: global___Span.TimeEvent.Annotation | None = ...,
            message_event: global___Span.TimeEvent.MessageEvent | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["annotation", b"annotation", "message_event", b"message_event", "time", b"time", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["annotation", b"annotation", "message_event", b"message_event", "time", b"time", "value", b"value"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["annotation", "message_event"] | None: ...

    @typing.final
    class TimeEvents(google.protobuf.message.Message):
        """A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
        on the span, consisting of either user-supplied key-value pairs, or
        details of a message sent/received between Spans.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TIME_EVENT_FIELD_NUMBER: builtins.int
        DROPPED_ANNOTATIONS_COUNT_FIELD_NUMBER: builtins.int
        DROPPED_MESSAGE_EVENTS_COUNT_FIELD_NUMBER: builtins.int
        dropped_annotations_count: builtins.int
        """The number of dropped annotations in all the included time events.
        If the value is 0, then no annotations were dropped.
        """
        dropped_message_events_count: builtins.int
        """The number of dropped message events in all the included time events.
        If the value is 0, then no message events were dropped.
        """
        @property
        def time_event(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Span.TimeEvent]:
            """A collection of `TimeEvent`s."""

        def __init__(
            self,
            *,
            time_event: collections.abc.Iterable[global___Span.TimeEvent] | None = ...,
            dropped_annotations_count: builtins.int = ...,
            dropped_message_events_count: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["dropped_annotations_count", b"dropped_annotations_count", "dropped_message_events_count", b"dropped_message_events_count", "time_event", b"time_event"]) -> None: ...

    @typing.final
    class Link(google.protobuf.message.Message):
        """A pointer from the current span to another span in the same trace or in a
        different trace. For example, this can be used in batching operations,
        where a single batch handler processes multiple requests from different
        traces or when the handler receives a request from a different project.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _Type:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Span.Link._Type.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            TYPE_UNSPECIFIED: Span.Link._Type.ValueType  # 0
            """The relationship of the two spans is unknown, or known but other
            than parent-child.
            """
            CHILD_LINKED_SPAN: Span.Link._Type.ValueType  # 1
            """The linked span is a child of the current span."""
            PARENT_LINKED_SPAN: Span.Link._Type.ValueType  # 2
            """The linked span is a parent of the current span."""

        class Type(_Type, metaclass=_TypeEnumTypeWrapper):
            """The relationship of the current span relative to the linked span: child,
            parent, or unspecified.
            """

        TYPE_UNSPECIFIED: Span.Link.Type.ValueType  # 0
        """The relationship of the two spans is unknown, or known but other
        than parent-child.
        """
        CHILD_LINKED_SPAN: Span.Link.Type.ValueType  # 1
        """The linked span is a child of the current span."""
        PARENT_LINKED_SPAN: Span.Link.Type.ValueType  # 2
        """The linked span is a parent of the current span."""

        TRACE_ID_FIELD_NUMBER: builtins.int
        SPAN_ID_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        ATTRIBUTES_FIELD_NUMBER: builtins.int
        TRACESTATE_FIELD_NUMBER: builtins.int
        trace_id: builtins.bytes
        """A unique identifier of a trace that this linked span is part of. The ID is a 
        16-byte array.
        """
        span_id: builtins.bytes
        """A unique identifier for the linked span. The ID is an 8-byte array."""
        type: global___Span.Link.Type.ValueType
        """The relationship of the current span relative to the linked span."""
        @property
        def attributes(self) -> global___Span.Attributes:
            """A set of attributes on the link."""

        @property
        def tracestate(self) -> global___Span.Tracestate:
            """The Tracestate associated with the link."""

        def __init__(
            self,
            *,
            trace_id: builtins.bytes = ...,
            span_id: builtins.bytes = ...,
            type: global___Span.Link.Type.ValueType = ...,
            attributes: global___Span.Attributes | None = ...,
            tracestate: global___Span.Tracestate | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["attributes", b"attributes", "tracestate", b"tracestate"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["attributes", b"attributes", "span_id", b"span_id", "trace_id", b"trace_id", "tracestate", b"tracestate", "type", b"type"]) -> None: ...

    @typing.final
    class Links(google.protobuf.message.Message):
        """A collection of links, which are references from this span to a span
        in the same or different trace.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LINK_FIELD_NUMBER: builtins.int
        DROPPED_LINKS_COUNT_FIELD_NUMBER: builtins.int
        dropped_links_count: builtins.int
        """The number of dropped links after the maximum size was enforced. If
        this value is 0, then no links were dropped.
        """
        @property
        def link(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Span.Link]:
            """A collection of links."""

        def __init__(
            self,
            *,
            link: collections.abc.Iterable[global___Span.Link] | None = ...,
            dropped_links_count: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["dropped_links_count", b"dropped_links_count", "link", b"link"]) -> None: ...

    TRACE_ID_FIELD_NUMBER: builtins.int
    SPAN_ID_FIELD_NUMBER: builtins.int
    TRACESTATE_FIELD_NUMBER: builtins.int
    PARENT_SPAN_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    ATTRIBUTES_FIELD_NUMBER: builtins.int
    STACK_TRACE_FIELD_NUMBER: builtins.int
    TIME_EVENTS_FIELD_NUMBER: builtins.int
    LINKS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    RESOURCE_FIELD_NUMBER: builtins.int
    SAME_PROCESS_AS_PARENT_SPAN_FIELD_NUMBER: builtins.int
    CHILD_SPAN_COUNT_FIELD_NUMBER: builtins.int
    trace_id: builtins.bytes
    """A unique identifier for a trace. All spans from the same trace share
    the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
    is considered invalid.

    This field is semantically required. Receiver should generate new
    random trace_id if empty or invalid trace_id was received.

    This field is required.
    """
    span_id: builtins.bytes
    """A unique identifier for a span within a trace, assigned when the span
    is created. The ID is an 8-byte array. An ID with all zeroes is considered
    invalid.

    This field is semantically required. Receiver should generate new
    random span_id if empty or invalid span_id was received.

    This field is required.
    """
    parent_span_id: builtins.bytes
    """The `span_id` of this span's parent span. If this is a root span, then this
    field must be empty. The ID is an 8-byte array.
    """
    kind: global___Span.SpanKind.ValueType
    """Distinguishes between spans generated in a particular context. For example,
    two spans with the same name may be distinguished using `CLIENT` (caller)
    and `SERVER` (callee) to identify queueing latency associated with the span.
    """
    @property
    def tracestate(self) -> global___Span.Tracestate:
        """The Tracestate on the span."""

    @property
    def name(self) -> global___TruncatableString:
        """A description of the span's operation.

        For example, the name can be a qualified method name or a file name
        and a line number where the operation is called. A best practice is to use
        the same display name at the same call point in an application.
        This makes it easier to correlate spans in different traces.

        This field is semantically required to be set to non-empty string.
        When null or empty string received - receiver may use string "name"
        as a replacement. There might be smarted algorithms implemented by
        receiver to fix the empty span name.

        This field is required.
        """

    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start time of the span. On the client side, this is the time kept by
        the local machine where the span execution starts. On the server side, this
        is the time when the server's application handler starts running.

        This field is semantically required. When not set on receive -
        receiver should set it to the value of end_time field if it was
        set. Or to the current time if neither was set. It is important to
        keep end_time > start_time for consistency.

        This field is required.
        """

    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end time of the span. On the client side, this is the time kept by
        the local machine where the span execution ends. On the server side, this
        is the time when the server application handler stops running.

        This field is semantically required. When not set on receive -
        receiver should set it to start_time value. It is important to
        keep end_time > start_time for consistency.

        This field is required.
        """

    @property
    def attributes(self) -> global___Span.Attributes:
        """A set of attributes on the span."""

    @property
    def stack_trace(self) -> global___StackTrace:
        """A stack trace captured at the start of the span."""

    @property
    def time_events(self) -> global___Span.TimeEvents:
        """The included time events."""

    @property
    def links(self) -> global___Span.Links:
        """The included links."""

    @property
    def status(self) -> global___Status:
        """An optional final status for this span. Semantically when Status
        wasn't set it is means span ended without errors and assume
        Status.Ok (code = 0).
        """

    @property
    def resource(self) -> opencensus.proto.resource.v1.resource_pb2.Resource:
        """An optional resource that is associated with this span. If not set, this span 
        should be part of a batch that does include the resource information, unless resource 
        information is unknown.
        """

    @property
    def same_process_as_parent_span(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """A highly recommended but not required flag that identifies when a
        trace crosses a process boundary. True when the parent_span belongs
        to the same process as the current span. This flag is most commonly
        used to indicate the need to adjust time as clocks in different
        processes may not be synchronized.
        """

    @property
    def child_span_count(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """An optional number of child spans that were generated while this span
        was active. If set, allows an implementation to detect missing child spans.
        """

    def __init__(
        self,
        *,
        trace_id: builtins.bytes = ...,
        span_id: builtins.bytes = ...,
        tracestate: global___Span.Tracestate | None = ...,
        parent_span_id: builtins.bytes = ...,
        name: global___TruncatableString | None = ...,
        kind: global___Span.SpanKind.ValueType = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        attributes: global___Span.Attributes | None = ...,
        stack_trace: global___StackTrace | None = ...,
        time_events: global___Span.TimeEvents | None = ...,
        links: global___Span.Links | None = ...,
        status: global___Status | None = ...,
        resource: opencensus.proto.resource.v1.resource_pb2.Resource | None = ...,
        same_process_as_parent_span: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        child_span_count: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["attributes", b"attributes", "child_span_count", b"child_span_count", "end_time", b"end_time", "links", b"links", "name", b"name", "resource", b"resource", "same_process_as_parent_span", b"same_process_as_parent_span", "stack_trace", b"stack_trace", "start_time", b"start_time", "status", b"status", "time_events", b"time_events", "tracestate", b"tracestate"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attributes", b"attributes", "child_span_count", b"child_span_count", "end_time", b"end_time", "kind", b"kind", "links", b"links", "name", b"name", "parent_span_id", b"parent_span_id", "resource", b"resource", "same_process_as_parent_span", b"same_process_as_parent_span", "span_id", b"span_id", "stack_trace", b"stack_trace", "start_time", b"start_time", "status", b"status", "time_events", b"time_events", "trace_id", b"trace_id", "tracestate", b"tracestate"]) -> None: ...

global___Span = Span

@typing.final
class Status(google.protobuf.message.Message):
    """The `Status` type defines a logical error model that is suitable for different
    programming environments, including REST APIs and RPC APIs. This proto's fields
    are a subset of those of
    [google.rpc.Status](https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto),
    which is used by [gRPC](https://github.com/grpc).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CODE_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    code: builtins.int
    """The status code. This is optional field. It is safe to assume 0 (OK)
    when not set.
    """
    message: builtins.str
    """A developer-facing error message, which should be in English."""
    def __init__(
        self,
        *,
        code: builtins.int = ...,
        message: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["code", b"code", "message", b"message"]) -> None: ...

global___Status = Status

@typing.final
class AttributeValue(google.protobuf.message.Message):
    """The value of an Attribute."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRING_VALUE_FIELD_NUMBER: builtins.int
    INT_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    int_value: builtins.int
    """A 64-bit signed integer."""
    bool_value: builtins.bool
    """A Boolean value represented by `true` or `false`."""
    double_value: builtins.float
    """A double value."""
    @property
    def string_value(self) -> global___TruncatableString:
        """A string up to 256 bytes long."""

    def __init__(
        self,
        *,
        string_value: global___TruncatableString | None = ...,
        int_value: builtins.int = ...,
        bool_value: builtins.bool = ...,
        double_value: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["bool_value", b"bool_value", "double_value", b"double_value", "int_value", b"int_value", "string_value", b"string_value", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["bool_value", b"bool_value", "double_value", b"double_value", "int_value", b"int_value", "string_value", b"string_value", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["string_value", "int_value", "bool_value", "double_value"] | None: ...

global___AttributeValue = AttributeValue

@typing.final
class StackTrace(google.protobuf.message.Message):
    """The call stack which originated this span."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class StackFrame(google.protobuf.message.Message):
        """A single stack frame in a stack trace."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        FUNCTION_NAME_FIELD_NUMBER: builtins.int
        ORIGINAL_FUNCTION_NAME_FIELD_NUMBER: builtins.int
        FILE_NAME_FIELD_NUMBER: builtins.int
        LINE_NUMBER_FIELD_NUMBER: builtins.int
        COLUMN_NUMBER_FIELD_NUMBER: builtins.int
        LOAD_MODULE_FIELD_NUMBER: builtins.int
        SOURCE_VERSION_FIELD_NUMBER: builtins.int
        line_number: builtins.int
        """The line number in `file_name` where the function call appears."""
        column_number: builtins.int
        """The column number where the function call appears, if available.
        This is important in JavaScript because of its anonymous functions.
        """
        @property
        def function_name(self) -> global___TruncatableString:
            """The fully-qualified name that uniquely identifies the function or
            method that is active in this frame.
            """

        @property
        def original_function_name(self) -> global___TruncatableString:
            """An un-mangled function name, if `function_name` is
            [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
            be fully qualified.
            """

        @property
        def file_name(self) -> global___TruncatableString:
            """The name of the source file where the function call appears."""

        @property
        def load_module(self) -> global___Module:
            """The binary module from where the code was loaded."""

        @property
        def source_version(self) -> global___TruncatableString:
            """The version of the deployed source code."""

        def __init__(
            self,
            *,
            function_name: global___TruncatableString | None = ...,
            original_function_name: global___TruncatableString | None = ...,
            file_name: global___TruncatableString | None = ...,
            line_number: builtins.int = ...,
            column_number: builtins.int = ...,
            load_module: global___Module | None = ...,
            source_version: global___TruncatableString | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["file_name", b"file_name", "function_name", b"function_name", "load_module", b"load_module", "original_function_name", b"original_function_name", "source_version", b"source_version"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["column_number", b"column_number", "file_name", b"file_name", "function_name", b"function_name", "line_number", b"line_number", "load_module", b"load_module", "original_function_name", b"original_function_name", "source_version", b"source_version"]) -> None: ...

    @typing.final
    class StackFrames(google.protobuf.message.Message):
        """A collection of stack frames, which can be truncated."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        FRAME_FIELD_NUMBER: builtins.int
        DROPPED_FRAMES_COUNT_FIELD_NUMBER: builtins.int
        dropped_frames_count: builtins.int
        """The number of stack frames that were dropped because there
        were too many stack frames.
        If this value is 0, then no stack frames were dropped.
        """
        @property
        def frame(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StackTrace.StackFrame]:
            """Stack frames in this call stack."""

        def __init__(
            self,
            *,
            frame: collections.abc.Iterable[global___StackTrace.StackFrame] | None = ...,
            dropped_frames_count: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["dropped_frames_count", b"dropped_frames_count", "frame", b"frame"]) -> None: ...

    STACK_FRAMES_FIELD_NUMBER: builtins.int
    STACK_TRACE_HASH_ID_FIELD_NUMBER: builtins.int
    stack_trace_hash_id: builtins.int
    """The hash ID is used to conserve network bandwidth for duplicate
    stack traces within a single trace.

    Often multiple spans will have identical stack traces.
    The first occurrence of a stack trace should contain both
    `stack_frames` and a value in `stack_trace_hash_id`.

    Subsequent spans within the same request can refer
    to that stack trace by setting only `stack_trace_hash_id`.

    TODO: describe how to deal with the case where stack_trace_hash_id is
    zero because it was not set.
    """
    @property
    def stack_frames(self) -> global___StackTrace.StackFrames:
        """Stack frames in this stack trace."""

    def __init__(
        self,
        *,
        stack_frames: global___StackTrace.StackFrames | None = ...,
        stack_trace_hash_id: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["stack_frames", b"stack_frames"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["stack_frames", b"stack_frames", "stack_trace_hash_id", b"stack_trace_hash_id"]) -> None: ...

global___StackTrace = StackTrace

@typing.final
class Module(google.protobuf.message.Message):
    """A description of a binary module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODULE_FIELD_NUMBER: builtins.int
    BUILD_ID_FIELD_NUMBER: builtins.int
    @property
    def module(self) -> global___TruncatableString:
        """TODO: document the meaning of this field.
        For example: main binary, kernel modules, and dynamic libraries
        such as libc.so, sharedlib.so.
        """

    @property
    def build_id(self) -> global___TruncatableString:
        """A unique identifier for the module, usually a hash of its
        contents.
        """

    def __init__(
        self,
        *,
        module: global___TruncatableString | None = ...,
        build_id: global___TruncatableString | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["build_id", b"build_id", "module", b"module"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["build_id", b"build_id", "module", b"module"]) -> None: ...

global___Module = Module

@typing.final
class TruncatableString(google.protobuf.message.Message):
    """A string that might be shortened to a specified length."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TRUNCATED_BYTE_COUNT_FIELD_NUMBER: builtins.int
    value: builtins.str
    """The shortened string. For example, if the original string was 500 bytes long and
    the limit of the string was 128 bytes, then this value contains the first 128
    bytes of the 500-byte string. Note that truncation always happens on a
    character boundary, to ensure that a truncated string is still valid UTF-8.
    Because it may contain multi-byte characters, the size of the truncated string
    may be less than the truncation limit.
    """
    truncated_byte_count: builtins.int
    """The number of bytes removed from the original string. If this
    value is 0, then the string was not shortened.
    """
    def __init__(
        self,
        *,
        value: builtins.str = ...,
        truncated_byte_count: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["truncated_byte_count", b"truncated_byte_count", "value", b"value"]) -> None: ...

global___TruncatableString = TruncatableString
