"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.type.v3.percent_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ResourceMonitor(google.protobuf.message.Message):
    """The Overload Manager provides an extensible framework to protect Envoy instances
    from overload of various resources (memory, cpu, file descriptors, etc).
    It monitors a configurable set of resources and notifies registered listeners
    when triggers related to those resources fire.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TYPED_CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the resource monitor to instantiate. Must match a registered
    resource monitor type.
    See the :ref:`extensions listed in typed_config below <extension_category_envoy.resource_monitors>` for the default list of available resource monitor.
    """
    @property
    def typed_config(self) -> google.protobuf.any_pb2.Any: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        typed_config: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config_type", b"config_type", "typed_config", b"typed_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config_type", b"config_type", "name", b"name", "typed_config", b"typed_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["config_type", b"config_type"]) -> typing.Literal["typed_config"] | None: ...

global___ResourceMonitor = ResourceMonitor

@typing.final
class ThresholdTrigger(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.float
    """If the resource pressure is greater than or equal to this value, the trigger
    will enter saturation.
    """
    def __init__(
        self,
        *,
        value: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___ThresholdTrigger = ThresholdTrigger

@typing.final
class ScaledTrigger(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCALING_THRESHOLD_FIELD_NUMBER: builtins.int
    SATURATION_THRESHOLD_FIELD_NUMBER: builtins.int
    scaling_threshold: builtins.float
    """If the resource pressure is greater than this value, the trigger will be in the
    :ref:`scaling <arch_overview_overload_manager-triggers-state>` state with value
    ``(pressure - scaling_threshold) / (saturation_threshold - scaling_threshold)``.
    """
    saturation_threshold: builtins.float
    """If the resource pressure is greater than this value, the trigger will enter saturation."""
    def __init__(
        self,
        *,
        scaling_threshold: builtins.float = ...,
        saturation_threshold: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["saturation_threshold", b"saturation_threshold", "scaling_threshold", b"scaling_threshold"]) -> None: ...

global___ScaledTrigger = ScaledTrigger

@typing.final
class Trigger(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    THRESHOLD_FIELD_NUMBER: builtins.int
    SCALED_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the resource this is a trigger for."""
    @property
    def threshold(self) -> global___ThresholdTrigger: ...
    @property
    def scaled(self) -> global___ScaledTrigger: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        threshold: global___ThresholdTrigger | None = ...,
        scaled: global___ScaledTrigger | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["scaled", b"scaled", "threshold", b"threshold", "trigger_oneof", b"trigger_oneof"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "scaled", b"scaled", "threshold", b"threshold", "trigger_oneof", b"trigger_oneof"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["trigger_oneof", b"trigger_oneof"]) -> typing.Literal["threshold", "scaled"] | None: ...

global___Trigger = Trigger

@typing.final
class ScaleTimersOverloadActionConfig(google.protobuf.message.Message):
    """Typed configuration for the "envoy.overload_actions.reduce_timeouts" action. See
    :ref:`the docs <config_overload_manager_reducing_timeouts>` for an example of how to configure
    the action with different timeouts and minimum values.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _TimerType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TimerTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ScaleTimersOverloadActionConfig._TimerType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNSPECIFIED: ScaleTimersOverloadActionConfig._TimerType.ValueType  # 0
        """Unsupported value; users must explicitly specify the timer they want scaled."""
        HTTP_DOWNSTREAM_CONNECTION_IDLE: ScaleTimersOverloadActionConfig._TimerType.ValueType  # 1
        """Adjusts the idle timer for downstream HTTP connections that takes effect when there are no active streams.
        This affects the value of :ref:`HttpConnectionManager.common_http_protocol_options.idle_timeout
        <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.idle_timeout>`
        """
        HTTP_DOWNSTREAM_STREAM_IDLE: ScaleTimersOverloadActionConfig._TimerType.ValueType  # 2
        """Adjusts the idle timer for HTTP streams initiated by downstream clients.
        This affects the value of :ref:`RouteAction.idle_timeout <envoy_v3_api_field_config.route.v3.RouteAction.idle_timeout>` and
        :ref:`HttpConnectionManager.stream_idle_timeout
        <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout>`
        """
        TRANSPORT_SOCKET_CONNECT: ScaleTimersOverloadActionConfig._TimerType.ValueType  # 3
        """Adjusts the timer for how long downstream clients have to finish transport-level negotiations
        before the connection is closed.
        This affects the value of
        :ref:`FilterChain.transport_socket_connect_timeout <envoy_v3_api_field_config.listener.v3.FilterChain.transport_socket_connect_timeout>`.
        """

    class TimerType(_TimerType, metaclass=_TimerTypeEnumTypeWrapper): ...
    UNSPECIFIED: ScaleTimersOverloadActionConfig.TimerType.ValueType  # 0
    """Unsupported value; users must explicitly specify the timer they want scaled."""
    HTTP_DOWNSTREAM_CONNECTION_IDLE: ScaleTimersOverloadActionConfig.TimerType.ValueType  # 1
    """Adjusts the idle timer for downstream HTTP connections that takes effect when there are no active streams.
    This affects the value of :ref:`HttpConnectionManager.common_http_protocol_options.idle_timeout
    <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.idle_timeout>`
    """
    HTTP_DOWNSTREAM_STREAM_IDLE: ScaleTimersOverloadActionConfig.TimerType.ValueType  # 2
    """Adjusts the idle timer for HTTP streams initiated by downstream clients.
    This affects the value of :ref:`RouteAction.idle_timeout <envoy_v3_api_field_config.route.v3.RouteAction.idle_timeout>` and
    :ref:`HttpConnectionManager.stream_idle_timeout
    <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout>`
    """
    TRANSPORT_SOCKET_CONNECT: ScaleTimersOverloadActionConfig.TimerType.ValueType  # 3
    """Adjusts the timer for how long downstream clients have to finish transport-level negotiations
    before the connection is closed.
    This affects the value of
    :ref:`FilterChain.transport_socket_connect_timeout <envoy_v3_api_field_config.listener.v3.FilterChain.transport_socket_connect_timeout>`.
    """

    @typing.final
    class ScaleTimer(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TIMER_FIELD_NUMBER: builtins.int
        MIN_TIMEOUT_FIELD_NUMBER: builtins.int
        MIN_SCALE_FIELD_NUMBER: builtins.int
        timer: global___ScaleTimersOverloadActionConfig.TimerType.ValueType
        """The type of timer this minimum applies to."""
        @property
        def min_timeout(self) -> google.protobuf.duration_pb2.Duration:
            """Sets the minimum duration as an absolute value."""

        @property
        def min_scale(self) -> envoy.type.v3.percent_pb2.Percent:
            """Sets the minimum duration as a percentage of the maximum value."""

        def __init__(
            self,
            *,
            timer: global___ScaleTimersOverloadActionConfig.TimerType.ValueType = ...,
            min_timeout: google.protobuf.duration_pb2.Duration | None = ...,
            min_scale: envoy.type.v3.percent_pb2.Percent | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["min_scale", b"min_scale", "min_timeout", b"min_timeout", "overload_adjust", b"overload_adjust"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["min_scale", b"min_scale", "min_timeout", b"min_timeout", "overload_adjust", b"overload_adjust", "timer", b"timer"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["overload_adjust", b"overload_adjust"]) -> typing.Literal["min_timeout", "min_scale"] | None: ...

    TIMER_SCALE_FACTORS_FIELD_NUMBER: builtins.int
    @property
    def timer_scale_factors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ScaleTimersOverloadActionConfig.ScaleTimer]:
        """A set of timer scaling rules to be applied."""

    def __init__(
        self,
        *,
        timer_scale_factors: collections.abc.Iterable[global___ScaleTimersOverloadActionConfig.ScaleTimer] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["timer_scale_factors", b"timer_scale_factors"]) -> None: ...

global___ScaleTimersOverloadActionConfig = ScaleTimersOverloadActionConfig

@typing.final
class OverloadAction(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TRIGGERS_FIELD_NUMBER: builtins.int
    TYPED_CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the overload action. This is just a well-known string that listeners can
    use for registering callbacks. Custom overload actions should be named using reverse
    DNS to ensure uniqueness.
    """
    @property
    def triggers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Trigger]:
        """A set of triggers for this action. The state of the action is the maximum
        state of all triggers, which can be scaling between 0 and 1 or saturated. Listeners
        are notified when the overload action changes state.
        """

    @property
    def typed_config(self) -> google.protobuf.any_pb2.Any:
        """Configuration for the action being instantiated."""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        triggers: collections.abc.Iterable[global___Trigger] | None = ...,
        typed_config: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["typed_config", b"typed_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "triggers", b"triggers", "typed_config", b"typed_config"]) -> None: ...

global___OverloadAction = OverloadAction

@typing.final
class BufferFactoryConfig(google.protobuf.message.Message):
    """Configuration for which accounts the WatermarkBuffer Factories should
    track.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MINIMUM_ACCOUNT_TO_TRACK_POWER_OF_TWO_FIELD_NUMBER: builtins.int
    minimum_account_to_track_power_of_two: builtins.int
    """The minimum power of two at which Envoy starts tracking an account.

    Envoy has 8 power of two buckets starting with the provided exponent below.
    Concretely the 1st bucket contains accounts for streams that use
    [2^minimum_account_to_track_power_of_two,
    2^(minimum_account_to_track_power_of_two + 1)) bytes.
    With the 8th bucket tracking accounts
    >= 128 * 2^minimum_account_to_track_power_of_two.

    The maximum value is 56, since we're using uint64_t for bytes counting,
    and that's the last value that would use the 8 buckets. In practice,
    we don't expect the proxy to be holding 2^56 bytes.

    If omitted, Envoy should not do any tracking.
    """
    def __init__(
        self,
        *,
        minimum_account_to_track_power_of_two: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["minimum_account_to_track_power_of_two", b"minimum_account_to_track_power_of_two"]) -> None: ...

global___BufferFactoryConfig = BufferFactoryConfig

@typing.final
class OverloadManager(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFRESH_INTERVAL_FIELD_NUMBER: builtins.int
    RESOURCE_MONITORS_FIELD_NUMBER: builtins.int
    ACTIONS_FIELD_NUMBER: builtins.int
    BUFFER_FACTORY_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def refresh_interval(self) -> google.protobuf.duration_pb2.Duration:
        """The interval for refreshing resource usage."""

    @property
    def resource_monitors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ResourceMonitor]:
        """The set of resources to monitor."""

    @property
    def actions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OverloadAction]:
        """The set of overload actions."""

    @property
    def buffer_factory_config(self) -> global___BufferFactoryConfig:
        """Configuration for buffer factory."""

    def __init__(
        self,
        *,
        refresh_interval: google.protobuf.duration_pb2.Duration | None = ...,
        resource_monitors: collections.abc.Iterable[global___ResourceMonitor] | None = ...,
        actions: collections.abc.Iterable[global___OverloadAction] | None = ...,
        buffer_factory_config: global___BufferFactoryConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["buffer_factory_config", b"buffer_factory_config", "refresh_interval", b"refresh_interval"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["actions", b"actions", "buffer_factory_config", b"buffer_factory_config", "refresh_interval", b"refresh_interval", "resource_monitors", b"resource_monitors"]) -> None: ...

global___OverloadManager = OverloadManager
