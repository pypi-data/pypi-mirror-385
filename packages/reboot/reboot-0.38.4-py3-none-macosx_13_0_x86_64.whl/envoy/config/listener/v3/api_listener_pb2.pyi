"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ApiListener(google.protobuf.message.Message):
    """[#protodoc-title: API listener]

    Describes a type of API listener, which is used in non-proxy clients. The type of API
    exposed to the non-proxy application depends on the type of API listener.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    API_LISTENER_FIELD_NUMBER: builtins.int
    @property
    def api_listener(self) -> google.protobuf.any_pb2.Any:
        """The type in this field determines the type of API listener. At present, the following
        types are supported:
        envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager (HTTP)
        envoy.extensions.filters.network.http_connection_manager.v3.EnvoyMobileHttpConnectionManager (HTTP)
        [#next-major-version: In the v3 API, replace this Any field with a oneof containing the
        specific config message for each type of API listener. We could not do this in v2 because
        it would have caused circular dependencies for go protos: lds.proto depends on this file,
        and http_connection_manager.proto depends on rds.proto, which is in the same directory as
        lds.proto, so lds.proto cannot depend on this file.]
        """

    def __init__(
        self,
        *,
        api_listener: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["api_listener", b"api_listener"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["api_listener", b"api_listener"]) -> None: ...

global___ApiListener = ApiListener
