"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.base_pb2
import envoy.config.core.v3.extension_pb2
import envoy.config.core.v3.grpc_service_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing
import xds.core.v3.authority_pb2

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ApiVersion:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ApiVersionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ApiVersion.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    AUTO: _ApiVersion.ValueType  # 0
    """When not specified, we assume v2, to ease migration to Envoy's stable API
    versioning. If a client does not support v2 (e.g. due to deprecation), this
    is an invalid value.
    """
    V2: _ApiVersion.ValueType  # 1
    """Use xDS v2 API."""
    V3: _ApiVersion.ValueType  # 2
    """Use xDS v3 API."""

class ApiVersion(_ApiVersion, metaclass=_ApiVersionEnumTypeWrapper):
    """[#protodoc-title: Configuration sources]

    xDS API and non-xDS services version. This is used to describe both resource and transport
    protocol versions (in distinct configuration fields).
    """

AUTO: ApiVersion.ValueType  # 0
"""When not specified, we assume v2, to ease migration to Envoy's stable API
versioning. If a client does not support v2 (e.g. due to deprecation), this
is an invalid value.
"""
V2: ApiVersion.ValueType  # 1
"""Use xDS v2 API."""
V3: ApiVersion.ValueType  # 2
"""Use xDS v3 API."""
global___ApiVersion = ApiVersion

@typing.final
class ApiConfigSource(google.protobuf.message.Message):
    """API configuration source. This identifies the API type and cluster that Envoy
    will use to fetch an xDS API.
    [#next-free-field: 10]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _ApiType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ApiTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ApiConfigSource._ApiType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE: ApiConfigSource._ApiType.ValueType  # 0
        """Ideally this would be 'reserved 0' but one can't reserve the default
        value. Instead we throw an exception if this is ever used.
        """
        REST: ApiConfigSource._ApiType.ValueType  # 1
        """REST-JSON v2 API. The `canonical JSON encoding
        <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
        the v2 protos is used.
        """
        GRPC: ApiConfigSource._ApiType.ValueType  # 2
        """SotW gRPC service."""
        DELTA_GRPC: ApiConfigSource._ApiType.ValueType  # 3
        """Using the delta xDS gRPC service, i.e. DeltaDiscovery{Request,Response}
        rather than Discovery{Request,Response}. Rather than sending Envoy the entire state
        with every update, the xDS server only sends what has changed since the last update.
        """
        AGGREGATED_GRPC: ApiConfigSource._ApiType.ValueType  # 5
        """SotW xDS gRPC with ADS. All resources which resolve to this configuration source will be
        multiplexed on a single connection to an ADS endpoint.
        [#not-implemented-hide:]
        """
        AGGREGATED_DELTA_GRPC: ApiConfigSource._ApiType.ValueType  # 6
        """Delta xDS gRPC with ADS. All resources which resolve to this configuration source will be
        multiplexed on a single connection to an ADS endpoint.
        [#not-implemented-hide:]
        """

    class ApiType(_ApiType, metaclass=_ApiTypeEnumTypeWrapper):
        """APIs may be fetched via either REST or gRPC."""

    DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE: ApiConfigSource.ApiType.ValueType  # 0
    """Ideally this would be 'reserved 0' but one can't reserve the default
    value. Instead we throw an exception if this is ever used.
    """
    REST: ApiConfigSource.ApiType.ValueType  # 1
    """REST-JSON v2 API. The `canonical JSON encoding
    <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
    the v2 protos is used.
    """
    GRPC: ApiConfigSource.ApiType.ValueType  # 2
    """SotW gRPC service."""
    DELTA_GRPC: ApiConfigSource.ApiType.ValueType  # 3
    """Using the delta xDS gRPC service, i.e. DeltaDiscovery{Request,Response}
    rather than Discovery{Request,Response}. Rather than sending Envoy the entire state
    with every update, the xDS server only sends what has changed since the last update.
    """
    AGGREGATED_GRPC: ApiConfigSource.ApiType.ValueType  # 5
    """SotW xDS gRPC with ADS. All resources which resolve to this configuration source will be
    multiplexed on a single connection to an ADS endpoint.
    [#not-implemented-hide:]
    """
    AGGREGATED_DELTA_GRPC: ApiConfigSource.ApiType.ValueType  # 6
    """Delta xDS gRPC with ADS. All resources which resolve to this configuration source will be
    multiplexed on a single connection to an ADS endpoint.
    [#not-implemented-hide:]
    """

    API_TYPE_FIELD_NUMBER: builtins.int
    TRANSPORT_API_VERSION_FIELD_NUMBER: builtins.int
    CLUSTER_NAMES_FIELD_NUMBER: builtins.int
    GRPC_SERVICES_FIELD_NUMBER: builtins.int
    REFRESH_DELAY_FIELD_NUMBER: builtins.int
    REQUEST_TIMEOUT_FIELD_NUMBER: builtins.int
    RATE_LIMIT_SETTINGS_FIELD_NUMBER: builtins.int
    SET_NODE_ON_FIRST_MESSAGE_ONLY_FIELD_NUMBER: builtins.int
    CONFIG_VALIDATORS_FIELD_NUMBER: builtins.int
    api_type: global___ApiConfigSource.ApiType.ValueType
    """API type (gRPC, REST, delta gRPC)"""
    transport_api_version: global___ApiVersion.ValueType
    """API version for xDS transport protocol. This describes the xDS gRPC/REST
    endpoint and version of [Delta]DiscoveryRequest/Response used on the wire.
    """
    set_node_on_first_message_only: builtins.bool
    """Skip the node identifier in subsequent discovery requests for streaming gRPC config types."""
    @property
    def cluster_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Cluster names should be used only with REST. If > 1
        cluster is defined, clusters will be cycled through if any kind of failure
        occurs.

        .. note::

         The cluster with name ``cluster_name`` must be statically defined and its
         type must not be ``EDS``.
        """

    @property
    def grpc_services(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.core.v3.grpc_service_pb2.GrpcService]:
        """Multiple gRPC services be provided for GRPC. If > 1 cluster is defined,
        services will be cycled through if any kind of failure occurs.
        """

    @property
    def refresh_delay(self) -> google.protobuf.duration_pb2.Duration:
        """For REST APIs, the delay between successive polls."""

    @property
    def request_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """For REST APIs, the request timeout. If not set, a default value of 1s will be used."""

    @property
    def rate_limit_settings(self) -> global___RateLimitSettings:
        """For GRPC APIs, the rate limit settings. If present, discovery requests made by Envoy will be
        rate limited.
        """

    @property
    def config_validators(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.core.v3.extension_pb2.TypedExtensionConfig]:
        """A list of config validators that will be executed when a new update is
        received from the ApiConfigSource. Note that each validator handles a
        specific xDS service type, and only the validators corresponding to the
        type url (in ``:ref: DiscoveryResponse`` or ``:ref: DeltaDiscoveryResponse``)
        will be invoked.
        If the validator returns false or throws an exception, the config will be rejected by
        the client, and a NACK will be sent.
        [#extension-category: envoy.config.validators]
        """

    def __init__(
        self,
        *,
        api_type: global___ApiConfigSource.ApiType.ValueType = ...,
        transport_api_version: global___ApiVersion.ValueType = ...,
        cluster_names: collections.abc.Iterable[builtins.str] | None = ...,
        grpc_services: collections.abc.Iterable[envoy.config.core.v3.grpc_service_pb2.GrpcService] | None = ...,
        refresh_delay: google.protobuf.duration_pb2.Duration | None = ...,
        request_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        rate_limit_settings: global___RateLimitSettings | None = ...,
        set_node_on_first_message_only: builtins.bool = ...,
        config_validators: collections.abc.Iterable[envoy.config.core.v3.extension_pb2.TypedExtensionConfig] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["rate_limit_settings", b"rate_limit_settings", "refresh_delay", b"refresh_delay", "request_timeout", b"request_timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["api_type", b"api_type", "cluster_names", b"cluster_names", "config_validators", b"config_validators", "grpc_services", b"grpc_services", "rate_limit_settings", b"rate_limit_settings", "refresh_delay", b"refresh_delay", "request_timeout", b"request_timeout", "set_node_on_first_message_only", b"set_node_on_first_message_only", "transport_api_version", b"transport_api_version"]) -> None: ...

global___ApiConfigSource = ApiConfigSource

@typing.final
class AggregatedConfigSource(google.protobuf.message.Message):
    """Aggregated Discovery Service (ADS) options. This is currently empty, but when
    set in :ref:`ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>` can be used to
    specify that ADS is to be used.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___AggregatedConfigSource = AggregatedConfigSource

@typing.final
class SelfConfigSource(google.protobuf.message.Message):
    """[#not-implemented-hide:]
    Self-referencing config source options. This is currently empty, but when
    set in :ref:`ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>` can be used to
    specify that other data can be obtained from the same server.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSPORT_API_VERSION_FIELD_NUMBER: builtins.int
    transport_api_version: global___ApiVersion.ValueType
    """API version for xDS transport protocol. This describes the xDS gRPC/REST
    endpoint and version of [Delta]DiscoveryRequest/Response used on the wire.
    """
    def __init__(
        self,
        *,
        transport_api_version: global___ApiVersion.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["transport_api_version", b"transport_api_version"]) -> None: ...

global___SelfConfigSource = SelfConfigSource

@typing.final
class RateLimitSettings(google.protobuf.message.Message):
    """Rate Limit settings to be applied for discovery requests made by Envoy."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAX_TOKENS_FIELD_NUMBER: builtins.int
    FILL_RATE_FIELD_NUMBER: builtins.int
    @property
    def max_tokens(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Maximum number of tokens to be used for rate limiting discovery request calls. If not set, a
        default value of 100 will be used.
        """

    @property
    def fill_rate(self) -> google.protobuf.wrappers_pb2.DoubleValue:
        """Rate at which tokens will be filled per second. If not set, a default fill rate of 10 tokens
        per second will be used.
        """

    def __init__(
        self,
        *,
        max_tokens: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        fill_rate: google.protobuf.wrappers_pb2.DoubleValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fill_rate", b"fill_rate", "max_tokens", b"max_tokens"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fill_rate", b"fill_rate", "max_tokens", b"max_tokens"]) -> None: ...

global___RateLimitSettings = RateLimitSettings

@typing.final
class PathConfigSource(google.protobuf.message.Message):
    """Local filesystem path configuration source."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    WATCHED_DIRECTORY_FIELD_NUMBER: builtins.int
    path: builtins.str
    """Path on the filesystem to source and watch for configuration updates.
    When sourcing configuration for a :ref:`secret <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret>`,
    the certificate and key files are also watched for updates.

    .. note::

     The path to the source must exist at config load time.

    .. note::

      If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
      This is because in general only moves are atomic. The same method of swapping files as is
      demonstrated in the :ref:`runtime documentation <config_runtime_symbolic_link_swap>` can be
      used here also. If ``watched_directory`` is configured, no watch will be placed directly on
      this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
      this path. This is required in certain deployment scenarios. See below for more information.
    """
    @property
    def watched_directory(self) -> envoy.config.core.v3.base_pb2.WatchedDirectory:
        """If configured, this directory will be watched for *moves*. When an entry in this directory is
        moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.

        Specifically, if trying to load an xDS resource using a
        `Kubernetes ConfigMap <https://kubernetes.io/docs/concepts/configuration/configmap/>`_, the
        following configuration might be used:
        1. Store xds.yaml inside a ConfigMap.
        2. Mount the ConfigMap to ``/config_map/xds``
        3. Configure path ``/config_map/xds/xds.yaml``
        4. Configure watched directory ``/config_map/xds``

        The above configuration will ensure that Envoy watches the owning directory for moves which is
        required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
        """

    def __init__(
        self,
        *,
        path: builtins.str = ...,
        watched_directory: envoy.config.core.v3.base_pb2.WatchedDirectory | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["watched_directory", b"watched_directory"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "watched_directory", b"watched_directory"]) -> None: ...

global___PathConfigSource = PathConfigSource

@typing.final
class ConfigSource(google.protobuf.message.Message):
    """Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
    <config_cluster_manager>`, :ref:`routes
    <envoy_v3_api_msg_config.route.v3.RouteConfiguration>`, :ref:`endpoints
    <arch_overview_service_discovery>` etc. may either be sourced from the
    filesystem or from an xDS API source. Filesystem configs are watched with
    inotify for updates.
    [#next-free-field: 9]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUTHORITIES_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    PATH_CONFIG_SOURCE_FIELD_NUMBER: builtins.int
    API_CONFIG_SOURCE_FIELD_NUMBER: builtins.int
    ADS_FIELD_NUMBER: builtins.int
    SELF_FIELD_NUMBER: builtins.int
    INITIAL_FETCH_TIMEOUT_FIELD_NUMBER: builtins.int
    RESOURCE_API_VERSION_FIELD_NUMBER: builtins.int
    path: builtins.str
    """Deprecated in favor of ``path_config_source``. Use that field instead."""
    resource_api_version: global___ApiVersion.ValueType
    """API version for xDS resources. This implies the type URLs that the client
    will request for resources and the resource type that the client will in
    turn expect to be delivered.
    """
    @property
    def authorities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[xds.core.v3.authority_pb2.Authority]:
        """Authorities that this config source may be used for. An authority specified in a xdstp:// URL
        is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
        association between authority name and configuration source.
        [#not-implemented-hide:]
        """

    @property
    def path_config_source(self) -> global___PathConfigSource:
        """Local filesystem path configuration source."""

    @property
    def api_config_source(self) -> global___ApiConfigSource:
        """API configuration source."""

    @property
    def ads(self) -> global___AggregatedConfigSource:
        """When set, ADS will be used to fetch resources. The ADS API configuration
        source in the bootstrap configuration is used.
        """

    @property
    def self(self) -> global___SelfConfigSource:
        """[#not-implemented-hide:]
        When set, the client will access the resources from the same server it got the
        ConfigSource from, although not necessarily from the same stream. This is similar to the
        :ref:`ads<envoy_v3_api_field.ConfigSource.ads>` field, except that the client may use a
        different stream to the same server. As a result, this field can be used for things
        like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
        LDS to RDS on the same server without requiring the management server to know its name
        or required credentials.
        [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
        this field can implicitly mean to use the same stream in the case where the ConfigSource
        is provided via ADS and the specified data can also be obtained via ADS.]
        """

    @property
    def initial_fetch_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """When this timeout is specified, Envoy will wait no longer than the specified time for first
        config response on this xDS subscription during the :ref:`initialization process
        <arch_overview_initialization>`. After reaching the timeout, Envoy will move to the next
        initialization phase, even if the first config is not delivered yet. The timer is activated
        when the xDS API subscription starts, and is disarmed on first config update or on error. 0
        means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
        timeout applies). The default is 15s.
        """

    def __init__(
        self_,  # pyright: ignore[reportSelfClsParameterName]
        *,
        authorities: collections.abc.Iterable[xds.core.v3.authority_pb2.Authority] | None = ...,
        path: builtins.str = ...,
        path_config_source: global___PathConfigSource | None = ...,
        api_config_source: global___ApiConfigSource | None = ...,
        ads: global___AggregatedConfigSource | None = ...,
        self: global___SelfConfigSource | None = ...,
        initial_fetch_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        resource_api_version: global___ApiVersion.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ads", b"ads", "api_config_source", b"api_config_source", "config_source_specifier", b"config_source_specifier", "initial_fetch_timeout", b"initial_fetch_timeout", "path", b"path", "path_config_source", b"path_config_source", "self", b"self"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ads", b"ads", "api_config_source", b"api_config_source", "authorities", b"authorities", "config_source_specifier", b"config_source_specifier", "initial_fetch_timeout", b"initial_fetch_timeout", "path", b"path", "path_config_source", b"path_config_source", "resource_api_version", b"resource_api_version", "self", b"self"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["config_source_specifier", b"config_source_specifier"]) -> typing.Literal["path", "path_config_source", "api_config_source", "ads", "self"] | None: ...

global___ConfigSource = ConfigSource

@typing.final
class ExtensionConfigSource(google.protobuf.message.Message):
    """Configuration source specifier for a late-bound extension configuration. The
    parent resource is warmed until all the initial extension configurations are
    received, unless the flag to apply the default configuration is set.
    Subsequent extension updates are atomic on a per-worker basis. Once an
    extension configuration is applied to a request or a connection, it remains
    constant for the duration of processing. If the initial delivery of the
    extension configuration fails, due to a timeout for example, the optional
    default configuration is applied. Without a default configuration, the
    extension is disabled, until an extension configuration is received. The
    behavior of a disabled extension depends on the context. For example, a
    filter chain with a disabled extension filter rejects all incoming streams.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_SOURCE_FIELD_NUMBER: builtins.int
    DEFAULT_CONFIG_FIELD_NUMBER: builtins.int
    APPLY_DEFAULT_CONFIG_WITHOUT_WARMING_FIELD_NUMBER: builtins.int
    TYPE_URLS_FIELD_NUMBER: builtins.int
    apply_default_config_without_warming: builtins.bool
    """Use the default config as the initial configuration without warming and
    waiting for the first discovery response. Requires the default configuration
    to be supplied.
    """
    @property
    def config_source(self) -> global___ConfigSource: ...
    @property
    def default_config(self) -> google.protobuf.any_pb2.Any:
        """Optional default configuration to use as the initial configuration if
        there is a failure to receive the initial extension configuration or if
        ``apply_default_config_without_warming`` flag is set.
        """

    @property
    def type_urls(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A set of permitted extension type URLs. Extension configuration updates are rejected
        if they do not match any type URL in the set.
        """

    def __init__(
        self,
        *,
        config_source: global___ConfigSource | None = ...,
        default_config: google.protobuf.any_pb2.Any | None = ...,
        apply_default_config_without_warming: builtins.bool = ...,
        type_urls: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config_source", b"config_source", "default_config", b"default_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["apply_default_config_without_warming", b"apply_default_config_without_warming", "config_source", b"config_source", "default_config", b"default_config", "type_urls", b"type_urls"]) -> None: ...

global___ExtensionConfigSource = ExtensionConfigSource
