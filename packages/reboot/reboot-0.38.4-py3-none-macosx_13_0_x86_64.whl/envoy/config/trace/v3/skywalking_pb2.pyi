"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import envoy.config.core.v3.grpc_service_pb2
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class SkyWalkingConfig(google.protobuf.message.Message):
    """[#protodoc-title: SkyWalking tracer]

    Configuration for the SkyWalking tracer. Please note that if SkyWalking tracer is used as the
    provider of http tracer, then
    :ref:`start_child_span <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
    in the router must be set to true to get the correct topology and tracing data. Moreover, SkyWalking
    Tracer does not support SkyWalking extension header (``sw8-x``) temporarily.
    [#extension: envoy.tracers.skywalking]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRPC_SERVICE_FIELD_NUMBER: builtins.int
    CLIENT_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def grpc_service(self) -> envoy.config.core.v3.grpc_service_pb2.GrpcService:
        """SkyWalking collector service."""

    @property
    def client_config(self) -> global___ClientConfig: ...
    def __init__(
        self,
        *,
        grpc_service: envoy.config.core.v3.grpc_service_pb2.GrpcService | None = ...,
        client_config: global___ClientConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["client_config", b"client_config", "grpc_service", b"grpc_service"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["client_config", b"client_config", "grpc_service", b"grpc_service"]) -> None: ...

global___SkyWalkingConfig = SkyWalkingConfig

@typing.final
class ClientConfig(google.protobuf.message.Message):
    """Client config for SkyWalking tracer."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SERVICE_NAME_FIELD_NUMBER: builtins.int
    INSTANCE_NAME_FIELD_NUMBER: builtins.int
    BACKEND_TOKEN_FIELD_NUMBER: builtins.int
    MAX_CACHE_SIZE_FIELD_NUMBER: builtins.int
    service_name: builtins.str
    """Service name for SkyWalking tracer. If this field is empty, then local service cluster name
    that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
    message's :ref:`cluster <envoy_v3_api_field_config.core.v3.Node.cluster>` field or command line
    option :option:`--service-cluster` will be used. If both this field and local service cluster
    name are empty, ``EnvoyProxy`` is used as the service name by default.
    """
    instance_name: builtins.str
    """Service instance name for SkyWalking tracer. If this field is empty, then local service node
    that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
    message's :ref:`id <envoy_v3_api_field_config.core.v3.Node.id>` field or command line  option
    :option:`--service-node` will be used. If both this field and local service node are empty,
    ``EnvoyProxy`` is used as the instance name by default.
    """
    backend_token: builtins.str
    """Inline authentication token string."""
    @property
    def max_cache_size(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Envoy caches the segment in memory when the SkyWalking backend service is temporarily unavailable.
        This field specifies the maximum number of segments that can be cached. If not specified, the
        default is 1024.
        """

    def __init__(
        self,
        *,
        service_name: builtins.str = ...,
        instance_name: builtins.str = ...,
        backend_token: builtins.str = ...,
        max_cache_size: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["backend_token", b"backend_token", "backend_token_specifier", b"backend_token_specifier", "max_cache_size", b"max_cache_size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["backend_token", b"backend_token", "backend_token_specifier", b"backend_token_specifier", "instance_name", b"instance_name", "max_cache_size", b"max_cache_size", "service_name", b"service_name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["backend_token_specifier", b"backend_token_specifier"]) -> typing.Literal["backend_token"] | None: ...

global___ClientConfig = ClientConfig
