"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.accesslog.v3.accesslog_pb2
import envoy.extensions.filters.network.http_connection_manager.v3.http_connection_manager_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Router(google.protobuf.message.Message):
    """[#protodoc-title: Router]
    Router :ref:`configuration overview <config_http_filters_router>`.
    [#extension: envoy.filters.http.router]

    [#next-free-field: 9]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DYNAMIC_STATS_FIELD_NUMBER: builtins.int
    START_CHILD_SPAN_FIELD_NUMBER: builtins.int
    UPSTREAM_LOG_FIELD_NUMBER: builtins.int
    SUPPRESS_ENVOY_HEADERS_FIELD_NUMBER: builtins.int
    STRICT_CHECK_HEADERS_FIELD_NUMBER: builtins.int
    RESPECT_EXPECTED_RQ_TIMEOUT_FIELD_NUMBER: builtins.int
    SUPPRESS_GRPC_REQUEST_FAILURE_CODE_STATS_FIELD_NUMBER: builtins.int
    UPSTREAM_HTTP_FILTERS_FIELD_NUMBER: builtins.int
    start_child_span: builtins.bool
    """Whether to start a child span for egress routed calls. This can be
    useful in scenarios where other filters (auth, ratelimit, etc.) make
    outbound calls and have child spans rooted at the same ingress
    parent. Defaults to false.
    """
    suppress_envoy_headers: builtins.bool
    """Do not add any additional ``x-envoy-`` headers to requests or responses. This
    only affects the :ref:`router filter generated x-envoy- headers
    <config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
    connection manager may continue to set ``x-envoy-`` headers.
    """
    respect_expected_rq_timeout: builtins.bool
    """If not set, ingress Envoy will ignore
    :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
    Envoy, when deriving timeout for upstream cluster.
    """
    suppress_grpc_request_failure_code_stats: builtins.bool
    """If set, Envoy will avoid incrementing HTTP failure code stats
    on gRPC requests. This includes the individual status code value
    (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
    This field is useful if interested in relying only on the gRPC
    stats filter to define success and failure metrics for gRPC requests
    as not all failed gRPC requests charge HTTP status code metrics. See
    :ref:`gRPC stats filter<config_http_filters_grpc_stats>` documentation
    for more details.
    """
    @property
    def dynamic_stats(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Whether the router generates dynamic cluster statistics. Defaults to
        true. Can be disabled in high performance scenarios.
        """

    @property
    def upstream_log(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.accesslog.v3.accesslog_pb2.AccessLog]:
        """Configuration for HTTP upstream logs emitted by the router. Upstream logs
        are configured in the same way as access logs, but each log entry represents
        an upstream request. Presuming retries are configured, multiple upstream
        requests may be made for each downstream (inbound) request.
        """

    @property
    def strict_check_headers(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Specifies a list of HTTP headers to strictly validate. Envoy will reject a
        request and respond with HTTP status 400 if the request contains an invalid
        value for any of the headers listed in this field. Strict header checking
        is only supported for the following headers:

        Value must be a ','-delimited list (i.e. no spaces) of supported retry
        policy values:

        * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
        * :ref:`config_http_filters_router_x-envoy-retry-on`

        Value must be an integer:

        * :ref:`config_http_filters_router_x-envoy-max-retries`
        * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
        * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
        """

    @property
    def upstream_http_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.extensions.filters.network.http_connection_manager.v3.http_connection_manager_pb2.HttpFilter]:
        """.. note::
          Upstream HTTP filters are currently in alpha.

        Optional HTTP filters for the upstream filter chain.

        These filters will be applied for all requests that pass through the router.
        They will also be applied to shadowed requests.
        Upstream filters cannot change route or cluster.
        Upstream filters specified on the cluster will override these filters.

        If using upstream filters, please be aware that local errors sent by
        upstream filters will not trigger retries, and local errors sent by
        upstream filters will count as a final response if hedging is configured.
        [#extension-category: envoy.filters.http.upstream]
        """

    def __init__(
        self,
        *,
        dynamic_stats: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        start_child_span: builtins.bool = ...,
        upstream_log: collections.abc.Iterable[envoy.config.accesslog.v3.accesslog_pb2.AccessLog] | None = ...,
        suppress_envoy_headers: builtins.bool = ...,
        strict_check_headers: collections.abc.Iterable[builtins.str] | None = ...,
        respect_expected_rq_timeout: builtins.bool = ...,
        suppress_grpc_request_failure_code_stats: builtins.bool = ...,
        upstream_http_filters: collections.abc.Iterable[envoy.extensions.filters.network.http_connection_manager.v3.http_connection_manager_pb2.HttpFilter] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["dynamic_stats", b"dynamic_stats"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dynamic_stats", b"dynamic_stats", "respect_expected_rq_timeout", b"respect_expected_rq_timeout", "start_child_span", b"start_child_span", "strict_check_headers", b"strict_check_headers", "suppress_envoy_headers", b"suppress_envoy_headers", "suppress_grpc_request_failure_code_stats", b"suppress_grpc_request_failure_code_stats", "upstream_http_filters", b"upstream_http_filters", "upstream_log", b"upstream_log"]) -> None: ...

global___Router = Router
