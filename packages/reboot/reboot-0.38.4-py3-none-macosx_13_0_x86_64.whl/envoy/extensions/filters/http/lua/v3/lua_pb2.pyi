"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.base_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Lua(google.protobuf.message.Message):
    """[#protodoc-title: Lua]
    Lua :ref:`configuration overview <config_http_filters_lua>`.
    [#extension: envoy.filters.http.lua]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class SourceCodesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> envoy.config.core.v3.base_pb2.DataSource: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: envoy.config.core.v3.base_pb2.DataSource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    INLINE_CODE_FIELD_NUMBER: builtins.int
    SOURCE_CODES_FIELD_NUMBER: builtins.int
    DEFAULT_SOURCE_CODE_FIELD_NUMBER: builtins.int
    STAT_PREFIX_FIELD_NUMBER: builtins.int
    inline_code: builtins.str
    """The Lua code that Envoy will execute. This can be a very small script that
    further loads code from disk if desired. Note that if JSON configuration is used, the code must
    be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
    strings so complex scripts can be easily expressed inline in the configuration.

    This field is deprecated. Please use
    :ref:`default_source_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code>`.
    Only one of :ref:`inline_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.inline_code>`
    or :ref:`default_source_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code>`
    can be set for the Lua filter.
    """
    stat_prefix: builtins.str
    """Optional additional prefix to use when emitting statistics. By default
    metrics are emitted in *.lua.* namespace. If multiple lua filters are
    configured in a filter chain, the stats from each filter instance can
    be emitted using custom stat prefix to distinguish emitted
    statistics. For example:

    .. code-block:: yaml

      http_filters:
        - name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            stat_prefix: foo_script # This emits lua.foo_script.errors etc.
        - name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            stat_prefix: bar_script # This emits lua.bar_script.errors etc.
    """
    @property
    def source_codes(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, envoy.config.core.v3.base_pb2.DataSource]:
        """Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
        <envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute>`. The Lua source codes can be
        loaded from inline string or local files.

        Example:

        .. code-block:: yaml

          source_codes:
            hello.lua:
              inline_string: |
                function envoy_on_response(response_handle)
                  -- Do something.
                end
            world.lua:
              filename: /etc/lua/world.lua
        """

    @property
    def default_source_code(self) -> envoy.config.core.v3.base_pb2.DataSource:
        """The default Lua code that Envoy will execute. If no per route config is provided
        for the request, this Lua code will be applied.
        """

    def __init__(
        self,
        *,
        inline_code: builtins.str = ...,
        source_codes: collections.abc.Mapping[builtins.str, envoy.config.core.v3.base_pb2.DataSource] | None = ...,
        default_source_code: envoy.config.core.v3.base_pb2.DataSource | None = ...,
        stat_prefix: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["default_source_code", b"default_source_code"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["default_source_code", b"default_source_code", "inline_code", b"inline_code", "source_codes", b"source_codes", "stat_prefix", b"stat_prefix"]) -> None: ...

global___Lua = Lua

@typing.final
class LuaPerRoute(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DISABLED_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SOURCE_CODE_FIELD_NUMBER: builtins.int
    disabled: builtins.bool
    """Disable the Lua filter for this particular vhost or route. If disabled is specified in
    multiple per-filter-configs, the most specific one will be used.
    """
    name: builtins.str
    """A name of a Lua source code stored in
    :ref:`Lua.source_codes <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.source_codes>`.
    """
    @property
    def source_code(self) -> envoy.config.core.v3.base_pb2.DataSource:
        """A configured per-route Lua source code that can be served by RDS or provided inline."""

    def __init__(
        self,
        *,
        disabled: builtins.bool = ...,
        name: builtins.str = ...,
        source_code: envoy.config.core.v3.base_pb2.DataSource | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["disabled", b"disabled", "name", b"name", "override", b"override", "source_code", b"source_code"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["disabled", b"disabled", "name", b"name", "override", b"override", "source_code", b"source_code"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["override", b"override"]) -> typing.Literal["disabled", "name", "source_code"] | None: ...

global___LuaPerRoute = LuaPerRoute
