# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.v1alpha1.admin import export_import_pb2 as rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2


class ExportImportStub(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListConsensuses = channel.unary_unary(
                '/rbt.v1alpha1.admin.ExportImport/ListConsensuses',
                request_serializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ListConsensusesRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ListConsensusesResponse.FromString,
                _registered_method=True)
        self.Export = channel.unary_stream(
                '/rbt.v1alpha1.admin.ExportImport/Export',
                request_serializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportImportItem.FromString,
                _registered_method=True)
        self.Import = channel.stream_unary(
                '/rbt.v1alpha1.admin.ExportImport/Import',
                request_serializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportImportItem.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ImportResponse.FromString,
                _registered_method=True)


class ExportImportServicer(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def ListConsensuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Export(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Import(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExportImportServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListConsensuses': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConsensuses,
                    request_deserializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ListConsensusesRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ListConsensusesResponse.SerializeToString,
            ),
            'Export': grpc.unary_stream_rpc_method_handler(
                    servicer.Export,
                    request_deserializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportImportItem.SerializeToString,
            ),
            'Import': grpc.stream_unary_rpc_method_handler(
                    servicer.Import,
                    request_deserializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportImportItem.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ImportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.v1alpha1.admin.ExportImport', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.v1alpha1.admin.ExportImport', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ExportImport(object):
    """//////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def ListConsensuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.admin.ExportImport/ListConsensuses',
            rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ListConsensusesRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ListConsensusesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rbt.v1alpha1.admin.ExportImport/Export',
            rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportImportItem.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Import(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/rbt.v1alpha1.admin.ExportImport/Import',
            rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ExportImportItem.SerializeToString,
            rbt_dot_v1alpha1_dot_admin_dot_export__import__pb2.ImportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
