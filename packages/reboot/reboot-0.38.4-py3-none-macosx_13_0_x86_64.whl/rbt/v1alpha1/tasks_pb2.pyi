"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TaskId(google.protobuf.message.Message):
    """//////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATE_TYPE_FIELD_NUMBER: builtins.int
    STATE_REF_FIELD_NUMBER: builtins.int
    TASK_UUID_FIELD_NUMBER: builtins.int
    state_type: builtins.str
    state_ref: builtins.str
    task_uuid: builtins.bytes
    def __init__(
        self,
        *,
        state_type: builtins.str = ...,
        state_ref: builtins.str = ...,
        task_uuid: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["state_ref", b"state_ref", "state_type", b"state_type", "task_uuid", b"task_uuid"]) -> None: ...

global___TaskId = TaskId

@typing.final
class TaskInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Status:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[TaskInfo._Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: TaskInfo._Status.ValueType  # 0
        STARTED: TaskInfo._Status.ValueType  # 1
        SCHEDULED: TaskInfo._Status.ValueType  # 2
        """If task is SCHEDULED, it means that it was scheduled and is
        waiting to be executed for the first time.
        """
        SCHEDULED_RETRY: TaskInfo._Status.ValueType  # 3
        """If task is SCHEDULED_RETRY, it means that it had started, but
        failed, and is now waiting for some backoff before executing a
        retry.
        """
        SCHEDULED_ITERATION: TaskInfo._Status.ValueType  # 6
        """If a task has status SCHEDULED_ITERATION, it means that it had
        started, but is now waiting for the next iteration of its loop to
        begin.
        """
        CANCELLED: TaskInfo._Status.ValueType  # 4
        """If task is CANCELLED, it means that it was cancelled before it
        was completed.
        """
        COMPLETED: TaskInfo._Status.ValueType  # 5
        """If task is COMPLETED, it means that it was executed and completed
        successfully.
        """

    class Status(_Status, metaclass=_StatusEnumTypeWrapper): ...
    UNKNOWN: TaskInfo.Status.ValueType  # 0
    STARTED: TaskInfo.Status.ValueType  # 1
    SCHEDULED: TaskInfo.Status.ValueType  # 2
    """If task is SCHEDULED, it means that it was scheduled and is
    waiting to be executed for the first time.
    """
    SCHEDULED_RETRY: TaskInfo.Status.ValueType  # 3
    """If task is SCHEDULED_RETRY, it means that it had started, but
    failed, and is now waiting for some backoff before executing a
    retry.
    """
    SCHEDULED_ITERATION: TaskInfo.Status.ValueType  # 6
    """If a task has status SCHEDULED_ITERATION, it means that it had
    started, but is now waiting for the next iteration of its loop to
    begin.
    """
    CANCELLED: TaskInfo.Status.ValueType  # 4
    """If task is CANCELLED, it means that it was cancelled before it
    was completed.
    """
    COMPLETED: TaskInfo.Status.ValueType  # 5
    """If task is COMPLETED, it means that it was executed and completed
    successfully.
    """

    STATUS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    METHOD_FIELD_NUMBER: builtins.int
    OCCURRED_AT_FIELD_NUMBER: builtins.int
    SCHEDULED_AT_FIELD_NUMBER: builtins.int
    ITERATIONS_FIELD_NUMBER: builtins.int
    NUM_RUNS_FAILED_RECENTLY_FIELD_NUMBER: builtins.int
    status: global___TaskInfo.Status.ValueType
    method: builtins.str
    iterations: builtins.int
    """The number of completed iterations the task has gone through. Note
    that tasks that don't loop are still considered to complete one
    iteration.
    """
    num_runs_failed_recently: builtins.int
    """Number of runs that failed in a retry loop recently (since the consensus
    most recently came up).
    """
    @property
    def task_id(self) -> global___TaskId: ...
    @property
    def occurred_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """When we got to this state. Always there."""

    @property
    def scheduled_at(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """When we expect to next transition. Only for scheduled statuses."""

    def __init__(
        self,
        *,
        status: global___TaskInfo.Status.ValueType = ...,
        task_id: global___TaskId | None = ...,
        method: builtins.str = ...,
        occurred_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        scheduled_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        iterations: builtins.int = ...,
        num_runs_failed_recently: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["occurred_at", b"occurred_at", "scheduled_at", b"scheduled_at", "task_id", b"task_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["iterations", b"iterations", "method", b"method", "num_runs_failed_recently", b"num_runs_failed_recently", "occurred_at", b"occurred_at", "scheduled_at", b"scheduled_at", "status", b"status", "task_id", b"task_id"]) -> None: ...

global___TaskInfo = TaskInfo

@typing.final
class WaitRequest(google.protobuf.message.Message):
    """//////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TASK_ID_FIELD_NUMBER: builtins.int
    @property
    def task_id(self) -> global___TaskId: ...
    def __init__(
        self,
        *,
        task_id: global___TaskId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["task_id", b"task_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["task_id", b"task_id"]) -> None: ...

global___WaitRequest = WaitRequest

@typing.final
class TaskResponseOrError(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    @property
    def response(self) -> google.protobuf.any_pb2.Any: ...
    @property
    def error(self) -> google.protobuf.any_pb2.Any: ...
    def __init__(
        self,
        *,
        response: google.protobuf.any_pb2.Any | None = ...,
        error: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "response", b"response", "response_or_error", b"response_or_error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "response", b"response", "response_or_error", b"response_or_error"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["response_or_error", b"response_or_error"]) -> typing.Literal["response", "error"] | None: ...

global___TaskResponseOrError = TaskResponseOrError

@typing.final
class WaitResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSE_OR_ERROR_FIELD_NUMBER: builtins.int
    @property
    def response_or_error(self) -> global___TaskResponseOrError: ...
    def __init__(
        self,
        *,
        response_or_error: global___TaskResponseOrError | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["response_or_error", b"response_or_error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["response_or_error", b"response_or_error"]) -> None: ...

global___WaitResponse = WaitResponse

@typing.final
class ListTasksRequest(google.protobuf.message.Message):
    """//////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ONLY_CONSENSUS_ID_FIELD_NUMBER: builtins.int
    only_consensus_id: builtins.str
    """If set, only return pending tasks held by the given consensus ID. If not
    set (or left at default), return all pending tasks held by all consensuses.
    """
    def __init__(
        self,
        *,
        only_consensus_id: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_only_consensus_id", b"_only_consensus_id", "only_consensus_id", b"only_consensus_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_only_consensus_id", b"_only_consensus_id", "only_consensus_id", b"only_consensus_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_only_consensus_id", b"_only_consensus_id"]) -> typing.Literal["only_consensus_id"] | None: ...

global___ListTasksRequest = ListTasksRequest

@typing.final
class ListTasksResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TASKS_FIELD_NUMBER: builtins.int
    @property
    def tasks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TaskInfo]: ...
    def __init__(
        self,
        *,
        tasks: collections.abc.Iterable[global___TaskInfo] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["tasks", b"tasks"]) -> None: ...

global___ListTasksResponse = ListTasksResponse

@typing.final
class CancelTaskRequest(google.protobuf.message.Message):
    """//////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TASK_ID_FIELD_NUMBER: builtins.int
    @property
    def task_id(self) -> global___TaskId: ...
    def __init__(
        self,
        *,
        task_id: global___TaskId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["task_id", b"task_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["task_id", b"task_id"]) -> None: ...

global___CancelTaskRequest = CancelTaskRequest

@typing.final
class CancelTaskResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Status:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CancelTaskResponse._Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        OK: CancelTaskResponse._Status.ValueType  # 0
        NOT_FOUND: CancelTaskResponse._Status.ValueType  # 1
        CANCELLING: CancelTaskResponse._Status.ValueType  # 2

    class Status(_Status, metaclass=_StatusEnumTypeWrapper): ...
    OK: CancelTaskResponse.Status.ValueType  # 0
    NOT_FOUND: CancelTaskResponse.Status.ValueType  # 1
    CANCELLING: CancelTaskResponse.Status.ValueType  # 2

    STATUS_FIELD_NUMBER: builtins.int
    status: global___CancelTaskResponse.Status.ValueType
    def __init__(
        self,
        *,
        status: global___CancelTaskResponse.Status.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["status", b"status"]) -> None: ...

global___CancelTaskResponse = CancelTaskResponse

@typing.final
class TaskCancelledError(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___TaskCancelledError = TaskCancelledError
