# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.cloud.v1alpha1.logs import logs_pb2 as rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2


class ApplicationLogsMethodsStub(object):
    """A service run by facilitators, which can coordinate the retrieval of logs
    for a given application.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ensure = channel.unary_unary(
                '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/Ensure',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.EnsureRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.EnsureResponse.FromString,
                _registered_method=True)
        self.RegisterConsensus = channel.unary_unary(
                '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/RegisterConsensus',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterConsensusRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterConsensusResponse.FromString,
                _registered_method=True)
        self.RegisterRevision = channel.unary_unary(
                '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/RegisterRevision',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterRevisionRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterRevisionResponse.FromString,
                _registered_method=True)
        self.Logs = channel.unary_stream(
                '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/Logs',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.LogsRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.LogsResponse.FromString,
                _registered_method=True)


class ApplicationLogsMethodsServicer(object):
    """A service run by facilitators, which can coordinate the retrieval of logs
    for a given application.
    """

    def Ensure(self, request, context):
        """*
        Ensures that this state exists. If it does not, it will be created with an
        empty set of consensuses that will be expanded as consensuses are
        registered.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterConsensus(self, request, context):
        """*
        ISSUE(
        https://github.com/reboot-dev/mono/issues/3816#issuecomment-2857766457
        ):
        DO NOT CALL THIS METHOD; it is deprecated, pending removal.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterRevision(self, request, context):
        """*
        Registers a new revision at the logs service, so that it knows to
        fetch logs for that revision.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logs(self, request, context):
        """*
        Fetches the log records ingested so far. If `follow=true`, will
        subsequently stream new records as they are ingested.

        The server will make an attempt to deliver records in timestamp-order, but
        may (particularly when streaming newly-ingested records) send records in
        ingestion-order if timestamp-order is infeasible. The server will attempt
        to deliver every record, but when streaming new records may omit ones that
        are ingested too far out of time-order.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApplicationLogsMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ensure': grpc.unary_unary_rpc_method_handler(
                    servicer.Ensure,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.EnsureRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.EnsureResponse.SerializeToString,
            ),
            'RegisterConsensus': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterConsensus,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterConsensusRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterConsensusResponse.SerializeToString,
            ),
            'RegisterRevision': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterRevision,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterRevisionRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterRevisionResponse.SerializeToString,
            ),
            'Logs': grpc.unary_stream_rpc_method_handler(
                    servicer.Logs,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.LogsRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.LogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.cloud.v1alpha1.logs.ApplicationLogsMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.cloud.v1alpha1.logs.ApplicationLogsMethods', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApplicationLogsMethods(object):
    """A service run by facilitators, which can coordinate the retrieval of logs
    for a given application.
    """

    @staticmethod
    def Ensure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/Ensure',
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.EnsureRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.EnsureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterConsensus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/RegisterConsensus',
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterConsensusRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterConsensusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterRevision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/RegisterRevision',
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterRevisionRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.RegisterRevisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rbt.cloud.v1alpha1.logs.ApplicationLogsMethods/Logs',
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.LogsRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.LogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LogsProxyStub(object):
    """/////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ingest = channel.stream_unary(
                '/rbt.cloud.v1alpha1.logs.LogsProxy/Ingest',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.IngestRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.IngestResponse.FromString,
                _registered_method=True)


class LogsProxyServicer(object):
    """/////////////////////////////////////////////////////////////////////

    """

    def Ingest(self, request_iterator, context):
        """A legacy gRPC service that takes logs to ingest and proxies them to the
        appropriate SortedMap to be archived.

        A FluentBit will call HTTP methods with JSON that looks like...
        ```
        { "text": "foo" }
        { "text": "bar" }
        ```
        A JSON/gRPC transcoder interprets this as being multiple requests for a
        client-streaming RPC, which Reboot only supports in the legacy gRPC API,
        therefore we expose this legacy gRPC method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogsProxyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ingest': grpc.stream_unary_rpc_method_handler(
                    servicer.Ingest,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.IngestRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.IngestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.cloud.v1alpha1.logs.LogsProxy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.cloud.v1alpha1.logs.LogsProxy', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogsProxy(object):
    """/////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def Ingest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/rbt.cloud.v1alpha1.logs.LogsProxy/Ingest',
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.IngestRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_logs_dot_logs__pb2.IngestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
