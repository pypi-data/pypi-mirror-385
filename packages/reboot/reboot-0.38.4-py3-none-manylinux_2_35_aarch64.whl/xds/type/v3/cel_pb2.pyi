"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.api.expr.v1alpha1.checked_pb2
import google.api.expr.v1alpha1.syntax_pb2
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CelExpression(google.protobuf.message.Message):
    """[#protodoc-title: Common Expression Language (CEL)]

    Either parsed or checked representation of the `Common Expression Language
    <https://github.com/google/cel-spec>`_ (CEL) program.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARSED_EXPR_FIELD_NUMBER: builtins.int
    CHECKED_EXPR_FIELD_NUMBER: builtins.int
    @property
    def parsed_expr(self) -> google.api.expr.v1alpha1.syntax_pb2.ParsedExpr:
        """Parsed expression in abstract syntax tree (AST) form."""

    @property
    def checked_expr(self) -> google.api.expr.v1alpha1.checked_pb2.CheckedExpr:
        """Parsed expression in abstract syntax tree (AST) form that has been successfully type checked."""

    def __init__(
        self,
        *,
        parsed_expr: google.api.expr.v1alpha1.syntax_pb2.ParsedExpr | None = ...,
        checked_expr: google.api.expr.v1alpha1.checked_pb2.CheckedExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["checked_expr", b"checked_expr", "expr_specifier", b"expr_specifier", "parsed_expr", b"parsed_expr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["checked_expr", b"checked_expr", "expr_specifier", b"expr_specifier", "parsed_expr", b"parsed_expr"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["expr_specifier", b"expr_specifier"]) -> typing.Literal["parsed_expr", "checked_expr"] | None: ...

global___CelExpression = CelExpression

@typing.final
class CelExtractString(google.protobuf.message.Message):
    """Extracts a string by evaluating a `Common Expression Language
    <https://github.com/google/cel-spec>`_ (CEL) expression against the standardized set of
    :ref:`HTTP attributes <arch_overview_attributes>`.

    .. attention::

      Besides CEL evaluation raising an error explicitly, CEL program returning a type other than
      the ``string``, or not returning anything, are considered an error as well.

    [#comment:TODO(sergiitk): When implemented, add the extension tag.]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPR_EXTRACT_FIELD_NUMBER: builtins.int
    DEFAULT_VALUE_FIELD_NUMBER: builtins.int
    @property
    def expr_extract(self) -> global___CelExpression:
        """The CEL expression used to extract a string from the CEL environment.
        the "subject string") that should be replaced.
        """

    @property
    def default_value(self) -> google.protobuf.wrappers_pb2.StringValue:
        """If CEL expression evaluates to an error, this value is be returned to the caller.
        If not set, the error is propagated to the caller.
        """

    def __init__(
        self,
        *,
        expr_extract: global___CelExpression | None = ...,
        default_value: google.protobuf.wrappers_pb2.StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["default_value", b"default_value", "expr_extract", b"expr_extract"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["default_value", b"default_value", "expr_extract", b"expr_extract"]) -> None: ...

global___CelExtractString = CelExtractString
