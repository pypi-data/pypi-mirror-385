"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import xds.type.v3.cel_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CelMatcher(google.protobuf.message.Message):
    """[#protodoc-title: Common Expression Language (CEL) matchers]

    Performs a match by evaluating a `Common Expression Language
    <https://github.com/google/cel-spec>`_ (CEL) expression against the standardized set of
    :ref:`HTTP attributes <arch_overview_attributes>` specified via ``HttpAttributesCelMatchInput``.

    .. attention::

      The match is ``true``, iff the result of the evaluation is a bool AND true.
      In all other cases, the match is ``false``, including but not limited to: non-bool types,
      ``false``, ``null``,`` int(1)``, etc.
      In case CEL expression raises an error, the result of the evaluation is interpreted "no match".

    Refer to :ref:`Unified Matcher API <envoy_v3_api_msg_.xds.type.matcher.v3.Matcher>` documentation
    for usage details.

    [#comment:TODO(sergiitk): Link HttpAttributesMatchInput + usage example.]
    [#comment:TODO(sergiitk): When implemented, add the extension tag.]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPR_MATCH_FIELD_NUMBER: builtins.int
    @property
    def expr_match(self) -> xds.type.v3.cel_pb2.CelExpression:
        """Either parsed or checked representation of the CEL program."""

    def __init__(
        self,
        *,
        expr_match: xds.type.v3.cel_pb2.CelExpression | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["expr_match", b"expr_match"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["expr_match", b"expr_match"]) -> None: ...

global___CelMatcher = CelMatcher
