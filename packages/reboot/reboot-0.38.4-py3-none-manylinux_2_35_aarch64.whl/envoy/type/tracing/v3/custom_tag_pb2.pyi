"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import envoy.type.metadata.v3.metadata_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CustomTag(google.protobuf.message.Message):
    """[#protodoc-title: Custom Tag]

    Describes custom tags for the active span.
    [#next-free-field: 6]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Literal(google.protobuf.message.Message):
        """Literal type custom tag with static value for the tag value."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VALUE_FIELD_NUMBER: builtins.int
        value: builtins.str
        """Static literal value to populate the tag value."""
        def __init__(
            self,
            *,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

    @typing.final
    class Environment(google.protobuf.message.Message):
        """Environment type custom tag with environment name and default value."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        DEFAULT_VALUE_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Environment variable name to obtain the value to populate the tag value."""
        default_value: builtins.str
        """When the environment variable is not found,
        the tag value will be populated with this default value if specified,
        otherwise no tag will be populated.
        """
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            default_value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["default_value", b"default_value", "name", b"name"]) -> None: ...

    @typing.final
    class Header(google.protobuf.message.Message):
        """Header type custom tag with header name and default value."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        DEFAULT_VALUE_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Header name to obtain the value to populate the tag value."""
        default_value: builtins.str
        """When the header does not exist,
        the tag value will be populated with this default value if specified,
        otherwise no tag will be populated.
        """
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            default_value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["default_value", b"default_value", "name", b"name"]) -> None: ...

    @typing.final
    class Metadata(google.protobuf.message.Message):
        """Metadata type custom tag using
        :ref:`MetadataKey <envoy_v3_api_msg_type.metadata.v3.MetadataKey>` to retrieve the protobuf value
        from :ref:`Metadata <envoy_v3_api_msg_config.core.v3.Metadata>`, and populate the tag value with
        `the canonical JSON <https://developers.google.com/protocol-buffers/docs/proto3#json>`_
        representation of it.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KIND_FIELD_NUMBER: builtins.int
        METADATA_KEY_FIELD_NUMBER: builtins.int
        DEFAULT_VALUE_FIELD_NUMBER: builtins.int
        default_value: builtins.str
        """When no valid metadata is found,
        the tag value would be populated with this default value if specified,
        otherwise no tag would be populated.
        """
        @property
        def kind(self) -> envoy.type.metadata.v3.metadata_pb2.MetadataKind:
            """Specify what kind of metadata to obtain tag value from."""

        @property
        def metadata_key(self) -> envoy.type.metadata.v3.metadata_pb2.MetadataKey:
            """Metadata key to define the path to retrieve the tag value."""

        def __init__(
            self,
            *,
            kind: envoy.type.metadata.v3.metadata_pb2.MetadataKind | None = ...,
            metadata_key: envoy.type.metadata.v3.metadata_pb2.MetadataKey | None = ...,
            default_value: builtins.str = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["kind", b"kind", "metadata_key", b"metadata_key"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["default_value", b"default_value", "kind", b"kind", "metadata_key", b"metadata_key"]) -> None: ...

    TAG_FIELD_NUMBER: builtins.int
    LITERAL_FIELD_NUMBER: builtins.int
    ENVIRONMENT_FIELD_NUMBER: builtins.int
    REQUEST_HEADER_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    tag: builtins.str
    """Used to populate the tag name."""
    @property
    def literal(self) -> global___CustomTag.Literal:
        """A literal custom tag."""

    @property
    def environment(self) -> global___CustomTag.Environment:
        """An environment custom tag."""

    @property
    def request_header(self) -> global___CustomTag.Header:
        """A request header custom tag."""

    @property
    def metadata(self) -> global___CustomTag.Metadata:
        """A custom tag to obtain tag value from the metadata."""

    def __init__(
        self,
        *,
        tag: builtins.str = ...,
        literal: global___CustomTag.Literal | None = ...,
        environment: global___CustomTag.Environment | None = ...,
        request_header: global___CustomTag.Header | None = ...,
        metadata: global___CustomTag.Metadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["environment", b"environment", "literal", b"literal", "metadata", b"metadata", "request_header", b"request_header", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["environment", b"environment", "literal", b"literal", "metadata", b"metadata", "request_header", b"request_header", "tag", b"tag", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["literal", "environment", "request_header", "metadata"] | None: ...

global___CustomTag = CustomTag
