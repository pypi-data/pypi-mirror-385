"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.extension_pb2
import envoy.type.v3.percent_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TcpProtocolOptions(google.protobuf.message.Message):
    """[#protodoc-title: Protocol options]

    [#not-implemented-hide:]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___TcpProtocolOptions = TcpProtocolOptions

@typing.final
class QuicKeepAliveSettings(google.protobuf.message.Message):
    """Config for keepalive probes in a QUIC connection.
    Note that QUIC keep-alive probing packets work differently from HTTP/2 keep-alive PINGs in a sense that the probing packet
    itself doesn't timeout waiting for a probing response. Quic has a shorter idle timeout than TCP, so it doesn't rely on such probing to discover dead connections. If the peer fails to respond, the connection will idle timeout eventually. Thus, they are configured differently from :ref:`connection_keepalive <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.connection_keepalive>`.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAX_INTERVAL_FIELD_NUMBER: builtins.int
    INITIAL_INTERVAL_FIELD_NUMBER: builtins.int
    @property
    def max_interval(self) -> google.protobuf.duration_pb2.Duration:
        """The max interval for a connection to send keep-alive probing packets (with PING or PATH_RESPONSE). The value should be smaller than :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` to prevent idle timeout while not less than 1s to avoid throttling the connection or flooding the peer with probes.

        If :ref:`initial_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.initial_interval>` is absent or zero, a client connection will use this value to start probing.

        If zero, disable keepalive probing.
        If absent, use the QUICHE default interval to probe.
        """

    @property
    def initial_interval(self) -> google.protobuf.duration_pb2.Duration:
        """The interval to send the first few keep-alive probing packets to prevent connection from hitting the idle timeout. Subsequent probes will be sent, each one with an interval exponentially longer than previous one, till it reaches :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`. And the probes afterwards will always use :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`.

        The value should be smaller than :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` to prevent idle timeout and smaller than max_interval to take effect.

        If absent or zero, disable keepalive probing for a server connection. For a client connection, if :ref:`max_interval <envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval>`  is also zero, do not keepalive, otherwise use max_interval or QUICHE default to probe all the time.
        """

    def __init__(
        self,
        *,
        max_interval: google.protobuf.duration_pb2.Duration | None = ...,
        initial_interval: google.protobuf.duration_pb2.Duration | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["initial_interval", b"initial_interval", "max_interval", b"max_interval"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["initial_interval", b"initial_interval", "max_interval", b"max_interval"]) -> None: ...

global___QuicKeepAliveSettings = QuicKeepAliveSettings

@typing.final
class QuicProtocolOptions(google.protobuf.message.Message):
    """QUIC protocol options which apply to both downstream and upstream connections.
    [#next-free-field: 6]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAX_CONCURRENT_STREAMS_FIELD_NUMBER: builtins.int
    INITIAL_STREAM_WINDOW_SIZE_FIELD_NUMBER: builtins.int
    INITIAL_CONNECTION_WINDOW_SIZE_FIELD_NUMBER: builtins.int
    NUM_TIMEOUTS_TO_TRIGGER_PORT_MIGRATION_FIELD_NUMBER: builtins.int
    CONNECTION_KEEPALIVE_FIELD_NUMBER: builtins.int
    @property
    def max_concurrent_streams(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Maximum number of streams that the client can negotiate per connection. 100
        if not specified.
        """

    @property
    def initial_stream_window_size(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """`Initial stream-level flow-control receive window
        <https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1>`_ size. Valid values range from
        1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).

        NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
        QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.

        This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
        QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
        stop the flow of data to the stream buffers.
        """

    @property
    def initial_connection_window_size(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Similar to ``initial_stream_window_size``, but for connection-level
        flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
        window. Currently, this has the same minimum/default as ``initial_stream_window_size``.

        NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
        window size now, so it's also the minimum.
        """

    @property
    def num_timeouts_to_trigger_port_migration(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """The number of timeouts that can occur before port migration is triggered for QUIC clients.
        This defaults to 1. If set to 0, port migration will not occur on path degrading.
        Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
        This has no effect on server sessions.
        """

    @property
    def connection_keepalive(self) -> global___QuicKeepAliveSettings:
        """Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
        If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
        """

    def __init__(
        self,
        *,
        max_concurrent_streams: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        initial_stream_window_size: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        initial_connection_window_size: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        num_timeouts_to_trigger_port_migration: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        connection_keepalive: global___QuicKeepAliveSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["connection_keepalive", b"connection_keepalive", "initial_connection_window_size", b"initial_connection_window_size", "initial_stream_window_size", b"initial_stream_window_size", "max_concurrent_streams", b"max_concurrent_streams", "num_timeouts_to_trigger_port_migration", b"num_timeouts_to_trigger_port_migration"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["connection_keepalive", b"connection_keepalive", "initial_connection_window_size", b"initial_connection_window_size", "initial_stream_window_size", b"initial_stream_window_size", "max_concurrent_streams", b"max_concurrent_streams", "num_timeouts_to_trigger_port_migration", b"num_timeouts_to_trigger_port_migration"]) -> None: ...

global___QuicProtocolOptions = QuicProtocolOptions

@typing.final
class UpstreamHttpProtocolOptions(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUTO_SNI_FIELD_NUMBER: builtins.int
    AUTO_SAN_VALIDATION_FIELD_NUMBER: builtins.int
    OVERRIDE_AUTO_SNI_HEADER_FIELD_NUMBER: builtins.int
    auto_sni: builtins.bool
    """Set transport socket `SNI <https://en.wikipedia.org/wiki/Server_Name_Indication>`_ for new
    upstream connections based on the downstream HTTP host/authority header or any other arbitrary
    header when :ref:`override_auto_sni_header <envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header>`
    is set, as seen by the :ref:`router filter <config_http_filters_router>`.
    """
    auto_san_validation: builtins.bool
    """Automatic validate upstream presented certificate for new upstream connections based on the
    downstream HTTP host/authority header or any other arbitrary header when :ref:`override_auto_sni_header <envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header>`
    is set, as seen by the :ref:`router filter <config_http_filters_router>`.
    This field is intended to be set with ``auto_sni`` field.
    """
    override_auto_sni_header: builtins.str
    """An optional alternative to the host/authority header to be used for setting the SNI value.
    It should be a valid downstream HTTP header, as seen by the
    :ref:`router filter <config_http_filters_router>`.
    If unset, host/authority header will be used for populating the SNI. If the specified header
    is not found or the value is empty, host/authority header will be used instead.
    This field is intended to be set with ``auto_sni`` and/or ``auto_san_validation`` fields.
    If none of these fields are set then setting this would be a no-op.
    """
    def __init__(
        self,
        *,
        auto_sni: builtins.bool = ...,
        auto_san_validation: builtins.bool = ...,
        override_auto_sni_header: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["auto_san_validation", b"auto_san_validation", "auto_sni", b"auto_sni", "override_auto_sni_header", b"override_auto_sni_header"]) -> None: ...

global___UpstreamHttpProtocolOptions = UpstreamHttpProtocolOptions

@typing.final
class AlternateProtocolsCacheOptions(google.protobuf.message.Message):
    """Configures the alternate protocols cache which tracks alternate protocols that can be used to
    make an HTTP connection to an origin server. See https://tools.ietf.org/html/rfc7838 for
    HTTP Alternative Services and https://datatracker.ietf.org/doc/html/draft-ietf-dnsop-svcb-https-04
    for the "HTTPS" DNS resource record.
    [#next-free-field: 6]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class AlternateProtocolsCacheEntry(google.protobuf.message.Message):
        """Allows pre-populating the cache with HTTP/3 alternate protocols entries with a 7 day lifetime.
        This will cause Envoy to attempt HTTP/3 to those upstreams, even if the upstreams have not
        advertised HTTP/3 support. These entries will be overwritten by alt-svc
        response headers or cached values.
        As with regular cached entries, if the origin response would result in clearing an existing
        alternate protocol cache entry, pre-populated entries will also be cleared.
        Adding a cache entry with hostname=foo.com port=123 is the equivalent of getting
        response headers
        alt-svc: h3=:"123"; ma=86400" in a response to a request to foo.com:123
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        HOSTNAME_FIELD_NUMBER: builtins.int
        PORT_FIELD_NUMBER: builtins.int
        hostname: builtins.str
        """The host name for the alternate protocol entry."""
        port: builtins.int
        """The port for the alternate protocol entry."""
        def __init__(
            self,
            *,
            hostname: builtins.str = ...,
            port: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["hostname", b"hostname", "port", b"port"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    MAX_ENTRIES_FIELD_NUMBER: builtins.int
    KEY_VALUE_STORE_CONFIG_FIELD_NUMBER: builtins.int
    PREPOPULATED_ENTRIES_FIELD_NUMBER: builtins.int
    CANONICAL_SUFFIXES_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the cache. Multiple named caches allow independent alternate protocols cache
    configurations to operate within a single Envoy process using different configurations. All
    alternate protocols cache options with the same name *must* be equal in all fields when
    referenced from different configuration components. Configuration will fail to load if this is
    not the case.
    """
    @property
    def max_entries(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """The maximum number of entries that the cache will hold. If not specified defaults to 1024.

        .. note:

          The implementation is approximate and enforced independently on each worker thread, thus
          it is possible for the maximum entries in the cache to go slightly above the configured
          value depending on timing. This is similar to how other circuit breakers work.
        """

    @property
    def key_value_store_config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Allows configuring a persistent
        :ref:`key value store <envoy_v3_api_msg_config.common.key_value.v3.KeyValueStoreConfig>` to flush
        alternate protocols entries to disk.
        This function is currently only supported if concurrency is 1
        Cached entries will take precedence over pre-populated entries below.
        """

    @property
    def prepopulated_entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry]:
        """Allows pre-populating the cache with entries, as described above."""

    @property
    def canonical_suffixes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Optional list of hostnames suffixes for which Alt-Svc entries can be shared. For example, if
        this list contained the value ``.c.example.com``, then an Alt-Svc entry for ``foo.c.example.com``
        could be shared with ``bar.c.example.com`` but would not be shared with ``baz.example.com``. On
        the other hand, if the list contained the value ``.example.com`` then all three hosts could share
        Alt-Svc entries. Each entry must start with ``.``.  If a hostname matches multiple suffixes, the
        first listed suffix will be used.

        Since lookup in this list is O(n), it is recommended that the number of suffixes be limited.
        [#not-implemented-hide:]
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        max_entries: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        key_value_store_config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        prepopulated_entries: collections.abc.Iterable[global___AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry] | None = ...,
        canonical_suffixes: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key_value_store_config", b"key_value_store_config", "max_entries", b"max_entries"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["canonical_suffixes", b"canonical_suffixes", "key_value_store_config", b"key_value_store_config", "max_entries", b"max_entries", "name", b"name", "prepopulated_entries", b"prepopulated_entries"]) -> None: ...

global___AlternateProtocolsCacheOptions = AlternateProtocolsCacheOptions

@typing.final
class HttpProtocolOptions(google.protobuf.message.Message):
    """[#next-free-field: 7]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _HeadersWithUnderscoresAction:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _HeadersWithUnderscoresActionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[HttpProtocolOptions._HeadersWithUnderscoresAction.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ALLOW: HttpProtocolOptions._HeadersWithUnderscoresAction.ValueType  # 0
        """Allow headers with underscores. This is the default behavior."""
        REJECT_REQUEST: HttpProtocolOptions._HeadersWithUnderscoresAction.ValueType  # 1
        """Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
        end with the stream reset. The "httpN.requests_rejected_with_underscores_in_headers" counter
        is incremented for each rejected request.
        """
        DROP_HEADER: HttpProtocolOptions._HeadersWithUnderscoresAction.ValueType  # 2
        """Drop the client header with name containing underscores. The header is dropped before the filter chain is
        invoked and as such filters will not see dropped headers. The
        "httpN.dropped_headers_with_underscores" is incremented for each dropped header.
        """

    class HeadersWithUnderscoresAction(_HeadersWithUnderscoresAction, metaclass=_HeadersWithUnderscoresActionEnumTypeWrapper):
        """Action to take when Envoy receives client request with header names containing underscore
        characters.
        Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented
        as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore
        characters.
        """

    ALLOW: HttpProtocolOptions.HeadersWithUnderscoresAction.ValueType  # 0
    """Allow headers with underscores. This is the default behavior."""
    REJECT_REQUEST: HttpProtocolOptions.HeadersWithUnderscoresAction.ValueType  # 1
    """Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
    end with the stream reset. The "httpN.requests_rejected_with_underscores_in_headers" counter
    is incremented for each rejected request.
    """
    DROP_HEADER: HttpProtocolOptions.HeadersWithUnderscoresAction.ValueType  # 2
    """Drop the client header with name containing underscores. The header is dropped before the filter chain is
    invoked and as such filters will not see dropped headers. The
    "httpN.dropped_headers_with_underscores" is incremented for each dropped header.
    """

    IDLE_TIMEOUT_FIELD_NUMBER: builtins.int
    MAX_CONNECTION_DURATION_FIELD_NUMBER: builtins.int
    MAX_HEADERS_COUNT_FIELD_NUMBER: builtins.int
    MAX_STREAM_DURATION_FIELD_NUMBER: builtins.int
    HEADERS_WITH_UNDERSCORES_ACTION_FIELD_NUMBER: builtins.int
    MAX_REQUESTS_PER_CONNECTION_FIELD_NUMBER: builtins.int
    headers_with_underscores_action: global___HttpProtocolOptions.HeadersWithUnderscoresAction.ValueType
    """Action to take when a client request with a header name containing underscore characters is received.
    If this setting is not specified, the value defaults to ALLOW.
    Note: upstream responses are not affected by this setting.
    Note: this only affects client headers. It does not affect headers added
    by Envoy filters and does not have any impact if added to cluster config.
    """
    @property
    def idle_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """The idle timeout for connections. The idle timeout is defined as the
        period in which there are no active requests. When the
        idle timeout is reached the connection will be closed. If the connection is an HTTP/2
        downstream connection a drain sequence will occur prior to closing the connection, see
        :ref:`drain_timeout
        <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout>`.
        Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
        If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.

        .. warning::
          Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
          FIN packets, etc.

        If the :ref:`overload action <config_overload_manager_overload_actions>` "envoy.overload_actions.reduce_timeouts"
        is configured, this timeout is scaled for downstream connections according to the value for
        :ref:`HTTP_DOWNSTREAM_CONNECTION_IDLE <envoy_v3_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_IDLE>`.
        """

    @property
    def max_connection_duration(self) -> google.protobuf.duration_pb2.Duration:
        """The maximum duration of a connection. The duration is defined as a period since a connection
        was established. If not set, there is no max duration. When max_connection_duration is reached
        and if there are no active streams, the connection will be closed. If the connection is a
        downstream connection and there are any active streams, the drain sequence will kick-in,
        and the connection will be force-closed after the drain period. See :ref:`drain_timeout
        <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout>`.
        """

    @property
    def max_headers_count(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """The maximum number of headers. If unconfigured, the default
        maximum number of request headers allowed is 100. Requests that exceed this limit will receive
        a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
        """

    @property
    def max_stream_duration(self) -> google.protobuf.duration_pb2.Duration:
        """Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
        reset independent of any other timeouts. If not specified, this value is not set.
        """

    @property
    def max_requests_per_connection(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Optional maximum requests for both upstream and downstream connections.
        If not specified, there is no limit.
        Setting this parameter to 1 will effectively disable keep alive.
        For HTTP/2 and HTTP/3, due to concurrent stream processing, the limit is approximate.
        """

    def __init__(
        self,
        *,
        idle_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        max_connection_duration: google.protobuf.duration_pb2.Duration | None = ...,
        max_headers_count: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        max_stream_duration: google.protobuf.duration_pb2.Duration | None = ...,
        headers_with_underscores_action: global___HttpProtocolOptions.HeadersWithUnderscoresAction.ValueType = ...,
        max_requests_per_connection: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["idle_timeout", b"idle_timeout", "max_connection_duration", b"max_connection_duration", "max_headers_count", b"max_headers_count", "max_requests_per_connection", b"max_requests_per_connection", "max_stream_duration", b"max_stream_duration"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["headers_with_underscores_action", b"headers_with_underscores_action", "idle_timeout", b"idle_timeout", "max_connection_duration", b"max_connection_duration", "max_headers_count", b"max_headers_count", "max_requests_per_connection", b"max_requests_per_connection", "max_stream_duration", b"max_stream_duration"]) -> None: ...

global___HttpProtocolOptions = HttpProtocolOptions

@typing.final
class Http1ProtocolOptions(google.protobuf.message.Message):
    """[#next-free-field: 9]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class HeaderKeyFormat(google.protobuf.message.Message):
        """[#next-free-field: 9]"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class ProperCaseWords(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            def __init__(
                self,
            ) -> None: ...

        PROPER_CASE_WORDS_FIELD_NUMBER: builtins.int
        STATEFUL_FORMATTER_FIELD_NUMBER: builtins.int
        @property
        def proper_case_words(self) -> global___Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords:
            """Formats the header by proper casing words: the first character and any character following
            a special character will be capitalized if it's an alpha character. For example,
            "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
            Note that while this results in most headers following conventional casing, certain headers
            are not covered. For example, the "TE" header will be formatted as "Te".
            """

        @property
        def stateful_formatter(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
            """Configuration for stateful formatter extensions that allow using received headers to
            affect the output of encoding headers. E.g., preserving case during proxying.
            [#extension-category: envoy.http.stateful_header_formatters]
            """

        def __init__(
            self,
            *,
            proper_case_words: global___Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords | None = ...,
            stateful_formatter: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["header_format", b"header_format", "proper_case_words", b"proper_case_words", "stateful_formatter", b"stateful_formatter"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["header_format", b"header_format", "proper_case_words", b"proper_case_words", "stateful_formatter", b"stateful_formatter"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["header_format", b"header_format"]) -> typing.Literal["proper_case_words", "stateful_formatter"] | None: ...

    ALLOW_ABSOLUTE_URL_FIELD_NUMBER: builtins.int
    ACCEPT_HTTP_10_FIELD_NUMBER: builtins.int
    DEFAULT_HOST_FOR_HTTP_10_FIELD_NUMBER: builtins.int
    HEADER_KEY_FORMAT_FIELD_NUMBER: builtins.int
    ENABLE_TRAILERS_FIELD_NUMBER: builtins.int
    ALLOW_CHUNKED_LENGTH_FIELD_NUMBER: builtins.int
    OVERRIDE_STREAM_ERROR_ON_INVALID_HTTP_MESSAGE_FIELD_NUMBER: builtins.int
    SEND_FULLY_QUALIFIED_URL_FIELD_NUMBER: builtins.int
    accept_http_10: builtins.bool
    """Handle incoming HTTP/1.0 and HTTP 0.9 requests.
    This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
    style connect logic, dechunking, and handling lack of client host iff
    ``default_host_for_http_10`` is configured.
    """
    default_host_for_http_10: builtins.str
    """A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
    Envoy does not otherwise support HTTP/1.0 without a Host header.
    This is a no-op if ``accept_http_10`` is not true.
    """
    enable_trailers: builtins.bool
    """Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers.

    .. attention::

      Note that this only happens when Envoy is chunk encoding which occurs when:
      - The request is HTTP/1.1.
      - Is neither a HEAD only request nor a HTTP Upgrade.
      - Not a response to a HEAD request.
      - The content length header is not present.
    """
    allow_chunked_length: builtins.bool
    """Allows Envoy to process requests/responses with both ``Content-Length`` and ``Transfer-Encoding``
    headers set. By default such messages are rejected, but if option is enabled - Envoy will
    remove Content-Length header and process message.
    See `RFC7230, sec. 3.3.3 <https://tools.ietf.org/html/rfc7230#section-3.3.3>`_ for details.

    .. attention::
      Enabling this option might lead to request smuggling vulnerability, especially if traffic
      is proxied via multiple layers of proxies.
    [#comment:TODO: This field is ignored when the
    :ref:`header validation configuration <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config>`
    is present.]
    """
    send_fully_qualified_url: builtins.bool
    """Allows sending fully qualified URLs when proxying the first line of the
    response. By default, Envoy will only send the path components in the first line.
    If this is true, Envoy will create a fully qualified URI composing scheme
    (inferred if not present), host (from the host/:authority header) and path
    (from first line or :path header).
    """
    @property
    def allow_absolute_url(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Handle HTTP requests with absolute URLs in the requests. These requests
        are generally sent by clients to forward/explicit proxies. This allows clients to configure
        envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
        ``http_proxy`` environment variable.
        """

    @property
    def header_key_format(self) -> global___Http1ProtocolOptions.HeaderKeyFormat:
        """Describes how the keys for response headers should be formatted. By default, all header keys
        are lower cased.
        """

    @property
    def override_stream_error_on_invalid_http_message(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
        HTTP/1.1 connections upon receiving an invalid HTTP message. However,
        when this option is true, then Envoy will leave the HTTP/1.1 connection
        open where possible.
        If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
        <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`.
        """

    def __init__(
        self,
        *,
        allow_absolute_url: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        accept_http_10: builtins.bool = ...,
        default_host_for_http_10: builtins.str = ...,
        header_key_format: global___Http1ProtocolOptions.HeaderKeyFormat | None = ...,
        enable_trailers: builtins.bool = ...,
        allow_chunked_length: builtins.bool = ...,
        override_stream_error_on_invalid_http_message: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        send_fully_qualified_url: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["allow_absolute_url", b"allow_absolute_url", "header_key_format", b"header_key_format", "override_stream_error_on_invalid_http_message", b"override_stream_error_on_invalid_http_message"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["accept_http_10", b"accept_http_10", "allow_absolute_url", b"allow_absolute_url", "allow_chunked_length", b"allow_chunked_length", "default_host_for_http_10", b"default_host_for_http_10", "enable_trailers", b"enable_trailers", "header_key_format", b"header_key_format", "override_stream_error_on_invalid_http_message", b"override_stream_error_on_invalid_http_message", "send_fully_qualified_url", b"send_fully_qualified_url"]) -> None: ...

global___Http1ProtocolOptions = Http1ProtocolOptions

@typing.final
class KeepaliveSettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INTERVAL_FIELD_NUMBER: builtins.int
    TIMEOUT_FIELD_NUMBER: builtins.int
    INTERVAL_JITTER_FIELD_NUMBER: builtins.int
    CONNECTION_IDLE_INTERVAL_FIELD_NUMBER: builtins.int
    @property
    def interval(self) -> google.protobuf.duration_pb2.Duration:
        """Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
        If this is zero, interval PINGs will not be sent.
        """

    @property
    def timeout(self) -> google.protobuf.duration_pb2.Duration:
        """How long to wait for a response to a keepalive PING. If a response is not received within this
        time period, the connection will be aborted. Note that in order to prevent the influence of
        Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
        the connection, under the assumption that if a frame is received the connection is healthy.
        """

    @property
    def interval_jitter(self) -> envoy.type.v3.percent_pb2.Percent:
        """A random jitter amount as a percentage of interval that will be added to each interval.
        A value of zero means there will be no jitter.
        The default value is 15%.
        """

    @property
    def connection_idle_interval(self) -> google.protobuf.duration_pb2.Duration:
        """If the connection has been idle for this duration, send a HTTP/2 ping ahead
        of new stream creation, to quickly detect dead connections.
        If this is zero, this type of PING will not be sent.
        If an interval ping is outstanding, a second ping will not be sent as the
        interval ping will determine if the connection is dead.

        The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout>` and the current PTO of the connection to decide whether to probe before sending a new request.
        """

    def __init__(
        self,
        *,
        interval: google.protobuf.duration_pb2.Duration | None = ...,
        timeout: google.protobuf.duration_pb2.Duration | None = ...,
        interval_jitter: envoy.type.v3.percent_pb2.Percent | None = ...,
        connection_idle_interval: google.protobuf.duration_pb2.Duration | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["connection_idle_interval", b"connection_idle_interval", "interval", b"interval", "interval_jitter", b"interval_jitter", "timeout", b"timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["connection_idle_interval", b"connection_idle_interval", "interval", b"interval", "interval_jitter", b"interval_jitter", "timeout", b"timeout"]) -> None: ...

global___KeepaliveSettings = KeepaliveSettings

@typing.final
class Http2ProtocolOptions(google.protobuf.message.Message):
    """[#next-free-field: 16]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class SettingsParameter(google.protobuf.message.Message):
        """Defines a parameter to be sent in the SETTINGS frame.
        See `RFC7540, sec. 6.5.1 <https://tools.ietf.org/html/rfc7540#section-6.5.1>`_ for details.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        IDENTIFIER_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        @property
        def identifier(self) -> google.protobuf.wrappers_pb2.UInt32Value:
            """The 16 bit parameter identifier."""

        @property
        def value(self) -> google.protobuf.wrappers_pb2.UInt32Value:
            """The 32 bit parameter value."""

        def __init__(
            self,
            *,
            identifier: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
            value: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["identifier", b"identifier", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["identifier", b"identifier", "value", b"value"]) -> None: ...

    HPACK_TABLE_SIZE_FIELD_NUMBER: builtins.int
    MAX_CONCURRENT_STREAMS_FIELD_NUMBER: builtins.int
    INITIAL_STREAM_WINDOW_SIZE_FIELD_NUMBER: builtins.int
    INITIAL_CONNECTION_WINDOW_SIZE_FIELD_NUMBER: builtins.int
    ALLOW_CONNECT_FIELD_NUMBER: builtins.int
    ALLOW_METADATA_FIELD_NUMBER: builtins.int
    MAX_OUTBOUND_FRAMES_FIELD_NUMBER: builtins.int
    MAX_OUTBOUND_CONTROL_FRAMES_FIELD_NUMBER: builtins.int
    MAX_CONSECUTIVE_INBOUND_FRAMES_WITH_EMPTY_PAYLOAD_FIELD_NUMBER: builtins.int
    MAX_INBOUND_PRIORITY_FRAMES_PER_STREAM_FIELD_NUMBER: builtins.int
    MAX_INBOUND_WINDOW_UPDATE_FRAMES_PER_DATA_FRAME_SENT_FIELD_NUMBER: builtins.int
    STREAM_ERROR_ON_INVALID_HTTP_MESSAGING_FIELD_NUMBER: builtins.int
    OVERRIDE_STREAM_ERROR_ON_INVALID_HTTP_MESSAGE_FIELD_NUMBER: builtins.int
    CUSTOM_SETTINGS_PARAMETERS_FIELD_NUMBER: builtins.int
    CONNECTION_KEEPALIVE_FIELD_NUMBER: builtins.int
    allow_connect: builtins.bool
    """Allows proxying Websocket and other upgrades over H2 connect."""
    allow_metadata: builtins.bool
    """[#not-implemented-hide:] Hiding until envoy has full metadata support.
    Still under implementation. DO NOT USE.

    Allows metadata. See [metadata
    docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more
    information.
    """
    stream_error_on_invalid_http_messaging: builtins.bool
    """Allows invalid HTTP messaging and headers. When this option is disabled (default), then
    the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
    when this option is enabled, only the offending stream is terminated.

    This is overridden by HCM :ref:`stream_error_on_invalid_http_messaging
    <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`
    iff present.

    This is deprecated in favor of :ref:`override_stream_error_on_invalid_http_message
    <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.override_stream_error_on_invalid_http_message>`

    See `RFC7540, sec. 8.1 <https://tools.ietf.org/html/rfc7540#section-8.1>`_ for details.
    """
    @property
    def hpack_table_size(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """`Maximum table size <https://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
        (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
        range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
        compression.
        """

    @property
    def max_concurrent_streams(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """`Maximum concurrent streams <https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
        allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
        and defaults to 2147483647.

        For upstream connections, this also limits how many streams Envoy will initiate concurrently
        on a single connection. If the limit is reached, Envoy may queue requests or establish
        additional connections (as allowed per circuit breaker limits).

        This acts as an upper bound: Envoy will lower the max concurrent streams allowed on a given
        connection based on upstream settings. Config dumps will reflect the configured upper bound,
        not the per-connection negotiated limits.
        """

    @property
    def initial_stream_window_size(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """`Initial stream-level flow-control window
        <https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2>`_ size. Valid values range from 65535
        (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
        (256 * 1024 * 1024).

        NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
        window size now, so it's also the minimum.

        This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
        HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
        stop the flow of data to the codec buffers.
        """

    @property
    def initial_connection_window_size(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Similar to ``initial_stream_window_size``, but for connection-level flow-control
        window. Currently, this has the same minimum/maximum/default as ``initial_stream_window_size``.
        """

    @property
    def max_outbound_frames(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Limit the number of pending outbound downstream frames of all types (frames that are waiting to
        be written into the socket). Exceeding this limit triggers flood mitigation and connection is
        terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
        to flood mitigation. The default limit is 10000.
        """

    @property
    def max_outbound_control_frames(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
        preventing high memory utilization when receiving continuous stream of these frames. Exceeding
        this limit triggers flood mitigation and connection is terminated. The
        ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
        mitigation. The default limit is 1000.
        """

    @property
    def max_consecutive_inbound_frames_with_empty_payload(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
        empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
        might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
        stat tracks the number of connections terminated due to flood mitigation.
        Setting this to 0 will terminate connection upon receiving first frame with an empty payload
        and no end stream flag. The default limit is 1.
        """

    @property
    def max_inbound_priority_frames_per_stream(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
        of PRIORITY frames received over the lifetime of connection exceeds the value calculated
        using this formula::

          ``max_inbound_priority_frames_per_stream`` * (1 + ``opened_streams``)

        the connection is terminated. For downstream connections the ``opened_streams`` is incremented when
        Envoy receives complete response headers from the upstream server. For upstream connection the
        ``opened_streams`` is incremented when Envoy send the HEADERS frame for a new stream. The
        ``http2.inbound_priority_frames_flood`` stat tracks
        the number of connections terminated due to flood mitigation. The default limit is 100.
        """

    @property
    def max_inbound_window_update_frames_per_data_frame_sent(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
        of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
        using this formula::

          5 + 2 * (``opened_streams`` +
                   ``max_inbound_window_update_frames_per_data_frame_sent`` * ``outbound_data_frames``)

        the connection is terminated. For downstream connections the ``opened_streams`` is incremented when
        Envoy receives complete response headers from the upstream server. For upstream connections the
        ``opened_streams`` is incremented when Envoy sends the HEADERS frame for a new stream. The
        ``http2.inbound_priority_frames_flood`` stat tracks the number of connections terminated due to
        flood mitigation. The default max_inbound_window_update_frames_per_data_frame_sent value is 10.
        Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
        but more complex implementations that try to estimate available bandwidth require at least 2.
        """

    @property
    def override_stream_error_on_invalid_http_message(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Allows invalid HTTP messaging and headers. When this option is disabled (default), then
        the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
        when this option is enabled, only the offending stream is terminated.

        This overrides any HCM :ref:`stream_error_on_invalid_http_messaging
        <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`

        See `RFC7540, sec. 8.1 <https://tools.ietf.org/html/rfc7540#section-8.1>`_ for details.
        """

    @property
    def custom_settings_parameters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Http2ProtocolOptions.SettingsParameter]:
        """[#not-implemented-hide:]
        Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:

        1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
        Envoy.

        2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
        'allow_connect'.

        Note that custom parameters specified through this field can not also be set in the
        corresponding named parameters:

        .. code-block:: text

          ID    Field Name
          ----------------
          0x1   hpack_table_size
          0x3   max_concurrent_streams
          0x4   initial_stream_window_size

        Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
        between custom parameters with the same identifier will trigger a failure.

        See `IANA HTTP/2 Settings
        <https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings>`_ for
        standardized identifiers.
        """

    @property
    def connection_keepalive(self) -> global___KeepaliveSettings:
        """Send HTTP/2 PING frames to verify that the connection is still healthy. If the remote peer
        does not respond within the configured timeout, the connection will be aborted.
        """

    def __init__(
        self,
        *,
        hpack_table_size: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        max_concurrent_streams: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        initial_stream_window_size: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        initial_connection_window_size: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        allow_connect: builtins.bool = ...,
        allow_metadata: builtins.bool = ...,
        max_outbound_frames: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        max_outbound_control_frames: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        max_consecutive_inbound_frames_with_empty_payload: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        max_inbound_priority_frames_per_stream: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        max_inbound_window_update_frames_per_data_frame_sent: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        stream_error_on_invalid_http_messaging: builtins.bool = ...,
        override_stream_error_on_invalid_http_message: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        custom_settings_parameters: collections.abc.Iterable[global___Http2ProtocolOptions.SettingsParameter] | None = ...,
        connection_keepalive: global___KeepaliveSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["connection_keepalive", b"connection_keepalive", "hpack_table_size", b"hpack_table_size", "initial_connection_window_size", b"initial_connection_window_size", "initial_stream_window_size", b"initial_stream_window_size", "max_concurrent_streams", b"max_concurrent_streams", "max_consecutive_inbound_frames_with_empty_payload", b"max_consecutive_inbound_frames_with_empty_payload", "max_inbound_priority_frames_per_stream", b"max_inbound_priority_frames_per_stream", "max_inbound_window_update_frames_per_data_frame_sent", b"max_inbound_window_update_frames_per_data_frame_sent", "max_outbound_control_frames", b"max_outbound_control_frames", "max_outbound_frames", b"max_outbound_frames", "override_stream_error_on_invalid_http_message", b"override_stream_error_on_invalid_http_message"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["allow_connect", b"allow_connect", "allow_metadata", b"allow_metadata", "connection_keepalive", b"connection_keepalive", "custom_settings_parameters", b"custom_settings_parameters", "hpack_table_size", b"hpack_table_size", "initial_connection_window_size", b"initial_connection_window_size", "initial_stream_window_size", b"initial_stream_window_size", "max_concurrent_streams", b"max_concurrent_streams", "max_consecutive_inbound_frames_with_empty_payload", b"max_consecutive_inbound_frames_with_empty_payload", "max_inbound_priority_frames_per_stream", b"max_inbound_priority_frames_per_stream", "max_inbound_window_update_frames_per_data_frame_sent", b"max_inbound_window_update_frames_per_data_frame_sent", "max_outbound_control_frames", b"max_outbound_control_frames", "max_outbound_frames", b"max_outbound_frames", "override_stream_error_on_invalid_http_message", b"override_stream_error_on_invalid_http_message", "stream_error_on_invalid_http_messaging", b"stream_error_on_invalid_http_messaging"]) -> None: ...

global___Http2ProtocolOptions = Http2ProtocolOptions

@typing.final
class GrpcProtocolOptions(google.protobuf.message.Message):
    """[#not-implemented-hide:]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HTTP2_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
    @property
    def http2_protocol_options(self) -> global___Http2ProtocolOptions: ...
    def __init__(
        self,
        *,
        http2_protocol_options: global___Http2ProtocolOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["http2_protocol_options", b"http2_protocol_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["http2_protocol_options", b"http2_protocol_options"]) -> None: ...

global___GrpcProtocolOptions = GrpcProtocolOptions

@typing.final
class Http3ProtocolOptions(google.protobuf.message.Message):
    """A message which allows using HTTP/3.
    [#next-free-field: 6]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUIC_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
    OVERRIDE_STREAM_ERROR_ON_INVALID_HTTP_MESSAGE_FIELD_NUMBER: builtins.int
    ALLOW_EXTENDED_CONNECT_FIELD_NUMBER: builtins.int
    allow_extended_connect: builtins.bool
    """Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
    the header mechanisms from the `HTTP/2 extended connect RFC
    <https://datatracker.ietf.org/doc/html/rfc8441>`_
    and settings `proposed for HTTP/3
    <https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/>`_
    Note that HTTP/3 CONNECT is not yet an RFC.
    """
    @property
    def quic_protocol_options(self) -> global___QuicProtocolOptions: ...
    @property
    def override_stream_error_on_invalid_http_message(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Allows invalid HTTP messaging and headers. When this option is disabled (default), then
        the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
        when this option is enabled, only the offending stream is terminated.

        If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
        <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`.
        """

    def __init__(
        self,
        *,
        quic_protocol_options: global___QuicProtocolOptions | None = ...,
        override_stream_error_on_invalid_http_message: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        allow_extended_connect: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["override_stream_error_on_invalid_http_message", b"override_stream_error_on_invalid_http_message", "quic_protocol_options", b"quic_protocol_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["allow_extended_connect", b"allow_extended_connect", "override_stream_error_on_invalid_http_message", b"override_stream_error_on_invalid_http_message", "quic_protocol_options", b"quic_protocol_options"]) -> None: ...

global___Http3ProtocolOptions = Http3ProtocolOptions

@typing.final
class SchemeHeaderTransformation(google.protobuf.message.Message):
    """A message to control transformations to the :scheme header"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEME_TO_OVERWRITE_FIELD_NUMBER: builtins.int
    scheme_to_overwrite: builtins.str
    """Overwrite any Scheme header with the contents of this string."""
    def __init__(
        self,
        *,
        scheme_to_overwrite: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["scheme_to_overwrite", b"scheme_to_overwrite", "transformation", b"transformation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["scheme_to_overwrite", b"scheme_to_overwrite", "transformation", b"transformation"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["transformation", b"transformation"]) -> typing.Literal["scheme_to_overwrite"] | None: ...

global___SchemeHeaderTransformation = SchemeHeaderTransformation
