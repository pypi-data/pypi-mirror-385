"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.accesslog.v3.accesslog_pb2
import envoy.config.core.v3.address_pb2
import envoy.config.core.v3.base_pb2
import envoy.config.core.v3.extension_pb2
import envoy.config.core.v3.socket_option_pb2
import envoy.config.listener.v3.api_listener_pb2
import envoy.config.listener.v3.listener_components_pb2
import envoy.config.listener.v3.udp_listener_config_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing
import xds.core.v3.collection_entry_pb2
import xds.type.matcher.v3.matcher_pb2

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class AdditionalAddress(google.protobuf.message.Message):
    """[#protodoc-title: Listener configuration]
    Listener :ref:`configuration overview <config_listeners>`

    The additional address the listener is listening on.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADDRESS_FIELD_NUMBER: builtins.int
    SOCKET_OPTIONS_FIELD_NUMBER: builtins.int
    @property
    def address(self) -> envoy.config.core.v3.address_pb2.Address: ...
    @property
    def socket_options(self) -> envoy.config.core.v3.socket_option_pb2.SocketOptionsOverride:
        """Additional socket options that may not be present in Envoy source code or
        precompiled binaries. If specified, this will override the
        :ref:`socket_options <envoy_v3_api_field_config.listener.v3.Listener.socket_options>`
        in the listener. If specified with no
        :ref:`socket_options <envoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options>`
        or an empty list of :ref:`socket_options <envoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options>`,
        it means no socket option will apply.
        """

    def __init__(
        self,
        *,
        address: envoy.config.core.v3.address_pb2.Address | None = ...,
        socket_options: envoy.config.core.v3.socket_option_pb2.SocketOptionsOverride | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["address", b"address", "socket_options", b"socket_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["address", b"address", "socket_options", b"socket_options"]) -> None: ...

global___AdditionalAddress = AdditionalAddress

@typing.final
class ListenerCollection(google.protobuf.message.Message):
    """Listener list collections. Entries are ``Listener`` resources or references.
    [#not-implemented-hide:]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[xds.core.v3.collection_entry_pb2.CollectionEntry]: ...
    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[xds.core.v3.collection_entry_pb2.CollectionEntry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___ListenerCollection = ListenerCollection

@typing.final
class Listener(google.protobuf.message.Message):
    """[#next-free-field: 34]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _DrainType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _DrainTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Listener._DrainType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        DEFAULT: Listener._DrainType.ValueType  # 0
        """Drain in response to calling /healthcheck/fail admin endpoint (along with the health check
        filter), listener removal/modification, and hot restart.
        """
        MODIFY_ONLY: Listener._DrainType.ValueType  # 1
        """Drain in response to listener removal/modification and hot restart. This setting does not
        include /healthcheck/fail. This setting may be desirable if Envoy is hosting both ingress
        and egress listeners.
        """

    class DrainType(_DrainType, metaclass=_DrainTypeEnumTypeWrapper): ...
    DEFAULT: Listener.DrainType.ValueType  # 0
    """Drain in response to calling /healthcheck/fail admin endpoint (along with the health check
    filter), listener removal/modification, and hot restart.
    """
    MODIFY_ONLY: Listener.DrainType.ValueType  # 1
    """Drain in response to listener removal/modification and hot restart. This setting does not
    include /healthcheck/fail. This setting may be desirable if Envoy is hosting both ingress
    and egress listeners.
    """

    @typing.final
    class DeprecatedV1(google.protobuf.message.Message):
        """[#not-implemented-hide:]"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        BIND_TO_PORT_FIELD_NUMBER: builtins.int
        @property
        def bind_to_port(self) -> google.protobuf.wrappers_pb2.BoolValue:
            """Whether the listener should bind to the port. A listener that doesn't
            bind can only receive connections redirected from other listeners that
            set use_original_dst parameter to true. Default is true.

            This is deprecated. Use :ref:`Listener.bind_to_port
            <envoy_v3_api_field_config.listener.v3.Listener.bind_to_port>`
            """

        def __init__(
            self,
            *,
            bind_to_port: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["bind_to_port", b"bind_to_port"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["bind_to_port", b"bind_to_port"]) -> None: ...

    @typing.final
    class ConnectionBalanceConfig(google.protobuf.message.Message):
        """Configuration for listener connection balancing."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class ExactBalance(google.protobuf.message.Message):
            """A connection balancer implementation that does exact balancing. This means that a lock is
            held during balancing so that connection counts are nearly exactly balanced between worker
            threads. This is "nearly" exact in the sense that a connection might close in parallel thus
            making the counts incorrect, but this should be rectified on the next accept. This balancer
            sacrifices accept throughput for accuracy and should be used when there are a small number of
            connections that rarely cycle (e.g., service mesh gRPC egress).
            """

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            def __init__(
                self,
            ) -> None: ...

        EXACT_BALANCE_FIELD_NUMBER: builtins.int
        EXTEND_BALANCE_FIELD_NUMBER: builtins.int
        @property
        def exact_balance(self) -> global___Listener.ConnectionBalanceConfig.ExactBalance:
            """If specified, the listener will use the exact connection balancer."""

        @property
        def extend_balance(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
            """The listener will use the connection balancer according to ``type_url``. If ``type_url`` is invalid,
            Envoy will not attempt to balance active connections between worker threads.
            [#extension-category: envoy.network.connection_balance]
            """

        def __init__(
            self,
            *,
            exact_balance: global___Listener.ConnectionBalanceConfig.ExactBalance | None = ...,
            extend_balance: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["balance_type", b"balance_type", "exact_balance", b"exact_balance", "extend_balance", b"extend_balance"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["balance_type", b"balance_type", "exact_balance", b"exact_balance", "extend_balance", b"extend_balance"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["balance_type", b"balance_type"]) -> typing.Literal["exact_balance", "extend_balance"] | None: ...

    @typing.final
    class InternalListenerConfig(google.protobuf.message.Message):
        """Configuration for envoy internal listener. All the future internal listener features should be added here."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    ADDITIONAL_ADDRESSES_FIELD_NUMBER: builtins.int
    STAT_PREFIX_FIELD_NUMBER: builtins.int
    FILTER_CHAINS_FIELD_NUMBER: builtins.int
    FILTER_CHAIN_MATCHER_FIELD_NUMBER: builtins.int
    USE_ORIGINAL_DST_FIELD_NUMBER: builtins.int
    DEFAULT_FILTER_CHAIN_FIELD_NUMBER: builtins.int
    PER_CONNECTION_BUFFER_LIMIT_BYTES_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    DEPRECATED_V1_FIELD_NUMBER: builtins.int
    DRAIN_TYPE_FIELD_NUMBER: builtins.int
    LISTENER_FILTERS_FIELD_NUMBER: builtins.int
    LISTENER_FILTERS_TIMEOUT_FIELD_NUMBER: builtins.int
    CONTINUE_ON_LISTENER_FILTERS_TIMEOUT_FIELD_NUMBER: builtins.int
    TRANSPARENT_FIELD_NUMBER: builtins.int
    FREEBIND_FIELD_NUMBER: builtins.int
    SOCKET_OPTIONS_FIELD_NUMBER: builtins.int
    TCP_FAST_OPEN_QUEUE_LENGTH_FIELD_NUMBER: builtins.int
    TRAFFIC_DIRECTION_FIELD_NUMBER: builtins.int
    UDP_LISTENER_CONFIG_FIELD_NUMBER: builtins.int
    API_LISTENER_FIELD_NUMBER: builtins.int
    CONNECTION_BALANCE_CONFIG_FIELD_NUMBER: builtins.int
    REUSE_PORT_FIELD_NUMBER: builtins.int
    ENABLE_REUSE_PORT_FIELD_NUMBER: builtins.int
    ACCESS_LOG_FIELD_NUMBER: builtins.int
    TCP_BACKLOG_SIZE_FIELD_NUMBER: builtins.int
    BIND_TO_PORT_FIELD_NUMBER: builtins.int
    INTERNAL_LISTENER_FIELD_NUMBER: builtins.int
    ENABLE_MPTCP_FIELD_NUMBER: builtins.int
    IGNORE_GLOBAL_CONN_LIMIT_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The unique name by which this listener is known. If no name is provided,
    Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
    updated or removed via :ref:`LDS <config_listeners_lds>` a unique name must be provided.
    """
    stat_prefix: builtins.str
    """Optional prefix to use on listener stats. If empty, the stats will be rooted at
    ``listener.<address as string>.``. If non-empty, stats will be rooted at
    ``listener.<stat_prefix>.``.
    """
    drain_type: global___Listener.DrainType.ValueType
    """The type of draining to perform at a listener-wide level."""
    continue_on_listener_filters_timeout: builtins.bool
    """Whether a connection should be created when listener filters timeout. Default is false.

    .. attention::

      Some listener filters, such as :ref:`Proxy Protocol filter
      <config_listener_filters_proxy_protocol>`, should not be used with this option. It will cause
      unexpected behavior when a connection is created.
    """
    traffic_direction: envoy.config.core.v3.base_pb2.TrafficDirection.ValueType
    """Specifies the intended direction of the traffic relative to the local Envoy.
    This property is required on Windows for listeners using the original destination filter,
    see :ref:`Original Destination <config_listener_filters_original_dst>`.
    """
    reuse_port: builtins.bool
    """Deprecated. Use ``enable_reuse_port`` instead."""
    enable_mptcp: builtins.bool
    """Enable MPTCP (multi-path TCP) on this listener. Clients will be allowed to establish
    MPTCP connections. Non-MPTCP clients will fall back to regular TCP.
    """
    ignore_global_conn_limit: builtins.bool
    """Whether the listener should limit connections based upon the value of
    :ref:`global_downstream_max_connections <config_overload_manager_limiting_connections>`.
    """
    @property
    def address(self) -> envoy.config.core.v3.address_pb2.Address:
        """The address that the listener should listen on. In general, the address must be unique, though
        that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
        Linux as the actual port will be allocated by the OS.
        Required unless ``api_listener`` or ``listener_specifier`` is populated.
        """

    @property
    def additional_addresses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AdditionalAddress]:
        """The additional addresses the listener should listen on. The addresses must be unique across all
        listeners. Multiple addresses with port 0 can be supplied. When using multiple addresses in a single listener,
        all addresses use the same protocol, and multiple internal addresses are not supported.
        """

    @property
    def filter_chains(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.listener.v3.listener_components_pb2.FilterChain]:
        """A list of filter chains to consider for this listener. The
        :ref:`FilterChain <envoy_v3_api_msg_config.listener.v3.FilterChain>` with the most specific
        :ref:`FilterChainMatch <envoy_v3_api_msg_config.listener.v3.FilterChainMatch>` criteria is used on a
        connection.

        Example using SNI for filter chain selection can be found in the
        :ref:`FAQ entry <faq_how_to_setup_sni>`.
        """

    @property
    def filter_chain_matcher(self) -> xds.type.matcher.v3.matcher_pb2.Matcher:
        """:ref:`Matcher API <arch_overview_matching_listener>` resolving the filter chain name from the
        network properties. This matcher is used as a replacement for the filter chain match condition
        :ref:`filter_chain_match
        <envoy_v3_api_field_config.listener.v3.FilterChain.filter_chain_match>`. If specified, all
        :ref:`filter_chains <envoy_v3_api_field_config.listener.v3.Listener.filter_chains>` must have a
        non-empty and unique :ref:`name <envoy_v3_api_field_config.listener.v3.FilterChain.name>` field
        and not specify :ref:`filter_chain_match
        <envoy_v3_api_field_config.listener.v3.FilterChain.filter_chain_match>` field.

        .. note::

         Once matched, each connection is permanently bound to its filter chain.
         If the matcher changes but the filter chain remains the same, the
         connections bound to the filter chain are not drained. If, however, the
         filter chain is removed or structurally modified, then the drain for its
         connections is initiated.
        """

    @property
    def use_original_dst(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """If a connection is redirected using ``iptables``, the port on which the proxy
        receives it might be different from the original destination address. When this flag is set to
        true, the listener hands off redirected connections to the listener associated with the
        original destination address. If there is no listener associated with the original destination
        address, the connection is handled by the listener that receives it. Defaults to false.
        """

    @property
    def default_filter_chain(self) -> envoy.config.listener.v3.listener_components_pb2.FilterChain:
        """The default filter chain if none of the filter chain matches. If no default filter chain is supplied,
        the connection will be closed. The filter chain match is ignored in this field.
        """

    @property
    def per_connection_buffer_limit_bytes(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Soft limit on size of the listener’s new connection read and write buffers.
        If unspecified, an implementation defined default is applied (1MiB).
        """

    @property
    def metadata(self) -> envoy.config.core.v3.base_pb2.Metadata:
        """Listener metadata."""

    @property
    def deprecated_v1(self) -> global___Listener.DeprecatedV1:
        """[#not-implemented-hide:]"""

    @property
    def listener_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.listener.v3.listener_components_pb2.ListenerFilter]:
        """Listener filters have the opportunity to manipulate and augment the connection metadata that
        is used in connection filter chain matching, for example. These filters are run before any in
        :ref:`filter_chains <envoy_v3_api_field_config.listener.v3.Listener.filter_chains>`. Order matters as the
        filters are processed sequentially right after a socket has been accepted by the listener, and
        before a connection is created.
        UDP Listener filters can be specified when the protocol in the listener socket address in
        :ref:`protocol <envoy_v3_api_field_config.core.v3.SocketAddress.protocol>` is :ref:`UDP
        <envoy_v3_api_enum_value_config.core.v3.SocketAddress.Protocol.UDP>`.
        """

    @property
    def listener_filters_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """The timeout to wait for all listener filters to complete operation. If the timeout is reached,
        the accepted socket is closed without a connection being created unless
        ``continue_on_listener_filters_timeout`` is set to true. Specify 0 to disable the
        timeout. If not specified, a default timeout of 15s is used.
        """

    @property
    def transparent(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Whether the listener should be set as a transparent socket.
        When this flag is set to true, connections can be redirected to the listener using an
        ``iptables`` ``TPROXY`` target, in which case the original source and destination addresses and
        ports are preserved on accepted connections. This flag should be used in combination with
        :ref:`an original_dst <config_listener_filters_original_dst>` :ref:`listener filter
        <envoy_v3_api_field_config.listener.v3.Listener.listener_filters>` to mark the connections' local addresses as
        "restored." This can be used to hand off each redirected connection to another listener
        associated with the connection's destination address. Direct connections to the socket without
        using ``TPROXY`` cannot be distinguished from connections redirected using ``TPROXY`` and are
        therefore treated as if they were redirected.
        When this flag is set to false, the listener's socket is explicitly reset as non-transparent.
        Setting this flag requires Envoy to run with the ``CAP_NET_ADMIN`` capability.
        When this flag is not set (default), the socket is not modified, i.e. the transparent option
        is neither set nor reset.
        """

    @property
    def freebind(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Whether the listener should set the ``IP_FREEBIND`` socket option. When this
        flag is set to true, listeners can be bound to an IP address that is not
        configured on the system running Envoy. When this flag is set to false, the
        option ``IP_FREEBIND`` is disabled on the socket. When this flag is not set
        (default), the socket is not modified, i.e. the option is neither enabled
        nor disabled.
        """

    @property
    def socket_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.core.v3.socket_option_pb2.SocketOption]:
        """Additional socket options that may not be present in Envoy source code or
        precompiled binaries. The socket options can be updated for a listener when
        :ref:`enable_reuse_port <envoy_v3_api_field_config.listener.v3.Listener.enable_reuse_port>`
        is `true`. Otherwise, if socket options change during a listener update the update will be rejected
        to make it clear that the options were not updated.
        """

    @property
    def tcp_fast_open_queue_length(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Whether the listener should accept TCP Fast Open (TFO) connections.
        When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on
        the socket, with a queue length of the specified size
        (see `details in RFC7413 <https://tools.ietf.org/html/rfc7413#section-5.1>`_).
        When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.
        When this flag is not set (default), the socket is not modified,
        i.e. the option is neither enabled nor disabled.

        On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable
        TCP_FASTOPEN.
        See `ip-sysctl.txt <https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt>`_.

        On macOS, only values of 0, 1, and unset are valid; other values may result in an error.
        To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter.
        """

    @property
    def udp_listener_config(self) -> envoy.config.listener.v3.udp_listener_config_pb2.UdpListenerConfig:
        """If the protocol in the listener socket address in :ref:`protocol
        <envoy_v3_api_field_config.core.v3.SocketAddress.protocol>` is :ref:`UDP
        <envoy_v3_api_enum_value_config.core.v3.SocketAddress.Protocol.UDP>`, this field specifies UDP
        listener specific configuration.
        """

    @property
    def api_listener(self) -> envoy.config.listener.v3.api_listener_pb2.ApiListener:
        """Used to represent an API listener, which is used in non-proxy clients. The type of API
        exposed to the non-proxy application depends on the type of API listener.
        When this field is set, no other field except for :ref:`name<envoy_v3_api_field_config.listener.v3.Listener.name>`
        should be set.

        .. note::

         Currently only one ApiListener can be installed; and it can only be done via bootstrap config,
         not LDS.

        [#next-major-version: In the v3 API, instead of this messy approach where the socket
        listener fields are directly in the top-level Listener message and the API listener types
        are in the ApiListener message, the socket listener messages should be in their own message,
        and the top-level Listener should essentially be a oneof that selects between the
        socket listener and the various types of API listener. That way, a given Listener message
        can structurally only contain the fields of the relevant type.]
        """

    @property
    def connection_balance_config(self) -> global___Listener.ConnectionBalanceConfig:
        """The listener's connection balancer configuration, currently only applicable to TCP listeners.
        If no configuration is specified, Envoy will not attempt to balance active connections between
        worker threads.

        In the scenario that the listener X redirects all the connections to the listeners Y1 and Y2
        by setting :ref:`use_original_dst <envoy_v3_api_field_config.listener.v3.Listener.use_original_dst>` in X
        and :ref:`bind_to_port <envoy_v3_api_field_config.listener.v3.Listener.bind_to_port>` to false in Y1 and Y2,
        it is recommended to disable the balance config in listener X to avoid the cost of balancing, and
        enable the balance config in Y1 and Y2 to balance the connections among the workers.
        """

    @property
    def enable_reuse_port(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """When this flag is set to true, listeners set the ``SO_REUSEPORT`` socket option and
        create one socket for each worker thread. This makes inbound connections
        distribute among worker threads roughly evenly in cases where there are a high number
        of connections. When this flag is set to false, all worker threads share one socket. This field
        defaults to true. The change of field will be rejected during an listener update when the
        runtime flag ``envoy.reloadable_features.enable_update_listener_socket_options`` is enabled.
        Otherwise, the update of this field will be ignored quietly.

        .. attention::

          Although this field defaults to true, it has different behavior on different platforms. See
          the following text for more information.

        * On Linux, reuse_port is respected for both TCP and UDP listeners. It also works correctly
          with hot restart.
        * On macOS, reuse_port for TCP does not do what it does on Linux. Instead of load balancing,
          the last socket wins and receives all connections/packets. For TCP, reuse_port is force
          disabled and the user is warned. For UDP, it is enabled, but only one worker will receive
          packets. For QUIC/H3, SW routing will send packets to other workers. For "raw" UDP, only
          a single worker will currently receive packets.
        * On Windows, reuse_port for TCP has undefined behavior. It is force disabled and the user
          is warned similar to macOS. It is left enabled for UDP with undefined behavior currently.
        """

    @property
    def access_log(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.accesslog.v3.accesslog_pb2.AccessLog]:
        """Configuration for :ref:`access logs <arch_overview_access_logs>`
        emitted by this listener.
        """

    @property
    def tcp_backlog_size(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """The maximum length a tcp listener's pending connections queue can grow to. If no value is
        provided net.core.somaxconn will be used on Linux and 128 otherwise.
        """

    @property
    def bind_to_port(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Whether the listener should bind to the port. A listener that doesn't
        bind can only receive connections redirected from other listeners that set
        :ref:`use_original_dst <envoy_v3_api_field_config.listener.v3.Listener.use_original_dst>`
        to true. Default is true.
        """

    @property
    def internal_listener(self) -> global___Listener.InternalListenerConfig:
        """Used to represent an internal listener which does not listen on OSI L4 address but can be used by the
        :ref:`envoy cluster <envoy_v3_api_msg_config.cluster.v3.Cluster>` to create a user space connection to.
        The internal listener acts as a TCP listener. It supports listener filters and network filter chains.
        Upstream clusters refer to the internal listeners by their :ref:`name
        <envoy_v3_api_field_config.listener.v3.Listener.name>`. :ref:`Address
        <envoy_v3_api_field_config.listener.v3.Listener.address>` must not be set on the internal listeners.

        There are some limitations that are derived from the implementation. The known limitations include:

        * :ref:`ConnectionBalanceConfig <envoy_v3_api_msg_config.listener.v3.Listener.ConnectionBalanceConfig>` is not
          allowed because both the cluster connection and the listener connection must be owned by the same dispatcher.
        * :ref:`tcp_backlog_size <envoy_v3_api_field_config.listener.v3.Listener.tcp_backlog_size>`
        * :ref:`freebind <envoy_v3_api_field_config.listener.v3.Listener.freebind>`
        * :ref:`transparent <envoy_v3_api_field_config.listener.v3.Listener.transparent>`
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        address: envoy.config.core.v3.address_pb2.Address | None = ...,
        additional_addresses: collections.abc.Iterable[global___AdditionalAddress] | None = ...,
        stat_prefix: builtins.str = ...,
        filter_chains: collections.abc.Iterable[envoy.config.listener.v3.listener_components_pb2.FilterChain] | None = ...,
        filter_chain_matcher: xds.type.matcher.v3.matcher_pb2.Matcher | None = ...,
        use_original_dst: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        default_filter_chain: envoy.config.listener.v3.listener_components_pb2.FilterChain | None = ...,
        per_connection_buffer_limit_bytes: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        metadata: envoy.config.core.v3.base_pb2.Metadata | None = ...,
        deprecated_v1: global___Listener.DeprecatedV1 | None = ...,
        drain_type: global___Listener.DrainType.ValueType = ...,
        listener_filters: collections.abc.Iterable[envoy.config.listener.v3.listener_components_pb2.ListenerFilter] | None = ...,
        listener_filters_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        continue_on_listener_filters_timeout: builtins.bool = ...,
        transparent: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        freebind: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        socket_options: collections.abc.Iterable[envoy.config.core.v3.socket_option_pb2.SocketOption] | None = ...,
        tcp_fast_open_queue_length: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        traffic_direction: envoy.config.core.v3.base_pb2.TrafficDirection.ValueType = ...,
        udp_listener_config: envoy.config.listener.v3.udp_listener_config_pb2.UdpListenerConfig | None = ...,
        api_listener: envoy.config.listener.v3.api_listener_pb2.ApiListener | None = ...,
        connection_balance_config: global___Listener.ConnectionBalanceConfig | None = ...,
        reuse_port: builtins.bool = ...,
        enable_reuse_port: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        access_log: collections.abc.Iterable[envoy.config.accesslog.v3.accesslog_pb2.AccessLog] | None = ...,
        tcp_backlog_size: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        bind_to_port: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        internal_listener: global___Listener.InternalListenerConfig | None = ...,
        enable_mptcp: builtins.bool = ...,
        ignore_global_conn_limit: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["address", b"address", "api_listener", b"api_listener", "bind_to_port", b"bind_to_port", "connection_balance_config", b"connection_balance_config", "default_filter_chain", b"default_filter_chain", "deprecated_v1", b"deprecated_v1", "enable_reuse_port", b"enable_reuse_port", "filter_chain_matcher", b"filter_chain_matcher", "freebind", b"freebind", "internal_listener", b"internal_listener", "listener_filters_timeout", b"listener_filters_timeout", "listener_specifier", b"listener_specifier", "metadata", b"metadata", "per_connection_buffer_limit_bytes", b"per_connection_buffer_limit_bytes", "tcp_backlog_size", b"tcp_backlog_size", "tcp_fast_open_queue_length", b"tcp_fast_open_queue_length", "transparent", b"transparent", "udp_listener_config", b"udp_listener_config", "use_original_dst", b"use_original_dst"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["access_log", b"access_log", "additional_addresses", b"additional_addresses", "address", b"address", "api_listener", b"api_listener", "bind_to_port", b"bind_to_port", "connection_balance_config", b"connection_balance_config", "continue_on_listener_filters_timeout", b"continue_on_listener_filters_timeout", "default_filter_chain", b"default_filter_chain", "deprecated_v1", b"deprecated_v1", "drain_type", b"drain_type", "enable_mptcp", b"enable_mptcp", "enable_reuse_port", b"enable_reuse_port", "filter_chain_matcher", b"filter_chain_matcher", "filter_chains", b"filter_chains", "freebind", b"freebind", "ignore_global_conn_limit", b"ignore_global_conn_limit", "internal_listener", b"internal_listener", "listener_filters", b"listener_filters", "listener_filters_timeout", b"listener_filters_timeout", "listener_specifier", b"listener_specifier", "metadata", b"metadata", "name", b"name", "per_connection_buffer_limit_bytes", b"per_connection_buffer_limit_bytes", "reuse_port", b"reuse_port", "socket_options", b"socket_options", "stat_prefix", b"stat_prefix", "tcp_backlog_size", b"tcp_backlog_size", "tcp_fast_open_queue_length", b"tcp_fast_open_queue_length", "traffic_direction", b"traffic_direction", "transparent", b"transparent", "udp_listener_config", b"udp_listener_config", "use_original_dst", b"use_original_dst"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["listener_specifier", b"listener_specifier"]) -> typing.Literal["internal_listener"] | None: ...

global___Listener = Listener

@typing.final
class ListenerManager(google.protobuf.message.Message):
    """A placeholder proto so that users can explicitly configure the standard
    Listener Manager via the bootstrap's :ref:`listener_manager <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.listener_manager>`.
    [#not-implemented-hide:]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ListenerManager = ListenerManager

@typing.final
class ValidationListenerManager(google.protobuf.message.Message):
    """A placeholder proto so that users can explicitly configure the standard
    Validation Listener Manager via the bootstrap's :ref:`listener_manager <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.listener_manager>`.
    [#not-implemented-hide:]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ValidationListenerManager = ValidationListenerManager

@typing.final
class ApiListenerManager(google.protobuf.message.Message):
    """A placeholder proto so that users can explicitly configure the API
    Listener Manager via the bootstrap's :ref:`listener_manager <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.listener_manager>`.
    [#not-implemented-hide:]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ApiListenerManager = ApiListenerManager
