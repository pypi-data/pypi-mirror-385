"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.accesslog.v3.accesslog_pb2
import envoy.config.cluster.v3.cluster_pb2
import envoy.config.core.v3.address_pb2
import envoy.config.core.v3.base_pb2
import envoy.config.core.v3.config_source_pb2
import envoy.config.core.v3.event_service_config_pb2
import envoy.config.core.v3.extension_pb2
import envoy.config.core.v3.resolver_pb2
import envoy.config.core.v3.socket_option_pb2
import envoy.config.listener.v3.listener_pb2
import envoy.config.metrics.v3.stats_pb2
import envoy.config.overload.v3.overload_pb2
import envoy.config.trace.v3.http_tracer_pb2
import envoy.extensions.transport_sockets.tls.v3.secret_pb2
import envoy.type.v3.percent_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Bootstrap(google.protobuf.message.Message):
    """[#protodoc-title: Bootstrap]
    This proto is supplied via the :option:`-c` CLI flag and acts as the root
    of the Envoy v3 configuration. See the :ref:`v3 configuration overview
    <config_overview_bootstrap>` for more detail.

    Bootstrap :ref:`configuration overview <config_overview_bootstrap>`.
    [#next-free-field: 38]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class StaticResources(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LISTENERS_FIELD_NUMBER: builtins.int
        CLUSTERS_FIELD_NUMBER: builtins.int
        SECRETS_FIELD_NUMBER: builtins.int
        @property
        def listeners(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.listener.v3.listener_pb2.Listener]:
            """Static :ref:`Listeners <envoy_v3_api_msg_config.listener.v3.Listener>`. These listeners are
            available regardless of LDS configuration.
            """

        @property
        def clusters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.cluster.v3.cluster_pb2.Cluster]:
            """If a network based configuration source is specified for :ref:`cds_config
            <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.DynamicResources.cds_config>`, it's necessary
            to have some initial cluster definitions available to allow Envoy to know
            how to speak to the management server. These cluster definitions may not
            use :ref:`EDS <arch_overview_dynamic_config_eds>` (i.e. they should be static
            IP or DNS-based).
            """

        @property
        def secrets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.extensions.transport_sockets.tls.v3.secret_pb2.Secret]:
            """These static secrets can be used by :ref:`SdsSecretConfig
            <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.SdsSecretConfig>`
            """

        def __init__(
            self,
            *,
            listeners: collections.abc.Iterable[envoy.config.listener.v3.listener_pb2.Listener] | None = ...,
            clusters: collections.abc.Iterable[envoy.config.cluster.v3.cluster_pb2.Cluster] | None = ...,
            secrets: collections.abc.Iterable[envoy.extensions.transport_sockets.tls.v3.secret_pb2.Secret] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["clusters", b"clusters", "listeners", b"listeners", "secrets", b"secrets"]) -> None: ...

    @typing.final
    class DynamicResources(google.protobuf.message.Message):
        """[#next-free-field: 7]"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LDS_CONFIG_FIELD_NUMBER: builtins.int
        LDS_RESOURCES_LOCATOR_FIELD_NUMBER: builtins.int
        CDS_CONFIG_FIELD_NUMBER: builtins.int
        CDS_RESOURCES_LOCATOR_FIELD_NUMBER: builtins.int
        ADS_CONFIG_FIELD_NUMBER: builtins.int
        lds_resources_locator: builtins.str
        """xdstp:// resource locator for listener collection.
        [#not-implemented-hide:]
        """
        cds_resources_locator: builtins.str
        """xdstp:// resource locator for cluster collection.
        [#not-implemented-hide:]
        """
        @property
        def lds_config(self) -> envoy.config.core.v3.config_source_pb2.ConfigSource:
            """All :ref:`Listeners <envoy_v3_api_msg_config.listener.v3.Listener>` are provided by a single
            :ref:`LDS <arch_overview_dynamic_config_lds>` configuration source.
            """

        @property
        def cds_config(self) -> envoy.config.core.v3.config_source_pb2.ConfigSource:
            """All post-bootstrap :ref:`Cluster <envoy_v3_api_msg_config.cluster.v3.Cluster>` definitions are
            provided by a single :ref:`CDS <arch_overview_dynamic_config_cds>`
            configuration source.
            """

        @property
        def ads_config(self) -> envoy.config.core.v3.config_source_pb2.ApiConfigSource:
            """A single :ref:`ADS <config_overview_ads>` source may be optionally
            specified. This must have :ref:`api_type
            <envoy_v3_api_field_config.core.v3.ApiConfigSource.api_type>` :ref:`GRPC
            <envoy_v3_api_enum_value_config.core.v3.ApiConfigSource.ApiType.GRPC>`. Only
            :ref:`ConfigSources <envoy_v3_api_msg_config.core.v3.ConfigSource>` that have
            the :ref:`ads <envoy_v3_api_field_config.core.v3.ConfigSource.ads>` field set will be
            streamed on the ADS channel.
            """

        def __init__(
            self,
            *,
            lds_config: envoy.config.core.v3.config_source_pb2.ConfigSource | None = ...,
            lds_resources_locator: builtins.str = ...,
            cds_config: envoy.config.core.v3.config_source_pb2.ConfigSource | None = ...,
            cds_resources_locator: builtins.str = ...,
            ads_config: envoy.config.core.v3.config_source_pb2.ApiConfigSource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["ads_config", b"ads_config", "cds_config", b"cds_config", "lds_config", b"lds_config"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["ads_config", b"ads_config", "cds_config", b"cds_config", "cds_resources_locator", b"cds_resources_locator", "lds_config", b"lds_config", "lds_resources_locator", b"lds_resources_locator"]) -> None: ...

    @typing.final
    class CertificateProviderInstancesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NODE_FIELD_NUMBER: builtins.int
    NODE_CONTEXT_PARAMS_FIELD_NUMBER: builtins.int
    STATIC_RESOURCES_FIELD_NUMBER: builtins.int
    DYNAMIC_RESOURCES_FIELD_NUMBER: builtins.int
    CLUSTER_MANAGER_FIELD_NUMBER: builtins.int
    HDS_CONFIG_FIELD_NUMBER: builtins.int
    FLAGS_PATH_FIELD_NUMBER: builtins.int
    STATS_SINKS_FIELD_NUMBER: builtins.int
    STATS_CONFIG_FIELD_NUMBER: builtins.int
    STATS_FLUSH_INTERVAL_FIELD_NUMBER: builtins.int
    STATS_FLUSH_ON_ADMIN_FIELD_NUMBER: builtins.int
    WATCHDOG_FIELD_NUMBER: builtins.int
    WATCHDOGS_FIELD_NUMBER: builtins.int
    TRACING_FIELD_NUMBER: builtins.int
    LAYERED_RUNTIME_FIELD_NUMBER: builtins.int
    ADMIN_FIELD_NUMBER: builtins.int
    OVERLOAD_MANAGER_FIELD_NUMBER: builtins.int
    ENABLE_DISPATCHER_STATS_FIELD_NUMBER: builtins.int
    HEADER_PREFIX_FIELD_NUMBER: builtins.int
    STATS_SERVER_VERSION_OVERRIDE_FIELD_NUMBER: builtins.int
    USE_TCP_FOR_DNS_LOOKUPS_FIELD_NUMBER: builtins.int
    DNS_RESOLUTION_CONFIG_FIELD_NUMBER: builtins.int
    TYPED_DNS_RESOLVER_CONFIG_FIELD_NUMBER: builtins.int
    BOOTSTRAP_EXTENSIONS_FIELD_NUMBER: builtins.int
    FATAL_ACTIONS_FIELD_NUMBER: builtins.int
    CONFIG_SOURCES_FIELD_NUMBER: builtins.int
    DEFAULT_CONFIG_SOURCE_FIELD_NUMBER: builtins.int
    DEFAULT_SOCKET_INTERFACE_FIELD_NUMBER: builtins.int
    CERTIFICATE_PROVIDER_INSTANCES_FIELD_NUMBER: builtins.int
    INLINE_HEADERS_FIELD_NUMBER: builtins.int
    PERF_TRACING_FILE_PATH_FIELD_NUMBER: builtins.int
    DEFAULT_REGEX_ENGINE_FIELD_NUMBER: builtins.int
    XDS_DELEGATE_EXTENSION_FIELD_NUMBER: builtins.int
    XDS_CONFIG_TRACKER_EXTENSION_FIELD_NUMBER: builtins.int
    LISTENER_MANAGER_FIELD_NUMBER: builtins.int
    flags_path: builtins.str
    """Optional file system path to search for startup flag files."""
    stats_flush_on_admin: builtins.bool
    """Flush stats to sinks only when queried for on the admin interface. If set,
    a flush timer is not created. Only one of ``stats_flush_on_admin`` or
    ``stats_flush_interval`` can be set.
    """
    enable_dispatcher_stats: builtins.bool
    """Enable :ref:`stats for event dispatcher <operations_performance>`, defaults to false.
    Note that this records a value for each iteration of the event loop on every thread. This
    should normally be minimal overhead, but when using
    :ref:`statsd <envoy_v3_api_msg_config.metrics.v3.StatsdSink>`, it will send each observed value
    over the wire individually because the statsd protocol doesn't have any way to represent a
    histogram summary. Be aware that this can be a very large volume of data.
    """
    header_prefix: builtins.str
    """Optional string which will be used in lieu of x-envoy in prefixing headers.

    For example, if this string is present and set to X-Foo, then x-envoy-retry-on will be
    transformed into x-foo-retry-on etc.

    Note this applies to the headers Envoy will generate, the headers Envoy will sanitize, and the
    headers Envoy will trust for core code and core extensions only. Be VERY careful making
    changes to this string, especially in multi-layer Envoy deployments or deployments using
    extensions which are not upstream.
    """
    use_tcp_for_dns_lookups: builtins.bool
    """Always use TCP queries instead of UDP queries for DNS lookups.
    This may be overridden on a per-cluster basis in cds_config,
    when :ref:`dns_resolvers <envoy_v3_api_field_config.cluster.v3.Cluster.dns_resolvers>` and
    :ref:`use_tcp_for_dns_lookups <envoy_v3_api_field_config.cluster.v3.Cluster.use_tcp_for_dns_lookups>` are
    specified.
    This field is deprecated in favor of ``dns_resolution_config``
    which aggregates all of the DNS resolver configuration in a single message.
    """
    default_socket_interface: builtins.str
    """Optional overriding of default socket interface. The value must be the name of one of the
    socket interface factories initialized through a bootstrap extension
    """
    perf_tracing_file_path: builtins.str
    """Optional path to a file with performance tracing data created by "Perfetto" SDK in binary
    ProtoBuf format. The default value is "envoy.pftrace".
    """
    @property
    def node(self) -> envoy.config.core.v3.base_pb2.Node:
        """Node identity to present to the management server and for instance
        identification purposes (e.g. in generated headers).
        """

    @property
    def node_context_params(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of :ref:`Node <envoy_v3_api_msg_config.core.v3.Node>` field names
        that will be included in the context parameters of the effective
        xdstp:// URL that is sent in a discovery request when resource
        locators are used for LDS/CDS. Any non-string field will have its JSON
        encoding set as the context parameter value, with the exception of
        metadata, which will be flattened (see example below). The supported field
        names are:
        - "cluster"
        - "id"
        - "locality.region"
        - "locality.sub_zone"
        - "locality.zone"
        - "metadata"
        - "user_agent_build_version.metadata"
        - "user_agent_build_version.version"
        - "user_agent_name"
        - "user_agent_version"

        The node context parameters act as a base layer dictionary for the context
        parameters (i.e. more specific resource specific context parameters will
        override). Field names will be prefixed with “udpa.node.” when included in
        context parameters.

        For example, if node_context_params is ``["user_agent_name", "metadata"]``,
        the implied context parameters might be::

          node.user_agent_name: "envoy"
          node.metadata.foo: "{\\"bar\\": \\"baz\\"}"
          node.metadata.some: "42"
          node.metadata.thing: "\\"thing\\""

        [#not-implemented-hide:]
        """

    @property
    def static_resources(self) -> global___Bootstrap.StaticResources:
        """Statically specified resources."""

    @property
    def dynamic_resources(self) -> global___Bootstrap.DynamicResources:
        """xDS configuration sources."""

    @property
    def cluster_manager(self) -> global___ClusterManager:
        """Configuration for the cluster manager which owns all upstream clusters
        within the server.
        """

    @property
    def hds_config(self) -> envoy.config.core.v3.config_source_pb2.ApiConfigSource:
        """Health discovery service config option.
        (:ref:`core.ApiConfigSource <envoy_v3_api_msg_config.core.v3.ApiConfigSource>`)
        """

    @property
    def stats_sinks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.metrics.v3.stats_pb2.StatsSink]:
        """Optional set of stats sinks."""

    @property
    def stats_config(self) -> envoy.config.metrics.v3.stats_pb2.StatsConfig:
        """Configuration for internal processing of stats."""

    @property
    def stats_flush_interval(self) -> google.protobuf.duration_pb2.Duration:
        """Optional duration between flushes to configured stats sinks. For
        performance reasons Envoy latches counters and only flushes counters and
        gauges at a periodic interval. If not specified the default is 5000ms (5
        seconds). Only one of ``stats_flush_interval`` or ``stats_flush_on_admin``
        can be set.
        Duration must be at least 1ms and at most 5 min.
        """

    @property
    def watchdog(self) -> global___Watchdog:
        """Optional watchdog configuration.
        This is for a single watchdog configuration for the entire system.
        Deprecated in favor of ``watchdogs`` which has finer granularity.
        """

    @property
    def watchdogs(self) -> global___Watchdogs:
        """Optional watchdogs configuration.
        This is used for specifying different watchdogs for the different subsystems.
        [#extension-category: envoy.guarddog_actions]
        """

    @property
    def tracing(self) -> envoy.config.trace.v3.http_tracer_pb2.Tracing:
        """Configuration for an external tracing provider.

        .. attention::
         This field has been deprecated in favor of :ref:`HttpConnectionManager.Tracing.provider
         <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider>`.
        """

    @property
    def layered_runtime(self) -> global___LayeredRuntime:
        """Configuration for the runtime configuration provider. If not
        specified, a “null” provider will be used which will result in all defaults
        being used.
        """

    @property
    def admin(self) -> global___Admin:
        """Configuration for the local administration HTTP server."""

    @property
    def overload_manager(self) -> envoy.config.overload.v3.overload_pb2.OverloadManager:
        """Optional overload manager configuration."""

    @property
    def stats_server_version_override(self) -> google.protobuf.wrappers_pb2.UInt64Value:
        """Optional proxy version which will be used to set the value of :ref:`server.version statistic
        <server_statistics>` if specified. Envoy will not process this value, it will be sent as is to
        :ref:`stats sinks <envoy_v3_api_msg_config.metrics.v3.StatsSink>`.
        """

    @property
    def dns_resolution_config(self) -> envoy.config.core.v3.resolver_pb2.DnsResolutionConfig:
        """DNS resolution configuration which includes the underlying dns resolver addresses and options.
        This may be overridden on a per-cluster basis in cds_config, when
        :ref:`dns_resolution_config <envoy_v3_api_field_config.cluster.v3.Cluster.dns_resolution_config>`
        is specified.
        This field is deprecated in favor of
        :ref:`typed_dns_resolver_config <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.typed_dns_resolver_config>`.
        """

    @property
    def typed_dns_resolver_config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
        or any other DNS resolver types and the related parameters.
        For example, an object of
        :ref:`CaresDnsResolverConfig <envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig>`
        can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
        :ref:`dns_resolution_config <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.dns_resolution_config>`
        configuration.
        During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
        when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
        When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
        [#extension-category: envoy.network.dns_resolver]
        """

    @property
    def bootstrap_extensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.core.v3.extension_pb2.TypedExtensionConfig]:
        """Specifies optional bootstrap extensions to be instantiated at startup time.
        Each item contains extension specific configuration.
        [#extension-category: envoy.bootstrap]
        """

    @property
    def fatal_actions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___FatalAction]:
        """Specifies optional extensions instantiated at startup time and
        invoked during crash time on the request that caused the crash.
        """

    @property
    def config_sources(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.core.v3.config_source_pb2.ConfigSource]:
        """Configuration sources that will participate in
        xdstp:// URL authority resolution. The algorithm is as
        follows:
        1. The authority field is taken from the xdstp:// URL, call
           this ``resource_authority``.
        2. ``resource_authority`` is compared against the authorities in any peer
           ``ConfigSource``. The peer ``ConfigSource`` is the configuration source
           message which would have been used unconditionally for resolution
           with opaque resource names. If there is a match with an authority, the
           peer ``ConfigSource`` message is used.
        3. ``resource_authority`` is compared sequentially with the authorities in
           each configuration source in ``config_sources``. The first ``ConfigSource``
           to match wins.
        4. As a fallback, if no configuration source matches, then
           ``default_config_source`` is used.
        5. If ``default_config_source`` is not specified, resolution fails.
        [#not-implemented-hide:]
        """

    @property
    def default_config_source(self) -> envoy.config.core.v3.config_source_pb2.ConfigSource:
        """Default configuration source for xdstp:// URLs if all
        other resolution fails.
        [#not-implemented-hide:]
        """

    @property
    def certificate_provider_instances(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, envoy.config.core.v3.extension_pb2.TypedExtensionConfig]:
        """Global map of CertificateProvider instances. These instances are referred to by name in the
        :ref:`CommonTlsContext.CertificateProviderInstance.instance_name
        <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.instance_name>`
        field.
        [#not-implemented-hide:]
        """

    @property
    def inline_headers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CustomInlineHeader]:
        """Specifies a set of headers that need to be registered as inline header. This configuration
        allows users to customize the inline headers on-demand at Envoy startup without modifying
        Envoy's source code.

        Note that the 'set-cookie' header cannot be registered as inline header.
        """

    @property
    def default_regex_engine(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Optional overriding of default regex engine.
        If the value is not specified, Google RE2 will be used by default.
        [#extension-category: envoy.regex_engines]
        """

    @property
    def xds_delegate_extension(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Optional XdsResourcesDelegate configuration, which allows plugging custom logic into both
        fetch and load events during xDS processing.
        If a value is not specified, no XdsResourcesDelegate will be used.
        TODO(abeyad): Add public-facing documentation.
        [#not-implemented-hide:]
        """

    @property
    def xds_config_tracker_extension(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Optional XdsConfigTracker configuration, which allows tracking xDS responses in external components,
        e.g., external tracer or monitor. It provides the process point when receive, ingest, or fail to
        process xDS resources and messages. If a value is not specified, no XdsConfigTracker will be used.

        .. note::

           There are no in-repo extensions currently, and the :repo:`XdsConfigTracker <envoy/config/xds_config_tracker.h>`
           interface should be implemented before using.
           See :repo:`xds_config_tracker_integration_test <test/integration/xds_config_tracker_integration_test.cc>`
           for an example usage of the interface.
        """

    @property
    def listener_manager(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """[#not-implemented-hide:]
        This controls the type of listener manager configured for Envoy. Currently
        Envoy only supports ListenerManager for this field and Envoy Mobile
        supports ApiListenerManager.
        """

    def __init__(
        self,
        *,
        node: envoy.config.core.v3.base_pb2.Node | None = ...,
        node_context_params: collections.abc.Iterable[builtins.str] | None = ...,
        static_resources: global___Bootstrap.StaticResources | None = ...,
        dynamic_resources: global___Bootstrap.DynamicResources | None = ...,
        cluster_manager: global___ClusterManager | None = ...,
        hds_config: envoy.config.core.v3.config_source_pb2.ApiConfigSource | None = ...,
        flags_path: builtins.str = ...,
        stats_sinks: collections.abc.Iterable[envoy.config.metrics.v3.stats_pb2.StatsSink] | None = ...,
        stats_config: envoy.config.metrics.v3.stats_pb2.StatsConfig | None = ...,
        stats_flush_interval: google.protobuf.duration_pb2.Duration | None = ...,
        stats_flush_on_admin: builtins.bool = ...,
        watchdog: global___Watchdog | None = ...,
        watchdogs: global___Watchdogs | None = ...,
        tracing: envoy.config.trace.v3.http_tracer_pb2.Tracing | None = ...,
        layered_runtime: global___LayeredRuntime | None = ...,
        admin: global___Admin | None = ...,
        overload_manager: envoy.config.overload.v3.overload_pb2.OverloadManager | None = ...,
        enable_dispatcher_stats: builtins.bool = ...,
        header_prefix: builtins.str = ...,
        stats_server_version_override: google.protobuf.wrappers_pb2.UInt64Value | None = ...,
        use_tcp_for_dns_lookups: builtins.bool = ...,
        dns_resolution_config: envoy.config.core.v3.resolver_pb2.DnsResolutionConfig | None = ...,
        typed_dns_resolver_config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        bootstrap_extensions: collections.abc.Iterable[envoy.config.core.v3.extension_pb2.TypedExtensionConfig] | None = ...,
        fatal_actions: collections.abc.Iterable[global___FatalAction] | None = ...,
        config_sources: collections.abc.Iterable[envoy.config.core.v3.config_source_pb2.ConfigSource] | None = ...,
        default_config_source: envoy.config.core.v3.config_source_pb2.ConfigSource | None = ...,
        default_socket_interface: builtins.str = ...,
        certificate_provider_instances: collections.abc.Mapping[builtins.str, envoy.config.core.v3.extension_pb2.TypedExtensionConfig] | None = ...,
        inline_headers: collections.abc.Iterable[global___CustomInlineHeader] | None = ...,
        perf_tracing_file_path: builtins.str = ...,
        default_regex_engine: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        xds_delegate_extension: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        xds_config_tracker_extension: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        listener_manager: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["admin", b"admin", "cluster_manager", b"cluster_manager", "default_config_source", b"default_config_source", "default_regex_engine", b"default_regex_engine", "dns_resolution_config", b"dns_resolution_config", "dynamic_resources", b"dynamic_resources", "hds_config", b"hds_config", "layered_runtime", b"layered_runtime", "listener_manager", b"listener_manager", "node", b"node", "overload_manager", b"overload_manager", "static_resources", b"static_resources", "stats_config", b"stats_config", "stats_flush", b"stats_flush", "stats_flush_interval", b"stats_flush_interval", "stats_flush_on_admin", b"stats_flush_on_admin", "stats_server_version_override", b"stats_server_version_override", "tracing", b"tracing", "typed_dns_resolver_config", b"typed_dns_resolver_config", "watchdog", b"watchdog", "watchdogs", b"watchdogs", "xds_config_tracker_extension", b"xds_config_tracker_extension", "xds_delegate_extension", b"xds_delegate_extension"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["admin", b"admin", "bootstrap_extensions", b"bootstrap_extensions", "certificate_provider_instances", b"certificate_provider_instances", "cluster_manager", b"cluster_manager", "config_sources", b"config_sources", "default_config_source", b"default_config_source", "default_regex_engine", b"default_regex_engine", "default_socket_interface", b"default_socket_interface", "dns_resolution_config", b"dns_resolution_config", "dynamic_resources", b"dynamic_resources", "enable_dispatcher_stats", b"enable_dispatcher_stats", "fatal_actions", b"fatal_actions", "flags_path", b"flags_path", "hds_config", b"hds_config", "header_prefix", b"header_prefix", "inline_headers", b"inline_headers", "layered_runtime", b"layered_runtime", "listener_manager", b"listener_manager", "node", b"node", "node_context_params", b"node_context_params", "overload_manager", b"overload_manager", "perf_tracing_file_path", b"perf_tracing_file_path", "static_resources", b"static_resources", "stats_config", b"stats_config", "stats_flush", b"stats_flush", "stats_flush_interval", b"stats_flush_interval", "stats_flush_on_admin", b"stats_flush_on_admin", "stats_server_version_override", b"stats_server_version_override", "stats_sinks", b"stats_sinks", "tracing", b"tracing", "typed_dns_resolver_config", b"typed_dns_resolver_config", "use_tcp_for_dns_lookups", b"use_tcp_for_dns_lookups", "watchdog", b"watchdog", "watchdogs", b"watchdogs", "xds_config_tracker_extension", b"xds_config_tracker_extension", "xds_delegate_extension", b"xds_delegate_extension"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["stats_flush", b"stats_flush"]) -> typing.Literal["stats_flush_on_admin"] | None: ...

global___Bootstrap = Bootstrap

@typing.final
class Admin(google.protobuf.message.Message):
    """Administration interface :ref:`operations documentation
    <operations_admin_interface>`.
    [#next-free-field: 7]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACCESS_LOG_FIELD_NUMBER: builtins.int
    ACCESS_LOG_PATH_FIELD_NUMBER: builtins.int
    PROFILE_PATH_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    SOCKET_OPTIONS_FIELD_NUMBER: builtins.int
    IGNORE_GLOBAL_CONN_LIMIT_FIELD_NUMBER: builtins.int
    access_log_path: builtins.str
    """The path to write the access log for the administration server. If no
    access log is desired specify ‘/dev/null’. This is only required if
    :ref:`address <envoy_v3_api_field_config.bootstrap.v3.Admin.address>` is set.
    Deprecated in favor of ``access_log`` which offers more options.
    """
    profile_path: builtins.str
    """The cpu profiler output path for the administration server. If no profile
    path is specified, the default is ‘/var/log/envoy/envoy.prof’.
    """
    ignore_global_conn_limit: builtins.bool
    """Indicates whether :ref:`global_downstream_max_connections <config_overload_manager_limiting_connections>`
    should apply to the admin interface or not.
    """
    @property
    def access_log(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.accesslog.v3.accesslog_pb2.AccessLog]:
        """Configuration for :ref:`access logs <arch_overview_access_logs>`
        emitted by the administration server.
        """

    @property
    def address(self) -> envoy.config.core.v3.address_pb2.Address:
        """The TCP address that the administration server will listen on.
        If not specified, Envoy will not start an administration server.
        """

    @property
    def socket_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.core.v3.socket_option_pb2.SocketOption]:
        """Additional socket options that may not be present in Envoy source code or
        precompiled binaries.
        """

    def __init__(
        self,
        *,
        access_log: collections.abc.Iterable[envoy.config.accesslog.v3.accesslog_pb2.AccessLog] | None = ...,
        access_log_path: builtins.str = ...,
        profile_path: builtins.str = ...,
        address: envoy.config.core.v3.address_pb2.Address | None = ...,
        socket_options: collections.abc.Iterable[envoy.config.core.v3.socket_option_pb2.SocketOption] | None = ...,
        ignore_global_conn_limit: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["address", b"address"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["access_log", b"access_log", "access_log_path", b"access_log_path", "address", b"address", "ignore_global_conn_limit", b"ignore_global_conn_limit", "profile_path", b"profile_path", "socket_options", b"socket_options"]) -> None: ...

global___Admin = Admin

@typing.final
class ClusterManager(google.protobuf.message.Message):
    """Cluster manager :ref:`architecture overview <arch_overview_cluster_manager>`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class OutlierDetection(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EVENT_LOG_PATH_FIELD_NUMBER: builtins.int
        EVENT_SERVICE_FIELD_NUMBER: builtins.int
        event_log_path: builtins.str
        """Specifies the path to the outlier event log."""
        @property
        def event_service(self) -> envoy.config.core.v3.event_service_config_pb2.EventServiceConfig:
            """[#not-implemented-hide:]
            The gRPC service for the outlier detection event service.
            If empty, outlier detection events won't be sent to a remote endpoint.
            """

        def __init__(
            self,
            *,
            event_log_path: builtins.str = ...,
            event_service: envoy.config.core.v3.event_service_config_pb2.EventServiceConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["event_service", b"event_service"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["event_log_path", b"event_log_path", "event_service", b"event_service"]) -> None: ...

    LOCAL_CLUSTER_NAME_FIELD_NUMBER: builtins.int
    OUTLIER_DETECTION_FIELD_NUMBER: builtins.int
    UPSTREAM_BIND_CONFIG_FIELD_NUMBER: builtins.int
    LOAD_STATS_CONFIG_FIELD_NUMBER: builtins.int
    local_cluster_name: builtins.str
    """Name of the local cluster (i.e., the cluster that owns the Envoy running
    this configuration). In order to enable :ref:`zone aware routing
    <arch_overview_load_balancing_zone_aware_routing>` this option must be set.
    If ``local_cluster_name`` is defined then :ref:`clusters
    <envoy_v3_api_msg_config.cluster.v3.Cluster>` must be defined in the :ref:`Bootstrap
    static cluster resources
    <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.StaticResources.clusters>`. This is unrelated to
    the :option:`--service-cluster` option which does not `affect zone aware
    routing <https://github.com/envoyproxy/envoy/issues/774>`_.
    """
    @property
    def outlier_detection(self) -> global___ClusterManager.OutlierDetection:
        """Optional global configuration for outlier detection."""

    @property
    def upstream_bind_config(self) -> envoy.config.core.v3.address_pb2.BindConfig:
        """Optional configuration used to bind newly established upstream connections.
        This may be overridden on a per-cluster basis by upstream_bind_config in the cds_config.
        """

    @property
    def load_stats_config(self) -> envoy.config.core.v3.config_source_pb2.ApiConfigSource:
        """A management server endpoint to stream load stats to via
        ``StreamLoadStats``. This must have :ref:`api_type
        <envoy_v3_api_field_config.core.v3.ApiConfigSource.api_type>` :ref:`GRPC
        <envoy_v3_api_enum_value_config.core.v3.ApiConfigSource.ApiType.GRPC>`.
        """

    def __init__(
        self,
        *,
        local_cluster_name: builtins.str = ...,
        outlier_detection: global___ClusterManager.OutlierDetection | None = ...,
        upstream_bind_config: envoy.config.core.v3.address_pb2.BindConfig | None = ...,
        load_stats_config: envoy.config.core.v3.config_source_pb2.ApiConfigSource | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["load_stats_config", b"load_stats_config", "outlier_detection", b"outlier_detection", "upstream_bind_config", b"upstream_bind_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["load_stats_config", b"load_stats_config", "local_cluster_name", b"local_cluster_name", "outlier_detection", b"outlier_detection", "upstream_bind_config", b"upstream_bind_config"]) -> None: ...

global___ClusterManager = ClusterManager

@typing.final
class Watchdogs(google.protobuf.message.Message):
    """Allows you to specify different watchdog configs for different subsystems.
    This allows finer tuned policies for the watchdog. If a subsystem is omitted
    the default values for that system will be used.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAIN_THREAD_WATCHDOG_FIELD_NUMBER: builtins.int
    WORKER_WATCHDOG_FIELD_NUMBER: builtins.int
    @property
    def main_thread_watchdog(self) -> global___Watchdog:
        """Watchdog for the main thread."""

    @property
    def worker_watchdog(self) -> global___Watchdog:
        """Watchdog for the worker threads."""

    def __init__(
        self,
        *,
        main_thread_watchdog: global___Watchdog | None = ...,
        worker_watchdog: global___Watchdog | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["main_thread_watchdog", b"main_thread_watchdog", "worker_watchdog", b"worker_watchdog"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["main_thread_watchdog", b"main_thread_watchdog", "worker_watchdog", b"worker_watchdog"]) -> None: ...

global___Watchdogs = Watchdogs

@typing.final
class Watchdog(google.protobuf.message.Message):
    """Envoy process watchdog configuration. When configured, this monitors for
    nonresponsive threads and kills the process after the configured thresholds.
    See the :ref:`watchdog documentation <operations_performance_watchdog>` for more information.
    [#next-free-field: 8]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class WatchdogAction(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _WatchdogEvent:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _WatchdogEventEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Watchdog.WatchdogAction._WatchdogEvent.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            UNKNOWN: Watchdog.WatchdogAction._WatchdogEvent.ValueType  # 0
            KILL: Watchdog.WatchdogAction._WatchdogEvent.ValueType  # 1
            MULTIKILL: Watchdog.WatchdogAction._WatchdogEvent.ValueType  # 2
            MEGAMISS: Watchdog.WatchdogAction._WatchdogEvent.ValueType  # 3
            MISS: Watchdog.WatchdogAction._WatchdogEvent.ValueType  # 4

        class WatchdogEvent(_WatchdogEvent, metaclass=_WatchdogEventEnumTypeWrapper):
            """The events are fired in this order: KILL, MULTIKILL, MEGAMISS, MISS.
            Within an event type, actions execute in the order they are configured.
            For KILL/MULTIKILL there is a default PANIC that will run after the
            registered actions and kills the process if it wasn't already killed.
            It might be useful to specify several debug actions, and possibly an
            alternate FATAL action.
            """

        UNKNOWN: Watchdog.WatchdogAction.WatchdogEvent.ValueType  # 0
        KILL: Watchdog.WatchdogAction.WatchdogEvent.ValueType  # 1
        MULTIKILL: Watchdog.WatchdogAction.WatchdogEvent.ValueType  # 2
        MEGAMISS: Watchdog.WatchdogAction.WatchdogEvent.ValueType  # 3
        MISS: Watchdog.WatchdogAction.WatchdogEvent.ValueType  # 4

        CONFIG_FIELD_NUMBER: builtins.int
        EVENT_FIELD_NUMBER: builtins.int
        event: global___Watchdog.WatchdogAction.WatchdogEvent.ValueType
        @property
        def config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
            """Extension specific configuration for the action."""

        def __init__(
            self,
            *,
            config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
            event: global___Watchdog.WatchdogAction.WatchdogEvent.ValueType = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["config", b"config"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["config", b"config", "event", b"event"]) -> None: ...

    ACTIONS_FIELD_NUMBER: builtins.int
    MISS_TIMEOUT_FIELD_NUMBER: builtins.int
    MEGAMISS_TIMEOUT_FIELD_NUMBER: builtins.int
    KILL_TIMEOUT_FIELD_NUMBER: builtins.int
    MAX_KILL_TIMEOUT_JITTER_FIELD_NUMBER: builtins.int
    MULTIKILL_TIMEOUT_FIELD_NUMBER: builtins.int
    MULTIKILL_THRESHOLD_FIELD_NUMBER: builtins.int
    @property
    def actions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Watchdog.WatchdogAction]:
        """Register actions that will fire on given WatchDog events.
        See ``WatchDogAction`` for priority of events.
        """

    @property
    def miss_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """The duration after which Envoy counts a nonresponsive thread in the
        ``watchdog_miss`` statistic. If not specified the default is 200ms.
        """

    @property
    def megamiss_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """The duration after which Envoy counts a nonresponsive thread in the
        ``watchdog_mega_miss`` statistic. If not specified the default is
        1000ms.
        """

    @property
    def kill_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """If a watched thread has been nonresponsive for this duration, assume a
        programming error and kill the entire Envoy process. Set to 0 to disable
        kill behavior. If not specified the default is 0 (disabled).
        """

    @property
    def max_kill_timeout_jitter(self) -> google.protobuf.duration_pb2.Duration:
        """Defines the maximum jitter used to adjust the ``kill_timeout`` if ``kill_timeout`` is
        enabled. Enabling this feature would help to reduce risk of synchronized
        watchdog kill events across proxies due to external triggers. Set to 0 to
        disable. If not specified the default is 0 (disabled).
        """

    @property
    def multikill_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """If ``max(2, ceil(registered_threads * Fraction(*multikill_threshold*)))``
        threads have been nonresponsive for at least this duration kill the entire
        Envoy process. Set to 0 to disable this behavior. If not specified the
        default is 0 (disabled).
        """

    @property
    def multikill_threshold(self) -> envoy.type.v3.percent_pb2.Percent:
        """Sets the threshold for ``multikill_timeout`` in terms of the percentage of
        nonresponsive threads required for the ``multikill_timeout``.
        If not specified the default is 0.
        """

    def __init__(
        self,
        *,
        actions: collections.abc.Iterable[global___Watchdog.WatchdogAction] | None = ...,
        miss_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        megamiss_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        kill_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        max_kill_timeout_jitter: google.protobuf.duration_pb2.Duration | None = ...,
        multikill_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        multikill_threshold: envoy.type.v3.percent_pb2.Percent | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["kill_timeout", b"kill_timeout", "max_kill_timeout_jitter", b"max_kill_timeout_jitter", "megamiss_timeout", b"megamiss_timeout", "miss_timeout", b"miss_timeout", "multikill_threshold", b"multikill_threshold", "multikill_timeout", b"multikill_timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["actions", b"actions", "kill_timeout", b"kill_timeout", "max_kill_timeout_jitter", b"max_kill_timeout_jitter", "megamiss_timeout", b"megamiss_timeout", "miss_timeout", b"miss_timeout", "multikill_threshold", b"multikill_threshold", "multikill_timeout", b"multikill_timeout"]) -> None: ...

global___Watchdog = Watchdog

@typing.final
class FatalAction(google.protobuf.message.Message):
    """Fatal actions to run while crashing. Actions can be safe (meaning they are
    async-signal safe) or unsafe. We run all safe actions before we run unsafe actions.
    If using an unsafe action that could get stuck or deadlock, it important to
    have an out of band system to terminate the process.

    The interface for the extension is ``Envoy::Server::Configuration::FatalAction``.
    ``FatalAction`` extensions live in the ``envoy.extensions.fatal_actions`` API
    namespace.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_FIELD_NUMBER: builtins.int
    @property
    def config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Extension specific configuration for the action. It's expected to conform
        to the ``Envoy::Server::Configuration::FatalAction`` interface.
        """

    def __init__(
        self,
        *,
        config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config", b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config", b"config"]) -> None: ...

global___FatalAction = FatalAction

@typing.final
class Runtime(google.protobuf.message.Message):
    """Runtime :ref:`configuration overview <config_runtime>` (deprecated)."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SYMLINK_ROOT_FIELD_NUMBER: builtins.int
    SUBDIRECTORY_FIELD_NUMBER: builtins.int
    OVERRIDE_SUBDIRECTORY_FIELD_NUMBER: builtins.int
    BASE_FIELD_NUMBER: builtins.int
    symlink_root: builtins.str
    """The implementation assumes that the file system tree is accessed via a
    symbolic link. An atomic link swap is used when a new tree should be
    switched to. This parameter specifies the path to the symbolic link. Envoy
    will watch the location for changes and reload the file system tree when
    they happen. If this parameter is not set, there will be no disk based
    runtime.
    """
    subdirectory: builtins.str
    """Specifies the subdirectory to load within the root directory. This is
    useful if multiple systems share the same delivery mechanism. Envoy
    configuration elements can be contained in a dedicated subdirectory.
    """
    override_subdirectory: builtins.str
    """Specifies an optional subdirectory to load within the root directory. If
    specified and the directory exists, configuration values within this
    directory will override those found in the primary subdirectory. This is
    useful when Envoy is deployed across many different types of servers.
    Sometimes it is useful to have a per service cluster directory for runtime
    configuration. See below for exactly how the override directory is used.
    """
    @property
    def base(self) -> google.protobuf.struct_pb2.Struct:
        """Static base runtime. This will be :ref:`overridden
        <config_runtime_layering>` by other runtime layers, e.g.
        disk or admin. This follows the :ref:`runtime protobuf JSON representation
        encoding <config_runtime_proto_json>`.
        """

    def __init__(
        self,
        *,
        symlink_root: builtins.str = ...,
        subdirectory: builtins.str = ...,
        override_subdirectory: builtins.str = ...,
        base: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["base", b"base"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["base", b"base", "override_subdirectory", b"override_subdirectory", "subdirectory", b"subdirectory", "symlink_root", b"symlink_root"]) -> None: ...

global___Runtime = Runtime

@typing.final
class RuntimeLayer(google.protobuf.message.Message):
    """[#next-free-field: 6]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class DiskLayer(google.protobuf.message.Message):
        """:ref:`Disk runtime <config_runtime_local_disk>` layer."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SYMLINK_ROOT_FIELD_NUMBER: builtins.int
        SUBDIRECTORY_FIELD_NUMBER: builtins.int
        APPEND_SERVICE_CLUSTER_FIELD_NUMBER: builtins.int
        symlink_root: builtins.str
        """The implementation assumes that the file system tree is accessed via a
        symbolic link. An atomic link swap is used when a new tree should be
        switched to. This parameter specifies the path to the symbolic link.
        Envoy will watch the location for changes and reload the file system tree
        when they happen. See documentation on runtime :ref:`atomicity
        <config_runtime_atomicity>` for further details on how reloads are
        treated.
        """
        subdirectory: builtins.str
        """Specifies the subdirectory to load within the root directory. This is
        useful if multiple systems share the same delivery mechanism. Envoy
        configuration elements can be contained in a dedicated subdirectory.
        """
        append_service_cluster: builtins.bool
        """:ref:`Append <config_runtime_local_disk_service_cluster_subdirs>` the
        service cluster to the path under symlink root.
        """
        def __init__(
            self,
            *,
            symlink_root: builtins.str = ...,
            subdirectory: builtins.str = ...,
            append_service_cluster: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["append_service_cluster", b"append_service_cluster", "subdirectory", b"subdirectory", "symlink_root", b"symlink_root"]) -> None: ...

    @typing.final
    class AdminLayer(google.protobuf.message.Message):
        """:ref:`Admin console runtime <config_runtime_admin>` layer."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class RtdsLayer(google.protobuf.message.Message):
        """:ref:`Runtime Discovery Service (RTDS) <config_runtime_rtds>` layer."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        RTDS_CONFIG_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Resource to subscribe to at ``rtds_config`` for the RTDS layer."""
        @property
        def rtds_config(self) -> envoy.config.core.v3.config_source_pb2.ConfigSource:
            """RTDS configuration source."""

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            rtds_config: envoy.config.core.v3.config_source_pb2.ConfigSource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["rtds_config", b"rtds_config"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["name", b"name", "rtds_config", b"rtds_config"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    STATIC_LAYER_FIELD_NUMBER: builtins.int
    DISK_LAYER_FIELD_NUMBER: builtins.int
    ADMIN_LAYER_FIELD_NUMBER: builtins.int
    RTDS_LAYER_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Descriptive name for the runtime layer. This is only used for the runtime
    :http:get:`/runtime` output.
    """
    @property
    def static_layer(self) -> google.protobuf.struct_pb2.Struct:
        """:ref:`Static runtime <config_runtime_bootstrap>` layer.
        This follows the :ref:`runtime protobuf JSON representation encoding
        <config_runtime_proto_json>`. Unlike static xDS resources, this static
        layer is overridable by later layers in the runtime virtual filesystem.
        """

    @property
    def disk_layer(self) -> global___RuntimeLayer.DiskLayer: ...
    @property
    def admin_layer(self) -> global___RuntimeLayer.AdminLayer: ...
    @property
    def rtds_layer(self) -> global___RuntimeLayer.RtdsLayer: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        static_layer: google.protobuf.struct_pb2.Struct | None = ...,
        disk_layer: global___RuntimeLayer.DiskLayer | None = ...,
        admin_layer: global___RuntimeLayer.AdminLayer | None = ...,
        rtds_layer: global___RuntimeLayer.RtdsLayer | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["admin_layer", b"admin_layer", "disk_layer", b"disk_layer", "layer_specifier", b"layer_specifier", "rtds_layer", b"rtds_layer", "static_layer", b"static_layer"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["admin_layer", b"admin_layer", "disk_layer", b"disk_layer", "layer_specifier", b"layer_specifier", "name", b"name", "rtds_layer", b"rtds_layer", "static_layer", b"static_layer"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["layer_specifier", b"layer_specifier"]) -> typing.Literal["static_layer", "disk_layer", "admin_layer", "rtds_layer"] | None: ...

global___RuntimeLayer = RuntimeLayer

@typing.final
class LayeredRuntime(google.protobuf.message.Message):
    """Runtime :ref:`configuration overview <config_runtime>`."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LAYERS_FIELD_NUMBER: builtins.int
    @property
    def layers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RuntimeLayer]:
        """The :ref:`layers <config_runtime_layering>` of the runtime. This is ordered
        such that later layers in the list overlay earlier entries.
        """

    def __init__(
        self,
        *,
        layers: collections.abc.Iterable[global___RuntimeLayer] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["layers", b"layers"]) -> None: ...

global___LayeredRuntime = LayeredRuntime

@typing.final
class CustomInlineHeader(google.protobuf.message.Message):
    """Used to specify the header that needs to be registered as an inline header.

    If request or response contain multiple headers with the same name and the header
    name is registered as an inline header. Then multiple headers will be folded
    into one, and multiple header values will be concatenated by a suitable delimiter.
    The delimiter is generally a comma.

    For example, if 'foo' is registered as an inline header, and the headers contains
    the following two headers:

    .. code-block:: text

      foo: bar
      foo: eep

    Then they will eventually be folded into:

    .. code-block:: text

      foo: bar, eep

    Inline headers provide O(1) search performance, but each inline header imposes
    an additional memory overhead on all instances of the corresponding type of
    HeaderMap or TrailerMap.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _InlineHeaderType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _InlineHeaderTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CustomInlineHeader._InlineHeaderType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        REQUEST_HEADER: CustomInlineHeader._InlineHeaderType.ValueType  # 0
        REQUEST_TRAILER: CustomInlineHeader._InlineHeaderType.ValueType  # 1
        RESPONSE_HEADER: CustomInlineHeader._InlineHeaderType.ValueType  # 2
        RESPONSE_TRAILER: CustomInlineHeader._InlineHeaderType.ValueType  # 3

    class InlineHeaderType(_InlineHeaderType, metaclass=_InlineHeaderTypeEnumTypeWrapper): ...
    REQUEST_HEADER: CustomInlineHeader.InlineHeaderType.ValueType  # 0
    REQUEST_TRAILER: CustomInlineHeader.InlineHeaderType.ValueType  # 1
    RESPONSE_HEADER: CustomInlineHeader.InlineHeaderType.ValueType  # 2
    RESPONSE_TRAILER: CustomInlineHeader.InlineHeaderType.ValueType  # 3

    INLINE_HEADER_NAME_FIELD_NUMBER: builtins.int
    INLINE_HEADER_TYPE_FIELD_NUMBER: builtins.int
    inline_header_name: builtins.str
    """The name of the header that is expected to be set as the inline header."""
    inline_header_type: global___CustomInlineHeader.InlineHeaderType.ValueType
    """The type of the header that is expected to be set as the inline header."""
    def __init__(
        self,
        *,
        inline_header_name: builtins.str = ...,
        inline_header_type: global___CustomInlineHeader.InlineHeaderType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["inline_header_name", b"inline_header_name", "inline_header_type", b"inline_header_type"]) -> None: ...

global___CustomInlineHeader = CustomInlineHeader
