"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.address_pb2
import envoy.config.core.v3.base_pb2
import envoy.config.core.v3.config_source_pb2
import envoy.config.core.v3.health_check_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Endpoint(google.protobuf.message.Message):
    """[#protodoc-title: Endpoints]

    Upstream host identifier.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class HealthCheckConfig(google.protobuf.message.Message):
        """The optional health check configuration."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PORT_VALUE_FIELD_NUMBER: builtins.int
        HOSTNAME_FIELD_NUMBER: builtins.int
        ADDRESS_FIELD_NUMBER: builtins.int
        DISABLE_ACTIVE_HEALTH_CHECK_FIELD_NUMBER: builtins.int
        port_value: builtins.int
        """Optional alternative health check port value.

        By default the health check address port of an upstream host is the same
        as the host's serving address port. This provides an alternative health
        check port. Setting this with a non-zero value allows an upstream host
        to have different health check address port.
        """
        hostname: builtins.str
        """By default, the host header for L7 health checks is controlled by cluster level configuration
        (see: :ref:`host <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.host>` and
        :ref:`authority <envoy_v3_api_field_config.core.v3.HealthCheck.GrpcHealthCheck.authority>`). Setting this
        to a non-empty value allows overriding the cluster level configuration for a specific
        endpoint.
        """
        disable_active_health_check: builtins.bool
        """Optional flag to control if perform active health check for this endpoint.
        Active health check is enabled by default if there is a health checker.
        """
        @property
        def address(self) -> envoy.config.core.v3.address_pb2.Address:
            """Optional alternative health check host address.

            .. attention::

              The form of the health check host address is expected to be a direct IP address.
            """

        def __init__(
            self,
            *,
            port_value: builtins.int = ...,
            hostname: builtins.str = ...,
            address: envoy.config.core.v3.address_pb2.Address | None = ...,
            disable_active_health_check: builtins.bool = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["address", b"address"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["address", b"address", "disable_active_health_check", b"disable_active_health_check", "hostname", b"hostname", "port_value", b"port_value"]) -> None: ...

    ADDRESS_FIELD_NUMBER: builtins.int
    HEALTH_CHECK_CONFIG_FIELD_NUMBER: builtins.int
    HOSTNAME_FIELD_NUMBER: builtins.int
    hostname: builtins.str
    """The hostname associated with this endpoint. This hostname is not used for routing or address
    resolution. If provided, it will be associated with the endpoint, and can be used for features
    that require a hostname, like
    :ref:`auto_host_rewrite <envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>`.
    """
    @property
    def address(self) -> envoy.config.core.v3.address_pb2.Address:
        """The upstream host address.

        .. attention::

          The form of host address depends on the given cluster type. For STATIC or EDS,
          it is expected to be a direct IP address (or something resolvable by the
          specified :ref:`resolver <envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name>`
          in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,
          and will be resolved via DNS.
        """

    @property
    def health_check_config(self) -> global___Endpoint.HealthCheckConfig:
        """The optional health check configuration is used as configuration for the
        health checker to contact the health checked host.

        .. attention::

          This takes into effect only for upstream clusters with
          :ref:`active health checking <arch_overview_health_checking>` enabled.
        """

    def __init__(
        self,
        *,
        address: envoy.config.core.v3.address_pb2.Address | None = ...,
        health_check_config: global___Endpoint.HealthCheckConfig | None = ...,
        hostname: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["address", b"address", "health_check_config", b"health_check_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["address", b"address", "health_check_config", b"health_check_config", "hostname", b"hostname"]) -> None: ...

global___Endpoint = Endpoint

@typing.final
class LbEndpoint(google.protobuf.message.Message):
    """An Endpoint that Envoy can route traffic to.
    [#next-free-field: 6]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENDPOINT_FIELD_NUMBER: builtins.int
    ENDPOINT_NAME_FIELD_NUMBER: builtins.int
    HEALTH_STATUS_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    LOAD_BALANCING_WEIGHT_FIELD_NUMBER: builtins.int
    endpoint_name: builtins.str
    """[#not-implemented-hide:]"""
    health_status: envoy.config.core.v3.health_check_pb2.HealthStatus.ValueType
    """Optional health status when known and supplied by EDS server."""
    @property
    def endpoint(self) -> global___Endpoint: ...
    @property
    def metadata(self) -> envoy.config.core.v3.base_pb2.Metadata:
        """The endpoint metadata specifies values that may be used by the load
        balancer to select endpoints in a cluster for a given request. The filter
        name should be specified as ``envoy.lb``. An example boolean key-value pair
        is ``canary``, providing the optional canary status of the upstream host.
        This may be matched against in a route's
        :ref:`RouteAction <envoy_v3_api_msg_config.route.v3.RouteAction>` metadata_match field
        to subset the endpoints considered in cluster load balancing.
        """

    @property
    def load_balancing_weight(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """The optional load balancing weight of the upstream host; at least 1.
        Envoy uses the load balancing weight in some of the built in load
        balancers. The load balancing weight for an endpoint is divided by the sum
        of the weights of all endpoints in the endpoint's locality to produce a
        percentage of traffic for the endpoint. This percentage is then further
        weighted by the endpoint's locality's load balancing weight from
        LocalityLbEndpoints. If unspecified, will be treated as 1. The sum
        of the weights of all endpoints in the endpoint's locality must not
        exceed uint32_t maximal value (4294967295).
        """

    def __init__(
        self,
        *,
        endpoint: global___Endpoint | None = ...,
        endpoint_name: builtins.str = ...,
        health_status: envoy.config.core.v3.health_check_pb2.HealthStatus.ValueType = ...,
        metadata: envoy.config.core.v3.base_pb2.Metadata | None = ...,
        load_balancing_weight: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["endpoint", b"endpoint", "endpoint_name", b"endpoint_name", "host_identifier", b"host_identifier", "load_balancing_weight", b"load_balancing_weight", "metadata", b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["endpoint", b"endpoint", "endpoint_name", b"endpoint_name", "health_status", b"health_status", "host_identifier", b"host_identifier", "load_balancing_weight", b"load_balancing_weight", "metadata", b"metadata"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["host_identifier", b"host_identifier"]) -> typing.Literal["endpoint", "endpoint_name"] | None: ...

global___LbEndpoint = LbEndpoint

@typing.final
class LedsClusterLocalityConfig(google.protobuf.message.Message):
    """[#not-implemented-hide:]
    A configuration for a LEDS collection.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LEDS_CONFIG_FIELD_NUMBER: builtins.int
    LEDS_COLLECTION_NAME_FIELD_NUMBER: builtins.int
    leds_collection_name: builtins.str
    """The xDS transport protocol glob collection resource name.
    The service is only supported in delta xDS (incremental) mode.
    """
    @property
    def leds_config(self) -> envoy.config.core.v3.config_source_pb2.ConfigSource:
        """Configuration for the source of LEDS updates for a Locality."""

    def __init__(
        self,
        *,
        leds_config: envoy.config.core.v3.config_source_pb2.ConfigSource | None = ...,
        leds_collection_name: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["leds_config", b"leds_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["leds_collection_name", b"leds_collection_name", "leds_config", b"leds_config"]) -> None: ...

global___LedsClusterLocalityConfig = LedsClusterLocalityConfig

@typing.final
class LocalityLbEndpoints(google.protobuf.message.Message):
    """A group of endpoints belonging to a Locality.
    One can have multiple LocalityLbEndpoints for a locality, but only if
    they have different priorities.
    [#next-free-field: 9]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class LbEndpointList(google.protobuf.message.Message):
        """[#not-implemented-hide:]
        A list of endpoints of a specific locality.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LB_ENDPOINTS_FIELD_NUMBER: builtins.int
        @property
        def lb_endpoints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LbEndpoint]: ...
        def __init__(
            self,
            *,
            lb_endpoints: collections.abc.Iterable[global___LbEndpoint] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["lb_endpoints", b"lb_endpoints"]) -> None: ...

    LOCALITY_FIELD_NUMBER: builtins.int
    LB_ENDPOINTS_FIELD_NUMBER: builtins.int
    LOAD_BALANCER_ENDPOINTS_FIELD_NUMBER: builtins.int
    LEDS_CLUSTER_LOCALITY_CONFIG_FIELD_NUMBER: builtins.int
    LOAD_BALANCING_WEIGHT_FIELD_NUMBER: builtins.int
    PRIORITY_FIELD_NUMBER: builtins.int
    PROXIMITY_FIELD_NUMBER: builtins.int
    priority: builtins.int
    """Optional: the priority for this LocalityLbEndpoints. If unspecified this will
    default to the highest priority (0).

    Under usual circumstances, Envoy will only select endpoints for the highest
    priority (0). In the event all endpoints for a particular priority are
    unavailable/unhealthy, Envoy will fail over to selecting endpoints for the
    next highest priority group.

    Priorities should range from 0 (highest) to N (lowest) without skipping.
    """
    @property
    def locality(self) -> envoy.config.core.v3.base_pb2.Locality:
        """Identifies location of where the upstream hosts run."""

    @property
    def lb_endpoints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LbEndpoint]:
        """The group of endpoints belonging to the locality specified.
        [#comment:TODO(adisuissa): Once LEDS is implemented this field needs to be
        deprecated and replaced by ``load_balancer_endpoints``.]
        """

    @property
    def load_balancer_endpoints(self) -> global___LocalityLbEndpoints.LbEndpointList:
        """The group of endpoints belonging to the locality.
        [#comment:TODO(adisuissa): Once LEDS is implemented the ``lb_endpoints`` field
        needs to be deprecated.]
        """

    @property
    def leds_cluster_locality_config(self) -> global___LedsClusterLocalityConfig:
        """LEDS Configuration for the current locality."""

    @property
    def load_balancing_weight(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Optional: Per priority/region/zone/sub_zone weight; at least 1. The load
        balancing weight for a locality is divided by the sum of the weights of all
        localities  at the same priority level to produce the effective percentage
        of traffic for the locality. The sum of the weights of all localities at
        the same priority level must not exceed uint32_t maximal value (4294967295).

        Locality weights are only considered when :ref:`locality weighted load
        balancing <arch_overview_load_balancing_locality_weighted_lb>` is
        configured. These weights are ignored otherwise. If no weights are
        specified when locality weighted load balancing is enabled, the locality is
        assigned no load.
        """

    @property
    def proximity(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """Optional: Per locality proximity value which indicates how close this
        locality is from the source locality. This value only provides ordering
        information (lower the value, closer it is to the source locality).
        This will be consumed by load balancing schemes that need proximity order
        to determine where to route the requests.
        [#not-implemented-hide:]
        """

    def __init__(
        self,
        *,
        locality: envoy.config.core.v3.base_pb2.Locality | None = ...,
        lb_endpoints: collections.abc.Iterable[global___LbEndpoint] | None = ...,
        load_balancer_endpoints: global___LocalityLbEndpoints.LbEndpointList | None = ...,
        leds_cluster_locality_config: global___LedsClusterLocalityConfig | None = ...,
        load_balancing_weight: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        priority: builtins.int = ...,
        proximity: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lb_config", b"lb_config", "leds_cluster_locality_config", b"leds_cluster_locality_config", "load_balancer_endpoints", b"load_balancer_endpoints", "load_balancing_weight", b"load_balancing_weight", "locality", b"locality", "proximity", b"proximity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lb_config", b"lb_config", "lb_endpoints", b"lb_endpoints", "leds_cluster_locality_config", b"leds_cluster_locality_config", "load_balancer_endpoints", b"load_balancer_endpoints", "load_balancing_weight", b"load_balancing_weight", "locality", b"locality", "priority", b"priority", "proximity", b"proximity"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["lb_config", b"lb_config"]) -> typing.Literal["load_balancer_endpoints", "leds_cluster_locality_config"] | None: ...

global___LocalityLbEndpoints = LocalityLbEndpoints
