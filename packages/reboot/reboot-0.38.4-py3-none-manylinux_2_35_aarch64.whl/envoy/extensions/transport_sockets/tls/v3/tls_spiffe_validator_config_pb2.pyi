"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.base_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class SPIFFECertValidatorConfig(google.protobuf.message.Message):
    """[#protodoc-title: SPIFFE Certificate Validator]
    [#extension: envoy.tls.cert_validator.spiffe]

    Configuration specific to the `SPIFFE <https://github.com/spiffe/spiffe>`_ certificate validator.

    Example:

    .. validated-code-block:: yaml
      :type-name: envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext

      custom_validator_config:
        name: envoy.tls.cert_validator.spiffe
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig
          trust_domains:
          - name: foo.com
            trust_bundle:
              filename: "foo.pem"
          - name: envoy.com
            trust_bundle:
              filename: "envoy.pem"

    In this example, a presented peer certificate whose SAN matches ``spiffe://foo.com/**`` is validated against
    the "foo.pem" x.509 certificate. All the trust bundles are isolated from each other, so no trust domain can mint
    a SVID belonging to another trust domain. That means, in this example, a SVID signed by ``envoy.com``'s CA with ``spiffe://foo.com/**``
    SAN would be rejected since Envoy selects the trust bundle according to the presented SAN before validate the certificate.

    Note that SPIFFE validator inherits and uses the following options from :ref:`CertificateValidationContext <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.CertificateValidationContext>`.

    - :ref:`allow_expired_certificate <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.allow_expired_certificate>` to allow expired certificates.
    - :ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>` to match **URI** SAN of certificates. Unlike the default validator, SPIFFE validator only matches **URI** SAN (which equals to SVID in SPIFFE terminology) and ignore other SAN types.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class TrustDomain(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        TRUST_BUNDLE_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Name of the trust domain, ``example.com``, ``foo.bar.gov`` for example.
        Note that this must *not* have "spiffe://" prefix.
        """
        @property
        def trust_bundle(self) -> envoy.config.core.v3.base_pb2.DataSource:
            """Specify a data source holding x.509 trust bundle used for validating incoming SVID(s) in this trust domain."""

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            trust_bundle: envoy.config.core.v3.base_pb2.DataSource | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["trust_bundle", b"trust_bundle"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["name", b"name", "trust_bundle", b"trust_bundle"]) -> None: ...

    TRUST_DOMAINS_FIELD_NUMBER: builtins.int
    @property
    def trust_domains(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SPIFFECertValidatorConfig.TrustDomain]:
        """This field specifies trust domains used for validating incoming X.509-SVID(s)."""

    def __init__(
        self,
        *,
        trust_domains: collections.abc.Iterable[global___SPIFFECertValidatorConfig.TrustDomain] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["trust_domains", b"trust_domains"]) -> None: ...

global___SPIFFECertValidatorConfig = SPIFFECertValidatorConfig
