# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.std.presence.subscriber.v1 import subscriber_pb2 as rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2


class SubscriberMethodsStub(object):
    """//////////////////////////////////////////////////////////////////////

    *
    Used to manage a "subscriber", e.g., a user in a browser tab.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/rbt.std.presence.subscriber.v1.SubscriberMethods/Create',
                request_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.CreateRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.CreateResponse.FromString,
                _registered_method=True)
        self.Connect = channel.unary_unary(
                '/rbt.std.presence.subscriber.v1.SubscriberMethods/Connect',
                request_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ConnectRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.Toggle = channel.unary_unary(
                '/rbt.std.presence.subscriber.v1.SubscriberMethods/Toggle',
                request_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ToggleRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ToggleResponse.FromString,
                _registered_method=True)
        self.WaitForDisconnect = channel.unary_unary(
                '/rbt.std.presence.subscriber.v1.SubscriberMethods/WaitForDisconnect',
                request_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.WaitForDisconnectRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.WaitForDisconnectResponse.FromString,
                _registered_method=True)
        self.Status = channel.unary_unary(
                '/rbt.std.presence.subscriber.v1.SubscriberMethods/Status',
                request_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.StatusRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.StatusResponse.FromString,
                _registered_method=True)


class SubscriberMethodsServicer(object):
    """//////////////////////////////////////////////////////////////////////

    *
    Used to manage a "subscriber", e.g., a user in a browser tab.
    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """*
        Used to initiate a subscription, this method runs indefinitely in
        order to detect when the subscriber is not longer present due
        to the method call (RPC) being cancelled, e.g., when a user closes
        the browser tab.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Toggle(self, request, context):
        """*
        Increments `toggles` by 1 if `Connect()` was successful. Raises an error if
        `Connect()` has not yet been called.

        If `toggles` is successfully incremented, the `WaitForDisconnect` workflow
        is also scheduled.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitForDisconnect(self, request, context):
        """*
        Waits indefinitely until connection is closed, i.e., the
        subscriber is not longer present.

        Decrements `toggles` by 1 once it declares that the connection
        has been closed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """*
        Returns whether the subscriber is still present.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscriberMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.CreateRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.CreateResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ConnectRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ConnectResponse.SerializeToString,
            ),
            'Toggle': grpc.unary_unary_rpc_method_handler(
                    servicer.Toggle,
                    request_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ToggleRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ToggleResponse.SerializeToString,
            ),
            'WaitForDisconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitForDisconnect,
                    request_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.WaitForDisconnectRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.WaitForDisconnectResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.StatusRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.std.presence.subscriber.v1.SubscriberMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.std.presence.subscriber.v1.SubscriberMethods', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SubscriberMethods(object):
    """//////////////////////////////////////////////////////////////////////

    *
    Used to manage a "subscriber", e.g., a user in a browser tab.
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.subscriber.v1.SubscriberMethods/Create',
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.CreateRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.CreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.subscriber.v1.SubscriberMethods/Connect',
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ConnectRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Toggle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.subscriber.v1.SubscriberMethods/Toggle',
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ToggleRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.ToggleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WaitForDisconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.subscriber.v1.SubscriberMethods/WaitForDisconnect',
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.WaitForDisconnectRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.WaitForDisconnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.subscriber.v1.SubscriberMethods/Status',
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.StatusRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_subscriber_dot_v1_dot_subscriber__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
