"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
To build this proto with bazel, the proto and bazel rule must be in the same
package, which means that the proto file must have a package declaration
matching the Bazel workspace's folder structure.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.descriptor_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ListenForPlanRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ListenForPlanRequest = ListenForPlanRequest

@typing.final
class ListenForPlanResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PLAN_FIELD_NUMBER: builtins.int
    CONSENSUSES_FIELD_NUMBER: builtins.int
    @property
    def plan(self) -> global___Plan: ...
    @property
    def consensuses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Consensus]:
        """TODO: drop the following field here. Instead, have a stand-alone service
              that tracks consensuses (and other things, like shards).
        """

    def __init__(
        self,
        *,
        plan: global___Plan | None = ...,
        consensuses: collections.abc.Iterable[global___Consensus] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["plan", b"plan"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["consensuses", b"consensuses", "plan", b"plan"]) -> None: ...

global___ListenForPlanResponse = ListenForPlanResponse

@typing.final
class Plan(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Application(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class Service(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            FULL_NAME_FIELD_NUMBER: builtins.int
            STATE_TYPE_FULL_NAME_FIELD_NUMBER: builtins.int
            full_name: builtins.str
            """The fully qualified name of the service. E.g. "hello.v1.HelloMethods"."""
            state_type_full_name: builtins.str
            """The fully qualified name of the state hosting this service; E.g.
            "hello.v1.Hello". May be empty if the service is a legacy gRPC service.
            """
            def __init__(
                self,
                *,
                full_name: builtins.str = ...,
                state_type_full_name: builtins.str = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing.Literal["full_name", b"full_name", "state_type_full_name", b"state_type_full_name"]) -> None: ...

        @typing.final
        class Shard(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            @typing.final
            class KeyRange(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                FIRST_KEY_FIELD_NUMBER: builtins.int
                first_key: builtins.bytes
                """Inclusive."""
                def __init__(
                    self,
                    *,
                    first_key: builtins.bytes = ...,
                ) -> None: ...
                def ClearField(self, field_name: typing.Literal["first_key", b"first_key"]) -> None: ...

            ID_FIELD_NUMBER: builtins.int
            RANGE_FIELD_NUMBER: builtins.int
            CONSENSUS_ID_FIELD_NUMBER: builtins.int
            id: builtins.str
            consensus_id: builtins.str
            @property
            def range(self) -> global___Plan.Application.Shard.KeyRange: ...
            def __init__(
                self,
                *,
                id: builtins.str = ...,
                range: global___Plan.Application.Shard.KeyRange | None = ...,
                consensus_id: builtins.str = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["range", b"range"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["consensus_id", b"consensus_id", "id", b"id", "range", b"range"]) -> None: ...

        ID_FIELD_NUMBER: builtins.int
        SERVICES_FIELD_NUMBER: builtins.int
        SHARDS_FIELD_NUMBER: builtins.int
        id: builtins.str
        @property
        def services(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Plan.Application.Service]: ...
        @property
        def shards(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Plan.Application.Shard]:
            """Sorted by `range.first_key`."""

        def __init__(
            self,
            *,
            id: builtins.str = ...,
            services: collections.abc.Iterable[global___Plan.Application.Service] | None = ...,
            shards: collections.abc.Iterable[global___Plan.Application.Shard] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["id", b"id", "services", b"services", "shards", b"shards"]) -> None: ...

    VERSION_FIELD_NUMBER: builtins.int
    APPLICATIONS_FIELD_NUMBER: builtins.int
    version: builtins.int
    """This version must strictly increase from plan to plan."""
    @property
    def applications(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Plan.Application]: ...
    def __init__(
        self,
        *,
        version: builtins.int = ...,
        applications: collections.abc.Iterable[global___Plan.Application] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["applications", b"applications", "version", b"version"]) -> None: ...

global___Plan = Plan

@typing.final
class Consensus(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Address(google.protobuf.message.Message):
        """TODO: consider consolidating with Respect's NetworkAddress?"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        HOST_FIELD_NUMBER: builtins.int
        PORT_FIELD_NUMBER: builtins.int
        host: builtins.str
        """E.g. "c1234.mynamespace.svc.cluster.local", or "localhost"."""
        port: builtins.int
        def __init__(
            self,
            *,
            host: builtins.str = ...,
            port: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["host", b"host", "port", b"port"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    APPLICATION_ID_FIELD_NUMBER: builtins.int
    REVISION_NUMBER_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    FILE_DESCRIPTOR_SET_FIELD_NUMBER: builtins.int
    id: builtins.str
    """E.g. "c1234". Matches `ShardAssignment.consensus_id`."""
    application_id: builtins.str
    revision_number: builtins.int
    namespace: builtins.str
    """The kubernetes namespace in which the consensus lives. Unused if not on
    kubernetes.
    """
    @property
    def address(self) -> global___Consensus.Address:
        """The routable address for this consensus."""

    @property
    def file_descriptor_set(self) -> google.protobuf.descriptor_pb2.FileDescriptorSet:
        """`FileDescriptorSet` for this consensus."""

    def __init__(
        self,
        *,
        id: builtins.str = ...,
        application_id: builtins.str = ...,
        revision_number: builtins.int = ...,
        address: global___Consensus.Address | None = ...,
        namespace: builtins.str = ...,
        file_descriptor_set: google.protobuf.descriptor_pb2.FileDescriptorSet | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["address", b"address", "file_descriptor_set", b"file_descriptor_set"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["address", b"address", "application_id", b"application_id", "file_descriptor_set", b"file_descriptor_set", "id", b"id", "namespace", b"namespace", "revision_number", b"revision_number"]) -> None: ...

global___Consensus = Consensus
