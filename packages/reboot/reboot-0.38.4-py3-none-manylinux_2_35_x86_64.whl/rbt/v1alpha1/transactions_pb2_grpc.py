# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.v1alpha1 import transactions_pb2 as rbt_dot_v1alpha1_dot_transactions__pb2


class ParticipantStub(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Prepare = channel.unary_unary(
                '/rbt.v1alpha1.Participant/Prepare',
                request_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.PrepareRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.PrepareResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/rbt.v1alpha1.Participant/Commit',
                request_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.CommitRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Abort = channel.unary_unary(
                '/rbt.v1alpha1.Participant/Abort',
                request_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.AbortRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.AbortResponse.FromString,
                _registered_method=True)


class ParticipantServicer(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParticipantServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.PrepareRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.PrepareResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.CommitRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.CommitResponse.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.AbortRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.AbortResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.v1alpha1.Participant', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.v1alpha1.Participant', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Participant(object):
    """//////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Participant/Prepare',
            rbt_dot_v1alpha1_dot_transactions__pb2.PrepareRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_transactions__pb2.PrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Participant/Commit',
            rbt_dot_v1alpha1_dot_transactions__pb2.CommitRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_transactions__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Participant/Abort',
            rbt_dot_v1alpha1_dot_transactions__pb2.AbortRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_transactions__pb2.AbortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CoordinatorStub(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Watch = channel.unary_unary(
                '/rbt.v1alpha1.Coordinator/Watch',
                request_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.WatchRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.WatchResponse.FromString,
                _registered_method=True)


class CoordinatorServicer(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Watch': grpc.unary_unary_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=rbt_dot_v1alpha1_dot_transactions__pb2.WatchRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_transactions__pb2.WatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.v1alpha1.Coordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.v1alpha1.Coordinator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Coordinator(object):
    """//////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Coordinator/Watch',
            rbt_dot_v1alpha1_dot_transactions__pb2.WatchRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_transactions__pb2.WatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
