# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.thirdparty.mailgun.v1 import mailgun_pb2 as rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2


class MessageMethodsStub(object):
    """//////////////////////////////////////////////////////////////////////

    *
    A single message sent using the integration.

    Created and scheduled using its constructor: `await Message.Send(...)`.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send = channel.unary_unary(
                '/rbt.thirdparty.mailgun.v1.MessageMethods/Send',
                request_serializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendRequest.SerializeToString,
                response_deserializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendResponse.FromString,
                _registered_method=True)
        self.SendWorkflow = channel.unary_unary(
                '/rbt.thirdparty.mailgun.v1.MessageMethods/SendWorkflow',
                request_serializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendWorkflowRequest.SerializeToString,
                response_deserializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendWorkflowResponse.FromString,
                _registered_method=True)


class MessageMethodsServicer(object):
    """//////////////////////////////////////////////////////////////////////

    *
    A single message sent using the integration.

    Created and scheduled using its constructor: `await Message.Send(...)`.
    """

    def Send(self, request, context):
        """*
        Construct and send an email message using the Mailgun API.

        Returns a `task_id` which can be used for the message to have
        been sent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendWorkflow(self, request, context):
        """/ PRIVATE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendRequest.FromString,
                    response_serializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendResponse.SerializeToString,
            ),
            'SendWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.SendWorkflow,
                    request_deserializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendWorkflowRequest.FromString,
                    response_serializer=rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendWorkflowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.thirdparty.mailgun.v1.MessageMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.thirdparty.mailgun.v1.MessageMethods', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessageMethods(object):
    """//////////////////////////////////////////////////////////////////////

    *
    A single message sent using the integration.

    Created and scheduled using its constructor: `await Message.Send(...)`.
    """

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.thirdparty.mailgun.v1.MessageMethods/Send',
            rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendRequest.SerializeToString,
            rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.thirdparty.mailgun.v1.MessageMethods/SendWorkflow',
            rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendWorkflowRequest.SerializeToString,
            rbt_dot_thirdparty_dot_mailgun_dot_v1_dot_mailgun__pb2.SendWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
