"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Int64Range(google.protobuf.message.Message):
    """[#protodoc-title: Number range]

    Specifies the int64 start and end of the range using half-open interval
    semantics [start, end).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    start: builtins.int
    """start of the range (inclusive)"""
    end: builtins.int
    """end of the range (exclusive)"""
    def __init__(
        self,
        *,
        start: builtins.int = ...,
        end: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["end", b"end", "start", b"start"]) -> None: ...

global___Int64Range = Int64Range

@typing.final
class Int32Range(google.protobuf.message.Message):
    """Specifies the int32 start and end of the range using half-open interval
    semantics [start, end).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    start: builtins.int
    """start of the range (inclusive)"""
    end: builtins.int
    """end of the range (exclusive)"""
    def __init__(
        self,
        *,
        start: builtins.int = ...,
        end: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["end", b"end", "start", b"start"]) -> None: ...

global___Int32Range = Int32Range

@typing.final
class DoubleRange(google.protobuf.message.Message):
    """Specifies the double start and end of the range using half-open interval
    semantics [start, end).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    start: builtins.float
    """start of the range (inclusive)"""
    end: builtins.float
    """end of the range (exclusive)"""
    def __init__(
        self,
        *,
        start: builtins.float = ...,
        end: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["end", b"end", "start", b"start"]) -> None: ...

global___DoubleRange = DoubleRange
