"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import xds.type.matcher.v3.matcher_pb2
import xds.type.v3.range_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Int64RangeMatcher(google.protobuf.message.Message):
    """[#protodoc-title: Range matcher]

    Specifies a set of ranges for matching an int64 number and the associated
    match actions.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class RangeMatcher(google.protobuf.message.Message):
        """Specifies a list of number ranges and a match action."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        RANGES_FIELD_NUMBER: builtins.int
        ON_MATCH_FIELD_NUMBER: builtins.int
        @property
        def ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[xds.type.v3.range_pb2.Int64Range]:
            """A non-empty set of int64 ranges."""

        @property
        def on_match(self) -> xds.type.matcher.v3.matcher_pb2.Matcher.OnMatch:
            """Match action to apply when the input number is within one of the ranges."""

        def __init__(
            self,
            *,
            ranges: collections.abc.Iterable[xds.type.v3.range_pb2.Int64Range] | None = ...,
            on_match: xds.type.matcher.v3.matcher_pb2.Matcher.OnMatch | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["on_match", b"on_match"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["on_match", b"on_match", "ranges", b"ranges"]) -> None: ...

    RANGE_MATCHERS_FIELD_NUMBER: builtins.int
    @property
    def range_matchers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Int64RangeMatcher.RangeMatcher]:
        """Match a number by a list of number ranges. If multiple ranges contain the
        input number, then the first action in this list is taken.
        """

    def __init__(
        self,
        *,
        range_matchers: collections.abc.Iterable[global___Int64RangeMatcher.RangeMatcher] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["range_matchers", b"range_matchers"]) -> None: ...

global___Int64RangeMatcher = Int64RangeMatcher

@typing.final
class Int32RangeMatcher(google.protobuf.message.Message):
    """Specifies a set of ranges for matching an int32 number and the associated
    match actions.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class RangeMatcher(google.protobuf.message.Message):
        """Specifies a list of number ranges and a match action."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        RANGES_FIELD_NUMBER: builtins.int
        ON_MATCH_FIELD_NUMBER: builtins.int
        @property
        def ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[xds.type.v3.range_pb2.Int32Range]:
            """A non-empty set of int32 ranges."""

        @property
        def on_match(self) -> xds.type.matcher.v3.matcher_pb2.Matcher.OnMatch:
            """Match action to apply when the input number is within one of the ranges."""

        def __init__(
            self,
            *,
            ranges: collections.abc.Iterable[xds.type.v3.range_pb2.Int32Range] | None = ...,
            on_match: xds.type.matcher.v3.matcher_pb2.Matcher.OnMatch | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["on_match", b"on_match"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["on_match", b"on_match", "ranges", b"ranges"]) -> None: ...

    RANGE_MATCHERS_FIELD_NUMBER: builtins.int
    @property
    def range_matchers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Int32RangeMatcher.RangeMatcher]:
        """Match a number by a list of number ranges. If multiple ranges contain the
        input number, then the first action in this list is taken.
        """

    def __init__(
        self,
        *,
        range_matchers: collections.abc.Iterable[global___Int32RangeMatcher.RangeMatcher] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["range_matchers", b"range_matchers"]) -> None: ...

global___Int32RangeMatcher = Int32RangeMatcher

@typing.final
class DoubleRangeMatcher(google.protobuf.message.Message):
    """Specifies a set of ranges for matching a double number and the associated
    match actions.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class RangeMatcher(google.protobuf.message.Message):
        """Specifies a list of number ranges and a match action."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        RANGES_FIELD_NUMBER: builtins.int
        ON_MATCH_FIELD_NUMBER: builtins.int
        @property
        def ranges(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[xds.type.v3.range_pb2.DoubleRange]:
            """A non-empty set of double ranges."""

        @property
        def on_match(self) -> xds.type.matcher.v3.matcher_pb2.Matcher.OnMatch:
            """Match action to apply when the input number is within one of the ranges."""

        def __init__(
            self,
            *,
            ranges: collections.abc.Iterable[xds.type.v3.range_pb2.DoubleRange] | None = ...,
            on_match: xds.type.matcher.v3.matcher_pb2.Matcher.OnMatch | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["on_match", b"on_match"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["on_match", b"on_match", "ranges", b"ranges"]) -> None: ...

    RANGE_MATCHERS_FIELD_NUMBER: builtins.int
    @property
    def range_matchers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DoubleRangeMatcher.RangeMatcher]:
        """Match a number by a list of number ranges. If multiple ranges contain the
        input number, then the first action in this list is taken.
        """

    def __init__(
        self,
        *,
        range_matchers: collections.abc.Iterable[global___DoubleRangeMatcher.RangeMatcher] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["range_matchers", b"range_matchers"]) -> None: ...

global___DoubleRangeMatcher = DoubleRangeMatcher
