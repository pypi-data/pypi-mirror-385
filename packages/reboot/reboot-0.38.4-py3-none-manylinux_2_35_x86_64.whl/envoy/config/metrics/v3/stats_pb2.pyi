"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.address_pb2
import envoy.type.matcher.v3.string_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class StatsSink(google.protobuf.message.Message):
    """[#protodoc-title: Stats]
    Statistics :ref:`architecture overview <arch_overview_statistics>`.

    Configuration for pluggable stats sinks.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TYPED_CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the stats sink to instantiate. The name must match a supported
    stats sink.
    See the :ref:`extensions listed in typed_config below <extension_category_envoy.stats_sinks>` for the default list of available stats sink.
    Sinks optionally support tagged/multiple dimensional metrics.
    """
    @property
    def typed_config(self) -> google.protobuf.any_pb2.Any: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        typed_config: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config_type", b"config_type", "typed_config", b"typed_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config_type", b"config_type", "name", b"name", "typed_config", b"typed_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["config_type", b"config_type"]) -> typing.Literal["typed_config"] | None: ...

global___StatsSink = StatsSink

@typing.final
class StatsConfig(google.protobuf.message.Message):
    """Statistics configuration such as tagging."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATS_TAGS_FIELD_NUMBER: builtins.int
    USE_ALL_DEFAULT_TAGS_FIELD_NUMBER: builtins.int
    STATS_MATCHER_FIELD_NUMBER: builtins.int
    HISTOGRAM_BUCKET_SETTINGS_FIELD_NUMBER: builtins.int
    @property
    def stats_tags(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TagSpecifier]:
        """Each stat name is independently processed through these tag specifiers. When a tag is
        matched, the first capture group is not immediately removed from the name, so later
        :ref:`TagSpecifiers <envoy_v3_api_msg_config.metrics.v3.TagSpecifier>` can also match that
        same portion of the match. After all tag matching is complete, a tag-extracted version of
        the name is produced and is used in stats sinks that represent tags, such as Prometheus.
        """

    @property
    def use_all_default_tags(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Use all default tag regexes specified in Envoy. These can be combined with
        custom tags specified in :ref:`stats_tags
        <envoy_v3_api_field_config.metrics.v3.StatsConfig.stats_tags>`. They will be processed before
        the custom tags.

        .. note::

          If any default tags are specified twice, the config will be considered
          invalid.

        See :repo:`well_known_names.h <source/common/config/well_known_names.h>` for a list of the
        default tags in Envoy.

        If not provided, the value is assumed to be true.
        """

    @property
    def stats_matcher(self) -> global___StatsMatcher:
        """Inclusion/exclusion matcher for stat name creation. If not provided, all stats are instantiated
        as normal. Preventing the instantiation of certain families of stats can improve memory
        performance for Envoys running especially large configs.

        .. warning::
          Excluding stats may affect Envoy's behavior in undocumented ways. See
          `issue #8771 <https://github.com/envoyproxy/envoy/issues/8771>`_ for more information.
          If any unexpected behavior changes are observed, please open a new issue immediately.
        """

    @property
    def histogram_bucket_settings(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___HistogramBucketSettings]:
        """Defines rules for setting the histogram buckets. Rules are evaluated in order, and the first
        match is applied. If no match is found (or if no rules are set), the following default buckets
        are used:

          .. code-block:: json

            [
              0.5,
              1,
              5,
              10,
              25,
              50,
              100,
              250,
              500,
              1000,
              2500,
              5000,
              10000,
              30000,
              60000,
              300000,
              600000,
              1800000,
              3600000
            ]
        """

    def __init__(
        self,
        *,
        stats_tags: collections.abc.Iterable[global___TagSpecifier] | None = ...,
        use_all_default_tags: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        stats_matcher: global___StatsMatcher | None = ...,
        histogram_bucket_settings: collections.abc.Iterable[global___HistogramBucketSettings] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["stats_matcher", b"stats_matcher", "use_all_default_tags", b"use_all_default_tags"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["histogram_bucket_settings", b"histogram_bucket_settings", "stats_matcher", b"stats_matcher", "stats_tags", b"stats_tags", "use_all_default_tags", b"use_all_default_tags"]) -> None: ...

global___StatsConfig = StatsConfig

@typing.final
class StatsMatcher(google.protobuf.message.Message):
    """Configuration for disabling stat instantiation.
    The instantiation of stats is unrestricted by default. If the goal is to configure Envoy to
    instantiate all stats, there is no need to construct a StatsMatcher.

    However, StatsMatcher can be used to limit the creation of families of stats in order to
    conserve memory. Stats can either be disabled entirely, or they can be
    limited by either an exclusion or an inclusion list of :ref:`StringMatcher
    <envoy_v3_api_msg_type.matcher.v3.StringMatcher>` protos:

    * If ``reject_all`` is set to `true`, no stats will be instantiated. If ``reject_all`` is set to
      `false`, all stats will be instantiated.

    * If an exclusion list is supplied, any stat name matching *any* of the StringMatchers in the
      list will not instantiate.

    * If an inclusion list is supplied, no stats will instantiate, except those matching *any* of
      the StringMatchers in the list.


    A StringMatcher can be used to match against an exact string, a suffix / prefix, or a regex.
    **NB:** For performance reasons, it is highly recommended to use a prefix- or suffix-based
    matcher rather than a regex-based matcher.

    Example 1. Excluding all stats.

    .. code-block:: json

      {
        "statsMatcher": {
          "rejectAll": "true"
        }
      }

    Example 2. Excluding all cluster-specific stats, but not cluster-manager stats:

    .. code-block:: json

      {
        "statsMatcher": {
          "exclusionList": {
            "patterns": [
              {
                "prefix": "cluster."
              }
            ]
          }
        }
      }

    Example 3. Including only manager-related stats:

    .. code-block:: json

      {
        "statsMatcher": {
          "inclusionList": {
            "patterns": [
              {
                "prefix": "cluster_manager."
              },
              {
                "prefix": "listener_manager."
              }
            ]
          }
        }
      }
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REJECT_ALL_FIELD_NUMBER: builtins.int
    EXCLUSION_LIST_FIELD_NUMBER: builtins.int
    INCLUSION_LIST_FIELD_NUMBER: builtins.int
    reject_all: builtins.bool
    """If ``reject_all`` is true, then all stats are disabled. If ``reject_all`` is false, then all
    stats are enabled.
    """
    @property
    def exclusion_list(self) -> envoy.type.matcher.v3.string_pb2.ListStringMatcher:
        """Exclusive match. All stats are enabled except for those matching one of the supplied
        StringMatcher protos.
        """

    @property
    def inclusion_list(self) -> envoy.type.matcher.v3.string_pb2.ListStringMatcher:
        """Inclusive match. No stats are enabled except for those matching one of the supplied
        StringMatcher protos.
        """

    def __init__(
        self,
        *,
        reject_all: builtins.bool = ...,
        exclusion_list: envoy.type.matcher.v3.string_pb2.ListStringMatcher | None = ...,
        inclusion_list: envoy.type.matcher.v3.string_pb2.ListStringMatcher | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exclusion_list", b"exclusion_list", "inclusion_list", b"inclusion_list", "reject_all", b"reject_all", "stats_matcher", b"stats_matcher"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exclusion_list", b"exclusion_list", "inclusion_list", b"inclusion_list", "reject_all", b"reject_all", "stats_matcher", b"stats_matcher"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["stats_matcher", b"stats_matcher"]) -> typing.Literal["reject_all", "exclusion_list", "inclusion_list"] | None: ...

global___StatsMatcher = StatsMatcher

@typing.final
class TagSpecifier(google.protobuf.message.Message):
    """Designates a tag name and value pair. The value may be either a fixed value
    or a regex providing the value via capture groups. The specified tag will be
    unconditionally set if a fixed value, otherwise it will only be set if one
    or more capture groups in the regex match.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAG_NAME_FIELD_NUMBER: builtins.int
    REGEX_FIELD_NUMBER: builtins.int
    FIXED_VALUE_FIELD_NUMBER: builtins.int
    tag_name: builtins.str
    """Attaches an identifier to the tag values to identify the tag being in the
    sink. Envoy has a set of default names and regexes to extract dynamic
    portions of existing stats, which can be found in :repo:`well_known_names.h
    <source/common/config/well_known_names.h>` in the Envoy repository. If a :ref:`tag_name
    <envoy_v3_api_field_config.metrics.v3.TagSpecifier.tag_name>` is provided in the config and
    neither :ref:`regex <envoy_v3_api_field_config.metrics.v3.TagSpecifier.regex>` or
    :ref:`fixed_value <envoy_v3_api_field_config.metrics.v3.TagSpecifier.fixed_value>` were specified,
    Envoy will attempt to find that name in its set of defaults and use the accompanying regex.

    .. note::

      A stat name may be spelled in such a way that it matches two different
      tag extractors for the same tag name. In that case, all but one of the
      tag values will be dropped. It is not specified which tag value will be
      retained. The extraction will only occur for one of the extractors, and
      only the matched extraction will be removed from the tag name.
    """
    regex: builtins.str
    """Designates a tag to strip from the tag extracted name and provide as a named
    tag value for all statistics. This will only occur if any part of the name
    matches the regex provided with one or more capture groups.

    The first capture group identifies the portion of the name to remove. The
    second capture group (which will normally be nested inside the first) will
    designate the value of the tag for the statistic. If no second capture
    group is provided, the first will also be used to set the value of the tag.
    All other capture groups will be ignored.

    Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
    one tag specifier:

    .. code-block:: json

      {
        "tag_name": "envoy.cluster_name",
        "regex": "^cluster\\\\.((.+?)\\\\.)"
      }

    Note that the regex will remove ``foo_cluster.`` making the tag extracted
    name ``cluster.upstream_rq_timeout`` and the tag value for
    ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
    ``.`` character because of the second capture group).

    Example 2. a stat name
    ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
    tag specifiers:

    .. code-block:: json

      [
        {
          "tag_name": "envoy.http_user_agent",
          "regex": "^http(?=\\\\.).*?\\\\.user_agent\\\\.((.+?)\\\\.)\\\\w+?$"
        },
        {
          "tag_name": "envoy.http_conn_manager_prefix",
          "regex": "^http\\\\.((.*?)\\\\.)"
        }
      ]

    The two regexes of the specifiers will be processed from the elaborated
    stat name.

    The first regex will save ``ios.`` as the tag value for ``envoy.http_user_agent``. It will
    leave it in the name for potential matching with additional tag specifiers. After all tag
    specifiers are processed the tags will be removed from the name.

    The second regex will populate tag ``envoy.http_conn_manager_prefix`` with value
    ``connection_manager_1.``, based on the original stat name.

    As a final step, the matched tags are removed, leaving
    ``http.user_agent.downstream_cx_total`` as the tag extracted name.
    """
    fixed_value: builtins.str
    """Specifies a fixed tag value for the ``tag_name``."""
    def __init__(
        self,
        *,
        tag_name: builtins.str = ...,
        regex: builtins.str = ...,
        fixed_value: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fixed_value", b"fixed_value", "regex", b"regex", "tag_value", b"tag_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fixed_value", b"fixed_value", "regex", b"regex", "tag_name", b"tag_name", "tag_value", b"tag_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["tag_value", b"tag_value"]) -> typing.Literal["regex", "fixed_value"] | None: ...

global___TagSpecifier = TagSpecifier

@typing.final
class HistogramBucketSettings(google.protobuf.message.Message):
    """Specifies a matcher for stats and the buckets that matching stats should use."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MATCH_FIELD_NUMBER: builtins.int
    BUCKETS_FIELD_NUMBER: builtins.int
    @property
    def match(self) -> envoy.type.matcher.v3.string_pb2.StringMatcher:
        """The stats that this rule applies to. The match is applied to the original stat name
        before tag-extraction, for example ``cluster.exampleclustername.upstream_cx_length_ms``.
        """

    @property
    def buckets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Each value is the upper bound of a bucket. Each bucket must be greater than 0 and unique.
        The order of the buckets does not matter.
        """

    def __init__(
        self,
        *,
        match: envoy.type.matcher.v3.string_pb2.StringMatcher | None = ...,
        buckets: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["match", b"match"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["buckets", b"buckets", "match", b"match"]) -> None: ...

global___HistogramBucketSettings = HistogramBucketSettings

@typing.final
class StatsdSink(google.protobuf.message.Message):
    """Stats configuration proto schema for built-in ``envoy.stat_sinks.statsd`` sink. This sink does not support
    tagged metrics.
    [#extension: envoy.stat_sinks.statsd]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADDRESS_FIELD_NUMBER: builtins.int
    TCP_CLUSTER_NAME_FIELD_NUMBER: builtins.int
    PREFIX_FIELD_NUMBER: builtins.int
    tcp_cluster_name: builtins.str
    """The name of a cluster that is running a TCP `statsd
    <https://github.com/etsy/statsd>`_ compliant listener. If specified,
    Envoy will connect to this cluster to flush statistics.
    """
    prefix: builtins.str
    """Optional custom prefix for StatsdSink. If
    specified, this will override the default prefix.
    For example:

    .. code-block:: json

      {
        "prefix" : "envoy-prod"
      }

    will change emitted stats to

    .. code-block:: cpp

      envoy-prod.test_counter:1|c
      envoy-prod.test_timer:5|ms

    Note that the default prefix, "envoy", will be used if a prefix is not
    specified.

    Stats with default prefix:

    .. code-block:: cpp

      envoy.test_counter:1|c
      envoy.test_timer:5|ms
    """
    @property
    def address(self) -> envoy.config.core.v3.address_pb2.Address:
        """The UDP address of a running `statsd <https://github.com/etsy/statsd>`_
        compliant listener. If specified, statistics will be flushed to this
        address.
        """

    def __init__(
        self,
        *,
        address: envoy.config.core.v3.address_pb2.Address | None = ...,
        tcp_cluster_name: builtins.str = ...,
        prefix: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["address", b"address", "statsd_specifier", b"statsd_specifier", "tcp_cluster_name", b"tcp_cluster_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["address", b"address", "prefix", b"prefix", "statsd_specifier", b"statsd_specifier", "tcp_cluster_name", b"tcp_cluster_name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["statsd_specifier", b"statsd_specifier"]) -> typing.Literal["address", "tcp_cluster_name"] | None: ...

global___StatsdSink = StatsdSink

@typing.final
class DogStatsdSink(google.protobuf.message.Message):
    """Stats configuration proto schema for built-in ``envoy.stat_sinks.dog_statsd`` sink.
    The sink emits stats with `DogStatsD <https://docs.datadoghq.com/guides/dogstatsd/>`_
    compatible tags. Tags are configurable via :ref:`StatsConfig
    <envoy_v3_api_msg_config.metrics.v3.StatsConfig>`.
    [#extension: envoy.stat_sinks.dog_statsd]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADDRESS_FIELD_NUMBER: builtins.int
    PREFIX_FIELD_NUMBER: builtins.int
    MAX_BYTES_PER_DATAGRAM_FIELD_NUMBER: builtins.int
    prefix: builtins.str
    """Optional custom metric name prefix. See :ref:`StatsdSink's prefix field
    <envoy_v3_api_field_config.metrics.v3.StatsdSink.prefix>` for more details.
    """
    @property
    def address(self) -> envoy.config.core.v3.address_pb2.Address:
        """The UDP address of a running DogStatsD compliant listener. If specified,
        statistics will be flushed to this address.
        """

    @property
    def max_bytes_per_datagram(self) -> google.protobuf.wrappers_pb2.UInt64Value:
        """Optional max datagram size to use when sending UDP messages. By default Envoy
        will emit one metric per datagram. By specifying a max-size larger than a single
        metric, Envoy will emit multiple, new-line separated metrics. The max datagram
        size should not exceed your network's MTU.

        Note that this value may not be respected if smaller than a single metric.
        """

    def __init__(
        self,
        *,
        address: envoy.config.core.v3.address_pb2.Address | None = ...,
        prefix: builtins.str = ...,
        max_bytes_per_datagram: google.protobuf.wrappers_pb2.UInt64Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["address", b"address", "dog_statsd_specifier", b"dog_statsd_specifier", "max_bytes_per_datagram", b"max_bytes_per_datagram"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["address", b"address", "dog_statsd_specifier", b"dog_statsd_specifier", "max_bytes_per_datagram", b"max_bytes_per_datagram", "prefix", b"prefix"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["dog_statsd_specifier", b"dog_statsd_specifier"]) -> typing.Literal["address"] | None: ...

global___DogStatsdSink = DogStatsdSink

@typing.final
class HystrixSink(google.protobuf.message.Message):
    """Stats configuration proto schema for built-in ``envoy.stat_sinks.hystrix`` sink.
    The sink emits stats in `text/event-stream
    <https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events>`_
    formatted stream for use by `Hystrix dashboard
    <https://github.com/Netflix-Skunkworks/hystrix-dashboard/wiki>`_.

    Note that only a single HystrixSink should be configured.

    Streaming is started through an admin endpoint :http:get:`/hystrix_event_stream`.
    [#extension: envoy.stat_sinks.hystrix]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NUM_BUCKETS_FIELD_NUMBER: builtins.int
    num_buckets: builtins.int
    """The number of buckets the rolling statistical window is divided into.

    Each time the sink is flushed, all relevant Envoy statistics are sampled and
    added to the rolling window (removing the oldest samples in the window
    in the process). The sink then outputs the aggregate statistics across the
    current rolling window to the event stream(s).

    ``rolling_window(ms)`` = ``stats_flush_interval(ms)`` * ``num_of_buckets``

    More detailed explanation can be found in `Hystrix wiki
    <https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#hystrixrollingnumber>`_.
    """
    def __init__(
        self,
        *,
        num_buckets: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["num_buckets", b"num_buckets"]) -> None: ...

global___HystrixSink = HystrixSink
