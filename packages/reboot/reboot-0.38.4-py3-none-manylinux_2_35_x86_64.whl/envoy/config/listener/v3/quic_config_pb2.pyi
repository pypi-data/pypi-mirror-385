"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import envoy.config.core.v3.base_pb2
import envoy.config.core.v3.extension_pb2
import envoy.config.core.v3.protocol_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class QuicProtocolOptions(google.protobuf.message.Message):
    """[#protodoc-title: QUIC listener config]

    Configuration specific to the UDP QUIC listener.
    [#next-free-field: 10]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUIC_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
    IDLE_TIMEOUT_FIELD_NUMBER: builtins.int
    CRYPTO_HANDSHAKE_TIMEOUT_FIELD_NUMBER: builtins.int
    ENABLED_FIELD_NUMBER: builtins.int
    PACKETS_TO_READ_TO_CONNECTION_COUNT_RATIO_FIELD_NUMBER: builtins.int
    CRYPTO_STREAM_CONFIG_FIELD_NUMBER: builtins.int
    PROOF_SOURCE_CONFIG_FIELD_NUMBER: builtins.int
    CONNECTION_ID_GENERATOR_CONFIG_FIELD_NUMBER: builtins.int
    SERVER_PREFERRED_ADDRESS_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def quic_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.QuicProtocolOptions: ...
    @property
    def idle_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """Maximum number of milliseconds that connection will be alive when there is
        no network activity.

        If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
        """

    @property
    def crypto_handshake_timeout(self) -> google.protobuf.duration_pb2.Duration:
        """Connection timeout in milliseconds before the crypto handshake is finished.

        If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
        """

    @property
    def enabled(self) -> envoy.config.core.v3.base_pb2.RuntimeFeatureFlag:
        """Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
        to enabled.
        """

    @property
    def packets_to_read_to_connection_count_ratio(self) -> google.protobuf.wrappers_pb2.UInt32Value:
        """A multiplier to number of connections which is used to determine how many packets to read per
        event loop. A reasonable number should allow the listener to process enough payload but not
        starve TCP and other UDP sockets and also prevent long event loop duration.
        The default value is 32. This means if there are N QUIC connections, the total number of
        packets to read in each read event will be 32 * N.
        The actual number of packets to read in total by the UDP listener is also
        bound by 6000, regardless of this field or how many connections there are.
        """

    @property
    def crypto_stream_config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
        If not specified the :ref:`QUICHE default one configured by <envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig>` will be used.
        [#extension-category: envoy.quic.server.crypto_stream]
        """

    @property
    def proof_source_config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Configure which implementation of ``quic::ProofSource`` to be used for this listener.
        If not specified the :ref:`default one configured by <envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig>` will be used.
        [#extension-category: envoy.quic.proof_source]
        """

    @property
    def connection_id_generator_config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Config which implementation of ``quic::ConnectionIdGeneratorInterface`` to be used for this listener.
        If not specified the :ref:`default one configured by <envoy_v3_api_msg_extensions.quic.connection_id_generator.v3.DeterministicConnectionIdGeneratorConfig>` will be used.
        [#extension-category: envoy.quic.connection_id_generator]
        """

    @property
    def server_preferred_address_config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Configure the server's preferred address to advertise so that client can migrate to it. See :ref:`example <envoy_v3_api_msg_extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig>` which configures a pair of v4 and v6 preferred addresses.
        The current QUICHE implementation will advertise only one of the preferred IPv4 and IPv6 addresses based on the address family the client initially connects with, and only if the client is also QUICHE-based.
        If not specified, Envoy will not advertise any server's preferred address.
        [#extension-category: envoy.quic.server_preferred_address]
        """

    def __init__(
        self,
        *,
        quic_protocol_options: envoy.config.core.v3.protocol_pb2.QuicProtocolOptions | None = ...,
        idle_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        crypto_handshake_timeout: google.protobuf.duration_pb2.Duration | None = ...,
        enabled: envoy.config.core.v3.base_pb2.RuntimeFeatureFlag | None = ...,
        packets_to_read_to_connection_count_ratio: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
        crypto_stream_config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        proof_source_config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        connection_id_generator_config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
        server_preferred_address_config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["connection_id_generator_config", b"connection_id_generator_config", "crypto_handshake_timeout", b"crypto_handshake_timeout", "crypto_stream_config", b"crypto_stream_config", "enabled", b"enabled", "idle_timeout", b"idle_timeout", "packets_to_read_to_connection_count_ratio", b"packets_to_read_to_connection_count_ratio", "proof_source_config", b"proof_source_config", "quic_protocol_options", b"quic_protocol_options", "server_preferred_address_config", b"server_preferred_address_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["connection_id_generator_config", b"connection_id_generator_config", "crypto_handshake_timeout", b"crypto_handshake_timeout", "crypto_stream_config", b"crypto_stream_config", "enabled", b"enabled", "idle_timeout", b"idle_timeout", "packets_to_read_to_connection_count_ratio", b"packets_to_read_to_connection_count_ratio", "proof_source_config", b"proof_source_config", "quic_protocol_options", b"quic_protocol_options", "server_preferred_address_config", b"server_preferred_address_config"]) -> None: ...

global___QuicProtocolOptions = QuicProtocolOptions
