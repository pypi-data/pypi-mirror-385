"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.base_pb2
import envoy.config.route.v3.route_components_pb2
import envoy.type.matcher.v3.metadata_pb2
import envoy.type.v3.percent_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class AccessLog(google.protobuf.message.Message):
    """[#protodoc-title: Common access log types]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    TYPED_CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the access log extension configuration."""
    @property
    def filter(self) -> global___AccessLogFilter:
        """Filter which is used to determine if the access log needs to be written."""

    @property
    def typed_config(self) -> google.protobuf.any_pb2.Any: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        filter: global___AccessLogFilter | None = ...,
        typed_config: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config_type", b"config_type", "filter", b"filter", "typed_config", b"typed_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config_type", b"config_type", "filter", b"filter", "name", b"name", "typed_config", b"typed_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["config_type", b"config_type"]) -> typing.Literal["typed_config"] | None: ...

global___AccessLog = AccessLog

@typing.final
class AccessLogFilter(google.protobuf.message.Message):
    """[#next-free-field: 13]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATUS_CODE_FILTER_FIELD_NUMBER: builtins.int
    DURATION_FILTER_FIELD_NUMBER: builtins.int
    NOT_HEALTH_CHECK_FILTER_FIELD_NUMBER: builtins.int
    TRACEABLE_FILTER_FIELD_NUMBER: builtins.int
    RUNTIME_FILTER_FIELD_NUMBER: builtins.int
    AND_FILTER_FIELD_NUMBER: builtins.int
    OR_FILTER_FIELD_NUMBER: builtins.int
    HEADER_FILTER_FIELD_NUMBER: builtins.int
    RESPONSE_FLAG_FILTER_FIELD_NUMBER: builtins.int
    GRPC_STATUS_FILTER_FIELD_NUMBER: builtins.int
    EXTENSION_FILTER_FIELD_NUMBER: builtins.int
    METADATA_FILTER_FIELD_NUMBER: builtins.int
    @property
    def status_code_filter(self) -> global___StatusCodeFilter:
        """Status code filter."""

    @property
    def duration_filter(self) -> global___DurationFilter:
        """Duration filter."""

    @property
    def not_health_check_filter(self) -> global___NotHealthCheckFilter:
        """Not health check filter."""

    @property
    def traceable_filter(self) -> global___TraceableFilter:
        """Traceable filter."""

    @property
    def runtime_filter(self) -> global___RuntimeFilter:
        """Runtime filter."""

    @property
    def and_filter(self) -> global___AndFilter:
        """And filter."""

    @property
    def or_filter(self) -> global___OrFilter:
        """Or filter."""

    @property
    def header_filter(self) -> global___HeaderFilter:
        """Header filter."""

    @property
    def response_flag_filter(self) -> global___ResponseFlagFilter:
        """Response flag filter."""

    @property
    def grpc_status_filter(self) -> global___GrpcStatusFilter:
        """gRPC status filter."""

    @property
    def extension_filter(self) -> global___ExtensionFilter:
        """Extension filter.
        [#extension-category: envoy.access_loggers.extension_filters]
        """

    @property
    def metadata_filter(self) -> global___MetadataFilter:
        """Metadata Filter"""

    def __init__(
        self,
        *,
        status_code_filter: global___StatusCodeFilter | None = ...,
        duration_filter: global___DurationFilter | None = ...,
        not_health_check_filter: global___NotHealthCheckFilter | None = ...,
        traceable_filter: global___TraceableFilter | None = ...,
        runtime_filter: global___RuntimeFilter | None = ...,
        and_filter: global___AndFilter | None = ...,
        or_filter: global___OrFilter | None = ...,
        header_filter: global___HeaderFilter | None = ...,
        response_flag_filter: global___ResponseFlagFilter | None = ...,
        grpc_status_filter: global___GrpcStatusFilter | None = ...,
        extension_filter: global___ExtensionFilter | None = ...,
        metadata_filter: global___MetadataFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["and_filter", b"and_filter", "duration_filter", b"duration_filter", "extension_filter", b"extension_filter", "filter_specifier", b"filter_specifier", "grpc_status_filter", b"grpc_status_filter", "header_filter", b"header_filter", "metadata_filter", b"metadata_filter", "not_health_check_filter", b"not_health_check_filter", "or_filter", b"or_filter", "response_flag_filter", b"response_flag_filter", "runtime_filter", b"runtime_filter", "status_code_filter", b"status_code_filter", "traceable_filter", b"traceable_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["and_filter", b"and_filter", "duration_filter", b"duration_filter", "extension_filter", b"extension_filter", "filter_specifier", b"filter_specifier", "grpc_status_filter", b"grpc_status_filter", "header_filter", b"header_filter", "metadata_filter", b"metadata_filter", "not_health_check_filter", b"not_health_check_filter", "or_filter", b"or_filter", "response_flag_filter", b"response_flag_filter", "runtime_filter", b"runtime_filter", "status_code_filter", b"status_code_filter", "traceable_filter", b"traceable_filter"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["filter_specifier", b"filter_specifier"]) -> typing.Literal["status_code_filter", "duration_filter", "not_health_check_filter", "traceable_filter", "runtime_filter", "and_filter", "or_filter", "header_filter", "response_flag_filter", "grpc_status_filter", "extension_filter", "metadata_filter"] | None: ...

global___AccessLogFilter = AccessLogFilter

@typing.final
class ComparisonFilter(google.protobuf.message.Message):
    """Filter on an integer comparison."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Op:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _OpEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ComparisonFilter._Op.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        EQ: ComparisonFilter._Op.ValueType  # 0
        """="""
        GE: ComparisonFilter._Op.ValueType  # 1
        """>="""
        LE: ComparisonFilter._Op.ValueType  # 2
        """<="""

    class Op(_Op, metaclass=_OpEnumTypeWrapper): ...
    EQ: ComparisonFilter.Op.ValueType  # 0
    """="""
    GE: ComparisonFilter.Op.ValueType  # 1
    """>="""
    LE: ComparisonFilter.Op.ValueType  # 2
    """<="""

    OP_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    op: global___ComparisonFilter.Op.ValueType
    """Comparison operator."""
    @property
    def value(self) -> envoy.config.core.v3.base_pb2.RuntimeUInt32:
        """Value to compare against."""

    def __init__(
        self,
        *,
        op: global___ComparisonFilter.Op.ValueType = ...,
        value: envoy.config.core.v3.base_pb2.RuntimeUInt32 | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["op", b"op", "value", b"value"]) -> None: ...

global___ComparisonFilter = ComparisonFilter

@typing.final
class StatusCodeFilter(google.protobuf.message.Message):
    """Filters on HTTP response/status code."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPARISON_FIELD_NUMBER: builtins.int
    @property
    def comparison(self) -> global___ComparisonFilter:
        """Comparison."""

    def __init__(
        self,
        *,
        comparison: global___ComparisonFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["comparison", b"comparison"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comparison", b"comparison"]) -> None: ...

global___StatusCodeFilter = StatusCodeFilter

@typing.final
class DurationFilter(google.protobuf.message.Message):
    """Filters on total request duration in milliseconds."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPARISON_FIELD_NUMBER: builtins.int
    @property
    def comparison(self) -> global___ComparisonFilter:
        """Comparison."""

    def __init__(
        self,
        *,
        comparison: global___ComparisonFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["comparison", b"comparison"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comparison", b"comparison"]) -> None: ...

global___DurationFilter = DurationFilter

@typing.final
class NotHealthCheckFilter(google.protobuf.message.Message):
    """Filters for requests that are not health check requests. A health check
    request is marked by the health check filter.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___NotHealthCheckFilter = NotHealthCheckFilter

@typing.final
class TraceableFilter(google.protobuf.message.Message):
    """Filters for requests that are traceable. See the tracing overview for more
    information on how a request becomes traceable.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___TraceableFilter = TraceableFilter

@typing.final
class RuntimeFilter(google.protobuf.message.Message):
    """Filters for random sampling of requests."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RUNTIME_KEY_FIELD_NUMBER: builtins.int
    PERCENT_SAMPLED_FIELD_NUMBER: builtins.int
    USE_INDEPENDENT_RANDOMNESS_FIELD_NUMBER: builtins.int
    runtime_key: builtins.str
    """Runtime key to get an optional overridden numerator for use in the
    ``percent_sampled`` field. If found in runtime, this value will replace the
    default numerator.
    """
    use_independent_randomness: builtins.bool
    """By default, sampling pivots on the header
    :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being
    present. If :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`
    is present, the filter will consistently sample across multiple hosts based
    on the runtime key value and the value extracted from
    :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is
    missing, or ``use_independent_randomness`` is set to true, the filter will
    randomly sample based on the runtime key value alone.
    ``use_independent_randomness`` can be used for logging kill switches within
    complex nested :ref:`AndFilter
    <envoy_v3_api_msg_config.accesslog.v3.AndFilter>` and :ref:`OrFilter
    <envoy_v3_api_msg_config.accesslog.v3.OrFilter>` blocks that are easier to
    reason about from a probability perspective (i.e., setting to true will
    cause the filter to behave like an independent random variable when
    composed within logical operator filters).
    """
    @property
    def percent_sampled(self) -> envoy.type.v3.percent_pb2.FractionalPercent:
        """The default sampling percentage. If not specified, defaults to 0% with
        denominator of 100.
        """

    def __init__(
        self,
        *,
        runtime_key: builtins.str = ...,
        percent_sampled: envoy.type.v3.percent_pb2.FractionalPercent | None = ...,
        use_independent_randomness: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["percent_sampled", b"percent_sampled"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["percent_sampled", b"percent_sampled", "runtime_key", b"runtime_key", "use_independent_randomness", b"use_independent_randomness"]) -> None: ...

global___RuntimeFilter = RuntimeFilter

@typing.final
class AndFilter(google.protobuf.message.Message):
    """Performs a logical “and” operation on the result of each filter in filters.
    Filters are evaluated sequentially and if one of them returns false, the
    filter returns false immediately.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AccessLogFilter]: ...
    def __init__(
        self,
        *,
        filters: collections.abc.Iterable[global___AccessLogFilter] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters"]) -> None: ...

global___AndFilter = AndFilter

@typing.final
class OrFilter(google.protobuf.message.Message):
    """Performs a logical “or” operation on the result of each individual filter.
    Filters are evaluated sequentially and if one of them returns true, the
    filter returns true immediately.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AccessLogFilter]: ...
    def __init__(
        self,
        *,
        filters: collections.abc.Iterable[global___AccessLogFilter] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters"]) -> None: ...

global___OrFilter = OrFilter

@typing.final
class HeaderFilter(google.protobuf.message.Message):
    """Filters requests based on the presence or value of a request header."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HEADER_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> envoy.config.route.v3.route_components_pb2.HeaderMatcher:
        """Only requests with a header which matches the specified HeaderMatcher will
        pass the filter check.
        """

    def __init__(
        self,
        *,
        header: envoy.config.route.v3.route_components_pb2.HeaderMatcher | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["header", b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["header", b"header"]) -> None: ...

global___HeaderFilter = HeaderFilter

@typing.final
class ResponseFlagFilter(google.protobuf.message.Message):
    """Filters requests that received responses with an Envoy response flag set.
    A list of the response flags can be found
    in the access log formatter
    :ref:`documentation<config_access_log_format_response_flags>`.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FLAGS_FIELD_NUMBER: builtins.int
    @property
    def flags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Only responses with the any of the flags listed in this field will be
        logged. This field is optional. If it is not specified, then any response
        flag will pass the filter check.
        """

    def __init__(
        self,
        *,
        flags: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["flags", b"flags"]) -> None: ...

global___ResponseFlagFilter = ResponseFlagFilter

@typing.final
class GrpcStatusFilter(google.protobuf.message.Message):
    """Filters gRPC requests based on their response status. If a gRPC status is not
    provided, the filter will infer the status from the HTTP status code.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Status:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[GrpcStatusFilter._Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        OK: GrpcStatusFilter._Status.ValueType  # 0
        CANCELED: GrpcStatusFilter._Status.ValueType  # 1
        UNKNOWN: GrpcStatusFilter._Status.ValueType  # 2
        INVALID_ARGUMENT: GrpcStatusFilter._Status.ValueType  # 3
        DEADLINE_EXCEEDED: GrpcStatusFilter._Status.ValueType  # 4
        NOT_FOUND: GrpcStatusFilter._Status.ValueType  # 5
        ALREADY_EXISTS: GrpcStatusFilter._Status.ValueType  # 6
        PERMISSION_DENIED: GrpcStatusFilter._Status.ValueType  # 7
        RESOURCE_EXHAUSTED: GrpcStatusFilter._Status.ValueType  # 8
        FAILED_PRECONDITION: GrpcStatusFilter._Status.ValueType  # 9
        ABORTED: GrpcStatusFilter._Status.ValueType  # 10
        OUT_OF_RANGE: GrpcStatusFilter._Status.ValueType  # 11
        UNIMPLEMENTED: GrpcStatusFilter._Status.ValueType  # 12
        INTERNAL: GrpcStatusFilter._Status.ValueType  # 13
        UNAVAILABLE: GrpcStatusFilter._Status.ValueType  # 14
        DATA_LOSS: GrpcStatusFilter._Status.ValueType  # 15
        UNAUTHENTICATED: GrpcStatusFilter._Status.ValueType  # 16

    class Status(_Status, metaclass=_StatusEnumTypeWrapper): ...
    OK: GrpcStatusFilter.Status.ValueType  # 0
    CANCELED: GrpcStatusFilter.Status.ValueType  # 1
    UNKNOWN: GrpcStatusFilter.Status.ValueType  # 2
    INVALID_ARGUMENT: GrpcStatusFilter.Status.ValueType  # 3
    DEADLINE_EXCEEDED: GrpcStatusFilter.Status.ValueType  # 4
    NOT_FOUND: GrpcStatusFilter.Status.ValueType  # 5
    ALREADY_EXISTS: GrpcStatusFilter.Status.ValueType  # 6
    PERMISSION_DENIED: GrpcStatusFilter.Status.ValueType  # 7
    RESOURCE_EXHAUSTED: GrpcStatusFilter.Status.ValueType  # 8
    FAILED_PRECONDITION: GrpcStatusFilter.Status.ValueType  # 9
    ABORTED: GrpcStatusFilter.Status.ValueType  # 10
    OUT_OF_RANGE: GrpcStatusFilter.Status.ValueType  # 11
    UNIMPLEMENTED: GrpcStatusFilter.Status.ValueType  # 12
    INTERNAL: GrpcStatusFilter.Status.ValueType  # 13
    UNAVAILABLE: GrpcStatusFilter.Status.ValueType  # 14
    DATA_LOSS: GrpcStatusFilter.Status.ValueType  # 15
    UNAUTHENTICATED: GrpcStatusFilter.Status.ValueType  # 16

    STATUSES_FIELD_NUMBER: builtins.int
    EXCLUDE_FIELD_NUMBER: builtins.int
    exclude: builtins.bool
    """If included and set to true, the filter will instead block all responses
    with a gRPC status or inferred gRPC status enumerated in statuses, and
    allow all other responses.
    """
    @property
    def statuses(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___GrpcStatusFilter.Status.ValueType]:
        """Logs only responses that have any one of the gRPC statuses in this field."""

    def __init__(
        self,
        *,
        statuses: collections.abc.Iterable[global___GrpcStatusFilter.Status.ValueType] | None = ...,
        exclude: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["exclude", b"exclude", "statuses", b"statuses"]) -> None: ...

global___GrpcStatusFilter = GrpcStatusFilter

@typing.final
class MetadataFilter(google.protobuf.message.Message):
    """Filters based on matching dynamic metadata.
    If the matcher path and key correspond to an existing key in dynamic
    metadata, the request is logged only if the matcher value is equal to the
    metadata value. If the matcher path and key *do not* correspond to an
    existing key in dynamic metadata, the request is logged only if
    match_if_key_not_found is "true" or unset.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MATCHER_FIELD_NUMBER: builtins.int
    MATCH_IF_KEY_NOT_FOUND_FIELD_NUMBER: builtins.int
    @property
    def matcher(self) -> envoy.type.matcher.v3.metadata_pb2.MetadataMatcher:
        """Matcher to check metadata for specified value. For example, to match on the
        access_log_hint metadata, set the filter to "envoy.common" and the path to
        "access_log_hint", and the value to "true".
        """

    @property
    def match_if_key_not_found(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Default result if the key does not exist in dynamic metadata: if unset or
        true, then log; if false, then don't log.
        """

    def __init__(
        self,
        *,
        matcher: envoy.type.matcher.v3.metadata_pb2.MetadataMatcher | None = ...,
        match_if_key_not_found: google.protobuf.wrappers_pb2.BoolValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["match_if_key_not_found", b"match_if_key_not_found", "matcher", b"matcher"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["match_if_key_not_found", b"match_if_key_not_found", "matcher", b"matcher"]) -> None: ...

global___MetadataFilter = MetadataFilter

@typing.final
class ExtensionFilter(google.protobuf.message.Message):
    """Extension filter is statically registered at runtime."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TYPED_CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the filter implementation to instantiate. The name must
    match a statically registered filter.
    """
    @property
    def typed_config(self) -> google.protobuf.any_pb2.Any: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        typed_config: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config_type", b"config_type", "typed_config", b"typed_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config_type", b"config_type", "name", b"name", "typed_config", b"typed_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["config_type", b"config_type"]) -> typing.Literal["typed_config"] | None: ...

global___ExtensionFilter = ExtensionFilter
