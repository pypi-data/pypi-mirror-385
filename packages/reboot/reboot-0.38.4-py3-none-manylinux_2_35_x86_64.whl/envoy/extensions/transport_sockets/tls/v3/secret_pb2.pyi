"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import envoy.config.core.v3.base_pb2
import envoy.config.core.v3.config_source_pb2
import envoy.extensions.transport_sockets.tls.v3.common_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class GenericSecret(google.protobuf.message.Message):
    """[#protodoc-title: Secrets configuration]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SECRET_FIELD_NUMBER: builtins.int
    @property
    def secret(self) -> envoy.config.core.v3.base_pb2.DataSource:
        """Secret of generic type and is available to filters."""

    def __init__(
        self,
        *,
        secret: envoy.config.core.v3.base_pb2.DataSource | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["secret", b"secret"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["secret", b"secret"]) -> None: ...

global___GenericSecret = GenericSecret

@typing.final
class SdsSecretConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    SDS_CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name by which the secret can be uniquely referred to. When both name and config are specified,
    then secret can be fetched and/or reloaded via SDS. When only name is specified, then secret
    will be loaded from static resources.
    """
    @property
    def sds_config(self) -> envoy.config.core.v3.config_source_pb2.ConfigSource: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        sds_config: envoy.config.core.v3.config_source_pb2.ConfigSource | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sds_config", b"sds_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "sds_config", b"sds_config"]) -> None: ...

global___SdsSecretConfig = SdsSecretConfig

@typing.final
class Secret(google.protobuf.message.Message):
    """[#next-free-field: 6]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TLS_CERTIFICATE_FIELD_NUMBER: builtins.int
    SESSION_TICKET_KEYS_FIELD_NUMBER: builtins.int
    VALIDATION_CONTEXT_FIELD_NUMBER: builtins.int
    GENERIC_SECRET_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to."""
    @property
    def tls_certificate(self) -> envoy.extensions.transport_sockets.tls.v3.common_pb2.TlsCertificate: ...
    @property
    def session_ticket_keys(self) -> envoy.extensions.transport_sockets.tls.v3.common_pb2.TlsSessionTicketKeys: ...
    @property
    def validation_context(self) -> envoy.extensions.transport_sockets.tls.v3.common_pb2.CertificateValidationContext: ...
    @property
    def generic_secret(self) -> global___GenericSecret: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        tls_certificate: envoy.extensions.transport_sockets.tls.v3.common_pb2.TlsCertificate | None = ...,
        session_ticket_keys: envoy.extensions.transport_sockets.tls.v3.common_pb2.TlsSessionTicketKeys | None = ...,
        validation_context: envoy.extensions.transport_sockets.tls.v3.common_pb2.CertificateValidationContext | None = ...,
        generic_secret: global___GenericSecret | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["generic_secret", b"generic_secret", "session_ticket_keys", b"session_ticket_keys", "tls_certificate", b"tls_certificate", "type", b"type", "validation_context", b"validation_context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["generic_secret", b"generic_secret", "name", b"name", "session_ticket_keys", b"session_ticket_keys", "tls_certificate", b"tls_certificate", "type", b"type", "validation_context", b"validation_context"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["tls_certificate", "session_ticket_keys", "validation_context", "generic_secret"] | None: ...

global___Secret = Secret
