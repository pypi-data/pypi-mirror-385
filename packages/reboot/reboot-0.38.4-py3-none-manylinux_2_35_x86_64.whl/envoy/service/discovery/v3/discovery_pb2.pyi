"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.base_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.rpc.status_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ResourceLocator(google.protobuf.message.Message):
    """[#protodoc-title: Common discovery API components]

    Specifies a resource to be subscribed to.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class DynamicParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DYNAMIC_PARAMETERS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The resource name to subscribe to."""
    @property
    def dynamic_parameters(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """A set of dynamic parameters used to match against the dynamic parameter
        constraints on the resource. This allows clients to select between
        multiple variants of the same resource.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        dynamic_parameters: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["dynamic_parameters", b"dynamic_parameters", "name", b"name"]) -> None: ...

global___ResourceLocator = ResourceLocator

@typing.final
class ResourceName(google.protobuf.message.Message):
    """Specifies a concrete resource name."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    DYNAMIC_PARAMETER_CONSTRAINTS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the resource."""
    @property
    def dynamic_parameter_constraints(self) -> global___DynamicParameterConstraints:
        """Dynamic parameter constraints associated with this resource. To be used by client-side caches
        (including xDS proxies) when matching subscribed resource locators.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        dynamic_parameter_constraints: global___DynamicParameterConstraints | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["dynamic_parameter_constraints", b"dynamic_parameter_constraints"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dynamic_parameter_constraints", b"dynamic_parameter_constraints", "name", b"name"]) -> None: ...

global___ResourceName = ResourceName

@typing.final
class DiscoveryRequest(google.protobuf.message.Message):
    """A DiscoveryRequest requests a set of versioned resources of the same type for
    a given Envoy node on some API.
    [#next-free-field: 8]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_INFO_FIELD_NUMBER: builtins.int
    NODE_FIELD_NUMBER: builtins.int
    RESOURCE_NAMES_FIELD_NUMBER: builtins.int
    RESOURCE_LOCATORS_FIELD_NUMBER: builtins.int
    TYPE_URL_FIELD_NUMBER: builtins.int
    RESPONSE_NONCE_FIELD_NUMBER: builtins.int
    ERROR_DETAIL_FIELD_NUMBER: builtins.int
    version_info: builtins.str
    """The version_info provided in the request messages will be the version_info
    received with the most recent successfully processed response or empty on
    the first request. It is expected that no new request is sent after a
    response is received until the Envoy instance is ready to ACK/NACK the new
    configuration. ACK/NACK takes place by returning the new API config version
    as applied or the previous API config version respectively. Each type_url
    (see below) has an independent version associated with it.
    """
    type_url: builtins.str
    """Type of the resource that is being requested, e.g.
    "type.googleapis.com/envoy.api.v2.ClusterLoadAssignment". This is implicit
    in requests made via singleton xDS APIs such as CDS, LDS, etc. but is
    required for ADS.
    """
    response_nonce: builtins.str
    """nonce corresponding to DiscoveryResponse being ACK/NACKed. See above
    discussion on version_info and the DiscoveryResponse nonce comment. This
    may be empty only if 1) this is a non-persistent-stream xDS such as HTTP,
    or 2) the client has not yet accepted an update in this xDS stream (unlike
    delta, where it is populated only for new explicit ACKs).
    """
    @property
    def node(self) -> envoy.config.core.v3.base_pb2.Node:
        """The node making the request."""

    @property
    def resource_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of resources to subscribe to, e.g. list of cluster names or a route
        configuration name. If this is empty, all resources for the API are
        returned. LDS/CDS may have empty resource_names, which will cause all
        resources for the Envoy instance to be returned. The LDS and CDS responses
        will then imply a number of resources that need to be fetched via EDS/RDS,
        which will be explicitly enumerated in resource_names.
        """

    @property
    def resource_locators(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ResourceLocator]:
        """[#not-implemented-hide:]
        Alternative to ``resource_names`` field that allows specifying dynamic
        parameters along with each resource name. Clients that populate this
        field must be able to handle responses from the server where resources
        are wrapped in a Resource message.
        Note that it is legal for a request to have some resources listed
        in ``resource_names`` and others in ``resource_locators``.
        """

    @property
    def error_detail(self) -> google.rpc.status_pb2.Status:
        """This is populated when the previous :ref:`DiscoveryResponse <envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse>`
        failed to update configuration. The ``message`` field in ``error_details`` provides the Envoy
        internal exception related to the failure. It is only intended for consumption during manual
        debugging, the string provided is not guaranteed to be stable across Envoy versions.
        """

    def __init__(
        self,
        *,
        version_info: builtins.str = ...,
        node: envoy.config.core.v3.base_pb2.Node | None = ...,
        resource_names: collections.abc.Iterable[builtins.str] | None = ...,
        resource_locators: collections.abc.Iterable[global___ResourceLocator] | None = ...,
        type_url: builtins.str = ...,
        response_nonce: builtins.str = ...,
        error_detail: google.rpc.status_pb2.Status | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error_detail", b"error_detail", "node", b"node"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error_detail", b"error_detail", "node", b"node", "resource_locators", b"resource_locators", "resource_names", b"resource_names", "response_nonce", b"response_nonce", "type_url", b"type_url", "version_info", b"version_info"]) -> None: ...

global___DiscoveryRequest = DiscoveryRequest

@typing.final
class DiscoveryResponse(google.protobuf.message.Message):
    """[#next-free-field: 7]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_INFO_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    CANARY_FIELD_NUMBER: builtins.int
    TYPE_URL_FIELD_NUMBER: builtins.int
    NONCE_FIELD_NUMBER: builtins.int
    CONTROL_PLANE_FIELD_NUMBER: builtins.int
    version_info: builtins.str
    """The version of the response data."""
    canary: builtins.bool
    """[#not-implemented-hide:]
    Canary is used to support two Envoy command line flags:

    * --terminate-on-canary-transition-failure. When set, Envoy is able to
      terminate if it detects that configuration is stuck at canary. Consider
      this example sequence of updates:
      - Management server applies a canary config successfully.
      - Management server rolls back to a production config.
      - Envoy rejects the new production config.
      Since there is no sensible way to continue receiving configuration
      updates, Envoy will then terminate and apply production config from a
      clean slate.
    * --dry-run-canary. When set, a canary response will never be applied, only
      validated via a dry run.
    """
    type_url: builtins.str
    """Type URL for resources. Identifies the xDS API when muxing over ADS.
    Must be consistent with the type_url in the 'resources' repeated Any (if non-empty).
    """
    nonce: builtins.str
    """For gRPC based subscriptions, the nonce provides a way to explicitly ack a
    specific DiscoveryResponse in a following DiscoveryRequest. Additional
    messages may have been sent by Envoy to the management server for the
    previous version on the stream prior to this DiscoveryResponse, that were
    unprocessed at response send time. The nonce allows the management server
    to ignore any further DiscoveryRequests for the previous version until a
    DiscoveryRequest bearing the nonce. The nonce is optional and is not
    required for non-stream based xDS implementations.
    """
    @property
    def resources(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.any_pb2.Any]:
        """The response resources. These resources are typed and depend on the API being called."""

    @property
    def control_plane(self) -> envoy.config.core.v3.base_pb2.ControlPlane:
        """The control plane instance that sent the response."""

    def __init__(
        self,
        *,
        version_info: builtins.str = ...,
        resources: collections.abc.Iterable[google.protobuf.any_pb2.Any] | None = ...,
        canary: builtins.bool = ...,
        type_url: builtins.str = ...,
        nonce: builtins.str = ...,
        control_plane: envoy.config.core.v3.base_pb2.ControlPlane | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["control_plane", b"control_plane"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["canary", b"canary", "control_plane", b"control_plane", "nonce", b"nonce", "resources", b"resources", "type_url", b"type_url", "version_info", b"version_info"]) -> None: ...

global___DiscoveryResponse = DiscoveryResponse

@typing.final
class DeltaDiscoveryRequest(google.protobuf.message.Message):
    """DeltaDiscoveryRequest and DeltaDiscoveryResponse are used in a new gRPC
    endpoint for Delta xDS.

    With Delta xDS, the DeltaDiscoveryResponses do not need to include a full
    snapshot of the tracked resources. Instead, DeltaDiscoveryResponses are a
    diff to the state of a xDS client.
    In Delta XDS there are per-resource versions, which allow tracking state at
    the resource granularity.
    An xDS Delta session is always in the context of a gRPC bidirectional
    stream. This allows the xDS server to keep track of the state of xDS clients
    connected to it.

    In Delta xDS the nonce field is required and used to pair
    DeltaDiscoveryResponse to a DeltaDiscoveryRequest ACK or NACK.
    Optionally, a response message level system_version_info is present for
    debugging purposes only.

    DeltaDiscoveryRequest plays two independent roles. Any DeltaDiscoveryRequest
    can be either or both of: [1] informing the server of what resources the
    client has gained/lost interest in (using resource_names_subscribe and
    resource_names_unsubscribe), or [2] (N)ACKing an earlier resource update from
    the server (using response_nonce, with presence of error_detail making it a NACK).
    Additionally, the first message (for a given type_url) of a reconnected gRPC stream
    has a third role: informing the server of the resources (and their versions)
    that the client already possesses, using the initial_resource_versions field.

    As with state-of-the-world, when multiple resource types are multiplexed (ADS),
    all requests/acknowledgments/updates are logically walled off by type_url:
    a Cluster ACK exists in a completely separate world from a prior Route NACK.
    In particular, initial_resource_versions being sent at the "start" of every
    gRPC stream actually entails a message for each type_url, each with its own
    initial_resource_versions.
    [#next-free-field: 10]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class InitialResourceVersionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NODE_FIELD_NUMBER: builtins.int
    TYPE_URL_FIELD_NUMBER: builtins.int
    RESOURCE_NAMES_SUBSCRIBE_FIELD_NUMBER: builtins.int
    RESOURCE_NAMES_UNSUBSCRIBE_FIELD_NUMBER: builtins.int
    RESOURCE_LOCATORS_SUBSCRIBE_FIELD_NUMBER: builtins.int
    RESOURCE_LOCATORS_UNSUBSCRIBE_FIELD_NUMBER: builtins.int
    INITIAL_RESOURCE_VERSIONS_FIELD_NUMBER: builtins.int
    RESPONSE_NONCE_FIELD_NUMBER: builtins.int
    ERROR_DETAIL_FIELD_NUMBER: builtins.int
    type_url: builtins.str
    """Type of the resource that is being requested, e.g.
    ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
    resources are only referenced via ``xds_resource_subscribe`` and
    ``xds_resources_unsubscribe``.
    """
    response_nonce: builtins.str
    """When the DeltaDiscoveryRequest is a ACK or NACK message in response
    to a previous DeltaDiscoveryResponse, the response_nonce must be the
    nonce in the DeltaDiscoveryResponse.
    Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
    """
    @property
    def node(self) -> envoy.config.core.v3.base_pb2.Node:
        """The node making the request."""

    @property
    def resource_names_subscribe(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """DeltaDiscoveryRequests allow the client to add or remove individual
        resources to the set of tracked resources in the context of a stream.
        All resource names in the resource_names_subscribe list are added to the
        set of tracked resources and all resource names in the resource_names_unsubscribe
        list are removed from the set of tracked resources.

        *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
        resource_names_unsubscribe list simply means that no resources are to be
        added or removed to the resource list.
        *Like* state-of-the-world xDS, the server must send updates for all tracked
        resources, but can also send updates for resources the client has not subscribed to.

        NOTE: the server must respond with all resources listed in resource_names_subscribe,
        even if it believes the client has the most recent version of them. The reason:
        the client may have dropped them, but then regained interest before it had a chance
        to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.

        These two fields can be set in any DeltaDiscoveryRequest, including ACKs
        and initial_resource_versions.

        A list of Resource names to add to the list of tracked resources.
        """

    @property
    def resource_names_unsubscribe(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of Resource names to remove from the list of tracked resources."""

    @property
    def resource_locators_subscribe(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ResourceLocator]:
        """[#not-implemented-hide:]
        Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
        along with each resource name.
        Note that it is legal for a request to have some resources listed
        in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
        """

    @property
    def resource_locators_unsubscribe(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ResourceLocator]:
        """[#not-implemented-hide:]
        Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
        along with each resource name.
        Note that it is legal for a request to have some resources listed
        in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
        """

    @property
    def initial_resource_versions(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Informs the server of the versions of the resources the xDS client knows of, to enable the
        client to continue the same logical xDS session even in the face of gRPC stream reconnection.
        It will not be populated: [1] in the very first stream of a session, since the client will
        not yet have any resources,  [2] in any message after the first in a stream (for a given
        type_url), since the server will already be correctly tracking the client's state.
        (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
        The map's keys are names of xDS resources known to the xDS client.
        The map's values are opaque resource versions.
        """

    @property
    def error_detail(self) -> google.rpc.status_pb2.Status:
        """This is populated when the previous :ref:`DiscoveryResponse <envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse>`
        failed to update configuration. The ``message`` field in ``error_details``
        provides the Envoy internal exception related to the failure.
        """

    def __init__(
        self,
        *,
        node: envoy.config.core.v3.base_pb2.Node | None = ...,
        type_url: builtins.str = ...,
        resource_names_subscribe: collections.abc.Iterable[builtins.str] | None = ...,
        resource_names_unsubscribe: collections.abc.Iterable[builtins.str] | None = ...,
        resource_locators_subscribe: collections.abc.Iterable[global___ResourceLocator] | None = ...,
        resource_locators_unsubscribe: collections.abc.Iterable[global___ResourceLocator] | None = ...,
        initial_resource_versions: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        response_nonce: builtins.str = ...,
        error_detail: google.rpc.status_pb2.Status | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error_detail", b"error_detail", "node", b"node"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error_detail", b"error_detail", "initial_resource_versions", b"initial_resource_versions", "node", b"node", "resource_locators_subscribe", b"resource_locators_subscribe", "resource_locators_unsubscribe", b"resource_locators_unsubscribe", "resource_names_subscribe", b"resource_names_subscribe", "resource_names_unsubscribe", b"resource_names_unsubscribe", "response_nonce", b"response_nonce", "type_url", b"type_url"]) -> None: ...

global___DeltaDiscoveryRequest = DeltaDiscoveryRequest

@typing.final
class DeltaDiscoveryResponse(google.protobuf.message.Message):
    """[#next-free-field: 9]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SYSTEM_VERSION_INFO_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    TYPE_URL_FIELD_NUMBER: builtins.int
    REMOVED_RESOURCES_FIELD_NUMBER: builtins.int
    REMOVED_RESOURCE_NAMES_FIELD_NUMBER: builtins.int
    NONCE_FIELD_NUMBER: builtins.int
    CONTROL_PLANE_FIELD_NUMBER: builtins.int
    system_version_info: builtins.str
    """The version of the response data (used for debugging)."""
    type_url: builtins.str
    """field id 3 IS available!

    Type URL for resources. Identifies the xDS API when muxing over ADS.
    Must be consistent with the type_url in the Any within 'resources' if 'resources' is non-empty.
    """
    nonce: builtins.str
    """The nonce provides a way for DeltaDiscoveryRequests to uniquely
    reference a DeltaDiscoveryResponse when (N)ACKing. The nonce is required.
    """
    @property
    def resources(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Resource]:
        """The response resources. These are typed resources, whose types must match
        the type_url field.
        """

    @property
    def removed_resources(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Resources names of resources that have be deleted and to be removed from the xDS Client.
        Removed resources for missing resources can be ignored.
        """

    @property
    def removed_resource_names(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ResourceName]:
        """Alternative to removed_resources that allows specifying which variant of
        a resource is being removed. This variant must be used for any resource
        for which dynamic parameter constraints were sent to the client.
        """

    @property
    def control_plane(self) -> envoy.config.core.v3.base_pb2.ControlPlane:
        """[#not-implemented-hide:]
        The control plane instance that sent the response.
        """

    def __init__(
        self,
        *,
        system_version_info: builtins.str = ...,
        resources: collections.abc.Iterable[global___Resource] | None = ...,
        type_url: builtins.str = ...,
        removed_resources: collections.abc.Iterable[builtins.str] | None = ...,
        removed_resource_names: collections.abc.Iterable[global___ResourceName] | None = ...,
        nonce: builtins.str = ...,
        control_plane: envoy.config.core.v3.base_pb2.ControlPlane | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["control_plane", b"control_plane"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["control_plane", b"control_plane", "nonce", b"nonce", "removed_resource_names", b"removed_resource_names", "removed_resources", b"removed_resources", "resources", b"resources", "system_version_info", b"system_version_info", "type_url", b"type_url"]) -> None: ...

global___DeltaDiscoveryResponse = DeltaDiscoveryResponse

@typing.final
class DynamicParameterConstraints(google.protobuf.message.Message):
    """A set of dynamic parameter constraints associated with a variant of an individual xDS resource.
    These constraints determine whether the resource matches a subscription based on the set of
    dynamic parameters in the subscription, as specified in the
    :ref:`ResourceLocator.dynamic_parameters<envoy_v3_api_field_service.discovery.v3.ResourceLocator.dynamic_parameters>`
    field. This allows xDS implementations (clients, servers, and caching proxies) to determine
    which variant of a resource is appropriate for a given client.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class SingleConstraint(google.protobuf.message.Message):
        """A single constraint for a given key."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class Exists(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            def __init__(
                self,
            ) -> None: ...

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        EXISTS_FIELD_NUMBER: builtins.int
        key: builtins.str
        """The key to match against."""
        value: builtins.str
        """Matches this exact value."""
        @property
        def exists(self) -> global___DynamicParameterConstraints.SingleConstraint.Exists:
            """Key is present (matches any value except for the key being absent).
            This allows setting a default constraint for clients that do
            not send a key at all, while there may be other clients that need
            special configuration based on that key.
            """

        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
            exists: global___DynamicParameterConstraints.SingleConstraint.Exists | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["constraint_type", b"constraint_type", "exists", b"exists", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["constraint_type", b"constraint_type", "exists", b"exists", "key", b"key", "value", b"value"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["constraint_type", b"constraint_type"]) -> typing.Literal["value", "exists"] | None: ...

    @typing.final
    class ConstraintList(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        CONSTRAINTS_FIELD_NUMBER: builtins.int
        @property
        def constraints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DynamicParameterConstraints]: ...
        def __init__(
            self,
            *,
            constraints: collections.abc.Iterable[global___DynamicParameterConstraints] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["constraints", b"constraints"]) -> None: ...

    CONSTRAINT_FIELD_NUMBER: builtins.int
    OR_CONSTRAINTS_FIELD_NUMBER: builtins.int
    AND_CONSTRAINTS_FIELD_NUMBER: builtins.int
    NOT_CONSTRAINTS_FIELD_NUMBER: builtins.int
    @property
    def constraint(self) -> global___DynamicParameterConstraints.SingleConstraint:
        """A single constraint to evaluate."""

    @property
    def or_constraints(self) -> global___DynamicParameterConstraints.ConstraintList:
        """A list of constraints that match if any one constraint in the list
        matches.
        """

    @property
    def and_constraints(self) -> global___DynamicParameterConstraints.ConstraintList:
        """A list of constraints that must all match."""

    @property
    def not_constraints(self) -> global___DynamicParameterConstraints:
        """The inverse (NOT) of a set of constraints."""

    def __init__(
        self,
        *,
        constraint: global___DynamicParameterConstraints.SingleConstraint | None = ...,
        or_constraints: global___DynamicParameterConstraints.ConstraintList | None = ...,
        and_constraints: global___DynamicParameterConstraints.ConstraintList | None = ...,
        not_constraints: global___DynamicParameterConstraints | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["and_constraints", b"and_constraints", "constraint", b"constraint", "not_constraints", b"not_constraints", "or_constraints", b"or_constraints", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["and_constraints", b"and_constraints", "constraint", b"constraint", "not_constraints", b"not_constraints", "or_constraints", b"or_constraints", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["constraint", "or_constraints", "and_constraints", "not_constraints"] | None: ...

global___DynamicParameterConstraints = DynamicParameterConstraints

@typing.final
class Resource(google.protobuf.message.Message):
    """[#next-free-field: 10]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class CacheControl(google.protobuf.message.Message):
        """Cache control properties for the resource.
        [#not-implemented-hide:]
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DO_NOT_CACHE_FIELD_NUMBER: builtins.int
        do_not_cache: builtins.bool
        """If true, xDS proxies may not cache this resource.
        Note that this does not apply to clients other than xDS proxies, which must cache resources
        for their own use, regardless of the value of this field.
        """
        def __init__(
            self,
            *,
            do_not_cache: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["do_not_cache", b"do_not_cache"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    ALIASES_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    RESOURCE_FIELD_NUMBER: builtins.int
    TTL_FIELD_NUMBER: builtins.int
    CACHE_CONTROL_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The resource's name, to distinguish it from others of the same type of resource.
    Only one of ``name`` or ``resource_name`` may be set.
    """
    version: builtins.str
    """The resource level version. It allows xDS to track the state of individual
    resources.
    """
    @property
    def resource_name(self) -> global___ResourceName:
        """Alternative to the ``name`` field, to be used when the server supports
        multiple variants of the named resource that are differentiated by
        dynamic parameter constraints.
        Only one of ``name`` or ``resource_name`` may be set.
        """

    @property
    def aliases(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The aliases are a list of other names that this resource can go by."""

    @property
    def resource(self) -> google.protobuf.any_pb2.Any:
        """The resource being tracked."""

    @property
    def ttl(self) -> google.protobuf.duration_pb2.Duration:
        """Time-to-live value for the resource. For each resource, a timer is started. The timer is
        reset each time the resource is received with a new TTL. If the resource is received with
        no TTL set, the timer is removed for the resource. Upon expiration of the timer, the
        configuration for the resource will be removed.

        The TTL can be refreshed or changed by sending a response that doesn't change the resource
        version. In this case the resource field does not need to be populated, which allows for
        light-weight "heartbeat" updates to keep a resource with a TTL alive.

        The TTL feature is meant to support configurations that should be removed in the event of
        a management server failure. For example, the feature may be used for fault injection
        testing where the fault injection should be terminated in the event that Envoy loses contact
        with the management server.
        """

    @property
    def cache_control(self) -> global___Resource.CacheControl:
        """Cache control properties for the resource.
        [#not-implemented-hide:]
        """

    @property
    def metadata(self) -> envoy.config.core.v3.base_pb2.Metadata:
        """The Metadata field can be used to provide additional information for the resource.
        E.g. the trace data for debugging.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        resource_name: global___ResourceName | None = ...,
        aliases: collections.abc.Iterable[builtins.str] | None = ...,
        version: builtins.str = ...,
        resource: google.protobuf.any_pb2.Any | None = ...,
        ttl: google.protobuf.duration_pb2.Duration | None = ...,
        cache_control: global___Resource.CacheControl | None = ...,
        metadata: envoy.config.core.v3.base_pb2.Metadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cache_control", b"cache_control", "metadata", b"metadata", "resource", b"resource", "resource_name", b"resource_name", "ttl", b"ttl"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aliases", b"aliases", "cache_control", b"cache_control", "metadata", b"metadata", "name", b"name", "resource", b"resource", "resource_name", b"resource_name", "ttl", b"ttl", "version", b"version"]) -> None: ...

global___Resource = Resource
