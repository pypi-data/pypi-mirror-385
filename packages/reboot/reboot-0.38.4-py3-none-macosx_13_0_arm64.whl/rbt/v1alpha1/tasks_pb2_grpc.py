# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.v1alpha1 import tasks_pb2 as rbt_dot_v1alpha1_dot_tasks__pb2


class TasksStub(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Wait = channel.unary_unary(
                '/rbt.v1alpha1.Tasks/Wait',
                request_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.WaitRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.WaitResponse.FromString,
                _registered_method=True)
        self.ListTasks = channel.unary_unary(
                '/rbt.v1alpha1.Tasks/ListTasks',
                request_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksResponse.FromString,
                _registered_method=True)
        self.ListTasksStream = channel.unary_stream(
                '/rbt.v1alpha1.Tasks/ListTasksStream',
                request_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksResponse.FromString,
                _registered_method=True)
        self.CancelTask = channel.unary_unary(
                '/rbt.v1alpha1.Tasks/CancelTask',
                request_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.CancelTaskRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.CancelTaskResponse.FromString,
                _registered_method=True)


class TasksServicer(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def Wait(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasksStream(self, request, context):
        """Like `ListTasks`, but returns the latest list of tasks every time
        that list changes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TasksServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Wait': grpc.unary_unary_rpc_method_handler(
                    servicer.Wait,
                    request_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.WaitRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.WaitResponse.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksResponse.SerializeToString,
            ),
            'ListTasksStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ListTasksStream,
                    request_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksResponse.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=rbt_dot_v1alpha1_dot_tasks__pb2.CancelTaskRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_tasks__pb2.CancelTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.v1alpha1.Tasks', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.v1alpha1.Tasks', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Tasks(object):
    """//////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def Wait(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Tasks/Wait',
            rbt_dot_v1alpha1_dot_tasks__pb2.WaitRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_tasks__pb2.WaitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Tasks/ListTasks',
            rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTasksStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rbt.v1alpha1.Tasks/ListTasksStream',
            rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_tasks__pb2.ListTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Tasks/CancelTask',
            rbt_dot_v1alpha1_dot_tasks__pb2.CancelTaskRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_tasks__pb2.CancelTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
