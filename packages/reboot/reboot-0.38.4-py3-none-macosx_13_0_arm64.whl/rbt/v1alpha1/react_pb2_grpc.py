# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.v1alpha1 import react_pb2 as rbt_dot_v1alpha1_dot_react__pb2


class ReactStub(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_stream(
                '/rbt.v1alpha1.React/Query',
                request_serializer=rbt_dot_v1alpha1_dot_react__pb2.QueryRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_react__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.WebSocketsConnection = channel.unary_unary(
                '/rbt.v1alpha1.React/WebSocketsConnection',
                request_serializer=rbt_dot_v1alpha1_dot_react__pb2.WebSocketsConnectionRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_react__pb2.WebSocketsConnectionResponse.FromString,
                _registered_method=True)


class ReactServicer(object):
    """//////////////////////////////////////////////////////////////////////

    """

    def Query(self, request, context):
        """Allows users to "watch" the response of a unary reader method for
        changes. The current response of the method is sent when the
        stream is opened, then a new response is sent whenever the
        state changes in a way that causes the method's response to change.

        NOTE: the service name and state ID is expected to be part of the
        gRPC metadata, exactly like any other reboot requests.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebSocketsConnection(self, request, context):
        """All connections must be HTTP/2 (h2), but the WebSocket protocol
        is inherently HTTP/1.1. RFC 8441
        (https://datatracker.ietf.org/doc/html/rfc8441) introduced
        support for running the WebSocket Protocol over a single stream
        of an HTTP/2 connection and all of the top browsers implement it.

        The caveat is that we need the HTTP/2 connection to exist in
        order for websockets to use the existing HTTP/2 connection, hence
        this method!

        For example usage, see corresponding code in the generated
        TypeScript for React.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReactServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_stream_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=rbt_dot_v1alpha1_dot_react__pb2.QueryRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_react__pb2.QueryResponse.SerializeToString,
            ),
            'WebSocketsConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.WebSocketsConnection,
                    request_deserializer=rbt_dot_v1alpha1_dot_react__pb2.WebSocketsConnectionRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_react__pb2.WebSocketsConnectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.v1alpha1.React', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.v1alpha1.React', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class React(object):
    """//////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rbt.v1alpha1.React/Query',
            rbt_dot_v1alpha1_dot_react__pb2.QueryRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_react__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WebSocketsConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.React/WebSocketsConnection',
            rbt_dot_v1alpha1_dot_react__pb2.WebSocketsConnectionRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_react__pb2.WebSocketsConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
