# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.v1alpha1 import sidecar_pb2 as rbt_dot_v1alpha1_dot_sidecar__pb2


class SidecarStub(object):
    """//////////////////////////////////////////////////////////////////////

    NOTE: This sidecar API expects each `ApplicationDeployment` to get its own
    sidecar. If we want to allow two different consensuses for two different
    `ApplicationDeployment`s to use the same sidecar, we will need to add
    disambiguation for `ApplicationDeployment`-level information (such as encoded
    `FileDescriptorSet`s).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ColocatedRange = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/ColocatedRange',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedRangeRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedRangeResponse.FromString,
                _registered_method=True)
        self.ColocatedReverseRange = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/ColocatedReverseRange',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedReverseRangeRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedReverseRangeResponse.FromString,
                _registered_method=True)
        self.Find = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/Find',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.FindRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.FindResponse.FromString,
                _registered_method=True)
        self.Load = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/Load',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.LoadRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.LoadResponse.FromString,
                _registered_method=True)
        self.Store = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/Store',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.StoreRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.StoreResponse.FromString,
                _registered_method=True)
        self.Recover = channel.unary_stream(
                '/rbt.v1alpha1.Sidecar/Recover',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.RecoverRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.RecoverResponse.FromString,
                _registered_method=True)
        self.TransactionParticipantPrepare = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/TransactionParticipantPrepare',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantPrepareRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantPrepareResponse.FromString,
                _registered_method=True)
        self.TransactionParticipantCommit = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/TransactionParticipantCommit',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantCommitRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantCommitResponse.FromString,
                _registered_method=True)
        self.TransactionParticipantAbort = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/TransactionParticipantAbort',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantAbortRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantAbortResponse.FromString,
                _registered_method=True)
        self.TransactionCoordinatorPrepared = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/TransactionCoordinatorPrepared',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorPreparedRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorPreparedResponse.FromString,
                _registered_method=True)
        self.TransactionCoordinatorCleanup = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/TransactionCoordinatorCleanup',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorCleanupRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorCleanupResponse.FromString,
                _registered_method=True)
        self.Export = channel.unary_unary(
                '/rbt.v1alpha1.Sidecar/Export',
                request_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ExportRequest.SerializeToString,
                response_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ExportResponse.FromString,
                _registered_method=True)


class SidecarServicer(object):
    """//////////////////////////////////////////////////////////////////////

    NOTE: This sidecar API expects each `ApplicationDeployment` to get its own
    sidecar. If we want to allow two different consensuses for two different
    `ApplicationDeployment`s to use the same sidecar, we will need to add
    disambiguation for `ApplicationDeployment`-level information (such as encoded
    `FileDescriptorSet`s).
    """

    def ColocatedRange(self, request, context):
        """Returns one page of interleaved state machines from the datastore.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ColocatedReverseRange(self, request, context):
        """Returns one page of interleaved state machines from the datastore.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Find stored state refs by state type and ID (which may be just a prefix).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """Returns an actor state data, or empty data if no such actor yet
        exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Store(self, request, context):
        """Stores the specified data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recover(self, request, context):
        """Returns state needed to recover the server after a potential restart.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionParticipantPrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionParticipantCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionParticipantAbort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionCoordinatorPrepared(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionCoordinatorCleanup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Export(self, request, context):
        """TODO: This should be streaming: see #3329.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SidecarServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ColocatedRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ColocatedRange,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedRangeRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedRangeResponse.SerializeToString,
            ),
            'ColocatedReverseRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ColocatedReverseRange,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedReverseRangeRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedReverseRangeResponse.SerializeToString,
            ),
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.FindRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.FindResponse.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.LoadRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.LoadResponse.SerializeToString,
            ),
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.StoreRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.StoreResponse.SerializeToString,
            ),
            'Recover': grpc.unary_stream_rpc_method_handler(
                    servicer.Recover,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.RecoverRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.RecoverResponse.SerializeToString,
            ),
            'TransactionParticipantPrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionParticipantPrepare,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantPrepareRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantPrepareResponse.SerializeToString,
            ),
            'TransactionParticipantCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionParticipantCommit,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantCommitRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantCommitResponse.SerializeToString,
            ),
            'TransactionParticipantAbort': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionParticipantAbort,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantAbortRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantAbortResponse.SerializeToString,
            ),
            'TransactionCoordinatorPrepared': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionCoordinatorPrepared,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorPreparedRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorPreparedResponse.SerializeToString,
            ),
            'TransactionCoordinatorCleanup': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionCoordinatorCleanup,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorCleanupRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorCleanupResponse.SerializeToString,
            ),
            'Export': grpc.unary_unary_rpc_method_handler(
                    servicer.Export,
                    request_deserializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ExportRequest.FromString,
                    response_serializer=rbt_dot_v1alpha1_dot_sidecar__pb2.ExportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.v1alpha1.Sidecar', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.v1alpha1.Sidecar', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Sidecar(object):
    """//////////////////////////////////////////////////////////////////////

    NOTE: This sidecar API expects each `ApplicationDeployment` to get its own
    sidecar. If we want to allow two different consensuses for two different
    `ApplicationDeployment`s to use the same sidecar, we will need to add
    disambiguation for `ApplicationDeployment`-level information (such as encoded
    `FileDescriptorSet`s).
    """

    @staticmethod
    def ColocatedRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/ColocatedRange',
            rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedRangeRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ColocatedReverseRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/ColocatedReverseRange',
            rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedReverseRangeRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.ColocatedReverseRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/Find',
            rbt_dot_v1alpha1_dot_sidecar__pb2.FindRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.FindResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/Load',
            rbt_dot_v1alpha1_dot_sidecar__pb2.LoadRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.LoadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/Store',
            rbt_dot_v1alpha1_dot_sidecar__pb2.StoreRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.StoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Recover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/Recover',
            rbt_dot_v1alpha1_dot_sidecar__pb2.RecoverRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.RecoverResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransactionParticipantPrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/TransactionParticipantPrepare',
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantPrepareRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantPrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransactionParticipantCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/TransactionParticipantCommit',
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantCommitRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransactionParticipantAbort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/TransactionParticipantAbort',
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantAbortRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionParticipantAbortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransactionCoordinatorPrepared(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/TransactionCoordinatorPrepared',
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorPreparedRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorPreparedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransactionCoordinatorCleanup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/TransactionCoordinatorCleanup',
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorCleanupRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.TransactionCoordinatorCleanupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.v1alpha1.Sidecar/Export',
            rbt_dot_v1alpha1_dot_sidecar__pb2.ExportRequest.SerializeToString,
            rbt_dot_v1alpha1_dot_sidecar__pb2.ExportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
