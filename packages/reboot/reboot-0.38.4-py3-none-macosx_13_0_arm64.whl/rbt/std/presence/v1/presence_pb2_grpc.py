# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.std.presence.v1 import presence_pb2 as rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2


class PresenceMethodsStub(object):
    """//////////////////////////////////////////////////////////////////////

    *
    Tracks subscribers that are "present".

    Called by the subscriber _after_ first becoming a
    `Subscriber` using the API described there.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_unary(
                '/rbt.std.presence.v1.PresenceMethods/Subscribe',
                request_serializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.SubscribeResponse.FromString,
                _registered_method=True)
        self.List = channel.unary_unary(
                '/rbt.std.presence.v1.PresenceMethods/List',
                request_serializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.ListRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.ListResponse.FromString,
                _registered_method=True)
        self.Watch = channel.unary_unary(
                '/rbt.std.presence.v1.PresenceMethods/Watch',
                request_serializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.WatchRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.WatchResponse.FromString,
                _registered_method=True)


class PresenceMethodsServicer(object):
    """//////////////////////////////////////////////////////////////////////

    *
    Tracks subscribers that are "present".

    Called by the subscriber _after_ first becoming a
    `Subscriber` using the API described there.
    """

    def Subscribe(self, request, context):
        """*
        Registers a subscriber as present.

        The `Watch` workflow is also scheduled to detect when this
        subscriber is no longer present.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """*
        Returns a list of subscriber ids for subscribers that are present.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """*
        Waits until the subscriber is no longer present.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PresenceMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.SubscribeRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.SubscribeResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.ListRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.ListResponse.SerializeToString,
            ),
            'Watch': grpc.unary_unary_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.WatchRequest.FromString,
                    response_serializer=rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.WatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.std.presence.v1.PresenceMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.std.presence.v1.PresenceMethods', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PresenceMethods(object):
    """//////////////////////////////////////////////////////////////////////

    *
    Tracks subscribers that are "present".

    Called by the subscriber _after_ first becoming a
    `Subscriber` using the API described there.
    """

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.v1.PresenceMethods/Subscribe',
            rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.SubscribeRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.SubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.v1.PresenceMethods/List',
            rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.ListRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.ListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.std.presence.v1.PresenceMethods/Watch',
            rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.WatchRequest.SerializeToString,
            rbt_dot_std_dot_presence_dot_v1_dot_presence__pb2.WatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
