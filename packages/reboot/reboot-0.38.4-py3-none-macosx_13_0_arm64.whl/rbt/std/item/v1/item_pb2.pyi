"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.struct_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Item(google.protobuf.message.Message):
    """//////////////////////////////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    BYTES_FIELD_NUMBER: builtins.int
    ANY_FIELD_NUMBER: builtins.int
    bytes: builtins.bytes
    @property
    def value(self) -> google.protobuf.struct_pb2.Value:
        """NOTE: we provide many "value" fields to provide a better
        developer experience when storing different types. For example,
        in TypeScript you will probably only ever use `value` and maybe
        `bytes`, but in Python `any` may be more useful when using
        protobuf directly.

        We're not using a `oneof` because the code generation of those
        are all different and not always more clear what the intent is,
        see this blog post which illuminates this in more detail, and may
        also be a better way of doing validation then the manual
        validation that we're doing in the servicer:
        https://buf.build/blog/fixing-oneofs

        TODO: consider also having `string_value`, `number_value`, etc,
        to provide a better developer experience in languages other than
        TypeScript which has first-class support for passing JSON
        stringifiable objects to `value`.
        """

    @property
    def any(self) -> google.protobuf.any_pb2.Any: ...
    def __init__(
        self,
        *,
        value: google.protobuf.struct_pb2.Value | None = ...,
        bytes: builtins.bytes | None = ...,
        any: google.protobuf.any_pb2.Any | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_any", b"_any", "_bytes", b"_bytes", "_value", b"_value", "any", b"any", "bytes", b"bytes", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_any", b"_any", "_bytes", b"_bytes", "_value", b"_value", "any", b"any", "bytes", b"bytes", "value", b"value"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_any", b"_any"]) -> typing.Literal["any"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_bytes", b"_bytes"]) -> typing.Literal["bytes"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_value", b"_value"]) -> typing.Literal["value"] | None: ...

global___Item = Item
