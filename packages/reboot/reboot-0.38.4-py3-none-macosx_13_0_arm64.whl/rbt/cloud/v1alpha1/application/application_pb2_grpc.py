# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.cloud.v1alpha1.application import application_pb2 as rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2


class ApplicationMethodsStub(object):
    """/////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/Create',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.CreateRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.CreateResponse.FromString,
                _registered_method=True)
        self.PushInfo = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/PushInfo',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.PushInfoRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.PushInfoResponse.FromString,
                _registered_method=True)
        self.Up = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/Up',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpResponse.FromString,
                _registered_method=True)
        self.UpWorkflow = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/UpWorkflow',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpWorkflowRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpWorkflowResponse.FromString,
                _registered_method=True)
        self.Down = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/Down',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownResponse.FromString,
                _registered_method=True)
        self.DownWorkflow = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/DownWorkflow',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownWorkflowRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownWorkflowResponse.FromString,
                _registered_method=True)
        self.RevisionStatus = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/RevisionStatus',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.RevisionStatusRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.RevisionStatusResponse.FromString,
                _registered_method=True)
        self.Logs = channel.unary_stream(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/Logs',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.LogsRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.LogsResponse.FromString,
                _registered_method=True)
        self.ActiveRevisions = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/ActiveRevisions',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.ActiveRevisionsRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.ActiveRevisionsResponse.FromString,
                _registered_method=True)
        self.Status = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/Status',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.StatusRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.IsAdmin = channel.unary_unary(
                '/rbt.cloud.v1alpha1.application.ApplicationMethods/IsAdmin',
                request_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.IsAdminRequest.SerializeToString,
                response_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.IsAdminResponse.FromString,
                _registered_method=True)


class ApplicationMethodsServicer(object):
    """/////////////////////////////////////////////////////////////////////

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Up(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpWorkflow(self, request, context):
        """The async part of `Up`. Not part of the public API.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Down(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownWorkflow(self, request, context):
        """The async part of `Down`. Not part of the public API.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevisionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logs(self, request, context):
        """*
        Fetches the log records produced by this application so far. If
        `follow=true`, will subsequently stream new records as they are logged.

        The server will make an attempt to deliver records in timestamp-order, but
        may (particularly when streaming newly-ingested records) send records in
        ingestion-order if timestamp-order is infeasible.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActiveRevisions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApplicationMethodsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.CreateRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.CreateResponse.SerializeToString,
            ),
            'PushInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.PushInfo,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.PushInfoRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.PushInfoResponse.SerializeToString,
            ),
            'Up': grpc.unary_unary_rpc_method_handler(
                    servicer.Up,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpResponse.SerializeToString,
            ),
            'UpWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.UpWorkflow,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpWorkflowRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpWorkflowResponse.SerializeToString,
            ),
            'Down': grpc.unary_unary_rpc_method_handler(
                    servicer.Down,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownResponse.SerializeToString,
            ),
            'DownWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DownWorkflow,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownWorkflowRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownWorkflowResponse.SerializeToString,
            ),
            'RevisionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.RevisionStatus,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.RevisionStatusRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.RevisionStatusResponse.SerializeToString,
            ),
            'Logs': grpc.unary_stream_rpc_method_handler(
                    servicer.Logs,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.LogsRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.LogsResponse.SerializeToString,
            ),
            'ActiveRevisions': grpc.unary_unary_rpc_method_handler(
                    servicer.ActiveRevisions,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.ActiveRevisionsRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.ActiveRevisionsResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.StatusRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.StatusResponse.SerializeToString,
            ),
            'IsAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.IsAdmin,
                    request_deserializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.IsAdminRequest.FromString,
                    response_serializer=rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.IsAdminResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.cloud.v1alpha1.application.ApplicationMethods', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rbt.cloud.v1alpha1.application.ApplicationMethods', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApplicationMethods(object):
    """/////////////////////////////////////////////////////////////////////

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/Create',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.CreateRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.CreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/PushInfo',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.PushInfoRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.PushInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Up(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/Up',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/UpWorkflow',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpWorkflowRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.UpWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Down(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/Down',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/DownWorkflow',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownWorkflowRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.DownWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevisionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/RevisionStatus',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.RevisionStatusRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.RevisionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/Logs',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.LogsRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.LogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActiveRevisions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/ActiveRevisions',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.ActiveRevisionsRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.ActiveRevisionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/Status',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.StatusRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rbt.cloud.v1alpha1.application.ApplicationMethods/IsAdmin',
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.IsAdminRequest.SerializeToString,
            rbt_dot_cloud_dot_v1alpha1_dot_application_dot_application__pb2.IsAdminResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
