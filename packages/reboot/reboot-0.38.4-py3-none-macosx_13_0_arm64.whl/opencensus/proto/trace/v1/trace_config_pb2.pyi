"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2018, OpenCensus Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TraceConfig(google.protobuf.message.Message):
    """Global configuration of the trace service. All fields must be specified, or
    the default (zero) values will be used for each type.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROBABILITY_SAMPLER_FIELD_NUMBER: builtins.int
    CONSTANT_SAMPLER_FIELD_NUMBER: builtins.int
    RATE_LIMITING_SAMPLER_FIELD_NUMBER: builtins.int
    MAX_NUMBER_OF_ATTRIBUTES_FIELD_NUMBER: builtins.int
    MAX_NUMBER_OF_ANNOTATIONS_FIELD_NUMBER: builtins.int
    MAX_NUMBER_OF_MESSAGE_EVENTS_FIELD_NUMBER: builtins.int
    MAX_NUMBER_OF_LINKS_FIELD_NUMBER: builtins.int
    max_number_of_attributes: builtins.int
    """The global default max number of attributes per span."""
    max_number_of_annotations: builtins.int
    """The global default max number of annotation events per span."""
    max_number_of_message_events: builtins.int
    """The global default max number of message events per span."""
    max_number_of_links: builtins.int
    """The global default max number of link entries per span."""
    @property
    def probability_sampler(self) -> global___ProbabilitySampler: ...
    @property
    def constant_sampler(self) -> global___ConstantSampler: ...
    @property
    def rate_limiting_sampler(self) -> global___RateLimitingSampler: ...
    def __init__(
        self,
        *,
        probability_sampler: global___ProbabilitySampler | None = ...,
        constant_sampler: global___ConstantSampler | None = ...,
        rate_limiting_sampler: global___RateLimitingSampler | None = ...,
        max_number_of_attributes: builtins.int = ...,
        max_number_of_annotations: builtins.int = ...,
        max_number_of_message_events: builtins.int = ...,
        max_number_of_links: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["constant_sampler", b"constant_sampler", "probability_sampler", b"probability_sampler", "rate_limiting_sampler", b"rate_limiting_sampler", "sampler", b"sampler"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["constant_sampler", b"constant_sampler", "max_number_of_annotations", b"max_number_of_annotations", "max_number_of_attributes", b"max_number_of_attributes", "max_number_of_links", b"max_number_of_links", "max_number_of_message_events", b"max_number_of_message_events", "probability_sampler", b"probability_sampler", "rate_limiting_sampler", b"rate_limiting_sampler", "sampler", b"sampler"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sampler", b"sampler"]) -> typing.Literal["probability_sampler", "constant_sampler", "rate_limiting_sampler"] | None: ...

global___TraceConfig = TraceConfig

@typing.final
class ProbabilitySampler(google.protobuf.message.Message):
    """Sampler that tries to uniformly sample traces with a given probability.
    The probability of sampling a trace is equal to that of the specified probability.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLINGPROBABILITY_FIELD_NUMBER: builtins.int
    samplingProbability: builtins.float
    """The desired probability of sampling. Must be within [0.0, 1.0]."""
    def __init__(
        self,
        *,
        samplingProbability: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["samplingProbability", b"samplingProbability"]) -> None: ...

global___ProbabilitySampler = ProbabilitySampler

@typing.final
class ConstantSampler(google.protobuf.message.Message):
    """Sampler that always makes a constant decision on span sampling."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _ConstantDecision:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ConstantDecisionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ConstantSampler._ConstantDecision.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ALWAYS_OFF: ConstantSampler._ConstantDecision.ValueType  # 0
        ALWAYS_ON: ConstantSampler._ConstantDecision.ValueType  # 1
        ALWAYS_PARENT: ConstantSampler._ConstantDecision.ValueType  # 2

    class ConstantDecision(_ConstantDecision, metaclass=_ConstantDecisionEnumTypeWrapper):
        """How spans should be sampled:
        - Always off
        - Always on
        - Always follow the parent Span's decision (off if no parent).
        """

    ALWAYS_OFF: ConstantSampler.ConstantDecision.ValueType  # 0
    ALWAYS_ON: ConstantSampler.ConstantDecision.ValueType  # 1
    ALWAYS_PARENT: ConstantSampler.ConstantDecision.ValueType  # 2

    DECISION_FIELD_NUMBER: builtins.int
    decision: global___ConstantSampler.ConstantDecision.ValueType
    def __init__(
        self,
        *,
        decision: global___ConstantSampler.ConstantDecision.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["decision", b"decision"]) -> None: ...

global___ConstantSampler = ConstantSampler

@typing.final
class RateLimitingSampler(google.protobuf.message.Message):
    """Sampler that tries to sample with a rate per time window."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QPS_FIELD_NUMBER: builtins.int
    qps: builtins.int
    """Rate per second."""
    def __init__(
        self,
        *,
        qps: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["qps", b"qps"]) -> None: ...

global___RateLimitingSampler = RateLimitingSampler
