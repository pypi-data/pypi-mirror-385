"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.core.v3.extension_pb2
import envoy.config.core.v3.protocol_pb2
import envoy.extensions.filters.network.http_connection_manager.v3.http_connection_manager_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class HttpProtocolOptions(google.protobuf.message.Message):
    """[#protodoc-title: HTTP Protocol Options]
    [#extension: envoy.upstreams.http.http_protocol_options]

    HttpProtocolOptions specifies Http upstream protocol options. This object
    is used in
    :ref:`typed_extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
    keyed by the name ``envoy.extensions.upstreams.http.v3.HttpProtocolOptions``.

    This controls what protocol(s) should be used for upstream and how said protocol(s) are configured.

    This replaces the prior pattern of explicit protocol configuration directly
    in the cluster. So a configuration like this, explicitly configuring the use of HTTP/2 upstream:

    .. code::

      clusters:
        - name: some_service
          connect_timeout: 5s
          upstream_http_protocol_options:
            auto_sni: true
          common_http_protocol_options:
            idle_timeout: 1s
          http2_protocol_options:
            max_concurrent_streams: 100
           .... [further cluster config]

    Would now look like this:

    .. code::

      clusters:
        - name: some_service
          connect_timeout: 5s
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              upstream_http_protocol_options:
                auto_sni: true
              common_http_protocol_options:
                idle_timeout: 1s
              explicit_http_config:
                http2_protocol_options:
                  max_concurrent_streams: 100
           .... [further cluster config]
    [#next-free-field: 8]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExplicitHttpConfig(google.protobuf.message.Message):
        """If this is used, the cluster will only operate on one of the possible upstream protocols.
        Note that HTTP/2 or above should generally be used for upstream gRPC clusters.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        HTTP_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        HTTP2_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        HTTP3_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def http_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http1ProtocolOptions: ...
        @property
        def http2_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http2ProtocolOptions: ...
        @property
        def http3_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http3ProtocolOptions:
            """.. warning::
              QUIC upstream support is currently not ready for internet use.
              Please see :ref:`here <arch_overview_http3>` for details.
            """

        def __init__(
            self,
            *,
            http_protocol_options: envoy.config.core.v3.protocol_pb2.Http1ProtocolOptions | None = ...,
            http2_protocol_options: envoy.config.core.v3.protocol_pb2.Http2ProtocolOptions | None = ...,
            http3_protocol_options: envoy.config.core.v3.protocol_pb2.Http3ProtocolOptions | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["http2_protocol_options", b"http2_protocol_options", "http3_protocol_options", b"http3_protocol_options", "http_protocol_options", b"http_protocol_options", "protocol_config", b"protocol_config"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["http2_protocol_options", b"http2_protocol_options", "http3_protocol_options", b"http3_protocol_options", "http_protocol_options", b"http_protocol_options", "protocol_config", b"protocol_config"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["protocol_config", b"protocol_config"]) -> typing.Literal["http_protocol_options", "http2_protocol_options", "http3_protocol_options"] | None: ...

    @typing.final
    class UseDownstreamHttpConfig(google.protobuf.message.Message):
        """If this is used, the cluster can use either of the configured protocols, and
        will use whichever protocol was used by the downstream connection.

        If HTTP/3 is configured for downstream and not configured for upstream,
        HTTP/3 requests will fail over to HTTP/2.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        HTTP_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        HTTP2_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        HTTP3_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def http_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http1ProtocolOptions: ...
        @property
        def http2_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http2ProtocolOptions: ...
        @property
        def http3_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http3ProtocolOptions:
            """.. warning::
              QUIC upstream support is currently not ready for internet use.
              Please see :ref:`here <arch_overview_http3>` for details.
            """

        def __init__(
            self,
            *,
            http_protocol_options: envoy.config.core.v3.protocol_pb2.Http1ProtocolOptions | None = ...,
            http2_protocol_options: envoy.config.core.v3.protocol_pb2.Http2ProtocolOptions | None = ...,
            http3_protocol_options: envoy.config.core.v3.protocol_pb2.Http3ProtocolOptions | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["http2_protocol_options", b"http2_protocol_options", "http3_protocol_options", b"http3_protocol_options", "http_protocol_options", b"http_protocol_options"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["http2_protocol_options", b"http2_protocol_options", "http3_protocol_options", b"http3_protocol_options", "http_protocol_options", b"http_protocol_options"]) -> None: ...

    @typing.final
    class AutoHttpConfig(google.protobuf.message.Message):
        """If this is used, the cluster can use either HTTP/1 or HTTP/2, and will use whichever
        protocol is negotiated by ALPN with the upstream.
        Clusters configured with ``AutoHttpConfig`` will use the highest available
        protocol; HTTP/2 if supported, otherwise HTTP/1.
        If the upstream does not support ALPN, ``AutoHttpConfig`` will fail over to HTTP/1.
        This can only be used with transport sockets which support ALPN. Using a
        transport socket which does not support ALPN will result in configuration
        failure. The transport layer may be configured with custom ALPN, but the default ALPN
        for the cluster (or if custom ALPN fails) will be "h2,http/1.1".
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        HTTP_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        HTTP2_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        HTTP3_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
        ALTERNATE_PROTOCOLS_CACHE_OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def http_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http1ProtocolOptions: ...
        @property
        def http2_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http2ProtocolOptions: ...
        @property
        def http3_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.Http3ProtocolOptions:
            """Unlike HTTP/1 and HTTP/2, HTTP/3 will not be configured unless it is
            present, and (soon) only if there is an indication of server side
            support.
            See :ref:`here <arch_overview_http3_upstream>` for more information on
            when HTTP/3 will be used, and when Envoy will fail over to TCP.

            .. warning::
              QUIC upstream support is currently not ready for internet use.
              Please see :ref:`here <arch_overview_http3>` for details.
            """

        @property
        def alternate_protocols_cache_options(self) -> envoy.config.core.v3.protocol_pb2.AlternateProtocolsCacheOptions:
            """The presence of alternate protocols cache options causes the use of the
            alternate protocols cache, which is responsible for parsing and caching
            HTTP Alt-Svc headers. This enables the use of HTTP/3 for origins that
            advertise supporting it.

            .. note::
              This is required when HTTP/3 is enabled.
            """

        def __init__(
            self,
            *,
            http_protocol_options: envoy.config.core.v3.protocol_pb2.Http1ProtocolOptions | None = ...,
            http2_protocol_options: envoy.config.core.v3.protocol_pb2.Http2ProtocolOptions | None = ...,
            http3_protocol_options: envoy.config.core.v3.protocol_pb2.Http3ProtocolOptions | None = ...,
            alternate_protocols_cache_options: envoy.config.core.v3.protocol_pb2.AlternateProtocolsCacheOptions | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["alternate_protocols_cache_options", b"alternate_protocols_cache_options", "http2_protocol_options", b"http2_protocol_options", "http3_protocol_options", b"http3_protocol_options", "http_protocol_options", b"http_protocol_options"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["alternate_protocols_cache_options", b"alternate_protocols_cache_options", "http2_protocol_options", b"http2_protocol_options", "http3_protocol_options", b"http3_protocol_options", "http_protocol_options", b"http_protocol_options"]) -> None: ...

    COMMON_HTTP_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
    UPSTREAM_HTTP_PROTOCOL_OPTIONS_FIELD_NUMBER: builtins.int
    EXPLICIT_HTTP_CONFIG_FIELD_NUMBER: builtins.int
    USE_DOWNSTREAM_PROTOCOL_CONFIG_FIELD_NUMBER: builtins.int
    AUTO_CONFIG_FIELD_NUMBER: builtins.int
    HTTP_FILTERS_FIELD_NUMBER: builtins.int
    HEADER_VALIDATION_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def common_http_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.HttpProtocolOptions:
        """This contains options common across HTTP/1 and HTTP/2"""

    @property
    def upstream_http_protocol_options(self) -> envoy.config.core.v3.protocol_pb2.UpstreamHttpProtocolOptions:
        """This contains common protocol options which are only applied upstream."""

    @property
    def explicit_http_config(self) -> global___HttpProtocolOptions.ExplicitHttpConfig:
        """To explicitly configure either HTTP/1 or HTTP/2 (but not both!) use ``explicit_http_config``.
        If the ``explicit_http_config`` is empty, HTTP/1.1 is used.
        """

    @property
    def use_downstream_protocol_config(self) -> global___HttpProtocolOptions.UseDownstreamHttpConfig:
        """This allows switching on protocol based on what protocol the downstream
        connection used.
        """

    @property
    def auto_config(self) -> global___HttpProtocolOptions.AutoHttpConfig:
        """This allows switching on protocol based on ALPN"""

    @property
    def http_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.extensions.filters.network.http_connection_manager.v3.http_connection_manager_pb2.HttpFilter]:
        """.. note::
          Upstream HTTP filters are currently in alpha.

        Optional HTTP filters for the upstream filter chain.

        These filters will be applied for all HTTP streams which flow through this
        cluster. Unlike downstream filters, they will *not* be applied to terminated CONNECT requests.

        If using upstream filters, please be aware that local errors sent by
        upstream filters will not trigger retries, and local errors sent by
        upstream filters will count as a final response if hedging is configured.
        [#extension-category: envoy.filters.http.upstream]
        """

    @property
    def header_validation_config(self) -> envoy.config.core.v3.extension_pb2.TypedExtensionConfig:
        """Configuration options for Unified Header Validation (UHV).
        UHV is an extensible mechanism for checking validity of HTTP responses.

        [#comment:TODO(yanavlasov): Make it a link to the default header validator doc when it becomes visible.]
        Leaving this field unspecified, selects the default header validator ``envoy.http.header_validators.envoy_default``.

        [#not-implemented-hide:]
        [#extension-category: envoy.http.header_validators]
        """

    def __init__(
        self,
        *,
        common_http_protocol_options: envoy.config.core.v3.protocol_pb2.HttpProtocolOptions | None = ...,
        upstream_http_protocol_options: envoy.config.core.v3.protocol_pb2.UpstreamHttpProtocolOptions | None = ...,
        explicit_http_config: global___HttpProtocolOptions.ExplicitHttpConfig | None = ...,
        use_downstream_protocol_config: global___HttpProtocolOptions.UseDownstreamHttpConfig | None = ...,
        auto_config: global___HttpProtocolOptions.AutoHttpConfig | None = ...,
        http_filters: collections.abc.Iterable[envoy.extensions.filters.network.http_connection_manager.v3.http_connection_manager_pb2.HttpFilter] | None = ...,
        header_validation_config: envoy.config.core.v3.extension_pb2.TypedExtensionConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["auto_config", b"auto_config", "common_http_protocol_options", b"common_http_protocol_options", "explicit_http_config", b"explicit_http_config", "header_validation_config", b"header_validation_config", "upstream_http_protocol_options", b"upstream_http_protocol_options", "upstream_protocol_options", b"upstream_protocol_options", "use_downstream_protocol_config", b"use_downstream_protocol_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["auto_config", b"auto_config", "common_http_protocol_options", b"common_http_protocol_options", "explicit_http_config", b"explicit_http_config", "header_validation_config", b"header_validation_config", "http_filters", b"http_filters", "upstream_http_protocol_options", b"upstream_http_protocol_options", "upstream_protocol_options", b"upstream_protocol_options", "use_downstream_protocol_config", b"use_downstream_protocol_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["upstream_protocol_options", b"upstream_protocol_options"]) -> typing.Literal["explicit_http_config", "use_downstream_protocol_config", "auto_config"] | None: ...

global___HttpProtocolOptions = HttpProtocolOptions
