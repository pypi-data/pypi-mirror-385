"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import envoy.type.v3.ratelimit_unit_pb2
import envoy.type.v3.token_bucket_pb2
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class RateLimitStrategy(google.protobuf.message.Message):
    """[#protodoc-title: Rate Limit Strategies]"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _BlanketRule:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _BlanketRuleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RateLimitStrategy._BlanketRule.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ALLOW_ALL: RateLimitStrategy._BlanketRule.ValueType  # 0
        DENY_ALL: RateLimitStrategy._BlanketRule.ValueType  # 1

    class BlanketRule(_BlanketRule, metaclass=_BlanketRuleEnumTypeWrapper):
        """Choose between allow all and deny all."""

    ALLOW_ALL: RateLimitStrategy.BlanketRule.ValueType  # 0
    DENY_ALL: RateLimitStrategy.BlanketRule.ValueType  # 1

    @typing.final
    class RequestsPerTimeUnit(google.protobuf.message.Message):
        """Best-effort limit of the number of requests per time unit.

        Allows to specify the desired requests per second (RPS, QPS), requests per minute (QPM, RPM),
        etc., without specifying a rate limiting algorithm implementation.

        ``RequestsPerTimeUnit`` strategy does not demand any specific rate limiting algorithm to be
        used (in contrast to the :ref:`TokenBucket <envoy_v3_api_msg_type.v3.TokenBucket>`,
        for example). It implies that the implementation details of rate limiting algorithm are
        irrelevant as long as the configured number of "requests per time unit" is achieved.

        Note that the ``TokenBucket`` is still a valid implementation of the ``RequestsPerTimeUnit``
        strategy, and may be chosen to enforce the rate limit. However, there's no guarantee it will be
        the ``TokenBucket`` in particular, and not the Leaky Bucket, the Sliding Window, or any other
        rate limiting algorithm that fulfills the requirements.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        REQUESTS_PER_TIME_UNIT_FIELD_NUMBER: builtins.int
        TIME_UNIT_FIELD_NUMBER: builtins.int
        requests_per_time_unit: builtins.int
        """The desired number of requests per :ref:`time_unit
        <envoy_v3_api_field_type.v3.RateLimitStrategy.RequestsPerTimeUnit.time_unit>` to allow.
        If set to ``0``, deny all (equivalent to ``BlanketRule.DENY_ALL``).

        .. note::
          Note that the algorithm implementation determines the course of action for the requests
          over the limit. As long as the ``requests_per_time_unit`` converges on the desired value,
          it's allowed to treat this field as a soft-limit: allow bursts, redistribute the allowance
          over time, etc.
        """
        time_unit: envoy.type.v3.ratelimit_unit_pb2.RateLimitUnit.ValueType
        """The unit of time. Ignored when :ref:`requests_per_time_unit
        <envoy_v3_api_field_type.v3.RateLimitStrategy.RequestsPerTimeUnit.requests_per_time_unit>`
        is ``0`` (deny all).
        """
        def __init__(
            self,
            *,
            requests_per_time_unit: builtins.int = ...,
            time_unit: envoy.type.v3.ratelimit_unit_pb2.RateLimitUnit.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["requests_per_time_unit", b"requests_per_time_unit", "time_unit", b"time_unit"]) -> None: ...

    BLANKET_RULE_FIELD_NUMBER: builtins.int
    REQUESTS_PER_TIME_UNIT_FIELD_NUMBER: builtins.int
    TOKEN_BUCKET_FIELD_NUMBER: builtins.int
    blanket_rule: global___RateLimitStrategy.BlanketRule.ValueType
    """Allow or Deny the requests.
    If unset, allow all.
    """
    @property
    def requests_per_time_unit(self) -> global___RateLimitStrategy.RequestsPerTimeUnit:
        """Best-effort limit of the number of requests per time unit, f.e. requests per second.
        Does not prescribe any specific rate limiting algorithm, see :ref:`RequestsPerTimeUnit
        <envoy_v3_api_msg_type.v3.RateLimitStrategy.RequestsPerTimeUnit>` for details.
        """

    @property
    def token_bucket(self) -> envoy.type.v3.token_bucket_pb2.TokenBucket:
        """Limit the requests by consuming tokens from the Token Bucket.
        Allow the same number of requests as the number of tokens available in
        the token bucket.
        """

    def __init__(
        self,
        *,
        blanket_rule: global___RateLimitStrategy.BlanketRule.ValueType = ...,
        requests_per_time_unit: global___RateLimitStrategy.RequestsPerTimeUnit | None = ...,
        token_bucket: envoy.type.v3.token_bucket_pb2.TokenBucket | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["blanket_rule", b"blanket_rule", "requests_per_time_unit", b"requests_per_time_unit", "strategy", b"strategy", "token_bucket", b"token_bucket"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["blanket_rule", b"blanket_rule", "requests_per_time_unit", b"requests_per_time_unit", "strategy", b"strategy", "token_bucket", b"token_bucket"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["strategy", b"strategy"]) -> typing.Literal["blanket_rule", "requests_per_time_unit", "token_bucket"] | None: ...

global___RateLimitStrategy = RateLimitStrategy
