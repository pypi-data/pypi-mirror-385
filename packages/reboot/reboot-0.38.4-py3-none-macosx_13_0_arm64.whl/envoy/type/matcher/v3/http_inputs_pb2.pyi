"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class HttpRequestHeaderMatchInput(google.protobuf.message.Message):
    """[#protodoc-title: Common HTTP inputs]

    Match input indicates that matching should be done on a specific request header.
    The resulting input string will be all headers for the given key joined by a comma,
    e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
    string will be 'bar,baz'.
    [#comment:TODO(snowp): Link to unified matching docs.]
    [#extension: envoy.matching.inputs.request_headers]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HEADER_NAME_FIELD_NUMBER: builtins.int
    header_name: builtins.str
    """The request header to match on."""
    def __init__(
        self,
        *,
        header_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["header_name", b"header_name"]) -> None: ...

global___HttpRequestHeaderMatchInput = HttpRequestHeaderMatchInput

@typing.final
class HttpRequestTrailerMatchInput(google.protobuf.message.Message):
    """Match input indicates that matching should be done on a specific request trailer.
    The resulting input string will be all headers for the given key joined by a comma,
    e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
    string will be 'bar,baz'.
    [#comment:TODO(snowp): Link to unified matching docs.]
    [#extension: envoy.matching.inputs.request_trailers]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HEADER_NAME_FIELD_NUMBER: builtins.int
    header_name: builtins.str
    """The request trailer to match on."""
    def __init__(
        self,
        *,
        header_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["header_name", b"header_name"]) -> None: ...

global___HttpRequestTrailerMatchInput = HttpRequestTrailerMatchInput

@typing.final
class HttpResponseHeaderMatchInput(google.protobuf.message.Message):
    """Match input indicating that matching should be done on a specific response header.
    The resulting input string will be all headers for the given key joined by a comma,
    e.g. if the response contains two 'foo' headers with value 'bar' and 'baz', the input
    string will be 'bar,baz'.
    [#comment:TODO(snowp): Link to unified matching docs.]
    [#extension: envoy.matching.inputs.response_headers]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HEADER_NAME_FIELD_NUMBER: builtins.int
    header_name: builtins.str
    """The response header to match on."""
    def __init__(
        self,
        *,
        header_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["header_name", b"header_name"]) -> None: ...

global___HttpResponseHeaderMatchInput = HttpResponseHeaderMatchInput

@typing.final
class HttpResponseTrailerMatchInput(google.protobuf.message.Message):
    """Match input indicates that matching should be done on a specific response trailer.
    The resulting input string will be all headers for the given key joined by a comma,
    e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
    string will be 'bar,baz'.
    [#comment:TODO(snowp): Link to unified matching docs.]
    [#extension: envoy.matching.inputs.response_trailers]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HEADER_NAME_FIELD_NUMBER: builtins.int
    header_name: builtins.str
    """The response trailer to match on."""
    def __init__(
        self,
        *,
        header_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["header_name", b"header_name"]) -> None: ...

global___HttpResponseTrailerMatchInput = HttpResponseTrailerMatchInput

@typing.final
class HttpRequestQueryParamMatchInput(google.protobuf.message.Message):
    """Match input indicates that matching should be done on a specific query parameter.
    The resulting input string will be the first query parameter for the value
    'query_param'.
    [#extension: envoy.matching.inputs.query_params]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    QUERY_PARAM_FIELD_NUMBER: builtins.int
    query_param: builtins.str
    """The query parameter to match on."""
    def __init__(
        self,
        *,
        query_param: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["query_param", b"query_param"]) -> None: ...

global___HttpRequestQueryParamMatchInput = HttpRequestQueryParamMatchInput
