"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import envoy.config.core.v3.config_source_pb2
import envoy.config.core.v3.grpc_service_pb2
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class MetricsServiceConfig(google.protobuf.message.Message):
    """[#protodoc-title: Metrics service]

    Metrics Service is configured as a built-in ``envoy.stat_sinks.metrics_service`` :ref:`StatsSink
    <envoy_v3_api_msg_config.metrics.v3.StatsSink>`. This opaque configuration will be used to create
    Metrics Service.

    Example:

    .. code-block:: yaml

        stats_sinks:
          - name: envoy.stat_sinks.metrics_service
            typed_config:
              "@type": type.googleapis.com/envoy.config.metrics.v3.MetricsServiceConfig
              transport_api_version: V3

    [#extension: envoy.stat_sinks.metrics_service]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRPC_SERVICE_FIELD_NUMBER: builtins.int
    TRANSPORT_API_VERSION_FIELD_NUMBER: builtins.int
    REPORT_COUNTERS_AS_DELTAS_FIELD_NUMBER: builtins.int
    EMIT_TAGS_AS_LABELS_FIELD_NUMBER: builtins.int
    transport_api_version: envoy.config.core.v3.config_source_pb2.ApiVersion.ValueType
    """API version for metric service transport protocol. This describes the metric service gRPC
    endpoint and version of messages used on the wire.
    """
    emit_tags_as_labels: builtins.bool
    """If true, metrics will have their tags emitted as labels on the metrics objects sent to the MetricsService,
    and the tag extracted name will be used instead of the full name, which may contain values used by the tag
    extractor or additional tags added during stats creation.
    """
    @property
    def grpc_service(self) -> envoy.config.core.v3.grpc_service_pb2.GrpcService:
        """The upstream gRPC cluster that hosts the metrics service."""

    @property
    def report_counters_as_deltas(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """If true, counters are reported as the delta between flushing intervals. Otherwise, the current
        counter value is reported. Defaults to false.
        Eventually (https://github.com/envoyproxy/envoy/issues/10968) if this value is not set, the
        sink will take updates from the :ref:`MetricsResponse <envoy_v3_api_msg_service.metrics.v3.StreamMetricsResponse>`.
        """

    def __init__(
        self,
        *,
        grpc_service: envoy.config.core.v3.grpc_service_pb2.GrpcService | None = ...,
        transport_api_version: envoy.config.core.v3.config_source_pb2.ApiVersion.ValueType = ...,
        report_counters_as_deltas: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        emit_tags_as_labels: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["grpc_service", b"grpc_service", "report_counters_as_deltas", b"report_counters_as_deltas"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["emit_tags_as_labels", b"emit_tags_as_labels", "grpc_service", b"grpc_service", "report_counters_as_deltas", b"report_counters_as_deltas", "transport_api_version", b"transport_api_version"]) -> None: ...

global___MetricsServiceConfig = MetricsServiceConfig
