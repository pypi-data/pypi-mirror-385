"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import envoy.config.endpoint.v3.endpoint_components_pb2
import envoy.type.v3.percent_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ClusterLoadAssignment(google.protobuf.message.Message):
    """[#protodoc-title: Endpoint configuration]
    Endpoint discovery :ref:`architecture overview <arch_overview_service_discovery_types_eds>`

    Each route from RDS will map to a single cluster or traffic split across
    clusters using weights expressed in the RDS WeightedCluster.

    With EDS, each cluster is treated independently from a LB perspective, with
    LB taking place between the Localities within a cluster and at a finer
    granularity between the hosts within a locality. The percentage of traffic
    for each endpoint is determined by both its load_balancing_weight, and the
    load_balancing_weight of its locality. First, a locality will be selected,
    then an endpoint within that locality will be chose based on its weight.
    [#next-free-field: 6]
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Policy(google.protobuf.message.Message):
        """Load balancing policy settings.
        [#next-free-field: 6]
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class DropOverload(google.protobuf.message.Message):
            """[#not-implemented-hide:]"""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            CATEGORY_FIELD_NUMBER: builtins.int
            DROP_PERCENTAGE_FIELD_NUMBER: builtins.int
            category: builtins.str
            """Identifier for the policy specifying the drop."""
            @property
            def drop_percentage(self) -> envoy.type.v3.percent_pb2.FractionalPercent:
                """Percentage of traffic that should be dropped for the category."""

            def __init__(
                self,
                *,
                category: builtins.str = ...,
                drop_percentage: envoy.type.v3.percent_pb2.FractionalPercent | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["drop_percentage", b"drop_percentage"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["category", b"category", "drop_percentage", b"drop_percentage"]) -> None: ...

        DROP_OVERLOADS_FIELD_NUMBER: builtins.int
        OVERPROVISIONING_FACTOR_FIELD_NUMBER: builtins.int
        ENDPOINT_STALE_AFTER_FIELD_NUMBER: builtins.int
        @property
        def drop_overloads(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ClusterLoadAssignment.Policy.DropOverload]:
            """Action to trim the overall incoming traffic to protect the upstream
            hosts. This action allows protection in case the hosts are unable to
            recover from an outage, or unable to autoscale or unable to handle
            incoming traffic volume for any reason.

            At the client each category is applied one after the other to generate
            the 'actual' drop percentage on all outgoing traffic. For example:

            .. code-block:: json

             { "drop_overloads": [
                 { "category": "throttle", "drop_percentage": 60 }
                 { "category": "lb", "drop_percentage": 50 }
             ]}

            The actual drop percentages applied to the traffic at the clients will be
               "throttle"_drop = 60%
               "lb"_drop = 20%  // 50% of the remaining 'actual' load, which is 40%.
               actual_outgoing_load = 20% // remaining after applying all categories.
            [#not-implemented-hide:]
            """

        @property
        def overprovisioning_factor(self) -> google.protobuf.wrappers_pb2.UInt32Value:
            """Priority levels and localities are considered overprovisioned with this
            factor (in percentage). This means that we don't consider a priority
            level or locality unhealthy until the fraction of healthy hosts
            multiplied by the overprovisioning factor drops below 100.
            With the default value 140(1.4), Envoy doesn't consider a priority level
            or a locality unhealthy until their percentage of healthy hosts drops
            below 72%. For example:

            .. code-block:: json

             { "overprovisioning_factor": 100 }

            Read more at :ref:`priority levels <arch_overview_load_balancing_priority_levels>` and
            :ref:`localities <arch_overview_load_balancing_locality_weighted_lb>`.
            """

        @property
        def endpoint_stale_after(self) -> google.protobuf.duration_pb2.Duration:
            """The max time until which the endpoints from this assignment can be used.
            If no new assignments are received before this time expires the endpoints
            are considered stale and should be marked unhealthy.
            Defaults to 0 which means endpoints never go stale.
            """

        def __init__(
            self,
            *,
            drop_overloads: collections.abc.Iterable[global___ClusterLoadAssignment.Policy.DropOverload] | None = ...,
            overprovisioning_factor: google.protobuf.wrappers_pb2.UInt32Value | None = ...,
            endpoint_stale_after: google.protobuf.duration_pb2.Duration | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["endpoint_stale_after", b"endpoint_stale_after", "overprovisioning_factor", b"overprovisioning_factor"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["drop_overloads", b"drop_overloads", "endpoint_stale_after", b"endpoint_stale_after", "overprovisioning_factor", b"overprovisioning_factor"]) -> None: ...

    @typing.final
    class NamedEndpointsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> envoy.config.endpoint.v3.endpoint_components_pb2.Endpoint: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: envoy.config.endpoint.v3.endpoint_components_pb2.Endpoint | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    CLUSTER_NAME_FIELD_NUMBER: builtins.int
    ENDPOINTS_FIELD_NUMBER: builtins.int
    NAMED_ENDPOINTS_FIELD_NUMBER: builtins.int
    POLICY_FIELD_NUMBER: builtins.int
    cluster_name: builtins.str
    """Name of the cluster. This will be the :ref:`service_name
    <envoy_v3_api_field_config.cluster.v3.Cluster.EdsClusterConfig.service_name>` value if specified
    in the cluster :ref:`EdsClusterConfig
    <envoy_v3_api_msg_config.cluster.v3.Cluster.EdsClusterConfig>`.
    """
    @property
    def endpoints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.endpoint.v3.endpoint_components_pb2.LocalityLbEndpoints]:
        """List of endpoints to load balance to."""

    @property
    def named_endpoints(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, envoy.config.endpoint.v3.endpoint_components_pb2.Endpoint]:
        """Map of named endpoints that can be referenced in LocalityLbEndpoints.
        [#not-implemented-hide:]
        """

    @property
    def policy(self) -> global___ClusterLoadAssignment.Policy:
        """Load balancing policy settings."""

    def __init__(
        self,
        *,
        cluster_name: builtins.str = ...,
        endpoints: collections.abc.Iterable[envoy.config.endpoint.v3.endpoint_components_pb2.LocalityLbEndpoints] | None = ...,
        named_endpoints: collections.abc.Mapping[builtins.str, envoy.config.endpoint.v3.endpoint_components_pb2.Endpoint] | None = ...,
        policy: global___ClusterLoadAssignment.Policy | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["policy", b"policy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cluster_name", b"cluster_name", "endpoints", b"endpoints", "named_endpoints", b"named_endpoints", "policy", b"policy"]) -> None: ...

global___ClusterLoadAssignment = ClusterLoadAssignment
