[project]
name = "petsard"
version = "1.9.0"
description = "Facilitates data generation algorithm and their evaluation processes"
authors = [{ name = "matheme-justyn", email = "matheme.justyn@gmail.com" }]
keywords = [
    "petsard",
    "data preprocessing",
    "data generation",
    "data evaluation",
    "synthetic data",
    "privacy",
    "privacy enhancing technologies",
    "PETS",
    "anonymization",
    "differential privacy",
    "data science",
    "machine learning",
]
readme = "README.md" # PyPI 專案頁面顯示的 README 文件
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Natural Language :: English",
    "Natural Language :: Chinese (Traditional)",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Legal Industry",
]
requires-python = ">=3.10,<3.12" # Python 3.12 目前仍被 anonymeter 衝突限制

# 核心依賴（pip install petsard 時自動安裝）
# Core dependencies (automatically installed with pip install petsard)
# 包含 exec + load-benchmark + syn + eval 群組的所有依賴
# Includes all dependencies from exec + load-benchmark + syn + eval groups
dependencies = [
    # exec group - 執行功能
    "pandas>=2.3.2,<3",
    "pyyaml>=6.0.2,<7",
    "numpy>=1.26.4,<2",
    "python-dateutil>=2.9.0.post0,<3",
    "pytz>=2025.2",
    "tzdata>=2025.2",
    # load-benchmark group - 基準資料集支援
    "requests>=2.32.5,<3",
    # eval group - 隱私風險評估功能
    "anonymeter>=1.0.0,<2",
    "sdmetrics>=0.23.0,<1",
    "xgboost>=3.0.5",
    "imblearn>=0.0",
    "scikit-learn>=1.7.1,<2",
    "joblib>=1.5.2,<2",
    "numba>=0.61.2,<1",
    "plotly>=6.3.0,<7",
    "scipy>=1.15.3,<2 ; python_full_version < '3.11'",
    "scipy>=1.16.0,<2 ; python_full_version >= '3.11'",
    # syn group - 合成資料生成功能
    "sdv>=1.26.0,<2",
    "torch>=2.8.0,<3",
    "boto3>=1.40.25,<2",
    "botocore>=1.40.25,<2",
    "faker>=37.6.0,<38",
    "filelock>=3.19.1,<4",
    "narwhals>=1.45.0,<3",
    "platformdirs>=4.4.0,<5",
    "s3transfer>=0.13.1,<1",
    "threadpoolctl>=3.6.0,<4",
    "typing-extensions>=4.15.0,<5",
    "urllib3>=2.5.0,<3",
    "fsspec>=2025.9.0",
    "jinja2>=3.1.6,<4",
    "networkx>=3.4.2,<3.5 ; python_full_version < '3.11'",
    "networkx>=3.5,<4 ; python_full_version >= '3.11'",
    "nvidia-cublas-cu12>=12.6.4.1,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cuda-cupti-cu12>=12.6.80,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cuda-nvrtc-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cuda-runtime-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cudnn-cu12>=9.5.1.17,<10 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cufft-cu12>=11.3.0.4,<12 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cufile-cu12>=1.11.1.6,<2 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-curand-cu12>=10.3.7.77,<11 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cusolver-cu12>=11.7.1.2,<12 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cusparse-cu12>=12.5.4.2,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cusparselt-cu12>=0.6.3,<1 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-nccl-cu12>=2.26.2,<3 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-nvjitlink-cu12>=12.6.85,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-nvtx-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "sympy>=1.14.0,<2",
    "triton>=3.4.0,<4 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
]

[project.urls]
Repository = "https://github.com/nics-tw/petsard"
Documentation = "https://nics-tw.github.io/petsard/"
"Bug Tracker" = "https://github.com/nics-tw/petsard/issues"

# 依賴群組設定
# Dependency Groups Configuration
[dependency-groups]

# 標準功能群組（預設安裝）
# Standard functionality group (default installation)
default = [
    {include-group = "exec"},
    {include-group = "load-benchmark"},
    {include-group = "syn"},
    {include-group = "eval"},
]

# 資料科學功能群組
# Data science functionality group
ds = [
    {include-group = "default"},
    {include-group = "jupyter"},
]

# 完整功能群組
# Full functionality group
all = [
    {include-group = "ds"},
    {include-group = "load-xlsx"},
]

# 開發功能群組
# Development functionality group
dev = [
    {include-group = "all"},
    {include-group = "dev-tools"},
]

# 執行功能群組 / Execution functionality group
exec = [
    "pandas>=2.3.2,<3",   # 資料操作與分析
    "pyyaml>=6.0.2,<7",   # YAML 配置檔支援
    ###### Core lib above, SBOM related below ######
    # pandas dependencies
    "numpy>=1.26.4,<2",
    "python-dateutil>=2.9.0.post0,<3",
    "pytz>=2025.2",
    "tzdata>=2025.2",
]

# 基準資料集支援
# Benchmark dataset support
load-benchmark = [
    "requests>=2.32.5,<3",   # HTTP 請求下載資料集
]

# 隱私風險評估功能
# Privacy risk evaluation functionality
eval = [
    "anonymeter>=1.0.0,<2",   # 隱私風險評估
    "sdmetrics>=0.23.0,<1",   # 合成資料品質指標
    "xgboost>=3.0.5",         # 實用性評估
    "imblearn>=0.0",          # 不平衡資料處理
    ###### Core lib above, SBOM related below ######
    # anonymeter, sdmetrics dependencies
    "numpy>=1.26.4,<2",
    "scikit-learn>=1.7.1,<2",
    # anonymeter dependencies
    "joblib>=1.5.2,<2",
    "numba>=0.61.2,<1",
    # sdmetrics dependencies
    "plotly>=6.3.0,<7",
    "scipy>=1.15.3,<2 ; python_full_version < '3.11'",
    "scipy>=1.16.0,<2 ; python_full_version >= '3.11'",
]

# 合成資料生成功能
# Synthetic data generation functionality
syn = [
    "sdv>=1.26.0,<2",    # 合成資料生成
    "torch>=2.8.0,<3",   # PyTorch 深度學習模型
    ###### Core lib above, SBOM related below ######
    # sdv, torch dependencies
    "numpy>=1.26.4,<2",
    "pytz>=2025.2",
    "scipy>=1.15.3,<2 ; python_full_version < '3.11'",
    "scipy>=1.16.0,<2 ; python_full_version >= '3.11'",
    "tzdata>=2025.2",
    # sdv dependencies
    "boto3>=1.40.25,<2",
    "botocore>=1.40.25,<2",
    "faker>=37.6.0,<38",
    "filelock>=3.19.1,<4",
    "joblib>=1.5.2,<2",
    "narwhals>=1.45.0,<3",
    "numba>=0.61.2,<1",
    "platformdirs>=4.4.0,<5",
    "plotly>=6.3.0,<7",
    "s3transfer>=0.13.1,<1",
    "threadpoolctl>=3.6.0,<4",
    "typing-extensions>=4.15.0,<5",
    "urllib3>=2.5.0,<3",
    # torch dependencies
    "fsspec>=2025.9.0",
    "jinja2>=3.1.6,<4",
    "networkx>=3.4.2,<3.5 ; python_full_version < '3.11'",
    "networkx>=3.5,<4 ; python_full_version >= '3.11'",
    "nvidia-cublas-cu12>=12.6.4.1,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cuda-cupti-cu12>=12.6.80,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cuda-nvrtc-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cuda-runtime-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cudnn-cu12>=9.5.1.17,<10 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cufft-cu12>=11.3.0.4,<12 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cufile-cu12>=1.11.1.6,<2 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-curand-cu12>=10.3.7.77,<11 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cusolver-cu12>=11.7.1.2,<12 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cusparse-cu12>=12.5.4.2,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-cusparselt-cu12>=0.6.3,<1 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-nccl-cu12>=2.26.2,<3 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-nvjitlink-cu12>=12.6.85,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "nvidia-nvtx-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
    "sympy>=1.14.0,<2",
    "triton>=3.4.0,<4 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
]

# Jupyter 筆記本支援
# Jupyter notebook support
jupyter = [
    "ipykernel>=6.30.1,<7",                                 # Jupyter 核心支援
    "ipython>=8.3.0,<9 ; python_full_version < '3.11'",     # IPython（Python 3.10 版本）
    "ipython>=9.4.0,<10 ; python_full_version >= '3.11'",   # IPython（Python 3.11+ 版本）
    "jupyterlab>=4.4.7,<5",                                 # JupyterLab 支援
    "notebook>=7.4.5,<8",                                   # Jupyter Notebook 支援
    "pyzmq>=27.0.2,<28",                                    # Jupyter 訊息傳遞
    ###### Core lib above, SBOM related below ######
    # ipykernel dependencies
    "debugpy>=1.8.16,<2",
    # ipython dependencies
    "decorator>=5.2.1,<6",
    "ipython-pygments-lexers>=1.1.1,<2 ; python_version >= '3.11'",
    "prompt-toolkit>=3.0.52,<4",
    # jupyterlab dependencies
    "psutil>=7.0.0,<8",
]

# Excel 檔案支援
# Excel file support
load-xlsx = [
    "openpyxl>=3.1.5,<4",   # Excel 檔案讀寫
]

# 開發工具
# Development tools
dev-tools = [
    "pip-audit>=2.7.3",                  # 安全稽核工具
    "pytest>=8.4.2",                     # 測試框架
    "pytest-cov>=6.3.0",                 # 測試覆蓋率報告
    "python-semantic-release>=10.3.2",   # 發布自動化
    "ruff>=0.12.12",                     # 程式碼檢查與格式化
    "trove-classifiers>=2025.8.26.11",   # PyPI 分類器
]

# PyPI 向下相容：optional-dependencies（舊版 pip 使用）
# Backward compatibility for PyPI: optional-dependencies (for older pip)
# 注意：核心依賴已在 [project.dependencies] 中定義，這裡只列出額外功能
# Note: Core dependencies are defined in [project.dependencies], only additional features listed here
[project.optional-dependencies]
# Jupyter 支援（適用於 Docker 環境中使用 Jupyter）
# Jupyter support (for use in Docker environments)
jupyter = [
    "ipykernel>=6.30.1,<7",
    "ipython>=8.3.0,<9 ; python_full_version < '3.11'",
    "ipython>=9.4.0,<10 ; python_full_version >= '3.11'",
    "jupyterlab>=4.4.7,<5",
    "notebook>=7.4.5,<8",
    "pyzmq>=27.0.2,<28",
    "debugpy>=1.8.16,<2",
    "decorator>=5.2.1,<6",
    "ipython-pygments-lexers>=1.1.1,<2 ; python_version >= '3.11'",
    "prompt-toolkit>=3.0.52,<4",
    "psutil>=7.0.0,<8",
]
# Excel 檔案支援
# Excel file support
excel = [
    "openpyxl>=3.1.5,<4",
]
# 資料科學功能（向下相容，等同於 jupyter）
# Data science functionality (backward compatible, equivalent to jupyter)
ds = [
    "ipykernel>=6.30.1,<7",
    "ipython>=8.3.0,<9 ; python_full_version < '3.11'",
    "ipython>=9.4.0,<10 ; python_full_version >= '3.11'",
    "jupyterlab>=4.4.7,<5",
    "notebook>=7.4.5,<8",
    "pyzmq>=27.0.2,<28",
    "debugpy>=1.8.16,<2",
    "decorator>=5.2.1,<6",
    "ipython-pygments-lexers>=1.1.1,<2 ; python_version >= '3.11'",
    "prompt-toolkit>=3.0.52,<4",
    "psutil>=7.0.0,<8",
]
# 完整功能（Jupyter + Excel）
# Full functionality (Jupyter + Excel)
all = [
    "ipykernel>=6.30.1,<7",
    "ipython>=8.3.0,<9 ; python_full_version < '3.11'",
    "ipython>=9.4.0,<10 ; python_full_version >= '3.11'",
    "jupyterlab>=4.4.7,<5",
    "notebook>=7.4.5,<8",
    "pyzmq>=27.0.2,<28",
    "debugpy>=1.8.16,<2",
    "decorator>=5.2.1,<6",
    "ipython-pygments-lexers>=1.1.1,<2 ; python_version >= '3.11'",
    "prompt-toolkit>=3.0.52,<4",
    "psutil>=7.0.0,<8",
    "openpyxl>=3.1.5,<4",
]
# 開發工具（完整功能 + 開發與測試工具）
# Development tools (full functionality + development and testing tools)
dev = [
    "ipykernel>=6.30.1,<7",
    "ipython>=8.3.0,<9 ; python_full_version < '3.11'",
    "ipython>=9.4.0,<10 ; python_full_version >= '3.11'",
    "jupyterlab>=4.4.7,<5",
    "notebook>=7.4.5,<8",
    "pyzmq>=27.0.2,<28",
    "debugpy>=1.8.16,<2",
    "decorator>=5.2.1,<6",
    "ipython-pygments-lexers>=1.1.1,<2 ; python_version >= '3.11'",
    "prompt-toolkit>=3.0.52,<4",
    "psutil>=7.0.0,<8",
    "openpyxl>=3.1.5,<4",
    "pip-audit>=2.7.3",
    "pytest>=8.4.2",
    "pytest-cov>=6.3.0",
    "python-semantic-release>=10.3.2",
    "ruff>=0.12.12",
    "trove-classifiers>=2025.8.26.11",
]

# 建置系統設定
# Build system configuration
[build-system]
requires = ["uv_build>=0.8.15,<0.10.0"]
build-backend = "uv_build"

# uv 建置後端設定
# uv build backend configuration
[tool.uv.build-backend]
module-name = "petsard"  # 模組名稱
module-root = ""         # 模組根目錄（空字串表示專案根目錄）

# 程式碼品質檢查設定
# Code quality checking configuration
[tool.ruff]
line-length = 88          # 行長度限制
target-version = "py311"  # 目標 Python 版本

# 選擇要檢查的規則
# Select rules to check
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

# 忽略的規則
# Ignored rules
lint.ignore = [
    "E501", # 行長度限制（已在 line-length 設定）
    "UP038", # 已預訂於未來版本移除
]

# 程式碼格式化設定
# Code formatting configuration
[tool.ruff.format]
quote-style = "double"                # 引號樣式
indent-style = "space"                # 縮排樣式
skip-magic-trailing-comma = false     # 不跳過魔法尾隨逗號
line-ending = "auto"                  # 自動偵測行結尾

# 語意化版本發布設定
# Semantic versioning release configuration
[tool.semantic_release]
tag_format = "v{version}"         # 版本標籤格式
major_on_zero = false             # 不允許 0.x.x 版本作為主版本
allow_zero_version = false        # 不允許 0.x.x 版本
build_command = ""                # 建置指令（在 GitHub Actions 中處理）
assets = []                       # 附加檔案
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"    # 提交訊息解析器
logging_use_named_masks = false   # 日誌輸出設定
commit = true                     # 確保提交版本變更
push = true                       # 確保推送版本變更
no_git_verify = false             # Git 提交驗證

# 發布分支設定
# Release branch configuration

# main 分支：正式發布版本
# main branch: production releases
[tool.semantic_release.branches.main]
match = "main"        # 分支匹配模式
prerelease = false    # 不建立預發布版本

# dev 分支：預發布版本
# dev branch: pre-release versions
[tool.semantic_release.branches.dev]
match = "dev"             # 分支匹配模式
prerelease = true         # 建立預發布版本
prerelease_token = "rc"   # 預發布標記（將生成符合 PEP 440 的 1.7.0rc1 格式）

# 變更日誌生成設定
# Changelog generation configuration
[tool.semantic_release.changelog]
template_dir = ".release/changelog-templates"  # 變更日誌模板目錄
exclude_commit_patterns = []    # 排除的提交模式
mode = "update"                 # 更新模式
insertion_flag = "<!-- version list -->"  # 插入標記

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"  # 變更日誌檔案路徑
output_format = "md"             # 輸出格式
mask_initial_release = true      # 遮蔽初始發佈

# 模板引擎設定
# Template engine configuration
[tool.semantic_release.changelog.environment]
block_start_string = "{%"         # 模板區塊起始符號
block_end_string = "%}"           # 模板區塊結束符號
variable_start_string = "{{"      # 變數起始符號
variable_end_string = "}}"        # 變數結束符號
comment_start_string = "{#"       # 註解起始符號
comment_end_string = "#}"         # 註解結束符號
trim_blocks = false               # 是否移除尾隨換行
lstrip_blocks = false             # 是否移除前導空白
newline_sequence = "\n"           # 換行符號
keep_trailing_newline = false     # 保留尾隨換行
extensions = []                   # 附加模板擴展
autoescape = true                 # 自動轉義變數

# 提交作者設定
# Commit author configuration
[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"                       # 環境變數名稱
default = "semantic-release <semantic-release>" # 預設作者

# 提交訊息解析設定
# Commit message parsing configuration
[tool.semantic_release.commit_parser_options]
allowed_tags = [ # 支援的提交類型
    "feat",     # 新功能
    "fix",      # 錯誤修復
    "docs",     # 僅文檔變更
    "style",    # 不影響代碼含義的變更
    "refactor", # 既不修復錯誤也不增加功能的代碼變更
    "perf",     # 提高性能的代碼變更
    "test",     # 增加或修正現有測試
    "chore",    # 構建過程或輔助工具的變更
    "build",    # 影響構建系統的變更
    "ci",       # CI 配置文件和腳本的變更
]
minor_tags = ["feat"]          # 觸發次版本更新的類型
patch_tags = [                 # 觸發修補版本更新的類型
    "fix",      # 錯誤修復
    "perf",     # 性能改進
    "docs",     # 文檔變更
    "style",    # 代碼格式（不影響邏輯）
    "refactor", # 代碼重構
    "test",     # 測試相關
    "chore",    # 維護性變更
    "build",    # 構建系統
    "ci",       # CI 配置
]
default_bump_level = 0         # 預設更新級別 (0: patch, 1: minor, 2: major)

# GitHub 倉庫設定
# GitHub repository configuration
[tool.semantic_release.remote]
name = "origin"               # 遠端名稱
type = "github"               # 倉庫類型
ignore_token_for_push = false # 推送時不忽略認證令牌

# GitHub 認證令牌設定
# GitHub authentication token configuration
[tool.semantic_release.remote.token]
env = "GITHUB_TOKEN"  # 環境變數名稱

# 版本設定
# Version configuration
[tool.semantic_release.version]
source = "commit"  # 從提交訊息自動決定版本
version_toml = [
    "pyproject.toml:project.version"  # 自動更新檔案中的版本
]
# 確保版本格式符合 PEP 440
# Ensure version format complies with PEP 440
# 版本範例：
#   正式版本: 1.7.0
#   預發布版本: 1.7.0rc1, 1.7.0rc2 (符合 PEP 440，無連字符)

# 發布設定
# Publishing configuration
[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]  # 發布檔案模式
upload_to_vcs_release = true     # 上傳到版本控制系統

# 測試框架設定
# Testing framework configuration
[tool.pytest.ini_options]
markers = [
    "stress: Stress test marker, used to identify tests requiring significant resources",
    "stress_zh: 壓力測試標記，用於標識需要大量資源的測試",
    "excel: Excel file test marker, used to identify tests requiring openpyxl",
    "excel_zh: Excel 檔案測試標記，用於標識需要 openpyxl 的測試"
]
testpaths = ["tests"]         # 測試路徑
python_files = ["test_*.py"]  # Python 測試檔案模式
python_classes = ["Test*"]    # Python 測試類別模式
python_functions = ["test_*"] # Python 測試函數模式
addopts = "-v --tb=short"     # 額外選項

# 測試覆蓋率設定
# Test coverage configuration
[tool.coverage.run]
source = ["petsard"]  # 覆蓋率來源目錄
omit = [              # 排除的檔案模式
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [     # 排除的程式行
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
show_missing = true   # 顯示遺漏的行
precision = 2         # 精確度
