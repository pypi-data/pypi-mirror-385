# yaml-language-server: $schema=../../schemas/model_config_schema.json


schemas:
  retail_schema: &retail_schema
    catalog_name: nfleming                    # Unity Catalog name
    schema_name: retail_ai                    # Schema within the catalog

  quick_serve_retaurant_schema: &quick_serve_retaurant_schema
    catalog_name: retail_consumer_goods                    # Unity Catalog name
    schema_name: quick_serve_restaurant                    # Schema within the catalog

resources:
  llms:
    # Primary LLM for general tasks
    default_llm: &default_llm
      name: databricks-claude-3-7-sonnet # Databricks serving endpoint name
      temperature: 0.1                              # Low temperature for consistent responses
      max_tokens: 8192                              # Maximum tokens per response
      on_behalf_of_user: False
      fallbacks:                                  # Fallback LLMs in case of issues
        - databricks-claude-sonnet-4
        - databricks-meta-llama-3-3-70b-instruct

  tables:
    all: 
      schema: *quick_serve_retaurant_schema                        # Reference to schema defined above


  functions:
    all: 
      schema: *quick_serve_retaurant_schema

  databases:
    # PostgreSQL database for agent memory and checkpoints
    retail_database: &retail_database
      name: "retail-consumer-goods"
      description: "Database for agent memory and checkpoints" 
      
      # Database connection parameters
      # These can be set via environment variables or Databricks secrets
      host:                                                 
        default_value: localhost                                             
        options:
          - env: PGHOST                              # Environment variable
          - scope: retail_ai                         # Databricks secret scope
            secret: PGHOST                           # Secret name
      port: 
        default_value: 5432
        options:
        - env: PGPORT 
        - scope: retail_ai
          secret: PGPORT
      database: 
        default_value: databricks_postgres           # Default database name
        options:
        - env: PGDATABASE 
        - scope: retail_ai
          secret: PGDATABASE

      client_id:
        options:
          - env: RETAIL_AI_DATABRICKS_CLIENT_ID      # Service principal client ID
          - scope: retail_ai
            secret: RETAIL_AI_DATABRICKS_CLIENT_ID
      client_secret:
        options:
          - env: RETAIL_AI_DATABRICKS_CLIENT_SECRET  # Service principal secret
          - scope: retail_ai
            secret: RETAIL_AI_DATABRICKS_CLIENT_SECRET
      workspace_host:
        options:
          - env: RETAIL_AI_DATABRICKS_HOST           # Databricks workspace URL
          - scope: retail_ai
            secret: RETAIL_AI_DATABRICKS_HOST

  genie_rooms:
    # Genie space for retail data queries
    retail_genie_room: &retail_genie_room
      name: "Retail AI Genie Room"                        # Human-readable name
      description: "Answer questions about quick serve restaurant, ingredients, inventory, processes and operations."  # Description
      space_id: 01f01c91f1f414d59daaefd2b7ec82ea          # Databricks Genie space ID
      on_behalf_of_user: false

memory: &memory
  # Conversation checkpointing for state persistence
  checkpointer: 
    name: default_checkpointer                      # Checkpointer identifier
    type: postgres                                    # Store type (memory or postgres)
    #type: memory
    database: *retail_database                     # Reference to database configuration

  # Long-term memory store for agent context
  store: 
    name: default_store                             # Store identifier
    type: postgres                                    # Store type (memory or postgres)
    #type: memory
    #embedding_model: *embedding_model               # Model for semantic memory
    #dims: 1536                                      # Embedding dimensions
    database: *retail_database                      # Database for persistence (if needed)
    namespace: "{user_id}"

tools:
  genie_tool: &genie_tool
    name: genie
    function:
      type: factory                                 # Tool type: factory function
      name: dao_ai.tools.create_genie_tool       # Factory function path
      args:                                         # Arguments passed to factory
        name: my_genie_tool
        description: "Answer questions about quick serve restaurant, ingredients, inventory, processes and operations."
        genie_room: *retail_genie_room              # Reference to Genie room config
        persist_conversation: true


agents:
  genie: &genie
    name: genie                                     # Agent identifier
    description: "Genie Agent"
    model: *default_llm                             # Reference to LLM configuration
    tools:                                          # Tools available to this agent
      - *genie_tool
    prompt: |                                       # System prompt defining agent behavior
      Answer questions about quick serve restaurant, ingredients, inventory, processes and operations.


app:
  name: genie_example                      # Application name  
  description: "Multi-agent system that talks to genie"
  log_level: DEBUG                                   # Logging level for the application
  registered_model:                                 # MLflow registered model configuration
    schema: *retail_schema                          # Schema where model will be registered
    name: retail_ai_agenie                          # Model name in MLflow registry
  endpoint_name: retail_ai_genie                    # Model serving endpoint name
  tags:                                             # Tags for resource organization
    business: rcg                                   # Business unit identifier
    streaming: true                                 # Indicates streaming capabilities
  permissions:                                      # Model serving permissions
    - principals: [users]                           # Grant access to all users
      entitlements:
        - CAN_QUERY                                # Full management permissions
  agents:                                           # List of agents included in the system
    - *genie                                        # Order management agent  
  
  orchestration:                                    # Agent orchestration configuration
    memory: *memory                            # Memory store for conversation context
    swarm:                                     # Supervisor orchestration pattern
      model: *default_llm                      # LLM for routing decisions



