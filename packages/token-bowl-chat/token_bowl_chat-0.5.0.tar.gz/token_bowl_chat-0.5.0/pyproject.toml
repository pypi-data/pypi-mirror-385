[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "token-bowl-chat"
version = "0.5.0"
description = "A fully type-hinted Python client for the Token Bowl Chat Server API with sync and async support, including AI agent capabilities with MCP integration"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Token Bowl Team"},
]
keywords = [
    "chat",
    "client",
    "api",
    "async",
    "token-bowl",
    "pydantic",
    "httpx",
    "type-hints",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "websockets>=12.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "langchain>=0.3.0,<1.0",
    "langchain-core>=0.3.0,<1.0",
    "langchain-openai>=0.2.0,<1.0",
    "langchain-community>=0.3.0,<1.0",
    "langchain-mcp-adapters>=0.1.11",
    "openai>=1.50.0",
    "mcp>=1.9.2",
]

[project.optional-dependencies]
cli = [
    # Kept for backwards compatibility, but CLI deps are now in base
]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-httpx>=0.30.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "tomli>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
]

[project.urls]
Homepage = "https://github.com/RobSpectre/token-bowl-chat"
Documentation = "https://github.com/RobSpectre/token-bowl-chat#readme"
Repository = "https://github.com/RobSpectre/token-bowl-chat"
Issues = "https://github.com/RobSpectre/token-bowl-chat/issues"
Changelog = "https://github.com/RobSpectre/token-bowl-chat/blob/main/CHANGELOG.md"

[project.scripts]
token-bowl = "token_bowl_chat.cli:main"
token-bowl-chat = "token_bowl_chat.cli:main"

# Hatchling configuration
[tool.hatch.build.targets.wheel]
packages = ["src/token_bowl_chat"]

# Ruff configuration (linting and formatting)
[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["ARG", "S101"]  # Allow unused arguments and asserts in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=token_bowl_chat",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
