"""
Geode-Common Python binding for metric
"""
from __future__ import annotations
import opengeode.lib64.opengeode_py_geometry
import opengeode.lib64.opengeode_py_mesh
import opengeode.lib64.opengeode_py_model
import typing
__all__: list[str] = ['BRepGridMetric', 'CommonMetricLibrary', 'ConstantMetric2D', 'ConstantMetric3D', 'GridMetric2D', 'GridMetric3D', 'Metric2D', 'Metric3D']
class BRepGridMetric(GridMetric3D):
    def __init__(self, arg0: opengeode.lib64.opengeode_py_model.BRep, arg1: opengeode.lib64.opengeode_py_mesh.Grid3D, arg2: float) -> None:
        ...
    def paint_block(self, arg0: opengeode.lib64.opengeode_py_model.Block3D, arg1: float) -> None:
        ...
class CommonMetricLibrary:
    @staticmethod
    def initialize() -> None:
        ...
class ConstantMetric2D(Metric2D):
    def __init__(self, arg0: float) -> None:
        ...
    def constant_metric(self) -> float:
        ...
class ConstantMetric3D(Metric3D):
    def __init__(self, arg0: float) -> None:
        ...
    def constant_metric(self) -> float:
        ...
class GridMetric2D(Metric2D):
    class Smoothing:
        """
        Members:
        
          ascending
        
          descending
        """
        __members__: typing.ClassVar[dict[str, GridMetric2D.Smoothing]]  # value = {'ascending': <Smoothing.ascending: 0>, 'descending': <Smoothing.descending: 1>}
        ascending: typing.ClassVar[GridMetric2D.Smoothing]  # value = <Smoothing.ascending: 0>
        descending: typing.ClassVar[GridMetric2D.Smoothing]  # value = <Smoothing.descending: 1>
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def __init__(self, arg0: opengeode.lib64.opengeode_py_mesh.Grid2D, arg1: float) -> None:
        ...
    def optimize(self, arg0: float, arg1: GridMetric2D.Smoothing) -> None:
        ...
class GridMetric3D(Metric3D):
    class Smoothing:
        """
        Members:
        
          ascending
        
          descending
        """
        __members__: typing.ClassVar[dict[str, GridMetric3D.Smoothing]]  # value = {'ascending': <Smoothing.ascending: 0>, 'descending': <Smoothing.descending: 1>}
        ascending: typing.ClassVar[GridMetric3D.Smoothing]  # value = <Smoothing.ascending: 0>
        descending: typing.ClassVar[GridMetric3D.Smoothing]  # value = <Smoothing.descending: 1>
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def __init__(self, arg0: opengeode.lib64.opengeode_py_mesh.Grid3D, arg1: float) -> None:
        ...
    def optimize(self, arg0: float, arg1: GridMetric3D.Smoothing) -> None:
        ...
class Metric2D:
    def metric(self, arg0: opengeode.lib64.opengeode_py_geometry.Point2D, arg1: opengeode.lib64.opengeode_py_geometry.Vector2D) -> float:
        ...
class Metric3D:
    def metric(self, arg0: opengeode.lib64.opengeode_py_geometry.Point3D, arg1: opengeode.lib64.opengeode_py_geometry.Vector3D) -> float:
        ...
