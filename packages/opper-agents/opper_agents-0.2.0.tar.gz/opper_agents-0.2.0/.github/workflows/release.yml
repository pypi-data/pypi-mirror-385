name: Release to PyPI

on:
  push:
    branches: [main]
    paths: ['pyproject.toml']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.0, 2.1.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison

      - name: Get version from pyproject.toml
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if version changed
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Manual release triggered"
          else
            # Check if version changed in the last commit
            PREV_VERSION=$(git show HEAD~1:pyproject.toml | grep '^version = ' | sed 's/version = "\(.*\)"/\1/' || echo "")
            CURR_VERSION="${{ steps.version.outputs.version }}"
            
            if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Version changed: $PREV_VERSION ‚Üí $CURR_VERSION"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "Version unchanged: $CURR_VERSION"
            fi
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Update version (if manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Update version in pyproject.toml
          sed -i 's/^version = ".*"/version = "${{ needs.check-version.outputs.version }}"/' pyproject.toml
          
          # Commit the version update and any lock file changes
          git config --global user.name "opper-bot"
          git config --global user.email "bot@opper.ai"
          git add pyproject.toml uv.lock
          git commit -m "chore: bump version to ${{ needs.check-version.outputs.version }}"
          git push

      - name: Verify tests pass
        run: |
          # Run formatting check
          uv run ruff format --check

          # Run linting
          uv run ruff check

          # Run type checking
          uv run mypy src/ || echo "‚ö†Ô∏è Type checking issues found"

          # Run tests
          uv run pytest

      - name: Build package
        run: |
          # Clean any previous builds
          rm -rf dist/
          
          # Build with UV
          uv build
          
          # Verify the build
          ls -la dist/
          
          # Check package metadata
          uv run python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(f\"Package: {data['project']['name']}\")
          print(f\"Version: {data['project']['version']}\")
          print(f\"Description: {data['project']['description']}\")
          "

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Create GitHub Release
        if: github.event.inputs.create_release != 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          TAG_NAME="v$VERSION"
          
          # Create the tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          
          # Generate release notes
          RELEASE_NOTES="$(cat <<EOF
          ## üöÄ Opper Agents v$VERSION

          This release contains the latest updates to the Opper Agents SDK.

          ### üì¶ Installation
          \`\`\`bash
          pip install opper-agents==$VERSION
          # or
          uv add opper-agents==$VERSION
          \`\`\`

          ### üîó Links
          - [PyPI Package](https://pypi.org/project/opper-agents/$VERSION/)
          - [Documentation](https://docs.opper.ai)
          - [GitHub Repository](https://github.com/${{ github.repository }})

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "0.0.0")...v$VERSION
          EOF
          )"

          # Create the release
          gh release create "$TAG_NAME" \
            --title "üöÄ Opper Agents v$VERSION" \
            --notes "$RELEASE_NOTES" \
            --latest \
            dist/*

      - name: Post-release summary
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          echo "üéâ Successfully released Opper Agents v$VERSION"
          echo "üì¶ PyPI: https://pypi.org/project/opper-agents/$VERSION/"
          echo "üè∑Ô∏è GitHub: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

          # Post to PR if this was triggered by a merge
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "‚úÖ Automatic release completed from main branch push"
          else
            echo "‚úÖ Manual release completed"
          fi