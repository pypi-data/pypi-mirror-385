[build-system]
requires = ["hatchling>=1.17.0"]
build-backend = "hatchling.build"

[project]
name = "opper-agents"
version = "0.2.0"
description = "Opper-based agent workflows SDK"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Opper" }]
dependencies = [
  "pydantic>=2.6.0",
  "opperai>=1.2.1",
  "rich>=13.7.0",
  "typing-extensions>=4.9.0",
  "mcp>=1.14.0",
  "pytest-asyncio>=1.1.0",
]

[project.optional-dependencies]
mcp = [
  "aiohttp>=3.8.0", # Required for HTTP-based MCP servers
]
composio = [
  "composio>=0.5.0", # Required for Composio tool integrations
]
dev = [
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-cov>=4.0.0",
  "pytest-xdist>=3.0.0",
  "pytest-mock>=3.10.0",
  "ruff>=0.14.0",
  "mypy>=1.0.0",
  "coverage>=7.0.0",
  "vcrpy==7.0.0",
]

[project.scripts]
test = "run_tests:main"

[tool.hatch.build.targets.wheel]
packages = ["src/opper_agents"]

[tool.hatch.build.targets.wheel.force-include]
"src/opper_agents/py.typed" = "opper_agents/py.typed"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--color=yes",
    "--durations=10"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "mcp: Tests requiring MCP functionality",
    "asyncio: Async tests",
    "example: Tests based on examples"
]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:asyncio",
    "ignore::RuntimeWarning:asyncio"
]

[tool.coverage.run]
source = ["src/opper_agents"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["opper_agent"]
known_third_party = ["pydantic", "opperai", "rich", "typing_extensions"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
