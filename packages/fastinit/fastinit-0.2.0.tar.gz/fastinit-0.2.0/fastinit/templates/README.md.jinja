# {{ project_name }}

A FastAPI application generated with FastInit.

## Features

- ✅ FastAPI framework
{% if use_db %}- ✅ Database integration ({{ db_type }}){% endif %}
{% if use_jwt %}- ✅ JWT authentication with PyJWT and PyJWKClient{% endif %}
{% if use_logging %}- ✅ Structured logging{% endif %}
{% if use_docker %}- ✅ Docker support{% endif %}
- ✅ Health check endpoints
- ✅ Environment-based configuration
- ✅ Auto-generated API documentation

## Setup

### 1. Create virtual environment

```bash
python -m venv venv
```

### 2. Activate virtual environment

**Windows:**
```bash
venv\Scripts\activate
```

**Unix/MacOS:**
```bash
source venv/bin/activate
```

### 3. Install dependencies

Using `uv` (recommended - [install uv](https://docs.astral.sh/uv/)):

```bash
uv sync
```

Or using `pip`:

```bash
pip install -e .
```

### 4. Configure environment

Copy `.env.example` to `.env` and update the values:

```bash
cp .env.example .env
```

{% if use_db %}
Update the `DATABASE_URL` in `.env` with your database credentials.
{% endif %}

{% if use_jwt %}
**Important:** Change the `SECRET_KEY` in `.env` to a secure random value in production!
{% endif %}

### 5. Run the application

Using `fastapi dev` (recommended):

```bash
cd app
fastapi dev main.py
```

Or using `uvicorn` directly:

```bash
cd app
uvicorn main:app --reload
```

The API will be available at `http://localhost:8000`

## API Documentation

Once the application is running, you can access:

- **Swagger UI:** http://localhost:8000/docs
- **ReDoc:** http://localhost:8000/redoc
- **OpenAPI JSON:** http://localhost:8000/openapi.json

## Health Endpoints

- `GET /api/health` - Basic health check
{% if use_db %}- `GET /api/health/db` - Database health check{% endif %}
- `GET /api/health/ready` - Readiness probe
- `GET /api/health/live` - Liveness probe

{% if use_docker %}
## Docker

### Build and run with Docker

```bash
docker build -t {{ project_name }} .
docker run -p 8000:8000 {{ project_name }}
```

### Run with Docker Compose

```bash
docker-compose up
```
{% endif %}

{% if use_db %}
## Database Migrations

This project uses Alembic for database migrations. Alembic is configured to automatically import database settings from your `Settings` class in `app/core/config.py`.

### Initial Setup

The database URL is automatically read from your `.env` file through the `DATABASE_URL` setting. Make sure your `.env` file is configured:

```bash
cp .env.example .env
# Edit .env and update DATABASE_URL
```

### Create a new migration

After modifying your SQLAlchemy models in `app/models/`:

```bash
alembic revision --autogenerate -m "Description of changes"
```

### Apply migrations

```bash
alembic upgrade head
```

### Rollback migration

```bash
alembic downgrade -1
```

### View migration history

```bash
alembic history
```

For more details, see `alembic/README.md`.
{% endif %}

## Project Structure

```
{{ project_name }}/
├── app/
│   ├── __init__.py
│   ├── main.py              # Application entry point
│   ├── api/
│   │   ├── __init__.py
│   │   ├── deps.py          # API dependencies
│   │   └── routes/          # API routes
│   │       ├── __init__.py
│   │       └── health.py    # Health check endpoints
│   ├── core/
│   │   ├── __init__.py
│   │   ├── config.py        # Application settings
{% if use_jwt %}│   │   └── security.py      # JWT authentication{% endif %}
{% if use_db %}│   ├── db/
│   │   ├── __init__.py
│   │   ├── base.py          # SQLAlchemy base
│   │   └── session.py       # Database session
│   ├── models/              # SQLAlchemy models
│   │   └── __init__.py
{% endif %}│   ├── schemas/             # Pydantic schemas
│   │   └── __init__.py
│   └── services/            # Business logic
│       └── __init__.py
{% if use_db %}├── alembic/                 # Database migrations
│   ├── versions/            # Migration scripts
│   ├── env.py               # Alembic environment (auto-imports settings)
│   ├── script.py.mako       # Migration template
│   └── README.md            # Migration documentation
├── alembic.ini              # Alembic configuration
{% endif %}├── tests/
│   └── __init__.py
├── .env.example             # Environment variables template
├── .gitignore
├── pyproject.toml           # Project dependencies and metadata
{% if use_docker %}├── Dockerfile
├── docker-compose.yml
{% endif %}└── README.md
```

## Development

### Adding new endpoints

Use the FastInit CLI to generate new components:

```bash
# Generate a new model
FastInit new model User --fields "name:str,email:str,age:int"

# Generate a new service
FastInit new service UserService --model User

# Generate a new route
FastInit new route users --service UserService

# Or generate everything at once
FastInit new crud User --fields "name:str,email:str,is_active:bool"
```

## License

MIT
