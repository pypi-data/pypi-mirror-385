# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....common.resources.protocol.resources.ldap.ldap_auth_method import LdapAuthMethod
from ....common.resources.protocol.resources.ldap.ldap_server_info import LdapServerInfo
from ....common.resources.protocol.resources.smb.auth_method import AuthMethod
from ....common.resources.protocol.resources.smb.smb_auth_attempt import SmbAuthAttempt
from ....common.resources.protocol.resources.smb.smb_server_info import SmbServerInfo
from ....common.resources.protocol.resources.smb.smb_share import SmbShare
from ....common.resources.protocol.resources.smb.smb_version import SmbVersion
from ....common.resources.protocol.resources.ssh.ssh_server_info import SshServerInfo
from ..grpc.resources.grpc.grpc_service import GrpcService
from ..smtp.resources.smtp.auth_command import AuthCommand


class EnumerateServiceDetails_EnumerateSshDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateSshDetails"] = "EnumerateSshDetails"
    server_info: typing.Optional[SshServerInfo] = pydantic.Field(alias="serverInfo", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateFtpDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateFtpDetails"] = "EnumerateFtpDetails"
    target: str
    successful_connection: typing.Optional[bool] = pydantic.Field(alias="successfulConnection", default=None)
    banner: typing.Optional[str] = None
    tls_implemented: typing.Optional[bool] = pydantic.Field(alias="tlsImplemented", default=None)
    tls_forced: typing.Optional[bool] = pydantic.Field(alias="tlsForced", default=None)
    allows_anonymous_login: typing.Optional[bool] = pydantic.Field(alias="allowsAnonymousLogin", default=None)
    error: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateSmtpDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateSmtpDetails"] = "EnumerateSmtpDetails"
    target: str
    can_connect: typing.Optional[bool] = pydantic.Field(alias="canConnect", default=None)
    tls_supported: typing.Optional[bool] = pydantic.Field(alias="tlsSupported", default=None)
    force_tls: typing.Optional[bool] = pydantic.Field(alias="forceTLS", default=None)
    auth_commands: typing.Optional[typing.List[AuthCommand]] = pydantic.Field(alias="authCommands", default=None)
    allows_unauthenticated_email: typing.Optional[bool] = pydantic.Field(
        alias="allowsUnauthenticatedEmail", default=None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateGrpcDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateGrpcDetails"] = "EnumerateGrpcDetails"
    target: str
    services: typing.List[GrpcService]
    raw_descriptor_set: str = pydantic.Field(alias="rawDescriptorSet")
    reflection_supported: bool = pydantic.Field(alias="reflectionSupported")
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateSmbDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateSmbDetails"] = "EnumerateSmbDetails"
    target: str
    version: typing.Optional[SmbVersion] = None
    supported_versions: typing.Optional[typing.List[SmbVersion]] = pydantic.Field(
        alias="supportedVersions", default=None
    )
    shares: typing.Optional[typing.List[SmbShare]] = None
    auth_methods: typing.Optional[typing.List[AuthMethod]] = pydantic.Field(alias="authMethods", default=None)
    server_info: typing.Optional[SmbServerInfo] = pydantic.Field(alias="serverInfo", default=None)
    anonymous_login_allowed: typing.Optional[bool] = pydantic.Field(alias="anonymousLoginAllowed", default=None)
    guest_login_allowed: typing.Optional[bool] = pydantic.Field(alias="guestLoginAllowed", default=None)
    null_session_allowed: typing.Optional[bool] = pydantic.Field(alias="nullSessionAllowed", default=None)
    signing_required: typing.Optional[bool] = pydantic.Field(alias="signingRequired", default=None)
    encryption_supported: typing.Optional[bool] = pydantic.Field(alias="encryptionSupported", default=None)
    auth_attempts: typing.Optional[typing.List[SmbAuthAttempt]] = pydantic.Field(alias="authAttempts", default=None)
    raw_response: typing.Optional[str] = pydantic.Field(alias="rawResponse", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateLdapDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateLdapDetails"] = "EnumerateLdapDetails"
    target: str
    server_info: typing.Optional[LdapServerInfo] = pydantic.Field(alias="serverInfo", default=None)
    anonymous_bind_allowed: typing.Optional[bool] = pydantic.Field(alias="anonymousBindAllowed", default=None)
    null_bind_allowed: typing.Optional[bool] = pydantic.Field(alias="nullBindAllowed", default=None)
    auth_methods: typing.Optional[typing.List[LdapAuthMethod]] = pydantic.Field(alias="authMethods", default=None)
    base_dn: typing.Optional[str] = pydantic.Field(alias="baseDN", default=None)
    default_naming_context: typing.Optional[str] = pydantic.Field(alias="defaultNamingContext", default=None)
    schema_naming_context: typing.Optional[str] = pydantic.Field(alias="schemaNamingContext", default=None)
    configuration_naming_context: typing.Optional[str] = pydantic.Field(
        alias="configurationNamingContext", default=None
    )
    supported_ldap_version: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedLdapVersion", default=None
    )
    supported_sasl_mechanisms: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedSaslMechanisms", default=None
    )
    supported_capabilities: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="supportedCapabilities", default=None
    )
    raw_response: typing.Optional[str] = pydantic.Field(alias="rawResponse", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


EnumerateServiceDetails = typing.Union[
    EnumerateServiceDetails_EnumerateSshDetails,
    EnumerateServiceDetails_EnumerateFtpDetails,
    EnumerateServiceDetails_EnumerateSmtpDetails,
    EnumerateServiceDetails_EnumerateGrpcDetails,
    EnumerateServiceDetails_EnumerateSmbDetails,
    EnumerateServiceDetails_EnumerateLdapDetails,
]
