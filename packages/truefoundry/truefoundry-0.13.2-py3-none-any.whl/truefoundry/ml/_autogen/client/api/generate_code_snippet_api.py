# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401

from truefoundry.ml._autogen.client.api_client import ApiClient
from truefoundry.ml._autogen.client.api_response import ApiResponse
from truefoundry.ml._autogen.client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from truefoundry.ml._autogen.client.models.create_python_deployment_config_request_dto import (
    CreatePythonDeploymentConfigRequestDto,
)
from truefoundry.ml._autogen.client.models.create_python_deployment_config_response_dto import (
    CreatePythonDeploymentConfigResponseDto,
)
from truefoundry.ml._autogen.client.models.create_workflow_task_config_request_dto import (
    CreateWorkflowTaskConfigRequestDto,
)
from truefoundry.ml._autogen.client.models.trigger_job_run_config_request_dto import (
    TriggerJobRunConfigRequestDto,
)
from truefoundry.ml._autogen.client.models.trigger_job_run_config_response_dto import (
    TriggerJobRunConfigResponseDto,
)
from truefoundry.pydantic_v1 import validate_arguments


class GenerateCodeSnippetApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def generate_py_development_config_post(
        self,
        create_python_deployment_config_request_dto: CreatePythonDeploymentConfigRequestDto,
        **kwargs,
    ) -> CreatePythonDeploymentConfigResponseDto:  # noqa: E501
        """Generate Py Development Config  # noqa: E501

        Generate Python Deployment Config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_py_development_config_post(create_python_deployment_config_request_dto, async_req=True)
        >>> result = thread.get()

        :param create_python_deployment_config_request_dto: (required)
        :type create_python_deployment_config_request_dto: CreatePythonDeploymentConfigRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreatePythonDeploymentConfigResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the generate_py_development_config_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.generate_py_development_config_post_with_http_info(
            create_python_deployment_config_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def generate_py_development_config_post_with_http_info(
        self,
        create_python_deployment_config_request_dto: CreatePythonDeploymentConfigRequestDto,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Generate Py Development Config  # noqa: E501

        Generate Python Deployment Config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_py_development_config_post_with_http_info(create_python_deployment_config_request_dto, async_req=True)
        >>> result = thread.get()

        :param create_python_deployment_config_request_dto: (required)
        :type create_python_deployment_config_request_dto: CreatePythonDeploymentConfigRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreatePythonDeploymentConfigResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_python_deployment_config_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_py_development_config_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_python_deployment_config_request_dto"] is not None:
            _body_params = _params["create_python_deployment_config_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "CreatePythonDeploymentConfigResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/generate-code-snippet/application",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def trigger_job_run_post(
        self,
        trigger_job_run_config_request_dto: TriggerJobRunConfigRequestDto,
        **kwargs,
    ) -> TriggerJobRunConfigResponseDto:  # noqa: E501
        """Trigger Job Run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_job_run_post(trigger_job_run_config_request_dto, async_req=True)
        >>> result = thread.get()

        :param trigger_job_run_config_request_dto: (required)
        :type trigger_job_run_config_request_dto: TriggerJobRunConfigRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TriggerJobRunConfigResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the trigger_job_run_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trigger_job_run_post_with_http_info(
            trigger_job_run_config_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def trigger_job_run_post_with_http_info(
        self,
        trigger_job_run_config_request_dto: TriggerJobRunConfigRequestDto,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Trigger Job Run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_job_run_post_with_http_info(trigger_job_run_config_request_dto, async_req=True)
        >>> result = thread.get()

        :param trigger_job_run_config_request_dto: (required)
        :type trigger_job_run_config_request_dto: TriggerJobRunConfigRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TriggerJobRunConfigResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["trigger_job_run_config_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_job_run_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["trigger_job_run_config_request_dto"] is not None:
            _body_params = _params["trigger_job_run_config_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "TriggerJobRunConfigResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/generate-code-snippet/trigger-job-run",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def trigger_workflow_task_config_post(
        self,
        create_workflow_task_config_request_dto: CreateWorkflowTaskConfigRequestDto,
        **kwargs,
    ) -> CreatePythonDeploymentConfigResponseDto:  # noqa: E501
        """Trigger Workflow Task Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_workflow_task_config_post(create_workflow_task_config_request_dto, async_req=True)
        >>> result = thread.get()

        :param create_workflow_task_config_request_dto: (required)
        :type create_workflow_task_config_request_dto: CreateWorkflowTaskConfigRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreatePythonDeploymentConfigResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the trigger_workflow_task_config_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.trigger_workflow_task_config_post_with_http_info(
            create_workflow_task_config_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def trigger_workflow_task_config_post_with_http_info(
        self,
        create_workflow_task_config_request_dto: CreateWorkflowTaskConfigRequestDto,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Trigger Workflow Task Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_workflow_task_config_post_with_http_info(create_workflow_task_config_request_dto, async_req=True)
        >>> result = thread.get()

        :param create_workflow_task_config_request_dto: (required)
        :type create_workflow_task_config_request_dto: CreateWorkflowTaskConfigRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreatePythonDeploymentConfigResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_workflow_task_config_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_workflow_task_config_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_workflow_task_config_request_dto"] is not None:
            _body_params = _params["create_workflow_task_config_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "CreatePythonDeploymentConfigResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/generate-code-snippet/workflow-task-config",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
