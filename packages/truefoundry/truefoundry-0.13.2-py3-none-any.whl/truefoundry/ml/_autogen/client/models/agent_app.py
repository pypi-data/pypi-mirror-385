# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.agent_open_api_tool_with_fqn import (
    AgentOpenAPIToolWithFQN,
)
from truefoundry.ml._autogen.client.models.agent_with_fqn import AgentWithFQN
from truefoundry.pydantic_v1 import (
    BaseModel,
    Field,
    StrictStr,
    conlist,
    constr,
    validator,
)


class AgentApp(BaseModel):
    """
    AgentApp
    """

    type: Optional[StrictStr] = "agent-app"
    tools: conlist(AgentOpenAPIToolWithFQN) = Field(
        default=..., description="Tools available to the Agent app"
    )
    agents: conlist(AgentWithFQN) = Field(
        default=..., description="Agents available to the Agent app"
    )
    root_agent: constr(strict=True, min_length=1) = Field(
        default=...,
        description="Root Agent for the app. This will be the first agent invoked",
    )
    __properties = ["type", "tools", "agents", "root_agent"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("agent-app",):
            raise ValueError("must be one of enum values ('agent-app')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AgentApp:
        """Create an instance of AgentApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tools"] = _items
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in agents (list)
        _items = []
        if self.agents:
            for _item in self.agents:
                if _item:
                    _items.append(_item.to_dict())
            _dict["agents"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AgentApp:
        """Create an instance of AgentApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AgentApp.parse_obj(obj)

        _obj = AgentApp.parse_obj(
            {
                "type": obj.get("type") if obj.get("type") is not None else "agent-app",
                "tools": [
                    AgentOpenAPIToolWithFQN.from_dict(_item)
                    for _item in obj.get("tools")
                ]
                if obj.get("tools") is not None
                else None,
                "agents": [AgentWithFQN.from_dict(_item) for _item in obj.get("agents")]
                if obj.get("agents") is not None
                else None,
                "root_agent": obj.get("root_agent"),
            }
        )
        return _obj
