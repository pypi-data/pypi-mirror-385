# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.library_name import LibraryName
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, validator


class TransformersFramework(BaseModel):
    """
    TransformersFramework
    """

    type: StrictStr = Field(default=..., description="Type of the framework")
    library_name: Optional[LibraryName] = Field(
        default=None, description="Name of the library for the framework"
    )
    pipeline_tag: Optional[StrictStr] = Field(
        default=None,
        description="The `pipeline()` task this model can be used with e.g. `text-generation`. See [huggingface docs](https://huggingface.co/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline.task) for all possible values",
    )
    base_model: Optional[StrictStr] = Field(
        default=None,
        description="Base model Id from HuggingFace Hub. If this is a finetuned model, this points to the base model id used for finetuning.",
    )
    __properties = ["type", "library_name", "pipeline_tag", "base_model"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("transformers",):
            raise ValueError("must be one of enum values ('transformers')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransformersFramework:
        """Create an instance of TransformersFramework from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransformersFramework:
        """Create an instance of TransformersFramework from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransformersFramework.parse_obj(obj)

        _obj = TransformersFramework.parse_obj(
            {
                "type": obj.get("type"),
                "library_name": obj.get("library_name"),
                "pipeline_tag": obj.get("pipeline_tag"),
                "base_model": obj.get("base_model"),
            }
        )
        return _obj
