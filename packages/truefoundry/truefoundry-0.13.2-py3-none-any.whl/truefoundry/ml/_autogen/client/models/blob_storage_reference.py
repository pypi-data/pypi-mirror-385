# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from truefoundry.ml._autogen.client.models.mime_type import MimeType
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, constr, validator


class BlobStorageReference(BaseModel):
    """
    A reference to content offloaded to blob storage  # noqa: E501
    """

    type: StrictStr = Field(...)
    path: constr(strict=True) = Field(
        default=..., description="Path to the content in blob storage"
    )
    mime_type: MimeType = Field(default=..., description="MIME type of the content")
    __properties = ["type", "path", "mime_type"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("blob-storage",):
            raise ValueError("must be one of enum values ('blob-storage')")
        return value

    @validator("path")
    def path_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{1,}$", value):
            raise ValueError(r"must validate the regular expression /^.{1,}$/")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BlobStorageReference:
        """Create an instance of BlobStorageReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BlobStorageReference:
        """Create an instance of BlobStorageReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BlobStorageReference.parse_obj(obj)

        _obj = BlobStorageReference.parse_obj(
            {
                "type": obj.get("type"),
                "path": obj.get("path"),
                "mime_type": obj.get("mime_type"),
            }
        )
        return _obj
