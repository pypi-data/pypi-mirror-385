# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, Dict, Optional

from truefoundry.ml._autogen.client.models.artifact_version_serialization_format import (
    ArtifactVersionSerializationFormat,
)
from truefoundry.ml._autogen.client.models.artifact_version_status import (
    ArtifactVersionStatus,
)
from truefoundry.ml._autogen.client.models.metric_dto import MetricDto
from truefoundry.ml._autogen.client.models.model_manifest import ModelManifest
from truefoundry.ml._autogen.client.models.subject import Subject
from truefoundry.pydantic_v1 import (
    BaseModel,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    conlist,
)


class ModelVersionDto(BaseModel):
    """
    ModelVersionDto
    """

    id: StrictStr = Field(...)
    model_id: StrictStr = Field(...)
    version: StrictInt = Field(...)
    fqn: StrictStr = Field(...)
    experiment_id: StrictStr = Field(...)
    artifact_storage_root: Optional[StrictStr] = None
    artifact_metadata: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = None
    status: Optional[ArtifactVersionStatus] = None
    step: Optional[StrictInt] = 0
    created_by: Optional[StrictStr] = None
    created_by_subject: Subject = Field(...)
    model_schema: Optional[Dict[str, Any]] = None
    custom_metrics: Optional[conlist(Dict[str, Any])] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    model_fqn: Optional[StrictStr] = None
    data_path: Optional[StrictStr] = None
    monitoring_enabled: Optional[StrictBool] = False
    usage_code_snippet: Optional[StrictStr] = None
    run_id: Optional[StrictStr] = None
    metrics: Optional[conlist(MetricDto)] = None
    model_name: Optional[StrictStr] = None
    model_framework: Optional[StrictStr] = None
    artifact_size: Optional[StrictInt] = None
    manifest: Optional[ModelManifest] = None
    serialization_format: ArtifactVersionSerializationFormat = Field(...)
    deployable: Optional[StrictBool] = False
    __properties = [
        "id",
        "model_id",
        "version",
        "fqn",
        "experiment_id",
        "artifact_storage_root",
        "artifact_metadata",
        "description",
        "status",
        "step",
        "created_by",
        "created_by_subject",
        "model_schema",
        "custom_metrics",
        "created_at",
        "updated_at",
        "model_fqn",
        "data_path",
        "monitoring_enabled",
        "usage_code_snippet",
        "run_id",
        "metrics",
        "model_name",
        "model_framework",
        "artifact_size",
        "manifest",
        "serialization_format",
        "deployable",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelVersionDto:
        """Create an instance of ModelVersionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of created_by_subject
        if self.created_by_subject:
            _dict["created_by_subject"] = self.created_by_subject.to_dict()
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item in self.metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict["metrics"] = _items
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of manifest
        if self.manifest:
            _dict["manifest"] = self.manifest.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelVersionDto:
        """Create an instance of ModelVersionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelVersionDto.parse_obj(obj)

        _obj = ModelVersionDto.parse_obj(
            {
                "id": obj.get("id"),
                "model_id": obj.get("model_id"),
                "version": obj.get("version"),
                "fqn": obj.get("fqn"),
                "experiment_id": obj.get("experiment_id"),
                "artifact_storage_root": obj.get("artifact_storage_root"),
                "artifact_metadata": obj.get("artifact_metadata"),
                "description": obj.get("description"),
                "status": obj.get("status"),
                "step": obj.get("step") if obj.get("step") is not None else 0,
                "created_by": obj.get("created_by"),
                "created_by_subject": Subject.from_dict(obj.get("created_by_subject"))
                if obj.get("created_by_subject") is not None
                else None,
                "model_schema": obj.get("model_schema"),
                "custom_metrics": obj.get("custom_metrics"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "model_fqn": obj.get("model_fqn"),
                "data_path": obj.get("data_path"),
                "monitoring_enabled": obj.get("monitoring_enabled")
                if obj.get("monitoring_enabled") is not None
                else False,
                "usage_code_snippet": obj.get("usage_code_snippet"),
                "run_id": obj.get("run_id"),
                "metrics": [MetricDto.from_dict(_item) for _item in obj.get("metrics")]
                if obj.get("metrics") is not None
                else None,
                "model_name": obj.get("model_name"),
                "model_framework": obj.get("model_framework"),
                "artifact_size": obj.get("artifact_size"),
                "manifest": ModelManifest.from_dict(obj.get("manifest"))
                if obj.get("manifest") is not None
                else None,
                "serialization_format": obj.get("serialization_format"),
                "deployable": obj.get("deployable")
                if obj.get("deployable") is not None
                else False,
            }
        )
        return _obj
