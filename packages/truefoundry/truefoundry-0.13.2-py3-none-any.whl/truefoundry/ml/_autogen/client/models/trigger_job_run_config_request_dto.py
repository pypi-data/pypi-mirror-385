# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Dict, Optional

from truefoundry.ml._autogen.client.models.command import Command
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr


class TriggerJobRunConfigRequestDto(BaseModel):
    """
    TriggerJobRunConfigRequestDto
    """

    control_plane_url: StrictStr = Field(...)
    application_fqn: StrictStr = Field(...)
    application_id: StrictStr = Field(...)
    command: Optional[Command] = None
    params: Optional[Dict[str, StrictStr]] = None
    __properties = [
        "control_plane_url",
        "application_fqn",
        "application_id",
        "command",
        "params",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TriggerJobRunConfigRequestDto:
        """Create an instance of TriggerJobRunConfigRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of command
        if self.command:
            _dict["command"] = self.command.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TriggerJobRunConfigRequestDto:
        """Create an instance of TriggerJobRunConfigRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TriggerJobRunConfigRequestDto.parse_obj(obj)

        _obj = TriggerJobRunConfigRequestDto.parse_obj(
            {
                "control_plane_url": obj.get("control_plane_url"),
                "application_fqn": obj.get("application_fqn"),
                "application_id": obj.get("application_id"),
                "command": Command.from_dict(obj.get("command"))
                if obj.get("command") is not None
                else None,
                "params": obj.get("params"),
            }
        )
        return _obj
