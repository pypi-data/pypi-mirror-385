# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, List, Optional, Union

from truefoundry.ml._autogen.client.models.agent_manifest import AgentManifest
from truefoundry.ml._autogen.client.models.agent_open_api_tool_manifest import (
    AgentOpenAPIToolManifest,
)
from truefoundry.ml._autogen.client.models.artifact_manifest import ArtifactManifest
from truefoundry.ml._autogen.client.models.chat_prompt_manifest import (
    ChatPromptManifest,
)
from truefoundry.ml._autogen.client.models.model_manifest import ModelManifest
from truefoundry.pydantic_v1 import (
    BaseModel,
    Field,
    ValidationError,
    validator,
)

MANIFEST_ONE_OF_SCHEMAS = [
    "AgentManifest",
    "AgentOpenAPIToolManifest",
    "ArtifactManifest",
    "ChatPromptManifest",
    "ModelManifest",
]


class Manifest(BaseModel):
    """
    Manifest
    """

    # data type: ModelManifest
    oneof_schema_1_validator: Optional[ModelManifest] = None
    # data type: ChatPromptManifest
    oneof_schema_2_validator: Optional[ChatPromptManifest] = None
    # data type: AgentOpenAPIToolManifest
    oneof_schema_3_validator: Optional[AgentOpenAPIToolManifest] = None
    # data type: AgentManifest
    oneof_schema_4_validator: Optional[AgentManifest] = None
    # data type: ArtifactManifest
    oneof_schema_5_validator: Optional[ArtifactManifest] = None
    if TYPE_CHECKING:
        actual_instance: Union[
            AgentManifest,
            AgentOpenAPIToolManifest,
            ArtifactManifest,
            ChatPromptManifest,
            ModelManifest,
        ]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(MANIFEST_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = Manifest.construct()
        error_messages = []
        match = 0
        # validate data type: ModelManifest
        if not isinstance(v, ModelManifest):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ModelManifest`"
            )
        else:
            match += 1
        # validate data type: ChatPromptManifest
        if not isinstance(v, ChatPromptManifest):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ChatPromptManifest`"
            )
        else:
            match += 1
        # validate data type: AgentOpenAPIToolManifest
        if not isinstance(v, AgentOpenAPIToolManifest):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AgentOpenAPIToolManifest`"
            )
        else:
            match += 1
        # validate data type: AgentManifest
        if not isinstance(v, AgentManifest):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AgentManifest`"
            )
        else:
            match += 1
        # validate data type: ArtifactManifest
        if not isinstance(v, ArtifactManifest):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ArtifactManifest`"
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in Manifest with oneOf schemas: AgentManifest, AgentOpenAPIToolManifest, ArtifactManifest, ChatPromptManifest, ModelManifest. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in Manifest with oneOf schemas: AgentManifest, AgentOpenAPIToolManifest, ArtifactManifest, ChatPromptManifest, ModelManifest. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Manifest:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Manifest:
        """Returns the object represented by the json string"""
        instance = Manifest.construct()
        error_messages = []
        match = 0

        # deserialize data into ModelManifest
        try:
            instance.actual_instance = ModelManifest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChatPromptManifest
        try:
            instance.actual_instance = ChatPromptManifest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AgentOpenAPIToolManifest
        try:
            instance.actual_instance = AgentOpenAPIToolManifest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AgentManifest
        try:
            instance.actual_instance = AgentManifest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ArtifactManifest
        try:
            instance.actual_instance = ArtifactManifest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into Manifest with oneOf schemas: AgentManifest, AgentOpenAPIToolManifest, ArtifactManifest, ChatPromptManifest, ModelManifest. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into Manifest with oneOf schemas: AgentManifest, AgentOpenAPIToolManifest, ArtifactManifest, ChatPromptManifest, ModelManifest. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())
