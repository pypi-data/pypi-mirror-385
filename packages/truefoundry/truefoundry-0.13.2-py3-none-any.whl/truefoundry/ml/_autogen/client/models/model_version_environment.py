# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.pydantic_v1 import (
    BaseModel,
    Field,
    StrictStr,
    conlist,
    constr,
    validator,
)


class ModelVersionEnvironment(BaseModel):
    """
    Runtime environment describing python version and dependencies for running the model  # noqa: E501
    """

    python_version: Optional[constr(strict=True)] = Field(
        default=None, description="Python version to use when running the model"
    )
    pip_packages: Optional[conlist(StrictStr)] = Field(
        default=None, description="pip dependencies needed for running the model"
    )
    __properties = ["python_version", "pip_packages"]

    @validator("python_version")
    def python_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+){1,2}([\-\.a-z0-9]+)?$", value):
            raise ValueError(
                r"must validate the regular expression /^\d+(\.\d+){1,2}([\-\.a-z0-9]+)?$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelVersionEnvironment:
        """Create an instance of ModelVersionEnvironment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelVersionEnvironment:
        """Create an instance of ModelVersionEnvironment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelVersionEnvironment.parse_obj(obj)

        _obj = ModelVersionEnvironment.parse_obj(
            {
                "python_version": obj.get("python_version"),
                "pip_packages": obj.get("pip_packages"),
            }
        )
        return _obj
