# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.artifact_dto import ArtifactDto
from truefoundry.pydantic_v1 import BaseModel, Field, StrictInt, StrictStr, conlist


class ListArtifactsResponseDto(BaseModel):
    """
    ListArtifactsResponseDto
    """

    artifacts: conlist(ArtifactDto) = Field(...)
    next_page_token: Optional[StrictStr] = None
    total: Optional[StrictInt] = None
    __properties = ["artifacts", "next_page_token", "total"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListArtifactsResponseDto:
        """Create an instance of ListArtifactsResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["artifacts"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListArtifactsResponseDto:
        """Create an instance of ListArtifactsResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListArtifactsResponseDto.parse_obj(obj)

        _obj = ListArtifactsResponseDto.parse_obj(
            {
                "artifacts": [
                    ArtifactDto.from_dict(_item) for _item in obj.get("artifacts")
                ]
                if obj.get("artifacts") is not None
                else None,
                "next_page_token": obj.get("next_page_token"),
                "total": obj.get("total"),
            }
        )
        return _obj
