# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from truefoundry.ml._autogen.client.models.artifact_type import ArtifactType
from truefoundry.ml._autogen.client.models.artifact_version_dto import (
    ArtifactVersionDto,
)
from truefoundry.ml._autogen.client.models.subject import Subject
from truefoundry.pydantic_v1 import BaseModel, Field, StrictInt, StrictStr, conlist


class ArtifactDto(BaseModel):
    """
    ArtifactDto
    """

    id: StrictStr = Field(...)
    experiment_id: StrictStr = Field(...)
    type: ArtifactType = Field(...)
    name: StrictStr = Field(...)
    fqn: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    created_by: Optional[StrictStr] = None
    created_by_subject: Subject = Field(...)
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    artifact_storage_root: Optional[StrictStr] = None
    latest_version: Optional[ArtifactVersionDto] = None
    run_steps: Optional[conlist(StrictInt)] = None
    __properties = [
        "id",
        "experiment_id",
        "type",
        "name",
        "fqn",
        "description",
        "created_by",
        "created_by_subject",
        "created_at",
        "updated_at",
        "artifact_storage_root",
        "latest_version",
        "run_steps",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArtifactDto:
        """Create an instance of ArtifactDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of created_by_subject
        if self.created_by_subject:
            _dict["created_by_subject"] = self.created_by_subject.to_dict()
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of latest_version
        if self.latest_version:
            _dict["latest_version"] = self.latest_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArtifactDto:
        """Create an instance of ArtifactDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArtifactDto.parse_obj(obj)

        _obj = ArtifactDto.parse_obj(
            {
                "id": obj.get("id"),
                "experiment_id": obj.get("experiment_id"),
                "type": obj.get("type"),
                "name": obj.get("name"),
                "fqn": obj.get("fqn"),
                "description": obj.get("description"),
                "created_by": obj.get("created_by"),
                "created_by_subject": Subject.from_dict(obj.get("created_by_subject"))
                if obj.get("created_by_subject") is not None
                else None,
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "artifact_storage_root": obj.get("artifact_storage_root"),
                "latest_version": ArtifactVersionDto.from_dict(
                    obj.get("latest_version")
                )
                if obj.get("latest_version") is not None
                else None,
                "run_steps": obj.get("run_steps"),
            }
        )
        return _obj
