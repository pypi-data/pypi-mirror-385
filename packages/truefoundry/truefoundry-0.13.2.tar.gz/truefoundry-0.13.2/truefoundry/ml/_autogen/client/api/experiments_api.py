# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401
import warnings
from typing import Optional

from truefoundry.ml._autogen.client.api_client import ApiClient
from truefoundry.ml._autogen.client.api_response import ApiResponse
from truefoundry.ml._autogen.client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from truefoundry.ml._autogen.client.models.create_experiment_request_dto import (
    CreateExperimentRequestDto,
)
from truefoundry.ml._autogen.client.models.create_experiment_response_dto import (
    CreateExperimentResponseDto,
)
from truefoundry.ml._autogen.client.models.experiment_id_request_dto import (
    ExperimentIdRequestDto,
)
from truefoundry.ml._autogen.client.models.experiment_response_dto import (
    ExperimentResponseDto,
)
from truefoundry.ml._autogen.client.models.get_experiment_response_dto import (
    GetExperimentResponseDto,
)
from truefoundry.ml._autogen.client.models.list_colums_response_dto import (
    ListColumsResponseDto,
)
from truefoundry.ml._autogen.client.models.list_experiments_response_dto import (
    ListExperimentsResponseDto,
)
from truefoundry.ml._autogen.client.models.set_experiment_tag_request_dto import (
    SetExperimentTagRequestDto,
)
from truefoundry.ml._autogen.client.models.update_experiment_request_dto import (
    UpdateExperimentRequestDto,
)
from truefoundry.pydantic_v1 import (
    StrictInt,
    StrictStr,
    validate_arguments,
)


class ExperimentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_experiment_post(
        self, create_experiment_request_dto: CreateExperimentRequestDto, **kwargs
    ) -> CreateExperimentResponseDto:  # noqa: E501
        """(Deprecated) Create Experiment  # noqa: E501

        Create Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_experiment_post(create_experiment_request_dto, async_req=True)
        >>> result = thread.get()

        :param create_experiment_request_dto: (required)
        :type create_experiment_request_dto: CreateExperimentRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateExperimentResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_experiment_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_experiment_post_with_http_info(
            create_experiment_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_experiment_post_with_http_info(
        self, create_experiment_request_dto: CreateExperimentRequestDto, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Create Experiment  # noqa: E501

        Create Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_experiment_post_with_http_info(create_experiment_request_dto, async_req=True)
        >>> result = thread.get()

        :param create_experiment_request_dto: (required)
        :type create_experiment_request_dto: CreateExperimentRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateExperimentResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "POST /api/2.0/mlflow/experiments/create is deprecated.", DeprecationWarning
        )

        _params = locals()

        _all_params = ["create_experiment_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_experiment_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_experiment_request_dto"] is not None:
            _body_params = _params["create_experiment_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "CreateExperimentResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/create",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_experiment_post(
        self, experiment_id_request_dto: ExperimentIdRequestDto, **kwargs
    ) -> object:  # noqa: E501
        """(Deprecated) Delete Experiment  # noqa: E501

        Delete Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_experiment_post(experiment_id_request_dto, async_req=True)
        >>> result = thread.get()

        :param experiment_id_request_dto: (required)
        :type experiment_id_request_dto: ExperimentIdRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_experiment_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_experiment_post_with_http_info(
            experiment_id_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_experiment_post_with_http_info(
        self, experiment_id_request_dto: ExperimentIdRequestDto, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Delete Experiment  # noqa: E501

        Delete Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_experiment_post_with_http_info(experiment_id_request_dto, async_req=True)
        >>> result = thread.get()

        :param experiment_id_request_dto: (required)
        :type experiment_id_request_dto: ExperimentIdRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "POST /api/2.0/mlflow/experiments/delete is deprecated.", DeprecationWarning
        )

        _params = locals()

        _all_params = ["experiment_id_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_experiment_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["experiment_id_request_dto"] is not None:
            _body_params = _params["experiment_id_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/delete",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_experiment_by_name_get(
        self, experiment_name: StrictStr, **kwargs
    ) -> ExperimentResponseDto:  # noqa: E501
        """(Deprecated) Get Experiment By Name  # noqa: E501

        Get Experiment By Name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_experiment_by_name_get(experiment_name, async_req=True)
        >>> result = thread.get()

        :param experiment_name: (required)
        :type experiment_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExperimentResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_experiment_by_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_experiment_by_name_get_with_http_info(experiment_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_experiment_by_name_get_with_http_info(
        self, experiment_name: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Get Experiment By Name  # noqa: E501

        Get Experiment By Name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_experiment_by_name_get_with_http_info(experiment_name, async_req=True)
        >>> result = thread.get()

        :param experiment_name: (required)
        :type experiment_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExperimentResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "GET /api/2.0/mlflow/experiments/get-by-name is deprecated.",
            DeprecationWarning,
        )

        _params = locals()

        _all_params = ["experiment_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiment_by_name_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("experiment_name") is not None:  # noqa: E501
            _query_params.append(("experiment_name", _params["experiment_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "ExperimentResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/get-by-name",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_experiment_get(
        self, experiment_id: StrictStr, **kwargs
    ) -> GetExperimentResponseDto:  # noqa: E501
        """(Deprecated) Get Experiment  # noqa: E501

        Get Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_experiment_get(experiment_id, async_req=True)
        >>> result = thread.get()

        :param experiment_id: (required)
        :type experiment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetExperimentResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_experiment_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_experiment_get_with_http_info(experiment_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_experiment_get_with_http_info(
        self, experiment_id: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Get Experiment  # noqa: E501

        Get Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_experiment_get_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param experiment_id: (required)
        :type experiment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetExperimentResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "GET /api/2.0/mlflow/experiments/get is deprecated.", DeprecationWarning
        )

        _params = locals()

        _all_params = ["experiment_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiment_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("experiment_id") is not None:  # noqa: E501
            _query_params.append(("experiment_id", _params["experiment_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "GetExperimentResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/get",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def hard_delete_experiment_post(
        self, experiment_id_request_dto: ExperimentIdRequestDto, **kwargs
    ) -> object:  # noqa: E501
        """(Deprecated) Hard Delete Experiment  # noqa: E501

        Hard Delete Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.hard_delete_experiment_post(experiment_id_request_dto, async_req=True)
        >>> result = thread.get()

        :param experiment_id_request_dto: (required)
        :type experiment_id_request_dto: ExperimentIdRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the hard_delete_experiment_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.hard_delete_experiment_post_with_http_info(
            experiment_id_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def hard_delete_experiment_post_with_http_info(
        self, experiment_id_request_dto: ExperimentIdRequestDto, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Hard Delete Experiment  # noqa: E501

        Hard Delete Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.hard_delete_experiment_post_with_http_info(experiment_id_request_dto, async_req=True)
        >>> result = thread.get()

        :param experiment_id_request_dto: (required)
        :type experiment_id_request_dto: ExperimentIdRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "POST /api/2.0/mlflow/experiments/hard-delete is deprecated.",
            DeprecationWarning,
        )

        _params = locals()

        _all_params = ["experiment_id_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hard_delete_experiment_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["experiment_id_request_dto"] is not None:
            _body_params = _params["experiment_id_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/hard-delete",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_experiment_columns_get(
        self, experiment_id: StrictStr, **kwargs
    ) -> ListColumsResponseDto:  # noqa: E501
        """(Deprecated) List Experiment Columns  # noqa: E501

        List all the columns required for an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_experiment_columns_get(experiment_id, async_req=True)
        >>> result = thread.get()

        :param experiment_id: (required)
        :type experiment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListColumsResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_experiment_columns_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_experiment_columns_get_with_http_info(experiment_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_experiment_columns_get_with_http_info(
        self, experiment_id: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) List Experiment Columns  # noqa: E501

        List all the columns required for an experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_experiment_columns_get_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param experiment_id: (required)
        :type experiment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListColumsResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "GET /api/2.0/mlflow/experiments/columns is deprecated.", DeprecationWarning
        )

        _params = locals()

        _all_params = ["experiment_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_experiment_columns_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("experiment_id") is not None:  # noqa: E501
            _query_params.append(("experiment_id", _params["experiment_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "ListColumsResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/columns",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_experiments_get(
        self,
        view_type: Optional[StrictStr] = None,
        max_results: Optional[StrictInt] = None,
        page_token: Optional[StrictStr] = None,
        privacy_type: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        filter_name: Optional[StrictStr] = None,
        **kwargs,
    ) -> ListExperimentsResponseDto:  # noqa: E501
        """(Deprecated) List Experiments  # noqa: E501

        List Experiments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_experiments_get(view_type, max_results, page_token, privacy_type, offset, filter_name, async_req=True)
        >>> result = thread.get()

        :param view_type:
        :type view_type: str
        :param max_results:
        :type max_results: int
        :param page_token:
        :type page_token: str
        :param privacy_type:
        :type privacy_type: str
        :param offset:
        :type offset: int
        :param filter_name:
        :type filter_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListExperimentsResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_experiments_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_experiments_get_with_http_info(
            view_type,
            max_results,
            page_token,
            privacy_type,
            offset,
            filter_name,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def list_experiments_get_with_http_info(
        self,
        view_type: Optional[StrictStr] = None,
        max_results: Optional[StrictInt] = None,
        page_token: Optional[StrictStr] = None,
        privacy_type: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        filter_name: Optional[StrictStr] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) List Experiments  # noqa: E501

        List Experiments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_experiments_get_with_http_info(view_type, max_results, page_token, privacy_type, offset, filter_name, async_req=True)
        >>> result = thread.get()

        :param view_type:
        :type view_type: str
        :param max_results:
        :type max_results: int
        :param page_token:
        :type page_token: str
        :param privacy_type:
        :type privacy_type: str
        :param offset:
        :type offset: int
        :param filter_name:
        :type filter_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListExperimentsResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "GET /api/2.0/mlflow/experiments/list is deprecated.", DeprecationWarning
        )

        _params = locals()

        _all_params = [
            "view_type",
            "max_results",
            "page_token",
            "privacy_type",
            "offset",
            "filter_name",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_experiments_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("view_type") is not None:  # noqa: E501
            _query_params.append(("view_type", _params["view_type"]))

        if _params.get("max_results") is not None:  # noqa: E501
            _query_params.append(("max_results", _params["max_results"]))

        if _params.get("page_token") is not None:  # noqa: E501
            _query_params.append(("page_token", _params["page_token"]))

        if _params.get("privacy_type") is not None:  # noqa: E501
            _query_params.append(("privacy_type", _params["privacy_type"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("filter_name") is not None:  # noqa: E501
            _query_params.append(("filter_name", _params["filter_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "ListExperimentsResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/list",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def restore_experiment_post(
        self, experiment_id_request_dto: ExperimentIdRequestDto, **kwargs
    ) -> object:  # noqa: E501
        """(Deprecated) Restore Experiment  # noqa: E501

        Restore Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restore_experiment_post(experiment_id_request_dto, async_req=True)
        >>> result = thread.get()

        :param experiment_id_request_dto: (required)
        :type experiment_id_request_dto: ExperimentIdRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the restore_experiment_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.restore_experiment_post_with_http_info(
            experiment_id_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def restore_experiment_post_with_http_info(
        self, experiment_id_request_dto: ExperimentIdRequestDto, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Restore Experiment  # noqa: E501

        Restore Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restore_experiment_post_with_http_info(experiment_id_request_dto, async_req=True)
        >>> result = thread.get()

        :param experiment_id_request_dto: (required)
        :type experiment_id_request_dto: ExperimentIdRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "POST /api/2.0/mlflow/experiments/restore is deprecated.",
            DeprecationWarning,
        )

        _params = locals()

        _all_params = ["experiment_id_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_experiment_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["experiment_id_request_dto"] is not None:
            _body_params = _params["experiment_id_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/restore",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def set_experiment_tag_post(
        self, set_experiment_tag_request_dto: SetExperimentTagRequestDto, **kwargs
    ) -> object:  # noqa: E501
        """(Deprecated) Set Experiment Tag  # noqa: E501

        Set Experiment Tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_experiment_tag_post(set_experiment_tag_request_dto, async_req=True)
        >>> result = thread.get()

        :param set_experiment_tag_request_dto: (required)
        :type set_experiment_tag_request_dto: SetExperimentTagRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the set_experiment_tag_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.set_experiment_tag_post_with_http_info(
            set_experiment_tag_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def set_experiment_tag_post_with_http_info(
        self, set_experiment_tag_request_dto: SetExperimentTagRequestDto, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Set Experiment Tag  # noqa: E501

        Set Experiment Tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_experiment_tag_post_with_http_info(set_experiment_tag_request_dto, async_req=True)
        >>> result = thread.get()

        :param set_experiment_tag_request_dto: (required)
        :type set_experiment_tag_request_dto: SetExperimentTagRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "POST /api/2.0/mlflow/experiments/set-experiment-tag is deprecated.",
            DeprecationWarning,
        )

        _params = locals()

        _all_params = ["set_experiment_tag_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_experiment_tag_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["set_experiment_tag_request_dto"] is not None:
            _body_params = _params["set_experiment_tag_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/set-experiment-tag",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_experiment_post(
        self, update_experiment_request_dto: UpdateExperimentRequestDto, **kwargs
    ) -> object:  # noqa: E501
        """(Deprecated) Update Experiment  # noqa: E501

        Update Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_experiment_post(update_experiment_request_dto, async_req=True)
        >>> result = thread.get()

        :param update_experiment_request_dto: (required)
        :type update_experiment_request_dto: UpdateExperimentRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_experiment_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_experiment_post_with_http_info(
            update_experiment_request_dto, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_experiment_post_with_http_info(
        self, update_experiment_request_dto: UpdateExperimentRequestDto, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) Update Experiment  # noqa: E501

        Update Experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_experiment_post_with_http_info(update_experiment_request_dto, async_req=True)
        >>> result = thread.get()

        :param update_experiment_request_dto: (required)
        :type update_experiment_request_dto: UpdateExperimentRequestDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "POST /api/2.0/mlflow/experiments/update is deprecated.", DeprecationWarning
        )

        _params = locals()

        _all_params = ["update_experiment_request_dto"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_experiment_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["update_experiment_request_dto"] is not None:
            _body_params = _params["update_experiment_request_dto"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/experiments/update",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
