# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.artifact_type import ArtifactType
from truefoundry.pydantic_v1 import BaseModel, StrictBool, StrictInt, StrictStr, conlist


class ListArtifactsRequestDto(BaseModel):
    """
    ListArtifactsRequestDto
    """

    experiment_id: Optional[StrictStr] = None
    artifact_types: Optional[conlist(ArtifactType)] = None
    name: Optional[StrictStr] = None
    max_results: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    page_token: Optional[StrictStr] = None
    run_id: Optional[StrictStr] = None
    include_models: Optional[StrictBool] = False
    __properties = [
        "experiment_id",
        "artifact_types",
        "name",
        "max_results",
        "offset",
        "page_token",
        "run_id",
        "include_models",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListArtifactsRequestDto:
        """Create an instance of ListArtifactsRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListArtifactsRequestDto:
        """Create an instance of ListArtifactsRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListArtifactsRequestDto.parse_obj(obj)

        _obj = ListArtifactsRequestDto.parse_obj(
            {
                "experiment_id": obj.get("experiment_id"),
                "artifact_types": obj.get("artifact_types"),
                "name": obj.get("name"),
                "max_results": obj.get("max_results"),
                "offset": obj.get("offset"),
                "page_token": obj.get("page_token"),
                "run_id": obj.get("run_id"),
                "include_models": obj.get("include_models")
                if obj.get("include_models") is not None
                else False,
            }
        )
        return _obj
