# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401
import warnings
from typing import Optional

from truefoundry.ml._autogen.client.api_client import ApiClient
from truefoundry.ml._autogen.client.api_response import ApiResponse
from truefoundry.ml._autogen.client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from truefoundry.ml._autogen.client.models.list_run_artifacts_response_dto import (
    ListRunArtifactsResponseDto,
)
from truefoundry.pydantic_v1 import (
    StrictInt,
    StrictStr,
    validate_arguments,
)


class RunArtifactsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def list_run_artifacts_get(
        self,
        run_id: Optional[StrictStr] = None,
        run_uuid: Optional[StrictStr] = None,
        path: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        max_results: Optional[StrictInt] = None,
        **kwargs,
    ) -> ListRunArtifactsResponseDto:  # noqa: E501
        """(Deprecated) List Run Artifacts  # noqa: E501

        List legacy run level artifacts (files and directories)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_run_artifacts_get(run_id, run_uuid, path, page_token, max_results, async_req=True)
        >>> result = thread.get()

        :param run_id:
        :type run_id: str
        :param run_uuid:
        :type run_uuid: str
        :param path:
        :type path: str
        :param page_token:
        :type page_token: str
        :param max_results:
        :type max_results: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListRunArtifactsResponseDto
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_run_artifacts_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_run_artifacts_get_with_http_info(
            run_id, run_uuid, path, page_token, max_results, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_run_artifacts_get_with_http_info(
        self,
        run_id: Optional[StrictStr] = None,
        run_uuid: Optional[StrictStr] = None,
        path: Optional[StrictStr] = None,
        page_token: Optional[StrictStr] = None,
        max_results: Optional[StrictInt] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """(Deprecated) List Run Artifacts  # noqa: E501

        List legacy run level artifacts (files and directories)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_run_artifacts_get_with_http_info(run_id, run_uuid, path, page_token, max_results, async_req=True)
        >>> result = thread.get()

        :param run_id:
        :type run_id: str
        :param run_uuid:
        :type run_uuid: str
        :param path:
        :type path: str
        :param page_token:
        :type page_token: str
        :param max_results:
        :type max_results: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListRunArtifactsResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn(
            "GET /api/2.0/mlflow/artifacts/list is deprecated.", DeprecationWarning
        )

        _params = locals()

        _all_params = ["run_id", "run_uuid", "path", "page_token", "max_results"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_run_artifacts_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("run_id") is not None:  # noqa: E501
            _query_params.append(("run_id", _params["run_id"]))

        if _params.get("run_uuid") is not None:  # noqa: E501
            _query_params.append(("run_uuid", _params["run_uuid"]))

        if _params.get("path") is not None:  # noqa: E501
            _query_params.append(("path", _params["path"]))

        if _params.get("page_token") is not None:  # noqa: E501
            _query_params.append(("page_token", _params["page_token"]))

        if _params.get("max_results") is not None:  # noqa: E501
            _query_params.append(("max_results", _params["max_results"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["APIKey"]  # noqa: E501

        _response_types_map = {
            "200": "ListRunArtifactsResponseDto",
            "422": "HTTPValidationError",
        }

        return self.api_client.call_api(
            "/api/2.0/mlflow/artifacts/list",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
