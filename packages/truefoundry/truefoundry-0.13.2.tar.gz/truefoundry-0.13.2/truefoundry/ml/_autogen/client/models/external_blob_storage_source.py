# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, constr, validator


class ExternalBlobStorageSource(BaseModel):
    """
    ExternalBlobStorageSource
    """

    type: StrictStr = Field(default=..., description="Type of the source")
    uri: constr(strict=True) = Field(
        default=...,
        description="URI referencing a path in the blob storage bucket linked to the MLRepo",
    )
    __properties = ["type", "uri"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("external",):
            raise ValueError("must be one of enum values ('external')")
        return value

    @validator("uri")
    def uri_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(s3|gs|wasbs):\/\/.*", value):
            raise ValueError(
                r"must validate the regular expression /^(s3|gs|wasbs):\/\/.*/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalBlobStorageSource:
        """Create an instance of ExternalBlobStorageSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalBlobStorageSource:
        """Create an instance of ExternalBlobStorageSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalBlobStorageSource.parse_obj(obj)

        _obj = ExternalBlobStorageSource.parse_obj(
            {"type": obj.get("type"), "uri": obj.get("uri")}
        )
        return _obj
