# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.multi_part_upload_storage_provider import (
    MultiPartUploadStorageProvider,
)
from truefoundry.ml._autogen.client.models.signed_url_dto import SignedURLDto
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, conlist


class MultiPartUploadDto(BaseModel):
    """
    MultiPartUploadDto
    """

    storage_provider: MultiPartUploadStorageProvider = Field(...)
    part_signed_urls: conlist(SignedURLDto) = Field(...)
    s3_compatible_upload_id: Optional[StrictStr] = None
    azure_blob_block_ids: Optional[conlist(StrictStr)] = None
    finalize_signed_url: SignedURLDto = Field(...)
    __properties = [
        "storage_provider",
        "part_signed_urls",
        "s3_compatible_upload_id",
        "azure_blob_block_ids",
        "finalize_signed_url",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MultiPartUploadDto:
        """Create an instance of MultiPartUploadDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in part_signed_urls (list)
        _items = []
        if self.part_signed_urls:
            for _item in self.part_signed_urls:
                if _item:
                    _items.append(_item.to_dict())
            _dict["part_signed_urls"] = _items
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of finalize_signed_url
        if self.finalize_signed_url:
            _dict["finalize_signed_url"] = self.finalize_signed_url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MultiPartUploadDto:
        """Create an instance of MultiPartUploadDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MultiPartUploadDto.parse_obj(obj)

        _obj = MultiPartUploadDto.parse_obj(
            {
                "storage_provider": obj.get("storage_provider"),
                "part_signed_urls": [
                    SignedURLDto.from_dict(_item)
                    for _item in obj.get("part_signed_urls")
                ]
                if obj.get("part_signed_urls") is not None
                else None,
                "s3_compatible_upload_id": obj.get("s3_compatible_upload_id"),
                "azure_blob_block_ids": obj.get("azure_blob_block_ids"),
                "finalize_signed_url": SignedURLDto.from_dict(
                    obj.get("finalize_signed_url")
                )
                if obj.get("finalize_signed_url") is not None
                else None,
            }
        )
        return _obj
