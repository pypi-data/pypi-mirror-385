# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.subject_type import SubjectType
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr


class Subject(BaseModel):
    """
    Subject
    """

    subject_id: StrictStr = Field(default=..., alias="subjectId")
    subject_type: Optional[SubjectType] = Field(default=None, alias="subjectType")
    subject_slug: StrictStr = Field(default=..., alias="subjectSlug")
    subject_display_name: Optional[StrictStr] = Field(
        default=None, alias="subjectDisplayName"
    )
    __properties = ["subjectId", "subjectType", "subjectSlug", "subjectDisplayName"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Subject:
        """Create an instance of Subject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Subject:
        """Create an instance of Subject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Subject.parse_obj(obj)

        _obj = Subject.parse_obj(
            {
                "subject_id": obj.get("subjectId"),
                "subject_type": obj.get("subjectType"),
                "subject_slug": obj.get("subjectSlug"),
                "subject_display_name": obj.get("subjectDisplayName"),
            }
        )
        return _obj
