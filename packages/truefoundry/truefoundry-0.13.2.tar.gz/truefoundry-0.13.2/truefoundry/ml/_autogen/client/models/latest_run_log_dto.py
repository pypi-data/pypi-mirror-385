# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.run_log_dto import RunLogDto
from truefoundry.pydantic_v1 import BaseModel, Field, StrictInt, conlist


class LatestRunLogDto(BaseModel):
    """
    LatestRunLogDto
    """

    run_log: Optional[RunLogDto] = None
    steps: conlist(StrictInt) = Field(...)
    __properties = ["run_log", "steps"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LatestRunLogDto:
        """Create an instance of LatestRunLogDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of run_log
        if self.run_log:
            _dict["run_log"] = self.run_log.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LatestRunLogDto:
        """Create an instance of LatestRunLogDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LatestRunLogDto.parse_obj(obj)

        _obj = LatestRunLogDto.parse_obj(
            {
                "run_log": RunLogDto.from_dict(obj.get("run_log"))
                if obj.get("run_log") is not None
                else None,
                "steps": obj.get("steps"),
            }
        )
        return _obj
