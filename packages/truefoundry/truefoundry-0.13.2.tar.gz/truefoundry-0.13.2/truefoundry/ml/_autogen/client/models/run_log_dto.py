# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.pydantic_v1 import BaseModel, StrictInt, StrictStr


class RunLogDto(BaseModel):
    """
    RunLogDto
    """

    key: Optional[StrictStr] = None
    timestamp: Optional[StrictInt] = None
    step: Optional[StrictInt] = None
    log_type: Optional[StrictStr] = None
    artifact_path: Optional[StrictStr] = None
    value: Optional[StrictStr] = None
    artifact_signed_uri: Optional[StrictStr] = None
    __properties = [
        "key",
        "timestamp",
        "step",
        "log_type",
        "artifact_path",
        "value",
        "artifact_signed_uri",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RunLogDto:
        """Create an instance of RunLogDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RunLogDto:
        """Create an instance of RunLogDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RunLogDto.parse_obj(obj)

        _obj = RunLogDto.parse_obj(
            {
                "key": obj.get("key"),
                "timestamp": obj.get("timestamp"),
                "step": obj.get("step"),
                "log_type": obj.get("log_type"),
                "artifact_path": obj.get("artifact_path"),
                "value": obj.get("value"),
                "artifact_signed_uri": obj.get("artifact_signed_uri"),
            }
        )
        return _obj
