# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict

from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, conlist, validator


class XGBoostModelSchema(BaseModel):
    """
    Schema of the XGBoost model  # noqa: E501
    """

    infer_method_name: StrictStr = Field(
        default=..., description="Name of the method used for inference"
    )
    inputs: conlist(Dict[str, Any]) = Field(
        default=..., description="Schema of the input"
    )
    outputs: conlist(Dict[str, Any]) = Field(
        default=..., description="Schema of the output"
    )
    __properties = ["infer_method_name", "inputs", "outputs"]

    @validator("infer_method_name")
    def infer_method_name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("predict",):
            raise ValueError("must be one of enum values ('predict')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> XGBoostModelSchema:
        """Create an instance of XGBoostModelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> XGBoostModelSchema:
        """Create an instance of XGBoostModelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return XGBoostModelSchema.parse_obj(obj)

        _obj = XGBoostModelSchema.parse_obj(
            {
                "infer_method_name": obj.get("infer_method_name"),
                "inputs": obj.get("inputs"),
                "outputs": obj.get("outputs"),
            }
        )
        return _obj
