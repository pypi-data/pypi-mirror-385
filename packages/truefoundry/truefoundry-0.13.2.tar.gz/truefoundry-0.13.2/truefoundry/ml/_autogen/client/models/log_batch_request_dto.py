# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.metric_dto import MetricDto
from truefoundry.ml._autogen.client.models.param_dto import ParamDto
from truefoundry.ml._autogen.client.models.run_tag_dto import RunTagDto
from truefoundry.pydantic_v1 import BaseModel, StrictStr, conlist


class LogBatchRequestDto(BaseModel):
    """
    LogBatchRequestDto
    """

    run_id: Optional[StrictStr] = None
    metrics: Optional[conlist(MetricDto)] = None
    params: Optional[conlist(ParamDto)] = None
    tags: Optional[conlist(RunTagDto)] = None
    __properties = ["run_id", "metrics", "params", "tags"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LogBatchRequestDto:
        """Create an instance of LogBatchRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item in self.metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict["metrics"] = _items
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in params (list)
        _items = []
        if self.params:
            for _item in self.params:
                if _item:
                    _items.append(_item.to_dict())
            _dict["params"] = _items
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tags"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LogBatchRequestDto:
        """Create an instance of LogBatchRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LogBatchRequestDto.parse_obj(obj)

        _obj = LogBatchRequestDto.parse_obj(
            {
                "run_id": obj.get("run_id"),
                "metrics": [MetricDto.from_dict(_item) for _item in obj.get("metrics")]
                if obj.get("metrics") is not None
                else None,
                "params": [ParamDto.from_dict(_item) for _item in obj.get("params")]
                if obj.get("params") is not None
                else None,
                "tags": [RunTagDto.from_dict(_item) for _item in obj.get("tags")]
                if obj.get("tags") is not None
                else None,
            }
        )
        return _obj
