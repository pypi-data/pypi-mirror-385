# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml._autogen.client.models.content import Content
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, validator


class AssistantMessage(BaseModel):
    """
    Assistant message turn  # noqa: E501
    """

    role: StrictStr = Field(default=..., description="Role of the message")
    content: Content = Field(...)
    name: Optional[StrictStr] = Field(
        default=None, description="Name of the assistant this message is from"
    )
    __properties = ["role", "content", "name"]

    @validator("role")
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("assistant",):
            raise ValueError("must be one of enum values ('assistant')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssistantMessage:
        """Create an instance of AssistantMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of content
        if self.content:
            _dict["content"] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssistantMessage:
        """Create an instance of AssistantMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AssistantMessage.parse_obj(obj)

        _obj = AssistantMessage.parse_obj(
            {
                "role": obj.get("role"),
                "content": Content.from_dict(obj.get("content"))
                if obj.get("content") is not None
                else None,
                "name": obj.get("name"),
            }
        )
        return _obj
