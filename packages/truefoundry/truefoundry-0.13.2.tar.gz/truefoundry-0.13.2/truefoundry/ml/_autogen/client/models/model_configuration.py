# coding: utf-8

"""
TrueFoundry ML API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from truefoundry.ml._autogen.client.models.parameters import Parameters
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, constr, validator


class ModelConfiguration(BaseModel):
    """
    Add a model from Gateway along with parameters to be used for chat completion  # noqa: E501
    """

    provider: StrictStr = Field(
        default=...,
        description="Name of the provider, must be one of the integration providers configured for the Gateway",
    )
    model: constr(strict=True) = Field(
        default=...,
        description="Name of the model to be used for generations. This model should be available in the provider",
    )
    parameters: Optional[Parameters] = Field(
        default=None, description="Parameters to pass to the model when generating"
    )
    extra_parameters: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Arbitrary extra parameters to pass to the model when generating",
    )
    __properties = ["provider", "model", "parameters", "extra_parameters"]

    @validator("model")
    def model_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z][a-zA-Z0-9\-]{1,30}[a-zA-Z0-9]$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-zA-Z][a-zA-Z0-9\-]{1,30}[a-zA-Z0-9]$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelConfiguration:
        """Create an instance of ModelConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of parameters
        if self.parameters:
            _dict["parameters"] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelConfiguration:
        """Create an instance of ModelConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelConfiguration.parse_obj(obj)

        _obj = ModelConfiguration.parse_obj(
            {
                "provider": obj.get("provider"),
                "model": obj.get("model"),
                "parameters": Parameters.from_dict(obj.get("parameters"))
                if obj.get("parameters") is not None
                else None,
                "extra_parameters": obj.get("extra_parameters"),
            }
        )
        return _obj
