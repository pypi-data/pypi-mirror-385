{"version":3,"file":"OAuthAuthorizePage-CQDKK2Hu.js","sources":["../../src/pages/OAuthAuthorizePage.tsx"],"sourcesContent":["\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useRouter } from '@/hooks/useRouter';\nimport { Button } from '@/components/ui/button';\n// Card components - inline definitions to avoid import issues\nconst Card = ({ className, children, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={`rounded-lg border bg-white/10 backdrop-blur-lg border-white/20 shadow-sm ${className || ''}`} {...props}>\n    {children}\n  </div>\n);\n\nconst CardHeader = ({ className, children, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={`flex flex-col space-y-1.5 p-6 ${className || ''}`} {...props}>\n    {children}\n  </div>\n);\n\nconst CardTitle = ({ className, children, ...props }: React.HTMLAttributes<HTMLHeadingElement>) => (\n  <h3 className={`text-2xl font-semibold leading-none tracking-tight text-white ${className || ''}`} {...props}>\n    {children}\n  </h3>\n);\n\nconst CardDescription = ({ className, children, ...props }: React.HTMLAttributes<HTMLParagraphElement>) => (\n  <p className={`text-sm text-gray-300 ${className || ''}`} {...props}>\n    {children}\n  </p>\n);\n\nconst CardContent = ({ className, children, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={`p-6 pt-0 ${className || ''}`} {...props}>\n    {children}\n  </div>\n);\nimport { ExternalLink, CheckCircle, XCircle, Loader2 } from 'lucide-react';\nimport { useAuth } from '@/contexts/auth-context';\nimport { newApi } from '@/lib/new-api';\n\ninterface AuthorizationData {\n  authorization_url: string;\n  state: string;\n  message: string;\n  instructions: string;\n}\n\nexport default function OAuthAuthorizePage() {\n  const router = useRouter();\n  const [searchParams] = useSearchParams();\n  const { isAuthenticated } = useAuth();\n  const [authData, setAuthData] = useState<AuthorizationData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [authStatus, setAuthStatus] = useState<'pending' | 'success' | 'error'>('pending');\n\n  const serverName = searchParams.get('server_name');\n  const returnUrl = searchParams.get('return_url') || '/servers';\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      router.push('/login');\n      return;\n    }\n\n    if (!serverName) {\n      setError('Server name is required');\n      setLoading(false);\n      return;\n    }\n\n    initiateAuthorization();\n  }, [isAuthenticated, serverName, router]);\n\n  const initiateAuthorization = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const accessToken = localStorage.getItem('access_token');\n      if (!accessToken) {\n        throw new Error('No access token available');\n      }\n\n      const result = await newApi.initiateMCPServerAuth(serverName!, accessToken);\n      \n      if (result.success && result.data) {\n        setAuthData(result.data);\n        setAuthStatus('pending');\n      } else {\n        throw new Error(result.error || 'Failed to initiate authorization');\n      }\n    } catch (err) {\n      console.error('Authorization initiation error:', err);\n      setError(err instanceof Error ? err.message : 'Failed to initiate authorization');\n      setAuthStatus('error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenAuthorizationUrl = () => {\n    if (authData?.authorization_url) {\n      window.open(authData.authorization_url, '_blank');\n    }\n  };\n\n  const handleCompleteAuthorization = async () => {\n    try {\n      setLoading(true);\n      \n      // Wait a moment for the OAuth callback to complete\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Check if authorization was successful by refreshing server status\n      const accessToken = localStorage.getItem('access_token');\n      if (!accessToken) {\n        throw new Error('No access token available');\n      }\n\n      // Try to connect the server to verify authorization\n      const connectResult = await newApi.connectMCPServer(serverName!, accessToken);\n      \n      if (connectResult.success) {\n        setAuthStatus('success');\n        // Redirect back to servers page after a short delay\n        setTimeout(() => {\n          router.push(returnUrl);\n        }, 2000);\n      } else {\n        // If connect fails, check if the server status has changed to connected\n        // by refreshing the server list\n        const serversResult = await newApi.listMCPServers(accessToken);\n        if (serversResult.success && serversResult.data) {\n          const responseData = serversResult.data as any;\n          const servers = responseData.servers || serversResult.data;\n          const server = servers.find((s: any) => s.name === serverName);\n          if (server && server.status === 'connected') {\n            setAuthStatus('success');\n            setTimeout(() => {\n              router.push(returnUrl);\n            }, 2000);\n            return;\n          }\n        }\n        \n        setAuthStatus('error');\n        setError('Authorization may not have completed successfully. Please try again.');\n      }\n    } catch (err) {\n      console.error('Authorization completion error:', err);\n      setAuthStatus('error');\n      setError('Failed to verify authorization completion');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRetry = () => {\n    setError(null);\n    setAuthStatus('pending');\n    initiateAuthorization();\n  };\n\n  const handleCancel = () => {\n    router.push(returnUrl);\n  };\n\n  if (loading && !authData) {\n    return (\n      <div className=\"min-h-screen bg-linear-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md bg-white/10 backdrop-blur-lg border-white/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Loader2 className=\"h-6 w-6 animate-spin text-blue-400\" />\n              <span className=\"text-white\">Initializing authorization...</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error && !authData) {\n    return (\n      <div className=\"min-h-screen bg-linear-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md bg-white/10 backdrop-blur-lg border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center space-x-2\">\n              <XCircle className=\"h-6 w-6 text-red-400\" />\n              <span>Authorization Error</span>\n            </CardTitle>\n            <CardDescription className=\"text-red-200\">\n              {error}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex space-x-2\">\n              <Button onClick={handleRetry} className=\"flex-1\">\n                Retry\n              </Button>\n              <Button onClick={handleCancel} variant=\"outline\" className=\"flex-1\">\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-linear-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-lg bg-white/10 backdrop-blur-lg border-white/20\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center space-x-2\">\n            {authStatus === 'success' && <CheckCircle className=\"h-6 w-6 text-green-400\" />}\n            {authStatus === 'error' && <XCircle className=\"h-6 w-6 text-red-400\" />}\n            {authStatus === 'pending' && <Loader2 className=\"h-6 w-6 animate-spin text-blue-400\" />}\n            <span>\n              {authStatus === 'success' && 'Authorization Successful'}\n              {authStatus === 'error' && 'Authorization Failed'}\n              {authStatus === 'pending' && `Authorize ${serverName}`}\n            </span>\n          </CardTitle>\n          <CardDescription className=\"text-gray-300\">\n            {authData?.message || 'Complete the authorization process'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {authStatus === 'pending' && authData && (\n            <>\n              <div className=\"bg-blue-500/10 border border-blue-500/20 rounded-lg p-4\">\n                <p className=\"text-blue-200 text-sm mb-3\">\n                  {authData.instructions}\n                </p>\n                <div className=\"bg-black/20 rounded p-3\">\n                  <p className=\"text-xs text-gray-400 mb-1\">Authorization URL:</p>\n                  <p className=\"text-xs text-blue-300 break-all\">\n                    {authData.authorization_url}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <Button \n                  onClick={handleOpenAuthorizationUrl}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Open Authorization Page\n                </Button>\n                \n                <div className=\"text-center\">\n                  <p className=\"text-sm text-gray-400 mb-2\">\n                    After completing authorization in the new window, click the button below:\n                  </p>\n                  <Button \n                    onClick={handleCompleteAuthorization}\n                    disabled={loading}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Verifying Authorization...\n                      </>\n                    ) : (\n                      'Complete Authorization'\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n\n          {authStatus === 'success' && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"bg-green-500/10 border border-green-500/20 rounded-lg p-4\">\n                <p className=\"text-green-200\">\n                  Authorization completed successfully! Redirecting back to servers...\n                </p>\n              </div>\n              <Button onClick={() => router.push(returnUrl)} className=\"w-full\">\n                Go to Servers\n              </Button>\n            </div>\n          )}\n\n          {authStatus === 'error' && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4\">\n                <p className=\"text-red-200\">\n                  {error || 'Authorization failed. Please try again.'}\n                </p>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button onClick={handleRetry} className=\"flex-1\">\n                  Retry\n                </Button>\n                <Button onClick={handleCancel} variant=\"outline\" className=\"flex-1\">\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":["Card","className","children","props","jsx","CardHeader","CardTitle","CardDescription","CardContent","OAuthAuthorizePage","router","useRouter","searchParams","useSearchParams","isAuthenticated","useAuth","authData","setAuthData","useState","loading","setLoading","error","setError","authStatus","setAuthStatus","serverName","returnUrl","useEffect","initiateAuthorization","accessToken","result","newApi","err","handleOpenAuthorizationUrl","handleCompleteAuthorization","resolve","serversResult","server","s","handleRetry","handleCancel","jsxs","Loader2","XCircle","Button","CheckCircle","Fragment","ExternalLink"],"mappings":"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"}