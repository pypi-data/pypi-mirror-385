{"version":3,"file":"AddServerPage-CncyEUWn.js","sources":["../../src/pages/AddServerPage.tsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport { useRouter } from '@/hooks/useRouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  ArrowLeft,\n  Plus,\n  Server as ServerIcon,\n  Terminal,\n  Globe,\n  Wifi,\n  Settings,\n  AlertTriangle,\n  CheckCircle,\n  RefreshCw\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/auth-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { newApi } from '@/lib/new-api';\n\ninterface ServerFormData {\n  name: string;\n  description: string;\n  transport: 'stdio' | 'http' | 'sse';\n  command: string;\n  url: string;\n  args: string;\n  env: string;\n  headers: string;\n  auto_connect: boolean;\n  enabled: boolean;\n}\n\nexport default function AddServerPage() {\n  const router = useRouter();\n  const { user, loading: authLoading, isAuthenticated } = useAuth();\n  const { success, error: toastError } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const [formData, setFormData] = useState<ServerFormData>({\n    name: '',\n    description: '',\n    transport: 'stdio',\n    command: '',\n    url: '',\n    args: '',\n    env: '',\n    headers: '',\n    auto_connect: false,\n    enabled: true\n  });\n\n  React.useEffect(() => {\n    // Redirect to login if not authenticated and not loading\n    if (!authLoading && !isAuthenticated) {\n      router.push('/login');\n      return;\n    }\n  }, [authLoading, isAuthenticated, router]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      setError('Server name is required');\n      return;\n    }\n\n    if (formData.transport === 'stdio' && !formData.command.trim()) {\n      setError('Command is required for STDIO transport');\n      return;\n    }\n\n    if ((formData.transport === 'http' || formData.transport === 'sse') && !formData.url.trim()) {\n      setError('URL is required for HTTP/SSE transport');\n      return;\n    }\n\n    // Validate JSON fields\n    if (formData.env.trim() && formData.env !== '{}') {\n      try {\n        JSON.parse(formData.env);\n      } catch {\n        setError('Environment variables must be valid JSON (e.g., {\"KEY\": \"value\"})');\n        return;\n      }\n    }\n\n    if (formData.headers.trim() && formData.headers !== '{}') {\n      try {\n        JSON.parse(formData.headers);\n      } catch {\n        setError('Headers must be valid JSON (e.g., {\"Authorization\": \"Bearer token\"})');\n        return;\n      }\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const accessToken = localStorage.getItem('access_token');\n      if (!accessToken) {\n        throw new Error('No access token available');\n      }\n      \n      // Prepare the server data for new API\n      const serverData = {\n        name: formData.name,\n        mode: formData.transport,\n        description: formData.description,\n        command: formData.transport === 'stdio' ? formData.command : undefined,\n        args: formData.args ? formData.args.split(',').map(arg => arg.trim()) : undefined,\n        env: formData.env ? JSON.parse(formData.env) : undefined,\n        url: (formData.transport === 'http' || formData.transport === 'sse') ? formData.url : undefined,\n        headers: formData.headers ? JSON.parse(formData.headers) : undefined,\n        auto_connect: formData.auto_connect,\n        enabled: formData.enabled\n      };\n      \n      const result = await newApi.installMCPServer(serverData, accessToken);\n      \n      if (result.success) {\n        console.log('âœ… Server added successfully:', result.server);\n        success('Server added successfully!');\n        // Redirect back to servers page\n        router.push('/servers?success=added');\n      } else {\n        throw new Error(result.error || 'Failed to add server');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to add server';\n      setError(errorMessage);\n      toastError(errorMessage);\n      console.error('Error adding server:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFieldChange = (field: keyof ServerFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const getTransportIcon = (transport: string) => {\n    switch (transport) {\n      case 'stdio':\n        return Terminal;\n      case 'http':\n        return Globe;\n      case 'sse':\n        return Wifi;\n      default:\n        return ServerIcon;\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const TransportIcon = getTransportIcon(formData.transport);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Main Content */}\n      <div className=\"h-screen overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-6\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => router.push('/servers')}\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Servers\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"h-12 w-12 rounded-xl bg-primary/10 flex items-center justify-center\">\n                <Plus className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-foreground\">Add MCP Server</h1>\n                <p className=\"text-muted-foreground\">Configure a new Model Context Protocol server connection</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-6\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleSubmit}>\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-8\">\n              {/* Basic Information */}\n              <div className=\"mb-8\">\n                <div className=\"flex items-center gap-2 mb-6\">\n                  <Settings className=\"h-5 w-5 text-primary\" />\n                  <h3 className=\"text-xl font-semibold text-foreground\">Basic Information</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Server Name <span className=\"text-destructive\">*</span>\n                    </label>\n                    <Input\n                      type=\"text\"\n                      value={formData.name}\n                      onChange={(e) => handleFieldChange('name', e.target.value)}\n                      placeholder=\"my-mcp-server\"\n                      required\n                    />\n                    <p className=\"mt-1 text-xs text-muted-foreground\">\n                      Unique identifier for this server\n                    </p>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Transport Type <span className=\"text-destructive\">*</span>\n                    </label>\n                    <div className=\"grid grid-cols-3 gap-3\">\n                      {[\n                        { value: 'stdio', label: 'STDIO', icon: Terminal, desc: 'Command line process' },\n                        { value: 'http', label: 'HTTP', icon: Globe, desc: 'HTTP endpoint' },\n                        { value: 'sse', label: 'SSE', icon: Wifi, desc: 'Server-sent events' }\n                      ].map((option) => {\n                        const Icon = option.icon;\n                        return (\n                          <button\n                            key={option.value}\n                            type=\"button\"\n                            onClick={() => handleFieldChange('transport', option.value as 'stdio' | 'http' | 'sse')}\n                            className={`p-4 rounded-lg border-2 text-center transition-all ${\n                              formData.transport === option.value\n                                ? 'border-primary bg-primary/10 text-primary'\n                                : 'border-border hover:border-primary/50 text-muted-foreground hover:text-foreground'\n                            }`}\n                          >\n                            <Icon className=\"h-6 w-6 mx-auto mb-2\" />\n                            <div className=\"font-medium text-sm\">{option.label}</div>\n                            <div className=\"text-xs opacity-75\">{option.desc}</div>\n                          </button>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-6\">\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Description\n                  </label>\n                  <Textarea\n                    value={formData.description}\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleFieldChange('description', e.target.value)}\n                    placeholder=\"Brief description of this server\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n\n              {/* STDIO Configuration */}\n              {formData.transport === 'stdio' && (\n                <div className=\"mb-8 pt-8\">\n                  <Separator className=\"mb-6\" />\n                  <div className=\"flex items-center gap-2 mb-6\">\n                    <Terminal className=\"h-5 w-5 text-orange-600 dark:text-orange-400\" />\n                    <h3 className=\"text-xl font-semibold text-foreground\">STDIO Configuration</h3>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Command <span className=\"text-destructive\">*</span>\n                      </label>\n                      <Input\n                        type=\"text\"\n                        value={formData.command}\n                        onChange={(e) => handleFieldChange('command', e.target.value)}\n                        placeholder=\"python -m mcp_server\"\n                        required\n                      />\n                      <p className=\"mt-1 text-xs text-muted-foreground\">\n                        Command to execute the MCP server\n                      </p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Arguments\n                      </label>\n                      <Input\n                        type=\"text\"\n                        value={formData.args}\n                        onChange={(e) => handleFieldChange('args', e.target.value)}\n                        placeholder='[\"--config\", \"config.json\"] or --config config.json'\n                      />\n                      <p className=\"mt-1 text-xs text-muted-foreground\">\n                        Command line arguments (JSON array or space-separated)\n                      </p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Environment Variables\n                      </label>\n                      <Textarea\n                        value={formData.env}\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleFieldChange('env', e.target.value)}\n                        placeholder='{\"API_KEY\": \"your-key\", \"DEBUG\": \"true\"}'\n                        rows={3}\n                      />\n                      <p className=\"mt-1 text-xs text-muted-foreground\">\n                        Environment variables as JSON object\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* HTTP/SSE Configuration */}\n              {(formData.transport === 'http' || formData.transport === 'sse') && (\n                <div className=\"mb-8 pt-8\">\n                  <Separator className=\"mb-6\" />\n                  <div className=\"flex items-center gap-2 mb-6\">\n                    <TransportIcon className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    <h3 className=\"text-xl font-semibold text-foreground\">{formData.transport.toUpperCase()} Configuration</h3>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Server URL <span className=\"text-destructive\">*</span>\n                      </label>\n                      <Input\n                        type=\"url\"\n                        value={formData.url}\n                        onChange={(e) => handleFieldChange('url', e.target.value)}\n                        placeholder=\"https://api.example.com/mcp\"\n                        required\n                      />\n                      <p className=\"mt-1 text-xs text-muted-foreground\">\n                        Full URL to the MCP server endpoint\n                      </p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        HTTP Headers\n                      </label>\n                      <Textarea\n                        value={formData.headers}\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleFieldChange('headers', e.target.value)}\n                        placeholder='{\"User-Agent\": \"MCP-Client\", \"Accept\": \"application/json\"}'\n                        rows={3}\n                      />\n                      <p className=\"mt-1 text-xs text-muted-foreground\">\n                        Custom HTTP headers as JSON object\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Connection Options */}\n              <div className=\"pt-8\">\n                <Separator className=\"mb-6\" />\n                <div className=\"flex items-center gap-2 mb-6\">\n                  <CheckCircle className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                  <h3 className=\"text-xl font-semibold text-foreground\">Connection Options</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"auto_connect\"\n                      checked={formData.auto_connect}\n                      onChange={(e) => handleFieldChange('auto_connect', e.target.checked)}\n                      className=\"w-4 h-4 text-primary bg-background border-border rounded focus:ring-primary focus:ring-2\"\n                    />\n                    <label htmlFor=\"auto_connect\" className=\"ml-3 text-sm text-foreground\">\n                      Auto-connect on startup\n                    </label>\n                  </div>\n\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"enabled\"\n                      checked={formData.enabled}\n                      onChange={(e) => handleFieldChange('enabled', e.target.checked)}\n                      className=\"w-4 h-4 text-primary bg-background border-border rounded focus:ring-primary focus:ring-2\"\n                    />\n                    <label htmlFor=\"enabled\" className=\"ml-3 text-sm text-foreground\">\n                      Enabled\n                    </label>\n                  </div>\n                </div>\n              </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4 justify-end mt-8 pb-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => router.push('/servers')}\n                disabled={loading}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={loading}\n              >\n                {loading ? (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Adding Server...\n                  </>\n                ) : (\n                  <>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Server\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":["AddServerPage","router","useRouter","user","authLoading","isAuthenticated","useAuth","success","toastError","useToast","loading","setLoading","useState","error","setError","formData","setFormData","React","handleSubmit","e","accessToken","serverData","arg","result","newApi","err","errorMessage","handleFieldChange","field","value","prev","getTransportIcon","transport","Terminal","Globe","Wifi","ServerIcon","jsxs","jsx","TransportIcon","Button","ArrowLeft","Plus","Alert","AlertTriangle","AlertDescription","Card","CardContent","Settings","Input","option","Icon","Textarea","Separator","CheckCircle","Fragment","RefreshCw"],"mappings":"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"}