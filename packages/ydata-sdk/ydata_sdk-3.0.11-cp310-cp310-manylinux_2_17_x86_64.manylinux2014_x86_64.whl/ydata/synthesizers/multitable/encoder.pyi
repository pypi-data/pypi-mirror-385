from _typeshed import Incomplete
from pandas import DataFrame as pdDataFrame
from ydata.metadata import Metadata as Metadata
from ydata.metadata.multimetadata import TableSchema as TableSchema
from ydata.synthesizers.multitable import EncoderType

class BaseEncoder:
    def __init__(self) -> None: ...
    @property
    def encoded_columns(self) -> list[str]: ...
    def fit(self, X: pdDataFrame, metadata: Metadata, schema: TableSchema, table: str = ''): ...
    def encode(self, X: pdDataFrame): ...
    def fit_predict(self, X: pdDataFrame, metadata: Metadata, schema: TableSchema, table: str = ''): ...
    def transform(self, X): ...

class BirchEncoder(BaseEncoder):
    model: Incomplete
    def __init__(self, max_features: int = 20) -> None: ...
    def fit(self, X: pdDataFrame, metadata: Metadata, schema: TableSchema, table: str = ''): ...

class AffinityPropagationEncoder(BaseEncoder):
    model: Incomplete
    def __init__(self) -> None: ...

class MeanShiftEncoder(BaseEncoder):
    model: Incomplete
    def __init__(self) -> None: ...

class EncoderFabric:
    @staticmethod
    def create(algorithm: str | EncoderType = 'birch') -> BaseEncoder: ...
