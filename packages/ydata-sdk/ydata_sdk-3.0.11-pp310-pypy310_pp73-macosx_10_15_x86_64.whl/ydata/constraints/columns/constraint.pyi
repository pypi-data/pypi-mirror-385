from _typeshed import Incomplete
from pandas import DataFrame as pdDataFrame
from typing import Callable
from ydata.constraints.base import ColumnConstraint
from ydata.dataset.dataset import Dataset

class CustomConstraint(ColumnConstraint):
    name: Incomplete
    available_columns: Incomplete
    def __init__(self, check: Callable, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...
    def validate(self, dataset: Dataset) -> pdDataFrame: ...

class Interval(CustomConstraint):
    def __init__(self, check: Callable, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None, lower_bound: int | float = ..., upper_bound: int | float = ..., closed: str = 'right') -> None: ...

class GreaterThan(Interval):
    def __init__(self, check: Callable, value: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...

class LowerThan(Interval):
    def __init__(self, check: Callable, value: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...

class Equal(Interval):
    def __init__(self, check: Callable, value: int | float, tolerance: int | float = 0, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...

class StandardDeviationBetween(Interval):
    def __init__(self, lower_bound: int | float, upper_bound: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...

class MeanBetween(Interval):
    def __init__(self, lower_bound: int | float, upper_bound: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...

class QuantileBetween(Interval):
    quantile: Incomplete
    def __init__(self, quantile: float, lower_bound: int | float, upper_bound: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...
    def calculate_quantile(self, data): ...

class UniqueValuesBetween(Interval):
    def __init__(self, lower_bound: int | float, upper_bound: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...
    def calculate_unique_counts(self, data): ...

class Constant(Interval):
    def __init__(self, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...
    def calculate_unique_counts(self, data): ...

class NullValuesCountLowerThan(LowerThan):
    def __init__(self, value: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...
    def count_null(self, data): ...

class SumLowerThan(LowerThan):
    def __init__(self, value: int | float, columns: str | list[str] | None = None, name: str | None = None, available_columns: list[str] | None = None, entity: str | None = None) -> None: ...
