from _typeshed import Incomplete
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.preprocessing import MinMaxScaler
from ydata.__serializer import SerializerMixin
from ydata.preprocessors.preprocess_methods import CategoricalEncoder, CategoricalImputer, DateTimeImputer, DateTimeTransformer, IdentityTransformer, IntegerTransformer

class TimeSeriesIdentity(BaseEstimator, TransformerMixin):
    def fit(self, X): ...
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesEquidistance(BaseEstimator, TransformerMixin):
    mode: Incomplete
    def fit(self, X, y: Incomplete | None = None): ...
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesOutlierDetector(BaseEstimator, TransformerMixin):
    outlier_frac: Incomplete
    def __init__(self, *, outlier_frac: float = 0.01) -> None: ...
    model: Incomplete
    def fit(self, X): ...
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesDetrend(BaseEstimator, TransformerMixin):
    cols_to_detrend: Incomplete
    trends: Incomplete
    def __init__(self, cols_to_detrend) -> None: ...
    def fit(self, X, y: Incomplete | None = None): ...
    def fit_column(self, X): ...
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesMinMaxScaler(MinMaxScaler):
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesIntegerTransformer(IntegerTransformer):
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesIdentityTransformer(IdentityTransformer):
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesCategoricalImputer(CategoricalImputer):
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesCategoricalEncoder(CategoricalEncoder):
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesDateTimeImputer(DateTimeImputer):
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesDateTimeTransformer(DateTimeTransformer):
    def transform(self, X, y: Incomplete | None = None): ...
    def inverse_transform(self, X): ...

class TimeSeriesPreprocessor(BaseEstimator, TransformerMixin, SerializerMixin):
    num_cols: Incomplete
    cat_cols: Incomplete
    dt_cols: Incomplete
    num_pipeline: Incomplete
    pre_pipeline: Incomplete
    cat_pipeline: Incomplete
    dt_pipeline: Incomplete
    def __init__(self, *, num_cols: list[str] = None, cat_cols: list[str] = None, dt_cols: list[str] = None, filter_outliers: bool = False) -> None: ...
    def fit(self, X, **kwargs): ...
    def transform(self, X): ...
    def inverse_transform(self, X): ...
