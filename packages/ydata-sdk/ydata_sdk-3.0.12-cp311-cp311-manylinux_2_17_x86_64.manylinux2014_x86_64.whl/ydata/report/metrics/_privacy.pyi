from _typeshed import Incomplete
from ydata.report.metrics import MetricType
from ydata.report.metrics.base_metric import BaseMetric

def get_duplicates(df_real, df_fake):
    """Retrieve any observations from the synthetic dataset that exist in the
    real dataset.

    Returns:
        duplicates = A Dataframe containing the duplicated rows
    """

class ExactMatch(BaseMetric):
    def __init__(self, formatter=...) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> MetricType: ...

class SynthClassifier(BaseMetric):
    def __init__(self, formatter=..., exclude_entity_col: bool = True) -> None: ...
    @property
    def name(self) -> str: ...

class MembershipDisclosureScore(BaseMetric):
    n_records: Incomplete
    def __init__(self, formatter=..., n_records: int = 1000) -> None: ...
    @property
    def name(self) -> str: ...
    def score(self, holdout, synthetic, training, random_state: Incomplete | None = None): ...
    def adversiarial_attack(self, source, synthetic): ...

class IdentifiabilityScore(BaseMetric):
    def __init__(self, formatter=...) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> MetricType: ...
