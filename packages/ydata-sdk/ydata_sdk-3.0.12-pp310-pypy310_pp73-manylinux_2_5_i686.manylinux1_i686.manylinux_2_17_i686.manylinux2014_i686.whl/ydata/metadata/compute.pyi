from dataclasses import dataclass
from ydata.core.enum import StringEnum

class ComputeMode(StringEnum):
    NOW: str
    LATER: str
    DEFERRED: str
    AUTO: str

def init_compute_mode(mode: ComputeMode | bool | str | None) -> ComputeMode: ...

@dataclass
class ComputeConfig:
    characteristics: ComputeMode = ...
    correlation: ComputeMode = ...
    interaction: ComputeMode = ...
    pairwise_metrics: bool = ...
    infer_characteristics: bool = ...
    def __post_init__(self) -> None: ...
    def resolve_auto(self, inplace: bool = False) -> ComputeConfig: ...
    def __init__(self, characteristics=..., correlation=..., interaction=..., pairwise_metrics=..., infer_characteristics=...) -> None: ...
