from dask.dataframe import DataFrame as ddDataframe
from typing import Literal

def anonymizer_from_one(gen, X: ddDataframe, cardinality: dict, unique: bool = True): ...
def regex_anonymizer(X: ddDataframe, cardinality: dict, regex: str = '', unique: bool = True, **kwargs) -> str: ...
def ip_anonymizer(X: ddDataframe, cardinality: dict, unique: bool = True, **kwargs) -> str: ...
def ipv4_anonymizer(X: ddDataframe, cardinality: dict, unique: bool = True, **kwargs) -> str: ...
def ipv6_anonymizer(X: ddDataframe, cardinality: dict, unique: bool = True, **kwargs) -> str: ...
def hostname_anonymizer(X: ddDataframe, cardinality: dict, levels: Literal[1, 2, 3] = 1, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def license_plate_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def aba_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def bank_country_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def bban_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def iban_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def postcode_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def swift_anonymizer(X: ddDataframe, cardinality: dict, length: int = 11, primary: bool = False, use_dataset: bool = False, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def barcode_anonymizer(X: ddDataframe, cardinality: dict, length: int = 13, prefixes: tuple = (), locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def company_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def company_suffix_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def company_email_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def email_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def domain_name_anonymizer(X: ddDataframe, cardinality: dict, levels: Literal[1, 2, 3] = 1, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def mac_address_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def port_number_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def uri_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def url_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def user_name_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def job_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def uuid4_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def first_name_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def first_name_female_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def first_name_male_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def last_name_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def name_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def name_female_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def name_male_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def phone_number_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def ssn_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def city_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def country_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def country_code_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def street_address_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def street_name_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def full_address_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def credit_card_number_anonymizer(X: ddDataframe, cardinality: dict, card_type: Literal['amex', 'diners', 'discover', 'jcb', 'jcb15', 'jcb16', 'maestro', 'mastercard', 'visa', 'visa13', 'visa16', 'visa19'] | None = None, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def credit_card_provider_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def credit_card_expire_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def vat_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def phone_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def int_anonymizer(X: ddDataframe, cardinality: dict, locale: str = 'en', unique: bool = True, **kwargs) -> str: ...
def text_anonymizer(X: ddDataframe, card, text_anonymizers: list, anonymizers, **kwargs): ...
