name: ML System CI/CD Pipeline

on:
  # Temporarily disabled automatic runs - enable via workflow_dispatch only
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     - 'src/mcli/ml/**'
  #     - 'tests/test_ml_*.py'
  #     - 'pyproject.toml'
  #     - '.github/workflows/ml-pipeline.yml'
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - 'src/mcli/ml/**'
  #     - 'tests/test_ml_*.py'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev,ml]"

      - name: Run ruff linter
        run: |
          source .venv/bin/activate
          ruff check src/mcli/ml tests/unit/test_ml*.py tests/integration/test_ml*.py || true

      - name: Run ruff formatter check
        run: |
          source .venv/bin/activate
          ruff format --check src/mcli/ml tests/unit/test_ml*.py tests/integration/test_ml*.py || true

      - name: Run mypy type checking
        run: |
          source .venv/bin/activate
          mypy src/mcli/ml --ignore-missing-imports

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev,ml,test]"

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pytest tests/unit/test_ml*.py tests/integration/test_ml*.py -v --cov=src/mcli/ml --cov-report=xml --cov-report=term || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ml_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ml_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev,ml,test]"

      - name: Set up test environment
        run: |
          cp .env.example .env.test
          echo "DB_HOST=localhost" >> .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_NAME=ml_test" >> .env.test
          echo "DB_USER=ml_user" >> .env.test
          echo "DB_PASSWORD=test_password" >> .env.test
          echo "REDIS_HOST=localhost" >> .env.test
          echo "REDIS_PORT=6379" >> .env.test

      - name: Run database migrations
        run: |
          source .venv/bin/activate
          export DATABASE_URL=postgresql://ml_user:test_password@localhost:5432/ml_test
          alembic upgrade head

      - name: Run integration tests
        run: |
          source .venv/bin/activate
          pytest tests/integration/test_ml*.py -v -m integration --env-file=.env.test || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv venv
          uv pip install bandit safety

      - name: Run bandit security scan
        run: |
          source .venv/bin/activate
          bandit -r src/mcli/ml -f json -o bandit-report.json

      - name: Run safety check
        run: |
          source .venv/bin/activate
          safety check --json > safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/mcli-ml
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.ml
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: [lint, test, integration-test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.mcli-ml.example.com

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging..."
          # Add actual deployment commands here
          # e.g., kubectl apply, terraform apply, etc.

  deploy-production:
    name: Deploy to Production
    needs: [lint, test, integration-test, security, build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://mcli-ml.example.com

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'ML System deployment to production: ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  performance-test:
    name: Performance Testing
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev,ml,test]"
          uv pip install locust

      - name: Run performance tests
        run: |
          source .venv/bin/activate
          pytest tests/unit/test_ml*.py tests/integration/test_ml*.py -v -m performance --benchmark-only || true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: .benchmarks/