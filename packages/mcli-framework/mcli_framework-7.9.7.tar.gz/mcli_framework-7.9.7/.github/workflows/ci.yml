name: CI/CD Pipeline

on:
  # Temporarily disabled automatic runs - enable via workflow_dispatch only
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
        pip install -e .[dev]
        
    - name: Check code formatting with Black
      run: black --check --diff src/
      
    - name: Check import sorting with isort
      run: isort --check-only --diff src/
      
    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports || true

  test-rust:
    name: Test Rust Extensions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Rust format check
      run: |
        cd mcli_rust
        cargo fmt --all -- --check
        
    - name: Rust clippy
      run: |
        cd mcli_rust
        cargo clippy -- -D warnings
        
    - name: Rust tests
      run: |
        cd mcli_rust
        cargo test

  test-python:
    name: Test Python Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpq-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql

    - name: Set up Rust (for building extensions)
      uses: dtolnay/rust-toolchain@stable

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin
        pip install -e .[dev]
        
    - name: Build Rust extensions
      run: |
        cd mcli_rust
        maturin develop
        
    - name: Run Python tests
      run: |
        pytest tests/ -v --tb=short
        
    - name: Test CLI functionality
      run: |
        mcli version
        mcli --help
        mcli self --help
        mcli visual --help

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-python, test-rust]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin
        pip install -e .[dev]
        
    - name: Build Rust extensions
      run: |
        cd mcli_rust
        maturin develop
        
    - name: Test Rust-Python integration
      run: |
        python -c "
        import mcli_rust
        print('âœ… Rust extensions imported successfully')
        
        # Test TF-IDF
        vectorizer = mcli_rust.TfIdfVectorizer()
        docs = ['hello world', 'rust is fast', 'python integration']
        vectors = vectorizer.fit_transform(docs)
        print(f'âœ… TF-IDF: Generated {len(vectors)} vectors')
        
        # Test File Watcher
        watcher = mcli_rust.FileWatcher()
        print('âœ… File Watcher: Created successfully')
        
        # Test Command Matcher
        matcher = mcli_rust.CommandMatcher()
        print('âœ… Command Matcher: Created successfully')
        
        # Test Process Manager
        manager = mcli_rust.ProcessManager()
        print('âœ… Process Manager: Created successfully')
        
        print('ðŸŽ‰ All Rust extensions working!')
        "
        
    - name: Test performance monitoring
      run: |
        mcli self performance --detailed
        
    - name: Test visual effects
      run: |
        mcli visual message --style success "Integration tests passed!"
        mcli visual spinner --spinner-type rust --duration 2 --message "Testing spinner..."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

  build-package:
    name: Build Distribution Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-python, test-rust, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build maturin
        
    - name: Build Rust extensions
      run: |
        cd mcli_rust
        maturin build --release
        
    - name: Build Python package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: |
          dist/
          mcli_rust/target/wheels/
        retention-days: 7