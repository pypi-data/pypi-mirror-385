[project]
name = "mcli-framework"
version = "7.9.5"
description = "Portable workflow framework - transform any script into a versioned, schedulable command. Store in ~/.mcli/commands/, version with lockfile, run as daemon or cron job."
readme = "README.md"
requires-python = ">=3.9"
authors = [{ name = "Luis Fernandez de la Vara", email = "luis@lefv.io" }]
maintainers = [{ name = "Luis Fernandez de la Vara", email = "luis@lefv.io" }]
license = { text = "MIT" }
keywords = [
  "cli", "command-line", "framework", "chat", "assistant", "rust", "performance",
  "visual", "tui", "terminal", "ai", "openai", "anthropic", "productivity"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Rust",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Shells",
  "Topic :: System :: Systems Administration",
  "Topic :: Terminals",
  "Topic :: Utilities",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Typing :: Typed",
]
dependencies = [
  # Core CLI dependencies
  "click>=8.1.7,<9.0.0",
  "rich>=14.0.0",
  "requests>=2.31.0,<3.0.0",
  "tomli>=2.2.1",
  "python-dotenv>=1.1.1",
  # Core utilities
  "watchdog>=3.0.0,<4.0.0",
  "tqdm>=4.66.1,<5.0.0",
  "humanize>=4.9.0,<5.0.0",
  "psutil>=5.9.0,<6.0.0",
  "inquirerpy>=0.3.4,<0.4.0",
  "gitpython>=3.1.40,<4.0.0",
  "prompt-toolkit>=3.0.0,<4.0.0",
  # Basic HTTP/async support
  "aiohttp>=3.9.0",
  "httpx>=0.28.1",
  "websockets>=12.0",
  # Data parsing
  "beautifulsoup4>=4.13.5",
  "fuzzywuzzy>=0.18.0",
  # Chat and AI capabilities
  "openai>=1.3.0,<2.0.0",
  "anthropic>=0.60.0",
  "ollama>=0.5.3",
  "ipython>=8.12.0,<9.0.0",
  # Enhanced async/performance features
  "fastapi>=0.110.0",
  "uvicorn>=0.27.0",
  "uvloop>=0.19.0",
  "aiosqlite>=0.20.0",
  "redis>=5.0.0",
  "aiohttp-sse-client>=0.2.1",
  "aiomqtt>=2.0.0",
  # Video processing
  "opencv-python>=4.11.0.86",
  "pillow>=11.2.1",
  "numpy>=1.24.0,<2.0.0",
  "scikit-image>=0.24.0",
  "scipy>=1.10.0",
  # Document processing
  "pypdf2>=3.0.1",
  "pymupdf>=1.26.3",
  "pandas>=2.3.1",
  "openpyxl>=3.1.5",
  # Visualization
  "matplotlib>=3.9.4",
  "pydot>=4.0.1",
  "graphviz>=0.21",
  "seaborn>=0.13.0",
  "plotly>=5.17.0",
  # Database support
  "supabase>=2.18.1",
  "sqlalchemy>=2.0.0",
  "alembic>=1.12.0",
  "psycopg2-binary>=2.9.7",
  "asyncpg>=0.29.0",
  # ML/Trading features
  "torch>=2.0.0",
  "torchvision>=0.15.0",
  "pytorch-lightning>=2.0.0",
  "scikit-learn>=1.3.0,<2.0.0",
  "mlflow>=2.8.0",
  "dvc>=3.0.0",
  "polars>=0.19.0",
  "pyarrow>=14.0.0",
  "yfinance>=0.2.18",
  "alpha-vantage>=2.3.1",
  "alpaca-py==0.42.2",
  "cvxpy>=1.4.0",
  "python-jose[cryptography]>=3.3.0",
  "passlib[bcrypt]>=1.7.4",
  "pydantic-settings>=2.1.0",
  "dynaconf>=3.2.0",
  "pandera>=0.17.0",
  "pendulum>=2.1.2",
  "optuna>=3.4.0",
  "PyPortfolioOpt>=1.5.5",
  "jupyter>=1.0.0",
  "jupyterlab>=4.0.0",
  "ipykernel>=6.27.0",
  # Production monitoring
  "prometheus-client>=0.19.0",
  "structlog>=23.2.0",
  "gunicorn>=21.2.0",
  "newrelic>=9.2.0",
  "datadog>=0.49.0",
  "orjson>=3.9.0",
  # Streaming/messaging
  "kafka-python>=2.0.2",
  # Dashboard
  "streamlit>=1.50.0",
  "altair>=4.2.1,<5.0.0",
  "streamlit-autorefresh>=1.0.1",
  "typer>=0.9.0",
  # Web framework
  "flask>=2.3.0,<3.0.0",
]

[project.urls]
"Homepage" = "https://github.com/gwicho38/mcli"
"Repository" = "https://github.com/gwicho38/mcli"
"Documentation" = "https://github.com/gwicho38/mcli#readme"
"Issues" = "https://github.com/gwicho38/mcli/issues"
"Changelog" = "https://github.com/gwicho38/mcli/releases"
"Source" = "https://github.com/gwicho38/mcli"

[project.optional-dependencies]
# GPU support (optional - system specific)
gpu = [
  "cupy-cuda12x>=12.3.0",
  "nvidia-ml-py>=12.535.0",
]

# Legacy extras for backward compatibility (all features now included by default)
chat = []
async-extras = []
video = []
documents = []
viz = []
database = []
ml = []
monitoring = []
streaming = []
dashboard = []
web = []

# Development tools
dev = [
  # Testing framework
  "pytest>=8.4.1",
  "pytest-cov>=4.1.0,<5.0.0",
  "pytest-mock>=3.14.1",
  "pytest-asyncio>=1.1.0",
  "pytest-benchmark>=4.0.0",      # Performance testing
  "pytest-timeout>=2.2.0",        # Timeout control
  "pytest-xdist>=3.5.0",          # Parallel testing
  "hypothesis>=6.92.0",           # Property-based testing
  "faker>=22.0.0",                # Test data generation
  "responses>=0.24.0",            # HTTP mocking
  "freezegun>=1.4.0",             # Time mocking
  "pytest-html>=4.1.0",           # HTML reports
  "pytest-json-report>=1.5.0",   # JSON reports

  # Code quality
  "black>=23.0.0",
  "isort>=5.12.0,<6.0.0",
  "mypy>=1.7.1,<2.0.0",
  "ruff>=0.1.0",                  # Fast linter
  "pre-commit>=3.6.0",            # Git hooks

  # Build tools
  "build>=1.2.2.post1",
  "maturin>=1.9.3",
  "twine>=4.0.0",                 # Package upload
]

# All optional features (all features now included by default)
all = []

[tool.black]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["mcli"]
known_third_party = [
    "click", "rich", "requests", "tomli", "openai", "anthropic",
    "fastapi", "uvicorn", "uvloop", "aiosqlite", "redis", "watchdog",
    "tqdm", "humanize", "psutil", "ipython", "inquirerpy", "flask",
    "gitpython", "maturin", "scikit-learn", "numpy", "pillow",
    "opencv", "scikit-image", "pypdf2", "pymupdf", "pydot", "graphviz",
    "fuzzywuzzy", "pandas", "openpyxl", "ollama", "pytest", "supabase",
    "httpx", "aiohttp", "beautifulsoup4", "python-dotenv", "matplotlib"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
# Basic mypy configuration
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Module discovery
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true

# Output
show_error_codes = true
show_column_numbers = true
show_error_context = true
color_output = true
error_summary = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "scripts.*",
    "docs.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "mcli.workflow.openai.*",
    "mcli.workflow.anthropic.*",
    "mcli.lib.performance.*",
]
warn_return_any = false

[build-system]
requires = ["setuptools>=65.0.0", "wheel>=0.40.0"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=5.13.2",
    "mypy>=1.16.1",
    "pytest>=8.4.1",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.6.0",
    "flake8>=7.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=24.1.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-simplify>=0.21.0",
    "bandit>=1.7.0",
    "safety>=3.0.0",
]

[tool.setuptools]
packages = { find = { where = ["src"] } }
include-package-data = true

[tool.setuptools.exclude-package-data]
mcli = ["**/tests/**/*", "**/__pycache__/**/*"]

[tool.coverage.run]
source = ["src/mcli"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/.*",
    "setup.py",
    "*/migrations/*",
    "*/static/*",
    "*/templates/*",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/mcli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "cli: marks tests as CLI tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
]

[project.scripts]
mcli = "mcli.app.main:main"
mcli-train = "mcli.ml.training.train:main"
mcli-serve = "mcli.ml.serving.serve:main"
mcli-backtest = "mcli.ml.backtesting.run:main"
mcli-optimize = "mcli.ml.optimization.optimize:main"
mcli-dashboard = "mcli.ml.dashboard:main"
