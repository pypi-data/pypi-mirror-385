name: Build and Publish (Self-Hosted)

on:
  workflow_dispatch:
    inputs:
      publish_target:
        description: 'Where to publish'
        required: true
        type: choice
        options:
          - test-pypi
          - production-pypi
          - both
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'
      - '.github/workflows/publish.yml'

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Job 1: Run tests on self-hosted runner
  test:
    name: Run Tests (Self-Hosted)
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        run: |
          # Initialize pyenv
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          if command -v pyenv &> /dev/null; then
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            pyenv install -s ${{ matrix.python-version }}
            pyenv local ${{ matrix.python-version }}
          fi
          python${{ matrix.python-version }} --version

      - name: Install uv
        run: |
          if ! command -v uv &> /dev/null; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
          fi
          export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"
          uv --version

      - name: Install dependencies
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$HOME/.local/bin:$HOME/.cargo/bin:$PATH"
          eval "$(pyenv init --path)" 2>/dev/null || true
          eval "$(pyenv init -)" 2>/dev/null || true
          uv venv --python python${{ matrix.python-version }}
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$HOME/.local/bin:$HOME/.cargo/bin:$PATH"
          eval "$(pyenv init --path)" 2>/dev/null || true
          eval "$(pyenv init -)" 2>/dev/null || true
          source .venv/bin/activate
          black --check src/ || true
          isort --check-only src/ || true

      - name: Run tests
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$HOME/.local/bin:$HOME/.cargo/bin:$PATH"
          eval "$(pyenv init --path)" 2>/dev/null || true
          eval "$(pyenv init -)" 2>/dev/null || true
          source .venv/bin/activate
          pytest tests/ -v --cov=src/mcli --cov-report=xml --cov-report=term || true

  # Job 2: Build package on self-hosted runner
  build:
    name: Build Distribution (Self-Hosted)
    runs-on: self-hosted
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          if command -v pyenv &> /dev/null; then
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            pyenv install -s ${{ env.PYTHON_VERSION }}
            pyenv local ${{ env.PYTHON_VERSION }}
          fi
          python${{ env.PYTHON_VERSION }} --version

      - name: Install build tools
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)" 2>/dev/null || true
          eval "$(pyenv init -)" 2>/dev/null || true
          python${{ env.PYTHON_VERSION }} -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)" 2>/dev/null || true
          eval "$(pyenv init -)" 2>/dev/null || true
          python${{ env.PYTHON_VERSION }} -m build

      - name: Check distribution
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)" 2>/dev/null || true
          eval "$(pyenv init -)" 2>/dev/null || true
          twine check dist/*

      - name: Test basic functionality
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)" 2>/dev/null || true
          eval "$(pyenv init -)" 2>/dev/null || true
          pip install dist/*.whl
          mcli --help || echo "CLI not found in PATH"
          python${{ env.PYTHON_VERSION }} -c "import mcli; print('mcli import successful')"

      - name: Store distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Job 3: Publish to Test PyPI (dev branch or manual)
  publish-test-pypi:
    name: Publish to Test PyPI (Self-Hosted)
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/dev') ||
      (github.event_name == 'workflow_dispatch' && (inputs.publish_target == 'test-pypi' || inputs.publish_target == 'both'))
    needs: build
    runs-on: self-hosted
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/mcli-framework

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          pip install twine
          python -m twine upload --repository testpypi dist/* --skip-existing

  # Job 4: Publish to Production PyPI (main branch or manual)
  publish-pypi:
    name: Publish to PyPI (Self-Hosted)
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && (inputs.publish_target == 'production-pypi' || inputs.publish_target == 'both'))
    needs: build
    runs-on: self-hosted
    environment:
      name: pypi
      url: https://pypi.org/p/mcli-framework

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          python -m twine upload dist/* --skip-existing

  # Job 5: Create GitHub Release (on tags)
  github-release:
    name: Create GitHub Release (Self-Hosted)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, publish-pypi]
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} \
            dist/* \
            --generate-notes \
            --title "Release ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
