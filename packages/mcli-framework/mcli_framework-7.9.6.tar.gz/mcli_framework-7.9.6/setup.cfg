[build_clib]
compiler = mingw32

[build_ext]
compiler = unix

[build]
compiler = unix

[flake8]
max-line-length = 120
max-complexity = 18
ignore = E203, E266, W503, D301
docstring-convention = google
doctests = True
per-file-ignores = 
	__init__.py:F401
	mclili/app/main.py:DAR101
exclude = .git,
	__pycache__,
	setup.py,
	build,
	dist,
	docs,
	releases,
	.venv,
	.tox,
	.mypy_cache,
	.pytest_cache,
	.vscode,
	.github,
	**/private/**/app/**,
	**/public/**/app/**

[mypy]
ignore_missing_imports = True
show_error_codes = True
namespace_packages = True
explicit_package_bases = True
follow_imports = silent

[darglint]
strictness = full
docstring_style = google
message_template = {path}:{line} @{obj} {msg_id}: {msg}

[tool:pytest]
testpaths = tests
addopts = -v --tb=short
norecursedirs = 
	**/private/**/app/**
	**/public/**/app/**

[coverage:run]
branch = True
source = mclili
omit = 
	**/private/**/app/**/*
	**/public/**/app/**/*
	tests/*
	setup.py

[coverage:report]
show_missing = True
exclude_lines = 
	pragma: no cover
	def __repr__
	if self.debug:
	raise NotImplementedError
	if __name__ == .__main__.:
	pass
	raise ImportError

[coverage:html]
directory = coverage_html
show_contexts = True

[gh-actions]
python = 
	3.11: py311, format, lint, build
	3.12: py312, format, lint, build

[tox:tox]
min_version = 4.0
isolated_build = true
envlist = lint, format, py{3.11,3.12}-{lin,mac,win}

[testenv]
description = Run tests
platform = 
	lin: linux
	mac: darwin
	win: win32
allowlist_externals = 
	poetry
	python
passenv = *
setenv = 
	py3.11-{lin,mac}: PYTH = python3.11
	py3.12-{lin,mac}: PYTH = python3.12
	py{3.11,3.12}-{win}: PYTH = python
	COVERAGE_FILE = .coverage_{envname}
	PYTHONPATH = {toxinidir}
	PYTHONWARNINGS = ignore
commands = 
	poetry install -v
	poetry run pytest {posargs:-vv} \
	--cov-report=html:html_coverage_{envname} \
	--cov-report=xml:xml_coverage_{envname}.xml

[testenv:format]
description = Format the code
skip_install = true
deps = 
	black
	isort
commands = 
	isort mclili tests build_extension.py
	black mclili tests build_extension.py

[testenv:lint]
description = Lint the code
skip_install = true
deps = 
	flake8
	mypy
	pylint
	darglint
	bandit
commands = 
	flake8 mclili tests
	mypy mclili tests build_extension.py
	pylint mclili build_extension.py
	darglint -v 2 mclili
	bandit -r mclili

[testenv:build]
description = Build package
skip_install = true
deps = 
	build
	twine
commands = 
	poetry build
	twine check dist/*

[egg_info]
tag_build = 
tag_date = 0

