name: Build, Test, and Publish to PyPI

on:
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - dev
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write  # Required for trusted publishing

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Job 1: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          . .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          . .venv/bin/activate
          black --check src/ || true
          isort --check-only src/ || true

      - name: Run tests
        run: |
          . .venv/bin/activate
          pytest tests/ -v --cov=src/mcli --cov-report=xml --cov-report=term || true

      - name: Upload coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  # Job 2: Build package
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check distribution
        run: twine check dist/*

      - name: Test basic functionality
        run: |
          pip install dist/*.whl
          mcli --help || echo "CLI not found in PATH"
          python -c "import mcli; print('mcli import successful')"

      - name: Store distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Job 3: Publish to Test PyPI (dev branch only)
  publish-test-pypi:
    name: Publish to Test PyPI
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/mcli

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

  # Job 4: Publish to Production PyPI (main branch or release)
  publish-pypi:
    name: Publish to PyPI
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mcli

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # Try trusted publishing first, fall back to token
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  # Job 5: Create GitHub Release (on tags)
  github-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
