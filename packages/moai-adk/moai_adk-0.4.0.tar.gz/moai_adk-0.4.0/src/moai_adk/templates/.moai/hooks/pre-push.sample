#!/bin/bash

# MoAI-ADK GitFlow Main Branch Advisory Hook
# Purpose: Advisory warnings for main branch operations (not blocking)
# Enforces: Best practices with flexibility
#
# This hook runs before any git push operation and provides advisories:
# 1. Warns about direct push to main branch (but allows it)
# 2. Warns about force-push to main branch (but allows it)
# 3. Recommends GitFlow best practices
#
# Exit codes:
# 0 - Push allowed (always)

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Read from stdin (git sends remote, local ref info)
# Format: <local ref> <local oid> <remote ref> <remote oid>
while read local_ref local_oid remote_ref remote_oid; do
    # Extract the remote branch name from the reference
    # remote_ref format: refs/heads/main
    remote_branch=$(echo "$remote_ref" | sed 's|refs/heads/||')
    local_branch=$(echo "$local_ref" | sed 's|refs/heads/||')

    # Check if attempting to push to main branch
    if [ "$remote_branch" = "main" ] || [ "$remote_branch" = "master" ]; then
        # Get the current branch to determine if this is the develop branch
        current_branch=$(git rev-parse --abbrev-ref HEAD)

        # Advisory: recommend develop -> main workflow
        if [ "$local_branch" != "develop" ] && [ "${local_branch#release/}" = "$local_branch" ]; then
            echo ""
            echo -e "${YELLOW}⚠️  ADVISORY: Non-standard GitFlow detected${NC}"
            echo ""
            echo -e "${BLUE}Current branch: ${local_branch}${NC}"
            echo -e "${BLUE}Target branch: ${remote_branch}${NC}"
            echo ""
            echo "Recommended GitFlow workflow:"
            echo "  1. Work on feature/SPEC-{ID} branch (created from develop)"
            echo "  2. Push to feature/SPEC-{ID} and create PR to develop"
            echo "  3. Merge into develop after code review"
            echo "  4. When develop is stable, create PR from develop to main"
            echo "  5. Release manager merges develop -> main with tag"
            echo ""
            echo -e "${GREEN}✓ Push will proceed (flexibility mode enabled)${NC}"
            echo ""
        fi

        # Check for delete operation
        if [ "$local_oid" = "0000000000000000000000000000000000000000" ]; then
            echo ""
            echo -e "${RED}⚠️  WARNING: Attempting to delete main branch${NC}"
            echo ""
            echo -e "${YELLOW}This operation is highly discouraged.${NC}"
            echo -e "${GREEN}✓ Push will proceed (flexibility mode enabled)${NC}"
            echo ""
        fi

        # Check for force push attempts to main
        if [ "$remote_branch" = "main" ] || [ "$remote_branch" = "master" ]; then
            # Check if remote_oid exists (non-zero means we're trying to update existing ref)
            if [ "$remote_oid" != "0000000000000000000000000000000000000000" ]; then
                # Verify this is a fast-forward merge (no force push)
                if ! git merge-base --is-ancestor "$remote_oid" "$local_oid" 2>/dev/null; then
                    echo ""
                    echo -e "${YELLOW}⚠️  ADVISORY: Force-push to main branch detected${NC}"
                    echo ""
                    echo "Recommended approach:"
                    echo "  - Use GitHub PR with proper code review"
                    echo "  - Ensure changes are merged via fast-forward"
                    echo ""
                    echo -e "${GREEN}✓ Push will proceed (flexibility mode enabled)${NC}"
                    echo ""
                fi
            fi
        fi
    fi
done

# All checks passed (or advisory warnings shown)
exit 0
