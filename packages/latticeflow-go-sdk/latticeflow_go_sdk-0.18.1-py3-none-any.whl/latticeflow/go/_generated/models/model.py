# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-10-21T07:22:41+00:00

from __future__ import annotations

from enum import Enum
from typing import Any
from typing import Dict
from typing import List
from typing import Literal
from typing import Optional
from typing import Union

from pydantic import Field
from pydantic import RootModel
from pydantic import SecretStr

from .base_model import LFBaseModel


class Id(LFBaseModel):
    id: str


class Success(LFBaseModel):
    message: Optional[str] = None
    """
    A human-readable message
    """


class Pending(LFBaseModel):
    message: Optional[str] = None
    """
    A human-readable message
    """
    status: Literal["PENDING"] = "PENDING"


class LoginRequest(LFBaseModel):
    email: str
    password: str
    remember: bool = False


class CredentialType(Enum):
    """
    The type of that a user uses.
    """

    password = "password"


class LifecycleStage(Enum):
    DEVELOPMENT = "development"
    IDEATION = "ideation"
    R_AND_D = "r_and_d"
    TESTING = "testing"
    PRODUCTION = "production"
    RETIRED = "retired"


class UserTypes(Enum):
    INTERNAL_SPECIALIST = "internal_specialist"
    INTERNAL_ALL = "internal_all"
    EXTERNAL = "external"


class DataClassification(Enum):
    PUBLIC = "public"
    INTERNAL = "internal"
    CONFIDENTIAL = "confidential"
    RESTRICTED = "restricted"


class BuiltBy(Enum):
    THIRD_PARTY = "third_party"
    IN_HOUSE = "in_house"


class AISystemKeyInformation(LFBaseModel):
    """
    The key information needed to determine what risks to show and recommend for pre-screening.
    """

    lifecycle_stage: Optional[LifecycleStage] = None
    user_types: Optional[UserTypes] = None
    data_classification: Optional[DataClassification] = None
    has_pii_access: Optional[bool] = None
    has_client_data_access: Optional[bool] = None
    built_by: Optional[BuiltBy] = None


class AISystem(LFBaseModel):
    """
    An AI System defines a collection of datasets and models that solve a target use case.
    """

    display_name: str
    """
    The name of the AI System.
    """

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    use_case: Optional[str] = None
    """
    Use case.
    """
    description: Optional[str] = None
    """
    Short text description of the AI system.
    """
    long_description: Optional[str] = None
    """
    Long description of the AI system in Markdown format.
    """
    key_info: Optional[AISystemKeyInformation] = None
    owner_id: Optional[str] = None

    model_ids: List[str] = Field(..., max_length=1)

    dataset_ids: List[str] = Field(..., max_length=1)


class Role(Enum):
    """
    A user role in the system.
    Users with the "admin" role can create and disable users and can reset credentials.
    All users are assigned the "member" role by default, unless their role is explicitly set to "viewer". Users can have more than one role.

    """

    MEMBER = "member"
    ADMIN = "admin"
    VIEWER = "viewer"


class Artifact(LFBaseModel):
    id: str
    file_name: str
    file_url: str


class Modality(Enum):
    TEXT = "text"


class Task(Enum):
    CHAT_COMPLETION = "chat_completion"
    GUARDRAIL_INPUT_FILTER = "guardrail_input_filter"
    EMBEDDINGS = "embeddings"
    CUSTOM = "custom"


class ModelAdapterProvider(Enum):
    LATTICEFLOW = "latticeflow"
    USER = "user"


class ModelAdapterCodeLanguage(Enum):
    JINJA = "jinja"


class ControlType(Enum):
    PREVENTIVE = "preventive"
    DETECTIVE = "detective"
    CORRECTIVE = "corrective"
    COMPENSATING = "compensating"


class NumericalPredicate(Enum):
    LESS_THAN = "lt"
    LESS_THAN_OR_EQUAL = "leq"
    GREATER_THAN = "gt"
    GREATER_THAN_OR_EQUAL = "geq"
    EQUAL = "eq"


class ExecutionStatus(Enum):
    NOT_STARTED = "not_started"
    FAILED = "failed"
    PENDING = "pending"
    FINISHED = "finished"


class Framework(LFBaseModel):
    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    display_name: str
    """
    The display name of the framework.
    """
    description: str
    """
    The description of the framework.
    """
    long_description: Optional[str] = None
    """
    Long rich text description. Supports markdown formatting.
    """
    template: Optional[str] = None
    """
    The reporting template of the framework.
    """


class FrameworkTemplate(LFBaseModel):
    key: str
    """
    The key of the framework template.
    """
    display_name: str
    """
    The name of the framework template.
    """
    description: str
    """
    The description of the framework template.
    """


class FrameworkTemplates(LFBaseModel):
    framework_templates: List[FrameworkTemplate]


class FrameworkData(Framework):
    risk_control_links: Any
    control_requirement_links: Any


class FrameworkRiskLinks(LFBaseModel):
    risk_ids: List[str]
    """
    The IDs of the risks to be linked to the given framework.
    """


class Citation(LFBaseModel):
    reference: str
    """
    The reference to the citation within the referenced document.
    """
    excerpt: Optional[str] = None
    """
    An excerpt of the citation.
    """
    url: Optional[str] = None
    """
    URL linking to the cited excerpt.
    """


class DocumentReference(LFBaseModel):
    key: str
    """
    The key of the referenced document.
    """
    title: str
    """
    The title of the referenced document.
    """
    author: str
    """
    The author(s) of the referenced document.
    """
    year: int
    """
    The publishing year of the referenced document.
    """
    url: Optional[str] = None
    """
    URL linking to the referenced document.
    """
    citation: Optional[Citation] = None


class Status(LFBaseModel):
    num_passing: int
    num_total: int
    num_out_of_scope: Optional[int] = None


class Control(LFBaseModel):
    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    display_name: str
    """
    The display name of the control.
    """
    control_type: Optional[ControlType] = None
    """
    The type of the control.
    """
    description: str
    """
    The description of the control.
    """
    long_description: Optional[str] = None
    """
    Long rich text description. Supports markdown formatting.
    """
    references: Optional[List[DocumentReference]] = None
    """
    The list of document references.
    """
    tags: List[str]
    """
    The list of tags assigned to the control.
    """
    template: Optional[str] = None
    """
    The reporting template of the control.
    """


class ControlRequirementLinks(LFBaseModel):
    framework_id: str
    """
    The ID of the framework to chich the requirements belong.
    """
    requirement_ids: List[str]
    """
    The IDs of the requirements to be linked to the given control.
    """


class ControlRiskLinks(LFBaseModel):
    framework_id: str
    """
    The ID of the framework to which the requirements belong.
    """
    control_ids: List[str]
    """
    The IDs of the controls to be (un)linked to/from the given risk.
    """


class Requirement(LFBaseModel):
    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    display_name: str
    """
    The display name of the requirement.
    """
    description: str
    """
    Short text description of the requirement.
    """
    long_description: Optional[str] = None
    """
    Long description of the requirement in Markdown format.
    """
    examples: Optional[List[str]] = None
    """
    A list of examples that illustrated the requirement.
    """
    references: Optional[List[DocumentReference]] = None
    """
    The list of document references.
    """
    tags: Optional[List[str]] = None
    """
    A list of tags assigned to the requirement.
    """
    metric_key: Optional[str] = None
    """
    The key of the metric that can be used to automatically evaluate the requirement.
    """
    metric_threshold: Optional[float] = None
    """
    The threshold on the computed metric.
    """
    metric_predicate: Optional[NumericalPredicate] = None
    """
    The predicate applied on the metric threshold to determine compliance.
    """
    template: Optional[str] = None
    """
    The reporting template of the requirement.
    """


class Status2(Enum):
    PASS = "pass"
    FAIL = "fail"
    PENDING = "pending"
    OUT_OF_SCOPE = "out_of_scope"
    ERROR = "error"


class AssessmentStatus(LFBaseModel):
    status: Status2
    reason: str


class EvaluatedEntityType(Enum):
    DATASET = "dataset"
    MODEL = "model"


class MetricEvaluationError(LFBaseModel):
    error_type: str
    """
    The type of the error.
    """
    message: str
    """
    The specific error message that occurred during evaluation.
    """
    hint: Optional[str] = None
    """
    The suggestion to try out to fix the issue.
    """


class MetricEvaluationFailures(LFBaseModel):
    fraction_samples_failed: Optional[float] = Field(
        None, ge=0.0, le=1.0, json_schema_extra={"nullable": True}
    )
    """
    The fraction of samples that could not be evaluated successfully. If 'null', this information is unavailable or not applicable.
    """


class ExecutionProgress(LFBaseModel):
    progress: float = Field(..., ge=0.0, le=1.0)
    """
    A progress indicator for the evaluation.
    """
    num_total_samples: Optional[int] = None
    """
    The total number of samples to be processed for this evaluation.
    """
    num_processed_samples: Optional[int] = None
    """
    The number of samples already processed for this evaluation.
    """


class DatasetProvider(Enum):
    LATTICEFLOW = "latticeflow"
    USER = "user"


class Dataset(LFBaseModel):
    """
    All properties required for the creation of a Dataset, except the binary file.
    """

    display_name: str
    description: Optional[str] = None

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """


class DatasetData(LFBaseModel):
    """
    Encapsulates a collection of dataset samples and the properties they contain. file.
    """

    column_names: List[str]
    """
    List of the column names in the dataset's csv file.
    """
    sample_rows: List[Dict[str, Any]]
    """
    A few of the rows from the dataset's uploaded csv file.
    """
    num_rows: int
    """
    The total number of rows in the dataset's uploaded csv file.
    """


class DeploymentMode(Enum):
    """
    The allowed deployment modes for the app.
    """

    MULTI_TENANT = "multi-tenant"
    SINGLE_TENANT = "single-tenant"


class DatasetMetadata(LFBaseModel):
    """
    Dataset metadata.
    """

    num_rows: int
    columns: List[str]
    download_url: str


class DatasetGenerationRequest(LFBaseModel):
    dataset_generator_config: Dict[str, Any]
    """
    The configuration used by the dataset generator.
    """
    num_samples: int
    """
    The number of samples to generate.
    """


class IntegrationModelProviderId(Enum):
    """
    The internal identifiers for all model providers known by the system.
    """

    ANTHROPIC = "anthropic"
    FIREWORKS = "fireworks"
    GEMINI = "gemini"
    NOVITA = "novita"
    OPENAI = "openai"
    SAMBANOVA = "sambanova"
    TOGETHER = "together"
    ZENGUARD = "zenguard"


class LocalModelProviderId(Enum):
    """
    Private, non integrated model providers
    """

    LOCAL = "local"


class TrustChainVerification(Enum):
    """
    How to trust the CA trust chain.

    - `verify_trust_chain` (default) will verify the server certificate against the configured CA trust.
    - `accept_untrusted` will not perform server certificate verification. NOTE: This is a
      security hazard and should be avoided.

    """

    VERIFY_TRUST_CHAIN = "verify_trust_chain"
    ACCEPT_UNTRUSTED = "accept_untrusted"


class PiiLeakage(LFBaseModel):
    """
    Mitigation capability for PII.
    """

    display_name: str


class PromptInjection(LFBaseModel):
    """
    Mitigation capability for PII.
    """

    display_name: str


class Mitigations(LFBaseModel):
    """
    The mitigation capabilities of the model
    """

    pii_leakage: Optional[PiiLeakage] = None
    """
    Mitigation capability for PII.
    """
    prompt_injection: Optional[PromptInjection] = None
    """
    Mitigation capability for PII.
    """


class ModelCapabilities(LFBaseModel):
    """
    The model capabilities.
    """

    mitigations: Optional[Mitigations] = None
    """
    The mitigation capabilities of the model
    """


class RawModelInput(LFBaseModel):
    """
    A generic raw model input.
    """

    input: str
    content_type: str


class RawModelOutput(LFBaseModel):
    """
    A raw model response.
    """

    output: str
    status_code: int


class IntegrationDatasetProviderId(Enum):
    """
    The internal identifiers for all model providers known by the system.
    """

    HUGGINGFACE = "huggingface"


class Integration(LFBaseModel):
    """
    Basic integration information shared between most integrations.
    """

    api_key: SecretStr


class OpenAIIntegration(Integration):
    """
    The OpenAI integration configuration object.
    """

    org_id: Optional[str] = None


class ZenguardTier(Enum):
    BASE = "base"
    DEDICATED = "dedicated"


class ZenguardIntegration(Integration):
    """
    The Zenguard integration configuration object.
    """

    tier: ZenguardTier


class ResetUserCredentialAction(LFBaseModel):
    credential_type: CredentialType


class SetupState(Enum):
    """
    The setup state of the application
    """

    initial = "initial"
    complete = "complete"


class AnalyticsConfig(LFBaseModel):
    enabled: bool
    """
    Whether analytics is enabled.
    """
    user_uuid: str
    """
    The globally-unique user identifier.
    """
    tenant_uuid: str
    """
    The globally-unique tenant (organisation) identifier.
    """


class Report(LFBaseModel):
    uri: str


class Error(LFBaseModel):
    message: str
    """
    A human-readable error message
    """


class NumericParameterSpec(LFBaseModel):
    key: str
    """
    The key of the parameter.
    """
    display_name: str
    """
    The display name of the parameter.
    """
    description: str
    """
    The description of the parameter.
    """
    min: Optional[float] = None
    """
    The minimum value of the parameter.
    """
    max: Optional[float] = None
    """
    The maximum value of the parameter.
    """
    step: float
    """
    The step size of the parameter.
    """
    parameter_type: Literal["numeric"]
    default_value: Optional[float] = None
    """
    Default value to choose.
    """


class StringKind(Enum):
    """
    Specifies the kind of string parameter.
    """

    FREEFORM = "freeform"
    PYTHON = "python"
    JINJA = "jinja"


class StringParameterSpec(LFBaseModel):
    key: str
    """
    The key of the parameter.
    """
    display_name: str
    """
    The display name of the parameter.
    """
    description: str
    """
    The description of the parameter.
    """
    default_value: Optional[str] = None
    """
    The default value of the parameter.
    """
    parameter_type: Literal["string"]
    is_optional: bool = False
    """
    Whether this field is optional.
    """
    string_kind: StringKind
    """
    Specifies the kind of string parameter.
    """


class ListDtype(Enum):
    STRING = "string"
    INTEGER = "integer"
    FLOAT = "float"
    BOOLEAN = "boolean"


class ListParameterSpec(LFBaseModel):
    list_dtype: ListDtype
    key: str
    """
    The key of the parameter.
    """
    display_name: str
    """
    The display name of the parameter.
    """
    description: str
    """
    The description of the parameter.
    """
    is_optional: bool
    """
    Whether this field is optional.
    """
    parameter_type: Literal["list"]


class BooleanParameterSpec(LFBaseModel):
    key: str
    """
    The key of the parameter.
    """
    display_name: str
    """
    The display name of the parameter.
    """
    description: str
    """
    The description of the parameter.
    """
    parameter_type: Literal["boolean"]
    default_value: Optional[bool] = None
    """
    The default value to use.
    """


class AllowedValuesSource(Enum):
    """
    Specifies the type of constraint on the string value.
    - `dataset_column` restricts values to dataset columns.
    - `available_models` restricts values to available models in the registry.
    - `available_datasets` restricts values to available datasets in the system.
    If the source is not set, ``allowed_values`` should be set instead.

    """

    DATASET_COLUMN = "dataset_column"
    AVAILABLE_MODELS = "available_models"
    AVAILABLE_DATASETS = "available_datasets"


class CategoricalParameterSpec(LFBaseModel):
    key: str
    """
    The key of the parameter.
    """
    display_name: str
    """
    The display name of the parameter.
    """
    description: str
    """
    The description of the parameter.
    """
    multiple: Optional[bool] = None
    """
    Whether the parameter can have multiple values.
    """
    allowed_values: Optional[List[str]] = None
    allowed_values_source: Optional[AllowedValuesSource] = None
    """
    Specifies the type of constraint on the string value.
    - `dataset_column` restricts values to dataset columns.
    - `available_models` restricts values to available models in the registry.
    - `available_datasets` restricts values to available datasets in the system.
    If the source is not set, ``allowed_values`` should be set instead.

    """
    default_value: Optional[str] = None
    """
    Default value to use.
    """
    is_optional: bool = False
    """
    Whether this field is optional.
    """
    parameter_type: Literal["categorical"]


class ParameterSpec(LFBaseModel):
    parameters: List[
        Union[
            NumericParameterSpec,
            BooleanParameterSpec,
            CategoricalParameterSpec,
            StringParameterSpec,
            ListParameterSpec,
        ]
    ]


class StoredDatasetGenerator(Id):
    display_name: str
    description: str
    long_description: Optional[str] = None
    parameter_spec: ParameterSpec


class StoredDatasetGenerators(LFBaseModel):
    dataset_generators: List[StoredDatasetGenerator]


class MetricEvaluatorProvider(Enum):
    LATTICEFLOW = "latticeflow"
    USER = "user"


class PredefinedEvaluatorDefinitionKind(Enum):
    LATTICEFLOW = "latticeflow"


class CustomModelBenchmarkDefinitionKind(Enum):
    USER = "user"


class ModelInputBuilderKey(Enum):
    """
    The key of the model input builder.
    """

    CHAT_COMPLETION = "chat_completion"
    GENERIC = "generic"


class ChatCompletionModelInputBuilderConfig(LFBaseModel):
    system_prompt: str = "You are a helpful assistant."
    """
    System prompts given to the model. This contains the necessary instructions for the model to perform the task.  Use curly braces '{{ sample.attribute }}' to denote variables that will be dynamically populated for each sample in the dataset. Full Jinja is supported for the prompt.
    """
    user_prompt: str = "What is the capital of {{ sample.country }}?"
    """
    User prompts given to the model. Use curly braces '{{ sample.attribute }}' to denote variables that will be dynamically populated for each sample in the dataset. Full Jinja is supported for the prompt.
    """


class GenericModelInputBuilderConfig(LFBaseModel):
    template: str = '{"question": "What is the capital of {{ sample.country }}?"}'
    """
    Jinja template that takes the sample as input and produces a JSON. Use curly braces '{{ sample.attribute }}' to denote variables that will be dynamically populated for each sample in the dataset. Full Jinja is supported for the prompt.
    """


class Metric(LFBaseModel):
    key: str
    """
    The key of the metric. This is a globally unique key.
    """
    display_name: str
    """
    The display name of the metric.
    """
    modalities: List[Modality]
    """
    List of applicable modalities.
    """
    tasks: List[Task]
    """
    List of applicable tasks.
    """
    description: str
    """
    The description of the metric.
    """
    long_description: str
    """
    Long description of the metric in Markdown format.
    """
    tags: List[str]
    """
    List of tags for the metric.
    """
    parameter_spec: ParameterSpec


class StoredMetrics(LFBaseModel):
    metrics: List[Metric]


class Meta(LFBaseModel):
    name: str
    """
    Name of the table.
    """


class TableColumn(LFBaseModel):
    id: str
    """
    The ID of the columns.
    """
    display_name: str
    """
    Display name of the column.
    """
    description: Optional[str] = None
    """
    Description of the column.
    """
    is_primary: bool
    """
    Whether the column is primary. In the context of a tabular evidence metric evaluation,
    this is a column relevant to the interpretation result.

    """


class MetricScore(LFBaseModel):
    """
    An object that contains the metric score and its display name.
    """

    value: float
    display_name: str


class MetricEvaluationUsage(LFBaseModel):
    """
    An object that contains the model usage summary for the metric evaluation.
    """

    num_samples: int
    num_completion_tokens: Optional[int] = None
    num_prompt_tokens: Optional[int] = None


class MetricEvaluatorKeys(LFBaseModel):
    metric_evaluator_keys: List[str]


class ConnectionCheckResult(LFBaseModel):
    success: bool
    """
    Whether the connection check was successful.
    """
    message: str
    """
    In case of success: The model response. Otherwise: An error message.
    """


class ModelAdapterInput(LFBaseModel):
    """
    Model input represented in the LatticeFlow AIGO format.
    """

    input: str


class ModelAdapterOutput(LFBaseModel):
    """
    Model output represented in the LatticeFlow AIGO format.
    """

    output: str


class ModelAdapterTransformationError(Error):
    """
    Describes an error that occured during model adapter transformation.
    """

    transformed: Optional[str] = None


class WholeAssessmentStatus(Enum):
    IN_CONFIGURATION = "in_configuration"
    RUNNING = "running"
    COMPLETED = "completed"


class RiskImpactLevel(Enum):
    """
    Risk impact level (1 - Negligible, 2 - Minimal, 3 - Moderate, 4 - Major, 5 - Catastrophic).
    """

    LEVEL_1 = 1
    LEVEL_2 = 2
    LEVEL_3 = 3
    LEVEL_4 = 4
    LEVEL_5 = 5


class RiskLikelihoodLevel(Enum):
    """
    Risk likelihood level (1 - Very unlikely, 2 - Low, 3 - Medium, 4 - Likely, 5 - Very likely).
    """

    LEVEL_1 = 1
    LEVEL_2 = 2
    LEVEL_3 = 3
    LEVEL_4 = 4
    LEVEL_5 = 5


class RiskScreeningNextAction(Enum):
    NO_ACTION = "no_action"
    NEEDS_TECHNICAL_RISK_ASSESSMENT = "needs_technical_risk_assessment"
    NEEDS_MITIGATION = "needs_mitigation"


class MetricEvaluationConfig(LFBaseModel):
    evaluated_entity_type: EvaluatedEntityType
    """
    The type of the evaluated entity
    """
    display_name: str
    """
    The display name of the metric evaluation.
    """
    metric_evaluator_id: str
    """
    The id of the metric evaluator used to evaluate the metric.
    """
    metric_evaluator_config: Dict[str, Any]
    """
    The configuration used by the metric evaluator.
    """


class GeneratedDataset(Dataset):
    dataset_generation_request: DatasetGenerationRequest


class ExternalMetricEvaluationConfig(LFBaseModel):
    display_name: str
    """
    The display name of the metric evaluation.
    """
    metric_evaluator_key: str
    """
    The key of the metric evaluator used to evaluate the metric.
    """
    metric_evaluator_config: Dict[str, Any]
    """
    The configuration used by the metric evaluator.
    """


class Tags(LFBaseModel):
    tags: List[str]


class Tenant(LFBaseModel):
    name: str
    """
    A unique name for the tenant.
    """

    alias: str = Field(..., pattern="^[a-z0-9-]+")
    """
    A unique URL-friendly identifier for the tenant.
    """
    domains: List[str]
    """
    The internet domains that will be associated with the tenant.
    """


class StoredTenant(Id, Tenant):
    pass


class StoredTenants(LFBaseModel):
    tenants: List[StoredTenant]


class Role2(Enum):
    assistant = "assistant"
    system = "system"
    user = "user"


class ChatCompletionRequestMessage(LFBaseModel):
    content: str
    """
    The content of the message.
    """
    name: Optional[str] = None
    role: Role2


class Role3(Enum):
    assistant = "assistant"


class ChatCompletionResponseMessage(LFBaseModel):
    content: str
    role: Role3


class Role4(Enum):
    system = "system"
    user = "user"
    assistant = "assistant"


class ChatCompletionStreamResponseDelta(LFBaseModel):
    content: str
    role: Optional[Role4] = None


class ModelIds(Enum):
    lf_assistant = "lf-assistant"


class FinishReason(Enum):
    stop = "stop"
    length = "length"
    tool_calls = "tool_calls"
    content_filter = "content_filter"
    function_call = "function_call"


class Choice(LFBaseModel):
    finish_reason: FinishReason
    index: int
    message: ChatCompletionResponseMessage


class CreateChatCompletionResponse(LFBaseModel):
    choices: List[Choice]
    created: int
    id: str
    model: str


class Choice1(LFBaseModel):
    delta: ChatCompletionStreamResponseDelta
    finish_reason: FinishReason
    index: int


class CreateChatCompletionStreamResponse(LFBaseModel):
    choices: List[Choice1]
    created: int
    id: str
    model: str


class PasswordUserCredential(LFBaseModel):
    credential_type: CredentialType
    value: SecretStr


class User(LFBaseModel):
    email: str
    name: str
    enabled: bool = True
    roles: List[Role]
    """
    The roles that will be assigned to the user. A user must have at least one role.
    """


class ModelAdapterCodeSnippet(LFBaseModel):
    language: ModelAdapterCodeLanguage
    source_code: str


class Risk(LFBaseModel):
    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    display_name: str
    """
    The display name of the risk.
    """
    description: str
    """
    The description of the risk.
    """
    long_description: Optional[str] = None
    """
    Long rich text description. Supports markdown formatting.
    """
    references: Optional[List[DocumentReference]] = None
    """
    The list of document references.
    """
    tags: List[str]
    """
    The list of tags assigned to the risk.
    """
    template: Optional[str] = None
    """
    The template of the risk.
    """


class MetricEvaluation(LFBaseModel):
    evaluated_entity_type: EvaluatedEntityType
    """
    The type of the evaluated entity
    """
    evaluated_entity_id: str
    """
    The ID of the evaluated entity
    """
    display_name: str
    """
    The display name of the metric evaluation.
    """
    metric_evaluator_id: str
    """
    The key of the metric evaluator used to evaluate the metric.
    """
    metric_evaluator_config: Dict[str, Any]
    """
    The configuration used by the metric evaluator.
    """

    metric_score: Optional[float] = Field(
        None, ge=0.0, le=1.0, json_schema_extra={"nullable": True}
    )
    """
    The evaluated metric score.
    """
    errors: Optional[List[MetricEvaluationError]] = None
    """
    List of errors associated with this metric evaluation.
    """


class DatasetGenerationMetadata(LFBaseModel):
    """
    Dataset generation metadata.
    """

    dataset_generator_id: Optional[str] = None
    execution_status: Optional[ExecutionStatus] = None
    dataset_generation_id: Optional[str] = None
    """
    The dataset generation ID.
    """
    dataset_generation_request: Optional[DatasetGenerationRequest] = None
    """
    The dataset generation request.
    """
    progress: Optional[ExecutionProgress] = None


class StoredDataset(Id, Dataset):
    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-\\$]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ - $
    """
    provider: DatasetProvider
    ai_system_ids: List[str]
    """
    IDs of linked AI Systems
    """
    dataset_metadata: Optional[DatasetMetadata] = None
    """
    Dataset metadata.
    """
    dataset_generation_metadata: Optional[DatasetGenerationMetadata] = None
    """
    Dataset generation metadata.
    """


class StoredDatasets(LFBaseModel):
    datasets: List[StoredDataset]


class CertificateValidationContext(LFBaseModel):
    """
    Defines how server certificates should be validated.
    """

    trusted_ca: Optional[str] = None
    """
    base64 representation of PEM-encoded certificate(s).

    For example: `cat cert.pem | base64 -w 0`
    '

    """
    trust_chain_verification: Optional[TrustChainVerification] = None


class ModelProviderConnectionConfig(LFBaseModel):
    """
    Connection configuration for a model, that is retrieved from a well-known provider integrated with the system.
    """

    provider_id: Union[IntegrationModelProviderId, LocalModelProviderId]
    """
    The id of the model provider.
    """
    model_key: str
    """
    A key used to identify the model in the external provider.
    """


class StoredIntegration(LFBaseModel):
    """
    A stored representation of an integration, with obfuscated credentials data.
    """

    id: Union[IntegrationModelProviderId, IntegrationDatasetProviderId]
    """
    The ids for all integrations the system supports.
    """
    config: Optional[Dict[str, Any]] = None
    """
    If configured contains sanitized config properties for the integration.
    """


class StoredIntegrations(LFBaseModel):
    integrations: List[StoredIntegration]


class UserCredential(RootModel[PasswordUserCredential]):
    root: PasswordUserCredential


class PredefinedEvaluatorDefinition(LFBaseModel):
    kind: PredefinedEvaluatorDefinitionKind
    """
    the Metric Evaluator definition kind.
    """


class StoredMetric(Metric, Id):
    pass


class TabularEvidence(LFBaseModel):
    """
    The tabular evidence of the metric evaluation.
    """

    columns: List[TableColumn]
    """
    List of columns from the table.
    """
    rows: List[Dict[str, Any]]
    """
    List of row objects where each item maps column names to values.
    """
    meta: Meta


class RequirementEvaluation(LFBaseModel):
    requirement_id: str
    status: AssessmentStatus
    """
    The status of the requirement evaluation.
    """
    metric_evaluations: List[MetricEvaluation]
    """
    List of metric evaluations for this requirement evaluation.
    """


class EntityRequirementEvaluations(LFBaseModel):
    evaluated_entity_type: EvaluatedEntityType
    evaluated_entity_id: str
    requirement_evaluations: List[RequirementEvaluation]


class RiskImpact(LFBaseModel):
    level: Optional[RiskImpactLevel] = None
    justification: Optional[str] = None


class RiskLikelihood(LFBaseModel):
    level: Optional[RiskLikelihoodLevel] = None
    linked_assessment_id: Optional[str] = None
    justification: Optional[str] = None


class RequirementEvaluationConfig(LFBaseModel):
    requirement_id: str
    metric_evaluations: List[MetricEvaluationConfig]
    """
    List of metric evaluations for this requirement evaluation.
    """


class GuardrailsAssessmentConfig(LFBaseModel):
    assessment_type: Literal["guardrails_assessment"]
    display_name: str
    requirement_evaluations: List[RequirementEvaluationConfig]


class ExternalRequirementEvaluationConfig(LFBaseModel):
    requirement_key: str
    metric_evaluations: List[ExternalMetricEvaluationConfig]
    """
    List of metric evaluations for this requirement evaluation.
    """


class ExternalTechnicalRiskAssessmentConfig(LFBaseModel):
    assessment_type: Literal["technical_risk_assessment"]
    display_name: str
    framework_key: str
    requirement_evaluations: List[ExternalRequirementEvaluationConfig]


class CreateChatCompletionRequest(LFBaseModel):
    messages: List[ChatCompletionRequestMessage] = Field(..., min_length=1)
    model: ModelIds
    stream: bool = False
    metadata: Optional[Dict[str, str]] = None
    """
    Key-value pairs that can be attached to a chat completion request.
    """


class InitialSetupRequest(LFBaseModel):
    name: str
    email: str
    credentials: PasswordUserCredential


class StoredUser(Id, User):
    pass


class ModelAdapter(LFBaseModel):
    display_name: str
    description: Optional[str] = None
    long_description: Optional[str] = None
    """
    Long rich text description. Supports markdown formatting.
    """

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    provider: ModelAdapterProvider
    modality: Modality
    task: Task
    process_input: Optional[ModelAdapterCodeSnippet] = None
    """
    Required for POST and PUT. Required for GET if provider is "custom". The function mapping model inputs (given as key value map) to the body of the HTTP request.
    """
    process_output: Optional[ModelAdapterCodeSnippet] = None
    """
    Required for POST and PUT. Required for GET if provider is "custom". The function mapping the body of the HTTP response (given as text + status code) to a model output.
    """


class StoredModelAdapter(ModelAdapter, Id):
    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-\\$]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ - $
    """
    model_ids: List[str]


class StoredModelAdapters(LFBaseModel):
    model_adapters: List[StoredModelAdapter]


class CreatedUpdatedOptionalUser(LFBaseModel):
    created_at: int
    """
    Unix timestamp (in seconds).
    """
    created_by: Optional[StoredUser] = None
    updated_at: int
    """
    Unix timestamp (in seconds).
    """
    updated_by: Optional[StoredUser] = None


class StoredRisk(Id, Risk, CreatedUpdatedOptionalUser):
    framework_ids: List[str]
    """
    List of framework IDs that link to this risk.
    """
    control_ids: Dict[str, List[str]]
    """
    Mapping framework ID to the list of control IDs to which this risk is linked in the respective framework.
    """
    requirement_ids: Dict[str, List[str]]
    """
    Mapping framework ID to the list of requirement IDs to which this risk is linked in the respective framework.
    """


class Risks(LFBaseModel):
    risks: List[StoredRisk]


class StoredControl(Id, Control, CreatedUpdatedOptionalUser):
    framework_ids: List[str]
    """
    List of framework IDs that link to this risk.
    """
    risk_ids: Dict[str, List[str]]
    """
    Mapping framework ID to the list of risk IDs to which this control is linked in the respective framework.
    """
    requirement_ids: Dict[str, List[str]]
    """
    Mapping framework ID to the list of requirement IDs to which this control is linked in the respective framework.
    """


class StoredRequirement(Id, Requirement, CreatedUpdatedOptionalUser):
    framework_ids: List[str]
    """
    List of framework IDs that link to this requirement.
    """


class Controls(LFBaseModel):
    controls: List[StoredControl]


class StoredMetricEvaluation(MetricEvaluation, Id):
    execution_status: ExecutionStatus
    artifacts: Optional[List[Artifact]] = None
    """
    List of artifacts associated with this metric evaluation.
    """
    failures: MetricEvaluationFailures
    """
    The failures encountered during the metric evaluation.
    """
    is_cached: Optional[bool] = None
    """
    Whether the metric evaluation was computed as part of a previous assessment.
    """
    progress: Optional[ExecutionProgress] = None


class TLSContext(LFBaseModel):
    """
    Defines the TLS context.
    """

    validation_context: Optional[CertificateValidationContext] = None


class Users(LFBaseModel):
    users: List[StoredUser]


class State(LFBaseModel):
    deployment_id: str = Field(..., min_length=1)
    """
    Unique identifier of the deployment.
    """
    user: Optional[StoredUser] = None

    api_key: Optional[SecretStr] = Field(None, min_length=1)
    """
    The API key of the user.
    """
    app_version: Optional[str] = None
    """
    Application version.
    """
    setup_state: SetupState
    analytics_config: Optional[AnalyticsConfig] = None
    ai_assistant_enabled: bool
    """
    Whether the LatticeFlow AI assistant is enabled.
    """
    deployment_mode: DeploymentMode


class ConfigModelBenchmarkDefinition(LFBaseModel):
    kind: CustomModelBenchmarkDefinitionKind
    """
    The kind of benchmark definition.
    """
    tasks: List[Task]
    """
    The tasks for which the benchmark is applicable.
    """
    modalities: List[Modality]
    """
    The modalities for which the benchmark is applicable.
    """
    model_input_builder_key: ModelInputBuilderKey
    """
    The key of the model input builder.
    """
    model_input_builder_config: Union[
        ChatCompletionModelInputBuilderConfig, GenericModelInputBuilderConfig
    ]
    """
    The configuration of the model input builder.
    """
    dataset_id: str
    """
    The dataset that will be used to evaluate the model.
    """
    fast_subset_size: int = 200
    """
    Size of the fast evaluation subset. This is the subset size of the dataset that runs in a reasonable amount of time (less than 5 minutes) and is a quick and approximate version of the evaluator.
    """
    metric_id: str
    """
    The ID of the metric. This defines what metric should be used to evaluate the model output.
    """
    metric_config: Dict[str, Any]
    """
    The configuration used to instantiate the metric that is used to evaluate the model outputs.
    """


class MetricEvaluationEvidence(LFBaseModel):
    freeform_evidence: Dict[str, Any]
    """
    An arbitrary JSON object that represents the free form evidence.
    """
    tabular_evidence: List[TabularEvidence]
    """
    An array where each entry represents a separate tabular evidence object.
    """
    metric_score: MetricScore
    usage: Optional[MetricEvaluationUsage] = None


class TechnicalRiskAssessment(LFBaseModel):
    display_name: str

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    assessment_type: Literal["technical_risk_assessment"]
    ai_system_id: str
    framework_id: str
    requirement_evaluations: List[RequirementEvaluation]


class GuardrailsAssessment(LFBaseModel):
    display_name: str

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    assessment_type: Literal["guardrails_assessment"]
    entity_requirement_evaluations: List[EntityRequirementEvaluations]


class RiskScreening(LFBaseModel):
    risk_id: str
    impact: Optional[RiskImpact] = None
    likelihood: Optional[RiskLikelihood] = None
    next_action: Optional[RiskScreeningNextAction] = None


class RiskScreeningAssessment(LFBaseModel):
    display_name: str

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    assessment_type: Literal["risk_screening_assessment"]
    ai_system_id: str
    framework_id: str
    risk_screenings: List[RiskScreening]


class TechnicalRiskAssessmentConfig(LFBaseModel):
    assessment_type: Literal["technical_risk_assessment"]
    display_name: str
    framework_id: str
    requirement_evaluations: List[RequirementEvaluationConfig]


class ExternalGuardrailsAssessmentConfig(LFBaseModel):
    assessment_type: Literal["guardrails_assessment"]
    display_name: str
    requirement_evaluations: List[ExternalRequirementEvaluationConfig]


class CreatedUpdated(LFBaseModel):
    created_at: int
    """
    Unix timestamp (in seconds).
    """
    created_by: StoredUser
    updated_at: int
    """
    Unix timestamp (in seconds).
    """
    updated_by: StoredUser


class StoredFramework(Id, Framework, CreatedUpdatedOptionalUser):
    risk_ids: List[str]
    num_risks: int
    num_controls: int
    num_requirements: int


class Frameworks(LFBaseModel):
    frameworks: List[StoredFramework]


class Requirements(LFBaseModel):
    requirements: List[StoredRequirement]


class StoredRequirementEvaluation(Id):
    requirement: StoredRequirement
    status: AssessmentStatus
    """
    The status of the requirement evaluation.
    """
    progress: Status
    """
    The progress of the current requirement evaluation.
    """
    artifacts: List[Artifact]
    """
    List of uploaded artifacts associated with this requirement.
    """

    metric_aggregate_score: Optional[float] = Field(
        ..., ge=0.0, le=1.0, json_schema_extra={"nullable": True}
    )
    metric_evaluations: List[StoredMetricEvaluation]
    """
    List of metric evaluations related to this requirement.
    """
    last_updated_ts: int
    """
    Unix timestamp (in seconds) when the evaluation was last updated.
    """
    num_errors: Optional[int] = None
    """
    The number of failed metric evaluations within the requirement.
    """
    id: str


class ModelCustomConnectionConfig(LFBaseModel):
    """
    Connection configuration for a model, that is provided manually by the user.
    """

    url: str
    """
    The model endpoint URL. In case the "openai" adapter is used, only the base URL should be provided here, e.g. "api.openai.com/v1".
    """
    api_key: Optional[SecretStr] = None
    """
    The key to be passed as the authorization header (Authorization: Bearer API_KEY).

    """
    model_key: Optional[str] = None
    """
    This field is used in case the model is not specified in the URL but in the body instead. For the "openai" adapter, this will be passed as the "model" parameter. For custom adapters, this value is available as model_info.model_key.

    """
    tls_context: Optional[TLSContext] = None
    custom_headers: Optional[Dict[str, Any]] = None
    """
    Additional headers to include in requests to the model endpoint.
    """


class MetricEvaluator(LFBaseModel):
    provider: MetricEvaluatorProvider
    """
    The provider of the evaluator.
    """

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    metric_key: str
    """
    The key of the metric produced by the evaluator.
    """
    display_name: str
    """
    The display name of the metric evaluator.
    """
    description: str
    """
    The description of the metric evaluator.
    """
    evaluated_entity_type: EvaluatedEntityType
    long_description: Optional[str] = None
    """
    Long description of the metric evaluator in Markdown format.
    """
    tags: List[str]
    """
    List of tags for the metric evaluator.
    """
    parameter_spec: ParameterSpec
    definition: Union[PredefinedEvaluatorDefinition, ConfigModelBenchmarkDefinition]


class StoredMetricEvaluator(MetricEvaluator, Id):
    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-\\$]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ - $
    """


class StoredMetricEvaluators(LFBaseModel):
    metric_evaluators: List[StoredMetricEvaluator]


class StoredBaseAssessment(Id):
    status: WholeAssessmentStatus
    updated_at: int
    """
    Timestamp (e.g. Unix epoch) when the assessment was last updated.
    """
    framework: StoredFramework
    display_name: str

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """


class EntityStoredRequirementEvaluations(LFBaseModel):
    evaluated_entity_type: EvaluatedEntityType
    evaluated_entity_id: str
    requirement_evaluations: List[StoredRequirementEvaluation]


class StoredRiskScreening(Id, RiskScreening):
    pass


class Assessment(
    RootModel[
        Union[TechnicalRiskAssessment, GuardrailsAssessment, RiskScreeningAssessment]
    ]
):
    root: Union[TechnicalRiskAssessment, GuardrailsAssessment, RiskScreeningAssessment]


class StoredAISystem(AISystem, Id, CreatedUpdated):
    artifacts: List[Artifact]
    """
    List of uploaded artifacts associated with this AI System.
    """
    assessment_ids: List[str]


class AISystems(LFBaseModel):
    ai_systems: List[StoredAISystem]


class RequirementEvaluations(LFBaseModel):
    """
    List of requirement evaluations.
    """

    requirement_evaluations: List[StoredRequirementEvaluation]


class StoredTechnicalRiskAssessment(StoredBaseAssessment):
    assessment_type: Literal["technical_risk_assessment"]
    requirement_evaluations: List[StoredRequirementEvaluation]
    ai_system: StoredAISystem


class StoredGuardrailsAssessment(StoredBaseAssessment):
    assessment_type: Literal["guardrails_assessment"]
    entity_requirement_evaluations: List[EntityStoredRequirementEvaluations]


class StoredRiskScreeningAssessment(StoredBaseAssessment):
    assessment_type: Literal["risk_screening_assessment"]
    risk_screenings: List[StoredRiskScreening]
    ai_system: StoredAISystem


class AssessmentConfigs(LFBaseModel):
    configurations: List[
        Union[TechnicalRiskAssessmentConfig, GuardrailsAssessmentConfig]
    ]


class StoredAssessments(LFBaseModel):
    assessments: List[
        Union[
            StoredTechnicalRiskAssessment,
            StoredGuardrailsAssessment,
            StoredRiskScreeningAssessment,
        ]
    ]


class StoredEligibleTechnicalRiskAssessments(LFBaseModel):
    eligible_technical_risk_assessments: List[StoredTechnicalRiskAssessment]


class Model(LFBaseModel):
    """
    Representation of a publicly accessible model.
    """

    display_name: str
    """
    The name of the Model.
    """

    key: Optional[str] = Field(
        None, max_length=250, min_length=3, pattern="^[a-z0-9_\\-]+$"
    )
    """
    Key: 3-250 chars, allowed: a-z 0-9 _ -
    """
    description: Optional[str] = None
    rate_limit: Optional[int] = None
    """
    The maximum allowed number of requests per minute.
    """
    modality: Modality
    task: Task
    adapter_id: str
    """
    The ID of the model adapter to be used with this model.
    """
    config: Union[ModelCustomConnectionConfig, ModelProviderConnectionConfig]
    """
    The configuration for connecting to the model.
    """


class StoredModel(Model, Id):
    ai_system_ids: List[str]
    """
    IDs of linked AI Systems.
    """
    capabilities: ModelCapabilities


class StoredModels(LFBaseModel):
    models: List[StoredModel]


class ModelProvider(LFBaseModel):
    """
    Represents an external company or entity that manages and exposes models.
    """

    id: Union[IntegrationModelProviderId, LocalModelProviderId]
    """
    The internal identifiers for all model providers known by the system.
    """
    display_name: str
    has_credentials: bool
    models: List[Model]


class ModelProviders(LFBaseModel):
    model_providers: List[ModelProvider]
